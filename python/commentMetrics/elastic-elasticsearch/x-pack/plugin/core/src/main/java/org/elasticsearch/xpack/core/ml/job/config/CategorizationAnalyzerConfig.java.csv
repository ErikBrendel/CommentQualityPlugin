# id;timestamp;commentText;codeText;commentWords;codeWords
CategorizationAnalyzerConfig -> Builder -> public CategorizationAnalyzerConfig build();1524684173;Create a config validating only structure, not exact analyzer/tokenizer/filter names;public CategorizationAnalyzerConfig build() {_            if (analyzer == null && tokenizer == null) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is not a global analyzer must specify a ["_                        + TOKENIZER + "] field")__            }_            if (analyzer != null && charFilters.isEmpty() == false) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + CHAR_FILTERS + "] field")__            }_            if (analyzer != null && tokenizer != null) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + TOKENIZER + "] field")__            }_            if (analyzer != null && tokenFilters.isEmpty() == false) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + TOKEN_FILTERS + "] field")__            }_            return new CategorizationAnalyzerConfig(analyzer, charFilters, tokenizer, tokenFilters)__        };create,a,config,validating,only,structure,not,exact,analyzer,tokenizer,filter,names;public,categorization,analyzer,config,build,if,analyzer,null,tokenizer,null,throw,new,illegal,argument,exception,that,is,not,a,global,analyzer,must,specify,a,tokenizer,field,if,analyzer,null,char,filters,is,empty,false,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,field,if,analyzer,null,tokenizer,null,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,tokenizer,field,if,analyzer,null,token,filters,is,empty,false,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,field,return,new,categorization,analyzer,config,analyzer,char,filters,tokenizer,token,filters
CategorizationAnalyzerConfig -> Builder -> public CategorizationAnalyzerConfig build();1531910483;Create a config validating only structure, not exact analyzer/tokenizer/filter names;public CategorizationAnalyzerConfig build() {_            if (analyzer == null && tokenizer == null) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is not a global analyzer must specify a ["_                        + TOKENIZER + "] field")__            }_            if (analyzer != null && charFilters.isEmpty() == false) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + CHAR_FILTERS + "] field")__            }_            if (analyzer != null && tokenizer != null) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + TOKENIZER + "] field")__            }_            if (analyzer != null && tokenFilters.isEmpty() == false) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + TOKEN_FILTERS + "] field")__            }_            return new CategorizationAnalyzerConfig(analyzer, charFilters, tokenizer, tokenFilters)__        };create,a,config,validating,only,structure,not,exact,analyzer,tokenizer,filter,names;public,categorization,analyzer,config,build,if,analyzer,null,tokenizer,null,throw,new,illegal,argument,exception,that,is,not,a,global,analyzer,must,specify,a,tokenizer,field,if,analyzer,null,char,filters,is,empty,false,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,field,if,analyzer,null,tokenizer,null,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,tokenizer,field,if,analyzer,null,token,filters,is,empty,false,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,field,return,new,categorization,analyzer,config,analyzer,char,filters,tokenizer,token,filters
CategorizationAnalyzerConfig -> Builder -> public CategorizationAnalyzerConfig build();1532685069;Create a config validating only structure, not exact analyzer/tokenizer/filter names;public CategorizationAnalyzerConfig build() {_            if (analyzer == null && tokenizer == null) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is not a global analyzer must specify a ["_                        + TOKENIZER + "] field")__            }_            if (analyzer != null && charFilters.isEmpty() == false) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + CHAR_FILTERS + "] field")__            }_            if (analyzer != null && tokenizer != null) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + TOKENIZER + "] field")__            }_            if (analyzer != null && tokenFilters.isEmpty() == false) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + TOKEN_FILTERS + "] field")__            }_            return new CategorizationAnalyzerConfig(analyzer, charFilters, tokenizer, tokenFilters)__        };create,a,config,validating,only,structure,not,exact,analyzer,tokenizer,filter,names;public,categorization,analyzer,config,build,if,analyzer,null,tokenizer,null,throw,new,illegal,argument,exception,that,is,not,a,global,analyzer,must,specify,a,tokenizer,field,if,analyzer,null,char,filters,is,empty,false,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,field,if,analyzer,null,tokenizer,null,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,tokenizer,field,if,analyzer,null,token,filters,is,empty,false,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,field,return,new,categorization,analyzer,config,analyzer,char,filters,tokenizer,token,filters
CategorizationAnalyzerConfig -> Builder -> public CategorizationAnalyzerConfig build();1545155131;Create a config validating only structure, not exact analyzer/tokenizer/filter names;public CategorizationAnalyzerConfig build() {_            if (analyzer == null && tokenizer == null) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is not a global analyzer must specify a ["_                        + TOKENIZER + "] field")__            }_            if (analyzer != null && charFilters.isEmpty() == false) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + CHAR_FILTERS + "] field")__            }_            if (analyzer != null && tokenizer != null) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + TOKENIZER + "] field")__            }_            if (analyzer != null && tokenFilters.isEmpty() == false) {_                throw new IllegalArgumentException(CATEGORIZATION_ANALYZER + " that is a global analyzer cannot also specify a ["_                        + TOKEN_FILTERS + "] field")__            }_            return new CategorizationAnalyzerConfig(analyzer, charFilters, tokenizer, tokenFilters)__        };create,a,config,validating,only,structure,not,exact,analyzer,tokenizer,filter,names;public,categorization,analyzer,config,build,if,analyzer,null,tokenizer,null,throw,new,illegal,argument,exception,that,is,not,a,global,analyzer,must,specify,a,tokenizer,field,if,analyzer,null,char,filters,is,empty,false,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,field,if,analyzer,null,tokenizer,null,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,tokenizer,field,if,analyzer,null,token,filters,is,empty,false,throw,new,illegal,argument,exception,that,is,a,global,analyzer,cannot,also,specify,a,field,return,new,categorization,analyzer,config,analyzer,char,filters,tokenizer,token,filters
CategorizationAnalyzerConfig -> public static CategorizationAnalyzerConfig buildDefaultCategorizationAnalyzer(List<String> categorizationFilters);1524684173;Create a <code>categorization_analyzer</code> that mimics what the tokenizer and filters built into the ML C++_code do.  This is the default analyzer for categorization to ensure that people upgrading from previous versions_get the same behaviour from their categorization jobs before and after upgrade._@param categorizationFilters Categorization filters (if any) from the <code>analysis_config</code>._@return The default categorization analyzer.;public static CategorizationAnalyzerConfig buildDefaultCategorizationAnalyzer(List<String> categorizationFilters) {__        CategorizationAnalyzerConfig.Builder builder = new CategorizationAnalyzerConfig.Builder()___        if (categorizationFilters != null) {_            for (String categorizationFilter : categorizationFilters) {_                Map<String, Object> charFilter = new HashMap<>()__                charFilter.put("type", "pattern_replace")__                charFilter.put("pattern", categorizationFilter)__                builder.addCharFilter(charFilter)__            }_        }__        builder.setTokenizer("ml_classic")___        Map<String, Object> tokenFilter = new HashMap<>()__        tokenFilter.put("type", "stop")__        tokenFilter.put("stopwords", Arrays.asList(_                "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday",_                "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun",_                "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December",_                "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",_                "GMT", "UTC"))__        builder.addTokenFilter(tokenFilter)___        return builder.build()__    };create,a,code,code,that,mimics,what,the,tokenizer,and,filters,built,into,the,ml,c,code,do,this,is,the,default,analyzer,for,categorization,to,ensure,that,people,upgrading,from,previous,versions,get,the,same,behaviour,from,their,categorization,jobs,before,and,after,upgrade,param,categorization,filters,categorization,filters,if,any,from,the,code,code,return,the,default,categorization,analyzer;public,static,categorization,analyzer,config,build,default,categorization,analyzer,list,string,categorization,filters,categorization,analyzer,config,builder,builder,new,categorization,analyzer,config,builder,if,categorization,filters,null,for,string,categorization,filter,categorization,filters,map,string,object,char,filter,new,hash,map,char,filter,put,type,char,filter,put,pattern,categorization,filter,builder,add,char,filter,char,filter,builder,set,tokenizer,map,string,object,token,filter,new,hash,map,token,filter,put,type,stop,token,filter,put,stopwords,arrays,as,list,monday,tuesday,wednesday,thursday,friday,saturday,sunday,mon,tue,wed,thu,fri,sat,sun,january,february,march,april,may,june,july,august,september,october,november,december,jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec,gmt,utc,builder,add,token,filter,token,filter,return,builder,build
CategorizationAnalyzerConfig -> public static CategorizationAnalyzerConfig buildDefaultCategorizationAnalyzer(List<String> categorizationFilters);1531910483;Create a <code>categorization_analyzer</code> that mimics what the tokenizer and filters built into the ML C++_code do.  This is the default analyzer for categorization to ensure that people upgrading from previous versions_get the same behaviour from their categorization jobs before and after upgrade._@param categorizationFilters Categorization filters (if any) from the <code>analysis_config</code>._@return The default categorization analyzer.;public static CategorizationAnalyzerConfig buildDefaultCategorizationAnalyzer(List<String> categorizationFilters) {__        CategorizationAnalyzerConfig.Builder builder = new CategorizationAnalyzerConfig.Builder()___        if (categorizationFilters != null) {_            for (String categorizationFilter : categorizationFilters) {_                Map<String, Object> charFilter = new HashMap<>()__                charFilter.put("type", "pattern_replace")__                charFilter.put("pattern", categorizationFilter)__                builder.addCharFilter(charFilter)__            }_        }__        builder.setTokenizer("ml_classic")___        Map<String, Object> tokenFilter = new HashMap<>()__        tokenFilter.put("type", "stop")__        tokenFilter.put("stopwords", Arrays.asList(_                "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday",_                "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun",_                "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December",_                "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",_                "GMT", "UTC"))__        builder.addTokenFilter(tokenFilter)___        return builder.build()__    };create,a,code,code,that,mimics,what,the,tokenizer,and,filters,built,into,the,ml,c,code,do,this,is,the,default,analyzer,for,categorization,to,ensure,that,people,upgrading,from,previous,versions,get,the,same,behaviour,from,their,categorization,jobs,before,and,after,upgrade,param,categorization,filters,categorization,filters,if,any,from,the,code,code,return,the,default,categorization,analyzer;public,static,categorization,analyzer,config,build,default,categorization,analyzer,list,string,categorization,filters,categorization,analyzer,config,builder,builder,new,categorization,analyzer,config,builder,if,categorization,filters,null,for,string,categorization,filter,categorization,filters,map,string,object,char,filter,new,hash,map,char,filter,put,type,char,filter,put,pattern,categorization,filter,builder,add,char,filter,char,filter,builder,set,tokenizer,map,string,object,token,filter,new,hash,map,token,filter,put,type,stop,token,filter,put,stopwords,arrays,as,list,monday,tuesday,wednesday,thursday,friday,saturday,sunday,mon,tue,wed,thu,fri,sat,sun,january,february,march,april,may,june,july,august,september,october,november,december,jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec,gmt,utc,builder,add,token,filter,token,filter,return,builder,build
CategorizationAnalyzerConfig -> public static CategorizationAnalyzerConfig buildDefaultCategorizationAnalyzer(List<String> categorizationFilters);1532685069;Create a <code>categorization_analyzer</code> that mimics what the tokenizer and filters built into the ML C++_code do.  This is the default analyzer for categorization to ensure that people upgrading from previous versions_get the same behaviour from their categorization jobs before and after upgrade._@param categorizationFilters Categorization filters (if any) from the <code>analysis_config</code>._@return The default categorization analyzer.;public static CategorizationAnalyzerConfig buildDefaultCategorizationAnalyzer(List<String> categorizationFilters) {__        CategorizationAnalyzerConfig.Builder builder = new CategorizationAnalyzerConfig.Builder()___        if (categorizationFilters != null) {_            for (String categorizationFilter : categorizationFilters) {_                Map<String, Object> charFilter = new HashMap<>()__                charFilter.put("type", "pattern_replace")__                charFilter.put("pattern", categorizationFilter)__                builder.addCharFilter(charFilter)__            }_        }__        builder.setTokenizer("ml_classic")___        Map<String, Object> tokenFilter = new HashMap<>()__        tokenFilter.put("type", "stop")__        tokenFilter.put("stopwords", Arrays.asList(_                "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday",_                "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun",_                "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December",_                "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",_                "GMT", "UTC"))__        builder.addTokenFilter(tokenFilter)___        return builder.build()__    };create,a,code,code,that,mimics,what,the,tokenizer,and,filters,built,into,the,ml,c,code,do,this,is,the,default,analyzer,for,categorization,to,ensure,that,people,upgrading,from,previous,versions,get,the,same,behaviour,from,their,categorization,jobs,before,and,after,upgrade,param,categorization,filters,categorization,filters,if,any,from,the,code,code,return,the,default,categorization,analyzer;public,static,categorization,analyzer,config,build,default,categorization,analyzer,list,string,categorization,filters,categorization,analyzer,config,builder,builder,new,categorization,analyzer,config,builder,if,categorization,filters,null,for,string,categorization,filter,categorization,filters,map,string,object,char,filter,new,hash,map,char,filter,put,type,char,filter,put,pattern,categorization,filter,builder,add,char,filter,char,filter,builder,set,tokenizer,map,string,object,token,filter,new,hash,map,token,filter,put,type,stop,token,filter,put,stopwords,arrays,as,list,monday,tuesday,wednesday,thursday,friday,saturday,sunday,mon,tue,wed,thu,fri,sat,sun,january,february,march,april,may,june,july,august,september,october,november,december,jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec,gmt,utc,builder,add,token,filter,token,filter,return,builder,build
CategorizationAnalyzerConfig -> public static CategorizationAnalyzerConfig buildDefaultCategorizationAnalyzer(List<String> categorizationFilters);1545155131;Create a <code>categorization_analyzer</code> that mimics what the tokenizer and filters built into the ML C++_code do.  This is the default analyzer for categorization to ensure that people upgrading from previous versions_get the same behaviour from their categorization jobs before and after upgrade._@param categorizationFilters Categorization filters (if any) from the <code>analysis_config</code>._@return The default categorization analyzer.;public static CategorizationAnalyzerConfig buildDefaultCategorizationAnalyzer(List<String> categorizationFilters) {__        CategorizationAnalyzerConfig.Builder builder = new CategorizationAnalyzerConfig.Builder()___        if (categorizationFilters != null) {_            for (String categorizationFilter : categorizationFilters) {_                Map<String, Object> charFilter = new HashMap<>()__                charFilter.put("type", "pattern_replace")__                charFilter.put("pattern", categorizationFilter)__                builder.addCharFilter(charFilter)__            }_        }__        builder.setTokenizer("ml_classic")___        Map<String, Object> tokenFilter = new HashMap<>()__        tokenFilter.put("type", "stop")__        tokenFilter.put("stopwords", Arrays.asList(_                "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday",_                "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun",_                "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December",_                "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",_                "GMT", "UTC"))__        builder.addTokenFilter(tokenFilter)___        return builder.build()__    };create,a,code,code,that,mimics,what,the,tokenizer,and,filters,built,into,the,ml,c,code,do,this,is,the,default,analyzer,for,categorization,to,ensure,that,people,upgrading,from,previous,versions,get,the,same,behaviour,from,their,categorization,jobs,before,and,after,upgrade,param,categorization,filters,categorization,filters,if,any,from,the,code,code,return,the,default,categorization,analyzer;public,static,categorization,analyzer,config,build,default,categorization,analyzer,list,string,categorization,filters,categorization,analyzer,config,builder,builder,new,categorization,analyzer,config,builder,if,categorization,filters,null,for,string,categorization,filter,categorization,filters,map,string,object,char,filter,new,hash,map,char,filter,put,type,char,filter,put,pattern,categorization,filter,builder,add,char,filter,char,filter,builder,set,tokenizer,map,string,object,token,filter,new,hash,map,token,filter,put,type,stop,token,filter,put,stopwords,arrays,as,list,monday,tuesday,wednesday,thursday,friday,saturday,sunday,mon,tue,wed,thu,fri,sat,sun,january,february,march,april,may,june,july,august,september,october,november,december,jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec,gmt,utc,builder,add,token,filter,token,filter,return,builder,build
CategorizationAnalyzerConfig -> public static CategorizationAnalyzerConfig buildFromXContentObject(XContentParser parser, boolean ignoreUnknownFields)         throws IOException;1532685069;This method is only used in the unit tests - in production code this config is always parsed as a fragment.;public static CategorizationAnalyzerConfig buildFromXContentObject(XContentParser parser, boolean ignoreUnknownFields)_        throws IOException {__        if (parser.nextToken() != XContentParser.Token.START_OBJECT) {_            throw new IllegalArgumentException("Expected start object but got [" + parser.currentToken() + "]")__        }_        if (parser.nextToken() != XContentParser.Token.FIELD_NAME_                || CATEGORIZATION_ANALYZER.match(parser.currentName(), parser.getDeprecationHandler()) == false) {_            throw new IllegalArgumentException("Expected [" + CATEGORIZATION_ANALYZER + "] field but got [" + parser.currentToken() + "]")__        }_        parser.nextToken()__        CategorizationAnalyzerConfig categorizationAnalyzerConfig = buildFromXContentFragment(parser, ignoreUnknownFields)__        parser.nextToken()__        return categorizationAnalyzerConfig__    };this,method,is,only,used,in,the,unit,tests,in,production,code,this,config,is,always,parsed,as,a,fragment;public,static,categorization,analyzer,config,build,from,xcontent,object,xcontent,parser,parser,boolean,ignore,unknown,fields,throws,ioexception,if,parser,next,token,xcontent,parser,token,throw,new,illegal,argument,exception,expected,start,object,but,got,parser,current,token,if,parser,next,token,xcontent,parser,token,match,parser,current,name,parser,get,deprecation,handler,false,throw,new,illegal,argument,exception,expected,field,but,got,parser,current,token,parser,next,token,categorization,analyzer,config,categorization,analyzer,config,build,from,xcontent,fragment,parser,ignore,unknown,fields,parser,next,token,return,categorization,analyzer,config
CategorizationAnalyzerConfig -> public static CategorizationAnalyzerConfig buildFromXContentObject(XContentParser parser, boolean ignoreUnknownFields)         throws IOException;1545155131;This method is only used in the unit tests - in production code this config is always parsed as a fragment.;public static CategorizationAnalyzerConfig buildFromXContentObject(XContentParser parser, boolean ignoreUnknownFields)_        throws IOException {__        if (parser.nextToken() != XContentParser.Token.START_OBJECT) {_            throw new IllegalArgumentException("Expected start object but got [" + parser.currentToken() + "]")__        }_        if (parser.nextToken() != XContentParser.Token.FIELD_NAME_                || CATEGORIZATION_ANALYZER.match(parser.currentName(), parser.getDeprecationHandler()) == false) {_            throw new IllegalArgumentException("Expected [" + CATEGORIZATION_ANALYZER + "] field but got [" + parser.currentToken() + "]")__        }_        parser.nextToken()__        CategorizationAnalyzerConfig categorizationAnalyzerConfig = buildFromXContentFragment(parser, ignoreUnknownFields)__        parser.nextToken()__        return categorizationAnalyzerConfig__    };this,method,is,only,used,in,the,unit,tests,in,production,code,this,config,is,always,parsed,as,a,fragment;public,static,categorization,analyzer,config,build,from,xcontent,object,xcontent,parser,parser,boolean,ignore,unknown,fields,throws,ioexception,if,parser,next,token,xcontent,parser,token,throw,new,illegal,argument,exception,expected,start,object,but,got,parser,current,token,if,parser,next,token,xcontent,parser,token,match,parser,current,name,parser,get,deprecation,handler,false,throw,new,illegal,argument,exception,expected,field,but,got,parser,current,token,parser,next,token,categorization,analyzer,config,categorization,analyzer,config,build,from,xcontent,fragment,parser,ignore,unknown,fields,parser,next,token,return,categorization,analyzer,config
CategorizationAnalyzerConfig -> static CategorizationAnalyzerConfig buildFromXContentFragment(XContentParser parser, MlParserType parserType) throws IOException;1524684173;Parse a <code>categorization_analyzer</code> from configuration or cluster state.  A custom parser is needed_due to the complexity of the format, with many elements able to be specified as either the name of a built-in_element or an object containing a custom definition.__The parser is strict when parsing config and lenient when parsing cluster state.;static CategorizationAnalyzerConfig buildFromXContentFragment(XContentParser parser, MlParserType parserType) throws IOException {__        CategorizationAnalyzerConfig.Builder builder = new CategorizationAnalyzerConfig.Builder()___        XContentParser.Token token = parser.currentToken()__        if (token == XContentParser.Token.VALUE_STRING) {_            builder.setAnalyzer(parser.text())__        } else if (token != XContentParser.Token.START_OBJECT) {_            throw new IllegalArgumentException("[" + CATEGORIZATION_ANALYZER + "] should be analyzer's name or settings [" + token + "]")__        } else {_            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (CHAR_FILTERS.match(currentFieldName, parser.getDeprecationHandler())_                        && token == XContentParser.Token.START_ARRAY) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            builder.addCharFilter(parser.text())__                        } else if (token == XContentParser.Token.START_OBJECT) {_                            builder.addCharFilter(parser.map())__                        } else {_                            throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                    "] array element should contain char_filter's name or settings [" + token + "]")__                        }_                    }_                } else if (TOKENIZER.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        builder.setTokenizer(parser.text())__                    } else if (token == XContentParser.Token.START_OBJECT) {_                        builder.setTokenizer(parser.map())__                    } else {_                        throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                "] should be tokenizer's name or settings [" + token + "]")__                    }_                } else if (TOKEN_FILTERS.match(currentFieldName, parser.getDeprecationHandler())_                        && token == XContentParser.Token.START_ARRAY) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            builder.addTokenFilter(parser.text())__                        } else if (token == XContentParser.Token.START_OBJECT) {_                            builder.addTokenFilter(parser.map())__                        } else {_                            throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                    "] array element should contain token_filter's name or settings [" + token + "]")__                        }_                    }_                _                } else if (parserType == MlParserType.CONFIG) {_                    throw new IllegalArgumentException("Parameter [" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                            "] is unknown or of the wrong type [" + token + "]")__                }_            }_        }__        return builder.build()__    };parse,a,code,code,from,configuration,or,cluster,state,a,custom,parser,is,needed,due,to,the,complexity,of,the,format,with,many,elements,able,to,be,specified,as,either,the,name,of,a,built,in,element,or,an,object,containing,a,custom,definition,the,parser,is,strict,when,parsing,config,and,lenient,when,parsing,cluster,state;static,categorization,analyzer,config,build,from,xcontent,fragment,xcontent,parser,parser,ml,parser,type,parser,type,throws,ioexception,categorization,analyzer,config,builder,builder,new,categorization,analyzer,config,builder,xcontent,parser,token,token,parser,current,token,if,token,xcontent,parser,token,builder,set,analyzer,parser,text,else,if,token,xcontent,parser,token,throw,new,illegal,argument,exception,should,be,analyzer,s,name,or,settings,token,else,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,match,current,field,name,parser,get,deprecation,handler,token,xcontent,parser,token,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,builder,add,char,filter,parser,text,else,if,token,xcontent,parser,token,builder,add,char,filter,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,array,element,should,contain,s,name,or,settings,token,else,if,tokenizer,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,builder,set,tokenizer,parser,text,else,if,token,xcontent,parser,token,builder,set,tokenizer,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,should,be,tokenizer,s,name,or,settings,token,else,if,match,current,field,name,parser,get,deprecation,handler,token,xcontent,parser,token,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,builder,add,token,filter,parser,text,else,if,token,xcontent,parser,token,builder,add,token,filter,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,array,element,should,contain,s,name,or,settings,token,else,if,parser,type,ml,parser,type,config,throw,new,illegal,argument,exception,parameter,current,field,name,in,is,unknown,or,of,the,wrong,type,token,return,builder,build
CategorizationAnalyzerConfig -> static CategorizationAnalyzerConfig buildFromXContentFragment(XContentParser parser, MlParserType parserType) throws IOException;1531910483;Parse a <code>categorization_analyzer</code> from configuration or cluster state.  A custom parser is needed_due to the complexity of the format, with many elements able to be specified as either the name of a built-in_element or an object containing a custom definition.__The parser is strict when parsing config and lenient when parsing cluster state.;static CategorizationAnalyzerConfig buildFromXContentFragment(XContentParser parser, MlParserType parserType) throws IOException {__        CategorizationAnalyzerConfig.Builder builder = new CategorizationAnalyzerConfig.Builder()___        XContentParser.Token token = parser.currentToken()__        if (token == XContentParser.Token.VALUE_STRING) {_            builder.setAnalyzer(parser.text())__        } else if (token != XContentParser.Token.START_OBJECT) {_            throw new IllegalArgumentException("[" + CATEGORIZATION_ANALYZER + "] should be analyzer's name or settings [" + token + "]")__        } else {_            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (CHAR_FILTERS.match(currentFieldName, parser.getDeprecationHandler())_                        && token == XContentParser.Token.START_ARRAY) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            builder.addCharFilter(parser.text())__                        } else if (token == XContentParser.Token.START_OBJECT) {_                            builder.addCharFilter(parser.map())__                        } else {_                            throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                    "] array element should contain char_filter's name or settings [" + token + "]")__                        }_                    }_                } else if (TOKENIZER.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        builder.setTokenizer(parser.text())__                    } else if (token == XContentParser.Token.START_OBJECT) {_                        builder.setTokenizer(parser.map())__                    } else {_                        throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                "] should be tokenizer's name or settings [" + token + "]")__                    }_                } else if (TOKEN_FILTERS.match(currentFieldName, parser.getDeprecationHandler())_                        && token == XContentParser.Token.START_ARRAY) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            builder.addTokenFilter(parser.text())__                        } else if (token == XContentParser.Token.START_OBJECT) {_                            builder.addTokenFilter(parser.map())__                        } else {_                            throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                    "] array element should contain token_filter's name or settings [" + token + "]")__                        }_                    }_                _                } else if (parserType == MlParserType.CONFIG) {_                    throw new IllegalArgumentException("Parameter [" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                            "] is unknown or of the wrong type [" + token + "]")__                }_            }_        }__        return builder.build()__    };parse,a,code,code,from,configuration,or,cluster,state,a,custom,parser,is,needed,due,to,the,complexity,of,the,format,with,many,elements,able,to,be,specified,as,either,the,name,of,a,built,in,element,or,an,object,containing,a,custom,definition,the,parser,is,strict,when,parsing,config,and,lenient,when,parsing,cluster,state;static,categorization,analyzer,config,build,from,xcontent,fragment,xcontent,parser,parser,ml,parser,type,parser,type,throws,ioexception,categorization,analyzer,config,builder,builder,new,categorization,analyzer,config,builder,xcontent,parser,token,token,parser,current,token,if,token,xcontent,parser,token,builder,set,analyzer,parser,text,else,if,token,xcontent,parser,token,throw,new,illegal,argument,exception,should,be,analyzer,s,name,or,settings,token,else,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,match,current,field,name,parser,get,deprecation,handler,token,xcontent,parser,token,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,builder,add,char,filter,parser,text,else,if,token,xcontent,parser,token,builder,add,char,filter,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,array,element,should,contain,s,name,or,settings,token,else,if,tokenizer,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,builder,set,tokenizer,parser,text,else,if,token,xcontent,parser,token,builder,set,tokenizer,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,should,be,tokenizer,s,name,or,settings,token,else,if,match,current,field,name,parser,get,deprecation,handler,token,xcontent,parser,token,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,builder,add,token,filter,parser,text,else,if,token,xcontent,parser,token,builder,add,token,filter,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,array,element,should,contain,s,name,or,settings,token,else,if,parser,type,ml,parser,type,config,throw,new,illegal,argument,exception,parameter,current,field,name,in,is,unknown,or,of,the,wrong,type,token,return,builder,build
CategorizationAnalyzerConfig -> public static CategorizationAnalyzerConfig buildFromXContentObject(XContentParser parser, MlParserType parserType) throws IOException;1524684173;This method is only used in the unit tests - in production code this config is always parsed as a fragment.;public static CategorizationAnalyzerConfig buildFromXContentObject(XContentParser parser, MlParserType parserType) throws IOException {__        if (parser.nextToken() != XContentParser.Token.START_OBJECT) {_            throw new IllegalArgumentException("Expected start object but got [" + parser.currentToken() + "]")__        }_        if (parser.nextToken() != XContentParser.Token.FIELD_NAME_                || CATEGORIZATION_ANALYZER.match(parser.currentName(), parser.getDeprecationHandler()) == false) {_            throw new IllegalArgumentException("Expected [" + CATEGORIZATION_ANALYZER + "] field but got [" + parser.currentToken() + "]")__        }_        parser.nextToken()__        CategorizationAnalyzerConfig categorizationAnalyzerConfig = buildFromXContentFragment(parser, parserType)__        parser.nextToken()__        return categorizationAnalyzerConfig__    };this,method,is,only,used,in,the,unit,tests,in,production,code,this,config,is,always,parsed,as,a,fragment;public,static,categorization,analyzer,config,build,from,xcontent,object,xcontent,parser,parser,ml,parser,type,parser,type,throws,ioexception,if,parser,next,token,xcontent,parser,token,throw,new,illegal,argument,exception,expected,start,object,but,got,parser,current,token,if,parser,next,token,xcontent,parser,token,match,parser,current,name,parser,get,deprecation,handler,false,throw,new,illegal,argument,exception,expected,field,but,got,parser,current,token,parser,next,token,categorization,analyzer,config,categorization,analyzer,config,build,from,xcontent,fragment,parser,parser,type,parser,next,token,return,categorization,analyzer,config
CategorizationAnalyzerConfig -> public static CategorizationAnalyzerConfig buildFromXContentObject(XContentParser parser, MlParserType parserType) throws IOException;1531910483;This method is only used in the unit tests - in production code this config is always parsed as a fragment.;public static CategorizationAnalyzerConfig buildFromXContentObject(XContentParser parser, MlParserType parserType) throws IOException {__        if (parser.nextToken() != XContentParser.Token.START_OBJECT) {_            throw new IllegalArgumentException("Expected start object but got [" + parser.currentToken() + "]")__        }_        if (parser.nextToken() != XContentParser.Token.FIELD_NAME_                || CATEGORIZATION_ANALYZER.match(parser.currentName(), parser.getDeprecationHandler()) == false) {_            throw new IllegalArgumentException("Expected [" + CATEGORIZATION_ANALYZER + "] field but got [" + parser.currentToken() + "]")__        }_        parser.nextToken()__        CategorizationAnalyzerConfig categorizationAnalyzerConfig = buildFromXContentFragment(parser, parserType)__        parser.nextToken()__        return categorizationAnalyzerConfig__    };this,method,is,only,used,in,the,unit,tests,in,production,code,this,config,is,always,parsed,as,a,fragment;public,static,categorization,analyzer,config,build,from,xcontent,object,xcontent,parser,parser,ml,parser,type,parser,type,throws,ioexception,if,parser,next,token,xcontent,parser,token,throw,new,illegal,argument,exception,expected,start,object,but,got,parser,current,token,if,parser,next,token,xcontent,parser,token,match,parser,current,name,parser,get,deprecation,handler,false,throw,new,illegal,argument,exception,expected,field,but,got,parser,current,token,parser,next,token,categorization,analyzer,config,categorization,analyzer,config,build,from,xcontent,fragment,parser,parser,type,parser,next,token,return,categorization,analyzer,config
CategorizationAnalyzerConfig -> static CategorizationAnalyzerConfig buildFromXContentFragment(XContentParser parser, boolean ignoreUnknownFields) throws IOException;1532685069;Parse a <code>categorization_analyzer</code> from configuration or cluster state.  A custom parser is needed_due to the complexity of the format, with many elements able to be specified as either the name of a built-in_element or an object containing a custom definition.__The parser is strict when parsing config and lenient when parsing cluster state.;static CategorizationAnalyzerConfig buildFromXContentFragment(XContentParser parser, boolean ignoreUnknownFields) throws IOException {__        CategorizationAnalyzerConfig.Builder builder = new CategorizationAnalyzerConfig.Builder()___        XContentParser.Token token = parser.currentToken()__        if (token == XContentParser.Token.VALUE_STRING) {_            builder.setAnalyzer(parser.text())__        } else if (token != XContentParser.Token.START_OBJECT) {_            throw new IllegalArgumentException("[" + CATEGORIZATION_ANALYZER + "] should be analyzer's name or settings [" + token + "]")__        } else {_            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (CHAR_FILTERS.match(currentFieldName, parser.getDeprecationHandler())_                        && token == XContentParser.Token.START_ARRAY) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            builder.addCharFilter(parser.text())__                        } else if (token == XContentParser.Token.START_OBJECT) {_                            builder.addCharFilter(parser.map())__                        } else {_                            throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                    "] array element should contain char_filter's name or settings [" + token + "]")__                        }_                    }_                } else if (TOKENIZER.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        builder.setTokenizer(parser.text())__                    } else if (token == XContentParser.Token.START_OBJECT) {_                        builder.setTokenizer(parser.map())__                    } else {_                        throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                "] should be tokenizer's name or settings [" + token + "]")__                    }_                } else if (TOKEN_FILTERS.match(currentFieldName, parser.getDeprecationHandler())_                        && token == XContentParser.Token.START_ARRAY) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            builder.addTokenFilter(parser.text())__                        } else if (token == XContentParser.Token.START_OBJECT) {_                            builder.addTokenFilter(parser.map())__                        } else {_                            throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                    "] array element should contain token_filter's name or settings [" + token + "]")__                        }_                    }_                _                } else if (ignoreUnknownFields == false) {_                    throw new IllegalArgumentException("Parameter [" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                            "] is unknown or of the wrong type [" + token + "]")__                }_            }_        }__        return builder.build()__    };parse,a,code,code,from,configuration,or,cluster,state,a,custom,parser,is,needed,due,to,the,complexity,of,the,format,with,many,elements,able,to,be,specified,as,either,the,name,of,a,built,in,element,or,an,object,containing,a,custom,definition,the,parser,is,strict,when,parsing,config,and,lenient,when,parsing,cluster,state;static,categorization,analyzer,config,build,from,xcontent,fragment,xcontent,parser,parser,boolean,ignore,unknown,fields,throws,ioexception,categorization,analyzer,config,builder,builder,new,categorization,analyzer,config,builder,xcontent,parser,token,token,parser,current,token,if,token,xcontent,parser,token,builder,set,analyzer,parser,text,else,if,token,xcontent,parser,token,throw,new,illegal,argument,exception,should,be,analyzer,s,name,or,settings,token,else,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,match,current,field,name,parser,get,deprecation,handler,token,xcontent,parser,token,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,builder,add,char,filter,parser,text,else,if,token,xcontent,parser,token,builder,add,char,filter,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,array,element,should,contain,s,name,or,settings,token,else,if,tokenizer,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,builder,set,tokenizer,parser,text,else,if,token,xcontent,parser,token,builder,set,tokenizer,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,should,be,tokenizer,s,name,or,settings,token,else,if,match,current,field,name,parser,get,deprecation,handler,token,xcontent,parser,token,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,builder,add,token,filter,parser,text,else,if,token,xcontent,parser,token,builder,add,token,filter,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,array,element,should,contain,s,name,or,settings,token,else,if,ignore,unknown,fields,false,throw,new,illegal,argument,exception,parameter,current,field,name,in,is,unknown,or,of,the,wrong,type,token,return,builder,build
CategorizationAnalyzerConfig -> static CategorizationAnalyzerConfig buildFromXContentFragment(XContentParser parser, boolean ignoreUnknownFields) throws IOException;1545155131;Parse a <code>categorization_analyzer</code> from configuration or cluster state.  A custom parser is needed_due to the complexity of the format, with many elements able to be specified as either the name of a built-in_element or an object containing a custom definition.__The parser is strict when parsing config and lenient when parsing cluster state.;static CategorizationAnalyzerConfig buildFromXContentFragment(XContentParser parser, boolean ignoreUnknownFields) throws IOException {__        CategorizationAnalyzerConfig.Builder builder = new CategorizationAnalyzerConfig.Builder()___        XContentParser.Token token = parser.currentToken()__        if (token == XContentParser.Token.VALUE_STRING) {_            builder.setAnalyzer(parser.text())__        } else if (token != XContentParser.Token.START_OBJECT) {_            throw new IllegalArgumentException("[" + CATEGORIZATION_ANALYZER + "] should be analyzer's name or settings [" + token + "]")__        } else {_            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (CHAR_FILTERS.match(currentFieldName, parser.getDeprecationHandler())_                        && token == XContentParser.Token.START_ARRAY) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            builder.addCharFilter(parser.text())__                        } else if (token == XContentParser.Token.START_OBJECT) {_                            builder.addCharFilter(parser.map())__                        } else {_                            throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                    "] array element should contain char_filter's name or settings [" + token + "]")__                        }_                    }_                } else if (TOKENIZER.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        builder.setTokenizer(parser.text())__                    } else if (token == XContentParser.Token.START_OBJECT) {_                        builder.setTokenizer(parser.map())__                    } else {_                        throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                "] should be tokenizer's name or settings [" + token + "]")__                    }_                } else if (TOKEN_FILTERS.match(currentFieldName, parser.getDeprecationHandler())_                        && token == XContentParser.Token.START_ARRAY) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            builder.addTokenFilter(parser.text())__                        } else if (token == XContentParser.Token.START_OBJECT) {_                            builder.addTokenFilter(parser.map())__                        } else {_                            throw new IllegalArgumentException("[" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                                    "] array element should contain token_filter's name or settings [" + token + "]")__                        }_                    }_                _                } else if (ignoreUnknownFields == false) {_                    throw new IllegalArgumentException("Parameter [" + currentFieldName + "] in [" + CATEGORIZATION_ANALYZER +_                            "] is unknown or of the wrong type [" + token + "]")__                }_            }_        }__        return builder.build()__    };parse,a,code,code,from,configuration,or,cluster,state,a,custom,parser,is,needed,due,to,the,complexity,of,the,format,with,many,elements,able,to,be,specified,as,either,the,name,of,a,built,in,element,or,an,object,containing,a,custom,definition,the,parser,is,strict,when,parsing,config,and,lenient,when,parsing,cluster,state;static,categorization,analyzer,config,build,from,xcontent,fragment,xcontent,parser,parser,boolean,ignore,unknown,fields,throws,ioexception,categorization,analyzer,config,builder,builder,new,categorization,analyzer,config,builder,xcontent,parser,token,token,parser,current,token,if,token,xcontent,parser,token,builder,set,analyzer,parser,text,else,if,token,xcontent,parser,token,throw,new,illegal,argument,exception,should,be,analyzer,s,name,or,settings,token,else,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,match,current,field,name,parser,get,deprecation,handler,token,xcontent,parser,token,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,builder,add,char,filter,parser,text,else,if,token,xcontent,parser,token,builder,add,char,filter,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,array,element,should,contain,s,name,or,settings,token,else,if,tokenizer,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,builder,set,tokenizer,parser,text,else,if,token,xcontent,parser,token,builder,set,tokenizer,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,should,be,tokenizer,s,name,or,settings,token,else,if,match,current,field,name,parser,get,deprecation,handler,token,xcontent,parser,token,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,builder,add,token,filter,parser,text,else,if,token,xcontent,parser,token,builder,add,token,filter,parser,map,else,throw,new,illegal,argument,exception,current,field,name,in,array,element,should,contain,s,name,or,settings,token,else,if,ignore,unknown,fields,false,throw,new,illegal,argument,exception,parameter,current,field,name,in,is,unknown,or,of,the,wrong,type,token,return,builder,build
