commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;22;;private static ConstructingObjectParser<Forecast, Void> createParser(boolean ignoreUnknownFields) {     ConstructingObjectParser<Forecast, Void> parser = new ConstructingObjectParser<>(RESULT_TYPE_VALUE, ignoreUnknownFields, a -> new Forecast((String) a[0], (String) a[1], (Date) a[2], (long) a[3], (int) a[4])).     parser.declareString(ConstructingObjectParser.constructorArg(), Job.ID).     parser.declareString(ConstructingObjectParser.constructorArg(), FORECAST_ID).     parser.declareField(ConstructingObjectParser.constructorArg(), p -> TimeUtils.parseTimeField(p, Result.TIMESTAMP.getPreferredName()), Result.TIMESTAMP, ValueType.VALUE).     parser.declareLong(ConstructingObjectParser.constructorArg(), BUCKET_SPAN).     parser.declareInt(ConstructingObjectParser.constructorArg(), DETECTOR_INDEX).     parser.declareString((modelForecast, s) -> {     }, Result.RESULT_TYPE).     parser.declareString(Forecast::setPartitionFieldName, PARTITION_FIELD_NAME).     parser.declareString(Forecast::setPartitionFieldValue, PARTITION_FIELD_VALUE).     parser.declareString(Forecast::setByFieldName, BY_FIELD_NAME).     parser.declareString(Forecast::setByFieldValue, BY_FIELD_VALUE).     parser.declareString(Forecast::setModelFeature, MODEL_FEATURE).     parser.declareDouble(Forecast::setForecastLower, FORECAST_LOWER).     parser.declareDouble(Forecast::setForecastUpper, FORECAST_UPPER).     parser.declareDouble(Forecast::setForecastPrediction, FORECAST_PREDICTION).     return parser. }
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(jobId).     out.writeString(forecastId).     out.writeLong(timestamp.getTime()).     out.writeOptionalString(partitionFieldName).     out.writeOptionalString(partitionFieldValue).     out.writeOptionalString(byFieldName).     out.writeOptionalString(byFieldValue).     out.writeOptionalString(modelFeature).     out.writeDouble(forecastLower).     out.writeDouble(forecastUpper).     out.writeDouble(forecastPrediction).     out.writeLong(bucketSpan).     out.writeInt(detectorIndex). }
false;public;2;33;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(FORECAST_ID.getPreferredName(), forecastId).     builder.field(Result.RESULT_TYPE.getPreferredName(), RESULT_TYPE_VALUE).     builder.field(BUCKET_SPAN.getPreferredName(), bucketSpan).     builder.field(DETECTOR_INDEX.getPreferredName(), detectorIndex).     if (timestamp != null) {         builder.timeField(Result.TIMESTAMP.getPreferredName(), Result.TIMESTAMP.getPreferredName() + "_string", timestamp.getTime()).     }     if (partitionFieldName != null) {         builder.field(PARTITION_FIELD_NAME.getPreferredName(), partitionFieldName).     }     if (partitionFieldValue != null) {         builder.field(PARTITION_FIELD_VALUE.getPreferredName(), partitionFieldValue).     }     if (byFieldName != null) {         builder.field(BY_FIELD_NAME.getPreferredName(), byFieldName).     }     if (byFieldValue != null) {         builder.field(BY_FIELD_VALUE.getPreferredName(), byFieldValue).     }     if (modelFeature != null) {         builder.field(MODEL_FEATURE.getPreferredName(), modelFeature).     }     builder.field(FORECAST_LOWER.getPreferredName(), forecastLower).     builder.field(FORECAST_UPPER.getPreferredName(), forecastUpper).     builder.field(FORECAST_PREDICTION.getPreferredName(), forecastPrediction).     builder.endObject().     return builder. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public String getForecastId() {     return forecastId. }
false;public;0;8;;public String getId() {     int valuesHash = Objects.hash(byFieldValue, partitionFieldValue).     int length = (byFieldValue == null ? 0 : byFieldValue.length()) + (partitionFieldValue == null ? 0 : partitionFieldValue.length()).     return jobId + "_model_forecast_" + forecastId + "_" + timestamp.getTime() + "_" + bucketSpan + "_" + detectorIndex + "_" + valuesHash + "_" + length. }
false;public;0;3;;public Date getTimestamp() {     return timestamp. }
false;public;0;3;;public long getBucketSpan() {     return bucketSpan. }
false;public;0;3;;public String getPartitionFieldName() {     return partitionFieldName. }
false;public;1;3;;public void setPartitionFieldName(String partitionFieldName) {     this.partitionFieldName = partitionFieldName. }
false;public;0;3;;public int getDetectorIndex() {     return detectorIndex. }
false;public;0;3;;public String getPartitionFieldValue() {     return partitionFieldValue. }
false;public;1;3;;public void setPartitionFieldValue(String partitionFieldValue) {     this.partitionFieldValue = partitionFieldValue. }
false;public;0;3;;public String getByFieldName() {     return byFieldName. }
false;public;1;3;;public void setByFieldName(String byFieldName) {     this.byFieldName = byFieldName. }
false;public;0;3;;public String getByFieldValue() {     return byFieldValue. }
false;public;1;3;;public void setByFieldValue(String byFieldValue) {     this.byFieldValue = byFieldValue. }
false;public;0;3;;public String getModelFeature() {     return modelFeature. }
false;public;1;3;;public void setModelFeature(String modelFeature) {     this.modelFeature = modelFeature. }
false;public;0;3;;public double getForecastLower() {     return forecastLower. }
false;public;1;3;;public void setForecastLower(double forecastLower) {     this.forecastLower = forecastLower. }
false;public;0;3;;public double getForecastUpper() {     return forecastUpper. }
false;public;1;3;;public void setForecastUpper(double forecastUpper) {     this.forecastUpper = forecastUpper. }
false;public;0;3;;public double getForecastPrediction() {     return forecastPrediction. }
false;public;1;3;;public void setForecastPrediction(double forecastPrediction) {     this.forecastPrediction = forecastPrediction. }
false;public;1;23;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof Forecast == false) {         return false.     }     Forecast that = (Forecast) other.     return Objects.equals(this.jobId, that.jobId) && Objects.equals(this.forecastId, that.forecastId) && Objects.equals(this.timestamp, that.timestamp) && Objects.equals(this.partitionFieldValue, that.partitionFieldValue) && Objects.equals(this.partitionFieldName, that.partitionFieldName) && Objects.equals(this.byFieldValue, that.byFieldValue) && Objects.equals(this.byFieldName, that.byFieldName) && Objects.equals(this.modelFeature, that.modelFeature) && this.forecastLower == that.forecastLower && this.forecastUpper == that.forecastUpper && this.forecastPrediction == that.forecastPrediction && this.bucketSpan == that.bucketSpan && this.detectorIndex == that.detectorIndex. }
false;public;0;6;;@Override public int hashCode() {     return Objects.hash(jobId, forecastId, timestamp, partitionFieldName, partitionFieldValue, byFieldName, byFieldValue, modelFeature, forecastLower, forecastUpper, forecastPrediction, bucketSpan, detectorIndex). }
