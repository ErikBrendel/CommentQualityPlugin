commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public Writeable.Reader<Response> getResponseReader() {     return Response::new. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalString(name). }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Request request = (Request) o.     return Objects.equals(name, request.name). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(name). }
false;public;0;3;;public Map<String, AutoFollowPattern> getAutoFollowPatterns() {     return autoFollowPatterns. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeMap(autoFollowPatterns, StreamOutput::writeString, (out1, value) -> value.writeTo(out1)). }
false;public;2;22;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         builder.startArray("patterns").         for (Map.Entry<String, AutoFollowPattern> entry : autoFollowPatterns.entrySet()) {             builder.startObject().             {                 builder.field("name", entry.getKey()).                 builder.startObject("pattern").                 {                     entry.getValue().toXContent(builder, params).                 }                 builder.endObject().             }             builder.endObject().         }         builder.endArray().     }     builder.endObject().     return builder. }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Response response = (Response) o.     return Objects.equals(autoFollowPatterns, response.autoFollowPatterns). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(autoFollowPatterns). }
