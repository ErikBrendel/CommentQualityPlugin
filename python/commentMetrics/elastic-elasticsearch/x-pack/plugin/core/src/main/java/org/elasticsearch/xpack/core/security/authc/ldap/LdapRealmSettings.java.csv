# id;timestamp;commentText;codeText;commentWords;codeWords
LdapRealmSettings -> public static Set<Setting<?>> getSettings(String type);1524684173;@param type Either {@link #AD_TYPE} or {@link #LDAP_TYPE}_@return The {@link Setting setting configuration} for this realm type;public static Set<Setting<?>> getSettings(String type) {_        Set<Setting<?>> settings = new HashSet<>()__        settings.addAll(CachingUsernamePasswordRealmSettings.getCachingSettings())__        settings.addAll(CompositeRoleMapperSettings.getSettings())__        settings.add(LdapRealmSettings.EXECUTION_TIMEOUT)__        if (AD_TYPE.equals(type)) {_            settings.addAll(ActiveDirectorySessionFactorySettings.getSettings())__        } else {_            assert LDAP_TYPE.equals(type) : "type [" + type + "] is unknown. expected one of [" + AD_TYPE + ", " + LDAP_TYPE + "]"__            settings.addAll(LdapSessionFactorySettings.getSettings())__            settings.addAll(LdapUserSearchSessionFactorySettings.getSettings())__        }_        settings.addAll(LdapMetaDataResolverSettings.getSettings())__        return settings__    };param,type,either,link,or,link,return,the,link,setting,setting,configuration,for,this,realm,type;public,static,set,setting,get,settings,string,type,set,setting,settings,new,hash,set,settings,add,all,caching,username,password,realm,settings,get,caching,settings,settings,add,all,composite,role,mapper,settings,get,settings,settings,add,ldap,realm,settings,if,equals,type,settings,add,all,active,directory,session,factory,settings,get,settings,else,assert,equals,type,type,type,is,unknown,expected,one,of,settings,add,all,ldap,session,factory,settings,get,settings,settings,add,all,ldap,user,search,session,factory,settings,get,settings,settings,add,all,ldap,meta,data,resolver,settings,get,settings,return,settings
LdapRealmSettings -> public static Set<Setting<?>> getSettings(String type);1535723122;@param type Either {@link #AD_TYPE} or {@link #LDAP_TYPE}_@return The {@link Setting setting configuration} for this realm type;public static Set<Setting<?>> getSettings(String type) {_        Set<Setting<?>> settings = new HashSet<>()__        settings.addAll(CachingUsernamePasswordRealmSettings.getCachingSettings())__        settings.addAll(CompositeRoleMapperSettings.getSettings())__        settings.add(LdapRealmSettings.EXECUTION_TIMEOUT)__        if (AD_TYPE.equals(type)) {_            settings.addAll(ActiveDirectorySessionFactorySettings.getSettings())__        } else {_            assert LDAP_TYPE.equals(type) : "type [" + type + "] is unknown. expected one of [" + AD_TYPE + ", " + LDAP_TYPE + "]"__            settings.addAll(LdapSessionFactorySettings.getSettings())__            settings.addAll(LdapUserSearchSessionFactorySettings.getSettings())__            settings.addAll(DelegatedAuthorizationSettings.getSettings())__        }_        settings.addAll(LdapMetaDataResolverSettings.getSettings())__        return settings__    };param,type,either,link,or,link,return,the,link,setting,setting,configuration,for,this,realm,type;public,static,set,setting,get,settings,string,type,set,setting,settings,new,hash,set,settings,add,all,caching,username,password,realm,settings,get,caching,settings,settings,add,all,composite,role,mapper,settings,get,settings,settings,add,ldap,realm,settings,if,equals,type,settings,add,all,active,directory,session,factory,settings,get,settings,else,assert,equals,type,type,type,is,unknown,expected,one,of,settings,add,all,ldap,session,factory,settings,get,settings,settings,add,all,ldap,user,search,session,factory,settings,get,settings,settings,add,all,delegated,authorization,settings,get,settings,settings,add,all,ldap,meta,data,resolver,settings,get,settings,return,settings
LdapRealmSettings -> public static Set<Setting<?>> getSettings(String type);1539615817;@param type Either {@link #AD_TYPE} or {@link #LDAP_TYPE}_@return The {@link Setting setting configuration} for this realm type;public static Set<Setting<?>> getSettings(String type) {_        Set<Setting<?>> settings = new HashSet<>()__        settings.addAll(CachingUsernamePasswordRealmSettings.getSettings())__        settings.addAll(CompositeRoleMapperSettings.getSettings())__        settings.add(LdapRealmSettings.EXECUTION_TIMEOUT)__        if (AD_TYPE.equals(type)) {_            settings.addAll(ActiveDirectorySessionFactorySettings.getSettings())__        } else {_            assert LDAP_TYPE.equals(type) : "type [" + type + "] is unknown. expected one of [" + AD_TYPE + ", " + LDAP_TYPE + "]"__            settings.addAll(LdapSessionFactorySettings.getSettings())__            settings.addAll(LdapUserSearchSessionFactorySettings.getSettings())__            settings.addAll(DelegatedAuthorizationSettings.getSettings())__        }_        settings.addAll(LdapMetaDataResolverSettings.getSettings())__        return settings__    };param,type,either,link,or,link,return,the,link,setting,setting,configuration,for,this,realm,type;public,static,set,setting,get,settings,string,type,set,setting,settings,new,hash,set,settings,add,all,caching,username,password,realm,settings,get,settings,settings,add,all,composite,role,mapper,settings,get,settings,settings,add,ldap,realm,settings,if,equals,type,settings,add,all,active,directory,session,factory,settings,get,settings,else,assert,equals,type,type,type,is,unknown,expected,one,of,settings,add,all,ldap,session,factory,settings,get,settings,settings,add,all,ldap,user,search,session,factory,settings,get,settings,settings,add,all,delegated,authorization,settings,get,settings,settings,add,all,ldap,meta,data,resolver,settings,get,settings,return,settings
