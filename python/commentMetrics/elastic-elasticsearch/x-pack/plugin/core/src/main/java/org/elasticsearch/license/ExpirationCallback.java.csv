# id;timestamp;commentText;codeText;commentWords;codeWords
ExpirationCallback -> final TimeValue delay(long expirationDate, long now);1524684173;Calculates the delay for the next trigger time. When <code>now</code> is in a_valid time bracket with respect to <code>expirationDate</code>, the delay is 0._When <code>now</code> is before the time bracket, than delay to the start of the_time bracket and when <code>now</code> is passed the valid time bracket, the delay_is <code>null</code>_@param expirationDate license expiry date in milliseconds_@param now current time in milliseconds_@return time delay;final TimeValue delay(long expirationDate, long now) {_        final TimeValue delay__        switch (orientation) {_            case PRE:_                if (expirationDate >= now) {_                    _                    long preExpiryDuration = expirationDate - now__                    if (preExpiryDuration > max) {_                        _                        delay = TimeValue.timeValueMillis(preExpiryDuration - max)__                    } else if (preExpiryDuration <= max && preExpiryDuration >= min) {_                        _                        delay = TimeValue.timeValueMillis(0)__                    } else {_                        _                        delay = null__                    }_                } else {_                    _                    delay = null__                }_                break__            case POST:_                if (expirationDate >= now) {_                    _                    delay = TimeValue.timeValueMillis(expirationDate - now + min)__                } else {_                    _                    long expiredDuration = now - expirationDate__                    if (expiredDuration < min) {_                        _                        delay = TimeValue.timeValueMillis(min - expiredDuration)__                    } else if (expiredDuration >= min && expiredDuration <= max) {_                        _                        delay = TimeValue.timeValueMillis(0)__                    } else {_                        _                        delay = null__                    }_                }_                break__            default:_                throw new IllegalStateException("orientation [" + orientation + "] unknown")__        }_        return delay__    };calculates,the,delay,for,the,next,trigger,time,when,code,now,code,is,in,a,valid,time,bracket,with,respect,to,code,expiration,date,code,the,delay,is,0,when,code,now,code,is,before,the,time,bracket,than,delay,to,the,start,of,the,time,bracket,and,when,code,now,code,is,passed,the,valid,time,bracket,the,delay,is,code,null,code,param,expiration,date,license,expiry,date,in,milliseconds,param,now,current,time,in,milliseconds,return,time,delay;final,time,value,delay,long,expiration,date,long,now,final,time,value,delay,switch,orientation,case,pre,if,expiration,date,now,long,pre,expiry,duration,expiration,date,now,if,pre,expiry,duration,max,delay,time,value,time,value,millis,pre,expiry,duration,max,else,if,pre,expiry,duration,max,pre,expiry,duration,min,delay,time,value,time,value,millis,0,else,delay,null,else,delay,null,break,case,post,if,expiration,date,now,delay,time,value,time,value,millis,expiration,date,now,min,else,long,expired,duration,now,expiration,date,if,expired,duration,min,delay,time,value,time,value,millis,min,expired,duration,else,if,expired,duration,min,expired,duration,max,delay,time,value,time,value,millis,0,else,delay,null,break,default,throw,new,illegal,state,exception,orientation,orientation,unknown,return,delay
ExpirationCallback -> final TimeValue delay(long expirationDate, long now);1528762805;Calculates the delay for the next trigger time. When <code>now</code> is in a_valid time bracket with respect to <code>expirationDate</code>, the delay is 0._When <code>now</code> is before the time bracket, than delay to the start of the_time bracket and when <code>now</code> is passed the valid time bracket, the delay_is <code>null</code>_@param expirationDate license expiry date in milliseconds_@param now current time in milliseconds_@return time delay;final TimeValue delay(long expirationDate, long now) {_        final TimeValue delay__        switch (orientation) {_            case PRE:_                if (expirationDate >= now) {_                    _                    long preExpiryDuration = expirationDate - now__                    if (preExpiryDuration > max) {_                        _                        delay = TimeValue.timeValueMillis(preExpiryDuration - max)__                    } else if (preExpiryDuration <= max && preExpiryDuration >= min) {_                        _                        delay = TimeValue.timeValueMillis(0)__                    } else {_                        _                        delay = null__                    }_                } else {_                    _                    delay = null__                }_                break__            case POST:_                if (expirationDate >= now) {_                    _                    delay = TimeValue.timeValueMillis(expirationDate - now + min)__                } else {_                    _                    long expiredDuration = now - expirationDate__                    if (expiredDuration < min) {_                        _                        delay = TimeValue.timeValueMillis(min - expiredDuration)__                    } else if (expiredDuration >= min && expiredDuration <= max) {_                        _                        delay = TimeValue.timeValueMillis(0)__                    } else {_                        _                        delay = null__                    }_                }_                break__            default:_                throw new IllegalStateException("orientation [" + orientation + "] unknown")__        }_        return delay__    };calculates,the,delay,for,the,next,trigger,time,when,code,now,code,is,in,a,valid,time,bracket,with,respect,to,code,expiration,date,code,the,delay,is,0,when,code,now,code,is,before,the,time,bracket,than,delay,to,the,start,of,the,time,bracket,and,when,code,now,code,is,passed,the,valid,time,bracket,the,delay,is,code,null,code,param,expiration,date,license,expiry,date,in,milliseconds,param,now,current,time,in,milliseconds,return,time,delay;final,time,value,delay,long,expiration,date,long,now,final,time,value,delay,switch,orientation,case,pre,if,expiration,date,now,long,pre,expiry,duration,expiration,date,now,if,pre,expiry,duration,max,delay,time,value,time,value,millis,pre,expiry,duration,max,else,if,pre,expiry,duration,max,pre,expiry,duration,min,delay,time,value,time,value,millis,0,else,delay,null,else,delay,null,break,case,post,if,expiration,date,now,delay,time,value,time,value,millis,expiration,date,now,min,else,long,expired,duration,now,expiration,date,if,expired,duration,min,delay,time,value,time,value,millis,min,expired,duration,else,if,expired,duration,min,expired,duration,max,delay,time,value,time,value,millis,0,else,delay,null,break,default,throw,new,illegal,state,exception,orientation,orientation,unknown,return,delay
ExpirationCallback -> final TimeValue delay(long expirationDate, long now);1531179852;Calculates the delay for the next trigger time. When <code>now</code> is in a_valid time bracket with respect to <code>expirationDate</code>, the delay is 0._When <code>now</code> is before the time bracket, than delay to the start of the_time bracket and when <code>now</code> is passed the valid time bracket, the delay_is <code>null</code>_@param expirationDate license expiry date in milliseconds_@param now current time in milliseconds_@return time delay;final TimeValue delay(long expirationDate, long now) {_        final TimeValue delay__        switch (orientation) {_            case PRE:_                if (expirationDate >= now) {_                    _                    long preExpiryDuration = expirationDate - now__                    if (preExpiryDuration > max) {_                        _                        delay = TimeValue.timeValueMillis(preExpiryDuration - max)__                    } else if (preExpiryDuration <= max && preExpiryDuration >= min) {_                        _                        delay = TimeValue.timeValueMillis(0)__                    } else {_                        _                        delay = null__                    }_                } else {_                    _                    delay = null__                }_                break__            case POST:_                if (expirationDate >= now) {_                    _                    delay = TimeValue.timeValueMillis(expirationDate - now + min)__                } else {_                    _                    long expiredDuration = now - expirationDate__                    if (expiredDuration < min) {_                        _                        delay = TimeValue.timeValueMillis(min - expiredDuration)__                    } else if (expiredDuration >= min && expiredDuration <= max) {_                        _                        delay = TimeValue.timeValueMillis(0)__                    } else {_                        _                        delay = null__                    }_                }_                break__            default:_                throw new IllegalStateException("orientation [" + orientation + "] unknown")__        }_        return delay__    };calculates,the,delay,for,the,next,trigger,time,when,code,now,code,is,in,a,valid,time,bracket,with,respect,to,code,expiration,date,code,the,delay,is,0,when,code,now,code,is,before,the,time,bracket,than,delay,to,the,start,of,the,time,bracket,and,when,code,now,code,is,passed,the,valid,time,bracket,the,delay,is,code,null,code,param,expiration,date,license,expiry,date,in,milliseconds,param,now,current,time,in,milliseconds,return,time,delay;final,time,value,delay,long,expiration,date,long,now,final,time,value,delay,switch,orientation,case,pre,if,expiration,date,now,long,pre,expiry,duration,expiration,date,now,if,pre,expiry,duration,max,delay,time,value,time,value,millis,pre,expiry,duration,max,else,if,pre,expiry,duration,max,pre,expiry,duration,min,delay,time,value,time,value,millis,0,else,delay,null,else,delay,null,break,case,post,if,expiration,date,now,delay,time,value,time,value,millis,expiration,date,now,min,else,long,expired,duration,now,expiration,date,if,expired,duration,min,delay,time,value,time,value,millis,min,expired,duration,else,if,expired,duration,min,expired,duration,max,delay,time,value,time,value,millis,0,else,delay,null,break,default,throw,new,illegal,state,exception,orientation,orientation,unknown,return,delay
ExpirationCallback -> public abstract void on(License license)_;1524684173;Code to execute when the expiry callback is triggered in a valid_time bracket_@param license license to operate on;public abstract void on(License license)_;code,to,execute,when,the,expiry,callback,is,triggered,in,a,valid,time,bracket,param,license,license,to,operate,on;public,abstract,void,on,license,license
ExpirationCallback -> public abstract void on(License license)_;1528762805;Code to execute when the expiry callback is triggered in a valid_time bracket_@param license license to operate on;public abstract void on(License license)_;code,to,execute,when,the,expiry,callback,is,triggered,in,a,valid,time,bracket,param,license,license,to,operate,on;public,abstract,void,on,license,license
ExpirationCallback -> public abstract void on(License license)_;1531179852;Code to execute when the expiry callback is triggered in a valid_time bracket_@param license license to operate on;public abstract void on(License license)_;code,to,execute,when,the,expiry,callback,is,triggered,in,a,valid,time,bracket,param,license,license,to,operate,on;public,abstract,void,on,license,license
ExpirationCallback -> Pre -> Pre(TimeValue min, TimeValue max, TimeValue frequency);1524684173;Callback schedule prior to license expiry__@param min       latest relative time to execute before license expiry_@param max       earliest relative time to execute before license expiry_@param frequency interval between execution;Pre(TimeValue min, TimeValue max, TimeValue frequency) {_            super(Orientation.PRE, min, max, frequency)__        };callback,schedule,prior,to,license,expiry,param,min,latest,relative,time,to,execute,before,license,expiry,param,max,earliest,relative,time,to,execute,before,license,expiry,param,frequency,interval,between,execution;pre,time,value,min,time,value,max,time,value,frequency,super,orientation,pre,min,max,frequency
ExpirationCallback -> Pre -> Pre(TimeValue min, TimeValue max, TimeValue frequency);1528762805;Callback schedule prior to license expiry__@param min       latest relative time to execute before license expiry_@param max       earliest relative time to execute before license expiry_@param frequency interval between execution;Pre(TimeValue min, TimeValue max, TimeValue frequency) {_            super(Orientation.PRE, min, max, frequency)__        };callback,schedule,prior,to,license,expiry,param,min,latest,relative,time,to,execute,before,license,expiry,param,max,earliest,relative,time,to,execute,before,license,expiry,param,frequency,interval,between,execution;pre,time,value,min,time,value,max,time,value,frequency,super,orientation,pre,min,max,frequency
ExpirationCallback -> Pre -> Pre(TimeValue min, TimeValue max, TimeValue frequency);1531179852;Callback schedule prior to license expiry__@param min       latest relative time to execute before license expiry_@param max       earliest relative time to execute before license expiry_@param frequency interval between execution;Pre(TimeValue min, TimeValue max, TimeValue frequency) {_            super(Orientation.PRE, min, max, frequency)__        };callback,schedule,prior,to,license,expiry,param,min,latest,relative,time,to,execute,before,license,expiry,param,max,earliest,relative,time,to,execute,before,license,expiry,param,frequency,interval,between,execution;pre,time,value,min,time,value,max,time,value,frequency,super,orientation,pre,min,max,frequency
ExpirationCallback -> Post -> Post(TimeValue min, TimeValue max, TimeValue frequency);1524684173;Callback schedule after license expiry__@param min       earliest relative time to execute after license expiry_@param max       latest relative time to execute after license expiry_@param frequency interval between execution;Post(TimeValue min, TimeValue max, TimeValue frequency) {_            super(Orientation.POST, min, max, frequency)__        };callback,schedule,after,license,expiry,param,min,earliest,relative,time,to,execute,after,license,expiry,param,max,latest,relative,time,to,execute,after,license,expiry,param,frequency,interval,between,execution;post,time,value,min,time,value,max,time,value,frequency,super,orientation,post,min,max,frequency
ExpirationCallback -> Post -> Post(TimeValue min, TimeValue max, TimeValue frequency);1528762805;Callback schedule after license expiry__@param min       earliest relative time to execute after license expiry_@param max       latest relative time to execute after license expiry_@param frequency interval between execution;Post(TimeValue min, TimeValue max, TimeValue frequency) {_            super(Orientation.POST, min, max, frequency)__        };callback,schedule,after,license,expiry,param,min,earliest,relative,time,to,execute,after,license,expiry,param,max,latest,relative,time,to,execute,after,license,expiry,param,frequency,interval,between,execution;post,time,value,min,time,value,max,time,value,frequency,super,orientation,post,min,max,frequency
ExpirationCallback -> Post -> Post(TimeValue min, TimeValue max, TimeValue frequency);1531179852;Callback schedule after license expiry__@param min       earliest relative time to execute after license expiry_@param max       latest relative time to execute after license expiry_@param frequency interval between execution;Post(TimeValue min, TimeValue max, TimeValue frequency) {_            super(Orientation.POST, min, max, frequency)__        };callback,schedule,after,license,expiry,param,min,earliest,relative,time,to,execute,after,license,expiry,param,max,latest,relative,time,to,execute,after,license,expiry,param,frequency,interval,between,execution;post,time,value,min,time,value,max,time,value,frequency,super,orientation,post,min,max,frequency
ExpirationCallback -> public final long nextScheduledTimeForExpiry(long expiryDate, long startTime, long time);1524684173;{@link SchedulerEngine.Schedule#nextScheduledTimeAfter(long, long)} with respect to_license expiry date;public final long nextScheduledTimeForExpiry(long expiryDate, long startTime, long time) {_        TimeValue delay = delay(expiryDate, time)__        if (delay != null) {_            long delayInMillis = delay.getMillis()__            if (delayInMillis == 0L) {_                if (startTime == time) {_                    _                    return time__                } else {_                    _                    return time + frequency__                }_            } else {_                _                return time + delayInMillis__            }_        }_        return -1__    };link,scheduler,engine,schedule,next,scheduled,time,after,long,long,with,respect,to,license,expiry,date;public,final,long,next,scheduled,time,for,expiry,long,expiry,date,long,start,time,long,time,time,value,delay,delay,expiry,date,time,if,delay,null,long,delay,in,millis,delay,get,millis,if,delay,in,millis,0l,if,start,time,time,return,time,else,return,time,frequency,else,return,time,delay,in,millis,return,1
ExpirationCallback -> public final long nextScheduledTimeForExpiry(long expiryDate, long startTime, long time);1528762805;{@link SchedulerEngine.Schedule#nextScheduledTimeAfter(long, long)} with respect to_license expiry date;public final long nextScheduledTimeForExpiry(long expiryDate, long startTime, long time) {_        TimeValue delay = delay(expiryDate, time)__        if (delay != null) {_            long delayInMillis = delay.getMillis()__            if (delayInMillis == 0L) {_                if (startTime == time) {_                    _                    return time__                } else {_                    _                    return time + frequency__                }_            } else {_                _                return time + delayInMillis__            }_        }_        return -1__    };link,scheduler,engine,schedule,next,scheduled,time,after,long,long,with,respect,to,license,expiry,date;public,final,long,next,scheduled,time,for,expiry,long,expiry,date,long,start,time,long,time,time,value,delay,delay,expiry,date,time,if,delay,null,long,delay,in,millis,delay,get,millis,if,delay,in,millis,0l,if,start,time,time,return,time,else,return,time,frequency,else,return,time,delay,in,millis,return,1
ExpirationCallback -> public final long nextScheduledTimeForExpiry(long expiryDate, long startTime, long time);1531179852;{@link org.elasticsearch.xpack.core.scheduler.SchedulerEngine.Schedule#nextScheduledTimeAfter(long, long)}_with respect to license expiry date;public final long nextScheduledTimeForExpiry(long expiryDate, long startTime, long time) {_        TimeValue delay = delay(expiryDate, time)__        if (delay != null) {_            long delayInMillis = delay.getMillis()__            if (delayInMillis == 0L) {_                if (startTime == time) {_                    _                    return time__                } else {_                    _                    return time + frequency__                }_            } else {_                _                return time + delayInMillis__            }_        }_        return -1__    };link,org,elasticsearch,xpack,core,scheduler,scheduler,engine,schedule,next,scheduled,time,after,long,long,with,respect,to,license,expiry,date;public,final,long,next,scheduled,time,for,expiry,long,expiry,date,long,start,time,long,time,time,value,delay,delay,expiry,date,time,if,delay,null,long,delay,in,millis,delay,get,millis,if,delay,in,millis,0l,if,start,time,time,return,time,else,return,time,frequency,else,return,time,delay,in,millis,return,1
