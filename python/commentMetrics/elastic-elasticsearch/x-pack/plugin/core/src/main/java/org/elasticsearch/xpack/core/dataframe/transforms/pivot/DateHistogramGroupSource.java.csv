commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;33;;private static ConstructingObjectParser<DateHistogramGroupSource, Void> createParser(boolean lenient) {     ConstructingObjectParser<DateHistogramGroupSource, Void> parser = new ConstructingObjectParser<>(NAME, lenient, (args) -> {         String field = (String) args[0].         return new DateHistogramGroupSource(field).     }).     declareValuesSourceFields(parser, null).     parser.declareField((histogram, interval) -> {         if (interval instanceof Long) {             histogram.setInterval((long) interval).         } else {             histogram.setDateHistogramInterval((DateHistogramInterval) interval).         }     }, p -> {         if (p.currentToken() == XContentParser.Token.VALUE_NUMBER) {             return p.longValue().         } else {             return new DateHistogramInterval(p.text()).         }     }, HistogramGroupSource.INTERVAL, ObjectParser.ValueType.LONG).     parser.declareField(DateHistogramGroupSource::setTimeZone, p -> {         if (p.currentToken() == XContentParser.Token.VALUE_STRING) {             return ZoneId.of(p.text()).         } else {             return ZoneOffset.ofHours(p.intValue()).         }     }, TIME_ZONE, ObjectParser.ValueType.LONG).     parser.declareString(DateHistogramGroupSource::setFormat, FORMAT).     return parser. }
false;public,static;2;3;;public static DateHistogramGroupSource fromXContent(final XContentParser parser, boolean lenient) throws IOException {     return lenient ? LENIENT_PARSER.apply(parser, null) : STRICT_PARSER.apply(parser, null). }
false;public;0;4;;@Override public Type getType() {     return Type.DATE_HISTOGRAM. }
false;public;0;3;;public long getInterval() {     return interval. }
false;public;1;6;;public void setInterval(long interval) {     if (interval < 1) {         throw new IllegalArgumentException("[interval] must be greater than or equal to 1.").     }     this.interval = interval. }
false;public;0;3;;public DateHistogramInterval getDateHistogramInterval() {     return dateHistogramInterval. }
false;public;1;6;;public void setDateHistogramInterval(DateHistogramInterval dateHistogramInterval) {     if (dateHistogramInterval == null) {         throw new IllegalArgumentException("[dateHistogramInterval] must not be null").     }     this.dateHistogramInterval = dateHistogramInterval. }
false;public;0;3;;public String getFormat() {     return format. }
false;public;1;3;;public void setFormat(String format) {     this.format = format. }
false;public;0;3;;public ZoneId getTimeZone() {     return timeZone. }
false;public;1;3;;public void setTimeZone(ZoneId timeZone) {     this.timeZone = timeZone. }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(field).     out.writeLong(interval).     out.writeOptionalWriteable(dateHistogramInterval).     out.writeOptionalZoneId(timeZone).     out.writeOptionalString(format). }
false;public;2;20;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (field != null) {         builder.field(FIELD.getPreferredName(), field).     }     if (dateHistogramInterval == null) {         builder.field(HistogramGroupSource.INTERVAL.getPreferredName(), interval).     } else {         builder.field(HistogramGroupSource.INTERVAL.getPreferredName(), dateHistogramInterval.toString()).     }     if (timeZone != null) {         builder.field(TIME_ZONE.getPreferredName(), timeZone.toString()).     }     if (format != null) {         builder.field(FORMAT.getPreferredName(), format).     }     builder.endObject().     return builder. }
false;public;1;18;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final DateHistogramGroupSource that = (DateHistogramGroupSource) other.     return Objects.equals(this.field, that.field) && Objects.equals(interval, that.interval) && Objects.equals(dateHistogramInterval, that.dateHistogramInterval) && Objects.equals(timeZone, that.timeZone) && Objects.equals(format, that.format). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(field, interval, dateHistogramInterval, timeZone, format). }
