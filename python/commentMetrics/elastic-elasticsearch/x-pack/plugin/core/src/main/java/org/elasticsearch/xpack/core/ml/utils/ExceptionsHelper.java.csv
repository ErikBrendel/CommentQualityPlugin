commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static ResourceNotFoundException missingJobException(String jobId) {     return new ResourceNotFoundException(Messages.getMessage(Messages.JOB_UNKNOWN_ID, jobId)). }
false;public,static;1;3;;public static ResourceAlreadyExistsException jobAlreadyExists(String jobId) {     return new ResourceAlreadyExistsException(Messages.getMessage(Messages.JOB_CONFIG_ID_ALREADY_TAKEN, jobId)). }
false;public,static;1;3;;public static ResourceNotFoundException missingDatafeedException(String datafeedId) {     return new ResourceNotFoundException(Messages.getMessage(Messages.DATAFEED_NOT_FOUND, datafeedId)). }
false;public,static;1;3;;public static ResourceAlreadyExistsException datafeedAlreadyExists(String datafeedId) {     return new ResourceAlreadyExistsException(Messages.getMessage(Messages.DATAFEED_ID_ALREADY_TAKEN, datafeedId)). }
false;public,static;1;3;;public static ElasticsearchException serverError(String msg) {     return new ElasticsearchException(msg). }
false;public,static;2;3;;public static ElasticsearchException serverError(String msg, Throwable cause) {     return new ElasticsearchException(msg, cause). }
false;public,static;3;3;;public static ElasticsearchStatusException conflictStatusException(String msg, Throwable cause, Object... args) {     return new ElasticsearchStatusException(msg, RestStatus.CONFLICT, cause, args). }
false;public,static;2;3;;public static ElasticsearchStatusException conflictStatusException(String msg, Object... args) {     return new ElasticsearchStatusException(msg, RestStatus.CONFLICT, args). }
false;public,static;3;3;;public static ElasticsearchStatusException badRequestException(String msg, Throwable cause, Object... args) {     return new ElasticsearchStatusException(msg, RestStatus.BAD_REQUEST, cause, args). }
false;public,static;2;3;;public static ElasticsearchStatusException badRequestException(String msg, Object... args) {     return new ElasticsearchStatusException(msg, RestStatus.BAD_REQUEST, args). }
false;public,static;2;4;;public static ElasticsearchStatusException configHasNotBeenMigrated(String verb, String id) {     return new ElasticsearchStatusException("cannot {} as the configuration [{}] is temporarily pending migration", RestStatus.SERVICE_UNAVAILABLE, verb, id). }
true;public,static;2;9;/**  * Creates an error message that explains there are shard failures, displays info  * for the first failure (shard/reason) and kindly asks to see more info in the logs  */ ;/**  * Creates an error message that explains there are shard failures, displays info  * for the first failure (shard/reason) and kindly asks to see more info in the logs  */ public static String shardFailuresToErrorMsg(String jobId, ShardSearchFailure[] shardFailures) {     if (shardFailures == null || shardFailures.length == 0) {         throw new IllegalStateException("Invalid call with null or empty shardFailures").     }     SearchShardTarget shardTarget = shardFailures[0].shard().     return "[" + jobId + "] Search request returned shard failures. first failure: shard [" + (shardTarget == null ? "_na" : shardTarget) + "], reason [" + shardFailures[0].reason() + "]. see logs for more info". }
true;public,static;2;6;/**  * A more REST-friendly Object.requireNonNull()  */ ;/**  * A more REST-friendly Object.requireNonNull()  */ public static <T> T requireNonNull(T obj, String paramName) {     if (obj == null) {         throw new IllegalArgumentException("[" + paramName + "] must not be null.").     }     return obj. }
