# id;timestamp;commentText;codeText;commentWords;codeWords
LicenseUtils -> public static ElasticsearchSecurityException newComplianceException(String feature);1524684173;Exception to be thrown when a feature action requires a valid license, but license_has expired__<code>feature</code> accessible through {@link #EXPIRED_FEATURE_METADATA} in the_exception's rest header;public static ElasticsearchSecurityException newComplianceException(String feature) {_        ElasticsearchSecurityException e = new ElasticsearchSecurityException("current license is non-compliant for [{}]",_                RestStatus.FORBIDDEN, feature)__        e.addMetadata(EXPIRED_FEATURE_METADATA, feature)__        return e__    };exception,to,be,thrown,when,a,feature,action,requires,a,valid,license,but,license,has,expired,code,feature,code,accessible,through,link,in,the,exception,s,rest,header;public,static,elasticsearch,security,exception,new,compliance,exception,string,feature,elasticsearch,security,exception,e,new,elasticsearch,security,exception,current,license,is,non,compliant,for,rest,status,forbidden,feature,e,add,metadata,feature,return,e
LicenseUtils -> public static ElasticsearchSecurityException newComplianceException(String feature);1525334055;Exception to be thrown when a feature action requires a valid license, but license_has expired__<code>feature</code> accessible through {@link #EXPIRED_FEATURE_METADATA} in the_exception's rest header;public static ElasticsearchSecurityException newComplianceException(String feature) {_        ElasticsearchSecurityException e = new ElasticsearchSecurityException("current license is non-compliant for [{}]",_                RestStatus.FORBIDDEN, feature)__        e.addMetadata(EXPIRED_FEATURE_METADATA, feature)__        return e__    };exception,to,be,thrown,when,a,feature,action,requires,a,valid,license,but,license,has,expired,code,feature,code,accessible,through,link,in,the,exception,s,rest,header;public,static,elasticsearch,security,exception,new,compliance,exception,string,feature,elasticsearch,security,exception,e,new,elasticsearch,security,exception,current,license,is,non,compliant,for,rest,status,forbidden,feature,e,add,metadata,feature,return,e
LicenseUtils -> public static ElasticsearchSecurityException newComplianceException(String feature);1528211342;Exception to be thrown when a feature action requires a valid license, but license_has expired__<code>feature</code> accessible through {@link #EXPIRED_FEATURE_METADATA} in the_exception's rest header;public static ElasticsearchSecurityException newComplianceException(String feature) {_        ElasticsearchSecurityException e = new ElasticsearchSecurityException("current license is non-compliant for [{}]",_                RestStatus.FORBIDDEN, feature)__        e.addMetadata(EXPIRED_FEATURE_METADATA, feature)__        return e__    };exception,to,be,thrown,when,a,feature,action,requires,a,valid,license,but,license,has,expired,code,feature,code,accessible,through,link,in,the,exception,s,rest,header;public,static,elasticsearch,security,exception,new,compliance,exception,string,feature,elasticsearch,security,exception,e,new,elasticsearch,security,exception,current,license,is,non,compliant,for,rest,status,forbidden,feature,e,add,metadata,feature,return,e
LicenseUtils -> public static boolean isLicenseExpiredException(ElasticsearchSecurityException exception);1524684173;Checks if a given {@link ElasticsearchSecurityException} refers to a feature that_requires a valid license, but the license has expired.;public static boolean isLicenseExpiredException(ElasticsearchSecurityException exception) {_        return (exception != null) && (exception.getMetadata(EXPIRED_FEATURE_METADATA) != null)__    };checks,if,a,given,link,elasticsearch,security,exception,refers,to,a,feature,that,requires,a,valid,license,but,the,license,has,expired;public,static,boolean,is,license,expired,exception,elasticsearch,security,exception,exception,return,exception,null,exception,get,metadata,null
LicenseUtils -> public static boolean isLicenseExpiredException(ElasticsearchSecurityException exception);1525334055;Checks if a given {@link ElasticsearchSecurityException} refers to a feature that_requires a valid license, but the license has expired.;public static boolean isLicenseExpiredException(ElasticsearchSecurityException exception) {_        return (exception != null) && (exception.getMetadata(EXPIRED_FEATURE_METADATA) != null)__    };checks,if,a,given,link,elasticsearch,security,exception,refers,to,a,feature,that,requires,a,valid,license,but,the,license,has,expired;public,static,boolean,is,license,expired,exception,elasticsearch,security,exception,exception,return,exception,null,exception,get,metadata,null
LicenseUtils -> public static boolean isLicenseExpiredException(ElasticsearchSecurityException exception);1528211342;Checks if a given {@link ElasticsearchSecurityException} refers to a feature that_requires a valid license, but the license has expired.;public static boolean isLicenseExpiredException(ElasticsearchSecurityException exception) {_        return (exception != null) && (exception.getMetadata(EXPIRED_FEATURE_METADATA) != null)__    };checks,if,a,given,link,elasticsearch,security,exception,refers,to,a,feature,that,requires,a,valid,license,but,the,license,has,expired;public,static,boolean,is,license,expired,exception,elasticsearch,security,exception,exception,return,exception,null,exception,get,metadata,null
