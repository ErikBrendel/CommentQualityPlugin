commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Asynchronously resolves any necessary information to authorize the given user(s). This could  * include retrieval of permissions from an index or external system.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param listener the listener to be notified of success using {@link ActionListener#onResponse(Object)}  *                 or failure using {@link ActionListener#onFailure(Exception)}  */ ;/**  * Asynchronously resolves any necessary information to authorize the given user(s). This could  * include retrieval of permissions from an index or external system.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param listener the listener to be notified of success using {@link ActionListener#onResponse(Object)}  *                 or failure using {@link ActionListener#onFailure(Exception)}  */ void resolveAuthorizationInfo(RequestInfo requestInfo, ActionListener<AuthorizationInfo> listener).
true;;3;1;/**  * Asynchronously authorizes an attempt for a user to run as another user.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param listener the listener to be notified of the authorization result  */ ;/**  * Asynchronously authorizes an attempt for a user to run as another user.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param listener the listener to be notified of the authorization result  */ void authorizeRunAs(RequestInfo requestInfo, AuthorizationInfo authorizationInfo, ActionListener<AuthorizationResult> listener).
true;;3;1;/**  * Asynchronously authorizes a cluster action.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param listener the listener to be notified of the authorization result  */ ;/**  * Asynchronously authorizes a cluster action.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param listener the listener to be notified of the authorization result  */ void authorizeClusterAction(RequestInfo requestInfo, AuthorizationInfo authorizationInfo, ActionListener<AuthorizationResult> listener).
true;;5;3;/**  * Asynchronously authorizes an action that operates on an index. The indices and aliases that  * the request is attempting to operate on can be retrieved using the {@link AsyncSupplier} for  * {@link ResolvedIndices}. The resolved indices will contain the exact list of indices and aliases  * that the request is attempting to take action on. in other words this supplier handles wildcard  * expansion and datemath expressions.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param indicesAsyncSupplier the asynchronous supplier for the indices that this request is  *                             attempting to operate on  * @param aliasOrIndexLookup a map of a string name to the cluster metadata specific to that  *                            alias or index  * @param listener the listener to be notified of the authorization result  */ ;/**  * Asynchronously authorizes an action that operates on an index. The indices and aliases that  * the request is attempting to operate on can be retrieved using the {@link AsyncSupplier} for  * {@link ResolvedIndices}. The resolved indices will contain the exact list of indices and aliases  * that the request is attempting to take action on. in other words this supplier handles wildcard  * expansion and datemath expressions.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param indicesAsyncSupplier the asynchronous supplier for the indices that this request is  *                             attempting to operate on  * @param aliasOrIndexLookup a map of a string name to the cluster metadata specific to that  *                            alias or index  * @param listener the listener to be notified of the authorization result  */ void authorizeIndexAction(RequestInfo requestInfo, AuthorizationInfo authorizationInfo, AsyncSupplier<ResolvedIndices> indicesAsyncSupplier, Map<String, AliasOrIndex> aliasOrIndexLookup, ActionListener<IndexAuthorizationResult> listener).
true;;4;2;/**  * Asynchronously loads a list of alias and index names for which the user is authorized  * to execute the requested action.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param aliasOrIndexLookup a map of a string name to the cluster metadata specific to that  *                            alias or index  * @param listener the listener to be notified of the authorization result  */ ;/**  * Asynchronously loads a list of alias and index names for which the user is authorized  * to execute the requested action.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param aliasOrIndexLookup a map of a string name to the cluster metadata specific to that  *                            alias or index  * @param listener the listener to be notified of the authorization result  */ void loadAuthorizedIndices(RequestInfo requestInfo, AuthorizationInfo authorizationInfo, Map<String, AliasOrIndex> aliasOrIndexLookup, ActionListener<List<String>> listener).
true;;4;2;/**  * Asynchronously checks that the permissions a user would have for a given list of names do  * not exceed their permissions for a given name. This is used to ensure that a user cannot  * perform operations that would escalate their privileges over the data. Some examples include  * adding an alias to gain more permissions to a given index and/or resizing an index in order  * to gain more privileges on the data since the index name changes.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param indexNameToNewNames A map of an existing index/alias name to a one or more names of  *                            an index/alias that the user is requesting to create. The method  *                            should validate that none of the names have more permissions than  *                            the name in the key would have.  * @param listener the listener to be notified of the authorization result  */ ;/**  * Asynchronously checks that the permissions a user would have for a given list of names do  * not exceed their permissions for a given name. This is used to ensure that a user cannot  * perform operations that would escalate their privileges over the data. Some examples include  * adding an alias to gain more permissions to a given index and/or resizing an index in order  * to gain more privileges on the data since the index name changes.  *  * @param requestInfo object contain the request and associated information such as the action  *                    and associated user(s)  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param indexNameToNewNames A map of an existing index/alias name to a one or more names of  *                            an index/alias that the user is requesting to create. The method  *                            should validate that none of the names have more permissions than  *                            the name in the key would have.  * @param listener the listener to be notified of the authorization result  */ void validateIndexPermissionsAreSubset(RequestInfo requestInfo, AuthorizationInfo authorizationInfo, Map<String, List<String>> indexNameToNewNames, ActionListener<AuthorizationResult> listener).
true;;5;3;/**  * Checks the current user's privileges against those that being requested to check in the  * request. This provides a way for an application to ask if a user has permission to perform  * an action or if they have permissions to an application resource.  *  * @param authentication the authentication that is associated with this request  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param hasPrivilegesRequest the request that contains the privileges to check for the user  * @param applicationPrivilegeDescriptors a collection of application privilege descriptors  * @param listener the listener to be notified of the has privileges response  */ ;/**  * Checks the current user's privileges against those that being requested to check in the  * request. This provides a way for an application to ask if a user has permission to perform  * an action or if they have permissions to an application resource.  *  * @param authentication the authentication that is associated with this request  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param hasPrivilegesRequest the request that contains the privileges to check for the user  * @param applicationPrivilegeDescriptors a collection of application privilege descriptors  * @param listener the listener to be notified of the has privileges response  */ void checkPrivileges(Authentication authentication, AuthorizationInfo authorizationInfo, HasPrivilegesRequest hasPrivilegesRequest, Collection<ApplicationPrivilegeDescriptor> applicationPrivilegeDescriptors, ActionListener<HasPrivilegesResponse> listener).
true;;4;2;/**  * Retrieve's the current user's privileges in a standard format that can be rendered via an  * API for an application to understand the privileges that the current user has.  *  * @param authentication the authentication that is associated with this request  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param request the request for retrieving the user's privileges  * @param listener the listener to be notified of the has privileges response  */ ;/**  * Retrieve's the current user's privileges in a standard format that can be rendered via an  * API for an application to understand the privileges that the current user has.  *  * @param authentication the authentication that is associated with this request  * @param authorizationInfo information needed from authorization that was previously retrieved  *                          from {@link #resolveAuthorizationInfo(RequestInfo, ActionListener)}  * @param request the request for retrieving the user's privileges  * @param listener the listener to be notified of the has privileges response  */ void getUserPrivileges(Authentication authentication, AuthorizationInfo authorizationInfo, GetUserPrivilegesRequest request, ActionListener<GetUserPrivilegesResponse> listener).
true;;0;1;/**  * @return a map representation of the authorization information. This map will be used to  * augment the data that is audited, so in the case of RBAC this map could contain the  * role names.  */ ;/**  * @return a map representation of the authorization information. This map will be used to  * augment the data that is audited, so in the case of RBAC this map could contain the  * role names.  */ Map<String, Object> asMap().
true;default;0;3;/**  * This method should be overridden in case of run as. Authorization info is only retrieved  * a single time and should represent the information to authorize both run as and the  * operation being performed.  */ ;/**  * This method should be overridden in case of run as. Authorization info is only retrieved  * a single time and should represent the information to authorize both run as and the  * operation being performed.  */ default AuthorizationInfo getAuthenticatedUserAuthorizationInfo() {     return this. }
false;public;0;4;;@Override public Map<String, Object> asMap() {     return Collections.emptyMap(). }
false;public;0;3;;public String getAction() {     return action. }
false;public;0;3;;public Authentication getAuthentication() {     return authentication. }
false;public;0;3;;public TransportRequest getRequest() {     return request. }
false;public;0;3;;public boolean isGranted() {     return granted. }
false;public;0;3;;public boolean isAuditable() {     return auditable. }
true;public,static;0;3;/**  * Returns a new authorization result that is granted and auditable  */ ;/**  * Returns a new authorization result that is granted and auditable  */ public static AuthorizationResult granted() {     return new AuthorizationResult(true). }
true;public,static;0;3;/**  * Returns a new authorization result that is denied and auditable  */ ;/**  * Returns a new authorization result that is denied and auditable  */ public static AuthorizationResult deny() {     return new AuthorizationResult(false). }
false;public;0;3;;public IndicesAccessControl getIndicesAccessControl() {     return indicesAccessControl. }
true;;1;1;/**  * Asynchronously retrieves the value that is being supplied and notifies the listener upon  * completion.  */ ;/**  * Asynchronously retrieves the value that is being supplied and notifies the listener upon  * completion.  */ void getAsync(ActionListener<V> listener).
