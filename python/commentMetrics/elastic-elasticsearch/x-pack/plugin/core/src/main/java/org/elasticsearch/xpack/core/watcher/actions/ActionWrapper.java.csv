# id;timestamp;commentText;codeText;commentWords;codeWords
ActionWrapper -> public ActionWrapperResult execute(WatchExecutionContext ctx);1524684173;Execute the current {@link #action()}._<p>_This executes in the order of:_<ol>_<li>Throttling</li>_<li>Conditional Check</li>_<li>Transformation</li>_<li>Action</li>_</ol>__@param ctx The current watch's context_@return Never {@code null};public ActionWrapperResult execute(WatchExecutionContext ctx) {_        ActionWrapperResult result = ctx.actionsResults().get(id)__        if (result != null) {_            return result__        }_        if (!ctx.skipThrottling(id)) {_            Throttler.Result throttleResult = throttler.throttle(id, ctx)__            if (throttleResult.throttle()) {_                if (throttleResult.type() == Throttler.Type.ACK) {_                    return new ActionWrapperResult(id, new Action.Result.Acknowledged(action.type(), throttleResult.reason()))__                } else {_                    return new ActionWrapperResult(id, new Action.Result.Throttled(action.type(), throttleResult.reason()))__                }_            }_        }_        Condition.Result conditionResult = null__        if (condition != null) {_            try {_                conditionResult = condition.execute(ctx)__                if (conditionResult.met() == false) {_                    ctx.watch().status().actionStatus(id).resetAckStatus(DateTime.now(DateTimeZone.UTC))__                    return new ActionWrapperResult(id, conditionResult, null,_                                                    new Action.Result.ConditionFailed(action.type(), "condition not met. skipping"))__                }_            } catch (RuntimeException e) {_                action.logger().error(_                        (Supplier<?>) () -> new ParameterizedMessage(_                                "failed to execute action [{}/{}]. failed to execute condition", ctx.watch().id(), id), e)__                return new ActionWrapperResult(id, new Action.Result.ConditionFailed(action.type(),_                                                "condition failed. skipping: {}", e.getMessage()))__            }_        }_        Payload payload = ctx.payload()__        Transform.Result transformResult = null__        if (transform != null) {_            try {_                transformResult = transform.execute(ctx, payload)__                if (transformResult.status() == Transform.Result.Status.FAILURE) {_                    action.logger().error("failed to execute action [{}/{}]. failed to transform payload. {}", ctx.watch().id(), id,_                            transformResult.reason())__                    String msg = "Failed to transform payload"__                    return new ActionWrapperResult(id, conditionResult, transformResult, new Action.Result.Failure(action.type(), msg))__                }_                payload = transformResult.payload()__            } catch (Exception e) {_                action.logger().error(_                        (Supplier<?>) () -> new ParameterizedMessage(_                                "failed to execute action [{}/{}]. failed to transform payload.", ctx.watch().id(), id), e)__                return new ActionWrapperResult(id, conditionResult, null, new Action.Result.FailureWithException(action.type(), e))__            }_        }_        try {_            Action.Result actionResult = action.execute(id, ctx, payload)__            return new ActionWrapperResult(id, conditionResult, transformResult, actionResult)__        } catch (Exception e) {_            action.logger().error(_                    (Supplier<?>) () -> new ParameterizedMessage("failed to execute action [{}/{}]", ctx.watch().id(), id), e)__            return new ActionWrapperResult(id, new Action.Result.FailureWithException(action.type(), e))__        }_    };execute,the,current,link,action,p,this,executes,in,the,order,of,ol,li,throttling,li,li,conditional,check,li,li,transformation,li,li,action,li,ol,param,ctx,the,current,watch,s,context,return,never,code,null;public,action,wrapper,result,execute,watch,execution,context,ctx,action,wrapper,result,result,ctx,actions,results,get,id,if,result,null,return,result,if,ctx,skip,throttling,id,throttler,result,throttle,result,throttler,throttle,id,ctx,if,throttle,result,throttle,if,throttle,result,type,throttler,type,ack,return,new,action,wrapper,result,id,new,action,result,acknowledged,action,type,throttle,result,reason,else,return,new,action,wrapper,result,id,new,action,result,throttled,action,type,throttle,result,reason,condition,result,condition,result,null,if,condition,null,try,condition,result,condition,execute,ctx,if,condition,result,met,false,ctx,watch,status,action,status,id,reset,ack,status,date,time,now,date,time,zone,utc,return,new,action,wrapper,result,id,condition,result,null,new,action,result,condition,failed,action,type,condition,not,met,skipping,catch,runtime,exception,e,action,logger,error,supplier,new,parameterized,message,failed,to,execute,action,failed,to,execute,condition,ctx,watch,id,id,e,return,new,action,wrapper,result,id,new,action,result,condition,failed,action,type,condition,failed,skipping,e,get,message,payload,payload,ctx,payload,transform,result,transform,result,null,if,transform,null,try,transform,result,transform,execute,ctx,payload,if,transform,result,status,transform,result,status,failure,action,logger,error,failed,to,execute,action,failed,to,transform,payload,ctx,watch,id,id,transform,result,reason,string,msg,failed,to,transform,payload,return,new,action,wrapper,result,id,condition,result,transform,result,new,action,result,failure,action,type,msg,payload,transform,result,payload,catch,exception,e,action,logger,error,supplier,new,parameterized,message,failed,to,execute,action,failed,to,transform,payload,ctx,watch,id,id,e,return,new,action,wrapper,result,id,condition,result,null,new,action,result,failure,with,exception,action,type,e,try,action,result,action,result,action,execute,id,ctx,payload,return,new,action,wrapper,result,id,condition,result,transform,result,action,result,catch,exception,e,action,logger,error,supplier,new,parameterized,message,failed,to,execute,action,ctx,watch,id,id,e,return,new,action,wrapper,result,id,new,action,result,failure,with,exception,action,type,e
ActionWrapper -> public ActionWrapperResult execute(WatchExecutionContext ctx);1531179852;Execute the current {@link #action()}._<p>_This executes in the order of:_<ol>_<li>Throttling</li>_<li>Conditional Check</li>_<li>Transformation</li>_<li>Action</li>_</ol>__@param ctx The current watch's context_@return Never {@code null};public ActionWrapperResult execute(WatchExecutionContext ctx) {_        ActionWrapperResult result = ctx.actionsResults().get(id)__        if (result != null) {_            return result__        }_        if (!ctx.skipThrottling(id)) {_            Throttler.Result throttleResult = throttler.throttle(id, ctx)__            if (throttleResult.throttle()) {_                if (throttleResult.type() == Throttler.Type.ACK) {_                    return new ActionWrapperResult(id, new Action.Result.Acknowledged(action.type(), throttleResult.reason()))__                } else {_                    return new ActionWrapperResult(id, new Action.Result.Throttled(action.type(), throttleResult.reason()))__                }_            }_        }_        Condition.Result conditionResult = null__        if (condition != null) {_            try {_                conditionResult = condition.execute(ctx)__                if (conditionResult.met() == false) {_                    ctx.watch().status().actionStatus(id).resetAckStatus(DateTime.now(DateTimeZone.UTC))__                    return new ActionWrapperResult(id, conditionResult, null,_                                                    new Action.Result.ConditionFailed(action.type(), "condition not met. skipping"))__                }_            } catch (RuntimeException e) {_                action.logger().error(_                        (Supplier<?>) () -> new ParameterizedMessage(_                                "failed to execute action [{}/{}]. failed to execute condition", ctx.watch().id(), id), e)__                return new ActionWrapperResult(id, new Action.Result.ConditionFailed(action.type(),_                                                "condition failed. skipping: {}", e.getMessage()))__            }_        }_        Payload payload = ctx.payload()__        Transform.Result transformResult = null__        if (transform != null) {_            try {_                transformResult = transform.execute(ctx, payload)__                if (transformResult.status() == Transform.Result.Status.FAILURE) {_                    action.logger().error("failed to execute action [{}/{}]. failed to transform payload. {}", ctx.watch().id(), id,_                            transformResult.reason())__                    String msg = "Failed to transform payload"__                    return new ActionWrapperResult(id, conditionResult, transformResult, new Action.Result.Failure(action.type(), msg))__                }_                payload = transformResult.payload()__            } catch (Exception e) {_                action.logger().error(_                        (Supplier<?>) () -> new ParameterizedMessage(_                                "failed to execute action [{}/{}]. failed to transform payload.", ctx.watch().id(), id), e)__                return new ActionWrapperResult(id, conditionResult, null, new Action.Result.FailureWithException(action.type(), e))__            }_        }_        try {_            Action.Result actionResult = action.execute(id, ctx, payload)__            return new ActionWrapperResult(id, conditionResult, transformResult, actionResult)__        } catch (Exception e) {_            action.logger().error(_                    (Supplier<?>) () -> new ParameterizedMessage("failed to execute action [{}/{}]", ctx.watch().id(), id), e)__            return new ActionWrapperResult(id, new Action.Result.FailureWithException(action.type(), e))__        }_    };execute,the,current,link,action,p,this,executes,in,the,order,of,ol,li,throttling,li,li,conditional,check,li,li,transformation,li,li,action,li,ol,param,ctx,the,current,watch,s,context,return,never,code,null;public,action,wrapper,result,execute,watch,execution,context,ctx,action,wrapper,result,result,ctx,actions,results,get,id,if,result,null,return,result,if,ctx,skip,throttling,id,throttler,result,throttle,result,throttler,throttle,id,ctx,if,throttle,result,throttle,if,throttle,result,type,throttler,type,ack,return,new,action,wrapper,result,id,new,action,result,acknowledged,action,type,throttle,result,reason,else,return,new,action,wrapper,result,id,new,action,result,throttled,action,type,throttle,result,reason,condition,result,condition,result,null,if,condition,null,try,condition,result,condition,execute,ctx,if,condition,result,met,false,ctx,watch,status,action,status,id,reset,ack,status,date,time,now,date,time,zone,utc,return,new,action,wrapper,result,id,condition,result,null,new,action,result,condition,failed,action,type,condition,not,met,skipping,catch,runtime,exception,e,action,logger,error,supplier,new,parameterized,message,failed,to,execute,action,failed,to,execute,condition,ctx,watch,id,id,e,return,new,action,wrapper,result,id,new,action,result,condition,failed,action,type,condition,failed,skipping,e,get,message,payload,payload,ctx,payload,transform,result,transform,result,null,if,transform,null,try,transform,result,transform,execute,ctx,payload,if,transform,result,status,transform,result,status,failure,action,logger,error,failed,to,execute,action,failed,to,transform,payload,ctx,watch,id,id,transform,result,reason,string,msg,failed,to,transform,payload,return,new,action,wrapper,result,id,condition,result,transform,result,new,action,result,failure,action,type,msg,payload,transform,result,payload,catch,exception,e,action,logger,error,supplier,new,parameterized,message,failed,to,execute,action,failed,to,transform,payload,ctx,watch,id,id,e,return,new,action,wrapper,result,id,condition,result,null,new,action,result,failure,with,exception,action,type,e,try,action,result,action,result,action,execute,id,ctx,payload,return,new,action,wrapper,result,id,condition,result,transform,result,action,result,catch,exception,e,action,logger,error,supplier,new,parameterized,message,failed,to,execute,action,ctx,watch,id,id,e,return,new,action,wrapper,result,id,new,action,result,failure,with,exception,action,type,e
ActionWrapper -> public ActionWrapperResult execute(WatchExecutionContext ctx);1549289311;Execute the current {@link #action()}._<p>_This executes in the order of:_<ol>_<li>Throttling</li>_<li>Conditional Check</li>_<li>Transformation</li>_<li>Action</li>_</ol>__@param ctx The current watch's context_@return Never {@code null};public ActionWrapperResult execute(WatchExecutionContext ctx) {_        ActionWrapperResult result = ctx.actionsResults().get(id)__        if (result != null) {_            return result__        }_        if (!ctx.skipThrottling(id)) {_            Throttler.Result throttleResult = throttler.throttle(id, ctx)__            if (throttleResult.throttle()) {_                if (throttleResult.type() == Throttler.Type.ACK) {_                    return new ActionWrapperResult(id, new Action.Result.Acknowledged(action.type(), throttleResult.reason()))__                } else {_                    return new ActionWrapperResult(id, new Action.Result.Throttled(action.type(), throttleResult.reason()))__                }_            }_        }_        Condition.Result conditionResult = null__        if (condition != null) {_            try {_                conditionResult = condition.execute(ctx)__                if (conditionResult.met() == false) {_                    ctx.watch().status().actionStatus(id).resetAckStatus(ZonedDateTime.now(ZoneOffset.UTC))__                    return new ActionWrapperResult(id, conditionResult, null,_                                                    new Action.Result.ConditionFailed(action.type(), "condition not met. skipping"))__                }_            } catch (RuntimeException e) {_                action.logger().error(_                        (Supplier<?>) () -> new ParameterizedMessage(_                                "failed to execute action [{}/{}]. failed to execute condition", ctx.watch().id(), id), e)__                return new ActionWrapperResult(id, new Action.Result.ConditionFailed(action.type(),_                                                "condition failed. skipping: {}", e.getMessage()))__            }_        }_        Payload payload = ctx.payload()__        Transform.Result transformResult = null__        if (transform != null) {_            try {_                transformResult = transform.execute(ctx, payload)__                if (transformResult.status() == Transform.Result.Status.FAILURE) {_                    action.logger().error("failed to execute action [{}/{}]. failed to transform payload. {}", ctx.watch().id(), id,_                            transformResult.reason())__                    String msg = "Failed to transform payload"__                    return new ActionWrapperResult(id, conditionResult, transformResult, new Action.Result.Failure(action.type(), msg))__                }_                payload = transformResult.payload()__            } catch (Exception e) {_                action.logger().error(_                        (Supplier<?>) () -> new ParameterizedMessage(_                                "failed to execute action [{}/{}]. failed to transform payload.", ctx.watch().id(), id), e)__                return new ActionWrapperResult(id, conditionResult, null, new Action.Result.FailureWithException(action.type(), e))__            }_        }_        try {_            Action.Result actionResult = action.execute(id, ctx, payload)__            return new ActionWrapperResult(id, conditionResult, transformResult, actionResult)__        } catch (Exception e) {_            action.logger().error(_                    (Supplier<?>) () -> new ParameterizedMessage("failed to execute action [{}/{}]", ctx.watch().id(), id), e)__            return new ActionWrapperResult(id, new Action.Result.FailureWithException(action.type(), e))__        }_    };execute,the,current,link,action,p,this,executes,in,the,order,of,ol,li,throttling,li,li,conditional,check,li,li,transformation,li,li,action,li,ol,param,ctx,the,current,watch,s,context,return,never,code,null;public,action,wrapper,result,execute,watch,execution,context,ctx,action,wrapper,result,result,ctx,actions,results,get,id,if,result,null,return,result,if,ctx,skip,throttling,id,throttler,result,throttle,result,throttler,throttle,id,ctx,if,throttle,result,throttle,if,throttle,result,type,throttler,type,ack,return,new,action,wrapper,result,id,new,action,result,acknowledged,action,type,throttle,result,reason,else,return,new,action,wrapper,result,id,new,action,result,throttled,action,type,throttle,result,reason,condition,result,condition,result,null,if,condition,null,try,condition,result,condition,execute,ctx,if,condition,result,met,false,ctx,watch,status,action,status,id,reset,ack,status,zoned,date,time,now,zone,offset,utc,return,new,action,wrapper,result,id,condition,result,null,new,action,result,condition,failed,action,type,condition,not,met,skipping,catch,runtime,exception,e,action,logger,error,supplier,new,parameterized,message,failed,to,execute,action,failed,to,execute,condition,ctx,watch,id,id,e,return,new,action,wrapper,result,id,new,action,result,condition,failed,action,type,condition,failed,skipping,e,get,message,payload,payload,ctx,payload,transform,result,transform,result,null,if,transform,null,try,transform,result,transform,execute,ctx,payload,if,transform,result,status,transform,result,status,failure,action,logger,error,failed,to,execute,action,failed,to,transform,payload,ctx,watch,id,id,transform,result,reason,string,msg,failed,to,transform,payload,return,new,action,wrapper,result,id,condition,result,transform,result,new,action,result,failure,action,type,msg,payload,transform,result,payload,catch,exception,e,action,logger,error,supplier,new,parameterized,message,failed,to,execute,action,failed,to,transform,payload,ctx,watch,id,id,e,return,new,action,wrapper,result,id,condition,result,null,new,action,result,failure,with,exception,action,type,e,try,action,result,action,result,action,execute,id,ctx,payload,return,new,action,wrapper,result,id,condition,result,transform,result,action,result,catch,exception,e,action,logger,error,supplier,new,parameterized,message,failed,to,execute,action,ctx,watch,id,id,e,return,new,action,wrapper,result,id,new,action,result,failure,with,exception,action,type,e
