commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;10;;private static ConstructingObjectParser<Quantiles, Void> createParser(boolean ignoreUnknownFields) {     ConstructingObjectParser<Quantiles, Void> parser = new ConstructingObjectParser<>(TYPE.getPreferredName(), ignoreUnknownFields, a -> new Quantiles((String) a[0], (Date) a[1], (String) a[2])).     parser.declareString(ConstructingObjectParser.constructorArg(), Job.ID).     parser.declareField(ConstructingObjectParser.optionalConstructorArg(), p -> new Date(p.longValue()), TIMESTAMP, ValueType.LONG).     parser.declareString(ConstructingObjectParser.constructorArg(), QUANTILE_STATE).     return parser. }
false;public,static;1;3;;public static String documentId(String jobId) {     return jobId + "_" + TYPE. }
true;public,static;1;3;/**  * This is how the IDs were formed in v5.4  */ ;/**  * This is how the IDs were formed in v5.4  */ public static String v54DocumentId(String jobId) {     return jobId + "-" + TYPE. }
true;public,static,final;1;4;/**  * Given the id of a quantiles document it extracts the job id  * @param docId the quantiles document id  * @return the job id or {@code null} if the id is not valid  */ ;/**  * Given the id of a quantiles document it extracts the job id  * @param docId the quantiles document id  * @return the job id or {@code null} if the id is not valid  */ public static final String extractJobId(String docId) {     int suffixIndex = docId.lastIndexOf("_" + TYPE).     return suffixIndex <= 0 ? null : docId.substring(0, suffixIndex). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(jobId).     out.writeVLong(timestamp.getTime()).     out.writeOptionalString(quantileState). }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (timestamp != null) {         builder.field(TIMESTAMP.getPreferredName(), timestamp.getTime()).     }     if (quantileState != null) {         builder.field(QUANTILE_STATE.getPreferredName(), quantileState).     }     builder.endObject().     return builder. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public Date getTimestamp() {     return timestamp. }
false;public;0;3;;public String getQuantileState() {     return quantileState. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, timestamp, quantileState). }
true;public;1;17;/**  * Compare all the fields.  */ ;/**  * Compare all the fields.  */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof Quantiles == false) {         return false.     }     Quantiles that = (Quantiles) other.     return Objects.equals(this.jobId, that.jobId) && Objects.equals(this.timestamp, that.timestamp) && Objects.equals(this.quantileState, that.quantileState). }
