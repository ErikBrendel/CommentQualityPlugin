commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;33;;private static ConstructingObjectParser<PivotConfig, Void> createParser(boolean lenient) {     ConstructingObjectParser<PivotConfig, Void> parser = new ConstructingObjectParser<>(NAME, lenient, args -> {         GroupConfig groups = (GroupConfig) args[0].         // allow "aggs" and "aggregations" but require one to be specified         // if somebody specifies both: throw         AggregationConfig aggregationConfig = null.         if (args[1] != null) {             aggregationConfig = (AggregationConfig) args[1].         }         if (args[2] != null) {             if (aggregationConfig != null) {                 throw new IllegalArgumentException("Found two aggregation definitions: [aggs] and [aggregations]").             }             aggregationConfig = (AggregationConfig) args[2].         }         if (aggregationConfig == null) {             throw new IllegalArgumentException("Required [aggregations]").         }         return new PivotConfig(groups, aggregationConfig).     }).     parser.declareObject(constructorArg(), (p, c) -> (GroupConfig.fromXContent(p, lenient)), DataFrameField.GROUP_BY).     parser.declareObject(optionalConstructorArg(), (p, c) -> AggregationConfig.fromXContent(p, lenient), DataFrameField.AGGREGATIONS).     parser.declareObject(optionalConstructorArg(), (p, c) -> AggregationConfig.fromXContent(p, lenient), DataFrameField.AGGS).     return parser. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(DataFrameField.GROUP_BY.getPreferredName(), groups).     builder.field(DataFrameField.AGGREGATIONS.getPreferredName(), aggregationConfig).     builder.endObject().     return builder. }
false;public;2;16;;public void toCompositeAggXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(CompositeAggregationBuilder.SOURCES_FIELD_NAME.getPreferredName()).     builder.startArray().     for (Entry<String, SingleGroupSource<?>> groupBy : groups.getGroups().entrySet()) {         builder.startObject().         builder.startObject(groupBy.getKey()).         builder.field(groupBy.getValue().getType().value(), groupBy.getValue()).         builder.endObject().         builder.endObject().     }     builder.endArray().     // sources     builder.endObject(). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     groups.writeTo(out).     aggregationConfig.writeTo(out). }
false;public;0;3;;public AggregationConfig getAggregationConfig() {     return aggregationConfig. }
false;public;0;3;;public GroupConfig getGroupConfig() {     return groups. }
false;public;1;14;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final PivotConfig that = (PivotConfig) other.     return Objects.equals(this.groups, that.groups) && Objects.equals(this.aggregationConfig, that.aggregationConfig). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(groups, aggregationConfig). }
false;public;0;3;;public boolean isValid() {     return groups.isValid() && aggregationConfig.isValid(). }
false;public,static;2;3;;public static PivotConfig fromXContent(final XContentParser parser, boolean lenient) throws IOException {     return lenient ? LENIENT_PARSER.apply(parser, null) : STRICT_PARSER.apply(parser, null). }
