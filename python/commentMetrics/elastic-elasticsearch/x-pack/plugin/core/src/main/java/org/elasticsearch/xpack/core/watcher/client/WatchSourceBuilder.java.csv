commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public WatchSourceBuilder trigger(Trigger.Builder trigger) {     return trigger(trigger.build()). }
false;public;1;4;;public WatchSourceBuilder trigger(Trigger trigger) {     this.trigger = trigger.     return this. }
false;public;1;3;;public WatchSourceBuilder input(Input.Builder input) {     return input(input.build()). }
false;public;1;4;;public WatchSourceBuilder input(Input input) {     this.input = input.     return this. }
false;public;1;4;;public WatchSourceBuilder condition(Condition condition) {     this.condition = condition.     return this. }
false;public;1;4;;public WatchSourceBuilder transform(Transform transform) {     this.transform = transform.     return this. }
false;public;1;3;;public WatchSourceBuilder transform(Transform.Builder transform) {     return transform(transform.build()). }
false;public;1;4;;public WatchSourceBuilder defaultThrottlePeriod(TimeValue throttlePeriod) {     this.defaultThrottlePeriod = throttlePeriod.     return this. }
false;public;2;3;;public WatchSourceBuilder addAction(String id, Action.Builder action) {     return addAction(id, null, null, action.build()). }
false;public;3;3;;public WatchSourceBuilder addAction(String id, TimeValue throttlePeriod, Action.Builder action) {     return addAction(id, throttlePeriod, null, action.build()). }
false;public;3;3;;public WatchSourceBuilder addAction(String id, Transform.Builder transform, Action.Builder action) {     return addAction(id, null, transform.build(), action.build()). }
false;public;3;3;;public WatchSourceBuilder addAction(String id, Condition condition, Action.Builder action) {     return addAction(id, null, condition, null, action.build()). }
false;public;4;3;;public WatchSourceBuilder addAction(String id, TimeValue throttlePeriod, Transform.Builder transform, Action.Builder action) {     return addAction(id, throttlePeriod, transform.build(), action.build()). }
false;public;4;4;;public WatchSourceBuilder addAction(String id, TimeValue throttlePeriod, Transform transform, Action action) {     actions.put(id, new TransformedAction(id, action, throttlePeriod, null, transform)).     return this. }
false;public;5;4;;public WatchSourceBuilder addAction(String id, TimeValue throttlePeriod, Condition condition, Transform.Builder transform, Action.Builder action) {     return addAction(id, throttlePeriod, condition, transform.build(), action.build()). }
false;public;5;4;;public WatchSourceBuilder addAction(String id, TimeValue throttlePeriod, Condition condition, Transform transform, Action action) {     actions.put(id, new TransformedAction(id, action, throttlePeriod, condition, transform)).     return this. }
false;public;1;4;;public WatchSourceBuilder metadata(Map<String, Object> metadata) {     this.metadata = metadata.     return this. }
false;public;0;5;;public XContentSource build() throws IOException {     try (XContentBuilder builder = jsonBuilder()) {         return new XContentSource(toXContent(builder, ToXContent.EMPTY_PARAMS)).     } }
false;public;2;42;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (trigger == null) {         throw Exceptions.illegalState("failed to build watch source. no trigger defined").     }     builder.startObject(WatchField.TRIGGER.getPreferredName()).field(trigger.type(), trigger, params).endObject().     builder.startObject(WatchField.INPUT.getPreferredName()).field(input.type(), input, params).endObject().     builder.startObject(WatchField.CONDITION.getPreferredName()).field(condition.type(), condition, params).endObject().     if (transform != null) {         builder.startObject(WatchField.TRANSFORM.getPreferredName()).field(transform.type(), transform, params).endObject().     }     if (defaultThrottlePeriod != null) {         builder.humanReadableField(WatchField.THROTTLE_PERIOD.getPreferredName(), WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(), defaultThrottlePeriod).     }     builder.startObject(WatchField.ACTIONS.getPreferredName()).     for (Map.Entry<String, TransformedAction> entry : actions.entrySet()) {         builder.field(entry.getKey(), entry.getValue(), params).     }     builder.endObject().     if (metadata != null) {         builder.field(WatchField.METADATA.getPreferredName(), metadata).     }     return builder.endObject(). }
true;public,final;1;8;/**  * Returns a {@link org.elasticsearch.common.bytes.BytesReference}  * containing the {@link ToXContent} output in binary format. Builds the  * request as the provided <code>contentType</code>  */ ;/**  * Returns a {@link org.elasticsearch.common.bytes.BytesReference}  * containing the {@link ToXContent} output in binary format. Builds the  * request as the provided <code>contentType</code>  */ public final BytesReference buildAsBytes(XContentType contentType) {     try {         WatcherParams params = WatcherParams.builder().hideSecrets(false).build().         return XContentHelper.toXContent(this, contentType, params, false).     } catch (Exception e) {         throw new ElasticsearchException("Failed to build ToXContent", e).     } }
false;public;2;20;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (throttlePeriod != null) {         builder.humanReadableField(ThrottlerField.THROTTLE_PERIOD.getPreferredName(), ThrottlerField.THROTTLE_PERIOD_HUMAN.getPreferredName(), throttlePeriod).     }     if (condition != null) {         builder.startObject(WatchField.CONDITION.getPreferredName()).field(condition.type(), condition, params).endObject().     }     if (transform != null) {         builder.startObject(Transform.TRANSFORM.getPreferredName()).field(transform.type(), transform, params).endObject().     }     builder.field(action.type(), action, params).     return builder.endObject(). }
