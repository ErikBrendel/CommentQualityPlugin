commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String[] names() {     return names. }
false;public;0;3;;public ClusterPermission cluster() {     return cluster. }
false;public;0;3;;public IndicesPermission indices() {     return indices. }
false;public;0;3;;public ApplicationPermission application() {     return application. }
false;public;0;3;;public RunAsPermission runAs() {     return runAs. }
false;public,static;1;3;;public static Builder builder(String... names) {     return new Builder(names). }
false;public,static;2;3;;public static Builder builder(RoleDescriptor rd, FieldPermissionsCache fieldPermissionsCache) {     return new Builder(rd, fieldPermissionsCache). }
true;public;1;3;/**  * @return A predicate that will match all the indices that this role  * has the privilege for executing the given action on.  */ ;/**  * @return A predicate that will match all the indices that this role  * has the privilege for executing the given action on.  */ public Predicate<String> allowedIndicesMatcher(String action) {     return indices.allowedIndicesMatcher(action). }
false;public;1;3;;public Automaton allowedActionsMatcher(String index) {     return indices.allowedActionsMatcher(index). }
false;public;1;3;;public boolean checkRunAs(String runAsName) {     return runAs.check(runAsName). }
true;public;1;3;/**  * Check if indices permissions allow for the given action  *  * @param action indices action  * @return {@code true} if action is allowed else returns {@code false}  */ ;/**  * Check if indices permissions allow for the given action  *  * @param action indices action  * @return {@code true} if action is allowed else returns {@code false}  */ public boolean checkIndicesAction(String action) {     return indices.check(action). }
true;public;3;4;/**  * For given index patterns and index privileges determines allowed privileges and creates an instance of {@link ResourcePrivilegesMap}  * holding a map of resource to {@link ResourcePrivileges} where resource is index pattern and the map of index privilege to whether it  * is allowed or not.  *  * @param checkForIndexPatterns check permission grants for the set of index patterns  * @param allowRestrictedIndices if {@code true} then checks permission grants even for restricted indices by index matching  * @param checkForPrivileges check permission grants for the set of index privileges  * @return an instance of {@link ResourcePrivilegesMap}  */ ;/**  * For given index patterns and index privileges determines allowed privileges and creates an instance of {@link ResourcePrivilegesMap}  * holding a map of resource to {@link ResourcePrivileges} where resource is index pattern and the map of index privilege to whether it  * is allowed or not.  *  * @param checkForIndexPatterns check permission grants for the set of index patterns  * @param allowRestrictedIndices if {@code true} then checks permission grants even for restricted indices by index matching  * @param checkForPrivileges check permission grants for the set of index privileges  * @return an instance of {@link ResourcePrivilegesMap}  */ public ResourcePrivilegesMap checkIndicesPrivileges(Set<String> checkForIndexPatterns, boolean allowRestrictedIndices, Set<String> checkForPrivileges) {     return indices.checkResourcePrivileges(checkForIndexPatterns, allowRestrictedIndices, checkForPrivileges). }
true;public;2;3;/**  * Check if cluster permissions allow for the given action  *  * @param action cluster action  * @param request {@link TransportRequest}  * @return {@code true} if action is allowed else returns {@code false}  */ ;/**  * Check if cluster permissions allow for the given action  *  * @param action cluster action  * @param request {@link TransportRequest}  * @return {@code true} if action is allowed else returns {@code false}  */ public boolean checkClusterAction(String action, TransportRequest request) {     return cluster.check(action, request). }
true;public;1;3;/**  * Check if cluster permissions grants the given cluster privilege  *  * @param clusterPrivilege cluster privilege  * @return {@code true} if cluster privilege is allowed else returns {@code false}  */ ;/**  * Check if cluster permissions grants the given cluster privilege  *  * @param clusterPrivilege cluster privilege  * @return {@code true} if cluster privilege is allowed else returns {@code false}  */ public boolean grants(ClusterPrivilege clusterPrivilege) {     return cluster.grants(clusterPrivilege). }
true;public;4;5;/**  * For a given application, checks for the privileges for resources and returns an instance of {@link ResourcePrivilegesMap} holding a  * map of resource to {@link ResourcePrivileges} where the resource is application resource and the map of application privilege to  * whether it is allowed or not.  *  * @param applicationName checks privileges for the provided application name  * @param checkForResources check permission grants for the set of resources  * @param checkForPrivilegeNames check permission grants for the set of privilege names  * @param storedPrivileges stored {@link ApplicationPrivilegeDescriptor} for an application against which the access checks are  * performed  * @return an instance of {@link ResourcePrivilegesMap}  */ ;/**  * For a given application, checks for the privileges for resources and returns an instance of {@link ResourcePrivilegesMap} holding a  * map of resource to {@link ResourcePrivileges} where the resource is application resource and the map of application privilege to  * whether it is allowed or not.  *  * @param applicationName checks privileges for the provided application name  * @param checkForResources check permission grants for the set of resources  * @param checkForPrivilegeNames check permission grants for the set of privilege names  * @param storedPrivileges stored {@link ApplicationPrivilegeDescriptor} for an application against which the access checks are  * performed  * @return an instance of {@link ResourcePrivilegesMap}  */ public ResourcePrivilegesMap checkApplicationResourcePrivileges(final String applicationName, Set<String> checkForResources, Set<String> checkForPrivilegeNames, Collection<ApplicationPrivilegeDescriptor> storedPrivileges) {     return application.checkResourcePrivileges(applicationName, checkForResources, checkForPrivilegeNames, storedPrivileges). }
true;public;4;17;/**  * Returns whether at least one group encapsulated by this indices permissions is authorized to execute the  * specified action with the requested indices/aliases. At the same time if field and/or document level security  * is configured for any group also the allowed fields and role queries are resolved.  */ ;/**  * Returns whether at least one group encapsulated by this indices permissions is authorized to execute the  * specified action with the requested indices/aliases. At the same time if field and/or document level security  * is configured for any group also the allowed fields and role queries are resolved.  */ public IndicesAccessControl authorize(String action, Set<String> requestedIndicesOrAliases, Map<String, AliasOrIndex> aliasAndIndexLookup, FieldPermissionsCache fieldPermissionsCache) {     Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = indices.authorize(action, requestedIndicesOrAliases, aliasAndIndexLookup, fieldPermissionsCache).     // At least one role / indices permission set need to match with all the requested indices/aliases:     boolean granted = true.     for (Map.Entry<String, IndicesAccessControl.IndexAccessControl> entry : indexPermissions.entrySet()) {         if (!entry.getValue().isGranted()) {             granted = false.             break.         }     }     return new IndicesAccessControl(granted, indexPermissions). }
false;public;2;17;;public Builder cluster(Set<String> privilegeNames, Iterable<ConditionalClusterPrivilege> conditionalClusterPrivileges) {     List<ClusterPermission> clusterPermissions = new ArrayList<>().     if (privilegeNames.isEmpty() == false) {         clusterPermissions.add(new ClusterPermission.SimpleClusterPermission(ClusterPrivilege.get(privilegeNames))).     }     for (ConditionalClusterPrivilege ccp : conditionalClusterPrivileges) {         clusterPermissions.add(new ClusterPermission.ConditionalClusterPermission(ccp)).     }     if (clusterPermissions.isEmpty()) {         this.cluster = ClusterPermission.SimpleClusterPermission.NONE.     } else if (clusterPermissions.size() == 1) {         this.cluster = clusterPermissions.get(0).     } else {         this.cluster = new ClusterPermission.CompositeClusterPermission(clusterPermissions).     }     return this. }
true;public;1;5;/**  * @deprecated Use {@link #cluster(Set, Iterable)}  */ ;/**  * @deprecated Use {@link #cluster(Set, Iterable)}  */ @Deprecated public Builder cluster(ClusterPrivilege privilege) {     cluster = new ClusterPermission.SimpleClusterPermission(privilege).     return this. }
false;public;1;4;;public Builder runAs(Privilege privilege) {     runAs = new RunAsPermission(privilege).     return this. }
false;public;2;4;;public Builder add(IndexPrivilege privilege, String... indices) {     groups.add(new IndicesPermission.Group(privilege, FieldPermissions.DEFAULT, null, false, indices)).     return this. }
false;public;5;5;;public Builder add(FieldPermissions fieldPermissions, Set<BytesReference> query, IndexPrivilege privilege, boolean allowRestrictedIndices, String... indices) {     groups.add(new IndicesPermission.Group(privilege, fieldPermissions, query, allowRestrictedIndices, indices)).     return this. }
false;public;2;4;;public Builder addApplicationPrivilege(ApplicationPrivilege privilege, Set<String> resources) {     applicationPrivs.add(new Tuple<>(privilege, resources)).     return this. }
false;public;0;7;;public Role build() {     IndicesPermission indices = groups.isEmpty() ? IndicesPermission.NONE : new IndicesPermission(groups.toArray(new IndicesPermission.Group[groups.size()])).     final ApplicationPermission applicationPermission = applicationPrivs.isEmpty() ? ApplicationPermission.NONE : new ApplicationPermission(applicationPrivs).     return new Role(names, cluster, indices, applicationPermission, runAs). }
false;static;2;17;;static List<IndicesPermission.Group> convertFromIndicesPrivileges(RoleDescriptor.IndicesPrivileges[] indicesPrivileges, @Nullable FieldPermissionsCache fieldPermissionsCache) {     List<IndicesPermission.Group> list = new ArrayList<>(indicesPrivileges.length).     for (RoleDescriptor.IndicesPrivileges privilege : indicesPrivileges) {         final FieldPermissions fieldPermissions.         if (fieldPermissionsCache != null) {             fieldPermissions = fieldPermissionsCache.getFieldPermissions(privilege.getGrantedFields(), privilege.getDeniedFields()).         } else {             fieldPermissions = new FieldPermissions(new FieldPermissionsDefinition(privilege.getGrantedFields(), privilege.getDeniedFields())).         }         final Set<BytesReference> query = privilege.getQuery() == null ? null : Collections.singleton(privilege.getQuery()).         list.add(new IndicesPermission.Group(IndexPrivilege.get(Sets.newHashSet(privilege.getPrivileges())), fieldPermissions, query, privilege.allowRestrictedIndices(), privilege.getIndices())).     }     return list. }
false;static;3;7;;static Tuple<ApplicationPrivilege, Set<String>> convertApplicationPrivilege(String role, int index, RoleDescriptor.ApplicationResourcePrivileges arp) {     return new Tuple<>(new ApplicationPrivilege(arp.getApplication(), Sets.newHashSet(arp.getPrivileges()), arp.getPrivileges()), Sets.newHashSet(arp.getResources())). }
