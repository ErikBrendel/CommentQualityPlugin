commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Status getStatus() {     return status. }
false;public;0;3;;public User getUser() {     return user. }
false;public;0;3;;public String getMessage() {     return message. }
false;public;0;3;;public Exception getException() {     return exception. }
false;public;0;3;;public Map<String, Object> getMetadata() {     return metadata. }
true;public,static;1;4;/**  * Creates an {@code AuthenticationResult} that indicates that the supplied {@link User}  * has been successfully authenticated.  * <p>  * The {@link #getStatus() status} is set to {@link Status#SUCCESS}.  * </p><p>  * Neither the {@link #getMessage() message} nor {@link #getException() exception} are populated.  * </p>  * @param user The user that was authenticated. Cannot be {@code null}.  */ ;/**  * Creates an {@code AuthenticationResult} that indicates that the supplied {@link User}  * has been successfully authenticated.  * <p>  * The {@link #getStatus() status} is set to {@link Status#SUCCESS}.  * </p><p>  * Neither the {@link #getMessage() message} nor {@link #getException() exception} are populated.  * </p>  * @param user The user that was authenticated. Cannot be {@code null}.  */ public static AuthenticationResult success(User user) {     Objects.requireNonNull(user).     return success(user, null). }
true;public,static;2;3;/**  * Creates a successful result, with optional metadata  *  * @see #success(User)  */ ;/**  * Creates a successful result, with optional metadata  *  * @see #success(User)  */ public static AuthenticationResult success(User user, @Nullable Map<String, Object> metadata) {     return new AuthenticationResult(Status.SUCCESS, user, null, null, metadata). }
true;public,static;0;3;/**  * Creates an {@code AuthenticationResult} that indicates that the realm did not handle the  * authentication request in any way, and has no failure messages.  * <p>  * The {@link #getStatus() status} is set to {@link Status#CONTINUE}.  * </p><p>  * The {@link #getMessage() message}, {@link #getException() exception}, and {@link #getUser() user} are all set to {@code null}.  * </p>  */ ;/**  * Creates an {@code AuthenticationResult} that indicates that the realm did not handle the  * authentication request in any way, and has no failure messages.  * <p>  * The {@link #getStatus() status} is set to {@link Status#CONTINUE}.  * </p><p>  * The {@link #getMessage() message}, {@link #getException() exception}, and {@link #getUser() user} are all set to {@code null}.  * </p>  */ public static AuthenticationResult notHandled() {     return NOT_HANDLED. }
true;public,static;2;4;/**  * Creates an {@code AuthenticationResult} that indicates that the realm attempted to handle the authentication request but was  * unsuccessful. The reason for the failure is given in the supplied message and optional exception.  * <p>  * The {@link #getStatus() status} is set to {@link Status#CONTINUE}.  * </p><p>  * The {@link #getUser() user} is not populated.  * </p>  */ ;/**  * Creates an {@code AuthenticationResult} that indicates that the realm attempted to handle the authentication request but was  * unsuccessful. The reason for the failure is given in the supplied message and optional exception.  * <p>  * The {@link #getStatus() status} is set to {@link Status#CONTINUE}.  * </p><p>  * The {@link #getUser() user} is not populated.  * </p>  */ public static AuthenticationResult unsuccessful(String message, @Nullable Exception cause) {     Objects.requireNonNull(message).     return new AuthenticationResult(Status.CONTINUE, null, message, cause, null). }
true;public,static;2;3;/**  * Creates an {@code AuthenticationResult} that indicates that the realm attempted to handle the authentication request, was  * unsuccessful and wants to terminate this authentication request.  * The reason for the failure is given in the supplied message and optional exception.  * <p>  * The {@link #getStatus() status} is set to {@link Status#TERMINATE}.  * </p><p>  * The {@link #getUser() user} is not populated.  * </p>  */ ;/**  * Creates an {@code AuthenticationResult} that indicates that the realm attempted to handle the authentication request, was  * unsuccessful and wants to terminate this authentication request.  * The reason for the failure is given in the supplied message and optional exception.  * <p>  * The {@link #getStatus() status} is set to {@link Status#TERMINATE}.  * </p><p>  * The {@link #getUser() user} is not populated.  * </p>  */ public static AuthenticationResult terminate(String message, @Nullable Exception cause) {     return new AuthenticationResult(Status.TERMINATE, null, message, cause, null). }
false;public;0;3;;public boolean isAuthenticated() {     return status == Status.SUCCESS. }
false;public;0;9;;@Override public String toString() {     return "AuthenticationResult{" + "status=" + status + ", user=" + user + ", message=" + message + ", exception=" + exception + '}'. }
