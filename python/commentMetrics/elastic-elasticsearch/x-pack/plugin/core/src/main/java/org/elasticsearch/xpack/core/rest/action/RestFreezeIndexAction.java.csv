commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;15;;@Override protected RestChannelConsumer doPrepareRequest(RestRequest request, XPackClient client) {     boolean freeze = request.path().endsWith("/_freeze").     TransportFreezeIndexAction.FreezeRequest freezeRequest = new TransportFreezeIndexAction.FreezeRequest(Strings.splitStringByCommaToArray(request.param("index"))).     freezeRequest.timeout(request.paramAsTime("timeout", freezeRequest.timeout())).     freezeRequest.masterNodeTimeout(request.paramAsTime("master_timeout", freezeRequest.masterNodeTimeout())).     freezeRequest.indicesOptions(IndicesOptions.fromRequest(request, freezeRequest.indicesOptions())).     String waitForActiveShards = request.param("wait_for_active_shards").     if (waitForActiveShards != null) {         freezeRequest.waitForActiveShards(ActiveShardCount.parseString(waitForActiveShards)).     }     freezeRequest.setFreeze(freeze).     return channel -> client.freeze(freezeRequest, new RestToXContentListener<>(channel)). }
false;public;0;4;;@Override public String getName() {     return "freeze_index". }
