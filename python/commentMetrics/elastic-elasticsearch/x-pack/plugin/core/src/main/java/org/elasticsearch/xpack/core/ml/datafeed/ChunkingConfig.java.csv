commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;19;;private static ConstructingObjectParser<ChunkingConfig, Void> createParser(boolean ignoreUnknownFields) {     ConstructingObjectParser<ChunkingConfig, Void> parser = new ConstructingObjectParser<>("chunking_config", ignoreUnknownFields, a -> new ChunkingConfig((Mode) a[0], (TimeValue) a[1])).     parser.declareField(ConstructingObjectParser.constructorArg(), p -> {         if (p.currentToken() == XContentParser.Token.VALUE_STRING) {             return Mode.fromString(p.text()).         }         throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]").     }, MODE_FIELD, ValueType.STRING).     parser.declareField(ConstructingObjectParser.optionalConstructorArg(), p -> {         if (p.currentToken() == XContentParser.Token.VALUE_STRING) {             return TimeValue.parseTimeValue(p.text(), TIME_SPAN_FIELD.getPreferredName()).         }         throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]").     }, TIME_SPAN_FIELD, ValueType.STRING).     return parser. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     mode.writeTo(out).     out.writeOptionalTimeValue(timeSpan). }
false;public;0;4;;@Nullable public TimeValue getTimeSpan() {     return timeSpan. }
false;public;0;3;;public boolean isEnabled() {     return mode != Mode.OFF. }
false;;0;3;;Mode getMode() {     return mode. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(MODE_FIELD.getPreferredName(), mode).     if (timeSpan != null) {         builder.field(TIME_SPAN_FIELD.getPreferredName(), timeSpan.getStringRep()).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(mode, timeSpan). }
false;public;1;17;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     ChunkingConfig other = (ChunkingConfig) obj.     return Objects.equals(this.mode, other.mode) && Objects.equals(this.timeSpan, other.timeSpan). }
false;public,static;0;3;;public static ChunkingConfig newAuto() {     return new ChunkingConfig(Mode.AUTO, null). }
false;public,static;0;3;;public static ChunkingConfig newOff() {     return new ChunkingConfig(Mode.OFF, null). }
false;public,static;1;3;;public static ChunkingConfig newManual(TimeValue timeSpan) {     return new ChunkingConfig(Mode.MANUAL, timeSpan). }
false;public,static;1;3;;public static Mode fromString(String value) {     return Mode.valueOf(value.toUpperCase(Locale.ROOT)). }
false;public,static;1;3;;public static Mode readFromStream(StreamInput in) throws IOException {     return in.readEnum(Mode.class). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeEnum(this). }
false;public;0;4;;@Override public String toString() {     return name().toLowerCase(Locale.ROOT). }
