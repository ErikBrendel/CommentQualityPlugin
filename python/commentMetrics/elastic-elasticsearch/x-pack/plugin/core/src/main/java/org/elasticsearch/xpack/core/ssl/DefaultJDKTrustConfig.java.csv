# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultJDKTrustConfig -> static TrustConfig merge(TrustConfig trustConfig, SecureString trustStorePassword);1539615817;Merges the default trust configuration with the provided {@link TrustConfig}_@param trustConfig the trust configuration to merge with_@param trustStorePassword the password for the default jdk truststore. It applies only to PKCS#11 tokens_@return a {@link TrustConfig} that represents a combination of both trust configurations;static TrustConfig merge(TrustConfig trustConfig, SecureString trustStorePassword) {_        if (trustConfig == null) {_            return new DefaultJDKTrustConfig(trustStorePassword)__        } else {_            return new CombiningTrustConfig(Arrays.asList(new DefaultJDKTrustConfig(trustStorePassword), trustConfig))__        }_    };merges,the,default,trust,configuration,with,the,provided,link,trust,config,param,trust,config,the,trust,configuration,to,merge,with,param,trust,store,password,the,password,for,the,default,jdk,truststore,it,applies,only,to,pkcs,11,tokens,return,a,link,trust,config,that,represents,a,combination,of,both,trust,configurations;static,trust,config,merge,trust,config,trust,config,secure,string,trust,store,password,if,trust,config,null,return,new,default,jdktrust,config,trust,store,password,else,return,new,combining,trust,config,arrays,as,list,new,default,jdktrust,config,trust,store,password,trust,config
DefaultJDKTrustConfig -> static TrustConfig merge(TrustConfig trustConfig, SecureString trustStorePassword);1547499982;Merges the default trust configuration with the provided {@link TrustConfig}_@param trustConfig the trust configuration to merge with_@param trustStorePassword the password for the default jdk truststore. It applies only to PKCS#11 tokens_@return a {@link TrustConfig} that represents a combination of both trust configurations;static TrustConfig merge(TrustConfig trustConfig, SecureString trustStorePassword) {_        if (trustConfig == null) {_            return new DefaultJDKTrustConfig(trustStorePassword)__        } else {_            return new CombiningTrustConfig(Arrays.asList(new DefaultJDKTrustConfig(trustStorePassword), trustConfig))__        }_    };merges,the,default,trust,configuration,with,the,provided,link,trust,config,param,trust,config,the,trust,configuration,to,merge,with,param,trust,store,password,the,password,for,the,default,jdk,truststore,it,applies,only,to,pkcs,11,tokens,return,a,link,trust,config,that,represents,a,combination,of,both,trust,configurations;static,trust,config,merge,trust,config,trust,config,secure,string,trust,store,password,if,trust,config,null,return,new,default,jdktrust,config,trust,store,password,else,return,new,combining,trust,config,arrays,as,list,new,default,jdktrust,config,trust,store,password,trust,config
DefaultJDKTrustConfig -> static TrustConfig merge(TrustConfig trustConfig);1524684173;Merges the default trust configuration with the provided {@link TrustConfig}_@param trustConfig the trust configuration to merge with_@return a {@link TrustConfig} that represents a combination of both trust configurations;static TrustConfig merge(TrustConfig trustConfig) {_        if (trustConfig == null) {_            return INSTANCE__        } else {_            return new CombiningTrustConfig(Arrays.asList(INSTANCE, trustConfig))__        }_    };merges,the,default,trust,configuration,with,the,provided,link,trust,config,param,trust,config,the,trust,configuration,to,merge,with,return,a,link,trust,config,that,represents,a,combination,of,both,trust,configurations;static,trust,config,merge,trust,config,trust,config,if,trust,config,null,return,instance,else,return,new,combining,trust,config,arrays,as,list,instance,trust,config
DefaultJDKTrustConfig -> static TrustConfig merge(TrustConfig trustConfig);1527622193;Merges the default trust configuration with the provided {@link TrustConfig}_@param trustConfig the trust configuration to merge with_@return a {@link TrustConfig} that represents a combination of both trust configurations;static TrustConfig merge(TrustConfig trustConfig) {_        if (trustConfig == null) {_            return INSTANCE__        } else {_            return new CombiningTrustConfig(Arrays.asList(INSTANCE, trustConfig))__        }_    };merges,the,default,trust,configuration,with,the,provided,link,trust,config,param,trust,config,the,trust,configuration,to,merge,with,return,a,link,trust,config,that,represents,a,combination,of,both,trust,configurations;static,trust,config,merge,trust,config,trust,config,if,trust,config,null,return,instance,else,return,new,combining,trust,config,arrays,as,list,instance,trust,config
DefaultJDKTrustConfig -> static TrustConfig merge(TrustConfig trustConfig);1536611444;Merges the default trust configuration with the provided {@link TrustConfig}_@param trustConfig the trust configuration to merge with_@return a {@link TrustConfig} that represents a combination of both trust configurations;static TrustConfig merge(TrustConfig trustConfig) {_        if (trustConfig == null) {_            return INSTANCE__        } else {_            return new CombiningTrustConfig(Arrays.asList(INSTANCE, trustConfig))__        }_    };merges,the,default,trust,configuration,with,the,provided,link,trust,config,param,trust,config,the,trust,configuration,to,merge,with,return,a,link,trust,config,that,represents,a,combination,of,both,trust,configurations;static,trust,config,merge,trust,config,trust,config,if,trust,config,null,return,instance,else,return,new,combining,trust,config,arrays,as,list,instance,trust,config
DefaultJDKTrustConfig -> @Override          Collection<CertificateInfo> certificates(Environment environment) throws GeneralSecurityException, IOException;1524684173;We don't return the list of JDK certificates here, because they are not managed by Elasticsearch, and the purpose_of this method is to obtain information about certificate (files/stores) that X-Pack directly manages.;@Override_    _    Collection<CertificateInfo> certificates(Environment environment) throws GeneralSecurityException, IOException {_        return Collections.emptyList()__    };we,don,t,return,the,list,of,jdk,certificates,here,because,they,are,not,managed,by,elasticsearch,and,the,purpose,of,this,method,is,to,obtain,information,about,certificate,files,stores,that,x,pack,directly,manages;override,collection,certificate,info,certificates,environment,environment,throws,general,security,exception,ioexception,return,collections,empty,list
DefaultJDKTrustConfig -> @Override          Collection<CertificateInfo> certificates(Environment environment) throws GeneralSecurityException, IOException;1527622193;We don't return the list of JDK certificates here, because they are not managed by Elasticsearch, and the purpose_of this method is to obtain information about certificate (files/stores) that X-Pack directly manages.;@Override_    _    Collection<CertificateInfo> certificates(Environment environment) throws GeneralSecurityException, IOException {_        return Collections.emptyList()__    };we,don,t,return,the,list,of,jdk,certificates,here,because,they,are,not,managed,by,elasticsearch,and,the,purpose,of,this,method,is,to,obtain,information,about,certificate,files,stores,that,x,pack,directly,manages;override,collection,certificate,info,certificates,environment,environment,throws,general,security,exception,ioexception,return,collections,empty,list
DefaultJDKTrustConfig -> @Override          Collection<CertificateInfo> certificates(Environment environment) throws GeneralSecurityException, IOException;1536611444;We don't return the list of JDK certificates here, because they are not managed by Elasticsearch, and the purpose_of this method is to obtain information about certificate (files/stores) that X-Pack directly manages.;@Override_    _    Collection<CertificateInfo> certificates(Environment environment) throws GeneralSecurityException, IOException {_        return Collections.emptyList()__    };we,don,t,return,the,list,of,jdk,certificates,here,because,they,are,not,managed,by,elasticsearch,and,the,purpose,of,this,method,is,to,obtain,information,about,certificate,files,stores,that,x,pack,directly,manages;override,collection,certificate,info,certificates,environment,environment,throws,general,security,exception,ioexception,return,collections,empty,list
DefaultJDKTrustConfig -> @Override          Collection<CertificateInfo> certificates(Environment environment) throws GeneralSecurityException, IOException;1539615817;We don't return the list of JDK certificates here, because they are not managed by Elasticsearch, and the purpose_of this method is to obtain information about certificate (files/stores) that X-Pack directly manages.;@Override_    _    Collection<CertificateInfo> certificates(Environment environment) throws GeneralSecurityException, IOException {_        return Collections.emptyList()__    };we,don,t,return,the,list,of,jdk,certificates,here,because,they,are,not,managed,by,elasticsearch,and,the,purpose,of,this,method,is,to,obtain,information,about,certificate,files,stores,that,x,pack,directly,manages;override,collection,certificate,info,certificates,environment,environment,throws,general,security,exception,ioexception,return,collections,empty,list
DefaultJDKTrustConfig -> @Override          Collection<CertificateInfo> certificates(Environment environment) throws GeneralSecurityException, IOException;1547499982;We don't return the list of JDK certificates here, because they are not managed by Elasticsearch, and the purpose_of this method is to obtain information about certificate (files/stores) that X-Pack directly manages.;@Override_    _    Collection<CertificateInfo> certificates(Environment environment) throws GeneralSecurityException, IOException {_        return Collections.emptyList()__    };we,don,t,return,the,list,of,jdk,certificates,here,because,they,are,not,managed,by,elasticsearch,and,the,purpose,of,this,method,is,to,obtain,information,about,certificate,files,stores,that,x,pack,directly,manages;override,collection,certificate,info,certificates,environment,environment,throws,general,security,exception,ioexception,return,collections,empty,list
DefaultJDKTrustConfig -> private KeyStore getSystemTrustStore() throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException;1536611444;When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore_password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where_we only need to pass the password for reading Private Key entries ).__@return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise;private KeyStore getSystemTrustStore() throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException {_        if (System.getProperty("javax.net.ssl.trustStoreType", "").equalsIgnoreCase("PKCS11")) {_            KeyStore keyStore = KeyStore.getInstance("PKCS11")__            keyStore.load(null, System.getProperty("javax.net.ssl.trustStorePassword", "").toCharArray())__            return keyStore__        }_        return null__    };when,a,pkcs,11,token,is,used,as,the,system,default,keystore,truststore,we,need,to,pass,the,keystore,password,when,loading,even,for,reading,certificates,only,as,opposed,to,i,e,jks,keystores,where,we,only,need,to,pass,the,password,for,reading,private,key,entries,return,the,key,store,used,as,truststore,for,pkcs,11,initialized,with,the,password,null,otherwise;private,key,store,get,system,trust,store,throws,key,store,exception,certificate,exception,no,such,algorithm,exception,ioexception,if,system,get,property,javax,net,ssl,trust,store,type,equals,ignore,case,pkcs11,key,store,key,store,key,store,get,instance,pkcs11,key,store,load,null,system,get,property,javax,net,ssl,trust,store,password,to,char,array,return,key,store,return,null
DefaultJDKTrustConfig -> private KeyStore getSystemTrustStore() throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException;1539615817;When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore_password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where_we only need to pass the password for reading Private Key entries ).__@return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise;private KeyStore getSystemTrustStore() throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException {_        if (System.getProperty("javax.net.ssl.trustStoreType", "").equalsIgnoreCase("PKCS11")_            && trustStorePassword != null) {_            KeyStore keyStore = KeyStore.getInstance("PKCS11")__            keyStore.load(null, trustStorePassword.getChars())__            return keyStore__        }_        return null__    };when,a,pkcs,11,token,is,used,as,the,system,default,keystore,truststore,we,need,to,pass,the,keystore,password,when,loading,even,for,reading,certificates,only,as,opposed,to,i,e,jks,keystores,where,we,only,need,to,pass,the,password,for,reading,private,key,entries,return,the,key,store,used,as,truststore,for,pkcs,11,initialized,with,the,password,null,otherwise;private,key,store,get,system,trust,store,throws,key,store,exception,certificate,exception,no,such,algorithm,exception,ioexception,if,system,get,property,javax,net,ssl,trust,store,type,equals,ignore,case,pkcs11,trust,store,password,null,key,store,key,store,key,store,get,instance,pkcs11,key,store,load,null,trust,store,password,get,chars,return,key,store,return,null
DefaultJDKTrustConfig -> private KeyStore getSystemTrustStore() throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException;1547499982;When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore_password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where_we only need to pass the password for reading Private Key entries ).__@return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise;private KeyStore getSystemTrustStore() throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException {_        if (System.getProperty("javax.net.ssl.trustStoreType", "").equalsIgnoreCase("PKCS11")_            && trustStorePassword != null) {_            KeyStore keyStore = KeyStore.getInstance("PKCS11")__            keyStore.load(null, trustStorePassword.getChars())__            return keyStore__        }_        return null__    };when,a,pkcs,11,token,is,used,as,the,system,default,keystore,truststore,we,need,to,pass,the,keystore,password,when,loading,even,for,reading,certificates,only,as,opposed,to,i,e,jks,keystores,where,we,only,need,to,pass,the,password,for,reading,private,key,entries,return,the,key,store,used,as,truststore,for,pkcs,11,initialized,with,the,password,null,otherwise;private,key,store,get,system,trust,store,throws,key,store,exception,certificate,exception,no,such,algorithm,exception,ioexception,if,system,get,property,javax,net,ssl,trust,store,type,equals,ignore,case,pkcs11,trust,store,password,null,key,store,key,store,key,store,get,instance,pkcs11,key,store,load,null,trust,store,password,get,chars,return,key,store,return,null
DefaultJDKTrustConfig -> DefaultJDKTrustConfig(@Nullable SecureString trustStorePassword);1539615817;@param trustStorePassword the password for the default jdk truststore defined either as a system property or in the Elasticsearch_configuration. It applies only when PKCS#11 tokens are user, is null otherwise;DefaultJDKTrustConfig(@Nullable SecureString trustStorePassword) {_        this.trustStorePassword = trustStorePassword__    };param,trust,store,password,the,password,for,the,default,jdk,truststore,defined,either,as,a,system,property,or,in,the,elasticsearch,configuration,it,applies,only,when,pkcs,11,tokens,are,user,is,null,otherwise;default,jdktrust,config,nullable,secure,string,trust,store,password,this,trust,store,password,trust,store,password
DefaultJDKTrustConfig -> DefaultJDKTrustConfig(@Nullable SecureString trustStorePassword);1547499982;@param trustStorePassword the password for the default jdk truststore defined either as a system property or in the Elasticsearch_configuration. It applies only when PKCS#11 tokens are user, is null otherwise;DefaultJDKTrustConfig(@Nullable SecureString trustStorePassword) {_        this.trustStorePassword = trustStorePassword__    };param,trust,store,password,the,password,for,the,default,jdk,truststore,defined,either,as,a,system,property,or,in,the,elasticsearch,configuration,it,applies,only,when,pkcs,11,tokens,are,user,is,null,otherwise;default,jdktrust,config,nullable,secure,string,trust,store,password,this,trust,store,password,trust,store,password
