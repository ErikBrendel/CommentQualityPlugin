commented;modifiers;parameterAmount;loc;comment;code
false;;1;8;;@Override X509ExtendedTrustManager createTrustManager(@Nullable Environment environment) {     try {         return CertParsingUtils.trustManager(getSystemTrustStore(), TrustManagerFactory.getDefaultAlgorithm()).     } catch (Exception e) {         throw new ElasticsearchException("failed to initialize a TrustManagerFactory", e).     } }
false;;1;8;;@Override /**  * We don't return the list of JDK certificates here, because they are not managed by Elasticsearch, and the purpose  * of this method is to obtain information about certificate (files/stores) that X-Pack directly manages.  */ Collection<CertificateInfo> certificates(Environment environment) throws GeneralSecurityException, IOException {     return Collections.emptyList(). }
false;;1;4;;@Override List<Path> filesToMonitor(@Nullable Environment environment) {     return Collections.emptyList(). }
false;public;0;4;;@Override public String toString() {     return "JDK trusted certs". }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     DefaultJDKTrustConfig that = (DefaultJDKTrustConfig) o.     return Objects.equals(trustStorePassword, that.trustStorePassword). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(trustStorePassword). }
true;static;2;7;/**  * Merges the default trust configuration with the provided {@link TrustConfig}  * @param trustConfig the trust configuration to merge with  * @param trustStorePassword the password for the default jdk truststore. It applies only to PKCS#11 tokens  * @return a {@link TrustConfig} that represents a combination of both trust configurations  */ ;/**  * Merges the default trust configuration with the provided {@link TrustConfig}  * @param trustConfig the trust configuration to merge with  * @param trustStorePassword the password for the default jdk truststore. It applies only to PKCS#11 tokens  * @return a {@link TrustConfig} that represents a combination of both trust configurations  */ static TrustConfig merge(TrustConfig trustConfig, SecureString trustStorePassword) {     if (trustConfig == null) {         return new DefaultJDKTrustConfig(trustStorePassword).     } else {         return new CombiningTrustConfig(Arrays.asList(new DefaultJDKTrustConfig(trustStorePassword), trustConfig)).     } }
true;private;0;9;/**  * When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore  * password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where  * we only need to pass the password for reading Private Key entries ).  *  * @return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise  */ ;/**  * When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore  * password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where  * we only need to pass the password for reading Private Key entries ).  *  * @return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise  */ private KeyStore getSystemTrustStore() throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException {     if (System.getProperty("javax.net.ssl.trustStoreType", "").equalsIgnoreCase("PKCS11") && trustStorePassword != null) {         KeyStore keyStore = KeyStore.getInstance("PKCS11").         keyStore.load(null, trustStorePassword.getChars()).         return keyStore.     }     return null. }
