# id;timestamp;commentText;codeText;commentWords;codeWords
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1524684173;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1531729807;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1532685069;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1535139672;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1536314350;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1538170812;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1541092382;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1542310365;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1542372612;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1543938107;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1543951769;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1544133517;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1544213785;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1544454347;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1545155131;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1545310197;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1546587824;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1548265937;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1548879140;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public TimeValue defaultFrequency(TimeValue bucketSpan);1550587606;Calculates a sensible default frequency for a given bucket span._<p>_The default depends on the bucket span:_<ul>_<li> &lt_= 2 mins -&gt_ 1 min</li>_<li> &lt_= 20 mins -&gt_ bucket span / 2</li>_<li> &lt_= 12 hours -&gt_ 10 mins</li>_<li> &gt_ 12 hours -&gt_ 1 hour</li>_</ul>__If the datafeed has aggregations, the default frequency is the_closest multiple of the histogram interval based on the rules above.__@param bucketSpan the bucket span_@return the default frequency;public TimeValue defaultFrequency(TimeValue bucketSpan) {_        TimeValue defaultFrequency = defaultFrequencyTarget(bucketSpan)__        if (hasAggregations()) {_            long histogramIntervalMillis = getHistogramIntervalMillis()__            long targetFrequencyMillis = defaultFrequency.millis()__            long defaultFrequencyMillis = histogramIntervalMillis > targetFrequencyMillis ? histogramIntervalMillis_                    : (targetFrequencyMillis / histogramIntervalMillis) * histogramIntervalMillis__            defaultFrequency = TimeValue.timeValueMillis(defaultFrequencyMillis)__        }_        return defaultFrequency__    };calculates,a,sensible,default,frequency,for,a,given,bucket,span,p,the,default,depends,on,the,bucket,span,ul,li,lt,2,mins,gt,1,min,li,li,lt,20,mins,gt,bucket,span,2,li,li,lt,12,hours,gt,10,mins,li,li,gt,12,hours,gt,1,hour,li,ul,if,the,datafeed,has,aggregations,the,default,frequency,is,the,closest,multiple,of,the,histogram,interval,based,on,the,rules,above,param,bucket,span,the,bucket,span,return,the,default,frequency;public,time,value,default,frequency,time,value,bucket,span,time,value,default,frequency,default,frequency,target,bucket,span,if,has,aggregations,long,histogram,interval,millis,get,histogram,interval,millis,long,target,frequency,millis,default,frequency,millis,long,default,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,target,frequency,millis,histogram,interval,millis,histogram,interval,millis,default,frequency,time,value,time,value,millis,default,frequency,millis,return,default,frequency
DatafeedConfig -> public long getHistogramIntervalMillis();1524684173;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1531729807;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1532685069;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1535139672;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1536314350;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1538170812;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1541092382;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1542310365;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1542372612;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1543938107;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(getParsedAggregations())__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,get,parsed,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1543951769;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(getParsedAggregations())__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,get,parsed,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1544133517;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(getParsedAggregations())__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,get,parsed,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1544213785;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(getParsedAggregations())__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,get,parsed,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1544454347;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(getParsedAggregations())__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,get,parsed,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1545155131;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(getParsedAggregations())__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,get,parsed,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1545310197;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(getParsedAggregations())__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,get,parsed,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1546587824;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(getParsedAggregations())__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,get,parsed,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1548265937;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(getParsedAggregations())__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,get,parsed,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1548879140;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(getParsedAggregations())__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,get,parsed,aggregations
DatafeedConfig -> public long getHistogramIntervalMillis();1550587606;Returns the histogram's interval as epoch millis.;public long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(getParsedAggregations())__    };returns,the,histogram,s,interval,as,epoch,millis;public,long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,get,parsed,aggregations
DatafeedConfig -> public List<String> getQueryDeprecations();1544133517;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the query;public List<String> getQueryDeprecations() {_        return getQueryDeprecations(lazyQueryParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,query;public,list,string,get,query,deprecations,return,get,query,deprecations,lazy,query,parser
DatafeedConfig -> public List<String> getQueryDeprecations();1544213785;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the query;public List<String> getQueryDeprecations() {_        return getQueryDeprecations(lazyQueryParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,query;public,list,string,get,query,deprecations,return,get,query,deprecations,lazy,query,parser
DatafeedConfig -> public List<String> getQueryDeprecations();1544454347;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the query;public List<String> getQueryDeprecations() {_        return getQueryDeprecations(lazyQueryParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,query;public,list,string,get,query,deprecations,return,get,query,deprecations,lazy,query,parser
DatafeedConfig -> public List<String> getQueryDeprecations();1545155131;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the query;public List<String> getQueryDeprecations() {_        return getQueryDeprecations(lazyQueryParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,query;public,list,string,get,query,deprecations,return,get,query,deprecations,lazy,query,parser
DatafeedConfig -> public List<String> getQueryDeprecations();1545310197;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the query;public List<String> getQueryDeprecations() {_        return getQueryDeprecations(lazyQueryParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,query;public,list,string,get,query,deprecations,return,get,query,deprecations,lazy,query,parser
DatafeedConfig -> public List<String> getQueryDeprecations();1546587824;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the query;public List<String> getQueryDeprecations() {_        return getQueryDeprecations(lazyQueryParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,query;public,list,string,get,query,deprecations,return,get,query,deprecations,lazy,query,parser
DatafeedConfig -> public List<String> getQueryDeprecations();1548265937;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the query;public List<String> getQueryDeprecations() {_        return getQueryDeprecations(lazyQueryParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,query;public,list,string,get,query,deprecations,return,get,query,deprecations,lazy,query,parser
DatafeedConfig -> public List<String> getQueryDeprecations();1548879140;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the query;public List<String> getQueryDeprecations() {_        return getQueryDeprecations(lazyQueryParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,query;public,list,string,get,query,deprecations,return,get,query,deprecations,lazy,query,parser
DatafeedConfig -> public List<String> getQueryDeprecations();1550587606;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the query;public List<String> getQueryDeprecations() {_        return getQueryDeprecations(lazyQueryParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,query;public,list,string,get,query,deprecations,return,get,query,deprecations,lazy,query,parser
DatafeedConfig -> @Override     public boolean equals(Object other);1524684173;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers
DatafeedConfig -> @Override     public boolean equals(Object other);1531729807;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers
DatafeedConfig -> @Override     public boolean equals(Object other);1532685069;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers
DatafeedConfig -> @Override     public boolean equals(Object other);1535139672;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers
DatafeedConfig -> @Override     public boolean equals(Object other);1536314350;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers
DatafeedConfig -> @Override     public boolean equals(Object other);1538170812;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers
DatafeedConfig -> @Override     public boolean equals(Object other);1541092382;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers
DatafeedConfig -> @Override     public boolean equals(Object other);1542310365;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1542372612;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1543938107;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1543951769;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1544133517;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1544213785;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1544454347;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1545155131;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1545310197;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1546587824;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1548265937;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1548879140;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> @Override     public boolean equals(Object other);1550587606;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedConfig == false) {_            return false__        }__        DatafeedConfig that = (DatafeedConfig) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)_                && Objects.equals(this.headers, that.headers)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,config,false,return,false,datafeed,config,that,datafeed,config,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config,objects,equals,this,headers,that,headers,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config
DatafeedConfig -> public List<String> getAggDeprecations();1544133517;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the aggregations;public List<String> getAggDeprecations() {_        return getAggDeprecations(lazyAggParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,aggregations;public,list,string,get,agg,deprecations,return,get,agg,deprecations,lazy,agg,parser
DatafeedConfig -> public List<String> getAggDeprecations();1544213785;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the aggregations;public List<String> getAggDeprecations() {_        return getAggDeprecations(lazyAggParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,aggregations;public,list,string,get,agg,deprecations,return,get,agg,deprecations,lazy,agg,parser
DatafeedConfig -> public List<String> getAggDeprecations();1544454347;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the aggregations;public List<String> getAggDeprecations() {_        return getAggDeprecations(lazyAggParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,aggregations;public,list,string,get,agg,deprecations,return,get,agg,deprecations,lazy,agg,parser
DatafeedConfig -> public List<String> getAggDeprecations();1545155131;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the aggregations;public List<String> getAggDeprecations() {_        return getAggDeprecations(lazyAggParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,aggregations;public,list,string,get,agg,deprecations,return,get,agg,deprecations,lazy,agg,parser
DatafeedConfig -> public List<String> getAggDeprecations();1545310197;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the aggregations;public List<String> getAggDeprecations() {_        return getAggDeprecations(lazyAggParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,aggregations;public,list,string,get,agg,deprecations,return,get,agg,deprecations,lazy,agg,parser
DatafeedConfig -> public List<String> getAggDeprecations();1546587824;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the aggregations;public List<String> getAggDeprecations() {_        return getAggDeprecations(lazyAggParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,aggregations;public,list,string,get,agg,deprecations,return,get,agg,deprecations,lazy,agg,parser
DatafeedConfig -> public List<String> getAggDeprecations();1548265937;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the aggregations;public List<String> getAggDeprecations() {_        return getAggDeprecations(lazyAggParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,aggregations;public,list,string,get,agg,deprecations,return,get,agg,deprecations,lazy,agg,parser
DatafeedConfig -> public List<String> getAggDeprecations();1548879140;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the aggregations;public List<String> getAggDeprecations() {_        return getAggDeprecations(lazyAggParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,aggregations;public,list,string,get,agg,deprecations,return,get,agg,deprecations,lazy,agg,parser
DatafeedConfig -> public List<String> getAggDeprecations();1550587606;Calls the lazy parser and returns any gathered deprecations_@return The deprecations from parsing the aggregations;public List<String> getAggDeprecations() {_        return getAggDeprecations(lazyAggParser)__    };calls,the,lazy,parser,and,returns,any,gathered,deprecations,return,the,deprecations,from,parsing,the,aggregations;public,list,string,get,agg,deprecations,return,get,agg,deprecations,lazy,agg,parser
DatafeedConfig -> public static String documentId(String datafeedId);1545155131;The name of datafeed configuration document name from the datafeed ID.__@param datafeedId The datafeed ID_@return The ID of document the datafeed config is persisted in;public static String documentId(String datafeedId) {_        return TYPE + "-" + datafeedId__    };the,name,of,datafeed,configuration,document,name,from,the,datafeed,id,param,datafeed,id,the,datafeed,id,return,the,id,of,document,the,datafeed,config,is,persisted,in;public,static,string,document,id,string,datafeed,id,return,type,datafeed,id
DatafeedConfig -> public static String documentId(String datafeedId);1545310197;The name of datafeed configuration document name from the datafeed ID.__@param datafeedId The datafeed ID_@return The ID of document the datafeed config is persisted in;public static String documentId(String datafeedId) {_        return TYPE + "-" + datafeedId__    };the,name,of,datafeed,configuration,document,name,from,the,datafeed,id,param,datafeed,id,the,datafeed,id,return,the,id,of,document,the,datafeed,config,is,persisted,in;public,static,string,document,id,string,datafeed,id,return,type,datafeed,id
DatafeedConfig -> public static String documentId(String datafeedId);1546587824;The name of datafeed configuration document name from the datafeed ID.__@param datafeedId The datafeed ID_@return The ID of document the datafeed config is persisted in;public static String documentId(String datafeedId) {_        return TYPE + "-" + datafeedId__    };the,name,of,datafeed,configuration,document,name,from,the,datafeed,id,param,datafeed,id,the,datafeed,id,return,the,id,of,document,the,datafeed,config,is,persisted,in;public,static,string,document,id,string,datafeed,id,return,type,datafeed,id
DatafeedConfig -> public static String documentId(String datafeedId);1548265937;The name of datafeed configuration document name from the datafeed ID.__@param datafeedId The datafeed ID_@return The ID of document the datafeed config is persisted in;public static String documentId(String datafeedId) {_        return TYPE + "-" + datafeedId__    };the,name,of,datafeed,configuration,document,name,from,the,datafeed,id,param,datafeed,id,the,datafeed,id,return,the,id,of,document,the,datafeed,config,is,persisted,in;public,static,string,document,id,string,datafeed,id,return,type,datafeed,id
DatafeedConfig -> public static String documentId(String datafeedId);1548879140;The name of datafeed configuration document name from the datafeed ID.__@param datafeedId The datafeed ID_@return The ID of document the datafeed config is persisted in;public static String documentId(String datafeedId) {_        return TYPE + "-" + datafeedId__    };the,name,of,datafeed,configuration,document,name,from,the,datafeed,id,param,datafeed,id,the,datafeed,id,return,the,id,of,document,the,datafeed,config,is,persisted,in;public,static,string,document,id,string,datafeed,id,return,type,datafeed,id
DatafeedConfig -> public static String documentId(String datafeedId);1550587606;The name of datafeed configuration document name from the datafeed ID.__@param datafeedId The datafeed ID_@return The ID of document the datafeed config is persisted in;public static String documentId(String datafeedId) {_        return TYPE + "-" + datafeedId__    };the,name,of,datafeed,configuration,document,name,from,the,datafeed,id,param,datafeed,id,the,datafeed,id,return,the,id,of,document,the,datafeed,config,is,persisted,in;public,static,string,document,id,string,datafeed,id,return,type,datafeed,id
DatafeedConfig -> public boolean hasAggregations();1524684173;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedConfig -> public boolean hasAggregations();1531729807;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedConfig -> public boolean hasAggregations();1532685069;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedConfig -> public boolean hasAggregations();1535139672;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedConfig -> public boolean hasAggregations();1536314350;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedConfig -> public boolean hasAggregations();1538170812;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedConfig -> public boolean hasAggregations();1541092382;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedConfig -> public boolean hasAggregations();1542310365;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedConfig -> public boolean hasAggregations();1542372612;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedConfig -> public boolean hasAggregations();1543938107;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,size,0
DatafeedConfig -> public boolean hasAggregations();1543951769;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,size,0
DatafeedConfig -> public boolean hasAggregations();1544133517;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,size,0
DatafeedConfig -> public boolean hasAggregations();1544213785;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,size,0
DatafeedConfig -> public boolean hasAggregations();1544454347;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,size,0
DatafeedConfig -> public boolean hasAggregations();1545155131;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,size,0
DatafeedConfig -> public boolean hasAggregations();1545310197;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,size,0
DatafeedConfig -> public boolean hasAggregations();1546587824;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,size,0
DatafeedConfig -> public boolean hasAggregations();1548265937;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,size,0
DatafeedConfig -> public boolean hasAggregations();1548879140;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,size,0
DatafeedConfig -> public boolean hasAggregations();1550587606;@return {@code true} when there are non-empty aggregations, {@code false} otherwise;public boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;public,boolean,has,aggregations,return,aggregations,null,aggregations,size,0
