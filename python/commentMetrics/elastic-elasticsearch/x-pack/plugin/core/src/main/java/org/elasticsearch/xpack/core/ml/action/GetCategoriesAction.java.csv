commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public,static;2;7;;public static Request parseRequest(String jobId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (jobId != null) {         request.jobId = jobId.     }     return request. }
false;public;0;1;;public String getJobId() {     return jobId. }
false;public;0;1;;public PageParams getPageParams() {     return pageParams. }
false;public;0;1;;public Long getCategoryId() {     return categoryId. }
false;public;1;7;;public void setCategoryId(Long categoryId) {     if (pageParams != null) {         throw new IllegalArgumentException("Param [" + CATEGORY_ID.getPreferredName() + "] is incompatible with [" + PageParams.FROM.getPreferredName() + ", " + PageParams.SIZE.getPreferredName() + "].").     }     this.categoryId = ExceptionsHelper.requireNonNull(categoryId, CATEGORY_ID.getPreferredName()). }
false;public;1;7;;public void setPageParams(PageParams pageParams) {     if (categoryId != null) {         throw new IllegalArgumentException("Param [" + PageParams.FROM.getPreferredName() + ", " + PageParams.SIZE.getPreferredName() + "] is incompatible with [" + CATEGORY_ID.getPreferredName() + "].").     }     this.pageParams = pageParams. }
false;public;0;10;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (pageParams == null && categoryId == null) {         validationException = addValidationError("Both [" + CATEGORY_ID.getPreferredName() + "] and [" + PageParams.FROM.getPreferredName() + ", " + PageParams.SIZE.getPreferredName() + "] " + "cannot be null", validationException).     }     return validationException. }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     jobId = in.readString().     categoryId = in.readOptionalLong().     pageParams = in.readOptionalWriteable(PageParams::new). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(jobId).     out.writeOptionalLong(categoryId).     out.writeOptionalWriteable(pageParams). }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (categoryId != null) {         builder.field(CATEGORY_ID.getPreferredName(), categoryId).     }     if (pageParams != null) {         builder.field(PageParams.PAGE.getPreferredName(), pageParams).     }     builder.endObject().     return builder. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Request request = (Request) o.     return Objects.equals(jobId, request.jobId) && Objects.equals(categoryId, request.categoryId) && Objects.equals(pageParams, request.pageParams). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, categoryId, pageParams). }
false;public;0;3;;public QueryPage<CategoryDefinition> getResult() {     return result. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     result = new QueryPage<>(in, CategoryDefinition::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     result.writeTo(out). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     result.doXContentBody(builder, params).     builder.endObject().     return builder. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Response response = (Response) o.     return Objects.equals(result, response.result). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(result). }
