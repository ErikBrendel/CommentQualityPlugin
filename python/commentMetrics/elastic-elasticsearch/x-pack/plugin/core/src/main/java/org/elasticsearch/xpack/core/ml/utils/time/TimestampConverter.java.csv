commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Converts the a textual timestamp into an epoch in seconds  *  * @param timestamp the timestamp to convert, not null. The timestamp is expected to  * be formatted according to the pattern of the formatter. In addition, the pattern is  * assumed to contain both date and time information.  * @return the epoch in seconds for the given timestamp  * @throws DateTimeParseException if unable to parse the given timestamp  */ ;/**  * Converts the a textual timestamp into an epoch in seconds  *  * @param timestamp the timestamp to convert, not null. The timestamp is expected to  * be formatted according to the pattern of the formatter. In addition, the pattern is  * assumed to contain both date and time information.  * @return the epoch in seconds for the given timestamp  * @throws DateTimeParseException if unable to parse the given timestamp  */ long toEpochSeconds(String timestamp).
true;;1;1;/**  * Converts the a textual timestamp into an epoch in milliseconds  *  * @param timestamp the timestamp to convert, not null. The timestamp is expected to  * be formatted according to the pattern of the formatter. In addition, the pattern is  * assumed to contain both date and time information.  * @return the epoch in milliseconds for the given timestamp  * @throws DateTimeParseException if unable to parse the given timestamp  */ ;/**  * Converts the a textual timestamp into an epoch in milliseconds  *  * @param timestamp the timestamp to convert, not null. The timestamp is expected to  * be formatted according to the pattern of the formatter. In addition, the pattern is  * assumed to contain both date and time information.  * @return the epoch in milliseconds for the given timestamp  * @throws DateTimeParseException if unable to parse the given timestamp  */ long toEpochMillis(String timestamp).
