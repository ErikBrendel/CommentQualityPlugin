commented;modifiers;parameterAmount;loc;comment;code
true;public;0;6;// are also carried out in XPackClientPlugin.java ;// Until this is moved out to its own plugin (its currently in XPackPlugin.java, we need to make sure that any edits to this file // are also carried out in XPackClientPlugin.java public List<NamedWriteableRegistry.Entry> getNamedWriteables() {     List<NamedWriteableRegistry.Entry> entries = new ArrayList<>().     entries.add(new NamedWriteableRegistry.Entry(MetaData.Custom.class, LicensesMetaData.TYPE, LicensesMetaData::new)).     entries.add(new NamedWriteableRegistry.Entry(NamedDiff.class, LicensesMetaData.TYPE, LicensesMetaData::readDiffFrom)).     return entries. }
true;public;0;7;// are also carried out in XPackClientPlugin.java ;// Until this is moved out to its own plugin (its currently in XPackPlugin.java, we need to make sure that any edits to this file // are also carried out in XPackClientPlugin.java public List<NamedXContentRegistry.Entry> getNamedXContent() {     List<NamedXContentRegistry.Entry> entries = new ArrayList<>().     // Metadata     entries.add(new NamedXContentRegistry.Entry(MetaData.Custom.class, new ParseField(LicensesMetaData.TYPE), LicensesMetaData::fromXContent)).     return entries. }
false;public;0;10;;@Override public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {     return Arrays.asList(new ActionHandler<>(PutLicenseAction.INSTANCE, TransportPutLicenseAction.class), new ActionHandler<>(GetLicenseAction.INSTANCE, TransportGetLicenseAction.class), new ActionHandler<>(DeleteLicenseAction.INSTANCE, TransportDeleteLicenseAction.class), new ActionHandler<>(PostStartTrialAction.INSTANCE, TransportPostStartTrialAction.class), new ActionHandler<>(GetTrialStatusAction.INSTANCE, TransportGetTrialStatusAction.class), new ActionHandler<>(PostStartBasicAction.INSTANCE, TransportPostStartBasicAction.class), new ActionHandler<>(GetBasicStatusAction.INSTANCE, TransportGetBasicStatusAction.class)). }
false;public;7;14;;@Override public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings, IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver, Supplier<DiscoveryNodes> nodesInCluster) {     List<RestHandler> handlers = new ArrayList<>().     handlers.add(new RestGetLicenseAction(settings, restController)).     handlers.add(new RestPutLicenseAction(settings, restController)).     handlers.add(new RestDeleteLicenseAction(settings, restController)).     handlers.add(new RestGetTrialStatus(settings, restController)).     handlers.add(new RestGetBasicStatus(settings, restController)).     handlers.add(new RestPostStartTrialLicense(settings, restController)).     handlers.add(new RestPostStartBasicLicense(settings, restController)).     return handlers. }
true;public;0;4;// are also carried out in XPackClientPlugin.java ;// Until this is moved out to its own plugin (its currently in XPackPlugin.java, we need to make sure that any edits to this file // are also carried out in XPackClientPlugin.java public List<Setting<?>> getSettings() {     // TODO convert this wildcard to a real setting     return Collections.singletonList(Setting.groupSetting("license.", Setting.Property.NodeScope)). }
