commented;modifiers;parameterAmount;loc;comment;code
true;public;2;3;/**  * Create or modify a lifecycle policy definition  */ ;/**  * Create or modify a lifecycle policy definition  */ public void putLifecyclePolicy(PutLifecycleAction.Request request, ActionListener<PutLifecycleAction.Response> listener) {     client.execute(PutLifecycleAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Create or modify a lifecycle policy definition  */ ;/**  * Create or modify a lifecycle policy definition  */ public ActionFuture<PutLifecycleAction.Response> putLifecyclePolicy(PutLifecycleAction.Request request) {     return client.execute(PutLifecycleAction.INSTANCE, request). }
true;public;2;3;/**  * Get a lifecycle policy definition  */ ;/**  * Get a lifecycle policy definition  */ public void getLifecyclePolicy(GetLifecycleAction.Request request, ActionListener<GetLifecycleAction.Response> listener) {     client.execute(GetLifecycleAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Get a lifecycle policy definition  */ ;/**  * Get a lifecycle policy definition  */ public ActionFuture<GetLifecycleAction.Response> getLifecyclePolicy(GetLifecycleAction.Request request) {     return client.execute(GetLifecycleAction.INSTANCE, request). }
true;public;2;3;/**  * Delete a lifecycle policy definition  */ ;/**  * Delete a lifecycle policy definition  */ public void deleteLifecyclePolicy(DeleteLifecycleAction.Request request, ActionListener<DeleteLifecycleAction.Response> listener) {     client.execute(DeleteLifecycleAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Delete a lifecycle policy definition  */ ;/**  * Delete a lifecycle policy definition  */ public ActionFuture<DeleteLifecycleAction.Response> deleteLifecyclePolicy(DeleteLifecycleAction.Request request) {     return client.execute(DeleteLifecycleAction.INSTANCE, request). }
true;public;2;3;/**  * Explain the current lifecycle state for an index  */ ;/**  * Explain the current lifecycle state for an index  */ public void explainLifecycle(ExplainLifecycleRequest request, ActionListener<ExplainLifecycleResponse> listener) {     client.execute(ExplainLifecycleAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Explain the current lifecycle state for an index  */ ;/**  * Explain the current lifecycle state for an index  */ public ActionFuture<ExplainLifecycleResponse> explainLifecycle(ExplainLifecycleRequest request) {     return client.execute(ExplainLifecycleAction.INSTANCE, request). }
true;public;2;3;/**  * Returns the current status of the ILM plugin  */ ;/**  * Returns the current status of the ILM plugin  */ public void getStatus(GetStatusAction.Request request, ActionListener<GetStatusAction.Response> listener) {     client.execute(GetStatusAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Returns the current status of the ILM plugin  */ ;/**  * Returns the current status of the ILM plugin  */ public ActionFuture<GetStatusAction.Response> getStatus(GetStatusAction.Request request) {     return client.execute(GetStatusAction.INSTANCE, request). }
true;public;2;4;/**  * Removes index lifecycle management from an index  */ ;/**  * Removes index lifecycle management from an index  */ public void removeIndexLifecyclePolicy(RemoveIndexLifecyclePolicyAction.Request request, ActionListener<RemoveIndexLifecyclePolicyAction.Response> listener) {     client.execute(RemoveIndexLifecyclePolicyAction.INSTANCE, request, listener). }
true;public;1;4;/**  * Removes index lifecycle management from an index  */ ;/**  * Removes index lifecycle management from an index  */ public ActionFuture<RemoveIndexLifecyclePolicyAction.Response> removeIndexLifecyclePolicy(RemoveIndexLifecyclePolicyAction.Request request) {     return client.execute(RemoveIndexLifecyclePolicyAction.INSTANCE, request). }
true;public;2;3;/**  * Retries the policy for an index which is currently in ERROR  */ ;/**  * Retries the policy for an index which is currently in ERROR  */ public void retryPolicy(RetryAction.Request request, ActionListener<RetryAction.Response> listener) {     client.execute(RetryAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Removes index lifecycle management from an index  */ ;/**  * Removes index lifecycle management from an index  */ public ActionFuture<RetryAction.Response> retryPolicy(RetryAction.Request request) {     return client.execute(RetryAction.INSTANCE, request). }
true;public;2;3;/**  * Starts the ILM plugin  */ ;/**  * Starts the ILM plugin  */ public void startILM(StartILMRequest request, ActionListener<AcknowledgedResponse> listener) {     client.execute(StartILMAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Starts the ILM plugin  */ ;/**  * Starts the ILM plugin  */ public ActionFuture<AcknowledgedResponse> startILM(StartILMRequest request) {     return client.execute(StartILMAction.INSTANCE, request). }
true;public;2;3;/**  * Stops the ILM plugin  */ ;/**  * Stops the ILM plugin  */ public void stopILM(StopILMRequest request, ActionListener<AcknowledgedResponse> listener) {     client.execute(StopILMAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Stops the ILM plugin  */ ;/**  * Stops the ILM plugin  */ public ActionFuture<AcknowledgedResponse> stopILM(StopILMRequest request) {     return client.execute(StopILMAction.INSTANCE, request). }
