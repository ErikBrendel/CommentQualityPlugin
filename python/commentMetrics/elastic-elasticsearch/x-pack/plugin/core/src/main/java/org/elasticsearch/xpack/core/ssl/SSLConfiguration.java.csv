commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;/**  * The configuration for the key, if any, that will be used as part of this ssl configuration  */ ;/**  * The configuration for the key, if any, that will be used as part of this ssl configuration  */ KeyConfig keyConfig() {     return keyConfig. }
true;;0;3;/**  * The configuration of trust material that will be used as part of this ssl configuration  */ ;/**  * The configuration of trust material that will be used as part of this ssl configuration  */ TrustConfig trustConfig() {     return trustConfig. }
true;;0;3;/**  * The cipher suites that will be used for this ssl configuration  */ ;/**  * The cipher suites that will be used for this ssl configuration  */ List<String> cipherSuites() {     return ciphers. }
true;;0;3;/**  * The protocols that are supported by this configuration  */ ;/**  * The protocols that are supported by this configuration  */ List<String> supportedProtocols() {     return supportedProtocols. }
true;public;0;3;/**  * The verification mode for this configuration. this mode controls certificate and hostname verification  */ ;/**  * The verification mode for this configuration. this mode controls certificate and hostname verification  */ public VerificationMode verificationMode() {     return verificationMode. }
true;;0;3;/**  * The client auth configuration  */ ;/**  * The client auth configuration  */ SSLClientAuth sslClientAuth() {     return sslClientAuth. }
true;;1;8;/**  * Provides the list of paths to files that back this configuration  */ ;/**  * Provides the list of paths to files that back this configuration  */ List<Path> filesToMonitor(@Nullable Environment environment) {     if (keyConfig() == trustConfig()) {         return keyConfig().filesToMonitor(environment).     }     List<Path> paths = new ArrayList<>(keyConfig().filesToMonitor(environment)).     paths.addAll(trustConfig().filesToMonitor(environment)).     return paths. }
false;public;0;11;;@Override public String toString() {     return "SSLConfiguration{" + "keyConfig=[" + keyConfig + "], trustConfig=" + trustConfig + "], cipherSuites=[" + ciphers + "], supportedProtocols=[" + supportedProtocols + "], sslClientAuth=[" + sslClientAuth + "], verificationMode=[" + verificationMode + "]}". }
false;public;1;28;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (!(o instanceof SSLConfiguration))         return false.     SSLConfiguration that = (SSLConfiguration) o.     if (this.keyConfig() != null ? !this.keyConfig().equals(that.keyConfig()) : that.keyConfig() != null) {         return false.     }     if (this.trustConfig() != null ? !this.trustConfig().equals(that.trustConfig()) : that.trustConfig() != null) {         return false.     }     if (this.cipherSuites() != null ? !this.cipherSuites().equals(that.cipherSuites()) : that.cipherSuites() != null) {         return false.     }     if (!this.supportedProtocols().equals(that.supportedProtocols())) {         return false.     }     if (this.verificationMode() != that.verificationMode()) {         return false.     }     if (this.sslClientAuth() != that.sslClientAuth()) {         return false.     }     return this.supportedProtocols() != null ? this.supportedProtocols().equals(that.supportedProtocols()) : that.supportedProtocols() == null. }
false;public;0;10;;@Override public int hashCode() {     int result = this.keyConfig() != null ? this.keyConfig().hashCode() : 0.     result = 31 * result + (this.trustConfig() != null ? this.trustConfig().hashCode() : 0).     result = 31 * result + (this.cipherSuites() != null ? this.cipherSuites().hashCode() : 0).     result = 31 * result + (this.supportedProtocols() != null ? this.supportedProtocols().hashCode() : 0).     result = 31 * result + this.verificationMode().hashCode().     result = 31 * result + this.sslClientAuth().hashCode().     return result. }
false;private,static;1;5;;private static KeyConfig createKeyConfig(Settings settings) {     final String trustStoreAlgorithm = SETTINGS_PARSER.truststoreAlgorithm.get(settings).     final KeyConfig config = CertParsingUtils.createKeyConfig(SETTINGS_PARSER.x509KeyPair, settings, trustStoreAlgorithm).     return config == null ? KeyConfig.NONE : config. }
false;private,static;2;6;;private static TrustConfig createTrustConfig(Settings settings, KeyConfig keyConfig) {     final TrustConfig trustConfig = createCertChainTrustConfig(settings, keyConfig).     return SETTINGS_PARSER.trustRestrictionsPath.get(settings).map(path -> (TrustConfig) new RestrictedTrustConfig(path, trustConfig)).orElse(trustConfig). }
false;private,static;2;23;;private static TrustConfig createCertChainTrustConfig(Settings settings, KeyConfig keyConfig) {     String trustStorePath = SETTINGS_PARSER.truststorePath.get(settings).orElse(null).     String trustStoreType = getKeyStoreType(SETTINGS_PARSER.truststoreType, settings, trustStorePath).     List<String> caPaths = getListOrNull(SETTINGS_PARSER.caPaths, settings).     if (trustStorePath != null && caPaths != null) {         throw new IllegalArgumentException("you cannot specify a truststore and ca files").     }     VerificationMode verificationMode = SETTINGS_PARSER.verificationMode.get(settings).orElse(XPackSettings.VERIFICATION_MODE_DEFAULT).     if (verificationMode.isCertificateVerificationEnabled() == false) {         return TrustAllConfig.INSTANCE.     } else if (caPaths != null) {         return new PEMTrustConfig(caPaths).     } else if (trustStorePath != null || trustStoreType.equalsIgnoreCase("pkcs11")) {         String trustStoreAlgorithm = SETTINGS_PARSER.truststoreAlgorithm.get(settings).         SecureString trustStorePassword = SETTINGS_PARSER.truststorePassword.get(settings).         return new StoreTrustConfig(trustStorePath, trustStoreType, trustStorePassword, trustStoreAlgorithm).     } else if (keyConfig != KeyConfig.NONE) {         return DefaultJDKTrustConfig.merge(keyConfig, getDefaultTrustStorePassword(settings)).     } else {         return new DefaultJDKTrustConfig(getDefaultTrustStorePassword(settings)).     } }
false;private,static;1;15;;private static SecureString getDefaultTrustStorePassword(Settings settings) {     // We only handle the default store password if it's a PKCS#11 token     if (System.getProperty("javax.net.ssl.trustStoreType", "").equalsIgnoreCase("PKCS11")) {         try (SecureString systemTrustStorePassword = new SecureString(System.getProperty("javax.net.ssl.trustStorePassword", "").toCharArray())) {             if (systemTrustStorePassword.length() == 0) {                 try (SecureString trustStorePassword = SETTINGS_PARSER.truststorePassword.get(settings)) {                     return trustStorePassword.                 }             }             return systemTrustStorePassword.         }     }     return null. }
false;private,static;2;3;;private static List<String> getListOrNull(Setting<List<String>> listSetting, Settings settings) {     return getListOrDefault(listSetting, settings, null). }
false;private,static;3;6;;private static List<String> getListOrDefault(Setting<List<String>> listSetting, Settings settings, List<String> defaultValue) {     if (listSetting.exists(settings)) {         return listSetting.get(settings).     }     return defaultValue. }
true;;1;6;/**  * Returns information about each certificate that referenced by this SSL configurations.  * This includes certificates used for identity (with a private key) and those used for trust, but excludes  * certificates that are provided by the JRE.  * @see TrustConfig#certificates(Environment)  */ ;/**  * Returns information about each certificate that referenced by this SSL configurations.  * This includes certificates used for identity (with a private key) and those used for trust, but excludes  * certificates that are provided by the JRE.  * @see TrustConfig#certificates(Environment)  */ List<CertificateInfo> getDefinedCertificates(@Nullable Environment environment) throws GeneralSecurityException, IOException {     List<CertificateInfo> certificates = new ArrayList<>().     certificates.addAll(keyConfig.certificates(environment)).     certificates.addAll(trustConfig.certificates(environment)).     return certificates. }
