commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public Writeable.Reader<Response> getResponseReader() {     return Response::new. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     // isBackground for fwc     out.writeBoolean(true). }
false;public;0;3;;public boolean isBackGround() {     return true. }
false;public;0;3;;public boolean isForeground() {     return !isBackGround(). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, isBackGround()). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     PersistJobAction.Request other = (PersistJobAction.Request) obj.     return Objects.equals(jobId, other.jobId) && this.isBackGround() == other.isBackGround(). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(persisted). }
false;public;0;3;;public boolean isPersisted() {     return persisted. }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Response that = (Response) o.     return this.persisted == that.persisted. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(persisted). }
