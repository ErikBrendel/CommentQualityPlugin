commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;@Override public ClusterState performAction(Index index, ClusterState clusterState) {     IndexMetaData indexMetaData = clusterState.metaData().index(index).     if (indexMetaData == null) {         // Index must have been since deleted, ignore it         logger.debug("[{}] lifecycle action for index [{}] executed but index no longer exists", getKey().getAction(), index.getName()).         return clusterState.     }     predicateValue.set(predicate.test(index, clusterState)).     return clusterState. }
true;public,final;0;7;/**  * This method returns the next step to execute based on the predicate. If  * the predicate returned true, then nextStepKeyOnTrue is the key of the  * next step to run, otherwise nextStepKeyOnFalse is.  *  * throws {@link UnsupportedOperationException} if performAction was not called yet  *  * @return next step to execute  */ ;/**  * This method returns the next step to execute based on the predicate. If  * the predicate returned true, then nextStepKeyOnTrue is the key of the  * next step to run, otherwise nextStepKeyOnFalse is.  *  * throws {@link UnsupportedOperationException} if performAction was not called yet  *  * @return next step to execute  */ @Override public final StepKey getNextStepKey() {     if (predicateValue.get() == null) {         throw new IllegalStateException("Cannot call getNextStepKey before performAction").     }     return predicateValue.get() ? nextStepKeyOnTrue : nextStepKeyOnFalse. }
true;final;0;3;/**  * @return the next step if {@code predicate} is false  */ ;/**  * @return the next step if {@code predicate} is false  */ final StepKey getNextStepKeyOnFalse() {     return nextStepKeyOnFalse. }
true;final;0;3;/**  * @return the next step if {@code predicate} is true  */ ;/**  * @return the next step if {@code predicate} is true  */ final StepKey getNextStepKeyOnTrue() {     return nextStepKeyOnTrue. }
false;public,final;0;3;;public final BiPredicate<Index, ClusterState> getPredicate() {     return predicate. }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     if (!super.equals(o))         return false.     BranchingStep that = (BranchingStep) o.     return super.equals(o) && Objects.equals(nextStepKeyOnFalse, that.nextStepKeyOnFalse) && Objects.equals(nextStepKeyOnTrue, that.nextStepKeyOnTrue). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), nextStepKeyOnFalse, nextStepKeyOnTrue). }
