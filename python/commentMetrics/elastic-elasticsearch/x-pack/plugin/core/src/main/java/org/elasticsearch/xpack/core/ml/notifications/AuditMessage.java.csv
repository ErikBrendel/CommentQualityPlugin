commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(jobId).     out.writeOptionalString(message).     boolean hasLevel = level != null.     out.writeBoolean(hasLevel).     if (hasLevel) {         level.writeTo(out).     }     boolean hasTimestamp = timestamp != null.     out.writeBoolean(hasTimestamp).     if (hasTimestamp) {         out.writeLong(timestamp.getTime()).     }     out.writeOptionalString(nodeName). }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;1;3;;public void setJobId(String jobId) {     this.jobId = jobId. }
false;public;0;3;;public String getMessage() {     return message. }
false;public;1;3;;public void setMessage(String message) {     this.message = message. }
false;public;0;3;;public Level getLevel() {     return level. }
false;public;1;3;;public void setLevel(Level level) {     this.level = level. }
false;public;0;3;;public Date getTimestamp() {     return timestamp. }
false;public;1;3;;public void setTimestamp(Date timestamp) {     this.timestamp = timestamp. }
false;public;0;3;;public String getNodeName() {     return nodeName. }
false;public;1;3;;public void setNodeName(String nodeName) {     this.nodeName = nodeName. }
false;public,static;3;3;;public static AuditMessage newInfo(String jobId, String message, String nodeName) {     return new AuditMessage(jobId, message, Level.INFO, nodeName). }
false;public,static;3;3;;public static AuditMessage newWarning(String jobId, String message, String nodeName) {     return new AuditMessage(jobId, message, Level.WARNING, nodeName). }
false;public,static;3;3;;public static AuditMessage newActivity(String jobId, String message, String nodeName) {     return new AuditMessage(jobId, message, Level.ACTIVITY, nodeName). }
false;public,static;3;3;;public static AuditMessage newError(String jobId, String message, String nodeName) {     return new AuditMessage(jobId, message, Level.ERROR, nodeName). }
false;public;2;21;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (jobId != null) {         builder.field(Job.ID.getPreferredName(), jobId).     }     if (message != null) {         builder.field(MESSAGE.getPreferredName(), message).     }     if (level != null) {         builder.field(LEVEL.getPreferredName(), level).     }     if (timestamp != null) {         builder.field(TIMESTAMP.getPreferredName(), timestamp.getTime()).     }     if (nodeName != null) {         builder.field(NODE_NAME.getPreferredName(), nodeName).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, message, level, timestamp). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     AuditMessage other = (AuditMessage) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(message, other.message) && Objects.equals(level, other.level) && Objects.equals(timestamp, other.timestamp). }
