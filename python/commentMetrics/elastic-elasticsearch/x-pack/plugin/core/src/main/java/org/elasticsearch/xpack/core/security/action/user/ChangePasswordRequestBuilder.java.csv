# id;timestamp;commentText;codeText;commentWords;codeWords
ChangePasswordRequestBuilder -> public ChangePasswordRequestBuilder password(char[] password);1524684173;Sets the password. Note: the char[] passed to this method will be cleared.;public ChangePasswordRequestBuilder password(char[] password) {_        try (SecureString secureString = new SecureString(password)) {_            char[] hash = validateAndHashPassword(secureString)__            request.passwordHash(hash)__        }_        return this__    };sets,the,password,note,the,char,passed,to,this,method,will,be,cleared;public,change,password,request,builder,password,char,password,try,secure,string,secure,string,new,secure,string,password,char,hash,validate,and,hash,password,secure,string,request,password,hash,hash,return,this
ChangePasswordRequestBuilder -> public ChangePasswordRequestBuilder password(char[] password);1527840262;Sets the password. Note: the char[] passed to this method will be cleared.;public ChangePasswordRequestBuilder password(char[] password) {_        try (SecureString secureString = new SecureString(password)) {_            char[] hash = validateAndHashPassword(secureString)__            request.passwordHash(hash)__        }_        return this__    };sets,the,password,note,the,char,passed,to,this,method,will,be,cleared;public,change,password,request,builder,password,char,password,try,secure,string,secure,string,new,secure,string,password,char,hash,validate,and,hash,password,secure,string,request,password,hash,hash,return,this
ChangePasswordRequestBuilder -> public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType, Hasher hasher) throws         IOException;1531179852;Populate the change password request from the source in the provided content type;public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType, Hasher hasher) throws_        IOException {_        _        try (InputStream stream = source.streamInput()__             XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            XContentUtils.verifyObject(parser)__            XContentParser.Token token__            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        String password = parser.text()__                        final char[] passwordChars = password.toCharArray()__                        password(passwordChars, hasher)__                        assert CharBuffer.wrap(passwordChars).chars().noneMatch((i) -> (char) i != (char) 0) : "expected password to " +_                                "clear the char[] but it did not!"__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else {_                    throw new ElasticsearchParseException("failed to parse change password request. unexpected field [{}]",_                            currentFieldName)__                }_            }_        }_        return this__    };populate,the,change,password,request,from,the,source,in,the,provided,content,type;public,change,password,request,builder,source,bytes,reference,source,xcontent,type,x,content,type,hasher,hasher,throws,ioexception,try,input,stream,stream,source,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,xcontent,utils,verify,object,parser,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,user,fields,password,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,string,password,parser,text,final,char,password,chars,password,to,char,array,password,password,chars,hasher,assert,char,buffer,wrap,password,chars,chars,none,match,i,char,i,char,0,expected,password,to,clear,the,char,but,it,did,not,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,throw,new,elasticsearch,parse,exception,failed,to,parse,change,password,request,unexpected,field,current,field,name,return,this
ChangePasswordRequestBuilder -> public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType, Hasher hasher) throws         IOException;1533295538;Populate the change password request from the source in the provided content type;public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType, Hasher hasher) throws_        IOException {_        _        try (InputStream stream = source.streamInput()__             XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            XContentUtils.verifyObject(parser)__            XContentParser.Token token__            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        String password = parser.text()__                        final char[] passwordChars = password.toCharArray()__                        password(passwordChars, hasher)__                        assert CharBuffer.wrap(passwordChars).chars().noneMatch((i) -> (char) i != (char) 0) : "expected password to " +_                                "clear the char[] but it did not!"__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else {_                    throw new ElasticsearchParseException("failed to parse change password request. unexpected field [{}]",_                            currentFieldName)__                }_            }_        }_        return this__    };populate,the,change,password,request,from,the,source,in,the,provided,content,type;public,change,password,request,builder,source,bytes,reference,source,xcontent,type,x,content,type,hasher,hasher,throws,ioexception,try,input,stream,stream,source,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,xcontent,utils,verify,object,parser,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,user,fields,password,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,string,password,parser,text,final,char,password,chars,password,to,char,array,password,password,chars,hasher,assert,char,buffer,wrap,password,chars,chars,none,match,i,char,i,char,0,expected,password,to,clear,the,char,but,it,did,not,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,throw,new,elasticsearch,parse,exception,failed,to,parse,change,password,request,unexpected,field,current,field,name,return,this
ChangePasswordRequestBuilder -> public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType, Hasher hasher) throws         IOException;1535552903;Populate the change password request from the source in the provided content type;public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType, Hasher hasher) throws_        IOException {_        _        try (InputStream stream = source.streamInput()__             XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            XContentUtils.verifyObject(parser)__            XContentParser.Token token__            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        String password = parser.text()__                        final char[] passwordChars = password.toCharArray()__                        password(passwordChars, hasher)__                        assert CharBuffer.wrap(passwordChars).chars().noneMatch((i) -> (char) i != (char) 0) : "expected password to " +_                                "clear the char[] but it did not!"__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else {_                    throw new ElasticsearchParseException("failed to parse change password request. unexpected field [{}]",_                            currentFieldName)__                }_            }_        }_        return this__    };populate,the,change,password,request,from,the,source,in,the,provided,content,type;public,change,password,request,builder,source,bytes,reference,source,xcontent,type,x,content,type,hasher,hasher,throws,ioexception,try,input,stream,stream,source,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,xcontent,utils,verify,object,parser,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,user,fields,password,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,string,password,parser,text,final,char,password,chars,password,to,char,array,password,password,chars,hasher,assert,char,buffer,wrap,password,chars,chars,none,match,i,char,i,char,0,expected,password,to,clear,the,char,but,it,did,not,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,throw,new,elasticsearch,parse,exception,failed,to,parse,change,password,request,unexpected,field,current,field,name,return,this
ChangePasswordRequestBuilder -> public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType) throws IOException;1524684173;Populate the change password request from the source in the provided content type;public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType) throws IOException {_        _        try (InputStream stream = source.streamInput()__             XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            XContentUtils.verifyObject(parser)__            XContentParser.Token token__            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        String password = parser.text()__                        final char[] passwordChars = password.toCharArray()__                        password(passwordChars)__                        assert CharBuffer.wrap(passwordChars).chars().noneMatch((i) -> (char) i != (char) 0) : "expected password to " +_                                "clear the char[] but it did not!"__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else {_                    throw new ElasticsearchParseException("failed to parse change password request. unexpected field [{}]",_                            currentFieldName)__                }_            }_        }_        return this__    };populate,the,change,password,request,from,the,source,in,the,provided,content,type;public,change,password,request,builder,source,bytes,reference,source,xcontent,type,x,content,type,throws,ioexception,try,input,stream,stream,source,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,xcontent,utils,verify,object,parser,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,user,fields,password,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,string,password,parser,text,final,char,password,chars,password,to,char,array,password,password,chars,assert,char,buffer,wrap,password,chars,chars,none,match,i,char,i,char,0,expected,password,to,clear,the,char,but,it,did,not,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,throw,new,elasticsearch,parse,exception,failed,to,parse,change,password,request,unexpected,field,current,field,name,return,this
ChangePasswordRequestBuilder -> public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType) throws IOException;1527840262;Populate the change password request from the source in the provided content type;public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType) throws IOException {_        _        try (InputStream stream = source.streamInput()__             XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            XContentUtils.verifyObject(parser)__            XContentParser.Token token__            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        String password = parser.text()__                        final char[] passwordChars = password.toCharArray()__                        password(passwordChars)__                        assert CharBuffer.wrap(passwordChars).chars().noneMatch((i) -> (char) i != (char) 0) : "expected password to " +_                                "clear the char[] but it did not!"__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else {_                    throw new ElasticsearchParseException("failed to parse change password request. unexpected field [{}]",_                            currentFieldName)__                }_            }_        }_        return this__    };populate,the,change,password,request,from,the,source,in,the,provided,content,type;public,change,password,request,builder,source,bytes,reference,source,xcontent,type,x,content,type,throws,ioexception,try,input,stream,stream,source,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,xcontent,utils,verify,object,parser,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,user,fields,password,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,string,password,parser,text,final,char,password,chars,password,to,char,array,password,password,chars,assert,char,buffer,wrap,password,chars,chars,none,match,i,char,i,char,0,expected,password,to,clear,the,char,but,it,did,not,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,throw,new,elasticsearch,parse,exception,failed,to,parse,change,password,request,unexpected,field,current,field,name,return,this
ChangePasswordRequestBuilder -> public ChangePasswordRequestBuilder password(char[] password, Hasher hasher);1531179852;Sets the password. Note: the char[] passed to this method will be cleared.;public ChangePasswordRequestBuilder password(char[] password, Hasher hasher) {_        try (SecureString secureString = new SecureString(password)) {_            char[] hash = validateAndHashPassword(secureString, hasher)__            request.passwordHash(hash)__        }_        return this__    };sets,the,password,note,the,char,passed,to,this,method,will,be,cleared;public,change,password,request,builder,password,char,password,hasher,hasher,try,secure,string,secure,string,new,secure,string,password,char,hash,validate,and,hash,password,secure,string,hasher,request,password,hash,hash,return,this
ChangePasswordRequestBuilder -> public ChangePasswordRequestBuilder password(char[] password, Hasher hasher);1533295538;Sets the password. Note: the char[] passed to this method will be cleared.;public ChangePasswordRequestBuilder password(char[] password, Hasher hasher) {_        try (SecureString secureString = new SecureString(password)) {_            char[] hash = validateAndHashPassword(secureString, hasher)__            request.passwordHash(hash)__        }_        return this__    };sets,the,password,note,the,char,passed,to,this,method,will,be,cleared;public,change,password,request,builder,password,char,password,hasher,hasher,try,secure,string,secure,string,new,secure,string,password,char,hash,validate,and,hash,password,secure,string,hasher,request,password,hash,hash,return,this
ChangePasswordRequestBuilder -> public ChangePasswordRequestBuilder password(char[] password, Hasher hasher);1535552903;Sets the password. Note: the char[] passed to this method will be cleared.;public ChangePasswordRequestBuilder password(char[] password, Hasher hasher) {_        try (SecureString secureString = new SecureString(password)) {_            char[] hash = validateAndHashPassword(secureString, hasher)__            request.passwordHash(hash)__        }_        return this__    };sets,the,password,note,the,char,passed,to,this,method,will,be,cleared;public,change,password,request,builder,password,char,password,hasher,hasher,try,secure,string,secure,string,new,secure,string,password,char,hash,validate,and,hash,password,secure,string,hasher,request,password,hash,hash,return,this
