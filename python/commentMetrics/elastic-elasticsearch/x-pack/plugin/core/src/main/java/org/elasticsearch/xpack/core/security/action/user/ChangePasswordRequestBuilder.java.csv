commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public ChangePasswordRequestBuilder username(String username) {     request.username(username).     return this. }
false;public,static;2;9;;public static char[] validateAndHashPassword(SecureString password, Hasher hasher) {     Validation.Error error = Validation.Users.validatePassword(password.getChars()).     if (error != null) {         ValidationException validationException = new ValidationException().         validationException.addValidationError(error.toString()).         throw validationException.     }     return hasher.hash(password). }
true;public;2;7;/**  * Sets the password. Note: the char[] passed to this method will be cleared.  */ ;/**  * Sets the password. Note: the char[] passed to this method will be cleared.  */ public ChangePasswordRequestBuilder password(char[] password, Hasher hasher) {     try (SecureString secureString = new SecureString(password)) {         char[] hash = validateAndHashPassword(secureString, hasher).         request.passwordHash(hash).     }     return this. }
true;public;3;31;/**  * Populate the change password request from the source in the provided content type  */ ;/**  * Populate the change password request from the source in the provided content type  */ public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType, Hasher hasher) throws IOException {     // EMPTY is ok here because we never call namedObject     try (InputStream stream = source.streamInput().         XContentParser parser = xContentType.xContent().createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {         XContentUtils.verifyObject(parser).         XContentParser.Token token.         String currentFieldName = null.         while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {             if (token == XContentParser.Token.FIELD_NAME) {                 currentFieldName = parser.currentName().             } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {                 if (token == XContentParser.Token.VALUE_STRING) {                     String password = parser.text().                     final char[] passwordChars = password.toCharArray().                     password(passwordChars, hasher).                     assert CharBuffer.wrap(passwordChars).chars().noneMatch((i) -> (char) i != (char) 0) : "expected password to " + "clear the char[] but it did not!".                 } else {                     throw new ElasticsearchParseException("expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token).                 }             } else {                 throw new ElasticsearchParseException("failed to parse change password request. unexpected field [{}]", currentFieldName).             }         }     }     return this. }
