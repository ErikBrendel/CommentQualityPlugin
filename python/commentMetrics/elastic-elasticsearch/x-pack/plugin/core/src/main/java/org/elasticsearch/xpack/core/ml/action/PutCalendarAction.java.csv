commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public,static;2;11;;public static Request parseRequest(String calendarId, XContentParser parser) {     Calendar.Builder builder = Calendar.STRICT_PARSER.apply(parser, null).     if (builder.getId() == null) {         builder.setId(calendarId).     } else if (!Strings.isNullOrEmpty(calendarId) && !calendarId.equals(builder.getId())) {         // If we have both URI and body filter ID, they must be identical         throw new IllegalArgumentException(Messages.getMessage(Messages.INCONSISTENT_ID, Calendar.ID.getPreferredName(), builder.getId(), calendarId)).     }     return new Request(builder.build()). }
false;public;0;3;;public Calendar getCalendar() {     return calendar. }
false;public;0;20;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if ("_all".equals(calendar.getId())) {         validationException = addValidationError("Cannot create a Calendar with the reserved name [_all]", validationException).     }     if (!MlStrings.isValidId(calendar.getId())) {         validationException = addValidationError(Messages.getMessage(Messages.INVALID_ID, Calendar.ID.getPreferredName(), calendar.getId()), validationException).     }     if (!MlStrings.hasValidLengthForId(calendar.getId())) {         validationException = addValidationError(Messages.getMessage(Messages.JOB_CONFIG_ID_TOO_LONG, MlStrings.ID_LENGTH_LIMIT), validationException).     }     return validationException. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     calendar = new Calendar(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     calendar.writeTo(out). }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     calendar.toXContent(builder, params).     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(calendar). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(calendar, other.calendar). }
false;public;1;10;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     if (in.getVersion().before(Version.V_6_3_0)) {         // the acknowledged flag was removed         in.readBoolean().     }     calendar = new Calendar(in). }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     if (out.getVersion().before(Version.V_6_3_0)) {         // the acknowledged flag is no longer supported         out.writeBoolean(true).     }     calendar.writeTo(out). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return calendar.toXContent(builder, params). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(calendar). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(calendar, other.calendar). }
