# id;timestamp;commentText;codeText;commentWords;codeWords
SchedulerEngine -> public int jobCount();1524684173;@return The number of currently active/triggered jobs;public int jobCount() {_        return schedules.size()__    };return,the,number,of,currently,active,triggered,jobs;public,int,job,count,return,schedules,size
SchedulerEngine -> public int jobCount();1528762805;@return The number of currently active/triggered jobs;public int jobCount() {_        return schedules.size()__    };return,the,number,of,currently,active,triggered,jobs;public,int,job,count,return,schedules,size
SchedulerEngine -> public int jobCount();1534848846;@return The number of currently active/triggered jobs;public int jobCount() {_        return schedules.size()__    };return,the,number,of,currently,active,triggered,jobs;public,int,job,count,return,schedules,size
SchedulerEngine -> public int jobCount();1535046779;@return The number of currently active/triggered jobs;public int jobCount() {_        return schedules.size()__    };return,the,number,of,currently,active,triggered,jobs;public,int,job,count,return,schedules,size
SchedulerEngine -> public int jobCount();1550784264;@return The number of currently active/triggered jobs;public int jobCount() {_        return schedules.size()__    };return,the,number,of,currently,active,triggered,jobs;public,int,job,count,return,schedules,size
SchedulerEngine -> Schedule -> long nextScheduledTimeAfter(long startTime, long now)_;1524684173;Returns the next scheduled time after the given time, according to this schedule. If the given schedule_cannot resolve the next scheduled time, then {@code -1} is returned. It really depends on the type of_schedule to determine when {@code -1} is returned. Some schedules (e.g. IntervalSchedule) will never return_{@code -1} as they can always compute the next scheduled time. {@code Cron} based schedules are good example_of schedules that may return {@code -1}, for example, when the schedule only points to times that are all_before the given time (in which case, there is no next scheduled time for the given time).__Example:__cron    0 0 0 * 1 ? 2013        (only points to days in January 2013)__time    2015-01-01 12:00:00     (this time is in 2015);long nextScheduledTimeAfter(long startTime, long now)_;returns,the,next,scheduled,time,after,the,given,time,according,to,this,schedule,if,the,given,schedule,cannot,resolve,the,next,scheduled,time,then,code,1,is,returned,it,really,depends,on,the,type,of,schedule,to,determine,when,code,1,is,returned,some,schedules,e,g,interval,schedule,will,never,return,code,1,as,they,can,always,compute,the,next,scheduled,time,code,cron,based,schedules,are,good,example,of,schedules,that,may,return,code,1,for,example,when,the,schedule,only,points,to,times,that,are,all,before,the,given,time,in,which,case,there,is,no,next,scheduled,time,for,the,given,time,example,cron,0,0,0,1,2013,only,points,to,days,in,january,2013,time,2015,01,01,12,00,00,this,time,is,in,2015;long,next,scheduled,time,after,long,start,time,long,now
SchedulerEngine -> Schedule -> long nextScheduledTimeAfter(long startTime, long now)_;1528762805;Returns the next scheduled time after the given time, according to this schedule. If the given schedule_cannot resolve the next scheduled time, then {@code -1} is returned. It really depends on the type of_schedule to determine when {@code -1} is returned. Some schedules (e.g. IntervalSchedule) will never return_{@code -1} as they can always compute the next scheduled time. {@code Cron} based schedules are good example_of schedules that may return {@code -1}, for example, when the schedule only points to times that are all_before the given time (in which case, there is no next scheduled time for the given time).__Example:__cron    0 0 0 * 1 ? 2013        (only points to days in January 2013)__time    2015-01-01 12:00:00     (this time is in 2015);long nextScheduledTimeAfter(long startTime, long now)_;returns,the,next,scheduled,time,after,the,given,time,according,to,this,schedule,if,the,given,schedule,cannot,resolve,the,next,scheduled,time,then,code,1,is,returned,it,really,depends,on,the,type,of,schedule,to,determine,when,code,1,is,returned,some,schedules,e,g,interval,schedule,will,never,return,code,1,as,they,can,always,compute,the,next,scheduled,time,code,cron,based,schedules,are,good,example,of,schedules,that,may,return,code,1,for,example,when,the,schedule,only,points,to,times,that,are,all,before,the,given,time,in,which,case,there,is,no,next,scheduled,time,for,the,given,time,example,cron,0,0,0,1,2013,only,points,to,days,in,january,2013,time,2015,01,01,12,00,00,this,time,is,in,2015;long,next,scheduled,time,after,long,start,time,long,now
SchedulerEngine -> Schedule -> long nextScheduledTimeAfter(long startTime, long now)_;1534848846;Returns the next scheduled time after the given time, according to this schedule. If the given schedule_cannot resolve the next scheduled time, then {@code -1} is returned. It really depends on the type of_schedule to determine when {@code -1} is returned. Some schedules (e.g. IntervalSchedule) will never return_{@code -1} as they can always compute the next scheduled time. {@code Cron} based schedules are good example_of schedules that may return {@code -1}, for example, when the schedule only points to times that are all_before the given time (in which case, there is no next scheduled time for the given time).__Example:__cron    0 0 0 * 1 ? 2013        (only points to days in January 2013)__time    2015-01-01 12:00:00     (this time is in 2015);long nextScheduledTimeAfter(long startTime, long now)_;returns,the,next,scheduled,time,after,the,given,time,according,to,this,schedule,if,the,given,schedule,cannot,resolve,the,next,scheduled,time,then,code,1,is,returned,it,really,depends,on,the,type,of,schedule,to,determine,when,code,1,is,returned,some,schedules,e,g,interval,schedule,will,never,return,code,1,as,they,can,always,compute,the,next,scheduled,time,code,cron,based,schedules,are,good,example,of,schedules,that,may,return,code,1,for,example,when,the,schedule,only,points,to,times,that,are,all,before,the,given,time,in,which,case,there,is,no,next,scheduled,time,for,the,given,time,example,cron,0,0,0,1,2013,only,points,to,days,in,january,2013,time,2015,01,01,12,00,00,this,time,is,in,2015;long,next,scheduled,time,after,long,start,time,long,now
SchedulerEngine -> Schedule -> long nextScheduledTimeAfter(long startTime, long now)_;1535046779;Returns the next scheduled time after the given time, according to this schedule. If the given schedule_cannot resolve the next scheduled time, then {@code -1} is returned. It really depends on the type of_schedule to determine when {@code -1} is returned. Some schedules (e.g. IntervalSchedule) will never return_{@code -1} as they can always compute the next scheduled time. {@code Cron} based schedules are good example_of schedules that may return {@code -1}, for example, when the schedule only points to times that are all_before the given time (in which case, there is no next scheduled time for the given time).__Example:__cron    0 0 0 * 1 ? 2013        (only points to days in January 2013)__time    2015-01-01 12:00:00     (this time is in 2015);long nextScheduledTimeAfter(long startTime, long now)_;returns,the,next,scheduled,time,after,the,given,time,according,to,this,schedule,if,the,given,schedule,cannot,resolve,the,next,scheduled,time,then,code,1,is,returned,it,really,depends,on,the,type,of,schedule,to,determine,when,code,1,is,returned,some,schedules,e,g,interval,schedule,will,never,return,code,1,as,they,can,always,compute,the,next,scheduled,time,code,cron,based,schedules,are,good,example,of,schedules,that,may,return,code,1,for,example,when,the,schedule,only,points,to,times,that,are,all,before,the,given,time,in,which,case,there,is,no,next,scheduled,time,for,the,given,time,example,cron,0,0,0,1,2013,only,points,to,days,in,january,2013,time,2015,01,01,12,00,00,this,time,is,in,2015;long,next,scheduled,time,after,long,start,time,long,now
SchedulerEngine -> Schedule -> long nextScheduledTimeAfter(long startTime, long now)_;1550784264;Returns the next scheduled time after the given time, according to this schedule. If the given schedule_cannot resolve the next scheduled time, then {@code -1} is returned. It really depends on the type of_schedule to determine when {@code -1} is returned. Some schedules (e.g. IntervalSchedule) will never return_{@code -1} as they can always compute the next scheduled time. {@code Cron} based schedules are good example_of schedules that may return {@code -1}, for example, when the schedule only points to times that are all_before the given time (in which case, there is no next scheduled time for the given time).__Example:__cron    0 0 0 * 1 ? 2013        (only points to days in January 2013)__time    2015-01-01 12:00:00     (this time is in 2015);long nextScheduledTimeAfter(long startTime, long now)_;returns,the,next,scheduled,time,after,the,given,time,according,to,this,schedule,if,the,given,schedule,cannot,resolve,the,next,scheduled,time,then,code,1,is,returned,it,really,depends,on,the,type,of,schedule,to,determine,when,code,1,is,returned,some,schedules,e,g,interval,schedule,will,never,return,code,1,as,they,can,always,compute,the,next,scheduled,time,code,cron,based,schedules,are,good,example,of,schedules,that,may,return,code,1,for,example,when,the,schedule,only,points,to,times,that,are,all,before,the,given,time,in,which,case,there,is,no,next,scheduled,time,for,the,given,time,example,cron,0,0,0,1,2013,only,points,to,days,in,january,2013,time,2015,01,01,12,00,00,this,time,is,in,2015;long,next,scheduled,time,after,long,start,time,long,now
