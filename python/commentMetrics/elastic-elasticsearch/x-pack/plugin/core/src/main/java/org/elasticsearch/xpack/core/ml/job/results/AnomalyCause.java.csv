commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;22;;private static ObjectParser<AnomalyCause, Void> createParser(boolean ignoreUnknownFields) {     ObjectParser<AnomalyCause, Void> parser = new ObjectParser<>(ANOMALY_CAUSE.getPreferredName(), ignoreUnknownFields, AnomalyCause::new).     parser.declareDouble(AnomalyCause::setProbability, PROBABILITY).     parser.declareString(AnomalyCause::setByFieldName, BY_FIELD_NAME).     parser.declareString(AnomalyCause::setByFieldValue, BY_FIELD_VALUE).     parser.declareString(AnomalyCause::setCorrelatedByFieldValue, CORRELATED_BY_FIELD_VALUE).     parser.declareString(AnomalyCause::setPartitionFieldName, PARTITION_FIELD_NAME).     parser.declareString(AnomalyCause::setPartitionFieldValue, PARTITION_FIELD_VALUE).     parser.declareString(AnomalyCause::setFunction, FUNCTION).     parser.declareString(AnomalyCause::setFunctionDescription, FUNCTION_DESCRIPTION).     parser.declareDoubleArray(AnomalyCause::setTypical, TYPICAL).     parser.declareDoubleArray(AnomalyCause::setActual, ACTUAL).     parser.declareString(AnomalyCause::setFieldName, FIELD_NAME).     parser.declareString(AnomalyCause::setOverFieldName, OVER_FIELD_NAME).     parser.declareString(AnomalyCause::setOverFieldValue, OVER_FIELD_VALUE).     parser.declareObjectArray(AnomalyCause::setInfluencers, ignoreUnknownFields ? Influence.LENIENT_PARSER : Influence.STRICT_PARSER, INFLUENCERS).     return parser. }
false;public;1;29;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeDouble(probability).     out.writeOptionalString(byFieldName).     out.writeOptionalString(byFieldValue).     out.writeOptionalString(correlatedByFieldValue).     out.writeOptionalString(partitionFieldName).     out.writeOptionalString(partitionFieldValue).     out.writeOptionalString(function).     out.writeOptionalString(functionDescription).     boolean hasTypical = typical != null.     out.writeBoolean(hasTypical).     if (hasTypical) {         out.writeGenericValue(typical).     }     boolean hasActual = actual != null.     out.writeBoolean(hasActual).     if (hasActual) {         out.writeGenericValue(actual).     }     out.writeOptionalString(fieldName).     out.writeOptionalString(overFieldName).     out.writeOptionalString(overFieldValue).     boolean hasInfluencers = influencers != null.     out.writeBoolean(hasInfluencers).     if (hasInfluencers) {         out.writeList(influencers).     } }
false;public;2;46;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(PROBABILITY.getPreferredName(), probability).     if (byFieldName != null) {         builder.field(BY_FIELD_NAME.getPreferredName(), byFieldName).     }     if (byFieldValue != null) {         builder.field(BY_FIELD_VALUE.getPreferredName(), byFieldValue).     }     if (correlatedByFieldValue != null) {         builder.field(CORRELATED_BY_FIELD_VALUE.getPreferredName(), correlatedByFieldValue).     }     if (partitionFieldName != null) {         builder.field(PARTITION_FIELD_NAME.getPreferredName(), partitionFieldName).     }     if (partitionFieldValue != null) {         builder.field(PARTITION_FIELD_VALUE.getPreferredName(), partitionFieldValue).     }     if (function != null) {         builder.field(FUNCTION.getPreferredName(), function).     }     if (functionDescription != null) {         builder.field(FUNCTION_DESCRIPTION.getPreferredName(), functionDescription).     }     if (typical != null) {         builder.field(TYPICAL.getPreferredName(), typical).     }     if (actual != null) {         builder.field(ACTUAL.getPreferredName(), actual).     }     if (fieldName != null) {         builder.field(FIELD_NAME.getPreferredName(), fieldName).     }     if (overFieldName != null) {         builder.field(OVER_FIELD_NAME.getPreferredName(), overFieldName).     }     if (overFieldValue != null) {         builder.field(OVER_FIELD_VALUE.getPreferredName(), overFieldValue).     }     if (influencers != null) {         builder.field(INFLUENCERS.getPreferredName(), influencers).     }     builder.endObject().     return builder. }
false;public;0;3;;public double getProbability() {     return probability. }
false;public;1;3;;public void setProbability(double value) {     probability = value. }
false;public;0;3;;public String getByFieldName() {     return byFieldName. }
false;public;1;3;;public void setByFieldName(String value) {     byFieldName = value.intern(). }
false;public;0;3;;public String getByFieldValue() {     return byFieldValue. }
false;public;1;3;;public void setByFieldValue(String value) {     byFieldValue = value.intern(). }
false;public;0;3;;public String getCorrelatedByFieldValue() {     return correlatedByFieldValue. }
false;public;1;3;;public void setCorrelatedByFieldValue(String value) {     correlatedByFieldValue = value.intern(). }
false;public;0;3;;public String getPartitionFieldName() {     return partitionFieldName. }
false;public;1;3;;public void setPartitionFieldName(String field) {     partitionFieldName = field.intern(). }
false;public;0;3;;public String getPartitionFieldValue() {     return partitionFieldValue. }
false;public;1;3;;public void setPartitionFieldValue(String value) {     partitionFieldValue = value.intern(). }
false;public;0;3;;public String getFunction() {     return function. }
false;public;1;3;;public void setFunction(String name) {     function = name.intern(). }
false;public;0;3;;public String getFunctionDescription() {     return functionDescription. }
false;public;1;3;;public void setFunctionDescription(String functionDescription) {     this.functionDescription = functionDescription.intern(). }
false;public;0;3;;public List<Double> getTypical() {     return typical. }
false;public;1;3;;public void setTypical(List<Double> typical) {     this.typical = typical. }
false;public;0;3;;public List<Double> getActual() {     return actual. }
false;public;1;3;;public void setActual(List<Double> actual) {     this.actual = actual. }
false;public;0;3;;public String getFieldName() {     return fieldName. }
false;public;1;3;;public void setFieldName(String field) {     fieldName = field.intern(). }
false;public;0;3;;public String getOverFieldName() {     return overFieldName. }
false;public;1;3;;public void setOverFieldName(String name) {     overFieldName = name.intern(). }
false;public;0;3;;public String getOverFieldValue() {     return overFieldValue. }
false;public;1;3;;public void setOverFieldValue(String value) {     overFieldValue = value.intern(). }
false;public;0;3;;public List<Influence> getInfluencers() {     return influencers. }
false;public;1;3;;public void setInfluencers(List<Influence> influencers) {     this.influencers = influencers. }
false;public;0;17;;@Override public int hashCode() {     return Objects.hash(probability, actual, typical, byFieldName, byFieldValue, correlatedByFieldValue, fieldName, function, functionDescription, overFieldName, overFieldValue, partitionFieldName, partitionFieldValue, influencers). }
false;public;1;27;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof AnomalyCause == false) {         return false.     }     AnomalyCause that = (AnomalyCause) other.     return this.probability == that.probability && Objects.deepEquals(this.typical, that.typical) && Objects.deepEquals(this.actual, that.actual) && Objects.equals(this.function, that.function) && Objects.equals(this.functionDescription, that.functionDescription) && Objects.equals(this.fieldName, that.fieldName) && Objects.equals(this.byFieldName, that.byFieldName) && Objects.equals(this.byFieldValue, that.byFieldValue) && Objects.equals(this.correlatedByFieldValue, that.correlatedByFieldValue) && Objects.equals(this.partitionFieldName, that.partitionFieldName) && Objects.equals(this.partitionFieldValue, that.partitionFieldValue) && Objects.equals(this.overFieldName, that.overFieldName) && Objects.equals(this.overFieldValue, that.overFieldValue) && Objects.equals(this.influencers, that.influencers). }
