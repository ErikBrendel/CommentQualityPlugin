# id;timestamp;commentText;codeText;commentWords;codeWords
SSLConfigurationSettings -> public static SSLConfigurationSettings withoutPrefix();1524684173;Construct settings that are un-prefixed. That is, they can be used to read from a {@link Settings} object where the configuration_keys are the root names of the <code>Settings</code>.;public static SSLConfigurationSettings withoutPrefix() {_        return new SSLConfigurationSettings("")__    };construct,settings,that,are,un,prefixed,that,is,they,can,be,used,to,read,from,a,link,settings,object,where,the,configuration,keys,are,the,root,names,of,the,code,settings,code;public,static,sslconfiguration,settings,without,prefix,return,new,sslconfiguration,settings
SSLConfigurationSettings -> public static SSLConfigurationSettings withoutPrefix();1531729807;Construct settings that are un-prefixed. That is, they can be used to read from a {@link Settings} object where the configuration_keys are the root names of the <code>Settings</code>.;public static SSLConfigurationSettings withoutPrefix() {_        return new SSLConfigurationSettings("")__    };construct,settings,that,are,un,prefixed,that,is,they,can,be,used,to,read,from,a,link,settings,object,where,the,configuration,keys,are,the,root,names,of,the,code,settings,code;public,static,sslconfiguration,settings,without,prefix,return,new,sslconfiguration,settings
SSLConfigurationSettings -> public static SSLConfigurationSettings withoutPrefix();1541476610;Construct settings that are un-prefixed. That is, they can be used to read from a {@link Settings} object where the configuration_keys are the root names of the <code>Settings</code>.;public static SSLConfigurationSettings withoutPrefix() {_        return new SSLConfigurationSettings("")__    };construct,settings,that,are,un,prefixed,that,is,they,can,be,used,to,read,from,a,link,settings,object,where,the,configuration,keys,are,the,root,names,of,the,code,settings,code;public,static,sslconfiguration,settings,without,prefix,return,new,sslconfiguration,settings
SSLConfigurationSettings -> private SSLConfigurationSettings(String prefix);1524684173;@see #withoutPrefix_@see #withPrefix_@param prefix The prefix under which each setting should be defined. Must be either the empty string (<code>""</code>) or a string_ending in <code>"."</code>;private SSLConfigurationSettings(String prefix) {_        assert prefix != null : "Prefix cannot be null (but can be blank)"___        x509KeyPair = new X509KeyPairSettings(prefix, true)__        ciphers =  CIPHERS_SETTING_TEMPLATE.apply(prefix + "cipher_suites")__        supportedProtocols = SUPPORTED_PROTOCOLS_TEMPLATE.apply(prefix + "supported_protocols")__        truststorePath = TRUST_STORE_PATH_TEMPLATE.apply(prefix + "truststore.path")__        legacyTruststorePassword = LEGACY_TRUSTSTORE_PASSWORD_TEMPLATE.apply(prefix + "truststore.password")__        truststorePassword = TRUSTSTORE_PASSWORD_TEMPLATE.apply(prefix + "truststore.secure_password")__        truststoreAlgorithm = TRUST_STORE_ALGORITHM_TEMPLATE.apply(prefix + "truststore.algorithm")__        truststoreType = TRUST_STORE_TYPE_TEMPLATE.apply(prefix + "truststore.type")__        trustRestrictionsPath = TRUST_RESTRICTIONS_TEMPLATE.apply(prefix + "trust_restrictions.path")__        caPaths = CAPATH_SETTING_TEMPLATE.apply(prefix + "certificate_authorities")__        clientAuth = CLIENT_AUTH_SETTING_TEMPLATE.apply(prefix + "client_authentication")__        verificationMode = VERIFICATION_MODE_SETTING_TEMPLATE.apply(prefix + "verification_mode")___        final List<Setting<? extends Object>> settings = CollectionUtils.arrayAsArrayList(ciphers, supportedProtocols,_                truststorePath, truststorePassword, truststoreAlgorithm, truststoreType, trustRestrictionsPath,_                caPaths, clientAuth, verificationMode, legacyTruststorePassword)__        settings.addAll(x509KeyPair.getAllSettings())__        this.allSettings = Collections.unmodifiableList(settings)__    };see,without,prefix,see,with,prefix,param,prefix,the,prefix,under,which,each,setting,should,be,defined,must,be,either,the,empty,string,code,code,or,a,string,ending,in,code,code;private,sslconfiguration,settings,string,prefix,assert,prefix,null,prefix,cannot,be,null,but,can,be,blank,x509key,pair,new,x509key,pair,settings,prefix,true,ciphers,apply,prefix,supported,protocols,apply,prefix,truststore,path,apply,prefix,truststore,path,legacy,truststore,password,apply,prefix,truststore,password,truststore,password,apply,prefix,truststore,truststore,algorithm,apply,prefix,truststore,algorithm,truststore,type,apply,prefix,truststore,type,trust,restrictions,path,apply,prefix,path,ca,paths,apply,prefix,client,auth,apply,prefix,verification,mode,apply,prefix,final,list,setting,extends,object,settings,collection,utils,array,as,array,list,ciphers,supported,protocols,truststore,path,truststore,password,truststore,algorithm,truststore,type,trust,restrictions,path,ca,paths,client,auth,verification,mode,legacy,truststore,password,settings,add,all,x509key,pair,get,all,settings,this,all,settings,collections,unmodifiable,list,settings
SSLConfigurationSettings -> private SSLConfigurationSettings(String prefix);1531729807;@see #withoutPrefix_@see #withPrefix_@param prefix The prefix under which each setting should be defined. Must be either the empty string (<code>""</code>) or a string_ending in <code>"."</code>;private SSLConfigurationSettings(String prefix) {_        assert prefix != null : "Prefix cannot be null (but can be blank)"___        x509KeyPair = new X509KeyPairSettings(prefix, true)__        ciphers =  CIPHERS_SETTING_TEMPLATE.apply(prefix + "cipher_suites")__        supportedProtocols = SUPPORTED_PROTOCOLS_TEMPLATE.apply(prefix + "supported_protocols")__        truststorePath = TRUST_STORE_PATH_TEMPLATE.apply(prefix + "truststore.path")__        legacyTruststorePassword = LEGACY_TRUSTSTORE_PASSWORD_TEMPLATE.apply(prefix + "truststore.password")__        truststorePassword = TRUSTSTORE_PASSWORD_TEMPLATE.apply(prefix + "truststore.secure_password")__        truststoreAlgorithm = TRUST_STORE_ALGORITHM_TEMPLATE.apply(prefix + "truststore.algorithm")__        truststoreType = TRUST_STORE_TYPE_TEMPLATE.apply(prefix + "truststore.type")__        trustRestrictionsPath = TRUST_RESTRICTIONS_TEMPLATE.apply(prefix + "trust_restrictions.path")__        caPaths = CAPATH_SETTING_TEMPLATE.apply(prefix + "certificate_authorities")__        clientAuth = CLIENT_AUTH_SETTING_TEMPLATE.apply(prefix + "client_authentication")__        verificationMode = VERIFICATION_MODE_SETTING_TEMPLATE.apply(prefix + "verification_mode")___        final List<Setting<? extends Object>> settings = CollectionUtils.arrayAsArrayList(ciphers, supportedProtocols,_                truststorePath, truststorePassword, truststoreAlgorithm, truststoreType, trustRestrictionsPath,_                caPaths, clientAuth, verificationMode, legacyTruststorePassword)__        settings.addAll(x509KeyPair.getAllSettings())__        this.allSettings = Collections.unmodifiableList(settings)__    };see,without,prefix,see,with,prefix,param,prefix,the,prefix,under,which,each,setting,should,be,defined,must,be,either,the,empty,string,code,code,or,a,string,ending,in,code,code;private,sslconfiguration,settings,string,prefix,assert,prefix,null,prefix,cannot,be,null,but,can,be,blank,x509key,pair,new,x509key,pair,settings,prefix,true,ciphers,apply,prefix,supported,protocols,apply,prefix,truststore,path,apply,prefix,truststore,path,legacy,truststore,password,apply,prefix,truststore,password,truststore,password,apply,prefix,truststore,truststore,algorithm,apply,prefix,truststore,algorithm,truststore,type,apply,prefix,truststore,type,trust,restrictions,path,apply,prefix,path,ca,paths,apply,prefix,client,auth,apply,prefix,verification,mode,apply,prefix,final,list,setting,extends,object,settings,collection,utils,array,as,array,list,ciphers,supported,protocols,truststore,path,truststore,password,truststore,algorithm,truststore,type,trust,restrictions,path,ca,paths,client,auth,verification,mode,legacy,truststore,password,settings,add,all,x509key,pair,get,all,settings,this,all,settings,collections,unmodifiable,list,settings
SSLConfigurationSettings -> private SSLConfigurationSettings(String prefix);1541476610;@param prefix The prefix under which each setting should be defined. Must be either the empty string (<code>""</code>) or a string_ending in <code>"."</code>_@see #withoutPrefix_@see #withPrefix;private SSLConfigurationSettings(String prefix) {_        assert prefix != null : "Prefix cannot be null (but can be blank)"___        x509KeyPair = X509KeyPairSettings.withPrefix(prefix, true)__        ciphers = CIPHERS_SETTING_TEMPLATE.apply(prefix + "cipher_suites")__        supportedProtocols = SUPPORTED_PROTOCOLS_TEMPLATE.apply(prefix + "supported_protocols")__        truststorePath = TRUST_STORE_PATH_TEMPLATE.apply(prefix + "truststore.path")__        legacyTruststorePassword = LEGACY_TRUSTSTORE_PASSWORD_TEMPLATE.apply(prefix + "truststore.password")__        truststorePassword = TRUSTSTORE_PASSWORD_TEMPLATE.apply(prefix + "truststore.secure_password")__        truststoreAlgorithm = TRUST_STORE_ALGORITHM_TEMPLATE.apply(prefix + "truststore.algorithm")__        truststoreType = TRUST_STORE_TYPE_TEMPLATE.apply(prefix + "truststore.type")__        trustRestrictionsPath = TRUST_RESTRICTIONS_TEMPLATE.apply(prefix + "trust_restrictions.path")__        caPaths = CAPATH_SETTING_TEMPLATE.apply(prefix + "certificate_authorities")__        clientAuth = CLIENT_AUTH_SETTING_TEMPLATE.apply(prefix + "client_authentication")__        verificationMode = VERIFICATION_MODE_SETTING_TEMPLATE.apply(prefix + "verification_mode")___        final List<Setting<? extends Object>> settings = CollectionUtils.arrayAsArrayList(ciphers, supportedProtocols,_                truststorePath, truststorePassword, truststoreAlgorithm, truststoreType, trustRestrictionsPath,_                caPaths, clientAuth, verificationMode, legacyTruststorePassword)__        settings.addAll(x509KeyPair.getAllSettings())__        this.allSettings = Collections.unmodifiableList(settings)__    };param,prefix,the,prefix,under,which,each,setting,should,be,defined,must,be,either,the,empty,string,code,code,or,a,string,ending,in,code,code,see,without,prefix,see,with,prefix;private,sslconfiguration,settings,string,prefix,assert,prefix,null,prefix,cannot,be,null,but,can,be,blank,x509key,pair,x509key,pair,settings,with,prefix,prefix,true,ciphers,apply,prefix,supported,protocols,apply,prefix,truststore,path,apply,prefix,truststore,path,legacy,truststore,password,apply,prefix,truststore,password,truststore,password,apply,prefix,truststore,truststore,algorithm,apply,prefix,truststore,algorithm,truststore,type,apply,prefix,truststore,type,trust,restrictions,path,apply,prefix,path,ca,paths,apply,prefix,client,auth,apply,prefix,verification,mode,apply,prefix,final,list,setting,extends,object,settings,collection,utils,array,as,array,list,ciphers,supported,protocols,truststore,path,truststore,password,truststore,algorithm,truststore,type,trust,restrictions,path,ca,paths,client,auth,verification,mode,legacy,truststore,password,settings,add,all,x509key,pair,get,all,settings,this,all,settings,collections,unmodifiable,list,settings
SSLConfigurationSettings -> public static SSLConfigurationSettings withPrefix(String prefix);1524684173;Construct settings that have a prefixed. That is, they can be used to read from a {@link Settings} object where the configuration_keys are prefixed-children of the <code>Settings</code>._@param prefix A string that must end in <code>"ssl."</code>;public static SSLConfigurationSettings withPrefix(String prefix) {_        assert prefix.endsWith("ssl.") : "The ssl config prefix (" + prefix + ") should end in 'ssl.'"__        return new SSLConfigurationSettings(prefix)__    };construct,settings,that,have,a,prefixed,that,is,they,can,be,used,to,read,from,a,link,settings,object,where,the,configuration,keys,are,prefixed,children,of,the,code,settings,code,param,prefix,a,string,that,must,end,in,code,ssl,code;public,static,sslconfiguration,settings,with,prefix,string,prefix,assert,prefix,ends,with,ssl,the,ssl,config,prefix,prefix,should,end,in,ssl,return,new,sslconfiguration,settings,prefix
SSLConfigurationSettings -> public static SSLConfigurationSettings withPrefix(String prefix);1531729807;Construct settings that have a prefixed. That is, they can be used to read from a {@link Settings} object where the configuration_keys are prefixed-children of the <code>Settings</code>._@param prefix A string that must end in <code>"ssl."</code>;public static SSLConfigurationSettings withPrefix(String prefix) {_        assert prefix.endsWith("ssl.") : "The ssl config prefix (" + prefix + ") should end in 'ssl.'"__        return new SSLConfigurationSettings(prefix)__    };construct,settings,that,have,a,prefixed,that,is,they,can,be,used,to,read,from,a,link,settings,object,where,the,configuration,keys,are,prefixed,children,of,the,code,settings,code,param,prefix,a,string,that,must,end,in,code,ssl,code;public,static,sslconfiguration,settings,with,prefix,string,prefix,assert,prefix,ends,with,ssl,the,ssl,config,prefix,prefix,should,end,in,ssl,return,new,sslconfiguration,settings,prefix
SSLConfigurationSettings -> public static SSLConfigurationSettings withPrefix(String prefix);1541476610;Construct settings that have a prefixed. That is, they can be used to read from a {@link Settings} object where the configuration_keys are prefixed-children of the <code>Settings</code>.__@param prefix A string that must end in <code>"ssl."</code>;public static SSLConfigurationSettings withPrefix(String prefix) {_        assert prefix.endsWith("ssl.") : "The ssl config prefix (" + prefix + ") should end in 'ssl.'"__        return new SSLConfigurationSettings(prefix)__    };construct,settings,that,have,a,prefixed,that,is,they,can,be,used,to,read,from,a,link,settings,object,where,the,configuration,keys,are,prefixed,children,of,the,code,settings,code,param,prefix,a,string,that,must,end,in,code,ssl,code;public,static,sslconfiguration,settings,with,prefix,string,prefix,assert,prefix,ends,with,ssl,the,ssl,config,prefix,prefix,should,end,in,ssl,return,new,sslconfiguration,settings,prefix
