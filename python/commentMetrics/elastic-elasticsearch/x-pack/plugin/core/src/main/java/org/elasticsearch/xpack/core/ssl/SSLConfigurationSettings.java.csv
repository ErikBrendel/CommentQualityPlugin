commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;3;;public static String getKeyStoreType(Setting<Optional<String>> setting, Settings settings, String path) {     return setting.get(settings).orElseGet(() -> inferKeyStoreType(path)). }
false;private,static;1;8;;private static String inferKeyStoreType(String path) {     String name = path == null ? "" : path.toLowerCase(Locale.ROOT).     if (name.endsWith(".p12") || name.endsWith(".pfx") || name.endsWith(".pkcs12")) {         return PKCS12_KEYSTORE_TYPE.     } else {         return DEFAULT_KEYSTORE_TYPE.     } }
false;public;0;3;;public List<Setting<?>> getAllSettings() {     return allSettings. }
true;public,static;0;3;/**  * Construct settings that are un-prefixed. That is, they can be used to read from a {@link Settings} object where the configuration  * keys are the root names of the <code>Settings</code>.  */ ;/**  * Construct settings that are un-prefixed. That is, they can be used to read from a {@link Settings} object where the configuration  * keys are the root names of the <code>Settings</code>.  */ public static SSLConfigurationSettings withoutPrefix() {     return new SSLConfigurationSettings(""). }
true;public,static;1;4;/**  * Construct settings that have a prefixed. That is, they can be used to read from a {@link Settings} object where the configuration  * keys are prefixed-children of the <code>Settings</code>.  *  * @param prefix A string that must end in <code>"ssl."</code>  */ ;/**  * Construct settings that have a prefixed. That is, they can be used to read from a {@link Settings} object where the configuration  * keys are prefixed-children of the <code>Settings</code>.  *  * @param prefix A string that must end in <code>"ssl."</code>  */ public static SSLConfigurationSettings withPrefix(String prefix) {     assert prefix.endsWith("ssl.") : "The ssl config prefix (" + prefix + ") should end in 'ssl.'".     return new SSLConfigurationSettings(prefix). }
false;public,static;0;9;;public static Collection<Setting<?>> getProfileSettings() {     return Arrays.asList(CIPHERS_SETTING_PROFILES, SUPPORTED_PROTOCOLS_PROFILES, KEYSTORE_PATH_PROFILES, LEGACY_KEYSTORE_PASSWORD_PROFILES, KEYSTORE_PASSWORD_PROFILES, LEGACY_KEYSTORE_KEY_PASSWORD_PROFILES, KEYSTORE_KEY_PASSWORD_PROFILES, TRUST_STORE_PATH_PROFILES, LEGACY_TRUSTSTORE_PASSWORD_PROFILES, TRUSTSTORE_PASSWORD_PROFILES, KEY_STORE_ALGORITHM_PROFILES, TRUST_STORE_ALGORITHM_PROFILES, KEY_STORE_TYPE_PROFILES, TRUST_STORE_TYPE_PROFILES, TRUST_RESTRICTIONS_PROFILES, KEY_PATH_PROFILES, LEGACY_KEY_PASSWORD_PROFILES, KEY_PASSWORD_PROFILES, CERT_PROFILES, CAPATH_SETTING_PROFILES, CLIENT_AUTH_SETTING_PROFILES, VERIFICATION_MODE_SETTING_PROFILES). }
false;public,static;1;10;;public static Collection<Setting.AffixSetting<?>> getRealmSettings(String realmType) {     return Stream.of(CIPHERS_SETTING_REALM, SUPPORTED_PROTOCOLS_REALM, KEYSTORE_PATH_REALM, LEGACY_KEYSTORE_PASSWORD_REALM, KEYSTORE_PASSWORD_REALM, LEGACY_KEYSTORE_KEY_PASSWORD_REALM, KEYSTORE_KEY_PASSWORD_REALM, TRUST_STORE_PATH_REALM, LEGACY_TRUST_STORE_PASSWORD_REALM, TRUST_STORE_PASSWORD_REALM, KEY_STORE_ALGORITHM_REALM, TRUST_STORE_ALGORITHM_REALM, KEY_STORE_TYPE_REALM, TRUST_STORE_TYPE_REALM, TRUST_RESTRICTIONS_REALM, KEY_PATH_REALM, LEGACY_KEY_PASSWORD_REALM, KEY_PASSWORD_REALM, CERT_REALM, CAPATH_SETTING_REALM, CLIENT_AUTH_SETTING_REALM, VERIFICATION_MODE_SETTING_REALM).map(f -> f.apply(realmType)).collect(Collectors.toList()). }
false;public;1;6;;public List<Setting<SecureString>> getSecureSettingsInUse(Settings settings) {     return Stream.of(this.truststorePassword, this.x509KeyPair.keystorePassword, this.x509KeyPair.keystoreKeyPassword, this.x509KeyPair.keyPassword).filter(s -> s.exists(settings)).collect(Collectors.toList()). }
