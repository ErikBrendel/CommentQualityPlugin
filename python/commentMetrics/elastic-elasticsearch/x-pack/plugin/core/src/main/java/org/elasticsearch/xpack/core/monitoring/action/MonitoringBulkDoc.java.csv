commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;26;/**  * Read from a stream.  */ ;/**  * Read from a stream.  */ public static MonitoringBulkDoc readFrom(StreamInput in) throws IOException {     final MonitoredSystem system = MonitoredSystem.fromSystem(in.readOptionalString()).     if (in.getVersion().before(Version.V_6_0_0_rc1)) {         // Monitoring version, removed in 6.0 rc1         in.readOptionalString().         // Cluster UUID, removed in 6.0 rc1         in.readOptionalString().     }     final long timestamp = in.readVLong().     if (in.getVersion().before(Version.V_6_0_0_rc1)) {         // Source node, removed in 6.0 rc1         in.readOptionalWriteable(MonitoringDoc.Node::new).         // Monitoring index, removed in 6.0 rc1         MonitoringIndex.readFrom(in).     }     final String type = in.readOptionalString().     final String id = in.readOptionalString().     final BytesReference source = in.readBytesReference().     final XContentType xContentType = (source != BytesArray.EMPTY) ? in.readEnum(XContentType.class) : XContentType.JSON.     long interval = 0L.     if (in.getVersion().onOrAfter(Version.V_6_0_0_rc1)) {         interval = in.readVLong().     }     return new MonitoringBulkDoc(system, type, id, timestamp, interval, source, xContentType). }
false;public;1;22;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(system.getSystem()).     if (out.getVersion().before(Version.V_6_0_0_rc1)) {         out.writeOptionalString(MonitoringTemplateUtils.TEMPLATE_VERSION).         out.writeOptionalString(null).     }     out.writeVLong(timestamp).     if (out.getVersion().before(Version.V_6_0_0_rc1)) {         out.writeOptionalWriteable(null).         MonitoringIndex.IGNORED_DATA.writeTo(out).     }     out.writeOptionalString(type).     out.writeOptionalString(id).     out.writeBytesReference(source).     if (source != BytesArray.EMPTY) {         out.writeEnum(xContentType).     }     if (out.getVersion().onOrAfter(Version.V_6_0_0_rc1)) {         out.writeVLong(intervalMillis).     } }
false;public;0;3;;public MonitoredSystem getSystem() {     return system. }
false;public;0;3;;public String getType() {     return type. }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public long getTimestamp() {     return timestamp. }
false;public;0;3;;public long getIntervalMillis() {     return intervalMillis. }
false;public;0;3;;public BytesReference getSource() {     return source. }
false;public;0;3;;public XContentType getXContentType() {     return xContentType. }
false;public;1;17;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     MonitoringBulkDoc that = (MonitoringBulkDoc) o.     return timestamp == that.timestamp && intervalMillis == that.intervalMillis && system == that.system && Objects.equals(type, that.type) && Objects.equals(id, that.id) && Objects.equals(source, that.source) && xContentType == that.xContentType. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(system, type, id, timestamp, intervalMillis, source, xContentType). }
