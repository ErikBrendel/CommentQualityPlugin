commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public Writeable.Reader<Response> getResponseReader() {     return Response::new. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     dataCounts.writeTo(out). }
false;public;0;3;;public DataCounts getDataCounts() {     return dataCounts. }
false;public;0;4;;@Override public RestStatus status() {     return RestStatus.ACCEPTED. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     dataCounts.doXContentBody(builder, params).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hashCode(dataCounts). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(dataCounts, other.dataCounts). }
false;public;1;13;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalString(resetStart).     out.writeOptionalString(resetEnd).     out.writeOptionalWriteable(dataDescription).     out.writeBytesReference(content).     boolean hasXContentType = xContentType != null.     out.writeBoolean(hasXContentType).     if (hasXContentType) {         out.writeEnum(xContentType).     } }
false;public;0;3;;public String getResetStart() {     return resetStart. }
false;public;1;3;;public void setResetStart(String resetStart) {     this.resetStart = resetStart. }
false;public;0;3;;public String getResetEnd() {     return resetEnd. }
false;public;1;3;;public void setResetEnd(String resetEnd) {     this.resetEnd = resetEnd. }
false;public;0;3;;public DataDescription getDataDescription() {     return dataDescription. }
false;public;1;3;;public void setDataDescription(DataDescription dataDescription) {     this.dataDescription = dataDescription. }
false;public;0;1;;public BytesReference getContent() {     return content. }
false;public;0;3;;public XContentType getXContentType() {     return xContentType. }
false;public;2;4;;public void setContent(BytesReference content, XContentType xContentType) {     this.content = content.     this.xContentType = xContentType. }
false;public;0;5;;@Override public int hashCode() {     // content stream not included     return Objects.hash(jobId, resetStart, resetEnd, dataDescription, xContentType). }
false;public;1;17;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     // content stream not included     return Objects.equals(jobId, other.jobId) && Objects.equals(resetStart, other.resetStart) && Objects.equals(resetEnd, other.resetEnd) && Objects.equals(dataDescription, other.dataDescription) && Objects.equals(xContentType, other.xContentType). }
