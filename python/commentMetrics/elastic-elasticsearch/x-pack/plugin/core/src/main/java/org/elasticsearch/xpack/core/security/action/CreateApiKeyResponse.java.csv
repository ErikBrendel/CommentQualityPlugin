commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public SecureString getKey() {     return key. }
false;public;0;4;;@Nullable public Instant getExpiration() {     return expiration. }
false;public;0;8;;@Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + ((expiration == null) ? 0 : expiration.hashCode()).     result = prime * result + Objects.hash(id, name, key).     return result. }
false;public;1;18;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     final CreateApiKeyResponse other = (CreateApiKeyResponse) obj.     if (expiration == null) {         if (other.expiration != null)             return false.     } else if (!Objects.equals(expiration, other.expiration))         return false.     return Objects.equals(id, other.id) && Objects.equals(key, other.key) && Objects.equals(name, other.name). }
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(name).     out.writeString(id).     byte[] bytes = null.     try {         bytes = CharArrays.toUtf8Bytes(key.getChars()).         out.writeByteArray(bytes).     } finally {         if (bytes != null) {             Arrays.fill(bytes, (byte) 0).         }     }     out.writeOptionalInstant(expiration). }
false;public;1;4;;@Override public void readFrom(StreamInput in) {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public,static;1;3;;public static CreateApiKeyResponse fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().field("id", id).field("name", name).     if (expiration != null) {         builder.field("expiration", expiration.toEpochMilli()).     }     byte[] charBytes = CharArrays.toUtf8Bytes(key.getChars()).     try {         builder.field("api_key").utf8Value(charBytes, 0, charBytes.length).     } finally {         Arrays.fill(charBytes, (byte) 0).     }     return builder.endObject(). }
false;public;0;4;;@Override public String toString() {     return "CreateApiKeyResponse [name=" + name + ", id=" + id + ", expiration=" + expiration + "]". }
