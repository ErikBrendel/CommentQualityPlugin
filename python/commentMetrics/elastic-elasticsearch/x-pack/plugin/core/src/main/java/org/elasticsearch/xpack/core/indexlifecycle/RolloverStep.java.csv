commented;modifiers;parameterAmount;loc;comment;code
false;public;4;34;;@Override public void performAction(IndexMetaData indexMetaData, ClusterState currentClusterState, ClusterStateObserver observer, Listener listener) {     boolean indexingComplete = LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE_SETTING.get(indexMetaData.getSettings()).     if (indexingComplete) {         logger.trace(indexMetaData.getIndex() + " has lifecycle complete set, skipping " + RolloverStep.NAME).         listener.onResponse(true).         return.     }     String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(indexMetaData.getSettings()).     if (Strings.isNullOrEmpty(rolloverAlias)) {         listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT, "setting [%s] for index [%s] is empty or not defined", RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, indexMetaData.getIndex().getName()))).         return.     }     if (indexMetaData.getAliases().containsKey(rolloverAlias) == false) {         listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT, "%s [%s] does not point to index [%s]", RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, rolloverAlias, indexMetaData.getIndex().getName()))).         return.     }     // Calling rollover with no conditions will always roll over the index     RolloverRequest rolloverRequest = new RolloverRequest(rolloverAlias, null).     getClient().admin().indices().rolloverIndex(rolloverRequest, ActionListener.wrap(response -> {         assert response.isRolledOver() : "the only way this rollover call should fail is with an exception".         listener.onResponse(response.isRolledOver()).     }, listener::onFailure)). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode()). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     RolloverStep other = (RolloverStep) obj.     return super.equals(obj). }
