commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;static;3;10;;static long parseDateOrThrow(String date, ParseField paramName, LongSupplier now) {     DateMathParser dateMathParser = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.toDateMathParser().     try {         return dateMathParser.parse(date, now).toEpochMilli().     } catch (Exception e) {         String msg = Messages.getMessage(Messages.REST_INVALID_DATETIME_PARAMS, paramName.getPreferredName(), date).         throw new ElasticsearchParseException(msg, e).     } }
false;public,static;2;7;;public static Request parseRequest(String jobId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (jobId != null) {         request.jobId = jobId.     }     return request. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public int getTopN() {     return topN. }
false;public;1;6;;public void setTopN(int topN) {     if (topN <= 0) {         throw new IllegalArgumentException("[topN] parameter must be positive, found [" + topN + "]").     }     this.topN = topN. }
false;public;0;3;;public TimeValue getBucketSpan() {     return bucketSpan. }
false;public;1;3;;public void setBucketSpan(TimeValue bucketSpan) {     this.bucketSpan = bucketSpan. }
false;public;1;3;;public void setBucketSpan(String bucketSpan) {     this.bucketSpan = TimeValue.parseTimeValue(bucketSpan, BUCKET_SPAN.getPreferredName()). }
false;public;0;3;;public double getOverallScore() {     return overallScore. }
false;public;1;3;;public void setOverallScore(double overallScore) {     this.overallScore = overallScore. }
false;public;0;3;;public boolean isExcludeInterim() {     return excludeInterim. }
false;public;1;3;;public void setExcludeInterim(boolean excludeInterim) {     this.excludeInterim = excludeInterim. }
false;public;0;3;;public Long getStart() {     return start. }
false;public;1;3;;public void setStart(Long start) {     this.start = start. }
false;public;1;3;;public void setStart(String start) {     setStart(parseDateOrThrow(start, START, System::currentTimeMillis)). }
false;public;0;3;;public Long getEnd() {     return end. }
false;public;1;3;;public void setEnd(Long end) {     this.end = end. }
false;public;1;3;;public void setEnd(String end) {     setEnd(parseDateOrThrow(end, END, System::currentTimeMillis)). }
false;public;0;3;;public boolean allowNoJobs() {     return allowNoJobs. }
false;public;1;3;;public void setAllowNoJobs(boolean allowNoJobs) {     this.allowNoJobs = allowNoJobs. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;12;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     jobId = in.readString().     topN = in.readVInt().     bucketSpan = in.readOptionalTimeValue().     overallScore = in.readDouble().     excludeInterim = in.readBoolean().     start = in.readOptionalLong().     end = in.readOptionalLong().     allowNoJobs = in.readBoolean(). }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(jobId).     out.writeVInt(topN).     out.writeOptionalTimeValue(bucketSpan).     out.writeDouble(overallScore).     out.writeBoolean(excludeInterim).     out.writeOptionalLong(start).     out.writeOptionalLong(end).     out.writeBoolean(allowNoJobs). }
false;public;2;20;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(TOP_N.getPreferredName(), topN).     if (bucketSpan != null) {         builder.field(BUCKET_SPAN.getPreferredName(), bucketSpan.getStringRep()).     }     builder.field(OVERALL_SCORE.getPreferredName(), overallScore).     builder.field(EXCLUDE_INTERIM.getPreferredName(), excludeInterim).     if (start != null) {         builder.field(START.getPreferredName(), String.valueOf(start)).     }     if (end != null) {         builder.field(END.getPreferredName(), String.valueOf(end)).     }     builder.field(ALLOW_NO_JOBS.getPreferredName(), allowNoJobs).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, topN, bucketSpan, overallScore, excludeInterim, start, end, allowNoJobs). }
false;public;1;18;;@Override public boolean equals(Object other) {     if (other == null) {         return false.     }     if (getClass() != other.getClass()) {         return false.     }     Request that = (Request) other.     return Objects.equals(jobId, that.jobId) && this.topN == that.topN && Objects.equals(bucketSpan, that.bucketSpan) && this.excludeInterim == that.excludeInterim && this.overallScore == that.overallScore && Objects.equals(start, that.start) && Objects.equals(end, that.end) && this.allowNoJobs == that.allowNoJobs. }
false;public;0;3;;public QueryPage<OverallBucket> getOverallBuckets() {     return overallBuckets. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     overallBuckets = new QueryPage<>(in, OverallBucket::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     overallBuckets.writeTo(out). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     overallBuckets.doXContentBody(builder, params).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(overallBuckets). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(overallBuckets, other.overallBuckets). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
