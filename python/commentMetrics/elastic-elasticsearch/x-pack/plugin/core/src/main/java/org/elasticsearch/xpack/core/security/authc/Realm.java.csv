commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return The type of this realm  */ ;/**  * @return The type of this realm  */ public String type() {     return config.type(). }
true;public;0;3;/**  * @return The name of this realm.  */ ;/**  * @return The name of this realm.  */ public String name() {     return config.name(). }
true;public;0;3;/**  * @return The order of this realm within the executing realm chain.  */ ;/**  * @return The order of this realm within the executing realm chain.  */ public int order() {     return config.order. }
true;public;0;4;/**  * Each realm can define response headers to be sent on failure.  * <p>  * By default it adds 'WWW-Authenticate' header with auth scheme 'Basic'.  *  * @return Map of authentication failure response headers.  */ ;/**  * Each realm can define response headers to be sent on failure.  * <p>  * By default it adds 'WWW-Authenticate' header with auth scheme 'Basic'.  *  * @return Map of authentication failure response headers.  */ public Map<String, List<String>> getAuthenticationFailureHeaders() {     return Collections.singletonMap("WWW-Authenticate", Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\"")). }
false;public;1;9;;@Override public int compareTo(Realm other) {     int result = Integer.compare(config.order, other.config.order).     if (result == 0) {         // If same order, compare based on the realm name         result = config.name().compareTo(other.config.name()).     }     return result. }
true;public,abstract;1;1;/**  * @return {@code true} if this realm supports the given authentication token, {@code false} otherwise.  */ ;/**  * @return {@code true} if this realm supports the given authentication token, {@code false} otherwise.  */ public abstract boolean supports(AuthenticationToken token).
true;public,abstract;1;1;/**  * Attempts to extract an authentication token from the given context. If an appropriate token  * is found it's returned, otherwise {@code null} is returned.  *  * @param context The context that will provide information about the incoming request  * @return The authentication token or {@code null} if not found  */ ;/**  * Attempts to extract an authentication token from the given context. If an appropriate token  * is found it's returned, otherwise {@code null} is returned.  *  * @param context The context that will provide information about the incoming request  * @return The authentication token or {@code null} if not found  */ public abstract AuthenticationToken token(ThreadContext context).
true;public,abstract;2;1;/**  * Authenticates the given token in an asynchronous fashion.  * <p>  * A successful authentication will call {@link ActionListener#onResponse} with a  * {@link AuthenticationResult#success successful} result, which includes the user associated with the given token.  * <br>  * If the realm does not support, or cannot handle the token, it will call {@link ActionListener#onResponse} with a  * {@link AuthenticationResult#notHandled not-handled} result.  * This can include cases where the token identifies as user that is not known by this realm.  * <br>  * If the realm can handle the token, but authentication failed it will typically call {@link ActionListener#onResponse} with a  * {@link AuthenticationResult#unsuccessful failure} result, which includes a diagnostic message regarding the failure.  * This can include cases where the token identifies a valid user, but has an invalid password.  * <br>  * If the realm wishes to assert that it has the exclusive right to handle the provided token, but authentication was not successful  * it typically call {@link ActionListener#onResponse} with a  * {@link AuthenticationResult#terminate termination} result, which includes a diagnostic message regarding the failure.  * This can include cases where the token identifies a valid user, but has an invalid password and no other realm is allowed to  * authenticate that user.  * </p>  * <p>  * The remote address should be {@code null} if the request initiated from the local node.  * </p>  *  * @param token           The authentication token  * @param listener        The listener to pass the authentication result to  */ ;/**  * Authenticates the given token in an asynchronous fashion.  * <p>  * A successful authentication will call {@link ActionListener#onResponse} with a  * {@link AuthenticationResult#success successful} result, which includes the user associated with the given token.  * <br>  * If the realm does not support, or cannot handle the token, it will call {@link ActionListener#onResponse} with a  * {@link AuthenticationResult#notHandled not-handled} result.  * This can include cases where the token identifies as user that is not known by this realm.  * <br>  * If the realm can handle the token, but authentication failed it will typically call {@link ActionListener#onResponse} with a  * {@link AuthenticationResult#unsuccessful failure} result, which includes a diagnostic message regarding the failure.  * This can include cases where the token identifies a valid user, but has an invalid password.  * <br>  * If the realm wishes to assert that it has the exclusive right to handle the provided token, but authentication was not successful  * it typically call {@link ActionListener#onResponse} with a  * {@link AuthenticationResult#terminate termination} result, which includes a diagnostic message regarding the failure.  * This can include cases where the token identifies a valid user, but has an invalid password and no other realm is allowed to  * authenticate that user.  * </p>  * <p>  * The remote address should be {@code null} if the request initiated from the local node.  * </p>  *  * @param token           The authentication token  * @param listener        The listener to pass the authentication result to  */ public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener).
true;public,abstract;2;1;/**  * Looks up the user identified the String identifier. A successful lookup will call the {@link ActionListener#onResponse}  * with the {@link User} identified by the username. An unsuccessful lookup call with {@code null} as the argument. If lookup is not  * supported, simply return {@code null} when called.  *  * @param username the String identifier for the user  * @param listener The listener to pass the lookup result to  */ ;/**  * Looks up the user identified the String identifier. A successful lookup will call the {@link ActionListener#onResponse}  * with the {@link User} identified by the username. An unsuccessful lookup call with {@code null} as the argument. If lookup is not  * supported, simply return {@code null} when called.  *  * @param username the String identifier for the user  * @param listener The listener to pass the lookup result to  */ public abstract void lookupUser(String username, ActionListener<User> listener).
false;public;1;6;;public void usageStats(ActionListener<Map<String, Object>> listener) {     Map<String, Object> stats = new HashMap<>().     stats.put("name", name()).     stats.put("order", order()).     listener.onResponse(stats). }
false;public;0;4;;@Override public String toString() {     return config.type() + "/" + config.name(). }
true;public;2;2;/**  * This is no-op in the base class, but allows realms to be aware of what other realms are configured  *  * @see DelegatedAuthorizationSettings  */ ;/**  * This is no-op in the base class, but allows realms to be aware of what other realms are configured  *  * @see DelegatedAuthorizationSettings  */ public void initialize(Iterable<Realm> realms, XPackLicenseState licenseState) { }
true;;1;1;/**  * Constructs a realm which will be used for authentication.  *  * @param config The configuration for the realm  * @throws Exception an exception may be thrown if there was an error during realm creation  */ ;/**  * Constructs a realm which will be used for authentication.  *  * @param config The configuration for the realm  * @throws Exception an exception may be thrown if there was an error during realm creation  */ Realm create(RealmConfig config) throws Exception.
