# id;timestamp;commentText;codeText;commentWords;codeWords
Realm -> public String type();1524684173;@return The type of this realm;public String type() {_        return type__    };return,the,type,of,this,realm;public,string,type,return,type
Realm -> public String type();1528304883;@return The type of this realm;public String type() {_        return type__    };return,the,type,of,this,realm;public,string,type,return,type
Realm -> public String type();1532456624;@return The type of this realm;public String type() {_        return type__    };return,the,type,of,this,realm;public,string,type,return,type
Realm -> public String type();1533295538;@return The type of this realm;public String type() {_        return type__    };return,the,type,of,this,realm;public,string,type,return,type
Realm -> public String type();1535552903;@return The type of this realm;public String type() {_        return type__    };return,the,type,of,this,realm;public,string,type,return,type
Realm -> public String type();1535723122;@return The type of this realm;public String type() {_        return type__    };return,the,type,of,this,realm;public,string,type,return,type
Realm -> public String type();1538170812;@return The type of this realm;public String type() {_        return type__    };return,the,type,of,this,realm;public,string,type,return,type
Realm -> public String type();1541476610;@return The type of this realm;public String type() {_        return config.type()__    };return,the,type,of,this,realm;public,string,type,return,config,type
Realm -> public String name();1524684173;@return The name of this realm.;public String name() {_        return config.name__    };return,the,name,of,this,realm;public,string,name,return,config,name
Realm -> public String name();1528304883;@return The name of this realm.;public String name() {_        return config.name__    };return,the,name,of,this,realm;public,string,name,return,config,name
Realm -> public String name();1532456624;@return The name of this realm.;public String name() {_        return config.name__    };return,the,name,of,this,realm;public,string,name,return,config,name
Realm -> public String name();1533295538;@return The name of this realm.;public String name() {_        return config.name__    };return,the,name,of,this,realm;public,string,name,return,config,name
Realm -> public String name();1535552903;@return The name of this realm.;public String name() {_        return config.name__    };return,the,name,of,this,realm;public,string,name,return,config,name
Realm -> public String name();1535723122;@return The name of this realm.;public String name() {_        return config.name__    };return,the,name,of,this,realm;public,string,name,return,config,name
Realm -> public String name();1538170812;@return The name of this realm.;public String name() {_        return config.name__    };return,the,name,of,this,realm;public,string,name,return,config,name
Realm -> public String name();1541476610;@return The name of this realm.;public String name() {_        return config.name()__    };return,the,name,of,this,realm;public,string,name,return,config,name
Realm -> public int order();1524684173;@return The order of this realm within the executing realm chain.;public int order() {_        return config.order__    };return,the,order,of,this,realm,within,the,executing,realm,chain;public,int,order,return,config,order
Realm -> public int order();1528304883;@return The order of this realm within the executing realm chain.;public int order() {_        return config.order__    };return,the,order,of,this,realm,within,the,executing,realm,chain;public,int,order,return,config,order
Realm -> public int order();1532456624;@return The order of this realm within the executing realm chain.;public int order() {_        return config.order__    };return,the,order,of,this,realm,within,the,executing,realm,chain;public,int,order,return,config,order
Realm -> public int order();1533295538;@return The order of this realm within the executing realm chain.;public int order() {_        return config.order__    };return,the,order,of,this,realm,within,the,executing,realm,chain;public,int,order,return,config,order
Realm -> public int order();1535552903;@return The order of this realm within the executing realm chain.;public int order() {_        return config.order__    };return,the,order,of,this,realm,within,the,executing,realm,chain;public,int,order,return,config,order
Realm -> public int order();1535723122;@return The order of this realm within the executing realm chain.;public int order() {_        return config.order__    };return,the,order,of,this,realm,within,the,executing,realm,chain;public,int,order,return,config,order
Realm -> public int order();1538170812;@return The order of this realm within the executing realm chain.;public int order() {_        return config.order__    };return,the,order,of,this,realm,within,the,executing,realm,chain;public,int,order,return,config,order
Realm -> public int order();1541476610;@return The order of this realm within the executing realm chain.;public int order() {_        return config.order__    };return,the,order,of,this,realm,within,the,executing,realm,chain;public,int,order,return,config,order
Realm -> public abstract AuthenticationToken token(ThreadContext context)_;1524684173;Attempts to extract an authentication token from the given context. If an appropriate token_is found it's returned, otherwise {@code null} is returned.__@param context The context that will provide information about the incoming request_@return The authentication token or {@code null} if not found;public abstract AuthenticationToken token(ThreadContext context)_;attempts,to,extract,an,authentication,token,from,the,given,context,if,an,appropriate,token,is,found,it,s,returned,otherwise,code,null,is,returned,param,context,the,context,that,will,provide,information,about,the,incoming,request,return,the,authentication,token,or,code,null,if,not,found;public,abstract,authentication,token,token,thread,context,context
Realm -> public abstract AuthenticationToken token(ThreadContext context)_;1528304883;Attempts to extract an authentication token from the given context. If an appropriate token_is found it's returned, otherwise {@code null} is returned.__@param context The context that will provide information about the incoming request_@return The authentication token or {@code null} if not found;public abstract AuthenticationToken token(ThreadContext context)_;attempts,to,extract,an,authentication,token,from,the,given,context,if,an,appropriate,token,is,found,it,s,returned,otherwise,code,null,is,returned,param,context,the,context,that,will,provide,information,about,the,incoming,request,return,the,authentication,token,or,code,null,if,not,found;public,abstract,authentication,token,token,thread,context,context
Realm -> public abstract AuthenticationToken token(ThreadContext context)_;1532456624;Attempts to extract an authentication token from the given context. If an appropriate token_is found it's returned, otherwise {@code null} is returned.__@param context The context that will provide information about the incoming request_@return The authentication token or {@code null} if not found;public abstract AuthenticationToken token(ThreadContext context)_;attempts,to,extract,an,authentication,token,from,the,given,context,if,an,appropriate,token,is,found,it,s,returned,otherwise,code,null,is,returned,param,context,the,context,that,will,provide,information,about,the,incoming,request,return,the,authentication,token,or,code,null,if,not,found;public,abstract,authentication,token,token,thread,context,context
Realm -> public abstract AuthenticationToken token(ThreadContext context)_;1533295538;Attempts to extract an authentication token from the given context. If an appropriate token_is found it's returned, otherwise {@code null} is returned.__@param context The context that will provide information about the incoming request_@return The authentication token or {@code null} if not found;public abstract AuthenticationToken token(ThreadContext context)_;attempts,to,extract,an,authentication,token,from,the,given,context,if,an,appropriate,token,is,found,it,s,returned,otherwise,code,null,is,returned,param,context,the,context,that,will,provide,information,about,the,incoming,request,return,the,authentication,token,or,code,null,if,not,found;public,abstract,authentication,token,token,thread,context,context
Realm -> public abstract AuthenticationToken token(ThreadContext context)_;1535552903;Attempts to extract an authentication token from the given context. If an appropriate token_is found it's returned, otherwise {@code null} is returned.__@param context The context that will provide information about the incoming request_@return The authentication token or {@code null} if not found;public abstract AuthenticationToken token(ThreadContext context)_;attempts,to,extract,an,authentication,token,from,the,given,context,if,an,appropriate,token,is,found,it,s,returned,otherwise,code,null,is,returned,param,context,the,context,that,will,provide,information,about,the,incoming,request,return,the,authentication,token,or,code,null,if,not,found;public,abstract,authentication,token,token,thread,context,context
Realm -> public abstract AuthenticationToken token(ThreadContext context)_;1535723122;Attempts to extract an authentication token from the given context. If an appropriate token_is found it's returned, otherwise {@code null} is returned.__@param context The context that will provide information about the incoming request_@return The authentication token or {@code null} if not found;public abstract AuthenticationToken token(ThreadContext context)_;attempts,to,extract,an,authentication,token,from,the,given,context,if,an,appropriate,token,is,found,it,s,returned,otherwise,code,null,is,returned,param,context,the,context,that,will,provide,information,about,the,incoming,request,return,the,authentication,token,or,code,null,if,not,found;public,abstract,authentication,token,token,thread,context,context
Realm -> public abstract AuthenticationToken token(ThreadContext context)_;1538170812;Attempts to extract an authentication token from the given context. If an appropriate token_is found it's returned, otherwise {@code null} is returned.__@param context The context that will provide information about the incoming request_@return The authentication token or {@code null} if not found;public abstract AuthenticationToken token(ThreadContext context)_;attempts,to,extract,an,authentication,token,from,the,given,context,if,an,appropriate,token,is,found,it,s,returned,otherwise,code,null,is,returned,param,context,the,context,that,will,provide,information,about,the,incoming,request,return,the,authentication,token,or,code,null,if,not,found;public,abstract,authentication,token,token,thread,context,context
Realm -> public abstract AuthenticationToken token(ThreadContext context)_;1541476610;Attempts to extract an authentication token from the given context. If an appropriate token_is found it's returned, otherwise {@code null} is returned.__@param context The context that will provide information about the incoming request_@return The authentication token or {@code null} if not found;public abstract AuthenticationToken token(ThreadContext context)_;attempts,to,extract,an,authentication,token,from,the,given,context,if,an,appropriate,token,is,found,it,s,returned,otherwise,code,null,is,returned,param,context,the,context,that,will,provide,information,about,the,incoming,request,return,the,authentication,token,or,code,null,if,not,found;public,abstract,authentication,token,token,thread,context,context
Realm -> Factory -> Realm create(RealmConfig config) throws Exception_;1524684173;Constructs a realm which will be used for authentication.__@param config The configuration for the realm_@throws Exception an exception may be thrown if there was an error during realm creation;Realm create(RealmConfig config) throws Exception_;constructs,a,realm,which,will,be,used,for,authentication,param,config,the,configuration,for,the,realm,throws,exception,an,exception,may,be,thrown,if,there,was,an,error,during,realm,creation;realm,create,realm,config,config,throws,exception
Realm -> Factory -> Realm create(RealmConfig config) throws Exception_;1528304883;Constructs a realm which will be used for authentication.__@param config The configuration for the realm_@throws Exception an exception may be thrown if there was an error during realm creation;Realm create(RealmConfig config) throws Exception_;constructs,a,realm,which,will,be,used,for,authentication,param,config,the,configuration,for,the,realm,throws,exception,an,exception,may,be,thrown,if,there,was,an,error,during,realm,creation;realm,create,realm,config,config,throws,exception
Realm -> Factory -> Realm create(RealmConfig config) throws Exception_;1532456624;Constructs a realm which will be used for authentication.__@param config The configuration for the realm_@throws Exception an exception may be thrown if there was an error during realm creation;Realm create(RealmConfig config) throws Exception_;constructs,a,realm,which,will,be,used,for,authentication,param,config,the,configuration,for,the,realm,throws,exception,an,exception,may,be,thrown,if,there,was,an,error,during,realm,creation;realm,create,realm,config,config,throws,exception
Realm -> Factory -> Realm create(RealmConfig config) throws Exception_;1533295538;Constructs a realm which will be used for authentication.__@param config The configuration for the realm_@throws Exception an exception may be thrown if there was an error during realm creation;Realm create(RealmConfig config) throws Exception_;constructs,a,realm,which,will,be,used,for,authentication,param,config,the,configuration,for,the,realm,throws,exception,an,exception,may,be,thrown,if,there,was,an,error,during,realm,creation;realm,create,realm,config,config,throws,exception
Realm -> Factory -> Realm create(RealmConfig config) throws Exception_;1535552903;Constructs a realm which will be used for authentication.__@param config The configuration for the realm_@throws Exception an exception may be thrown if there was an error during realm creation;Realm create(RealmConfig config) throws Exception_;constructs,a,realm,which,will,be,used,for,authentication,param,config,the,configuration,for,the,realm,throws,exception,an,exception,may,be,thrown,if,there,was,an,error,during,realm,creation;realm,create,realm,config,config,throws,exception
Realm -> Factory -> Realm create(RealmConfig config) throws Exception_;1535723122;Constructs a realm which will be used for authentication.__@param config The configuration for the realm_@throws Exception an exception may be thrown if there was an error during realm creation;Realm create(RealmConfig config) throws Exception_;constructs,a,realm,which,will,be,used,for,authentication,param,config,the,configuration,for,the,realm,throws,exception,an,exception,may,be,thrown,if,there,was,an,error,during,realm,creation;realm,create,realm,config,config,throws,exception
Realm -> Factory -> Realm create(RealmConfig config) throws Exception_;1538170812;Constructs a realm which will be used for authentication.__@param config The configuration for the realm_@throws Exception an exception may be thrown if there was an error during realm creation;Realm create(RealmConfig config) throws Exception_;constructs,a,realm,which,will,be,used,for,authentication,param,config,the,configuration,for,the,realm,throws,exception,an,exception,may,be,thrown,if,there,was,an,error,during,realm,creation;realm,create,realm,config,config,throws,exception
Realm -> Factory -> Realm create(RealmConfig config) throws Exception_;1541476610;Constructs a realm which will be used for authentication.__@param config The configuration for the realm_@throws Exception an exception may be thrown if there was an error during realm creation;Realm create(RealmConfig config) throws Exception_;constructs,a,realm,which,will,be,used,for,authentication,param,config,the,configuration,for,the,realm,throws,exception,an,exception,may,be,thrown,if,there,was,an,error,during,realm,creation;realm,create,realm,config,config,throws,exception
Realm -> public abstract boolean supports(AuthenticationToken token)_;1524684173;@return {@code true} if this realm supports the given authentication token, {@code false} otherwise.;public abstract boolean supports(AuthenticationToken token)_;return,code,true,if,this,realm,supports,the,given,authentication,token,code,false,otherwise;public,abstract,boolean,supports,authentication,token,token
Realm -> public abstract boolean supports(AuthenticationToken token)_;1528304883;@return {@code true} if this realm supports the given authentication token, {@code false} otherwise.;public abstract boolean supports(AuthenticationToken token)_;return,code,true,if,this,realm,supports,the,given,authentication,token,code,false,otherwise;public,abstract,boolean,supports,authentication,token,token
Realm -> public abstract boolean supports(AuthenticationToken token)_;1532456624;@return {@code true} if this realm supports the given authentication token, {@code false} otherwise.;public abstract boolean supports(AuthenticationToken token)_;return,code,true,if,this,realm,supports,the,given,authentication,token,code,false,otherwise;public,abstract,boolean,supports,authentication,token,token
Realm -> public abstract boolean supports(AuthenticationToken token)_;1533295538;@return {@code true} if this realm supports the given authentication token, {@code false} otherwise.;public abstract boolean supports(AuthenticationToken token)_;return,code,true,if,this,realm,supports,the,given,authentication,token,code,false,otherwise;public,abstract,boolean,supports,authentication,token,token
Realm -> public abstract boolean supports(AuthenticationToken token)_;1535552903;@return {@code true} if this realm supports the given authentication token, {@code false} otherwise.;public abstract boolean supports(AuthenticationToken token)_;return,code,true,if,this,realm,supports,the,given,authentication,token,code,false,otherwise;public,abstract,boolean,supports,authentication,token,token
Realm -> public abstract boolean supports(AuthenticationToken token)_;1535723122;@return {@code true} if this realm supports the given authentication token, {@code false} otherwise.;public abstract boolean supports(AuthenticationToken token)_;return,code,true,if,this,realm,supports,the,given,authentication,token,code,false,otherwise;public,abstract,boolean,supports,authentication,token,token
Realm -> public abstract boolean supports(AuthenticationToken token)_;1538170812;@return {@code true} if this realm supports the given authentication token, {@code false} otherwise.;public abstract boolean supports(AuthenticationToken token)_;return,code,true,if,this,realm,supports,the,given,authentication,token,code,false,otherwise;public,abstract,boolean,supports,authentication,token,token
Realm -> public abstract boolean supports(AuthenticationToken token)_;1541476610;@return {@code true} if this realm supports the given authentication token, {@code false} otherwise.;public abstract boolean supports(AuthenticationToken token)_;return,code,true,if,this,realm,supports,the,given,authentication,token,code,false,otherwise;public,abstract,boolean,supports,authentication,token,token
Realm -> public Map<String, List<String>> getAuthenticationFailureHeaders();1532456624;Each realm can define response headers to be sent on failure._<p>_By default it adds 'WWW-Authenticate' header with auth scheme 'Basic'.__@return Map of authentication failure response headers.;public Map<String, List<String>> getAuthenticationFailureHeaders() {_        return Collections.singletonMap("WWW-Authenticate",_                Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\""))__    };each,realm,can,define,response,headers,to,be,sent,on,failure,p,by,default,it,adds,www,authenticate,header,with,auth,scheme,basic,return,map,of,authentication,failure,response,headers;public,map,string,list,string,get,authentication,failure,headers,return,collections,singleton,map,www,authenticate,collections,singleton,list,basic,realm,xpack,field,security,charset,utf,8
Realm -> public Map<String, List<String>> getAuthenticationFailureHeaders();1533295538;Each realm can define response headers to be sent on failure._<p>_By default it adds 'WWW-Authenticate' header with auth scheme 'Basic'.__@return Map of authentication failure response headers.;public Map<String, List<String>> getAuthenticationFailureHeaders() {_        return Collections.singletonMap("WWW-Authenticate",_                Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\""))__    };each,realm,can,define,response,headers,to,be,sent,on,failure,p,by,default,it,adds,www,authenticate,header,with,auth,scheme,basic,return,map,of,authentication,failure,response,headers;public,map,string,list,string,get,authentication,failure,headers,return,collections,singleton,map,www,authenticate,collections,singleton,list,basic,realm,xpack,field,security,charset,utf,8
Realm -> public Map<String, List<String>> getAuthenticationFailureHeaders();1535552903;Each realm can define response headers to be sent on failure._<p>_By default it adds 'WWW-Authenticate' header with auth scheme 'Basic'.__@return Map of authentication failure response headers.;public Map<String, List<String>> getAuthenticationFailureHeaders() {_        return Collections.singletonMap("WWW-Authenticate",_                Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\""))__    };each,realm,can,define,response,headers,to,be,sent,on,failure,p,by,default,it,adds,www,authenticate,header,with,auth,scheme,basic,return,map,of,authentication,failure,response,headers;public,map,string,list,string,get,authentication,failure,headers,return,collections,singleton,map,www,authenticate,collections,singleton,list,basic,realm,xpack,field,security,charset,utf,8
Realm -> public Map<String, List<String>> getAuthenticationFailureHeaders();1535723122;Each realm can define response headers to be sent on failure._<p>_By default it adds 'WWW-Authenticate' header with auth scheme 'Basic'.__@return Map of authentication failure response headers.;public Map<String, List<String>> getAuthenticationFailureHeaders() {_        return Collections.singletonMap("WWW-Authenticate",_                Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\""))__    };each,realm,can,define,response,headers,to,be,sent,on,failure,p,by,default,it,adds,www,authenticate,header,with,auth,scheme,basic,return,map,of,authentication,failure,response,headers;public,map,string,list,string,get,authentication,failure,headers,return,collections,singleton,map,www,authenticate,collections,singleton,list,basic,realm,xpack,field,security,charset,utf,8
Realm -> public Map<String, List<String>> getAuthenticationFailureHeaders();1538170812;Each realm can define response headers to be sent on failure._<p>_By default it adds 'WWW-Authenticate' header with auth scheme 'Basic'.__@return Map of authentication failure response headers.;public Map<String, List<String>> getAuthenticationFailureHeaders() {_        return Collections.singletonMap("WWW-Authenticate",_                Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\""))__    };each,realm,can,define,response,headers,to,be,sent,on,failure,p,by,default,it,adds,www,authenticate,header,with,auth,scheme,basic,return,map,of,authentication,failure,response,headers;public,map,string,list,string,get,authentication,failure,headers,return,collections,singleton,map,www,authenticate,collections,singleton,list,basic,realm,xpack,field,security,charset,utf,8
Realm -> public Map<String, List<String>> getAuthenticationFailureHeaders();1541476610;Each realm can define response headers to be sent on failure._<p>_By default it adds 'WWW-Authenticate' header with auth scheme 'Basic'.__@return Map of authentication failure response headers.;public Map<String, List<String>> getAuthenticationFailureHeaders() {_        return Collections.singletonMap("WWW-Authenticate",_                Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\""))__    };each,realm,can,define,response,headers,to,be,sent,on,failure,p,by,default,it,adds,www,authenticate,header,with,auth,scheme,basic,return,map,of,authentication,failure,response,headers;public,map,string,list,string,get,authentication,failure,headers,return,collections,singleton,map,www,authenticate,collections,singleton,list,basic,realm,xpack,field,security,charset,utf,8
Realm -> public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;1524684173;Authenticates the given token in an asynchronous fashion._<p>_A successful authentication will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#success successful} result, which includes the user associated with the given token._<br>_If the realm does not support, or cannot handle the token, it will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#notHandled not-handled} result._This can include cases where the token identifies as user that is not known by this realm._<br>_If the realm can handle the token, but authentication failed it will typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#unsuccessful failure} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password._<br>_If the realm wishes to assert that it has the exclusive right to handle the provided token, but authentication was not successful_it typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#terminate termination} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password and no other realm is allowed to_authenticate that user._</p>_<p>_The remote address should be {@code null} if the request initiated from the local node._</p>__@param token           The authentication token_@param listener        The listener to pass the authentication result to;public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;authenticates,the,given,token,in,an,asynchronous,fashion,p,a,successful,authentication,will,call,link,action,listener,on,response,with,a,link,authentication,result,success,successful,result,which,includes,the,user,associated,with,the,given,token,br,if,the,realm,does,not,support,or,cannot,handle,the,token,it,will,call,link,action,listener,on,response,with,a,link,authentication,result,not,handled,not,handled,result,this,can,include,cases,where,the,token,identifies,as,user,that,is,not,known,by,this,realm,br,if,the,realm,can,handle,the,token,but,authentication,failed,it,will,typically,call,link,action,listener,on,response,with,a,link,authentication,result,unsuccessful,failure,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,br,if,the,realm,wishes,to,assert,that,it,has,the,exclusive,right,to,handle,the,provided,token,but,authentication,was,not,successful,it,typically,call,link,action,listener,on,response,with,a,link,authentication,result,terminate,termination,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,and,no,other,realm,is,allowed,to,authenticate,that,user,p,p,the,remote,address,should,be,code,null,if,the,request,initiated,from,the,local,node,p,param,token,the,authentication,token,param,listener,the,listener,to,pass,the,authentication,result,to;public,abstract,void,authenticate,authentication,token,token,action,listener,authentication,result,listener
Realm -> public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;1528304883;Authenticates the given token in an asynchronous fashion._<p>_A successful authentication will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#success successful} result, which includes the user associated with the given token._<br>_If the realm does not support, or cannot handle the token, it will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#notHandled not-handled} result._This can include cases where the token identifies as user that is not known by this realm._<br>_If the realm can handle the token, but authentication failed it will typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#unsuccessful failure} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password._<br>_If the realm wishes to assert that it has the exclusive right to handle the provided token, but authentication was not successful_it typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#terminate termination} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password and no other realm is allowed to_authenticate that user._</p>_<p>_The remote address should be {@code null} if the request initiated from the local node._</p>__@param token           The authentication token_@param listener        The listener to pass the authentication result to;public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;authenticates,the,given,token,in,an,asynchronous,fashion,p,a,successful,authentication,will,call,link,action,listener,on,response,with,a,link,authentication,result,success,successful,result,which,includes,the,user,associated,with,the,given,token,br,if,the,realm,does,not,support,or,cannot,handle,the,token,it,will,call,link,action,listener,on,response,with,a,link,authentication,result,not,handled,not,handled,result,this,can,include,cases,where,the,token,identifies,as,user,that,is,not,known,by,this,realm,br,if,the,realm,can,handle,the,token,but,authentication,failed,it,will,typically,call,link,action,listener,on,response,with,a,link,authentication,result,unsuccessful,failure,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,br,if,the,realm,wishes,to,assert,that,it,has,the,exclusive,right,to,handle,the,provided,token,but,authentication,was,not,successful,it,typically,call,link,action,listener,on,response,with,a,link,authentication,result,terminate,termination,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,and,no,other,realm,is,allowed,to,authenticate,that,user,p,p,the,remote,address,should,be,code,null,if,the,request,initiated,from,the,local,node,p,param,token,the,authentication,token,param,listener,the,listener,to,pass,the,authentication,result,to;public,abstract,void,authenticate,authentication,token,token,action,listener,authentication,result,listener
Realm -> public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;1532456624;Authenticates the given token in an asynchronous fashion._<p>_A successful authentication will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#success successful} result, which includes the user associated with the given token._<br>_If the realm does not support, or cannot handle the token, it will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#notHandled not-handled} result._This can include cases where the token identifies as user that is not known by this realm._<br>_If the realm can handle the token, but authentication failed it will typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#unsuccessful failure} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password._<br>_If the realm wishes to assert that it has the exclusive right to handle the provided token, but authentication was not successful_it typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#terminate termination} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password and no other realm is allowed to_authenticate that user._</p>_<p>_The remote address should be {@code null} if the request initiated from the local node._</p>__@param token           The authentication token_@param listener        The listener to pass the authentication result to;public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;authenticates,the,given,token,in,an,asynchronous,fashion,p,a,successful,authentication,will,call,link,action,listener,on,response,with,a,link,authentication,result,success,successful,result,which,includes,the,user,associated,with,the,given,token,br,if,the,realm,does,not,support,or,cannot,handle,the,token,it,will,call,link,action,listener,on,response,with,a,link,authentication,result,not,handled,not,handled,result,this,can,include,cases,where,the,token,identifies,as,user,that,is,not,known,by,this,realm,br,if,the,realm,can,handle,the,token,but,authentication,failed,it,will,typically,call,link,action,listener,on,response,with,a,link,authentication,result,unsuccessful,failure,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,br,if,the,realm,wishes,to,assert,that,it,has,the,exclusive,right,to,handle,the,provided,token,but,authentication,was,not,successful,it,typically,call,link,action,listener,on,response,with,a,link,authentication,result,terminate,termination,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,and,no,other,realm,is,allowed,to,authenticate,that,user,p,p,the,remote,address,should,be,code,null,if,the,request,initiated,from,the,local,node,p,param,token,the,authentication,token,param,listener,the,listener,to,pass,the,authentication,result,to;public,abstract,void,authenticate,authentication,token,token,action,listener,authentication,result,listener
Realm -> public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;1533295538;Authenticates the given token in an asynchronous fashion._<p>_A successful authentication will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#success successful} result, which includes the user associated with the given token._<br>_If the realm does not support, or cannot handle the token, it will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#notHandled not-handled} result._This can include cases where the token identifies as user that is not known by this realm._<br>_If the realm can handle the token, but authentication failed it will typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#unsuccessful failure} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password._<br>_If the realm wishes to assert that it has the exclusive right to handle the provided token, but authentication was not successful_it typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#terminate termination} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password and no other realm is allowed to_authenticate that user._</p>_<p>_The remote address should be {@code null} if the request initiated from the local node._</p>__@param token           The authentication token_@param listener        The listener to pass the authentication result to;public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;authenticates,the,given,token,in,an,asynchronous,fashion,p,a,successful,authentication,will,call,link,action,listener,on,response,with,a,link,authentication,result,success,successful,result,which,includes,the,user,associated,with,the,given,token,br,if,the,realm,does,not,support,or,cannot,handle,the,token,it,will,call,link,action,listener,on,response,with,a,link,authentication,result,not,handled,not,handled,result,this,can,include,cases,where,the,token,identifies,as,user,that,is,not,known,by,this,realm,br,if,the,realm,can,handle,the,token,but,authentication,failed,it,will,typically,call,link,action,listener,on,response,with,a,link,authentication,result,unsuccessful,failure,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,br,if,the,realm,wishes,to,assert,that,it,has,the,exclusive,right,to,handle,the,provided,token,but,authentication,was,not,successful,it,typically,call,link,action,listener,on,response,with,a,link,authentication,result,terminate,termination,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,and,no,other,realm,is,allowed,to,authenticate,that,user,p,p,the,remote,address,should,be,code,null,if,the,request,initiated,from,the,local,node,p,param,token,the,authentication,token,param,listener,the,listener,to,pass,the,authentication,result,to;public,abstract,void,authenticate,authentication,token,token,action,listener,authentication,result,listener
Realm -> public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;1535552903;Authenticates the given token in an asynchronous fashion._<p>_A successful authentication will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#success successful} result, which includes the user associated with the given token._<br>_If the realm does not support, or cannot handle the token, it will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#notHandled not-handled} result._This can include cases where the token identifies as user that is not known by this realm._<br>_If the realm can handle the token, but authentication failed it will typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#unsuccessful failure} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password._<br>_If the realm wishes to assert that it has the exclusive right to handle the provided token, but authentication was not successful_it typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#terminate termination} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password and no other realm is allowed to_authenticate that user._</p>_<p>_The remote address should be {@code null} if the request initiated from the local node._</p>__@param token           The authentication token_@param listener        The listener to pass the authentication result to;public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;authenticates,the,given,token,in,an,asynchronous,fashion,p,a,successful,authentication,will,call,link,action,listener,on,response,with,a,link,authentication,result,success,successful,result,which,includes,the,user,associated,with,the,given,token,br,if,the,realm,does,not,support,or,cannot,handle,the,token,it,will,call,link,action,listener,on,response,with,a,link,authentication,result,not,handled,not,handled,result,this,can,include,cases,where,the,token,identifies,as,user,that,is,not,known,by,this,realm,br,if,the,realm,can,handle,the,token,but,authentication,failed,it,will,typically,call,link,action,listener,on,response,with,a,link,authentication,result,unsuccessful,failure,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,br,if,the,realm,wishes,to,assert,that,it,has,the,exclusive,right,to,handle,the,provided,token,but,authentication,was,not,successful,it,typically,call,link,action,listener,on,response,with,a,link,authentication,result,terminate,termination,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,and,no,other,realm,is,allowed,to,authenticate,that,user,p,p,the,remote,address,should,be,code,null,if,the,request,initiated,from,the,local,node,p,param,token,the,authentication,token,param,listener,the,listener,to,pass,the,authentication,result,to;public,abstract,void,authenticate,authentication,token,token,action,listener,authentication,result,listener
Realm -> public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;1535723122;Authenticates the given token in an asynchronous fashion._<p>_A successful authentication will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#success successful} result, which includes the user associated with the given token._<br>_If the realm does not support, or cannot handle the token, it will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#notHandled not-handled} result._This can include cases where the token identifies as user that is not known by this realm._<br>_If the realm can handle the token, but authentication failed it will typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#unsuccessful failure} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password._<br>_If the realm wishes to assert that it has the exclusive right to handle the provided token, but authentication was not successful_it typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#terminate termination} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password and no other realm is allowed to_authenticate that user._</p>_<p>_The remote address should be {@code null} if the request initiated from the local node._</p>__@param token           The authentication token_@param listener        The listener to pass the authentication result to;public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;authenticates,the,given,token,in,an,asynchronous,fashion,p,a,successful,authentication,will,call,link,action,listener,on,response,with,a,link,authentication,result,success,successful,result,which,includes,the,user,associated,with,the,given,token,br,if,the,realm,does,not,support,or,cannot,handle,the,token,it,will,call,link,action,listener,on,response,with,a,link,authentication,result,not,handled,not,handled,result,this,can,include,cases,where,the,token,identifies,as,user,that,is,not,known,by,this,realm,br,if,the,realm,can,handle,the,token,but,authentication,failed,it,will,typically,call,link,action,listener,on,response,with,a,link,authentication,result,unsuccessful,failure,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,br,if,the,realm,wishes,to,assert,that,it,has,the,exclusive,right,to,handle,the,provided,token,but,authentication,was,not,successful,it,typically,call,link,action,listener,on,response,with,a,link,authentication,result,terminate,termination,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,and,no,other,realm,is,allowed,to,authenticate,that,user,p,p,the,remote,address,should,be,code,null,if,the,request,initiated,from,the,local,node,p,param,token,the,authentication,token,param,listener,the,listener,to,pass,the,authentication,result,to;public,abstract,void,authenticate,authentication,token,token,action,listener,authentication,result,listener
Realm -> public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;1538170812;Authenticates the given token in an asynchronous fashion._<p>_A successful authentication will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#success successful} result, which includes the user associated with the given token._<br>_If the realm does not support, or cannot handle the token, it will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#notHandled not-handled} result._This can include cases where the token identifies as user that is not known by this realm._<br>_If the realm can handle the token, but authentication failed it will typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#unsuccessful failure} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password._<br>_If the realm wishes to assert that it has the exclusive right to handle the provided token, but authentication was not successful_it typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#terminate termination} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password and no other realm is allowed to_authenticate that user._</p>_<p>_The remote address should be {@code null} if the request initiated from the local node._</p>__@param token           The authentication token_@param listener        The listener to pass the authentication result to;public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;authenticates,the,given,token,in,an,asynchronous,fashion,p,a,successful,authentication,will,call,link,action,listener,on,response,with,a,link,authentication,result,success,successful,result,which,includes,the,user,associated,with,the,given,token,br,if,the,realm,does,not,support,or,cannot,handle,the,token,it,will,call,link,action,listener,on,response,with,a,link,authentication,result,not,handled,not,handled,result,this,can,include,cases,where,the,token,identifies,as,user,that,is,not,known,by,this,realm,br,if,the,realm,can,handle,the,token,but,authentication,failed,it,will,typically,call,link,action,listener,on,response,with,a,link,authentication,result,unsuccessful,failure,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,br,if,the,realm,wishes,to,assert,that,it,has,the,exclusive,right,to,handle,the,provided,token,but,authentication,was,not,successful,it,typically,call,link,action,listener,on,response,with,a,link,authentication,result,terminate,termination,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,and,no,other,realm,is,allowed,to,authenticate,that,user,p,p,the,remote,address,should,be,code,null,if,the,request,initiated,from,the,local,node,p,param,token,the,authentication,token,param,listener,the,listener,to,pass,the,authentication,result,to;public,abstract,void,authenticate,authentication,token,token,action,listener,authentication,result,listener
Realm -> public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;1541476610;Authenticates the given token in an asynchronous fashion._<p>_A successful authentication will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#success successful} result, which includes the user associated with the given token._<br>_If the realm does not support, or cannot handle the token, it will call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#notHandled not-handled} result._This can include cases where the token identifies as user that is not known by this realm._<br>_If the realm can handle the token, but authentication failed it will typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#unsuccessful failure} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password._<br>_If the realm wishes to assert that it has the exclusive right to handle the provided token, but authentication was not successful_it typically call {@link ActionListener#onResponse} with a_{@link AuthenticationResult#terminate termination} result, which includes a diagnostic message regarding the failure._This can include cases where the token identifies a valid user, but has an invalid password and no other realm is allowed to_authenticate that user._</p>_<p>_The remote address should be {@code null} if the request initiated from the local node._</p>__@param token           The authentication token_@param listener        The listener to pass the authentication result to;public abstract void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener)_;authenticates,the,given,token,in,an,asynchronous,fashion,p,a,successful,authentication,will,call,link,action,listener,on,response,with,a,link,authentication,result,success,successful,result,which,includes,the,user,associated,with,the,given,token,br,if,the,realm,does,not,support,or,cannot,handle,the,token,it,will,call,link,action,listener,on,response,with,a,link,authentication,result,not,handled,not,handled,result,this,can,include,cases,where,the,token,identifies,as,user,that,is,not,known,by,this,realm,br,if,the,realm,can,handle,the,token,but,authentication,failed,it,will,typically,call,link,action,listener,on,response,with,a,link,authentication,result,unsuccessful,failure,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,br,if,the,realm,wishes,to,assert,that,it,has,the,exclusive,right,to,handle,the,provided,token,but,authentication,was,not,successful,it,typically,call,link,action,listener,on,response,with,a,link,authentication,result,terminate,termination,result,which,includes,a,diagnostic,message,regarding,the,failure,this,can,include,cases,where,the,token,identifies,a,valid,user,but,has,an,invalid,password,and,no,other,realm,is,allowed,to,authenticate,that,user,p,p,the,remote,address,should,be,code,null,if,the,request,initiated,from,the,local,node,p,param,token,the,authentication,token,param,listener,the,listener,to,pass,the,authentication,result,to;public,abstract,void,authenticate,authentication,token,token,action,listener,authentication,result,listener
Realm -> public abstract void lookupUser(String username, ActionListener<User> listener)_;1524684173;Looks up the user identified the String identifier. A successful lookup will call the {@link ActionListener#onResponse}_with the {@link User} identified by the username. An unsuccessful lookup call with {@code null} as the argument. If lookup is not_supported, simply return {@code null} when called.__@param username the String identifier for the user_@param listener The listener to pass the lookup result to;public abstract void lookupUser(String username, ActionListener<User> listener)_;looks,up,the,user,identified,the,string,identifier,a,successful,lookup,will,call,the,link,action,listener,on,response,with,the,link,user,identified,by,the,username,an,unsuccessful,lookup,call,with,code,null,as,the,argument,if,lookup,is,not,supported,simply,return,code,null,when,called,param,username,the,string,identifier,for,the,user,param,listener,the,listener,to,pass,the,lookup,result,to;public,abstract,void,lookup,user,string,username,action,listener,user,listener
Realm -> public abstract void lookupUser(String username, ActionListener<User> listener)_;1528304883;Looks up the user identified the String identifier. A successful lookup will call the {@link ActionListener#onResponse}_with the {@link User} identified by the username. An unsuccessful lookup call with {@code null} as the argument. If lookup is not_supported, simply return {@code null} when called.__@param username the String identifier for the user_@param listener The listener to pass the lookup result to;public abstract void lookupUser(String username, ActionListener<User> listener)_;looks,up,the,user,identified,the,string,identifier,a,successful,lookup,will,call,the,link,action,listener,on,response,with,the,link,user,identified,by,the,username,an,unsuccessful,lookup,call,with,code,null,as,the,argument,if,lookup,is,not,supported,simply,return,code,null,when,called,param,username,the,string,identifier,for,the,user,param,listener,the,listener,to,pass,the,lookup,result,to;public,abstract,void,lookup,user,string,username,action,listener,user,listener
Realm -> public abstract void lookupUser(String username, ActionListener<User> listener)_;1532456624;Looks up the user identified the String identifier. A successful lookup will call the {@link ActionListener#onResponse}_with the {@link User} identified by the username. An unsuccessful lookup call with {@code null} as the argument. If lookup is not_supported, simply return {@code null} when called.__@param username the String identifier for the user_@param listener The listener to pass the lookup result to;public abstract void lookupUser(String username, ActionListener<User> listener)_;looks,up,the,user,identified,the,string,identifier,a,successful,lookup,will,call,the,link,action,listener,on,response,with,the,link,user,identified,by,the,username,an,unsuccessful,lookup,call,with,code,null,as,the,argument,if,lookup,is,not,supported,simply,return,code,null,when,called,param,username,the,string,identifier,for,the,user,param,listener,the,listener,to,pass,the,lookup,result,to;public,abstract,void,lookup,user,string,username,action,listener,user,listener
Realm -> public abstract void lookupUser(String username, ActionListener<User> listener)_;1533295538;Looks up the user identified the String identifier. A successful lookup will call the {@link ActionListener#onResponse}_with the {@link User} identified by the username. An unsuccessful lookup call with {@code null} as the argument. If lookup is not_supported, simply return {@code null} when called.__@param username the String identifier for the user_@param listener The listener to pass the lookup result to;public abstract void lookupUser(String username, ActionListener<User> listener)_;looks,up,the,user,identified,the,string,identifier,a,successful,lookup,will,call,the,link,action,listener,on,response,with,the,link,user,identified,by,the,username,an,unsuccessful,lookup,call,with,code,null,as,the,argument,if,lookup,is,not,supported,simply,return,code,null,when,called,param,username,the,string,identifier,for,the,user,param,listener,the,listener,to,pass,the,lookup,result,to;public,abstract,void,lookup,user,string,username,action,listener,user,listener
Realm -> public abstract void lookupUser(String username, ActionListener<User> listener)_;1535552903;Looks up the user identified the String identifier. A successful lookup will call the {@link ActionListener#onResponse}_with the {@link User} identified by the username. An unsuccessful lookup call with {@code null} as the argument. If lookup is not_supported, simply return {@code null} when called.__@param username the String identifier for the user_@param listener The listener to pass the lookup result to;public abstract void lookupUser(String username, ActionListener<User> listener)_;looks,up,the,user,identified,the,string,identifier,a,successful,lookup,will,call,the,link,action,listener,on,response,with,the,link,user,identified,by,the,username,an,unsuccessful,lookup,call,with,code,null,as,the,argument,if,lookup,is,not,supported,simply,return,code,null,when,called,param,username,the,string,identifier,for,the,user,param,listener,the,listener,to,pass,the,lookup,result,to;public,abstract,void,lookup,user,string,username,action,listener,user,listener
Realm -> public abstract void lookupUser(String username, ActionListener<User> listener)_;1535723122;Looks up the user identified the String identifier. A successful lookup will call the {@link ActionListener#onResponse}_with the {@link User} identified by the username. An unsuccessful lookup call with {@code null} as the argument. If lookup is not_supported, simply return {@code null} when called.__@param username the String identifier for the user_@param listener The listener to pass the lookup result to;public abstract void lookupUser(String username, ActionListener<User> listener)_;looks,up,the,user,identified,the,string,identifier,a,successful,lookup,will,call,the,link,action,listener,on,response,with,the,link,user,identified,by,the,username,an,unsuccessful,lookup,call,with,code,null,as,the,argument,if,lookup,is,not,supported,simply,return,code,null,when,called,param,username,the,string,identifier,for,the,user,param,listener,the,listener,to,pass,the,lookup,result,to;public,abstract,void,lookup,user,string,username,action,listener,user,listener
Realm -> public abstract void lookupUser(String username, ActionListener<User> listener)_;1538170812;Looks up the user identified the String identifier. A successful lookup will call the {@link ActionListener#onResponse}_with the {@link User} identified by the username. An unsuccessful lookup call with {@code null} as the argument. If lookup is not_supported, simply return {@code null} when called.__@param username the String identifier for the user_@param listener The listener to pass the lookup result to;public abstract void lookupUser(String username, ActionListener<User> listener)_;looks,up,the,user,identified,the,string,identifier,a,successful,lookup,will,call,the,link,action,listener,on,response,with,the,link,user,identified,by,the,username,an,unsuccessful,lookup,call,with,code,null,as,the,argument,if,lookup,is,not,supported,simply,return,code,null,when,called,param,username,the,string,identifier,for,the,user,param,listener,the,listener,to,pass,the,lookup,result,to;public,abstract,void,lookup,user,string,username,action,listener,user,listener
Realm -> public abstract void lookupUser(String username, ActionListener<User> listener)_;1541476610;Looks up the user identified the String identifier. A successful lookup will call the {@link ActionListener#onResponse}_with the {@link User} identified by the username. An unsuccessful lookup call with {@code null} as the argument. If lookup is not_supported, simply return {@code null} when called.__@param username the String identifier for the user_@param listener The listener to pass the lookup result to;public abstract void lookupUser(String username, ActionListener<User> listener)_;looks,up,the,user,identified,the,string,identifier,a,successful,lookup,will,call,the,link,action,listener,on,response,with,the,link,user,identified,by,the,username,an,unsuccessful,lookup,call,with,code,null,as,the,argument,if,lookup,is,not,supported,simply,return,code,null,when,called,param,username,the,string,identifier,for,the,user,param,listener,the,listener,to,pass,the,lookup,result,to;public,abstract,void,lookup,user,string,username,action,listener,user,listener
Realm -> public void initialize(Iterable<Realm> realms, XPackLicenseState licenseState);1535723122;This is no-op in the base class, but allows realms to be aware of what other realms are configured__@see DelegatedAuthorizationSettings;public void initialize(Iterable<Realm> realms, XPackLicenseState licenseState) {_    };this,is,no,op,in,the,base,class,but,allows,realms,to,be,aware,of,what,other,realms,are,configured,see,delegated,authorization,settings;public,void,initialize,iterable,realm,realms,xpack,license,state,license,state
Realm -> public void initialize(Iterable<Realm> realms, XPackLicenseState licenseState);1538170812;This is no-op in the base class, but allows realms to be aware of what other realms are configured__@see DelegatedAuthorizationSettings;public void initialize(Iterable<Realm> realms, XPackLicenseState licenseState) {_    };this,is,no,op,in,the,base,class,but,allows,realms,to,be,aware,of,what,other,realms,are,configured,see,delegated,authorization,settings;public,void,initialize,iterable,realm,realms,xpack,license,state,license,state
Realm -> public void initialize(Iterable<Realm> realms, XPackLicenseState licenseState);1541476610;This is no-op in the base class, but allows realms to be aware of what other realms are configured__@see DelegatedAuthorizationSettings;public void initialize(Iterable<Realm> realms, XPackLicenseState licenseState) {_    };this,is,no,op,in,the,base,class,but,allows,realms,to,be,aware,of,what,other,realms,are,configured,see,delegated,authorization,settings;public,void,initialize,iterable,realm,realms,xpack,license,state,license,state
