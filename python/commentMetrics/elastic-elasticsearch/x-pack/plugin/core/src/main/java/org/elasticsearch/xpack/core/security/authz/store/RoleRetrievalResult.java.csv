commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return the resolved descriptors or {@code null} if there was a failure  */ ;/**  * @return the resolved descriptors or {@code null} if there was a failure  */ public Set<RoleDescriptor> getDescriptors() {     return descriptors. }
true;public;0;4;/**  * @return the failure or {@code null} if retrieval succeeded  */ ;/**  * @return the failure or {@code null} if retrieval succeeded  */ @Nullable public Exception getFailure() {     return failure. }
true;public;0;3;/**  * @return true if the retrieval succeeded  */ ;/**  * @return true if the retrieval succeeded  */ public boolean isSuccess() {     return descriptors != null. }
true;public,static;1;4;/**  * Creates a successful result with the provided {@link RoleDescriptor} set,  * which must be non-null  */ ;/**  * Creates a successful result with the provided {@link RoleDescriptor} set,  * which must be non-null  */ public static RoleRetrievalResult success(Set<RoleDescriptor> descriptors) {     Objects.requireNonNull(descriptors, "descriptors must not be null if successful").     return new RoleRetrievalResult(descriptors, null). }
true;public,static;1;4;/**  * Creates a failed result with the provided non-null exception  */ ;/**  * Creates a failed result with the provided non-null exception  */ public static RoleRetrievalResult failure(Exception e) {     Objects.requireNonNull(e, "Exception must be provided").     return new RoleRetrievalResult(null, e). }
