commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getNumberOfShards() {     return numberOfShards. }
false;;0;3;;String getShrunkIndexPrefix() {     return shrunkIndexPrefix. }
false;public;4;27;;@Override public void performAction(IndexMetaData indexMetaData, ClusterState currentState, ClusterStateObserver observer, Listener listener) {     LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(indexMetaData).     if (lifecycleState.getLifecycleDate() == null) {         throw new IllegalStateException("source index [" + indexMetaData.getIndex().getName() + "] is missing lifecycle date").     }     String lifecycle = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(indexMetaData.getSettings()).     Settings relevantTargetSettings = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numberOfShards).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, indexMetaData.getNumberOfReplicas()).put(LifecycleSettings.LIFECYCLE_NAME, lifecycle).put(IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING.getKey() + "_id", // need to remove the single shard     (String) null).build().     String shrunkenIndexName = shrunkIndexPrefix + indexMetaData.getIndex().getName().     ResizeRequest resizeRequest = new ResizeRequest(shrunkenIndexName, indexMetaData.getIndex().getName()).     resizeRequest.getTargetIndexRequest().settings(relevantTargetSettings).     getClient().admin().indices().resizeIndex(resizeRequest, ActionListener.wrap(response -> {         listener.onResponse(response.isAcknowledged()).     }, listener::onFailure)). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), numberOfShards, shrunkIndexPrefix). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     ShrinkStep other = (ShrinkStep) obj.     return super.equals(obj) && Objects.equals(numberOfShards, other.numberOfShards) && Objects.equals(shrunkIndexPrefix, other.shrunkIndexPrefix). }
