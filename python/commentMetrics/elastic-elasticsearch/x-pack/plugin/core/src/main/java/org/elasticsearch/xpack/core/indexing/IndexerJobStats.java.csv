commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public long getNumPages() {     return numPages. }
false;public;0;3;;public long getNumDocuments() {     return numInputDocuments. }
false;public;0;3;;public long getNumInvocations() {     return numInvocations. }
false;public;0;3;;public long getOutputDocuments() {     return numOuputDocuments. }
false;public;0;3;;public long getIndexFailures() {     return indexFailures. }
false;public;0;3;;public long getSearchFailures() {     return searchFailures. }
false;public;0;3;;public long getIndexTime() {     return indexTime. }
false;public;0;3;;public long getSearchTime() {     return searchTime. }
false;public;0;3;;public long getIndexTotal() {     return indexTotal. }
false;public;0;3;;public long getSearchTotal() {     return searchTotal. }
false;public;1;4;;public void incrementNumPages(long n) {     assert (n >= 0).     numPages += n. }
false;public;1;4;;public void incrementNumDocuments(long n) {     assert (n >= 0).     numInputDocuments += n. }
false;public;1;4;;public void incrementNumInvocations(long n) {     assert (n >= 0).     numInvocations += n. }
false;public;1;4;;public void incrementNumOutputDocuments(long n) {     assert (n >= 0).     numOuputDocuments += n. }
false;public;0;3;;public void incrementIndexingFailures() {     this.indexFailures += 1. }
false;public;0;3;;public void incrementSearchFailures() {     this.searchFailures += 1. }
false;public;0;3;;public void markStartIndexing() {     this.startIndexTime = System.nanoTime(). }
false;public;0;4;;public void markEndIndexing() {     indexTime += ((System.nanoTime() - startIndexTime) / 1000000).     indexTotal += 1. }
false;public;0;3;;public void markStartSearch() {     this.startSearchTime = System.nanoTime(). }
false;public;0;4;;public void markEndSearch() {     searchTime += ((System.nanoTime() - startSearchTime) / 1000000).     searchTotal += 1. }
false;public;1;15;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(numPages).     out.writeVLong(numInputDocuments).     out.writeVLong(numOuputDocuments).     out.writeVLong(numInvocations).     if (out.getVersion().onOrAfter(Version.V_6_6_0)) {         out.writeVLong(indexTime).         out.writeVLong(searchTime).         out.writeVLong(indexTotal).         out.writeVLong(searchTotal).         out.writeVLong(indexFailures).         out.writeVLong(searchFailures).     } }
false;public;1;23;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     IndexerJobStats that = (IndexerJobStats) other.     return Objects.equals(this.numPages, that.numPages) && Objects.equals(this.numInputDocuments, that.numInputDocuments) && Objects.equals(this.numOuputDocuments, that.numOuputDocuments) && Objects.equals(this.numInvocations, that.numInvocations) && Objects.equals(this.indexTime, that.indexTime) && Objects.equals(this.searchTime, that.searchTime) && Objects.equals(this.indexFailures, that.indexFailures) && Objects.equals(this.searchFailures, that.searchFailures) && Objects.equals(this.indexTotal, that.indexTotal) && Objects.equals(this.searchTotal, that.searchTotal). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(numPages, numInputDocuments, numOuputDocuments, numInvocations, indexTime, searchTime, indexFailures, searchFailures, indexTotal, searchTotal). }
