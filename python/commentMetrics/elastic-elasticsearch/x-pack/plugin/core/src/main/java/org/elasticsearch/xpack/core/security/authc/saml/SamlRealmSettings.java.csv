commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;20;/**  * @return The {@link Setting setting configuration} for this realm type  */ ;/**  * @return The {@link Setting setting configuration} for this realm type  */ public static Set<Setting.AffixSetting<?>> getSettings() {     final Set<Setting.AffixSetting<?>> set = Sets.newHashSet(IDP_ENTITY_ID, IDP_METADATA_PATH, IDP_SINGLE_LOGOUT, SP_ENTITY_ID, SP_ACS, SP_LOGOUT, NAMEID_FORMAT, NAMEID_ALLOW_CREATE, NAMEID_SP_QUALIFIER, FORCE_AUTHN, POPULATE_USER_METADATA, CLOCK_SKEW, ENCRYPTION_KEY_ALIAS, SIGNING_KEY_ALIAS, SIGNING_MESSAGE_TYPES, REQUESTED_AUTHN_CONTEXT_CLASS_REF).     set.addAll(X509KeyPairSettings.affix(RealmSettings.realmSettingPrefix(TYPE), ENCRYPTION_SETTING_KEY, false)).     set.addAll(X509KeyPairSettings.affix(RealmSettings.realmSettingPrefix(TYPE), SIGNING_SETTING_KEY, false)).     set.addAll(SSLConfigurationSettings.getRealmSettings(TYPE)).     set.addAll(PRINCIPAL_ATTRIBUTE.settings()).     set.addAll(GROUPS_ATTRIBUTE.settings()).     set.addAll(DN_ATTRIBUTE.settings()).     set.addAll(NAME_ATTRIBUTE.settings()).     set.addAll(MAIL_ATTRIBUTE.settings()).     set.addAll(DelegatedAuthorizationSettings.getSettings(TYPE)).     set.addAll(RealmSettings.getStandardSettings(TYPE)).     return set. }
false;public;0;3;;public Collection<Setting.AffixSetting<?>> settings() {     return Arrays.asList(getAttribute(), getPattern()). }
false;public;1;3;;public String name(RealmConfig config) {     return getAttribute().getConcreteSettingForNamespace(config.name()).getKey(). }
false;public;0;3;;public Setting.AffixSetting<String> getAttribute() {     return attribute. }
false;public;0;3;;public Setting.AffixSetting<String> getPattern() {     return pattern. }
