commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;public,static;1;3;;public static Request fromXContent(XContentParser parser) {     return parseRequest(null, parser). }
false;public,static;2;7;;public static Request parseRequest(String jobId, XContentParser parser) {     JobParams jobParams = JobParams.PARSER.apply(parser, null).     if (jobId != null) {         jobParams.jobId = jobId.     }     return new Request(jobParams). }
false;public;0;3;;public JobParams getJobParams() {     return jobParams. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     jobParams = new JobParams(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     jobParams.writeTo(out). }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     jobParams.toXContent(builder, params).     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobParams). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || obj.getClass() != getClass()) {         return false.     }     OpenJobAction.Request other = (OpenJobAction.Request) obj.     return Objects.equals(jobParams, other.jobParams). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;public,static;1;3;;public static JobParams fromXContent(XContentParser parser) {     return parseRequest(null, parser). }
false;public,static;2;7;;public static JobParams parseRequest(String jobId, XContentParser parser) {     JobParams params = PARSER.apply(parser, null).     if (jobId != null) {         params.jobId = jobId.     }     return params. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;1;3;;public void setJobId(String jobId) {     this.jobId = jobId. }
false;public;0;3;;public TimeValue getTimeout() {     return timeout. }
false;public;1;3;;public void setTimeout(TimeValue timeout) {     this.timeout = timeout. }
false;public;0;4;;@Nullable public Job getJob() {     return job. }
false;public;1;3;;public void setJob(Job job) {     this.job = job. }
false;public;0;4;;@Override public String getWriteableName() {     return MlTasks.JOB_TASK_NAME. }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(jobId).     out.writeVLong(timeout.millis()).     if (out.getVersion().onOrAfter(Version.V_6_6_0)) {         out.writeOptionalWriteable(job).     } }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(TIMEOUT.getPreferredName(), timeout.getStringRep()).     if (job != null) {         builder.field("job", job).     }     builder.endObject().     // The job field is streamed but not persisted     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, timeout, job). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || obj.getClass() != getClass()) {         return false.     }     OpenJobAction.JobParams other = (OpenJobAction.JobParams) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(timeout, other.timeout) && Objects.equals(job, other.job). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;public;0;4;;@Override public Version getMinimalSupportedVersion() {     return Version.CURRENT.minimumCompatibilityVersion(). }
false;static;2;10;;static boolean match(Task task, String expectedJobId) {     if (task instanceof JobTaskMatcher) {         if (MetaData.ALL.equals(expectedJobId)) {             return true.         }         String expectedDescription = "job-" + expectedJobId.         return expectedDescription.equals(task.getDescription()).     }     return false. }
