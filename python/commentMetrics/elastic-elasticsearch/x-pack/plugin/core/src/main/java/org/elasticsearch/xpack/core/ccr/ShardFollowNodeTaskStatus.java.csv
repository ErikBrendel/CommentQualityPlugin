commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getRemoteCluster() {     return remoteCluster. }
false;public;0;3;;public String leaderIndex() {     return leaderIndex. }
false;public;0;3;;public String followerIndex() {     return followerIndex. }
false;public;0;3;;public int getShardId() {     return shardId. }
false;public;0;3;;public long leaderGlobalCheckpoint() {     return leaderGlobalCheckpoint. }
false;public;0;3;;public long leaderMaxSeqNo() {     return leaderMaxSeqNo. }
false;public;0;3;;public long followerGlobalCheckpoint() {     return followerGlobalCheckpoint. }
false;public;0;3;;public long followerMaxSeqNo() {     return followerMaxSeqNo. }
false;public;0;3;;public long lastRequestedSeqNo() {     return lastRequestedSeqNo. }
false;public;0;3;;public int outstandingReadRequests() {     return outstandingReadRequests. }
false;public;0;3;;public int outstandingWriteRequests() {     return outstandingWriteRequests. }
false;public;0;3;;public int writeBufferOperationCount() {     return writeBufferOperationCount. }
false;public;0;3;;public long writeBufferSizeInBytes() {     return writeBufferSizeInBytes. }
false;public;0;3;;public long followerMappingVersion() {     return followerMappingVersion. }
false;public;0;3;;public long followerSettingsVersion() {     return followerSettingsVersion. }
false;public;0;3;;public long totalReadTimeMillis() {     return totalReadTimeMillis. }
false;public;0;3;;public long totalReadRemoteExecTimeMillis() {     return totalReadRemoteExecTimeMillis. }
false;public;0;3;;public long successfulReadRequests() {     return successfulReadRequests. }
false;public;0;3;;public long failedReadRequests() {     return failedReadRequests. }
false;public;0;3;;public long operationsReads() {     return operationsReads. }
false;public;0;3;;public long bytesRead() {     return bytesRead. }
false;public;0;3;;public long totalWriteTimeMillis() {     return totalWriteTimeMillis. }
false;public;0;3;;public long successfulWriteRequests() {     return successfulWriteRequests. }
false;public;0;3;;public long failedWriteRequests() {     return failedWriteRequests. }
false;public;0;3;;public long operationWritten() {     return operationWritten. }
false;public;0;3;;public NavigableMap<Long, Tuple<Integer, ElasticsearchException>> readExceptions() {     return readExceptions. }
false;public;0;3;;public long timeSinceLastReadMillis() {     return timeSinceLastReadMillis. }
false;public;0;3;;public ElasticsearchException getFatalException() {     return fatalException. }
false;public;0;4;;@Override public String getWriteableName() {     return STATUS_PARSER_NAME. }
false;public;1;37;;@Override public void writeTo(final StreamOutput out) throws IOException {     out.writeOptionalString(remoteCluster).     out.writeString(leaderIndex).     out.writeString(followerIndex).     out.writeVInt(shardId).     out.writeZLong(leaderGlobalCheckpoint).     out.writeZLong(leaderMaxSeqNo).     out.writeZLong(followerGlobalCheckpoint).     out.writeZLong(followerMaxSeqNo).     out.writeZLong(lastRequestedSeqNo).     out.writeVInt(outstandingReadRequests).     out.writeVInt(outstandingWriteRequests).     out.writeVInt(writeBufferOperationCount).     out.writeVLong(writeBufferSizeInBytes).     out.writeVLong(followerMappingVersion).     out.writeVLong(followerSettingsVersion).     out.writeVLong(totalReadTimeMillis).     out.writeVLong(totalReadRemoteExecTimeMillis).     out.writeVLong(successfulReadRequests).     out.writeVLong(failedReadRequests).     out.writeVLong(operationsReads).     out.writeVLong(bytesRead).     out.writeVLong(totalWriteTimeMillis).     out.writeVLong(successfulWriteRequests).     out.writeVLong(failedWriteRequests).     out.writeVLong(operationWritten).     out.writeMap(readExceptions, StreamOutput::writeVLong, (stream, value) -> {         stream.writeVInt(value.v1()).         stream.writeException(value.v2()).     }).     out.writeZLong(timeSinceLastReadMillis).     out.writeException(fatalException). }
false;public;2;9;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject().     {         toXContentFragment(builder, params).     }     builder.endObject().     return builder. }
false;public;2;73;;public XContentBuilder toXContentFragment(final XContentBuilder builder, final Params params) throws IOException {     builder.field(LEADER_CLUSTER.getPreferredName(), remoteCluster).     builder.field(LEADER_INDEX.getPreferredName(), leaderIndex).     builder.field(FOLLOWER_INDEX.getPreferredName(), followerIndex).     builder.field(SHARD_ID.getPreferredName(), shardId).     builder.field(LEADER_GLOBAL_CHECKPOINT_FIELD.getPreferredName(), leaderGlobalCheckpoint).     builder.field(LEADER_MAX_SEQ_NO_FIELD.getPreferredName(), leaderMaxSeqNo).     builder.field(FOLLOWER_GLOBAL_CHECKPOINT_FIELD.getPreferredName(), followerGlobalCheckpoint).     builder.field(FOLLOWER_MAX_SEQ_NO_FIELD.getPreferredName(), followerMaxSeqNo).     builder.field(LAST_REQUESTED_SEQ_NO_FIELD.getPreferredName(), lastRequestedSeqNo).     builder.field(OUTSTANDING_READ_REQUESTS.getPreferredName(), outstandingReadRequests).     builder.field(OUTSTANDING_WRITE_REQUESTS.getPreferredName(), outstandingWriteRequests).     builder.field(WRITE_BUFFER_OPERATION_COUNT_FIELD.getPreferredName(), writeBufferOperationCount).     builder.humanReadableField(WRITE_BUFFER_SIZE_IN_BYTES_FIELD.getPreferredName(), "write_buffer_size", new ByteSizeValue(writeBufferSizeInBytes)).     builder.field(FOLLOWER_MAPPING_VERSION_FIELD.getPreferredName(), followerMappingVersion).     builder.field(FOLLOWER_SETTINGS_VERSION_FIELD.getPreferredName(), followerSettingsVersion).     builder.humanReadableField(TOTAL_READ_TIME_MILLIS_FIELD.getPreferredName(), "total_read_time", new TimeValue(totalReadTimeMillis, TimeUnit.MILLISECONDS)).     builder.humanReadableField(TOTAL_READ_REMOTE_EXEC_TIME_MILLIS_FIELD.getPreferredName(), "total_read_remote_exec_time", new TimeValue(totalReadRemoteExecTimeMillis, TimeUnit.MILLISECONDS)).     builder.field(SUCCESSFUL_READ_REQUESTS_FIELD.getPreferredName(), successfulReadRequests).     builder.field(FAILED_READ_REQUESTS_FIELD.getPreferredName(), failedReadRequests).     builder.field(OPERATIONS_READ_FIELD.getPreferredName(), operationsReads).     builder.humanReadableField(BYTES_READ.getPreferredName(), "total_read", new ByteSizeValue(bytesRead, ByteSizeUnit.BYTES)).     builder.humanReadableField(TOTAL_WRITE_TIME_MILLIS_FIELD.getPreferredName(), "total_write_time", new TimeValue(totalWriteTimeMillis, TimeUnit.MILLISECONDS)).     builder.field(SUCCESSFUL_WRITE_REQUESTS_FIELD.getPreferredName(), successfulWriteRequests).     builder.field(FAILED_WRITE_REQUEST_FIELD.getPreferredName(), failedWriteRequests).     builder.field(OPERATIONS_WRITTEN.getPreferredName(), operationWritten).     builder.startArray(READ_EXCEPTIONS.getPreferredName()).     {         for (final Map.Entry<Long, Tuple<Integer, ElasticsearchException>> entry : readExceptions.entrySet()) {             builder.startObject().             {                 builder.field(READ_EXCEPTIONS_ENTRY_FROM_SEQ_NO.getPreferredName(), entry.getKey()).                 builder.field(READ_EXCEPTIONS_RETRIES.getPreferredName(), entry.getValue().v1()).                 builder.field(READ_EXCEPTIONS_ENTRY_EXCEPTION.getPreferredName()).                 builder.startObject().                 {                     ElasticsearchException.generateThrowableXContent(builder, params, entry.getValue().v2()).                 }                 builder.endObject().             }             builder.endObject().         }     }     builder.endArray().     builder.humanReadableField(TIME_SINCE_LAST_READ_MILLIS_FIELD.getPreferredName(), "time_since_last_read", new TimeValue(timeSinceLastReadMillis, TimeUnit.MILLISECONDS)).     if (fatalException != null) {         builder.field(FATAL_EXCEPTION.getPreferredName()).         builder.startObject().         {             ElasticsearchException.generateThrowableXContent(builder, params, fatalException).         }         builder.endObject().     }     return builder. }
false;public,static;1;3;;public static ShardFollowNodeTaskStatus fromXContent(final XContentParser parser) {     return STATUS_PARSER.apply(parser, null). }
false;public;1;41;;@Override public boolean equals(final Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     final ShardFollowNodeTaskStatus that = (ShardFollowNodeTaskStatus) o.     String fatalExceptionMessage = fatalException != null ? fatalException.getMessage() : null.     String otherFatalExceptionMessage = that.fatalException != null ? that.fatalException.getMessage() : null.     return remoteCluster.equals(that.remoteCluster) && leaderIndex.equals(that.leaderIndex) && followerIndex.equals(that.followerIndex) && shardId == that.shardId && leaderGlobalCheckpoint == that.leaderGlobalCheckpoint && leaderMaxSeqNo == that.leaderMaxSeqNo && followerGlobalCheckpoint == that.followerGlobalCheckpoint && followerMaxSeqNo == that.followerMaxSeqNo && lastRequestedSeqNo == that.lastRequestedSeqNo && outstandingReadRequests == that.outstandingReadRequests && outstandingWriteRequests == that.outstandingWriteRequests && writeBufferOperationCount == that.writeBufferOperationCount && writeBufferSizeInBytes == that.writeBufferSizeInBytes && followerMappingVersion == that.followerMappingVersion && followerSettingsVersion == that.followerSettingsVersion && totalReadTimeMillis == that.totalReadTimeMillis && totalReadRemoteExecTimeMillis == that.totalReadRemoteExecTimeMillis && successfulReadRequests == that.successfulReadRequests && failedReadRequests == that.failedReadRequests && operationsReads == that.operationsReads && bytesRead == that.bytesRead && successfulWriteRequests == that.successfulWriteRequests && failedWriteRequests == that.failedWriteRequests && operationWritten == that.operationWritten && /*                  * ElasticsearchException does not implement equals so we will assume the fetch exceptions are equal if they are equal                  * up to the key set and their messages.  Note that we are relying on the fact that the fetch exceptions are ordered by                  * keys.                  */     readExceptions.keySet().equals(that.readExceptions.keySet()) && getReadExceptionMessages(this).equals(getReadExceptionMessages(that)) && timeSinceLastReadMillis == that.timeSinceLastReadMillis && Objects.equals(fatalExceptionMessage, otherFatalExceptionMessage). }
false;public;0;37;;@Override public int hashCode() {     String fatalExceptionMessage = fatalException != null ? fatalException.getMessage() : null.     return Objects.hash(remoteCluster, leaderIndex, followerIndex, shardId, leaderGlobalCheckpoint, leaderMaxSeqNo, followerGlobalCheckpoint, followerMaxSeqNo, lastRequestedSeqNo, outstandingReadRequests, outstandingWriteRequests, writeBufferOperationCount, writeBufferSizeInBytes, followerMappingVersion, followerSettingsVersion, totalReadTimeMillis, totalReadRemoteExecTimeMillis, successfulReadRequests, failedReadRequests, operationsReads, bytesRead, successfulWriteRequests, failedWriteRequests, operationWritten, /*                  * ElasticsearchException does not implement hash code so we will compute the hash code based on the key set and the                  * messages. Note that we are relying on the fact that the fetch exceptions are ordered by keys.                  */     readExceptions.keySet(), getReadExceptionMessages(this), timeSinceLastReadMillis, fatalExceptionMessage). }
false;private,static;1;3;;private static List<String> getReadExceptionMessages(final ShardFollowNodeTaskStatus status) {     return status.readExceptions().values().stream().map(t -> t.v2().getMessage()).collect(Collectors.toList()). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
