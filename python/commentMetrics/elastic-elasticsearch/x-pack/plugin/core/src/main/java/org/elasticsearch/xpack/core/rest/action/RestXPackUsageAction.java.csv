commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "xpack_usage_action". }
false;public;2;9;;@Override public RestResponse buildResponse(XPackUsageResponse response, XContentBuilder builder) throws Exception {     builder.startObject().     for (XPackFeatureSet.Usage usage : response.getUsages()) {         builder.field(usage.name(), usage).     }     builder.endObject().     return new BytesRestResponse(OK, builder). }
false;public;2;17;;@Override public RestChannelConsumer doPrepareRequest(RestRequest request, XPackClient client) throws IOException {     final TimeValue masterTimeout = request.paramAsTime("master_timeout", MasterNodeRequest.DEFAULT_MASTER_NODE_TIMEOUT).     return channel -> new XPackUsageRequestBuilder(client.es()).setMasterNodeTimeout(masterTimeout).execute(new RestBuilderListener<XPackUsageResponse>(channel) {          @Override         public RestResponse buildResponse(XPackUsageResponse response, XContentBuilder builder) throws Exception {             builder.startObject().             for (XPackFeatureSet.Usage usage : response.getUsages()) {                 builder.field(usage.name(), usage).             }             builder.endObject().             return new BytesRestResponse(OK, builder).         }     }). }
