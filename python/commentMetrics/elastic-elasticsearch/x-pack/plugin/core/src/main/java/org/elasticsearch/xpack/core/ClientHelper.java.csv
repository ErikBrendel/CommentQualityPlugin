# id;timestamp;commentText;codeText;commentWords;codeWords
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse>     void executeWithHeadersAsync(Map<String, String> headers, String origin, Client client, Action<Response> action, Request request,                                  ActionListener<Response> listener);1529600205;Execute a client operation asynchronously, try to run an action with_least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param action_The action to execute_@param request_The request object for the action_@param listener_The listener to call when the action is complete;public static <Request extends ActionRequest, Response extends ActionResponse>_    void executeWithHeadersAsync(Map<String, String> headers, String origin, Client client, Action<Response> action, Request request,_                                 ActionListener<Response> listener) {__        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        final ThreadContext threadContext = client.threadPool().getThreadContext()___        _        if (filteredHeaders.isEmpty()) {_            ClientHelper.executeAsyncWithOrigin(client, origin, action, request, listener)__        } else {_            _            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__            try (ThreadContext.StoredContext ignore = stashWithHeaders(threadContext, filteredHeaders)) {_                client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__            }_        }_    };execute,a,client,operation,asynchronously,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,action,the,action,to,execute,param,request,the,request,object,for,the,action,param,listener,the,listener,to,call,when,the,action,is,complete;public,static,request,extends,action,request,response,extends,action,response,void,execute,with,headers,async,map,string,string,headers,string,origin,client,client,action,response,action,request,request,action,listener,response,listener,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,thread,context,thread,context,client,thread,pool,get,thread,context,if,filtered,headers,is,empty,client,helper,execute,async,with,origin,client,origin,action,request,listener,else,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,headers,thread,context,filtered,headers,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse>     void executeWithHeadersAsync(Map<String, String> headers, String origin, Client client, Action<Response> action, Request request,                                  ActionListener<Response> listener);1543415307;Execute a client operation asynchronously, try to run an action with_least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param action_The action to execute_@param request_The request object for the action_@param listener_The listener to call when the action is complete;public static <Request extends ActionRequest, Response extends ActionResponse>_    void executeWithHeadersAsync(Map<String, String> headers, String origin, Client client, Action<Response> action, Request request,_                                 ActionListener<Response> listener) {__        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        final ThreadContext threadContext = client.threadPool().getThreadContext()___        _        if (filteredHeaders.isEmpty()) {_            ClientHelper.executeAsyncWithOrigin(client, origin, action, request, listener)__        } else {_            _            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__            try (ThreadContext.StoredContext ignore = stashWithHeaders(threadContext, filteredHeaders)) {_                client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__            }_        }_    };execute,a,client,operation,asynchronously,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,action,the,action,to,execute,param,request,the,request,object,for,the,action,param,listener,the,listener,to,call,when,the,action,is,complete;public,static,request,extends,action,request,response,extends,action,response,void,execute,with,headers,async,map,string,string,headers,string,origin,client,client,action,response,action,request,request,action,listener,response,listener,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,thread,context,thread,context,client,thread,pool,get,thread,context,if,filtered,headers,is,empty,client,helper,execute,async,with,origin,client,origin,action,request,listener,else,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,headers,thread,context,filtered,headers,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse>     void executeWithHeadersAsync(Map<String, String> headers, String origin, Client client, Action<Response> action, Request request,                                  ActionListener<Response> listener);1550477798;Execute a client operation asynchronously, try to run an action with_least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param action_The action to execute_@param request_The request object for the action_@param listener_The listener to call when the action is complete;public static <Request extends ActionRequest, Response extends ActionResponse>_    void executeWithHeadersAsync(Map<String, String> headers, String origin, Client client, Action<Response> action, Request request,_                                 ActionListener<Response> listener) {__        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        final ThreadContext threadContext = client.threadPool().getThreadContext()___        _        if (filteredHeaders.isEmpty()) {_            ClientHelper.executeAsyncWithOrigin(client, origin, action, request, listener)__        } else {_            _            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__            try (ThreadContext.StoredContext ignore = stashWithHeaders(threadContext, filteredHeaders)) {_                client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__            }_        }_    };execute,a,client,operation,asynchronously,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,action,the,action,to,execute,param,request,the,request,object,for,the,action,param,listener,the,listener,to,call,when,the,action,is,complete;public,static,request,extends,action,request,response,extends,action,response,void,execute,with,headers,async,map,string,string,headers,string,origin,client,client,action,response,action,request,request,action,listener,response,listener,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,thread,context,thread,context,client,thread,pool,get,thread,context,if,filtered,headers,is,empty,client,helper,execute,async,with,origin,client,origin,action,request,listener,else,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,headers,thread,context,filtered,headers,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse,             RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void executeAsyncWithOrigin(             Client client, String origin, Action<Request, Response, RequestBuilder> action, Request request,             ActionListener<Response> listener);1524684173;Executes an asynchronous action using the provided client. The origin is set in the context and the listener_is wrapped to ensure the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse,_            RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void executeAsyncWithOrigin(_            Client client, String origin, Action<Request, Response, RequestBuilder> action, Request request,_            ActionListener<Response> listener) {_        final ThreadContext threadContext = client.threadPool().getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,an,asynchronous,action,using,the,provided,client,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,request,builder,extends,action,request,builder,request,response,request,builder,void,execute,async,with,origin,client,client,string,origin,action,request,response,request,builder,action,request,request,action,listener,response,listener,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse,             RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void executeAsyncWithOrigin(             Client client, String origin, Action<Request, Response, RequestBuilder> action, Request request,             ActionListener<Response> listener);1526467406;Executes an asynchronous action using the provided client. The origin is set in the context and the listener_is wrapped to ensure the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse,_            RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void executeAsyncWithOrigin(_            Client client, String origin, Action<Request, Response, RequestBuilder> action, Request request,_            ActionListener<Response> listener) {_        final ThreadContext threadContext = client.threadPool().getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,an,asynchronous,action,using,the,provided,client,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,request,builder,extends,action,request,builder,request,response,request,builder,void,execute,async,with,origin,client,client,string,origin,action,request,response,request,builder,action,request,request,action,listener,response,listener,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse,             RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void executeAsyncWithOrigin(             Client client, String origin, Action<Request, Response, RequestBuilder> action, Request request,             ActionListener<Response> listener);1526917515;Executes an asynchronous action using the provided client. The origin is set in the context and the listener_is wrapped to ensure the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse,_            RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void executeAsyncWithOrigin(_            Client client, String origin, Action<Request, Response, RequestBuilder> action, Request request,_            ActionListener<Response> listener) {_        final ThreadContext threadContext = client.threadPool().getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,an,asynchronous,action,using,the,provided,client,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,request,builder,extends,action,request,builder,request,response,request,builder,void,execute,async,with,origin,client,client,string,origin,action,request,response,request,builder,action,request,request,action,listener,response,listener,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static Client clientWithOrigin(Client client, String origin);1524684173;Returns a client that will always set the appropriate origin and ensure the proper context is restored by listeners;public static Client clientWithOrigin(Client client, String origin) {_        return new ClientWithOrigin(client, origin)__    };returns,a,client,that,will,always,set,the,appropriate,origin,and,ensure,the,proper,context,is,restored,by,listeners;public,static,client,client,with,origin,client,client,string,origin,return,new,client,with,origin,client,origin
ClientHelper -> public static Client clientWithOrigin(Client client, String origin);1526467406;Returns a client that will always set the appropriate origin and ensure the proper context is restored by listeners;public static Client clientWithOrigin(Client client, String origin) {_        return new ClientWithOrigin(client, origin)__    };returns,a,client,that,will,always,set,the,appropriate,origin,and,ensure,the,proper,context,is,restored,by,listeners;public,static,client,client,with,origin,client,client,string,origin,return,new,client,with,origin,client,origin
ClientHelper -> public static Client clientWithOrigin(Client client, String origin);1526917515;Returns a client that will always set the appropriate origin and ensure the proper context is restored by listeners;public static Client clientWithOrigin(Client client, String origin) {_        return new ClientWithOrigin(client, origin)__    };returns,a,client,that,will,always,set,the,appropriate,origin,and,ensure,the,proper,context,is,restored,by,listeners;public,static,client,client,with,origin,client,client,string,origin,return,new,client,with,origin,client,origin
ClientHelper -> public static Client clientWithOrigin(Client client, String origin);1527840262;Returns a client that will always set the appropriate origin and ensure the proper context is restored by listeners;public static Client clientWithOrigin(Client client, String origin) {_        return new ClientWithOrigin(client, origin)__    };returns,a,client,that,will,always,set,the,appropriate,origin,and,ensure,the,proper,context,is,restored,by,listeners;public,static,client,client,with,origin,client,client,string,origin,return,new,client,with,origin,client,origin
ClientHelper -> public static Client clientWithOrigin(Client client, String origin);1529433467;Returns a client that will always set the appropriate origin and ensure the proper context is restored by listeners;public static Client clientWithOrigin(Client client, String origin) {_        return new ClientWithOrigin(client, origin)__    };returns,a,client,that,will,always,set,the,appropriate,origin,and,ensure,the,proper,context,is,restored,by,listeners;public,static,client,client,with,origin,client,client,string,origin,return,new,client,with,origin,client,origin
ClientHelper -> public static Client clientWithOrigin(Client client, String origin);1529600205;Returns a client that will always set the appropriate origin and ensure the proper context is restored by listeners;public static Client clientWithOrigin(Client client, String origin) {_        return new ClientWithOrigin(client, origin)__    };returns,a,client,that,will,always,set,the,appropriate,origin,and,ensure,the,proper,context,is,restored,by,listeners;public,static,client,client,with,origin,client,client,string,origin,return,new,client,with,origin,client,origin
ClientHelper -> @Deprecated     public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin);1543415307;Stashes the current context and sets the origin in the current context. The original context is returned as a stored context_@deprecated use ThreadContext.stashWithOrigin;@Deprecated_    public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin) {_        return threadContext.stashWithOrigin(origin)__    };stashes,the,current,context,and,sets,the,origin,in,the,current,context,the,original,context,is,returned,as,a,stored,context,deprecated,use,thread,context,stash,with,origin;deprecated,public,static,thread,context,stored,context,stash,with,origin,thread,context,thread,context,string,origin,return,thread,context,stash,with,origin,origin
ClientHelper -> @Deprecated     public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin);1550477798;Stashes the current context and sets the origin in the current context. The original context is returned as a stored context_@deprecated use ThreadContext.stashWithOrigin;@Deprecated_    public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin) {_        return threadContext.stashWithOrigin(origin)__    };stashes,the,current,context,and,sets,the,origin,in,the,current,context,the,original,context,is,returned,as,a,stored,context,deprecated,use,thread,context,stash,with,origin;deprecated,public,static,thread,context,stored,context,stash,with,origin,thread,context,thread,context,string,origin,return,thread,context,stash,with,origin,origin
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse,             RequestBuilder extends ActionRequestBuilder<Request, Response>> void executeAsyncWithOrigin(         Client client, String origin, Action<Response> action, Request request,         ActionListener<Response> listener);1529433467;Executes an asynchronous action using the provided client. The origin is set in the context and the listener_is wrapped to ensure the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse,_            RequestBuilder extends ActionRequestBuilder<Request, Response>> void executeAsyncWithOrigin(_        Client client, String origin, Action<Response> action, Request request,_        ActionListener<Response> listener) {_        final ThreadContext threadContext = client.threadPool().getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,an,asynchronous,action,using,the,provided,client,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,request,builder,extends,action,request,builder,request,response,void,execute,async,with,origin,client,client,string,origin,action,response,action,request,request,action,listener,response,listener,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse,             RequestBuilder extends ActionRequestBuilder<Request, Response>> void executeAsyncWithOrigin(         Client client, String origin, Action<Response> action, Request request,         ActionListener<Response> listener);1529600205;Executes an asynchronous action using the provided client. The origin is set in the context and the listener_is wrapped to ensure the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse,_            RequestBuilder extends ActionRequestBuilder<Request, Response>> void executeAsyncWithOrigin(_        Client client, String origin, Action<Response> action, Request request,_        ActionListener<Response> listener) {_        final ThreadContext threadContext = client.threadPool().getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,an,asynchronous,action,using,the,provided,client,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,request,builder,extends,action,request,builder,request,response,void,execute,async,with,origin,client,client,string,origin,action,response,action,request,request,action,listener,response,listener,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse,             RequestBuilder extends ActionRequestBuilder<Request, Response>> void executeAsyncWithOrigin(         Client client, String origin, Action<Response> action, Request request,         ActionListener<Response> listener);1543415307;Executes an asynchronous action using the provided client. The origin is set in the context and the listener_is wrapped to ensure the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse,_            RequestBuilder extends ActionRequestBuilder<Request, Response>> void executeAsyncWithOrigin(_        Client client, String origin, Action<Response> action, Request request,_        ActionListener<Response> listener) {_        final ThreadContext threadContext = client.threadPool().getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,an,asynchronous,action,using,the,provided,client,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,request,builder,extends,action,request,builder,request,response,void,execute,async,with,origin,client,client,string,origin,action,response,action,request,request,action,listener,response,listener,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse,             RequestBuilder extends ActionRequestBuilder<Request, Response>> void executeAsyncWithOrigin(         Client client, String origin, Action<Response> action, Request request,         ActionListener<Response> listener);1550477798;Executes an asynchronous action using the provided client. The origin is set in the context and the listener_is wrapped to ensure the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse,_            RequestBuilder extends ActionRequestBuilder<Request, Response>> void executeAsyncWithOrigin(_        Client client, String origin, Action<Response> action, Request request,_        ActionListener<Response> listener) {_        final ThreadContext threadContext = client.threadPool().getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,an,asynchronous,action,using,the,provided,client,the,origin,is,set,in,the,context,and,the,listener,is,wrapped,to,ensure,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,request,builder,extends,action,request,builder,request,response,void,execute,async,with,origin,client,client,string,origin,action,response,action,request,request,action,listener,response,listener,final,thread,context,thread,context,client,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin);1524684173;Stashes the current context and sets the origin in the current context. The original context is returned as a stored context;public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin) {_        final ThreadContext.StoredContext storedContext = threadContext.stashContext()__        threadContext.putTransient(ACTION_ORIGIN_TRANSIENT_NAME, origin)__        return storedContext__    };stashes,the,current,context,and,sets,the,origin,in,the,current,context,the,original,context,is,returned,as,a,stored,context;public,static,thread,context,stored,context,stash,with,origin,thread,context,thread,context,string,origin,final,thread,context,stored,context,stored,context,thread,context,stash,context,thread,context,put,transient,origin,return,stored,context
ClientHelper -> public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin);1526467406;Stashes the current context and sets the origin in the current context. The original context is returned as a stored context;public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin) {_        final ThreadContext.StoredContext storedContext = threadContext.stashContext()__        threadContext.putTransient(ACTION_ORIGIN_TRANSIENT_NAME, origin)__        return storedContext__    };stashes,the,current,context,and,sets,the,origin,in,the,current,context,the,original,context,is,returned,as,a,stored,context;public,static,thread,context,stored,context,stash,with,origin,thread,context,thread,context,string,origin,final,thread,context,stored,context,stored,context,thread,context,stash,context,thread,context,put,transient,origin,return,stored,context
ClientHelper -> public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin);1526917515;Stashes the current context and sets the origin in the current context. The original context is returned as a stored context;public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin) {_        final ThreadContext.StoredContext storedContext = threadContext.stashContext()__        threadContext.putTransient(ACTION_ORIGIN_TRANSIENT_NAME, origin)__        return storedContext__    };stashes,the,current,context,and,sets,the,origin,in,the,current,context,the,original,context,is,returned,as,a,stored,context;public,static,thread,context,stored,context,stash,with,origin,thread,context,thread,context,string,origin,final,thread,context,stored,context,stored,context,thread,context,stash,context,thread,context,put,transient,origin,return,stored,context
ClientHelper -> public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin);1527840262;Stashes the current context and sets the origin in the current context. The original context is returned as a stored context;public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin) {_        final ThreadContext.StoredContext storedContext = threadContext.stashContext()__        threadContext.putTransient(ACTION_ORIGIN_TRANSIENT_NAME, origin)__        return storedContext__    };stashes,the,current,context,and,sets,the,origin,in,the,current,context,the,original,context,is,returned,as,a,stored,context;public,static,thread,context,stored,context,stash,with,origin,thread,context,thread,context,string,origin,final,thread,context,stored,context,stored,context,thread,context,stash,context,thread,context,put,transient,origin,return,stored,context
ClientHelper -> public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin);1529433467;Stashes the current context and sets the origin in the current context. The original context is returned as a stored context;public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin) {_        final ThreadContext.StoredContext storedContext = threadContext.stashContext()__        threadContext.putTransient(ACTION_ORIGIN_TRANSIENT_NAME, origin)__        return storedContext__    };stashes,the,current,context,and,sets,the,origin,in,the,current,context,the,original,context,is,returned,as,a,stored,context;public,static,thread,context,stored,context,stash,with,origin,thread,context,thread,context,string,origin,final,thread,context,stored,context,stored,context,thread,context,stash,context,thread,context,put,transient,origin,return,stored,context
ClientHelper -> public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin);1529600205;Stashes the current context and sets the origin in the current context. The original context is returned as a stored context;public static ThreadContext.StoredContext stashWithOrigin(ThreadContext threadContext, String origin) {_        final ThreadContext.StoredContext storedContext = threadContext.stashContext()__        threadContext.putTransient(ACTION_ORIGIN_TRANSIENT_NAME, origin)__        return storedContext__    };stashes,the,current,context,and,sets,the,origin,in,the,current,context,the,original,context,is,returned,as,a,stored,context;public,static,thread,context,stored,context,stash,with,origin,thread,context,thread,context,string,origin,final,thread,context,stored,context,stored,context,thread,context,stash,context,thread,context,put,transient,origin,return,stored,context
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(             ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,             BiConsumer<Request, ActionListener<Response>> consumer);1524684173;Executes a consumer after setting the origin and wrapping the listener so that the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(_            ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,_            BiConsumer<Request, ActionListener<Response>> consumer) {_        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            consumer.accept(request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,a,consumer,after,setting,the,origin,and,wrapping,the,listener,so,that,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,void,execute,async,with,origin,thread,context,thread,context,string,origin,request,request,action,listener,response,listener,bi,consumer,request,action,listener,response,consumer,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,consumer,accept,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(             ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,             BiConsumer<Request, ActionListener<Response>> consumer);1526467406;Executes a consumer after setting the origin and wrapping the listener so that the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(_            ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,_            BiConsumer<Request, ActionListener<Response>> consumer) {_        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            consumer.accept(request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,a,consumer,after,setting,the,origin,and,wrapping,the,listener,so,that,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,void,execute,async,with,origin,thread,context,thread,context,string,origin,request,request,action,listener,response,listener,bi,consumer,request,action,listener,response,consumer,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,consumer,accept,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(             ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,             BiConsumer<Request, ActionListener<Response>> consumer);1526917515;Executes a consumer after setting the origin and wrapping the listener so that the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(_            ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,_            BiConsumer<Request, ActionListener<Response>> consumer) {_        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            consumer.accept(request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,a,consumer,after,setting,the,origin,and,wrapping,the,listener,so,that,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,void,execute,async,with,origin,thread,context,thread,context,string,origin,request,request,action,listener,response,listener,bi,consumer,request,action,listener,response,consumer,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,consumer,accept,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(             ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,             BiConsumer<Request, ActionListener<Response>> consumer);1527840262;Executes a consumer after setting the origin and wrapping the listener so that the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(_            ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,_            BiConsumer<Request, ActionListener<Response>> consumer) {_        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            consumer.accept(request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,a,consumer,after,setting,the,origin,and,wrapping,the,listener,so,that,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,void,execute,async,with,origin,thread,context,thread,context,string,origin,request,request,action,listener,response,listener,bi,consumer,request,action,listener,response,consumer,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,consumer,accept,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(             ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,             BiConsumer<Request, ActionListener<Response>> consumer);1529433467;Executes a consumer after setting the origin and wrapping the listener so that the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(_            ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,_            BiConsumer<Request, ActionListener<Response>> consumer) {_        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            consumer.accept(request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,a,consumer,after,setting,the,origin,and,wrapping,the,listener,so,that,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,void,execute,async,with,origin,thread,context,thread,context,string,origin,request,request,action,listener,response,listener,bi,consumer,request,action,listener,response,consumer,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,consumer,accept,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(             ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,             BiConsumer<Request, ActionListener<Response>> consumer);1529600205;Executes a consumer after setting the origin and wrapping the listener so that the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(_            ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,_            BiConsumer<Request, ActionListener<Response>> consumer) {_        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            consumer.accept(request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,a,consumer,after,setting,the,origin,and,wrapping,the,listener,so,that,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,void,execute,async,with,origin,thread,context,thread,context,string,origin,request,request,action,listener,response,listener,bi,consumer,request,action,listener,response,consumer,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,consumer,accept,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(             ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,             BiConsumer<Request, ActionListener<Response>> consumer);1543415307;Executes a consumer after setting the origin and wrapping the listener so that the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(_            ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,_            BiConsumer<Request, ActionListener<Response>> consumer) {_        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            consumer.accept(request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,a,consumer,after,setting,the,origin,and,wrapping,the,listener,so,that,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,void,execute,async,with,origin,thread,context,thread,context,string,origin,request,request,action,listener,response,listener,bi,consumer,request,action,listener,response,consumer,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,consumer,accept,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(             ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,             BiConsumer<Request, ActionListener<Response>> consumer);1550477798;Executes a consumer after setting the origin and wrapping the listener so that the proper context is restored;public static <Request extends ActionRequest, Response extends ActionResponse> void executeAsyncWithOrigin(_            ThreadContext threadContext, String origin, Request request, ActionListener<Response> listener,_            BiConsumer<Request, ActionListener<Response>> consumer) {_        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, origin)) {_            consumer.accept(request, new ContextPreservingActionListener<>(supplier, listener))__        }_    };executes,a,consumer,after,setting,the,origin,and,wrapping,the,listener,so,that,the,proper,context,is,restored;public,static,request,extends,action,request,response,extends,action,response,void,execute,async,with,origin,thread,context,thread,context,string,origin,request,request,action,listener,response,listener,bi,consumer,request,action,listener,response,consumer,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,thread,context,origin,consumer,accept,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,             Supplier<T> supplier);1526467406;Execute a client operation and return the response, try to run an action_with least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param client_The client used to query_@param supplier_The action to run_@return An instance of the response class;public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,_            Supplier<T> supplier) {_        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        _        _        if (filteredHeaders.isEmpty()) {_            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), origin)) {_                return supplier.get()__            }_        } else {_            try (ThreadContext.StoredContext ignore = client.threadPool().getThreadContext().stashContext()) {_                client.threadPool().getThreadContext().copyHeaders(filteredHeaders.entrySet())__                return supplier.get()__            }_        }_    };execute,a,client,operation,and,return,the,response,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,client,the,client,used,to,query,param,supplier,the,action,to,run,return,an,instance,of,the,response,class;public,static,t,extends,action,response,t,execute,with,headers,map,string,string,headers,string,origin,client,client,supplier,t,supplier,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,if,filtered,headers,is,empty,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,origin,return,supplier,get,else,try,thread,context,stored,context,ignore,client,thread,pool,get,thread,context,stash,context,client,thread,pool,get,thread,context,copy,headers,filtered,headers,entry,set,return,supplier,get
ClientHelper -> public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,             Supplier<T> supplier);1526917515;Execute a client operation and return the response, try to run an action_with least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param client_The client used to query_@param supplier_The action to run_@return An instance of the response class;public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,_            Supplier<T> supplier) {_        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        _        _        if (filteredHeaders.isEmpty()) {_            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), origin)) {_                return supplier.get()__            }_        } else {_            try (ThreadContext.StoredContext ignore = client.threadPool().getThreadContext().stashContext()) {_                client.threadPool().getThreadContext().copyHeaders(filteredHeaders.entrySet())__                return supplier.get()__            }_        }_    };execute,a,client,operation,and,return,the,response,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,client,the,client,used,to,query,param,supplier,the,action,to,run,return,an,instance,of,the,response,class;public,static,t,extends,action,response,t,execute,with,headers,map,string,string,headers,string,origin,client,client,supplier,t,supplier,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,if,filtered,headers,is,empty,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,origin,return,supplier,get,else,try,thread,context,stored,context,ignore,client,thread,pool,get,thread,context,stash,context,client,thread,pool,get,thread,context,copy,headers,filtered,headers,entry,set,return,supplier,get
ClientHelper -> public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,             Supplier<T> supplier);1527840262;Execute a client operation and return the response, try to run an action_with least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param client_The client used to query_@param supplier_The action to run_@return An instance of the response class;public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,_            Supplier<T> supplier) {_        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        _        _        if (filteredHeaders.isEmpty()) {_            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), origin)) {_                return supplier.get()__            }_        } else {_            try (ThreadContext.StoredContext ignore = client.threadPool().getThreadContext().stashContext()) {_                client.threadPool().getThreadContext().copyHeaders(filteredHeaders.entrySet())__                return supplier.get()__            }_        }_    };execute,a,client,operation,and,return,the,response,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,client,the,client,used,to,query,param,supplier,the,action,to,run,return,an,instance,of,the,response,class;public,static,t,extends,action,response,t,execute,with,headers,map,string,string,headers,string,origin,client,client,supplier,t,supplier,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,if,filtered,headers,is,empty,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,origin,return,supplier,get,else,try,thread,context,stored,context,ignore,client,thread,pool,get,thread,context,stash,context,client,thread,pool,get,thread,context,copy,headers,filtered,headers,entry,set,return,supplier,get
ClientHelper -> public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,             Supplier<T> supplier);1529433467;Execute a client operation and return the response, try to run an action_with least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param client_The client used to query_@param supplier_The action to run_@return An instance of the response class;public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,_            Supplier<T> supplier) {_        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        _        _        if (filteredHeaders.isEmpty()) {_            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), origin)) {_                return supplier.get()__            }_        } else {_            try (ThreadContext.StoredContext ignore = client.threadPool().getThreadContext().stashContext()) {_                client.threadPool().getThreadContext().copyHeaders(filteredHeaders.entrySet())__                return supplier.get()__            }_        }_    };execute,a,client,operation,and,return,the,response,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,client,the,client,used,to,query,param,supplier,the,action,to,run,return,an,instance,of,the,response,class;public,static,t,extends,action,response,t,execute,with,headers,map,string,string,headers,string,origin,client,client,supplier,t,supplier,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,if,filtered,headers,is,empty,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,origin,return,supplier,get,else,try,thread,context,stored,context,ignore,client,thread,pool,get,thread,context,stash,context,client,thread,pool,get,thread,context,copy,headers,filtered,headers,entry,set,return,supplier,get
ClientHelper -> public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,             Supplier<T> supplier);1529600205;Execute a client operation and return the response, try to run an action_with least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param client_The client used to query_@param supplier_The action to run_@return An instance of the response class;public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,_            Supplier<T> supplier) {_        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        _        _        if (filteredHeaders.isEmpty()) {_            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), origin)) {_                return supplier.get()__            }_        } else {_            try (ThreadContext.StoredContext ignore = client.threadPool().getThreadContext().stashContext()) {_                client.threadPool().getThreadContext().copyHeaders(filteredHeaders.entrySet())__                return supplier.get()__            }_        }_    };execute,a,client,operation,and,return,the,response,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,client,the,client,used,to,query,param,supplier,the,action,to,run,return,an,instance,of,the,response,class;public,static,t,extends,action,response,t,execute,with,headers,map,string,string,headers,string,origin,client,client,supplier,t,supplier,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,if,filtered,headers,is,empty,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,origin,return,supplier,get,else,try,thread,context,stored,context,ignore,client,thread,pool,get,thread,context,stash,context,client,thread,pool,get,thread,context,copy,headers,filtered,headers,entry,set,return,supplier,get
ClientHelper -> public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,             Supplier<T> supplier);1543415307;Execute a client operation and return the response, try to run an action_with least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param client_The client used to query_@param supplier_The action to run_@return An instance of the response class;public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,_            Supplier<T> supplier) {_        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        _        _        if (filteredHeaders.isEmpty()) {_            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), origin)) {_                return supplier.get()__            }_        } else {_            try (ThreadContext.StoredContext ignore = client.threadPool().getThreadContext().stashContext()) {_                client.threadPool().getThreadContext().copyHeaders(filteredHeaders.entrySet())__                return supplier.get()__            }_        }_    };execute,a,client,operation,and,return,the,response,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,client,the,client,used,to,query,param,supplier,the,action,to,run,return,an,instance,of,the,response,class;public,static,t,extends,action,response,t,execute,with,headers,map,string,string,headers,string,origin,client,client,supplier,t,supplier,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,if,filtered,headers,is,empty,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,origin,return,supplier,get,else,try,thread,context,stored,context,ignore,client,thread,pool,get,thread,context,stash,context,client,thread,pool,get,thread,context,copy,headers,filtered,headers,entry,set,return,supplier,get
ClientHelper -> public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,             Supplier<T> supplier);1550477798;Execute a client operation and return the response, try to run an action_with least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param client_The client used to query_@param supplier_The action to run_@return An instance of the response class;public static <T extends ActionResponse> T executeWithHeaders(Map<String, String> headers, String origin, Client client,_            Supplier<T> supplier) {_        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        _        _        if (filteredHeaders.isEmpty()) {_            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), origin)) {_                return supplier.get()__            }_        } else {_            try (ThreadContext.StoredContext ignore = client.threadPool().getThreadContext().stashContext()) {_                client.threadPool().getThreadContext().copyHeaders(filteredHeaders.entrySet())__                return supplier.get()__            }_        }_    };execute,a,client,operation,and,return,the,response,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,client,the,client,used,to,query,param,supplier,the,action,to,run,return,an,instance,of,the,response,class;public,static,t,extends,action,response,t,execute,with,headers,map,string,string,headers,string,origin,client,client,supplier,t,supplier,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,if,filtered,headers,is,empty,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,origin,return,supplier,get,else,try,thread,context,stored,context,ignore,client,thread,pool,get,thread,context,stash,context,client,thread,pool,get,thread,context,copy,headers,filtered,headers,entry,set,return,supplier,get
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse,              RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void executeWithHeadersAsync(             Map<String, String> headers, String origin, Client client, Action<Request, Response, RequestBuilder> action, Request request,             ActionListener<Response> listener);1526467406;Execute a client operation asynchronously, try to run an action with_least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param action_The action to execute_@param request_The request object for the action_@param listener_The listener to call when the action is complete;public static <Request extends ActionRequest, Response extends ActionResponse, _            RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void executeWithHeadersAsync(_            Map<String, String> headers, String origin, Client client, Action<Request, Response, RequestBuilder> action, Request request,_            ActionListener<Response> listener) {__        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        final ThreadContext threadContext = client.threadPool().getThreadContext()___        _        if (filteredHeaders.isEmpty()) {_            ClientHelper.executeAsyncWithOrigin(client, origin, action, request, listener)__        } else {_            _            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__            try (ThreadContext.StoredContext ignore = stashWithHeaders(threadContext, filteredHeaders)) {_                client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__            }_        }_    };execute,a,client,operation,asynchronously,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,action,the,action,to,execute,param,request,the,request,object,for,the,action,param,listener,the,listener,to,call,when,the,action,is,complete;public,static,request,extends,action,request,response,extends,action,response,request,builder,extends,action,request,builder,request,response,request,builder,void,execute,with,headers,async,map,string,string,headers,string,origin,client,client,action,request,response,request,builder,action,request,request,action,listener,response,listener,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,thread,context,thread,context,client,thread,pool,get,thread,context,if,filtered,headers,is,empty,client,helper,execute,async,with,origin,client,origin,action,request,listener,else,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,headers,thread,context,filtered,headers,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> public static <Request extends ActionRequest, Response extends ActionResponse,              RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void executeWithHeadersAsync(             Map<String, String> headers, String origin, Client client, Action<Request, Response, RequestBuilder> action, Request request,             ActionListener<Response> listener);1526917515;Execute a client operation asynchronously, try to run an action with_least privileges, when headers exist__@param headers_Request headers, ideally including security headers_@param origin_The origin to fall back to if there are no security headers_@param action_The action to execute_@param request_The request object for the action_@param listener_The listener to call when the action is complete;public static <Request extends ActionRequest, Response extends ActionResponse, _            RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void executeWithHeadersAsync(_            Map<String, String> headers, String origin, Client client, Action<Request, Response, RequestBuilder> action, Request request,_            ActionListener<Response> listener) {__        Map<String, String> filteredHeaders = headers.entrySet().stream().filter(e -> SECURITY_HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        final ThreadContext threadContext = client.threadPool().getThreadContext()___        _        if (filteredHeaders.isEmpty()) {_            ClientHelper.executeAsyncWithOrigin(client, origin, action, request, listener)__        } else {_            _            final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__            try (ThreadContext.StoredContext ignore = stashWithHeaders(threadContext, filteredHeaders)) {_                client.execute(action, request, new ContextPreservingActionListener<>(supplier, listener))__            }_        }_    };execute,a,client,operation,asynchronously,try,to,run,an,action,with,least,privileges,when,headers,exist,param,headers,request,headers,ideally,including,security,headers,param,origin,the,origin,to,fall,back,to,if,there,are,no,security,headers,param,action,the,action,to,execute,param,request,the,request,object,for,the,action,param,listener,the,listener,to,call,when,the,action,is,complete;public,static,request,extends,action,request,response,extends,action,response,request,builder,extends,action,request,builder,request,response,request,builder,void,execute,with,headers,async,map,string,string,headers,string,origin,client,client,action,request,response,request,builder,action,request,request,action,listener,response,listener,map,string,string,filtered,headers,headers,entry,set,stream,filter,e,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,final,thread,context,thread,context,client,thread,pool,get,thread,context,if,filtered,headers,is,empty,client,helper,execute,async,with,origin,client,origin,action,request,listener,else,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,headers,thread,context,filtered,headers,client,execute,action,request,new,context,preserving,action,listener,supplier,listener
ClientHelper -> @Deprecated     public static Client clientWithOrigin(Client client, String origin);1543415307;Returns a client that will always set the appropriate origin and ensure the proper context is restored by listeners_@deprecated use {@link OriginSettingClient} instead;@Deprecated_    public static Client clientWithOrigin(Client client, String origin) {_        return new OriginSettingClient(client, origin)__    };returns,a,client,that,will,always,set,the,appropriate,origin,and,ensure,the,proper,context,is,restored,by,listeners,deprecated,use,link,origin,setting,client,instead;deprecated,public,static,client,client,with,origin,client,client,string,origin,return,new,origin,setting,client,client,origin
ClientHelper -> @Deprecated     public static Client clientWithOrigin(Client client, String origin);1550477798;Returns a client that will always set the appropriate origin and ensure the proper context is restored by listeners_@deprecated use {@link OriginSettingClient} instead;@Deprecated_    public static Client clientWithOrigin(Client client, String origin) {_        return new OriginSettingClient(client, origin)__    };returns,a,client,that,will,always,set,the,appropriate,origin,and,ensure,the,proper,context,is,restored,by,listeners,deprecated,use,link,origin,setting,client,instead;deprecated,public,static,client,client,with,origin,client,client,string,origin,return,new,origin,setting,client,client,origin
