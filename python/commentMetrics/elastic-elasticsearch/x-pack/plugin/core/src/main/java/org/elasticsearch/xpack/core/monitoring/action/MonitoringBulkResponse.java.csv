commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public TimeValue getTook() {     return new TimeValue(tookInMillis). }
false;public;0;3;;public long getTookInMillis() {     return tookInMillis. }
true;public;0;3;/**  * Determine if the request was ignored.  *  * @return {@code true} if the request was ignored because collection was disabled.  */ ;/**  * Determine if the request was ignored.  *  * @return {@code true} if the request was ignored because collection was disabled.  */ public boolean isIgnored() {     return ignored. }
true;public;0;7;/**  * Returns HTTP status  *  * <ul>  * <li>{@link RestStatus#OK} if monitoring bulk request was successful (or ignored because collection is disabled)</li>  * <li>{@link RestStatus#INTERNAL_SERVER_ERROR} if monitoring bulk request was partially successful or failed completely</li>  * </ul>  */ ;/**  * Returns HTTP status  *  * <ul>  * <li>{@link RestStatus#OK} if monitoring bulk request was successful (or ignored because collection is disabled)</li>  * <li>{@link RestStatus#INTERNAL_SERVER_ERROR} if monitoring bulk request was partially successful or failed completely</li>  * </ul>  */ public RestStatus status() {     if (error == null) {         return RestStatus.OK.     }     return RestStatus.INTERNAL_SERVER_ERROR. }
false;public;0;3;;public Error getError() {     return error. }
false;public;1;10;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     tookInMillis = in.readVLong().     error = in.readOptionalWriteable(Error::new).     if (in.getVersion().onOrAfter(Version.V_6_3_0)) {         ignored = in.readBoolean().     } }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVLong(tookInMillis).     out.writeOptionalWriteable(error).     if (out.getVersion().onOrAfter(Version.V_6_3_0)) {         out.writeBoolean(ignored).     } }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeException(getCause()). }
true;public;0;3;/**  * The failure message.  */ ;/**  * The failure message.  */ public String getMessage() {     return this.cause.toString(). }
true;public;0;3;/**  * The rest status.  */ ;/**  * The rest status.  */ public RestStatus getStatus() {     return this.status. }
true;public;0;3;/**  * The actual cause of the failure.  */ ;/**  * The actual cause of the failure.  */ public Throwable getCause() {     return cause. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     ElasticsearchException.generateThrowableXContent(builder, params, cause).     builder.endObject().     return builder. }
false;public;0;8;;@Override public String toString() {     final StringBuilder sb = new StringBuilder("Error [").     sb.append("cause=").append(cause).     sb.append(", status=").append(status).     sb.append(']').     return sb.toString(). }
