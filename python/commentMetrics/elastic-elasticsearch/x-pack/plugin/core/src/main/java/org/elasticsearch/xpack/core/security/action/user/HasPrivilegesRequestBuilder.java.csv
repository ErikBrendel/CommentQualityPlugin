commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the username of the user that should enabled or disabled. Must not be {@code null}  */ ;/**  * Set the username of the user that should enabled or disabled. Must not be {@code null}  */ public HasPrivilegesRequestBuilder username(String username) {     request.username(username).     return this. }
true;public;3;8;/**  * Set whether the user should be enabled or not  */ ;/**  * Set whether the user should be enabled or not  */ public HasPrivilegesRequestBuilder source(String username, BytesReference source, XContentType xContentType) throws IOException {     final RoleDescriptor role = RoleDescriptor.parsePrivilegesCheck(username + "/has_privileges", source, xContentType).     request.username(username).     request.indexPrivileges(role.getIndicesPrivileges()).     request.clusterPrivileges(role.getClusterPrivileges()).     request.applicationPrivileges(role.getApplicationPrivileges()).     return this. }
