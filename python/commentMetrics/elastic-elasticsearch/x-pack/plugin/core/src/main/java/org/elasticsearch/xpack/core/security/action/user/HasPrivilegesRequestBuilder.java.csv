# id;timestamp;commentText;codeText;commentWords;codeWords
HasPrivilegesRequestBuilder -> public HasPrivilegesRequestBuilder username(String username);1524684173;Set the username of the user that should enabled or disabled. Must not be {@code null};public HasPrivilegesRequestBuilder username(String username) {_        request.username(username)__        return this__    };set,the,username,of,the,user,that,should,enabled,or,disabled,must,not,be,code,null;public,has,privileges,request,builder,username,string,username,request,username,username,return,this
HasPrivilegesRequestBuilder -> public HasPrivilegesRequestBuilder username(String username);1527840262;Set the username of the user that should enabled or disabled. Must not be {@code null};public HasPrivilegesRequestBuilder username(String username) {_        request.username(username)__        return this__    };set,the,username,of,the,user,that,should,enabled,or,disabled,must,not,be,code,null;public,has,privileges,request,builder,username,string,username,request,username,username,return,this
HasPrivilegesRequestBuilder -> public HasPrivilegesRequestBuilder username(String username);1532456624;Set the username of the user that should enabled or disabled. Must not be {@code null};public HasPrivilegesRequestBuilder username(String username) {_        request.username(username)__        return this__    };set,the,username,of,the,user,that,should,enabled,or,disabled,must,not,be,code,null;public,has,privileges,request,builder,username,string,username,request,username,username,return,this
HasPrivilegesRequestBuilder -> public HasPrivilegesRequestBuilder source(String username, BytesReference source, XContentType xContentType) throws IOException;1524684173;Set whether the user should be enabled or not;public HasPrivilegesRequestBuilder source(String username, BytesReference source, XContentType xContentType) throws IOException {_        final RoleDescriptor role = RoleDescriptor.parsePrivilegesCheck(username + "/has_privileges", source, xContentType)__        request.username(username)__        request.indexPrivileges(role.getIndicesPrivileges())__        request.clusterPrivileges(role.getClusterPrivileges())__        return this__    };set,whether,the,user,should,be,enabled,or,not;public,has,privileges,request,builder,source,string,username,bytes,reference,source,xcontent,type,x,content,type,throws,ioexception,final,role,descriptor,role,role,descriptor,parse,privileges,check,username,source,x,content,type,request,username,username,request,index,privileges,role,get,indices,privileges,request,cluster,privileges,role,get,cluster,privileges,return,this
HasPrivilegesRequestBuilder -> public HasPrivilegesRequestBuilder source(String username, BytesReference source, XContentType xContentType) throws IOException;1527840262;Set whether the user should be enabled or not;public HasPrivilegesRequestBuilder source(String username, BytesReference source, XContentType xContentType) throws IOException {_        final RoleDescriptor role = RoleDescriptor.parsePrivilegesCheck(username + "/has_privileges", source, xContentType)__        request.username(username)__        request.indexPrivileges(role.getIndicesPrivileges())__        request.clusterPrivileges(role.getClusterPrivileges())__        return this__    };set,whether,the,user,should,be,enabled,or,not;public,has,privileges,request,builder,source,string,username,bytes,reference,source,xcontent,type,x,content,type,throws,ioexception,final,role,descriptor,role,role,descriptor,parse,privileges,check,username,source,x,content,type,request,username,username,request,index,privileges,role,get,indices,privileges,request,cluster,privileges,role,get,cluster,privileges,return,this
HasPrivilegesRequestBuilder -> public HasPrivilegesRequestBuilder source(String username, BytesReference source, XContentType xContentType) throws IOException;1532456624;Set whether the user should be enabled or not;public HasPrivilegesRequestBuilder source(String username, BytesReference source, XContentType xContentType) throws IOException {_        final RoleDescriptor role = RoleDescriptor.parsePrivilegesCheck(username + "/has_privileges", source, xContentType)__        request.username(username)__        request.indexPrivileges(role.getIndicesPrivileges())__        request.clusterPrivileges(role.getClusterPrivileges())__        request.applicationPrivileges(role.getApplicationPrivileges())__        return this__    };set,whether,the,user,should,be,enabled,or,not;public,has,privileges,request,builder,source,string,username,bytes,reference,source,xcontent,type,x,content,type,throws,ioexception,final,role,descriptor,role,role,descriptor,parse,privileges,check,username,source,x,content,type,request,username,username,request,index,privileges,role,get,indices,privileges,request,cluster,privileges,role,get,cluster,privileges,request,application,privileges,role,get,application,privileges,return,this
