# id;timestamp;commentText;codeText;commentWords;codeWords
JobTaskState -> public boolean isStatusStale(PersistentTask<?> task);1547030567;The job state stores the allocation ID at the time it was last set._This method compares the allocation ID in the state with the allocation_ID in the task.  If the two are different then the task has been relocated_to a different node after the last time the state was set.  This in turn_means that the state is not necessarily correct.  For example, a job that_has a state of OPENED but is stale must be considered to be OPENING, because_it won't yet have a corresponding autodetect process._@param task The job task to check._@return Has the task been relocated to another node and not had its status set since then?;public boolean isStatusStale(PersistentTask<?> task) {_        return allocationId != task.getAllocationId()__    };the,job,state,stores,the,allocation,id,at,the,time,it,was,last,set,this,method,compares,the,allocation,id,in,the,state,with,the,allocation,id,in,the,task,if,the,two,are,different,then,the,task,has,been,relocated,to,a,different,node,after,the,last,time,the,state,was,set,this,in,turn,means,that,the,state,is,not,necessarily,correct,for,example,a,job,that,has,a,state,of,opened,but,is,stale,must,be,considered,to,be,opening,because,it,won,t,yet,have,a,corresponding,autodetect,process,param,task,the,job,task,to,check,return,has,the,task,been,relocated,to,another,node,and,not,had,its,status,set,since,then;public,boolean,is,status,stale,persistent,task,task,return,allocation,id,task,get,allocation,id
JobTaskState -> public boolean isStatusStale(PersistentTask<?> task);1548787894;The job state stores the allocation ID at the time it was last set._This method compares the allocation ID in the state with the allocation_ID in the task.  If the two are different then the task has been relocated_to a different node after the last time the state was set.  This in turn_means that the state is not necessarily correct.  For example, a job that_has a state of OPENED but is stale must be considered to be OPENING, because_it won't yet have a corresponding autodetect process._@param task The job task to check._@return Has the task been relocated to another node and not had its status set since then?;public boolean isStatusStale(PersistentTask<?> task) {_        return allocationId != task.getAllocationId()__    };the,job,state,stores,the,allocation,id,at,the,time,it,was,last,set,this,method,compares,the,allocation,id,in,the,state,with,the,allocation,id,in,the,task,if,the,two,are,different,then,the,task,has,been,relocated,to,a,different,node,after,the,last,time,the,state,was,set,this,in,turn,means,that,the,state,is,not,necessarily,correct,for,example,a,job,that,has,a,state,of,opened,but,is,stale,must,be,considered,to,be,opening,because,it,won,t,yet,have,a,corresponding,autodetect,process,param,task,the,job,task,to,check,return,has,the,task,been,relocated,to,another,node,and,not,had,its,status,set,since,then;public,boolean,is,status,stale,persistent,task,task,return,allocation,id,task,get,allocation,id
JobTaskState -> public boolean isStatusStale(PersistentTask<?> task);1548870984;The job state stores the allocation ID at the time it was last set._This method compares the allocation ID in the state with the allocation_ID in the task.  If the two are different then the task has been relocated_to a different node after the last time the state was set.  This in turn_means that the state is not necessarily correct.  For example, a job that_has a state of OPENED but is stale must be considered to be OPENING, because_it won't yet have a corresponding autodetect process._@param task The job task to check._@return Has the task been relocated to another node and not had its status set since then?;public boolean isStatusStale(PersistentTask<?> task) {_        return allocationId != task.getAllocationId()__    };the,job,state,stores,the,allocation,id,at,the,time,it,was,last,set,this,method,compares,the,allocation,id,in,the,state,with,the,allocation,id,in,the,task,if,the,two,are,different,then,the,task,has,been,relocated,to,a,different,node,after,the,last,time,the,state,was,set,this,in,turn,means,that,the,state,is,not,necessarily,correct,for,example,a,job,that,has,a,state,of,opened,but,is,stale,must,be,considered,to,be,opening,because,it,won,t,yet,have,a,corresponding,autodetect,process,param,task,the,job,task,to,check,return,has,the,task,been,relocated,to,another,node,and,not,had,its,status,set,since,then;public,boolean,is,status,stale,persistent,task,task,return,allocation,id,task,get,allocation,id
