commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;5;/**  * Retrieves the execution state from an {@link IndexMetaData} based on the  * custom metadata.  * @param indexMetaData The metadata of the index to retrieve the execution  *                      state from.  * @return The execution state of that index.  */ ;/**  * Retrieves the execution state from an {@link IndexMetaData} based on the  * custom metadata.  * @param indexMetaData The metadata of the index to retrieve the execution  *                      state from.  * @return The execution state of that index.  */ public static LifecycleExecutionState fromIndexMetadata(IndexMetaData indexMetaData) {     Map<String, String> customData = indexMetaData.getCustomData(ILM_CUSTOM_METADATA_KEY).     customData = customData == null ? new HashMap<>() : customData.     return fromCustomMetadata(customData). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public,static;1;13;;public static Builder builder(LifecycleExecutionState state) {     return new Builder().setPhase(state.phase).setAction(state.action).setStep(state.step).setFailedStep(state.failedStep).setStepInfo(state.stepInfo).setPhaseDefinition(state.phaseDefinition).setIndexCreationDate(state.lifecycleDate).setPhaseTime(state.phaseTime).setActionTime(state.actionTime).setStepTime(state.stepTime). }
false;static;1;54;;static LifecycleExecutionState fromCustomMetadata(Map<String, String> customData) {     Builder builder = builder().     if (customData.containsKey(PHASE)) {         builder.setPhase(customData.get(PHASE)).     }     if (customData.containsKey(ACTION)) {         builder.setAction(customData.get(ACTION)).     }     if (customData.containsKey(STEP)) {         builder.setStep(customData.get(STEP)).     }     if (customData.containsKey(FAILED_STEP)) {         builder.setFailedStep(customData.get(FAILED_STEP)).     }     if (customData.containsKey(STEP_INFO)) {         builder.setStepInfo(customData.get(STEP_INFO)).     }     if (customData.containsKey(PHASE_DEFINITION)) {         builder.setPhaseDefinition(customData.get(PHASE_DEFINITION)).     }     if (customData.containsKey(INDEX_CREATION_DATE)) {         try {             builder.setIndexCreationDate(Long.parseLong(customData.get(INDEX_CREATION_DATE))).         } catch (NumberFormatException e) {             throw new ElasticsearchException("Custom metadata field [{}] does not contain a valid long. Actual value: [{}]", e, INDEX_CREATION_DATE, customData.get(INDEX_CREATION_DATE)).         }     }     if (customData.containsKey(PHASE_TIME)) {         try {             builder.setPhaseTime(Long.parseLong(customData.get(PHASE_TIME))).         } catch (NumberFormatException e) {             throw new ElasticsearchException("Custom metadata field [{}] does not contain a valid long. Actual value: [{}]", e, PHASE_TIME, customData.get(PHASE_TIME)).         }     }     if (customData.containsKey(ACTION_TIME)) {         try {             builder.setActionTime(Long.parseLong(customData.get(ACTION_TIME))).         } catch (NumberFormatException e) {             throw new ElasticsearchException("Custom metadata field [{}] does not contain a valid long. Actual value: [{}]", e, ACTION_TIME, customData.get(ACTION_TIME)).         }     }     if (customData.containsKey(STEP_TIME)) {         try {             builder.setStepTime(Long.parseLong(customData.get(STEP_TIME))).         } catch (NumberFormatException e) {             throw new ElasticsearchException("Custom metadata field [{}] does not contain a valid long. Actual value: [{}]", e, STEP_TIME, customData.get(STEP_TIME)).         }     }     return builder.build(). }
true;public;0;34;/**  * Converts this object to an immutable map representation for use with  * {@link IndexMetaData.Builder#putCustom(String, Map)}.  * @return An immutable Map representation of this execution state.  */ ;/**  * Converts this object to an immutable map representation for use with  * {@link IndexMetaData.Builder#putCustom(String, Map)}.  * @return An immutable Map representation of this execution state.  */ public Map<String, String> asMap() {     Map<String, String> result = new HashMap<>().     if (phase != null) {         result.put(PHASE, phase).     }     if (action != null) {         result.put(ACTION, action).     }     if (step != null) {         result.put(STEP, step).     }     if (failedStep != null) {         result.put(FAILED_STEP, failedStep).     }     if (stepInfo != null) {         result.put(STEP_INFO, stepInfo).     }     if (lifecycleDate != null) {         result.put(INDEX_CREATION_DATE, String.valueOf(lifecycleDate)).     }     if (phaseTime != null) {         result.put(PHASE_TIME, String.valueOf(phaseTime)).     }     if (actionTime != null) {         result.put(ACTION_TIME, String.valueOf(actionTime)).     }     if (stepTime != null) {         result.put(STEP_TIME, String.valueOf(stepTime)).     }     if (phaseDefinition != null) {         result.put(PHASE_DEFINITION, String.valueOf(phaseDefinition)).     }     return Collections.unmodifiableMap(result). }
false;public;0;3;;public String getPhase() {     return phase. }
false;public;0;3;;public String getAction() {     return action. }
false;public;0;3;;public String getStep() {     return step. }
false;public;0;3;;public String getFailedStep() {     return failedStep. }
false;public;0;3;;public String getStepInfo() {     return stepInfo. }
false;public;0;3;;public String getPhaseDefinition() {     return phaseDefinition. }
false;public;0;3;;public Long getLifecycleDate() {     return lifecycleDate. }
false;public;0;3;;public Long getPhaseTime() {     return phaseTime. }
false;public;0;3;;public Long getActionTime() {     return actionTime. }
false;public;0;3;;public Long getStepTime() {     return stepTime. }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     LifecycleExecutionState that = (LifecycleExecutionState) o.     return Objects.equals(getLifecycleDate(), that.getLifecycleDate()) && Objects.equals(getPhaseTime(), that.getPhaseTime()) && Objects.equals(getActionTime(), that.getActionTime()) && Objects.equals(getStepTime(), that.getStepTime()) && Objects.equals(getPhase(), that.getPhase()) && Objects.equals(getAction(), that.getAction()) && Objects.equals(getStep(), that.getStep()) && Objects.equals(getFailedStep(), that.getFailedStep()) && Objects.equals(getStepInfo(), that.getStepInfo()) && Objects.equals(getPhaseDefinition(), that.getPhaseDefinition()). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(getPhase(), getAction(), getStep(), getFailedStep(), getStepInfo(), getPhaseDefinition(), getLifecycleDate(), getPhaseTime(), getActionTime(), getStepTime()). }
false;public;1;4;;public Builder setPhase(String phase) {     this.phase = phase.     return this. }
false;public;1;4;;public Builder setAction(String action) {     this.action = action.     return this. }
false;public;1;4;;public Builder setStep(String step) {     this.step = step.     return this. }
false;public;1;4;;public Builder setFailedStep(String failedStep) {     this.failedStep = failedStep.     return this. }
false;public;1;4;;public Builder setStepInfo(String stepInfo) {     this.stepInfo = stepInfo.     return this. }
false;public;1;4;;public Builder setPhaseDefinition(String phaseDefinition) {     this.phaseDefinition = phaseDefinition.     return this. }
false;public;1;4;;public Builder setIndexCreationDate(Long indexCreationDate) {     this.indexCreationDate = indexCreationDate.     return this. }
false;public;1;4;;public Builder setPhaseTime(Long phaseTime) {     this.phaseTime = phaseTime.     return this. }
false;public;1;4;;public Builder setActionTime(Long actionTime) {     this.actionTime = actionTime.     return this. }
false;public;1;4;;public Builder setStepTime(Long stepTime) {     this.stepTime = stepTime.     return this. }
false;public;0;4;;public LifecycleExecutionState build() {     return new LifecycleExecutionState(phase, action, step, failedStep, stepInfo, phaseDefinition, indexCreationDate, phaseTime, actionTime, stepTime). }
