commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public Writeable.Reader<Response> getResponseReader() {     return Response::new. }
false;public,static;2;7;;public static Request parseRequest(String jobId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (jobId != null) {         request.setJobId(jobId).     }     return request. }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(jobId).     out.writeTimeValue(timeout).     out.writeBoolean(force).     out.writeStringArray(openJobIds).     out.writeBoolean(local).     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         out.writeBoolean(allowNoJobs).     } }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;1;3;;public void setJobId(String jobId) {     this.jobId = jobId. }
false;public;0;3;;public TimeValue getCloseTimeout() {     return timeout. }
false;public;1;3;;public void setCloseTimeout(TimeValue timeout) {     this.timeout = timeout. }
false;public;0;3;;public boolean isForce() {     return force. }
false;public;1;3;;public void setForce(boolean force) {     this.force = force. }
false;public;0;3;;public boolean allowNoJobs() {     return allowNoJobs. }
false;public;1;3;;public void setAllowNoJobs(boolean allowNoJobs) {     this.allowNoJobs = allowNoJobs. }
false;public;0;1;;public boolean isLocal() {     return local. }
false;public;1;3;;public void setLocal(boolean local) {     this.local = local. }
false;public;0;1;;public String[] getOpenJobIds() {     return openJobIds. }
false;public;1;3;;public void setOpenJobIds(String[] openJobIds) {     this.openJobIds = openJobIds. }
false;public;1;9;;@Override public boolean match(Task task) {     for (String id : openJobIds) {         if (OpenJobAction.JobTaskMatcher.match(task, id)) {             return true.         }     }     return false. }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     // openJobIds are excluded     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(TIMEOUT.getPreferredName(), timeout.getStringRep()).     builder.field(FORCE.getPreferredName(), force).     builder.field(ALLOW_NO_JOBS.getPreferredName(), allowNoJobs).     builder.endObject().     return builder. }
false;public;0;5;;@Override public int hashCode() {     // openJobIds are excluded     return Objects.hash(jobId, timeout, force, allowNoJobs). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || obj.getClass() != getClass()) {         return false.     }     Request other = (Request) obj.     // openJobIds are excluded     return Objects.equals(jobId, other.jobId) && Objects.equals(timeout, other.timeout) && Objects.equals(force, other.force) && Objects.equals(allowNoJobs, other.allowNoJobs). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(closed). }
false;public;0;3;;public boolean isClosed() {     return closed. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("closed", closed).     builder.endObject().     return builder. }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Response response = (Response) o.     return closed == response.closed. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(closed). }
