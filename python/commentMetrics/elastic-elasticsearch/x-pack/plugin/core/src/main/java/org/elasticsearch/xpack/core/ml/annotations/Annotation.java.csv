commented;modifiers;parameterAmount;loc;comment;code
false;public;1;23;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(annotation).     out.writeLong(createTime.getTime()).     out.writeString(createUsername).     out.writeLong(timestamp.getTime()).     if (endTimestamp != null) {         out.writeBoolean(true).         out.writeLong(endTimestamp.getTime()).     } else {         out.writeBoolean(false).     }     out.writeOptionalString(jobId).     if (modifiedTime != null) {         out.writeBoolean(true).         out.writeLong(modifiedTime.getTime()).     } else {         out.writeBoolean(false).     }     out.writeOptionalString(modifiedUsername).     out.writeString(type). }
false;public;0;3;;public String getAnnotation() {     return annotation. }
false;public;1;3;;public void setAnnotation(String annotation) {     this.annotation = Objects.requireNonNull(annotation). }
false;public;0;3;;public Date getCreateTime() {     return createTime. }
false;public;1;3;;public void setCreateTime(Date createTime) {     this.createTime = Objects.requireNonNull(createTime). }
false;public;0;3;;public String getCreateUsername() {     return createUsername. }
false;public;1;3;;public void setCreateUsername(String createUsername) {     this.createUsername = Objects.requireNonNull(createUsername). }
false;public;0;3;;public Date getTimestamp() {     return timestamp. }
false;public;1;3;;public void setTimestamp(Date timestamp) {     this.timestamp = Objects.requireNonNull(timestamp). }
false;public;0;3;;public Date getEndTimestamp() {     return endTimestamp. }
false;public;1;3;;public void setEndTimestamp(Date endTimestamp) {     this.endTimestamp = endTimestamp. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;1;3;;public void setJobId(String jobId) {     this.jobId = jobId. }
false;public;0;3;;public Date getModifiedTime() {     return modifiedTime. }
false;public;1;3;;public void setModifiedTime(Date modifiedTime) {     this.modifiedTime = modifiedTime. }
false;public;0;3;;public String getModifiedUsername() {     return modifiedUsername. }
false;public;1;3;;public void setModifiedUsername(String modifiedUsername) {     this.modifiedUsername = modifiedUsername. }
false;public;0;3;;public String getType() {     return type. }
false;public;1;3;;public void setType(String type) {     this.type = Objects.requireNonNull(type). }
false;public;2;23;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(ANNOTATION.getPreferredName(), annotation).     builder.timeField(CREATE_TIME.getPreferredName(), CREATE_TIME.getPreferredName() + "_string", createTime.getTime()).     builder.field(CREATE_USERNAME.getPreferredName(), createUsername).     builder.timeField(TIMESTAMP.getPreferredName(), TIMESTAMP.getPreferredName() + "_string", timestamp.getTime()).     if (endTimestamp != null) {         builder.timeField(END_TIMESTAMP.getPreferredName(), END_TIMESTAMP.getPreferredName() + "_string", endTimestamp.getTime()).     }     if (jobId != null) {         builder.field(Job.ID.getPreferredName(), jobId).     }     if (modifiedTime != null) {         builder.timeField(MODIFIED_TIME.getPreferredName(), MODIFIED_TIME.getPreferredName() + "_string", modifiedTime.getTime()).     }     if (modifiedUsername != null) {         builder.field(MODIFIED_USERNAME.getPreferredName(), modifiedUsername).     }     builder.field(TYPE.getPreferredName(), type).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(annotation, createTime, createUsername, timestamp, endTimestamp, jobId, modifiedTime, modifiedUsername, type). }
false;public;1;19;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     Annotation other = (Annotation) obj.     return Objects.equals(annotation, other.annotation) && Objects.equals(createTime, other.createTime) && Objects.equals(createUsername, other.createUsername) && Objects.equals(timestamp, other.timestamp) && Objects.equals(endTimestamp, other.endTimestamp) && Objects.equals(jobId, other.jobId) && Objects.equals(modifiedTime, other.modifiedTime) && Objects.equals(modifiedUsername, other.modifiedUsername) && Objects.equals(type, other.type). }
