commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Get the id of the datafeed to update  */ ;/**  * Get the id of the datafeed to update  */ public String getId() {     return id. }
false;public;1;40;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(id).     out.writeOptionalString(jobId).     out.writeOptionalTimeValue(queryDelay).     out.writeOptionalTimeValue(frequency).     if (indices != null) {         out.writeBoolean(true).         out.writeStringCollection(indices).     } else {         out.writeBoolean(false).     }     // An empty list is expected     if (out.getVersion().before(Version.V_7_0_0)) {         out.writeBoolean(true).         out.writeStringCollection(Collections.emptyList()).     }     if (out.getVersion().before(Version.V_7_1_0)) {         out.writeOptionalNamedWriteable(lazyQueryParser.apply(query, id, new ArrayList<>())).         out.writeOptionalWriteable(lazyAggParser.apply(aggregations, id, new ArrayList<>())).     } else {         out.writeMap(query).         out.writeBoolean(aggregations != null).         if (aggregations != null) {             out.writeMap(aggregations).         }     }     if (scriptFields != null) {         out.writeBoolean(true).         out.writeList(scriptFields).     } else {         out.writeBoolean(false).     }     out.writeOptionalVInt(scrollSize).     out.writeOptionalWriteable(chunkingConfig).     if (out.getVersion().onOrAfter(Version.V_6_6_0)) {         out.writeOptionalWriteable(delayedDataCheckConfig).     } }
false;public;2;27;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(DatafeedConfig.ID.getPreferredName(), id).     addOptionalField(builder, Job.ID, jobId).     if (queryDelay != null) {         builder.field(DatafeedConfig.QUERY_DELAY.getPreferredName(), queryDelay.getStringRep()).     }     if (frequency != null) {         builder.field(DatafeedConfig.FREQUENCY.getPreferredName(), frequency.getStringRep()).     }     addOptionalField(builder, DatafeedConfig.INDICES, indices).     addOptionalField(builder, DatafeedConfig.QUERY, query).     addOptionalField(builder, DatafeedConfig.AGGREGATIONS, aggregations).     if (scriptFields != null) {         builder.startObject(DatafeedConfig.SCRIPT_FIELDS.getPreferredName()).         for (SearchSourceBuilder.ScriptField scriptField : scriptFields) {             scriptField.toXContent(builder, params).         }         builder.endObject().     }     addOptionalField(builder, DatafeedConfig.SCROLL_SIZE, scrollSize).     addOptionalField(builder, DatafeedConfig.CHUNKING_CONFIG, chunkingConfig).     addOptionalField(builder, DatafeedConfig.DELAYED_DATA_CHECK_CONFIG, delayedDataCheckConfig).     builder.endObject().     return builder. }
false;private;3;5;;private void addOptionalField(XContentBuilder builder, ParseField field, Object value) throws IOException {     if (value != null) {         builder.field(field.getPreferredName(), value).     } }
false;public;0;3;;public String getJobId() {     return jobId. }
false;;0;3;;TimeValue getQueryDelay() {     return queryDelay. }
false;;0;3;;TimeValue getFrequency() {     return frequency. }
false;;0;3;;List<String> getIndices() {     return indices. }
false;;0;3;;Integer getScrollSize() {     return scrollSize. }
false;;0;3;;Map<String, Object> getQuery() {     return query. }
false;;0;3;;Map<String, Object> getAggregations() {     return aggregations. }
true;;0;3;/**  * @return {@code true} when there are non-empty aggregations, {@code false}  *         otherwise  */ ;/**  * @return {@code true} when there are non-empty aggregations, {@code false}  *         otherwise  */ boolean hasAggregations() {     return aggregations != null && aggregations.size() > 0. }
false;;0;3;;List<SearchSourceBuilder.ScriptField> getScriptFields() {     return scriptFields == null ? Collections.emptyList() : scriptFields. }
false;;0;3;;ChunkingConfig getChunkingConfig() {     return chunkingConfig. }
false;public;0;3;;public DelayedDataCheckConfig getDelayedDataCheckConfig() {     return delayedDataCheckConfig. }
true;public;2;48;/**  * Applies the update to the given {@link DatafeedConfig}  * @return a new {@link DatafeedConfig} that contains the update  */ ;/**  * Applies the update to the given {@link DatafeedConfig}  * @return a new {@link DatafeedConfig} that contains the update  */ public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {     if (id.equals(datafeedConfig.getId()) == false) {         throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id").     }     DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig).     if (jobId != null) {         builder.setJobId(jobId).     }     if (queryDelay != null) {         builder.setQueryDelay(queryDelay).     }     if (frequency != null) {         builder.setFrequency(frequency).     }     if (indices != null) {         builder.setIndices(indices).     }     if (query != null) {         builder.setQuery(query).     }     if (aggregations != null) {         DatafeedConfig.validateAggregations(lazyAggParser.apply(aggregations, id, new ArrayList<>())).         builder.setAggregations(aggregations).     }     if (scriptFields != null) {         builder.setScriptFields(scriptFields).     }     if (scrollSize != null) {         builder.setScrollSize(scrollSize).     }     if (chunkingConfig != null) {         builder.setChunkingConfig(chunkingConfig).     }     if (delayedDataCheckConfig != null) {         builder.setDelayedDataCheckConfig(delayedDataCheckConfig).     }     if (headers.isEmpty() == false) {         // Adjust the request, adding security headers from the current thread context         Map<String, String> securityHeaders = headers.entrySet().stream().filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)).         builder.setHeaders(securityHeaders).     }     return builder.build(). }
true;public;1;24;/**  * The lists of indices and types are compared for equality but they are not  * sorted first so this test could fail simply because the indices and types  * lists are in different orders.  */ ;/**  * The lists of indices and types are compared for equality but they are not  * sorted first so this test could fail simply because the indices and types  * lists are in different orders.  */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof DatafeedUpdate == false) {         return false.     }     DatafeedUpdate that = (DatafeedUpdate) other.     return Objects.equals(this.id, that.id) && Objects.equals(this.jobId, that.jobId) && Objects.equals(this.frequency, that.frequency) && Objects.equals(this.queryDelay, that.queryDelay) && Objects.equals(this.indices, that.indices) && Objects.equals(this.query, that.query) && Objects.equals(this.scrollSize, that.scrollSize) && Objects.equals(this.aggregations, that.aggregations) && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig) && Objects.equals(this.scriptFields, that.scriptFields) && Objects.equals(this.chunkingConfig, that.chunkingConfig). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(id, jobId, frequency, queryDelay, indices, query, scrollSize, aggregations, scriptFields, chunkingConfig, delayedDataCheckConfig). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;;1;11;;boolean isNoop(DatafeedConfig datafeed) {     return (frequency == null || Objects.equals(frequency, datafeed.getFrequency())) && (queryDelay == null || Objects.equals(queryDelay, datafeed.getQueryDelay())) && (indices == null || Objects.equals(indices, datafeed.getIndices())) && (query == null || Objects.equals(query, datafeed.getQuery())) && (scrollSize == null || Objects.equals(scrollSize, datafeed.getQueryDelay())) && (aggregations == null || Objects.equals(aggregations, datafeed.getAggregations())) && (scriptFields == null || Objects.equals(scriptFields, datafeed.getScriptFields())) && (delayedDataCheckConfig == null || Objects.equals(delayedDataCheckConfig, datafeed.getDelayedDataCheckConfig())) && (chunkingConfig == null || Objects.equals(chunkingConfig, datafeed.getChunkingConfig())). }
false;public;1;3;;public void setId(String datafeedId) {     id = ExceptionsHelper.requireNonNull(datafeedId, DatafeedConfig.ID.getPreferredName()). }
false;public;1;3;;public void setJobId(String jobId) {     this.jobId = jobId. }
false;public;1;3;;public void setIndices(List<String> indices) {     this.indices = indices. }
false;public;1;3;;public void setQueryDelay(TimeValue queryDelay) {     this.queryDelay = queryDelay. }
false;public;1;3;;public void setFrequency(TimeValue frequency) {     this.frequency = frequency. }
false;public;1;13;;public void setQuery(Map<String, Object> query) {     this.query = query.     try {         QUERY_TRANSFORMER.fromMap(query).     } catch (Exception ex) {         String msg = Messages.getMessage(Messages.DATAFEED_CONFIG_QUERY_BAD_FORMAT, id).         if (ex.getCause() instanceof IllegalArgumentException) {             ex = (Exception) ex.getCause().         }         throw ExceptionsHelper.badRequestException(msg, ex).     } }
false;private;1;6;;private void setAggregationsSafe(Map<String, Object> aggregations) {     if (this.aggregations != null) {         throw ExceptionsHelper.badRequestException("Found two aggregation definitions: [aggs] and [aggregations]").     }     setAggregations(aggregations). }
false;public;1;16;;public void setAggregations(Map<String, Object> aggregations) {     this.aggregations = aggregations.     try {         if (aggregations != null && aggregations.isEmpty()) {             throw new Exception("[aggregations] are empty").         }         AGG_TRANSFORMER.fromMap(aggregations).     } catch (Exception ex) {         String msg = Messages.getMessage(Messages.DATAFEED_CONFIG_AGG_BAD_FORMAT, id).         if (ex.getCause() instanceof IllegalArgumentException) {             ex = (Exception) ex.getCause().         }         throw ExceptionsHelper.badRequestException(msg, ex).     } }
false;public;1;5;;public void setScriptFields(List<SearchSourceBuilder.ScriptField> scriptFields) {     List<SearchSourceBuilder.ScriptField> sorted = new ArrayList<>(scriptFields).     sorted.sort(Comparator.comparing(SearchSourceBuilder.ScriptField::fieldName)).     this.scriptFields = sorted. }
false;public;1;3;;public void setDelayedDataCheckConfig(DelayedDataCheckConfig delayedDataCheckConfig) {     this.delayedDataCheckConfig = delayedDataCheckConfig. }
false;public;1;3;;public void setScrollSize(int scrollSize) {     this.scrollSize = scrollSize. }
false;public;1;3;;public void setChunkingConfig(ChunkingConfig chunkingConfig) {     this.chunkingConfig = chunkingConfig. }
false;public;0;4;;public DatafeedUpdate build() {     return new DatafeedUpdate(id, jobId, queryDelay, frequency, indices, query, aggregations, scriptFields, scrollSize, chunkingConfig, delayedDataCheckConfig). }
