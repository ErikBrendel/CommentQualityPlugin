# id;timestamp;commentText;codeText;commentWords;codeWords
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers);1529341607;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (types != null) {_            builder.setTypes(types)__        }_        if (query != null) {_            builder.setQuery(query)__        }_        if (aggregations != null) {_            builder.setAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }__        if (headers.isEmpty() == false) {_            _            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,map,string,string,headers,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,types,null,builder,set,types,types,if,query,null,builder,set,query,query,if,aggregations,null,builder,set,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,headers,is,empty,false,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,return,builder,build
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers);1531729807;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (types != null) {_            builder.setTypes(types)__        }_        if (query != null) {_            builder.setQuery(query)__        }_        if (aggregations != null) {_            builder.setAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }__        if (headers.isEmpty() == false) {_            _            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,map,string,string,headers,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,types,null,builder,set,types,types,if,query,null,builder,set,query,query,if,aggregations,null,builder,set,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,headers,is,empty,false,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,return,builder,build
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers);1532685069;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (types != null) {_            builder.setTypes(types)__        }_        if (query != null) {_            builder.setQuery(query)__        }_        if (aggregations != null) {_            builder.setAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }__        if (headers.isEmpty() == false) {_            _            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,map,string,string,headers,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,types,null,builder,set,types,types,if,query,null,builder,set,query,query,if,aggregations,null,builder,set,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,headers,is,empty,false,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,return,builder,build
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers);1535139672;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (types != null) {_            builder.setTypes(types)__        }_        if (query != null) {_            builder.setQuery(query)__        }_        if (aggregations != null) {_            builder.setAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }__        if (headers.isEmpty() == false) {_            _            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,map,string,string,headers,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,types,null,builder,set,types,types,if,query,null,builder,set,query,query,if,aggregations,null,builder,set,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,headers,is,empty,false,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,return,builder,build
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers);1542310365;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (types != null) {_            builder.setTypes(types)__        }_        if (query != null) {_            builder.setQuery(query)__        }_        if (aggregations != null) {_            builder.setAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }_        if (delayedDataCheckConfig != null) {_            builder.setDelayedDataCheckConfig(delayedDataCheckConfig)__        }__        if (headers.isEmpty() == false) {_            _            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,map,string,string,headers,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,types,null,builder,set,types,types,if,query,null,builder,set,query,query,if,aggregations,null,builder,set,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,delayed,data,check,config,null,builder,set,delayed,data,check,config,delayed,data,check,config,if,headers,is,empty,false,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,return,builder,build
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers);1542372612;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (types != null) {_            builder.setTypes(types)__        }_        if (query != null) {_            builder.setQuery(query)__        }_        if (aggregations != null) {_            builder.setAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }_        if (delayedDataCheckConfig != null) {_            builder.setDelayedDataCheckConfig(delayedDataCheckConfig)__        }__        if (headers.isEmpty() == false) {_            _            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,map,string,string,headers,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,types,null,builder,set,types,types,if,query,null,builder,set,query,query,if,aggregations,null,builder,set,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,delayed,data,check,config,null,builder,set,delayed,data,check,config,delayed,data,check,config,if,headers,is,empty,false,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,return,builder,build
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers);1543938107;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (types != null) {_            builder.setTypes(types)__        }_        if (query != null) {_            builder.setParsedQuery(query)__        }_        if (aggregations != null) {_            DatafeedConfig.validateAggregations(aggregations)__            builder.setParsedAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }_        if (delayedDataCheckConfig != null) {_            builder.setDelayedDataCheckConfig(delayedDataCheckConfig)__        }__        if (headers.isEmpty() == false) {_            _            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,map,string,string,headers,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,types,null,builder,set,types,types,if,query,null,builder,set,parsed,query,query,if,aggregations,null,datafeed,config,validate,aggregations,aggregations,builder,set,parsed,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,delayed,data,check,config,null,builder,set,delayed,data,check,config,delayed,data,check,config,if,headers,is,empty,false,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,return,builder,build
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers);1545155131;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (types != null) {_            builder.setTypes(types)__        }_        if (query != null) {_            builder.setParsedQuery(query)__        }_        if (aggregations != null) {_            DatafeedConfig.validateAggregations(aggregations)__            builder.setParsedAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }_        if (delayedDataCheckConfig != null) {_            builder.setDelayedDataCheckConfig(delayedDataCheckConfig)__        }__        if (headers.isEmpty() == false) {_            _            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,map,string,string,headers,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,types,null,builder,set,types,types,if,query,null,builder,set,parsed,query,query,if,aggregations,null,datafeed,config,validate,aggregations,aggregations,builder,set,parsed,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,delayed,data,check,config,null,builder,set,delayed,data,check,config,delayed,data,check,config,if,headers,is,empty,false,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,return,builder,build
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers);1546587824;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (query != null) {_            builder.setParsedQuery(query)__        }_        if (aggregations != null) {_            DatafeedConfig.validateAggregations(aggregations)__            builder.setParsedAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }_        if (delayedDataCheckConfig != null) {_            builder.setDelayedDataCheckConfig(delayedDataCheckConfig)__        }__        if (headers.isEmpty() == false) {_            _            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,map,string,string,headers,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,query,null,builder,set,parsed,query,query,if,aggregations,null,datafeed,config,validate,aggregations,aggregations,builder,set,parsed,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,delayed,data,check,config,null,builder,set,delayed,data,check,config,delayed,data,check,config,if,headers,is,empty,false,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,return,builder,build
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers);1548265937;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (query != null) {_            builder.setParsedQuery(query)__        }_        if (aggregations != null) {_            DatafeedConfig.validateAggregations(aggregations)__            builder.setParsedAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }_        if (delayedDataCheckConfig != null) {_            builder.setDelayedDataCheckConfig(delayedDataCheckConfig)__        }__        if (headers.isEmpty() == false) {_            _            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,map,string,string,headers,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,query,null,builder,set,parsed,query,query,if,aggregations,null,datafeed,config,validate,aggregations,aggregations,builder,set,parsed,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,delayed,data,check,config,null,builder,set,delayed,data,check,config,delayed,data,check,config,if,headers,is,empty,false,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,return,builder,build
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers);1550587606;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, Map<String, String> headers) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (query != null) {_            builder.setQuery(query)__        }_        if (aggregations != null) {_            DatafeedConfig.validateAggregations(lazyAggParser.apply(aggregations, id, new ArrayList<>()))__            builder.setAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }_        if (delayedDataCheckConfig != null) {_            builder.setDelayedDataCheckConfig(delayedDataCheckConfig)__        }__        if (headers.isEmpty() == false) {_            _            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,map,string,string,headers,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,query,null,builder,set,query,query,if,aggregations,null,datafeed,config,validate,aggregations,lazy,agg,parser,apply,aggregations,id,new,array,list,builder,set,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,delayed,data,check,config,null,builder,set,delayed,data,check,config,delayed,data,check,config,if,headers,is,empty,false,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,return,builder,build
DatafeedUpdate -> @Override     public boolean equals(Object other);1524684173;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1526467406;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1529341607;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1531729807;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1532685069;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1535139672;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1542310365;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1542372612;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1543938107;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1545155131;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.types, that.types)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,types,that,types,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1546587824;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1548265937;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> @Override     public boolean equals(Object other);1550587606;The lists of indices and types are compared for equality but they are not_sorted first so this test could fail simply because the indices and types_lists are in different orders.;@Override_    public boolean equals(Object other) {_        if (this == other) {_            return true__        }__        if (other instanceof DatafeedUpdate == false) {_            return false__        }__        DatafeedUpdate that = (DatafeedUpdate) other___        return Objects.equals(this.id, that.id)_                && Objects.equals(this.jobId, that.jobId)_                && Objects.equals(this.frequency, that.frequency)_                && Objects.equals(this.queryDelay, that.queryDelay)_                && Objects.equals(this.indices, that.indices)_                && Objects.equals(this.query, that.query)_                && Objects.equals(this.scrollSize, that.scrollSize)_                && Objects.equals(this.aggregations, that.aggregations)_                && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig)_                && Objects.equals(this.scriptFields, that.scriptFields)_                && Objects.equals(this.chunkingConfig, that.chunkingConfig)__    };the,lists,of,indices,and,types,are,compared,for,equality,but,they,are,not,sorted,first,so,this,test,could,fail,simply,because,the,indices,and,types,lists,are,in,different,orders;override,public,boolean,equals,object,other,if,this,other,return,true,if,other,instanceof,datafeed,update,false,return,false,datafeed,update,that,datafeed,update,other,return,objects,equals,this,id,that,id,objects,equals,this,job,id,that,job,id,objects,equals,this,frequency,that,frequency,objects,equals,this,query,delay,that,query,delay,objects,equals,this,indices,that,indices,objects,equals,this,query,that,query,objects,equals,this,scroll,size,that,scroll,size,objects,equals,this,aggregations,that,aggregations,objects,equals,this,delayed,data,check,config,that,delayed,data,check,config,objects,equals,this,script,fields,that,script,fields,objects,equals,this,chunking,config,that,chunking,config
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, ThreadContext threadContext);1524684173;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, ThreadContext threadContext) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (types != null) {_            builder.setTypes(types)__        }_        if (query != null) {_            builder.setQuery(query)__        }_        if (aggregations != null) {_            builder.setAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }__        if (threadContext != null) {_            _            Map<String, String> headers = threadContext.getHeaders().entrySet().stream()_                    .filter(e -> MlClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(headers)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,thread,context,thread,context,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,types,null,builder,set,types,types,if,query,null,builder,set,query,query,if,aggregations,null,builder,set,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,thread,context,null,map,string,string,headers,thread,context,get,headers,entry,set,stream,filter,e,ml,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,headers,return,builder,build
DatafeedUpdate -> public DatafeedConfig apply(DatafeedConfig datafeedConfig, ThreadContext threadContext);1526467406;Applies the update to the given {@link DatafeedConfig}_@return a new {@link DatafeedConfig} that contains the update;public DatafeedConfig apply(DatafeedConfig datafeedConfig, ThreadContext threadContext) {_        if (id.equals(datafeedConfig.getId()) == false) {_            throw new IllegalArgumentException("Cannot apply update to datafeedConfig with different id")__        }__        DatafeedConfig.Builder builder = new DatafeedConfig.Builder(datafeedConfig)__        if (jobId != null) {_            builder.setJobId(jobId)__        }_        if (queryDelay != null) {_            builder.setQueryDelay(queryDelay)__        }_        if (frequency != null) {_            builder.setFrequency(frequency)__        }_        if (indices != null) {_            builder.setIndices(indices)__        }_        if (types != null) {_            builder.setTypes(types)__        }_        if (query != null) {_            builder.setQuery(query)__        }_        if (aggregations != null) {_            builder.setAggregations(aggregations)__        }_        if (scriptFields != null) {_            builder.setScriptFields(scriptFields)__        }_        if (scrollSize != null) {_            builder.setScrollSize(scrollSize)__        }_        if (chunkingConfig != null) {_            builder.setChunkingConfig(chunkingConfig)__        }__        if (threadContext != null) {_            _            Map<String, String> headers = threadContext.getHeaders().entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(headers)__        }__        return builder.build()__    };applies,the,update,to,the,given,link,datafeed,config,return,a,new,link,datafeed,config,that,contains,the,update;public,datafeed,config,apply,datafeed,config,datafeed,config,thread,context,thread,context,if,id,equals,datafeed,config,get,id,false,throw,new,illegal,argument,exception,cannot,apply,update,to,datafeed,config,with,different,id,datafeed,config,builder,builder,new,datafeed,config,builder,datafeed,config,if,job,id,null,builder,set,job,id,job,id,if,query,delay,null,builder,set,query,delay,query,delay,if,frequency,null,builder,set,frequency,frequency,if,indices,null,builder,set,indices,indices,if,types,null,builder,set,types,types,if,query,null,builder,set,query,query,if,aggregations,null,builder,set,aggregations,aggregations,if,script,fields,null,builder,set,script,fields,script,fields,if,scroll,size,null,builder,set,scroll,size,scroll,size,if,chunking,config,null,builder,set,chunking,config,chunking,config,if,thread,context,null,map,string,string,headers,thread,context,get,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,headers,return,builder,build
DatafeedUpdate -> public String getId();1524684173;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1526467406;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1529341607;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1531729807;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1532685069;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1535139672;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1542310365;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1542372612;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1543938107;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1545155131;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1546587824;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1548265937;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> public String getId();1550587606;Get the id of the datafeed to update;public String getId() {_        return id__    };get,the,id,of,the,datafeed,to,update;public,string,get,id,return,id
DatafeedUpdate -> long getHistogramIntervalMillis();1524684173;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> long getHistogramIntervalMillis();1526467406;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> long getHistogramIntervalMillis();1529341607;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> long getHistogramIntervalMillis();1531729807;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> long getHistogramIntervalMillis();1532685069;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> long getHistogramIntervalMillis();1535139672;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> long getHistogramIntervalMillis();1542310365;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> long getHistogramIntervalMillis();1542372612;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> long getHistogramIntervalMillis();1543938107;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> long getHistogramIntervalMillis();1545155131;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> long getHistogramIntervalMillis();1546587824;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> long getHistogramIntervalMillis();1548265937;Returns the histogram's interval as epoch millis.;long getHistogramIntervalMillis() {_        return ExtractorUtils.getHistogramIntervalMillis(aggregations)__    };returns,the,histogram,s,interval,as,epoch,millis;long,get,histogram,interval,millis,return,extractor,utils,get,histogram,interval,millis,aggregations
DatafeedUpdate -> boolean hasAggregations();1524684173;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1526467406;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1529341607;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1531729807;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1532685069;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1535139672;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1542310365;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1542372612;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1543938107;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1545155131;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1546587824;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1548265937;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.count() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,count,0
DatafeedUpdate -> boolean hasAggregations();1550587606;@return {@code true} when there are non-empty aggregations, {@code false}_otherwise;boolean hasAggregations() {_        return aggregations != null && aggregations.size() > 0__    };return,code,true,when,there,are,non,empty,aggregations,code,false,otherwise;boolean,has,aggregations,return,aggregations,null,aggregations,size,0
