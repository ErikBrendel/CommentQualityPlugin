commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;3;;public String[] getClusterPrivileges() {     return this.clusterPrivileges. }
false;public;0;3;;public ConditionalClusterPrivilege[] getConditionalClusterPrivileges() {     return this.conditionalClusterPrivileges. }
false;public;0;3;;public IndicesPrivileges[] getIndicesPrivileges() {     return this.indicesPrivileges. }
false;public;0;3;;public ApplicationResourcePrivileges[] getApplicationPrivileges() {     return this.applicationPrivileges. }
false;public;0;3;;public String[] getRunAs() {     return this.runAs. }
false;public;0;3;;public Map<String, Object> getMetadata() {     return metadata. }
false;public;0;3;;public Map<String, Object> getTransientMetadata() {     return transientMetadata. }
false;public;0;3;;public boolean isUsingDocumentOrFieldLevelSecurity() {     return Arrays.stream(indicesPrivileges).anyMatch(ip -> ip.isUsingDocumentLevelSecurity() || ip.isUsingFieldLevelSecurity()). }
false;public;0;20;;@Override public String toString() {     StringBuilder sb = new StringBuilder("Role[").     sb.append("name=").append(name).     sb.append(", cluster=[").append(Strings.arrayToCommaDelimitedString(clusterPrivileges)).     sb.append("], global=[").append(Strings.arrayToCommaDelimitedString(conditionalClusterPrivileges)).     sb.append("], indicesPrivileges=[").     for (IndicesPrivileges group : indicesPrivileges) {         sb.append(group.toString()).append(",").     }     sb.append("], applicationPrivileges=[").     for (ApplicationResourcePrivileges privilege : applicationPrivileges) {         sb.append(privilege.toString()).append(",").     }     sb.append("], runAs=[").append(Strings.arrayToCommaDelimitedString(runAs)).     sb.append("], metadata=[").     sb.append(metadata).     sb.append("]]").     return sb.toString(). }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     RoleDescriptor that = (RoleDescriptor) o.     if (!name.equals(that.name))         return false.     if (!Arrays.equals(clusterPrivileges, that.clusterPrivileges))         return false.     if (!Arrays.equals(conditionalClusterPrivileges, that.conditionalClusterPrivileges))         return false.     if (!Arrays.equals(indicesPrivileges, that.indicesPrivileges))         return false.     if (!Arrays.equals(applicationPrivileges, that.applicationPrivileges))         return false.     if (!metadata.equals(that.getMetadata()))         return false.     return Arrays.equals(runAs, that.runAs). }
false;public;0;11;;@Override public int hashCode() {     int result = name.hashCode().     result = 31 * result + Arrays.hashCode(clusterPrivileges).     result = 31 * result + Arrays.hashCode(conditionalClusterPrivileges).     result = 31 * result + Arrays.hashCode(indicesPrivileges).     result = 31 * result + Arrays.hashCode(applicationPrivileges).     result = 31 * result + Arrays.hashCode(runAs).     result = 31 * result + metadata.hashCode().     return result. }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return toXContent(builder, params, false). }
true;public;3;20;/**  * Generates x-content for this {@link RoleDescriptor} instance.  *  * @param builder     the x-content builder  * @param params      the parameters for x-content generation directives  * @param docCreation {@code true} if the x-content is being generated for creating a document  *                    in the security index, {@code false} if the x-content being generated  *                    is for API display purposes  * @return x-content builder  * @throws IOException if there was an error writing the x-content to the builder  */ ;/**  * Generates x-content for this {@link RoleDescriptor} instance.  *  * @param builder     the x-content builder  * @param params      the parameters for x-content generation directives  * @param docCreation {@code true} if the x-content is being generated for creating a document  *                    in the security index, {@code false} if the x-content being generated  *                    is for API display purposes  * @return x-content builder  * @throws IOException if there was an error writing the x-content to the builder  */ public XContentBuilder toXContent(XContentBuilder builder, Params params, boolean docCreation) throws IOException {     builder.startObject().     builder.array(Fields.CLUSTER.getPreferredName(), clusterPrivileges).     if (conditionalClusterPrivileges.length != 0) {         builder.field(Fields.GLOBAL.getPreferredName()).         ConditionalClusterPrivileges.toXContent(builder, params, Arrays.asList(conditionalClusterPrivileges)).     }     builder.array(Fields.INDICES.getPreferredName(), (Object[]) indicesPrivileges).     builder.array(Fields.APPLICATIONS.getPreferredName(), (Object[]) applicationPrivileges).     if (runAs != null) {         builder.array(Fields.RUN_AS.getPreferredName(), runAs).     }     builder.field(Fields.METADATA.getPreferredName(), metadata).     if (docCreation) {         builder.field(Fields.TYPE.getPreferredName(), ROLE_TYPE).     } else {         builder.field(Fields.TRANSIENT_METADATA.getPreferredName(), transientMetadata).     }     return builder.endObject(). }
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeStringArray(clusterPrivileges).     out.writeVInt(indicesPrivileges.length).     for (IndicesPrivileges group : indicesPrivileges) {         group.writeTo(out).     }     out.writeStringArray(runAs).     out.writeMap(metadata).     out.writeMap(transientMetadata).     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeArray(ApplicationResourcePrivileges::write, applicationPrivileges).         ConditionalClusterPrivileges.writeArray(out, getConditionalClusterPrivileges()).     } }
false;public,static;4;10;;public static RoleDescriptor parse(String name, BytesReference source, boolean allow2xFormat, XContentType xContentType) throws IOException {     assert name != null.     // EMPTY is safe here because we never use namedObject     try (InputStream stream = source.streamInput().         XContentParser parser = xContentType.xContent().createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {         return parse(name, parser, allow2xFormat).     } }
false;public,static;3;59;;public static RoleDescriptor parse(String name, XContentParser parser, boolean allow2xFormat) throws IOException {     // validate name     Validation.Error validationError = Validation.Roles.validateRoleName(name, true).     if (validationError != null) {         ValidationException ve = new ValidationException().         ve.addValidationError(validationError.toString()).         throw ve.     }     // advance to the START_OBJECT token if needed     XContentParser.Token token = parser.currentToken() == null ? parser.nextToken() : parser.currentToken().     if (token != XContentParser.Token.START_OBJECT) {         throw new ElasticsearchParseException("failed to parse role [{}]. expected an object but found [{}] instead", name, token).     }     String currentFieldName = null.     IndicesPrivileges[] indicesPrivileges = null.     String[] clusterPrivileges = null.     List<ConditionalClusterPrivilege> conditionalClusterPrivileges = Collections.emptyList().     ApplicationResourcePrivileges[] applicationPrivileges = null.     String[] runAsUsers = null.     Map<String, Object> metadata = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Fields.INDEX.match(currentFieldName, parser.getDeprecationHandler()) || Fields.INDICES.match(currentFieldName, parser.getDeprecationHandler())) {             indicesPrivileges = parseIndices(name, parser, allow2xFormat).         } else if (Fields.RUN_AS.match(currentFieldName, parser.getDeprecationHandler())) {             runAsUsers = readStringArray(name, parser, true).         } else if (Fields.CLUSTER.match(currentFieldName, parser.getDeprecationHandler())) {             clusterPrivileges = readStringArray(name, parser, true).         } else if (Fields.APPLICATIONS.match(currentFieldName, parser.getDeprecationHandler()) || Fields.APPLICATION.match(currentFieldName, parser.getDeprecationHandler())) {             applicationPrivileges = parseApplicationPrivileges(name, parser).         } else if (Fields.GLOBAL.match(currentFieldName, parser.getDeprecationHandler())) {             conditionalClusterPrivileges = ConditionalClusterPrivileges.parse(parser).         } else if (Fields.METADATA.match(currentFieldName, parser.getDeprecationHandler())) {             if (token != XContentParser.Token.START_OBJECT) {                 throw new ElasticsearchParseException("expected field [{}] to be of type object, but found [{}] instead", currentFieldName, token).             }             metadata = parser.map().         } else if (Fields.TRANSIENT_METADATA.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.START_OBJECT) {                 // consume object but just drop                 parser.map().             } else {                 throw new ElasticsearchParseException("failed to parse role [{}]. unexpected field [{}]", name, currentFieldName).             }         } else if (Fields.TYPE.match(currentFieldName, parser.getDeprecationHandler())) {         // don't need it         } else {             throw new ElasticsearchParseException("failed to parse role [{}]. unexpected field [{}]", name, currentFieldName).         }     }     return new RoleDescriptor(name, clusterPrivileges, indicesPrivileges, applicationPrivileges, conditionalClusterPrivileges.toArray(new ConditionalClusterPrivilege[conditionalClusterPrivileges.size()]), runAsUsers, metadata, null). }
false;private,static;3;8;;private static String[] readStringArray(String roleName, XContentParser parser, boolean allowNull) throws IOException {     try {         return XContentUtils.readStringArray(parser, allowNull).     } catch (ElasticsearchParseException e) {         // re-wrap in order to add the role name         throw new ElasticsearchParseException("failed to parse role [{}]", e, roleName).     } }
false;public,static;3;46;;public static RoleDescriptor parsePrivilegesCheck(String description, BytesReference source, XContentType xContentType) throws IOException {     try (InputStream stream = source.streamInput().         XContentParser parser = xContentType.xContent().createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {         // advance to the START_OBJECT token         XContentParser.Token token = parser.nextToken().         if (token != XContentParser.Token.START_OBJECT) {             throw new ElasticsearchParseException("failed to parse privileges check [{}]. expected an object but found [{}] instead", description, token).         }         String currentFieldName = null.         IndicesPrivileges[] indexPrivileges = null.         String[] clusterPrivileges = null.         ApplicationResourcePrivileges[] applicationPrivileges = null.         while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {             if (token == XContentParser.Token.FIELD_NAME) {                 currentFieldName = parser.currentName().             } else if (Fields.INDEX.match(currentFieldName, parser.getDeprecationHandler())) {                 indexPrivileges = parseIndices(description, parser, false).             } else if (Fields.CLUSTER.match(currentFieldName, parser.getDeprecationHandler())) {                 clusterPrivileges = readStringArray(description, parser, true).             } else if (Fields.APPLICATIONS.match(currentFieldName, parser.getDeprecationHandler()) || Fields.APPLICATION.match(currentFieldName, parser.getDeprecationHandler())) {                 applicationPrivileges = parseApplicationPrivileges(description, parser).             } else {                 throw new ElasticsearchParseException("failed to parse privileges check [{}]. unexpected field [{}]", description, currentFieldName).             }         }         if (indexPrivileges == null && clusterPrivileges == null && applicationPrivileges == null) {             throw new ElasticsearchParseException("failed to parse privileges check [{}]. All privilege fields [{},{},{}] are missing", description, Fields.CLUSTER, Fields.INDEX, Fields.APPLICATIONS).         }         if (indexPrivileges != null) {             if (Arrays.stream(indexPrivileges).anyMatch(IndicesPrivileges::isUsingFieldLevelSecurity)) {                 throw new ElasticsearchParseException("Field [{}] is not supported in a has_privileges request", RoleDescriptor.Fields.FIELD_PERMISSIONS).             }             if (Arrays.stream(indexPrivileges).anyMatch(IndicesPrivileges::isUsingDocumentLevelSecurity)) {                 throw new ElasticsearchParseException("Field [{}] is not supported in a has_privileges request", Fields.QUERY).             }         }         return new RoleDescriptor(description, clusterPrivileges, indexPrivileges, applicationPrivileges, null, null, null, null).     } }
false;private,static;3;12;;private static RoleDescriptor.IndicesPrivileges[] parseIndices(String roleName, XContentParser parser, boolean allow2xFormat) throws IOException {     if (parser.currentToken() != XContentParser.Token.START_ARRAY) {         throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. expected field [{}] value " + "to be an array, but found [{}] instead", roleName, parser.currentName(), parser.currentToken()).     }     List<RoleDescriptor.IndicesPrivileges> privileges = new ArrayList<>().     while (parser.nextToken() != XContentParser.Token.END_ARRAY) {         privileges.add(parseIndex(roleName, parser, allow2xFormat)).     }     return privileges.toArray(new IndicesPrivileges[privileges.size()]). }
false;private,static;3;139;;private static RoleDescriptor.IndicesPrivileges parseIndex(String roleName, XContentParser parser, boolean allow2xFormat) throws IOException {     XContentParser.Token token = parser.currentToken().     if (token != XContentParser.Token.START_OBJECT) {         throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. expected field [{}] value to " + "be an array of objects, but found an array element of type [{}]", roleName, parser.currentName(), token).     }     String currentFieldName = null.     String[] names = null.     BytesReference query = null.     String[] privileges = null.     String[] grantedFields = null.     String[] deniedFields = null.     boolean allowRestrictedIndices = false.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Fields.NAMES.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.VALUE_STRING) {                 names = new String[] { parser.text() }.             } else if (token == XContentParser.Token.START_ARRAY) {                 names = readStringArray(roleName, parser, false).                 if (names.length == 0) {                     throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. [{}] cannot be an empty " + "array", roleName, currentFieldName).                 }             } else {                 throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. expected field [{}] " + "value to be a string or an array of strings, but found [{}] instead", roleName, currentFieldName, token).             }         } else if (Fields.ALLOW_RESTRICTED_INDICES.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.VALUE_BOOLEAN) {                 allowRestrictedIndices = parser.booleanValue().             } else {                 throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. expected field [{}] " + "value to be a boolean, but found [{}] instead", roleName, currentFieldName, token).             }         } else if (Fields.QUERY.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.START_OBJECT) {                 XContentBuilder builder = JsonXContent.contentBuilder().                 builder.generator().copyCurrentStructure(parser).                 query = BytesReference.bytes(builder).             } else if (token == XContentParser.Token.VALUE_STRING) {                 final String text = parser.text().                 if (text.isEmpty() == false) {                     query = new BytesArray(text).                 }             } else if (token != XContentParser.Token.VALUE_NULL) {                 throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. expected field [{}] " + "value to be null, a string, an array, or an object, but found [{}] instead", roleName, currentFieldName, token).             }         } else if (Fields.FIELD_PERMISSIONS.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.START_OBJECT) {                 token = parser.nextToken().                 do {                     if (token == XContentParser.Token.FIELD_NAME) {                         currentFieldName = parser.currentName().                         if (Fields.GRANT_FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {                             parser.nextToken().                             grantedFields = readStringArray(roleName, parser, true).                             if (grantedFields == null) {                                 throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. {} must not " + "be null.", roleName, Fields.GRANT_FIELDS).                             }                         } else if (Fields.EXCEPT_FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {                             parser.nextToken().                             deniedFields = readStringArray(roleName, parser, true).                             if (deniedFields == null) {                                 throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. {} must not " + "be null.", roleName, Fields.EXCEPT_FIELDS).                             }                         } else {                             throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. " + "\"{}\" only accepts options {} and {}, but got: {}", roleName, Fields.FIELD_PERMISSIONS, Fields.GRANT_FIELDS, Fields.EXCEPT_FIELDS, parser.currentName()).                         }                     } else {                         if (token == XContentParser.Token.END_OBJECT) {                             throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. " + "\"{}\" must not be empty.", roleName, Fields.FIELD_PERMISSIONS).                         } else {                             throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. expected {} but " + "got {}.", roleName, XContentParser.Token.FIELD_NAME, token).                         }                     }                 } while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT).             } else {                 throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. expected {} or {} but got {}" + " in \"{}\".", roleName, XContentParser.Token.START_OBJECT, XContentParser.Token.START_ARRAY, token, Fields.FIELD_PERMISSIONS).             }         } else if (Fields.PRIVILEGES.match(currentFieldName, parser.getDeprecationHandler())) {             privileges = readStringArray(roleName, parser, true).         } else if (Fields.FIELD_PERMISSIONS_2X.match(currentFieldName, parser.getDeprecationHandler())) {             if (allow2xFormat) {                 grantedFields = readStringArray(roleName, parser, true).             } else {                 throw new ElasticsearchParseException("[\"fields\": [...]] format has changed for field" + " permissions in role [{}], use [\"{}\": {\"{}\":[...]," + "\"{}\":[...]}] instead", roleName, Fields.FIELD_PERMISSIONS, Fields.GRANT_FIELDS, Fields.EXCEPT_FIELDS, roleName).             }         } else if (Fields.TRANSIENT_METADATA.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.START_OBJECT) {                 while (parser.nextToken() != XContentParser.Token.END_OBJECT) {                 // it is transient metadata, skip it                 }             } else {                 throw new ElasticsearchParseException("failed to parse transient metadata for role [{}]. expected {} but got {}" + " in \"{}\".", roleName, XContentParser.Token.START_OBJECT, token, Fields.TRANSIENT_METADATA).             }         } else {             throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. unexpected field [{}]", roleName, currentFieldName).         }     }     if (names == null) {         throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. missing required [{}] field", roleName, Fields.NAMES.getPreferredName()).     }     if (privileges == null) {         throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. missing required [{}] field", roleName, Fields.PRIVILEGES.getPreferredName()).     }     if (deniedFields != null && grantedFields == null) {         throw new ElasticsearchParseException("failed to parse indices privileges for role [{}]. {} requires {} if {} is given", roleName, Fields.FIELD_PERMISSIONS, Fields.GRANT_FIELDS, Fields.EXCEPT_FIELDS).     }     return RoleDescriptor.IndicesPrivileges.builder().indices(names).privileges(privileges).grantedFields(grantedFields).deniedFields(deniedFields).query(query).allowRestrictedIndices(allowRestrictedIndices).build(). }
false;private,static;2;12;;private static ApplicationResourcePrivileges[] parseApplicationPrivileges(String roleName, XContentParser parser) throws IOException {     if (parser.currentToken() != XContentParser.Token.START_ARRAY) {         throw new ElasticsearchParseException("failed to parse application privileges for role [{}]. expected field [{}] value " + "to be an array, but found [{}] instead", roleName, parser.currentName(), parser.currentToken()).     }     List<ApplicationResourcePrivileges> privileges = new ArrayList<>().     while (parser.nextToken() != XContentParser.Token.END_ARRAY) {         privileges.add(parseApplicationPrivilege(roleName, parser)).     }     return privileges.toArray(new ApplicationResourcePrivileges[privileges.size()]). }
false;private,static;2;17;;private static ApplicationResourcePrivileges parseApplicationPrivilege(String roleName, XContentParser parser) throws IOException {     XContentParser.Token token = parser.currentToken().     if (token != XContentParser.Token.START_OBJECT) {         throw new ElasticsearchParseException("failed to parse application privileges for role [{}]. expected field [{}] value to " + "be an array of objects, but found an array element of type [{}]", roleName, parser.currentName(), token).     }     final ApplicationResourcePrivileges.Builder builder = ApplicationResourcePrivileges.PARSER.parse(parser, null).     if (builder.hasResources() == false) {         throw new ElasticsearchParseException("failed to parse application privileges for role [{}]. missing required [{}] field", roleName, Fields.RESOURCES.getPreferredName()).     }     if (builder.hasPrivileges() == false) {         throw new ElasticsearchParseException("failed to parse application privileges for role [{}]. missing required [{}] field", roleName, Fields.PRIVILEGES.getPreferredName()).     }     return builder.build(). }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeStringArray(indices).     out.writeOptionalStringArray(grantedFields).     out.writeOptionalStringArray(deniedFields).     out.writeStringArray(privileges).     out.writeOptionalBytesReference(query).     if (out.getVersion().onOrAfter(Version.V_6_7_0)) {         out.writeBoolean(allowRestrictedIndices).     } }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;0;3;;public String[] getIndices() {     return this.indices. }
false;public;0;3;;public String[] getPrivileges() {     return this.privileges. }
false;public;0;4;;@Nullable public String[] getGrantedFields() {     return this.grantedFields. }
false;public;0;4;;@Nullable public String[] getDeniedFields() {     return this.deniedFields. }
false;public;0;4;;@Nullable public BytesReference getQuery() {     return this.query. }
false;public;0;3;;public boolean isUsingDocumentLevelSecurity() {     return query != null. }
false;public;0;3;;public boolean isUsingFieldLevelSecurity() {     return hasDeniedFields() || hasGrantedFields(). }
false;public;0;3;;public boolean allowRestrictedIndices() {     return allowRestrictedIndices. }
false;private;0;3;;private boolean hasDeniedFields() {     return deniedFields != null && deniedFields.length > 0. }
false;private;0;11;;private boolean hasGrantedFields() {     if (grantedFields != null && grantedFields.length >= 0) {         // we treat just '*' as no FLS since that's what the UI defaults to         if (grantedFields.length == 1 && "*".equals(grantedFields[0])) {             return false.         } else {             return true.         }     }     return false. }
false;public;0;32;;@Override public String toString() {     StringBuilder sb = new StringBuilder("IndicesPrivileges[").     sb.append("indices=[").append(Strings.arrayToCommaDelimitedString(indices)).     sb.append("], allowRestrictedIndices=[").append(allowRestrictedIndices).     sb.append("], privileges=[").append(Strings.arrayToCommaDelimitedString(privileges)).     sb.append("], ").     if (grantedFields != null || deniedFields != null) {         sb.append(RoleDescriptor.Fields.FIELD_PERMISSIONS).append("=[").         if (grantedFields == null) {             sb.append(RoleDescriptor.Fields.GRANT_FIELDS).append("=null").         } else {             sb.append(RoleDescriptor.Fields.GRANT_FIELDS).append("=[").append(Strings.arrayToCommaDelimitedString(grantedFields)).             sb.append("]").         }         if (deniedFields == null) {             sb.append(", ").append(RoleDescriptor.Fields.EXCEPT_FIELDS).append("=null").         } else {             sb.append(", ").append(RoleDescriptor.Fields.EXCEPT_FIELDS).append("=[").append(Strings.arrayToCommaDelimitedString(deniedFields)).             sb.append("]").         }         sb.append("]").     }     if (query != null) {         sb.append(", query=").         sb.append(query.utf8ToString()).     }     sb.append("]").     return sb.toString(). }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     IndicesPrivileges that = (IndicesPrivileges) o.     if (!Arrays.equals(indices, that.indices))         return false.     if (allowRestrictedIndices != that.allowRestrictedIndices)         return false.     if (!Arrays.equals(privileges, that.privileges))         return false.     if (!Arrays.equals(grantedFields, that.grantedFields))         return false.     if (!Arrays.equals(deniedFields, that.deniedFields))         return false.     return !(query != null ? !query.equals(that.query) : that.query != null). }
false;public;0;10;;@Override public int hashCode() {     int result = Arrays.hashCode(indices).     result = 31 * result + (allowRestrictedIndices ? 1 : 0).     result = 31 * result + Arrays.hashCode(privileges).     result = 31 * result + Arrays.hashCode(grantedFields).     result = 31 * result + Arrays.hashCode(deniedFields).     result = 31 * result + (query != null ? query.hashCode() : 0).     return result. }
false;public;2;21;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.array("names", indices).     builder.array("privileges", privileges).     if (grantedFields != null || deniedFields != null) {         builder.startObject(RoleDescriptor.Fields.FIELD_PERMISSIONS.getPreferredName()).         if (grantedFields != null) {             builder.array(RoleDescriptor.Fields.GRANT_FIELDS.getPreferredName(), grantedFields).         }         if (deniedFields != null) {             builder.array(RoleDescriptor.Fields.EXCEPT_FIELDS.getPreferredName(), deniedFields).         }         builder.endObject().     }     if (query != null) {         builder.field("query", query.utf8ToString()).     }     builder.field(RoleDescriptor.Fields.ALLOW_RESTRICTED_INDICES.getPreferredName(), allowRestrictedIndices).     return builder.endObject(). }
false;public;1;4;;public Builder indices(String... indices) {     indicesPrivileges.indices = indices.     return this. }
false;public;1;4;;public Builder privileges(String... privileges) {     indicesPrivileges.privileges = privileges.     return this. }
false;public;1;3;;public Builder privileges(Collection<String> privileges) {     return privileges(privileges.toArray(new String[privileges.size()])). }
false;public;1;4;;public Builder grantedFields(String... grantedFields) {     indicesPrivileges.grantedFields = grantedFields.     return this. }
false;public;1;4;;public Builder deniedFields(String... deniedFields) {     indicesPrivileges.deniedFields = deniedFields.     return this. }
false;public;1;3;;public Builder query(@Nullable String query) {     return query(query == null ? null : new BytesArray(query)). }
false;public;1;4;;public Builder allowRestrictedIndices(boolean allow) {     indicesPrivileges.allowRestrictedIndices = allow.     return this. }
false;public;1;8;;public Builder query(@Nullable BytesReference query) {     if (query == null) {         indicesPrivileges.query = null.     } else {         indicesPrivileges.query = query.     }     return this. }
false;public;0;9;;public IndicesPrivileges build() {     if (indicesPrivileges.indices == null || indicesPrivileges.indices.length == 0) {         throw new IllegalArgumentException("indices privileges must refer to at least one index name or index name pattern").     }     if (indicesPrivileges.privileges == null || indicesPrivileges.privileges.length == 0) {         throw new IllegalArgumentException("indices privileges must define at least one privilege").     }     return indicesPrivileges. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(application).     out.writeStringArray(privileges).     out.writeStringArray(resources). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;0;3;;public String getApplication() {     return application. }
false;public;0;3;;public String[] getResources() {     return this.resources. }
false;public;0;3;;public String[] getPrivileges() {     return this.privileges. }
false;public;0;12;;@Override public String toString() {     StringBuilder sb = new StringBuilder(getClass().getSimpleName()).append("[application=").append(application).append(", privileges=[").append(Strings.arrayToCommaDelimitedString(privileges)).append("], resources=[").append(Strings.arrayToCommaDelimitedString(resources)).append("]]").     return sb.toString(). }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || this.getClass() != o.getClass()) {         return false.     }     ApplicationResourcePrivileges that = (ApplicationResourcePrivileges) o.     return Objects.equals(this.application, that.application) && Arrays.equals(this.resources, that.resources) && Arrays.equals(this.privileges, that.privileges). }
false;public;0;6;;@Override public int hashCode() {     int result = Arrays.hashCode(resources).     result = 31 * result + Arrays.hashCode(privileges).     return result. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Fields.APPLICATION.getPreferredName(), application).     builder.array(Fields.PRIVILEGES.getPreferredName(), privileges).     builder.array(Fields.RESOURCES.getPreferredName(), resources).     return builder.endObject(). }
false;public,static;2;3;;public static void write(StreamOutput out, ApplicationResourcePrivileges privileges) throws IOException {     privileges.writeTo(out). }
false;public;1;4;;public Builder application(String appName) {     applicationPrivileges.application = appName.     return this. }
false;public;1;4;;public Builder resources(String... resources) {     applicationPrivileges.resources = resources.     return this. }
false;public;1;3;;public Builder resources(Collection<String> resources) {     return resources(resources.toArray(new String[resources.size()])). }
false;public;1;4;;public Builder privileges(String... privileges) {     applicationPrivileges.privileges = privileges.     return this. }
false;public;1;3;;public Builder privileges(Collection<String> privileges) {     return privileges(privileges.toArray(new String[privileges.size()])). }
false;public;0;3;;public boolean hasResources() {     return applicationPrivileges.resources != null. }
false;public;0;3;;public boolean hasPrivileges() {     return applicationPrivileges.privileges != null. }
false;public;0;12;;public ApplicationResourcePrivileges build() {     if (Strings.isNullOrEmpty(applicationPrivileges.application)) {         throw new IllegalArgumentException("application privileges must have an application name").     }     if (applicationPrivileges.privileges == null || applicationPrivileges.privileges.length == 0) {         throw new IllegalArgumentException("application privileges must define at least one privilege").     }     if (applicationPrivileges.resources == null || applicationPrivileges.resources.length == 0) {         throw new IllegalArgumentException("application privileges must refer to at least one resource").     }     return applicationPrivileges. }
