commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;25;;private static boolean isValidUserOrRoleName(String name) {     if (name.length() < MIN_NAME_LENGTH || name.length() > MAX_NAME_LENGTH) {         return false.     }     for (char character : name.toCharArray()) {         if (!VALID_NAME_CHARS.contains(character)) {             return false.         }     }     // list from the codepoints listed in this page https://en.wikipedia.org/wiki/Whitespace_character     if (name.startsWith(" ") || name.endsWith(" ")) {         return false.     }     return true. }
true;public,static;3;9;/**  * Validate the username  * @param username the username to validate  * @param allowReserved whether or not to allow reserved user names  * @param settings the settings which may contain information about reserved users  * @return {@code null} if valid  */ ;/**  * Validate the username  * @param username the username to validate  * @param allowReserved whether or not to allow reserved user names  * @param settings the settings which may contain information about reserved users  * @return {@code null} if valid  */ public static Error validateUsername(String username, boolean allowReserved, Settings settings) {     if (!isValidUserOrRoleName(username)) {         return new Error(String.format(Locale.ROOT, INVALID_NAME_MESSAGE, "User")).     }     if (allowReserved == false && ClientReservedRealm.isReserved(username, settings)) {         return new Error("Username [" + username + "] is reserved and may not be used.").     }     return null. }
false;public,static;1;5;;public static Error validatePassword(char[] password) {     return password.length >= MIN_PASSWD_LENGTH ? null : new Error("passwords must be at least [" + MIN_PASSWD_LENGTH + "] characters long"). }
false;public,static;1;3;;public static Error validateRoleName(String roleName) {     return validateRoleName(roleName, false). }
false;public,static;2;9;;public static Error validateRoleName(String roleName, boolean allowReserved) {     if (!isValidUserOrRoleName(roleName)) {         return new Error(String.format(Locale.ROOT, INVALID_NAME_MESSAGE, "Role")).     }     if (allowReserved == false && ReservedRolesStore.isReserved(roleName)) {         return new Error("Role [" + roleName + "] is reserved and may not be used.").     }     return null. }
false;public;0;4;;@Override public String toString() {     return message. }
