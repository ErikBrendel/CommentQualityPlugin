commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return  The build info (incl. build hash and timestamp)  */ ;/**  * @return  The build info (incl. build hash and timestamp)  */ public BuildInfo getBuildInfo() {     return buildInfo. }
true;public;0;3;/**  * @return  The current license info (incl. UID, type/mode. status and expiry date). May return {@code null} when no  *          license is currently installed.  */ ;/**  * @return  The current license info (incl. UID, type/mode. status and expiry date). May return {@code null} when no  *          license is currently installed.  */ public LicenseInfo getLicenseInfo() {     return licenseInfo. }
true;public;0;3;/**  * @return  The current status of the feature sets in X-Pack. Feature sets describe the features available/enabled in X-Pack.  */ ;/**  * @return  The current status of the feature sets in X-Pack. Feature sets describe the features available/enabled in X-Pack.  */ public FeatureSetsInfo getFeatureSetsInfo() {     return featureSetsInfo. }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalWriteable(buildInfo).     out.writeOptionalWriteable(licenseInfo).     out.writeOptionalWriteable(featureSetsInfo). }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     this.buildInfo = in.readOptionalWriteable(BuildInfo::new).     this.licenseInfo = in.readOptionalWriteable(LicenseInfo::new).     this.featureSetsInfo = in.readOptionalWriteable(FeatureSetsInfo::new). }
false;public;1;9;;@Override public boolean equals(Object other) {     if (other == null || other.getClass() != getClass())         return false.     if (this == other)         return true.     XPackInfoResponse rhs = (XPackInfoResponse) other.     return Objects.equals(buildInfo, rhs.buildInfo) && Objects.equals(licenseInfo, rhs.licenseInfo) && Objects.equals(featureSetsInfo, rhs.featureSetsInfo). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(buildInfo, licenseInfo, featureSetsInfo). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, false). }
false;public;2;29;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (buildInfo != null) {         builder.field("build", buildInfo, params).     }     EnumSet<XPackInfoRequest.Category> categories = XPackInfoRequest.Category.toSet(Strings.splitStringByCommaToArray(params.param("categories", "_all"))).     if (licenseInfo != null) {         builder.field("license", licenseInfo, params).     } else if (categories.contains(XPackInfoRequest.Category.LICENSE)) {         // if the user requested the license info, and there is no license, we should send         // back an explicit null value (indicating there is no license). This is different         // than not adding the license info at all         builder.nullField("license").     }     if (featureSetsInfo != null) {         builder.field("features", featureSetsInfo, params).     }     if (params.paramAsBoolean("human", true)) {         builder.field("tagline", "You know, for X").     }     return builder.endObject(). }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(uid).     out.writeString(type).     out.writeString(mode).     status.writeTo(out).     out.writeLong(expiryDate). }
false;public;0;3;;public String getUid() {     return uid. }
false;public;0;3;;public String getType() {     return type. }
false;public;0;3;;public String getMode() {     return mode. }
false;public;0;3;;public long getExpiryDate() {     return expiryDate. }
false;public;0;3;;public LicenseStatus getStatus() {     return status. }
false;public;1;11;;@Override public boolean equals(Object other) {     if (other == null || other.getClass() != getClass())         return false.     if (this == other)         return true.     LicenseInfo rhs = (LicenseInfo) other.     return Objects.equals(uid, rhs.uid) && Objects.equals(type, rhs.type) && Objects.equals(mode, rhs.mode) && Objects.equals(status, rhs.status) && expiryDate == rhs.expiryDate. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(uid, type, mode, status, expiryDate). }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().field("uid", uid).field("type", type).field("mode", mode).field("status", status.label()).     if (expiryDate != BASIC_SELF_GENERATED_LICENSE_EXPIRATION_MILLIS) {         builder.timeField("expiry_date_in_millis", "expiry_date", expiryDate).     }     return builder.endObject(). }
false;public;1;5;;@Override public void writeTo(StreamOutput output) throws IOException {     output.writeString(hash).     output.writeString(timestamp). }
false;public;0;3;;public String getHash() {     return hash. }
false;public;0;3;;public String getTimestamp() {     return timestamp. }
false;public;1;8;;@Override public boolean equals(Object other) {     if (other == null || other.getClass() != getClass())         return false.     if (this == other)         return true.     BuildInfo rhs = (BuildInfo) other.     return Objects.equals(hash, rhs.hash) && Objects.equals(timestamp, rhs.timestamp). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(hash, timestamp). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject().field("hash", hash).field("date", timestamp).endObject(). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(featureSets.size()).     for (FeatureSet featureSet : featureSets.values()) {         featureSet.writeTo(out).     } }
false;public;0;3;;public Map<String, FeatureSet> getFeatureSets() {     return featureSets. }
false;public;1;7;;@Override public boolean equals(Object other) {     if (other == null || other.getClass() != getClass())         return false.     if (this == other)         return true.     FeatureSetsInfo rhs = (FeatureSetsInfo) other.     return Objects.equals(featureSets, rhs.featureSets). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(featureSets). }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     List<String> names = new ArrayList<>(this.featureSets.keySet()).stream().sorted().collect(Collectors.toList()).     for (String name : names) {         builder.field(name, featureSets.get(name), params).     }     return builder.endObject(). }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeOptionalString(description).     out.writeBoolean(available).     out.writeBoolean(enabled).     out.writeMap(nativeCodeInfo). }
false;public;0;3;;public String name() {     return name. }
false;public;0;4;;@Nullable public String description() {     return description. }
false;public;0;3;;public boolean available() {     return available. }
false;public;0;3;;public boolean enabled() {     return enabled. }
false;public;0;4;;@Nullable public Map<String, Object> nativeCodeInfo() {     return nativeCodeInfo. }
false;public;1;11;;@Override public boolean equals(Object other) {     if (other == null || other.getClass() != getClass())         return false.     if (this == other)         return true.     FeatureSet rhs = (FeatureSet) other.     return Objects.equals(name, rhs.name) && Objects.equals(description, rhs.description) && available == rhs.available && enabled == rhs.enabled && Objects.equals(nativeCodeInfo, rhs.nativeCodeInfo). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(name, description, available, enabled, nativeCodeInfo). }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (description != null) {         builder.field("description", description).     }     builder.field("available", available).     builder.field("enabled", enabled).     if (nativeCodeInfo != null) {         builder.field("native_code_info", nativeCodeInfo).     }     return builder.endObject(). }
