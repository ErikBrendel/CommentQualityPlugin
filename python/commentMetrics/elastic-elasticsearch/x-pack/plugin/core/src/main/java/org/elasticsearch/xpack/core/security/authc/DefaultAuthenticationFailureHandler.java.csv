commented;modifiers;parameterAmount;loc;comment;code
true;private,static;1;13;/**  * For given 'WWW-Authenticate' header value returns the priority based on  * the auth-scheme. Lower number denotes more secure and preferred  * auth-scheme than the higher number.  *  * @param headerValue string starting with auth-scheme name  * @return integer value denoting priority for given auth scheme.  */ ;/**  * For given 'WWW-Authenticate' header value returns the priority based on  * the auth-scheme. Lower number denotes more secure and preferred  * auth-scheme than the higher number.  *  * @param headerValue string starting with auth-scheme name  * @return integer value denoting priority for given auth scheme.  */ private static Integer authSchemePriority(final String headerValue) {     if (headerValue.regionMatches(true, 0, "negotiate", 0, "negotiate".length())) {         return 0.     } else if (headerValue.regionMatches(true, 0, "bearer", 0, "bearer".length())) {         return 1.     } else if (headerValue.regionMatches(true, 0, "apikey", 0, "apikey".length())) {         return 2.     } else if (headerValue.regionMatches(true, 0, "basic", 0, "basic".length())) {         return 3.     } else {         return 4.     } }
false;public;3;4;;@Override public ElasticsearchSecurityException failedAuthentication(RestRequest request, AuthenticationToken token, ThreadContext context) {     return createAuthenticationError("unable to authenticate user [{}] for REST request [{}]", null, token.principal(), request.uri()). }
false;public;4;5;;@Override public ElasticsearchSecurityException failedAuthentication(TransportMessage message, AuthenticationToken token, String action, ThreadContext context) {     return createAuthenticationError("unable to authenticate user [{}] for action [{}]", null, token.principal(), action). }
false;public;3;4;;@Override public ElasticsearchSecurityException exceptionProcessingRequest(RestRequest request, Exception e, ThreadContext context) {     return createAuthenticationError("error attempting to authenticate request", e, (Object[]) null). }
false;public;4;5;;@Override public ElasticsearchSecurityException exceptionProcessingRequest(TransportMessage message, String action, Exception e, ThreadContext context) {     return createAuthenticationError("error attempting to authenticate request", e, (Object[]) null). }
false;public;2;4;;@Override public ElasticsearchSecurityException missingToken(RestRequest request, ThreadContext context) {     return createAuthenticationError("missing authentication credentials for REST request [{}]", null, request.uri()). }
false;public;3;4;;@Override public ElasticsearchSecurityException missingToken(TransportMessage message, String action, ThreadContext context) {     return createAuthenticationError("missing authentication credentials for action [{}]", null, action). }
false;public;2;4;;@Override public ElasticsearchSecurityException authenticationRequired(String action, ThreadContext context) {     return createAuthenticationError("action [{}] requires authentication", null, action). }
true;private;3;31;/**  * Creates an instance of {@link ElasticsearchSecurityException} with  * {@link RestStatus#UNAUTHORIZED} status.  * <p>  * Also adds default failure response headers as configured for this  * {@link DefaultAuthenticationFailureHandler}  * <p>  * It may replace existing response headers if the cause is an instance of  * {@link ElasticsearchSecurityException}  *  * @param message error message  * @param t cause, if it is an instance of  *            {@link ElasticsearchSecurityException} asserts status is  *            RestStatus.UNAUTHORIZED and adds headers to it, else it will  *            create a new instance of {@link ElasticsearchSecurityException}  * @param args error message args  * @return instance of {@link ElasticsearchSecurityException}  */ ;/**  * Creates an instance of {@link ElasticsearchSecurityException} with  * {@link RestStatus#UNAUTHORIZED} status.  * <p>  * Also adds default failure response headers as configured for this  * {@link DefaultAuthenticationFailureHandler}  * <p>  * It may replace existing response headers if the cause is an instance of  * {@link ElasticsearchSecurityException}  *  * @param message error message  * @param t cause, if it is an instance of  *            {@link ElasticsearchSecurityException} asserts status is  *            RestStatus.UNAUTHORIZED and adds headers to it, else it will  *            create a new instance of {@link ElasticsearchSecurityException}  * @param args error message args  * @return instance of {@link ElasticsearchSecurityException}  */ private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args) {     final ElasticsearchSecurityException ese.     final boolean containsNegotiateWithToken.     if (t instanceof ElasticsearchSecurityException) {         assert ((ElasticsearchSecurityException) t).status() == RestStatus.UNAUTHORIZED.         ese = (ElasticsearchSecurityException) t.         if (ese.getHeader("WWW-Authenticate") != null && ese.getHeader("WWW-Authenticate").isEmpty() == false) {             /**              * If 'WWW-Authenticate' header is present with 'Negotiate ' then do not              * replace. In case of kerberos spnego mechanism, we use              * 'WWW-Authenticate' header value to communicate outToken to peer.              */             containsNegotiateWithToken = ese.getHeader("WWW-Authenticate").stream().anyMatch(s -> s != null && s.regionMatches(true, 0, "Negotiate ", 0, "Negotiate ".length())).         } else {             containsNegotiateWithToken = false.         }     } else {         ese = authenticationError(message, t, args).         containsNegotiateWithToken = false.     }     defaultFailureResponseHeaders.entrySet().stream().forEach((e) -> {         if (containsNegotiateWithToken && e.getKey().equalsIgnoreCase("WWW-Authenticate")) {             return.         }         // If it is already present then it will replace the existing header.         ese.addHeader(e.getKey(), e.getValue()).     }).     return ese. }
