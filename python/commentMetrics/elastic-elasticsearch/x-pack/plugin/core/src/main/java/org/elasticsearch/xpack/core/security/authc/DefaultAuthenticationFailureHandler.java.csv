# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultAuthenticationFailureHandler -> public DefaultAuthenticationFailureHandler(final Map<String, List<String>> failureResponseHeaders);1536314350;Constructs default authentication failure handler with provided default_response headers.__@param failureResponseHeaders Map of header key and list of header values to_be sent as failure response._@see Realm#getAuthenticationFailureHeaders();public DefaultAuthenticationFailureHandler(final Map<String, List<String>> failureResponseHeaders) {_        if (failureResponseHeaders == null || failureResponseHeaders.isEmpty()) {_            this.defaultFailureResponseHeaders = Collections.singletonMap("WWW-Authenticate",_                    Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\""))__        } else {_            this.defaultFailureResponseHeaders = Collections.unmodifiableMap(failureResponseHeaders.entrySet().stream().collect(Collectors_                    .toMap(entry -> entry.getKey(), entry -> {_                        if (entry.getKey().equalsIgnoreCase("WWW-Authenticate")) {_                            List<String> values = new ArrayList<>(entry.getValue())__                            Collections.sort(values, (o1, o2) -> authSchemePriority(o1).compareTo(authSchemePriority(o2)))__                            return Collections.unmodifiableList(values)__                        } else {_                            return Collections.unmodifiableList(entry.getValue())__                        }_                    })))__        }_    };constructs,default,authentication,failure,handler,with,provided,default,response,headers,param,failure,response,headers,map,of,header,key,and,list,of,header,values,to,be,sent,as,failure,response,see,realm,get,authentication,failure,headers;public,default,authentication,failure,handler,final,map,string,list,string,failure,response,headers,if,failure,response,headers,null,failure,response,headers,is,empty,this,default,failure,response,headers,collections,singleton,map,www,authenticate,collections,singleton,list,basic,realm,xpack,field,security,charset,utf,8,else,this,default,failure,response,headers,collections,unmodifiable,map,failure,response,headers,entry,set,stream,collect,collectors,to,map,entry,entry,get,key,entry,if,entry,get,key,equals,ignore,case,www,authenticate,list,string,values,new,array,list,entry,get,value,collections,sort,values,o1,o2,auth,scheme,priority,o1,compare,to,auth,scheme,priority,o2,return,collections,unmodifiable,list,values,else,return,collections,unmodifiable,list,entry,get,value
DefaultAuthenticationFailureHandler -> public DefaultAuthenticationFailureHandler(final Map<String, List<String>> failureResponseHeaders);1542240273;Constructs default authentication failure handler with provided default_response headers.__@param failureResponseHeaders Map of header key and list of header values to_be sent as failure response._@see Realm#getAuthenticationFailureHeaders();public DefaultAuthenticationFailureHandler(final Map<String, List<String>> failureResponseHeaders) {_        if (failureResponseHeaders == null || failureResponseHeaders.isEmpty()) {_            this.defaultFailureResponseHeaders = Collections.singletonMap("WWW-Authenticate",_                    Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\""))__        } else {_            this.defaultFailureResponseHeaders = Collections.unmodifiableMap(failureResponseHeaders.entrySet().stream().collect(Collectors_                    .toMap(entry -> entry.getKey(), entry -> {_                        if (entry.getKey().equalsIgnoreCase("WWW-Authenticate")) {_                            List<String> values = new ArrayList<>(entry.getValue())__                            values.sort(Comparator.comparing(DefaultAuthenticationFailureHandler::authSchemePriority))__                            return Collections.unmodifiableList(values)__                        } else {_                            return Collections.unmodifiableList(entry.getValue())__                        }_                    })))__        }_    };constructs,default,authentication,failure,handler,with,provided,default,response,headers,param,failure,response,headers,map,of,header,key,and,list,of,header,values,to,be,sent,as,failure,response,see,realm,get,authentication,failure,headers;public,default,authentication,failure,handler,final,map,string,list,string,failure,response,headers,if,failure,response,headers,null,failure,response,headers,is,empty,this,default,failure,response,headers,collections,singleton,map,www,authenticate,collections,singleton,list,basic,realm,xpack,field,security,charset,utf,8,else,this,default,failure,response,headers,collections,unmodifiable,map,failure,response,headers,entry,set,stream,collect,collectors,to,map,entry,entry,get,key,entry,if,entry,get,key,equals,ignore,case,www,authenticate,list,string,values,new,array,list,entry,get,value,values,sort,comparator,comparing,default,authentication,failure,handler,auth,scheme,priority,return,collections,unmodifiable,list,values,else,return,collections,unmodifiable,list,entry,get,value
DefaultAuthenticationFailureHandler -> public DefaultAuthenticationFailureHandler(final Map<String, List<String>> failureResponseHeaders);1545971206;Constructs default authentication failure handler with provided default_response headers.__@param failureResponseHeaders Map of header key and list of header values to_be sent as failure response._@see Realm#getAuthenticationFailureHeaders();public DefaultAuthenticationFailureHandler(final Map<String, List<String>> failureResponseHeaders) {_        if (failureResponseHeaders == null || failureResponseHeaders.isEmpty()) {_            this.defaultFailureResponseHeaders = Collections.singletonMap("WWW-Authenticate",_                    Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\""))__        } else {_            this.defaultFailureResponseHeaders = Collections.unmodifiableMap(failureResponseHeaders.entrySet().stream().collect(Collectors_                    .toMap(entry -> entry.getKey(), entry -> {_                        if (entry.getKey().equalsIgnoreCase("WWW-Authenticate")) {_                            List<String> values = new ArrayList<>(entry.getValue())__                            values.sort(Comparator.comparing(DefaultAuthenticationFailureHandler::authSchemePriority))__                            return Collections.unmodifiableList(values)__                        } else {_                            return Collections.unmodifiableList(entry.getValue())__                        }_                    })))__        }_    };constructs,default,authentication,failure,handler,with,provided,default,response,headers,param,failure,response,headers,map,of,header,key,and,list,of,header,values,to,be,sent,as,failure,response,see,realm,get,authentication,failure,headers;public,default,authentication,failure,handler,final,map,string,list,string,failure,response,headers,if,failure,response,headers,null,failure,response,headers,is,empty,this,default,failure,response,headers,collections,singleton,map,www,authenticate,collections,singleton,list,basic,realm,xpack,field,security,charset,utf,8,else,this,default,failure,response,headers,collections,unmodifiable,map,failure,response,headers,entry,set,stream,collect,collectors,to,map,entry,entry,get,key,entry,if,entry,get,key,equals,ignore,case,www,authenticate,list,string,values,new,array,list,entry,get,value,values,sort,comparator,comparing,default,authentication,failure,handler,auth,scheme,priority,return,collections,unmodifiable,list,values,else,return,collections,unmodifiable,list,entry,get,value
DefaultAuthenticationFailureHandler -> public DefaultAuthenticationFailureHandler(final Map<String, List<String>> failureResponseHeaders);1549336917;Constructs default authentication failure handler with provided default_response headers.__@param failureResponseHeaders Map of header key and list of header values to_be sent as failure response._@see Realm#getAuthenticationFailureHeaders();public DefaultAuthenticationFailureHandler(final Map<String, List<String>> failureResponseHeaders) {_        if (failureResponseHeaders == null || failureResponseHeaders.isEmpty()) {_            this.defaultFailureResponseHeaders = Collections.singletonMap("WWW-Authenticate",_                    Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\""))__        } else {_            this.defaultFailureResponseHeaders = Collections.unmodifiableMap(failureResponseHeaders.entrySet().stream().collect(Collectors_                    .toMap(entry -> entry.getKey(), entry -> {_                        if (entry.getKey().equalsIgnoreCase("WWW-Authenticate")) {_                            List<String> values = new ArrayList<>(entry.getValue())__                            values.sort(Comparator.comparing(DefaultAuthenticationFailureHandler::authSchemePriority))__                            return Collections.unmodifiableList(values)__                        } else {_                            return Collections.unmodifiableList(entry.getValue())__                        }_                    })))__        }_    };constructs,default,authentication,failure,handler,with,provided,default,response,headers,param,failure,response,headers,map,of,header,key,and,list,of,header,values,to,be,sent,as,failure,response,see,realm,get,authentication,failure,headers;public,default,authentication,failure,handler,final,map,string,list,string,failure,response,headers,if,failure,response,headers,null,failure,response,headers,is,empty,this,default,failure,response,headers,collections,singleton,map,www,authenticate,collections,singleton,list,basic,realm,xpack,field,security,charset,utf,8,else,this,default,failure,response,headers,collections,unmodifiable,map,failure,response,headers,entry,set,stream,collect,collectors,to,map,entry,entry,get,key,entry,if,entry,get,key,equals,ignore,case,www,authenticate,list,string,values,new,array,list,entry,get,value,values,sort,comparator,comparing,default,authentication,failure,handler,auth,scheme,priority,return,collections,unmodifiable,list,values,else,return,collections,unmodifiable,list,entry,get,value
DefaultAuthenticationFailureHandler -> @Deprecated     public DefaultAuthenticationFailureHandler();1532456624;Constructs default authentication failure handler__@deprecated replaced by {@link #DefaultAuthenticationFailureHandler(Map)};@Deprecated_    public DefaultAuthenticationFailureHandler() {_        this(null)__    };constructs,default,authentication,failure,handler,deprecated,replaced,by,link,default,authentication,failure,handler,map;deprecated,public,default,authentication,failure,handler,this,null
DefaultAuthenticationFailureHandler -> @Deprecated     public DefaultAuthenticationFailureHandler();1536314350;Constructs default authentication failure handler__@deprecated replaced by {@link #DefaultAuthenticationFailureHandler(Map)};@Deprecated_    public DefaultAuthenticationFailureHandler() {_        this(null)__    };constructs,default,authentication,failure,handler,deprecated,replaced,by,link,default,authentication,failure,handler,map;deprecated,public,default,authentication,failure,handler,this,null
DefaultAuthenticationFailureHandler -> private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args);1532456624;Creates an instance of {@link ElasticsearchSecurityException} with_{@link RestStatus#UNAUTHORIZED} status._<p>_Also adds default failure response headers as configured for this_{@link DefaultAuthenticationFailureHandler}_<p>_It may replace existing response headers if the cause is an instance of_{@link ElasticsearchSecurityException}__@param message error message_@param t cause, if it is an instance of_{@link ElasticsearchSecurityException} asserts status is_RestStatus.UNAUTHORIZED and adds headers to it, else it will_create a new instance of {@link ElasticsearchSecurityException}_@param args error message args_@return instance of {@link ElasticsearchSecurityException};private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args) {_        final ElasticsearchSecurityException ese__        final boolean containsNegotiateWithToken__        if (t instanceof ElasticsearchSecurityException) {_            assert ((ElasticsearchSecurityException) t).status() == RestStatus.UNAUTHORIZED__            ese = (ElasticsearchSecurityException) t__            if (ese.getHeader("WWW-Authenticate") != null && ese.getHeader("WWW-Authenticate").isEmpty() == false) {_                _                containsNegotiateWithToken =_                        ese.getHeader("WWW-Authenticate").stream()_                                .anyMatch(s -> s != null && s.regionMatches(true, 0, "Negotiate ", 0, "Negotiate ".length()))__            } else {_                containsNegotiateWithToken = false__            }_        } else {_            ese = authenticationError(message, t, args)__            containsNegotiateWithToken = false__        }_        defaultFailureResponseHeaders.entrySet().stream().forEach((e) -> {_            if (containsNegotiateWithToken && e.getKey().equalsIgnoreCase("WWW-Authenticate")) {_                return__            }_            _            ese.addHeader(e.getKey(), e.getValue())__        })__        return ese__    };creates,an,instance,of,link,elasticsearch,security,exception,with,link,rest,status,unauthorized,status,p,also,adds,default,failure,response,headers,as,configured,for,this,link,default,authentication,failure,handler,p,it,may,replace,existing,response,headers,if,the,cause,is,an,instance,of,link,elasticsearch,security,exception,param,message,error,message,param,t,cause,if,it,is,an,instance,of,link,elasticsearch,security,exception,asserts,status,is,rest,status,unauthorized,and,adds,headers,to,it,else,it,will,create,a,new,instance,of,link,elasticsearch,security,exception,param,args,error,message,args,return,instance,of,link,elasticsearch,security,exception;private,elasticsearch,security,exception,create,authentication,error,final,string,message,final,throwable,t,final,object,args,final,elasticsearch,security,exception,ese,final,boolean,contains,negotiate,with,token,if,t,instanceof,elasticsearch,security,exception,assert,elasticsearch,security,exception,t,status,rest,status,unauthorized,ese,elasticsearch,security,exception,t,if,ese,get,header,www,authenticate,null,ese,get,header,www,authenticate,is,empty,false,contains,negotiate,with,token,ese,get,header,www,authenticate,stream,any,match,s,s,null,s,region,matches,true,0,negotiate,0,negotiate,length,else,contains,negotiate,with,token,false,else,ese,authentication,error,message,t,args,contains,negotiate,with,token,false,default,failure,response,headers,entry,set,stream,for,each,e,if,contains,negotiate,with,token,e,get,key,equals,ignore,case,www,authenticate,return,ese,add,header,e,get,key,e,get,value,return,ese
DefaultAuthenticationFailureHandler -> private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args);1536314350;Creates an instance of {@link ElasticsearchSecurityException} with_{@link RestStatus#UNAUTHORIZED} status._<p>_Also adds default failure response headers as configured for this_{@link DefaultAuthenticationFailureHandler}_<p>_It may replace existing response headers if the cause is an instance of_{@link ElasticsearchSecurityException}__@param message error message_@param t cause, if it is an instance of_{@link ElasticsearchSecurityException} asserts status is_RestStatus.UNAUTHORIZED and adds headers to it, else it will_create a new instance of {@link ElasticsearchSecurityException}_@param args error message args_@return instance of {@link ElasticsearchSecurityException};private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args) {_        final ElasticsearchSecurityException ese__        final boolean containsNegotiateWithToken__        if (t instanceof ElasticsearchSecurityException) {_            assert ((ElasticsearchSecurityException) t).status() == RestStatus.UNAUTHORIZED__            ese = (ElasticsearchSecurityException) t__            if (ese.getHeader("WWW-Authenticate") != null && ese.getHeader("WWW-Authenticate").isEmpty() == false) {_                _                containsNegotiateWithToken =_                        ese.getHeader("WWW-Authenticate").stream()_                                .anyMatch(s -> s != null && s.regionMatches(true, 0, "Negotiate ", 0, "Negotiate ".length()))__            } else {_                containsNegotiateWithToken = false__            }_        } else {_            ese = authenticationError(message, t, args)__            containsNegotiateWithToken = false__        }_        defaultFailureResponseHeaders.entrySet().stream().forEach((e) -> {_            if (containsNegotiateWithToken && e.getKey().equalsIgnoreCase("WWW-Authenticate")) {_                return__            }_            _            ese.addHeader(e.getKey(), e.getValue())__        })__        return ese__    };creates,an,instance,of,link,elasticsearch,security,exception,with,link,rest,status,unauthorized,status,p,also,adds,default,failure,response,headers,as,configured,for,this,link,default,authentication,failure,handler,p,it,may,replace,existing,response,headers,if,the,cause,is,an,instance,of,link,elasticsearch,security,exception,param,message,error,message,param,t,cause,if,it,is,an,instance,of,link,elasticsearch,security,exception,asserts,status,is,rest,status,unauthorized,and,adds,headers,to,it,else,it,will,create,a,new,instance,of,link,elasticsearch,security,exception,param,args,error,message,args,return,instance,of,link,elasticsearch,security,exception;private,elasticsearch,security,exception,create,authentication,error,final,string,message,final,throwable,t,final,object,args,final,elasticsearch,security,exception,ese,final,boolean,contains,negotiate,with,token,if,t,instanceof,elasticsearch,security,exception,assert,elasticsearch,security,exception,t,status,rest,status,unauthorized,ese,elasticsearch,security,exception,t,if,ese,get,header,www,authenticate,null,ese,get,header,www,authenticate,is,empty,false,contains,negotiate,with,token,ese,get,header,www,authenticate,stream,any,match,s,s,null,s,region,matches,true,0,negotiate,0,negotiate,length,else,contains,negotiate,with,token,false,else,ese,authentication,error,message,t,args,contains,negotiate,with,token,false,default,failure,response,headers,entry,set,stream,for,each,e,if,contains,negotiate,with,token,e,get,key,equals,ignore,case,www,authenticate,return,ese,add,header,e,get,key,e,get,value,return,ese
DefaultAuthenticationFailureHandler -> private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args);1542240273;Creates an instance of {@link ElasticsearchSecurityException} with_{@link RestStatus#UNAUTHORIZED} status._<p>_Also adds default failure response headers as configured for this_{@link DefaultAuthenticationFailureHandler}_<p>_It may replace existing response headers if the cause is an instance of_{@link ElasticsearchSecurityException}__@param message error message_@param t cause, if it is an instance of_{@link ElasticsearchSecurityException} asserts status is_RestStatus.UNAUTHORIZED and adds headers to it, else it will_create a new instance of {@link ElasticsearchSecurityException}_@param args error message args_@return instance of {@link ElasticsearchSecurityException};private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args) {_        final ElasticsearchSecurityException ese__        final boolean containsNegotiateWithToken__        if (t instanceof ElasticsearchSecurityException) {_            assert ((ElasticsearchSecurityException) t).status() == RestStatus.UNAUTHORIZED__            ese = (ElasticsearchSecurityException) t__            if (ese.getHeader("WWW-Authenticate") != null && ese.getHeader("WWW-Authenticate").isEmpty() == false) {_                _                containsNegotiateWithToken =_                        ese.getHeader("WWW-Authenticate").stream()_                                .anyMatch(s -> s != null && s.regionMatches(true, 0, "Negotiate ", 0, "Negotiate ".length()))__            } else {_                containsNegotiateWithToken = false__            }_        } else {_            ese = authenticationError(message, t, args)__            containsNegotiateWithToken = false__        }_        defaultFailureResponseHeaders.entrySet().stream().forEach((e) -> {_            if (containsNegotiateWithToken && e.getKey().equalsIgnoreCase("WWW-Authenticate")) {_                return__            }_            _            ese.addHeader(e.getKey(), e.getValue())__        })__        return ese__    };creates,an,instance,of,link,elasticsearch,security,exception,with,link,rest,status,unauthorized,status,p,also,adds,default,failure,response,headers,as,configured,for,this,link,default,authentication,failure,handler,p,it,may,replace,existing,response,headers,if,the,cause,is,an,instance,of,link,elasticsearch,security,exception,param,message,error,message,param,t,cause,if,it,is,an,instance,of,link,elasticsearch,security,exception,asserts,status,is,rest,status,unauthorized,and,adds,headers,to,it,else,it,will,create,a,new,instance,of,link,elasticsearch,security,exception,param,args,error,message,args,return,instance,of,link,elasticsearch,security,exception;private,elasticsearch,security,exception,create,authentication,error,final,string,message,final,throwable,t,final,object,args,final,elasticsearch,security,exception,ese,final,boolean,contains,negotiate,with,token,if,t,instanceof,elasticsearch,security,exception,assert,elasticsearch,security,exception,t,status,rest,status,unauthorized,ese,elasticsearch,security,exception,t,if,ese,get,header,www,authenticate,null,ese,get,header,www,authenticate,is,empty,false,contains,negotiate,with,token,ese,get,header,www,authenticate,stream,any,match,s,s,null,s,region,matches,true,0,negotiate,0,negotiate,length,else,contains,negotiate,with,token,false,else,ese,authentication,error,message,t,args,contains,negotiate,with,token,false,default,failure,response,headers,entry,set,stream,for,each,e,if,contains,negotiate,with,token,e,get,key,equals,ignore,case,www,authenticate,return,ese,add,header,e,get,key,e,get,value,return,ese
DefaultAuthenticationFailureHandler -> private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args);1545971206;Creates an instance of {@link ElasticsearchSecurityException} with_{@link RestStatus#UNAUTHORIZED} status._<p>_Also adds default failure response headers as configured for this_{@link DefaultAuthenticationFailureHandler}_<p>_It may replace existing response headers if the cause is an instance of_{@link ElasticsearchSecurityException}__@param message error message_@param t cause, if it is an instance of_{@link ElasticsearchSecurityException} asserts status is_RestStatus.UNAUTHORIZED and adds headers to it, else it will_create a new instance of {@link ElasticsearchSecurityException}_@param args error message args_@return instance of {@link ElasticsearchSecurityException};private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args) {_        final ElasticsearchSecurityException ese__        final boolean containsNegotiateWithToken__        if (t instanceof ElasticsearchSecurityException) {_            assert ((ElasticsearchSecurityException) t).status() == RestStatus.UNAUTHORIZED__            ese = (ElasticsearchSecurityException) t__            if (ese.getHeader("WWW-Authenticate") != null && ese.getHeader("WWW-Authenticate").isEmpty() == false) {_                _                containsNegotiateWithToken =_                        ese.getHeader("WWW-Authenticate").stream()_                                .anyMatch(s -> s != null && s.regionMatches(true, 0, "Negotiate ", 0, "Negotiate ".length()))__            } else {_                containsNegotiateWithToken = false__            }_        } else {_            ese = authenticationError(message, t, args)__            containsNegotiateWithToken = false__        }_        defaultFailureResponseHeaders.entrySet().stream().forEach((e) -> {_            if (containsNegotiateWithToken && e.getKey().equalsIgnoreCase("WWW-Authenticate")) {_                return__            }_            _            ese.addHeader(e.getKey(), e.getValue())__        })__        return ese__    };creates,an,instance,of,link,elasticsearch,security,exception,with,link,rest,status,unauthorized,status,p,also,adds,default,failure,response,headers,as,configured,for,this,link,default,authentication,failure,handler,p,it,may,replace,existing,response,headers,if,the,cause,is,an,instance,of,link,elasticsearch,security,exception,param,message,error,message,param,t,cause,if,it,is,an,instance,of,link,elasticsearch,security,exception,asserts,status,is,rest,status,unauthorized,and,adds,headers,to,it,else,it,will,create,a,new,instance,of,link,elasticsearch,security,exception,param,args,error,message,args,return,instance,of,link,elasticsearch,security,exception;private,elasticsearch,security,exception,create,authentication,error,final,string,message,final,throwable,t,final,object,args,final,elasticsearch,security,exception,ese,final,boolean,contains,negotiate,with,token,if,t,instanceof,elasticsearch,security,exception,assert,elasticsearch,security,exception,t,status,rest,status,unauthorized,ese,elasticsearch,security,exception,t,if,ese,get,header,www,authenticate,null,ese,get,header,www,authenticate,is,empty,false,contains,negotiate,with,token,ese,get,header,www,authenticate,stream,any,match,s,s,null,s,region,matches,true,0,negotiate,0,negotiate,length,else,contains,negotiate,with,token,false,else,ese,authentication,error,message,t,args,contains,negotiate,with,token,false,default,failure,response,headers,entry,set,stream,for,each,e,if,contains,negotiate,with,token,e,get,key,equals,ignore,case,www,authenticate,return,ese,add,header,e,get,key,e,get,value,return,ese
DefaultAuthenticationFailureHandler -> private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args);1549336917;Creates an instance of {@link ElasticsearchSecurityException} with_{@link RestStatus#UNAUTHORIZED} status._<p>_Also adds default failure response headers as configured for this_{@link DefaultAuthenticationFailureHandler}_<p>_It may replace existing response headers if the cause is an instance of_{@link ElasticsearchSecurityException}__@param message error message_@param t cause, if it is an instance of_{@link ElasticsearchSecurityException} asserts status is_RestStatus.UNAUTHORIZED and adds headers to it, else it will_create a new instance of {@link ElasticsearchSecurityException}_@param args error message args_@return instance of {@link ElasticsearchSecurityException};private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args) {_        final ElasticsearchSecurityException ese__        final boolean containsNegotiateWithToken__        if (t instanceof ElasticsearchSecurityException) {_            assert ((ElasticsearchSecurityException) t).status() == RestStatus.UNAUTHORIZED__            ese = (ElasticsearchSecurityException) t__            if (ese.getHeader("WWW-Authenticate") != null && ese.getHeader("WWW-Authenticate").isEmpty() == false) {_                _                containsNegotiateWithToken =_                        ese.getHeader("WWW-Authenticate").stream()_                                .anyMatch(s -> s != null && s.regionMatches(true, 0, "Negotiate ", 0, "Negotiate ".length()))__            } else {_                containsNegotiateWithToken = false__            }_        } else {_            ese = authenticationError(message, t, args)__            containsNegotiateWithToken = false__        }_        defaultFailureResponseHeaders.entrySet().stream().forEach((e) -> {_            if (containsNegotiateWithToken && e.getKey().equalsIgnoreCase("WWW-Authenticate")) {_                return__            }_            _            ese.addHeader(e.getKey(), e.getValue())__        })__        return ese__    };creates,an,instance,of,link,elasticsearch,security,exception,with,link,rest,status,unauthorized,status,p,also,adds,default,failure,response,headers,as,configured,for,this,link,default,authentication,failure,handler,p,it,may,replace,existing,response,headers,if,the,cause,is,an,instance,of,link,elasticsearch,security,exception,param,message,error,message,param,t,cause,if,it,is,an,instance,of,link,elasticsearch,security,exception,asserts,status,is,rest,status,unauthorized,and,adds,headers,to,it,else,it,will,create,a,new,instance,of,link,elasticsearch,security,exception,param,args,error,message,args,return,instance,of,link,elasticsearch,security,exception;private,elasticsearch,security,exception,create,authentication,error,final,string,message,final,throwable,t,final,object,args,final,elasticsearch,security,exception,ese,final,boolean,contains,negotiate,with,token,if,t,instanceof,elasticsearch,security,exception,assert,elasticsearch,security,exception,t,status,rest,status,unauthorized,ese,elasticsearch,security,exception,t,if,ese,get,header,www,authenticate,null,ese,get,header,www,authenticate,is,empty,false,contains,negotiate,with,token,ese,get,header,www,authenticate,stream,any,match,s,s,null,s,region,matches,true,0,negotiate,0,negotiate,length,else,contains,negotiate,with,token,false,else,ese,authentication,error,message,t,args,contains,negotiate,with,token,false,default,failure,response,headers,entry,set,stream,for,each,e,if,contains,negotiate,with,token,e,get,key,equals,ignore,case,www,authenticate,return,ese,add,header,e,get,key,e,get,value,return,ese
DefaultAuthenticationFailureHandler -> private static Integer authSchemePriority(final String headerValue);1536314350;For given 'WWW-Authenticate' header value returns the priority based on_the auth-scheme. Lower number denotes more secure and preferred_auth-scheme than the higher number.__@param headerValue string starting with auth-scheme name_@return integer value denoting priority for given auth scheme.;private static Integer authSchemePriority(final String headerValue) {_        if (headerValue.regionMatches(true, 0, "negotiate", 0, "negotiate".length())) {_            return 0__        } else if (headerValue.regionMatches(true, 0, "bearer", 0, "bearer".length())) {_            return 1__        } else if (headerValue.regionMatches(true, 0, "basic", 0, "basic".length())) {_            return 2__        } else {_            return 3__        }_    };for,given,www,authenticate,header,value,returns,the,priority,based,on,the,auth,scheme,lower,number,denotes,more,secure,and,preferred,auth,scheme,than,the,higher,number,param,header,value,string,starting,with,auth,scheme,name,return,integer,value,denoting,priority,for,given,auth,scheme;private,static,integer,auth,scheme,priority,final,string,header,value,if,header,value,region,matches,true,0,negotiate,0,negotiate,length,return,0,else,if,header,value,region,matches,true,0,bearer,0,bearer,length,return,1,else,if,header,value,region,matches,true,0,basic,0,basic,length,return,2,else,return,3
DefaultAuthenticationFailureHandler -> private static Integer authSchemePriority(final String headerValue);1542240273;For given 'WWW-Authenticate' header value returns the priority based on_the auth-scheme. Lower number denotes more secure and preferred_auth-scheme than the higher number.__@param headerValue string starting with auth-scheme name_@return integer value denoting priority for given auth scheme.;private static Integer authSchemePriority(final String headerValue) {_        if (headerValue.regionMatches(true, 0, "negotiate", 0, "negotiate".length())) {_            return 0__        } else if (headerValue.regionMatches(true, 0, "bearer", 0, "bearer".length())) {_            return 1__        } else if (headerValue.regionMatches(true, 0, "basic", 0, "basic".length())) {_            return 2__        } else {_            return 3__        }_    };for,given,www,authenticate,header,value,returns,the,priority,based,on,the,auth,scheme,lower,number,denotes,more,secure,and,preferred,auth,scheme,than,the,higher,number,param,header,value,string,starting,with,auth,scheme,name,return,integer,value,denoting,priority,for,given,auth,scheme;private,static,integer,auth,scheme,priority,final,string,header,value,if,header,value,region,matches,true,0,negotiate,0,negotiate,length,return,0,else,if,header,value,region,matches,true,0,bearer,0,bearer,length,return,1,else,if,header,value,region,matches,true,0,basic,0,basic,length,return,2,else,return,3
DefaultAuthenticationFailureHandler -> private static Integer authSchemePriority(final String headerValue);1545971206;For given 'WWW-Authenticate' header value returns the priority based on_the auth-scheme. Lower number denotes more secure and preferred_auth-scheme than the higher number.__@param headerValue string starting with auth-scheme name_@return integer value denoting priority for given auth scheme.;private static Integer authSchemePriority(final String headerValue) {_        if (headerValue.regionMatches(true, 0, "negotiate", 0, "negotiate".length())) {_            return 0__        } else if (headerValue.regionMatches(true, 0, "bearer", 0, "bearer".length())) {_            return 1__        } else if (headerValue.regionMatches(true, 0, "basic", 0, "basic".length())) {_            return 2__        } else {_            return 3__        }_    };for,given,www,authenticate,header,value,returns,the,priority,based,on,the,auth,scheme,lower,number,denotes,more,secure,and,preferred,auth,scheme,than,the,higher,number,param,header,value,string,starting,with,auth,scheme,name,return,integer,value,denoting,priority,for,given,auth,scheme;private,static,integer,auth,scheme,priority,final,string,header,value,if,header,value,region,matches,true,0,negotiate,0,negotiate,length,return,0,else,if,header,value,region,matches,true,0,bearer,0,bearer,length,return,1,else,if,header,value,region,matches,true,0,basic,0,basic,length,return,2,else,return,3
DefaultAuthenticationFailureHandler -> private static Integer authSchemePriority(final String headerValue);1549336917;For given 'WWW-Authenticate' header value returns the priority based on_the auth-scheme. Lower number denotes more secure and preferred_auth-scheme than the higher number.__@param headerValue string starting with auth-scheme name_@return integer value denoting priority for given auth scheme.;private static Integer authSchemePriority(final String headerValue) {_        if (headerValue.regionMatches(true, 0, "negotiate", 0, "negotiate".length())) {_            return 0__        } else if (headerValue.regionMatches(true, 0, "bearer", 0, "bearer".length())) {_            return 1__        } else if (headerValue.regionMatches(true, 0, "apikey", 0, "apikey".length())) {_            return 2__        } else if (headerValue.regionMatches(true, 0, "basic", 0, "basic".length())) {_            return 3__        } else {_            return 4__        }_    };for,given,www,authenticate,header,value,returns,the,priority,based,on,the,auth,scheme,lower,number,denotes,more,secure,and,preferred,auth,scheme,than,the,higher,number,param,header,value,string,starting,with,auth,scheme,name,return,integer,value,denoting,priority,for,given,auth,scheme;private,static,integer,auth,scheme,priority,final,string,header,value,if,header,value,region,matches,true,0,negotiate,0,negotiate,length,return,0,else,if,header,value,region,matches,true,0,bearer,0,bearer,length,return,1,else,if,header,value,region,matches,true,0,apikey,0,apikey,length,return,2,else,if,header,value,region,matches,true,0,basic,0,basic,length,return,3,else,return,4
