commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(datafeedId).     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         out.writeBoolean(allowNoDatafeeds).     } }
false;public;0;3;;public String getDatafeedId() {     return datafeedId. }
false;public;0;3;;public boolean allowNoDatafeeds() {     return allowNoDatafeeds. }
false;public;1;3;;public void setAllowNoDatafeeds(boolean allowNoDatafeeds) {     this.allowNoDatafeeds = allowNoDatafeeds. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(datafeedId, allowNoDatafeeds). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(datafeedId, other.datafeedId) && Objects.equals(allowNoDatafeeds, other.allowNoDatafeeds). }
false;public;0;3;;public QueryPage<DatafeedConfig> getResponse() {     return datafeeds. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     datafeeds = new QueryPage<>(in, DatafeedConfig::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     datafeeds.writeTo(out). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     datafeeds.doXContentBody(builder, params).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(datafeeds). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(datafeeds, other.datafeeds). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
