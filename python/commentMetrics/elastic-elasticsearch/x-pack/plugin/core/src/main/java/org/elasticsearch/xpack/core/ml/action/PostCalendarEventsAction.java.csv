commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public,static;2;14;;public static Request parseRequest(String calendarId, XContentParser parser) throws IOException {     List<ScheduledEvent.Builder> events = PARSER.apply(parser, null).     for (ScheduledEvent.Builder event : events) {         if (event.getCalendarId() != null && event.getCalendarId().equals(calendarId) == false) {             throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.INCONSISTENT_ID, Calendar.ID.getPreferredName(), event.getCalendarId(), calendarId)).         }         // Set the calendar Id in case it is null         event.calendarId(calendarId).     }     return new Request(calendarId, events.stream().map(ScheduledEvent.Builder::build).collect(Collectors.toList())). }
false;public;0;3;;public String getCalendarId() {     return calendarId. }
false;public;0;3;;public List<ScheduledEvent> getScheduledEvents() {     return scheduledEvents. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     calendarId = in.readString().     scheduledEvents = in.readList(ScheduledEvent::new). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(calendarId).     out.writeList(scheduledEvents). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(calendarId, scheduledEvents). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(calendarId, other.calendarId) && Objects.equals(scheduledEvents, other.scheduledEvents). }
false;public;1;9;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     if (in.getVersion().before(Version.V_6_3_0)) {         // the acknowledged flag was removed         in.readBoolean().     }     in.readList(ScheduledEvent::new). }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     if (out.getVersion().before(Version.V_6_3_0)) {         // the acknowledged flag is no longer supported         out.writeBoolean(true).     }     out.writeList(scheduledEvents). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(EVENTS.getPreferredName(), scheduledEvents).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(scheduledEvents). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(scheduledEvents, other.scheduledEvents). }
