commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public Writeable.Reader<Response> getResponseReader() {     return Response::new. }
false;public;0;3;;public String[] getFollowerIndices() {     return followerIndices. }
false;public;1;3;;public void setFollowerIndices(String... followerIndices) {     this.followerIndices = followerIndices. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalStringArray(followerIndices). }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Request request = (Request) o.     return Arrays.equals(followerIndices, request.followerIndices). }
false;public;0;4;;@Override public int hashCode() {     return Arrays.hashCode(followerIndices). }
false;public;0;3;;public List<FollowerInfo> getFollowInfos() {     return followInfos. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeList(followInfos). }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startArray(FOLLOWER_INDICES_FIELD.getPreferredName()).     for (FollowerInfo followInfo : followInfos) {         followInfo.toXContent(builder, params).     }     builder.endArray().     builder.endObject().     return builder. }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Response response = (Response) o.     return Objects.equals(followInfos, response.followInfos). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(followInfos). }
false;public;0;3;;public String toString() {     return Strings.toString(this). }
false;public;0;3;;public String getFollowerIndex() {     return followerIndex. }
false;public;0;3;;public String getRemoteCluster() {     return remoteCluster. }
false;public;0;3;;public String getLeaderIndex() {     return leaderIndex. }
false;public;0;3;;public Status getStatus() {     return status. }
false;public;0;3;;public FollowParameters getParameters() {     return parameters. }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(followerIndex).     out.writeString(remoteCluster).     out.writeString(leaderIndex).     out.writeString(status.name).     out.writeOptionalWriteable(parameters). }
false;public;2;17;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(FOLLOWER_INDEX_FIELD.getPreferredName(), followerIndex).     builder.field(REMOTE_CLUSTER_FIELD.getPreferredName(), remoteCluster).     builder.field(LEADER_INDEX_FIELD.getPreferredName(), leaderIndex).     builder.field(STATUS_FIELD.getPreferredName(), status.name).     if (parameters != null) {         builder.startObject(PARAMETERS_FIELD.getPreferredName()).         {             parameters.toXContentFragment(builder).         }         builder.endObject().     }     builder.endObject().     return builder. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     FollowerInfo that = (FollowerInfo) o.     return Objects.equals(followerIndex, that.followerIndex) && Objects.equals(remoteCluster, that.remoteCluster) && Objects.equals(leaderIndex, that.leaderIndex) && status == that.status && Objects.equals(parameters, that.parameters). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(followerIndex, remoteCluster, leaderIndex, status, parameters). }
false;public;0;3;;public String toString() {     return Strings.toString(this). }
false;public,static;1;10;;public static Status fromString(String value) {     switch(value) {         case "active":             return Status.ACTIVE.         case "paused":             return Status.PAUSED.         default:             throw new IllegalArgumentException("unexpected status value [" + value + "]").     } }
