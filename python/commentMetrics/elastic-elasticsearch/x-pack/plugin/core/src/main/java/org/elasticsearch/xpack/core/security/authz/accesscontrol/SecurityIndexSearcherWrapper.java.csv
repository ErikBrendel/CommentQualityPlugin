# id;timestamp;commentText;codeText;commentWords;codeWords
SecurityIndexSearcherWrapper -> static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException;1524684173;Checks whether the role query contains queries we know can't be used as DLS role query.;static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException {_        if (queryBuilder instanceof TermsQueryBuilder) {_            TermsQueryBuilder termsQueryBuilder = (TermsQueryBuilder) queryBuilder__            if (termsQueryBuilder.termsLookup() != null) {_                throw new IllegalArgumentException("terms query with terms lookup isn't supported as part of a role query")__            }_        } else if (queryBuilder instanceof GeoShapeQueryBuilder) {_            GeoShapeQueryBuilder geoShapeQueryBuilder = (GeoShapeQueryBuilder) queryBuilder__            if (geoShapeQueryBuilder.shape() == null) {_                throw new IllegalArgumentException("geoshape query referring to indexed shapes isn't support as part of a role query")__            }_        } else if (queryBuilder.getName().equals("percolate")) {_            _            _            _            _            throw new IllegalArgumentException("percolate query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_child")) {_            throw new IllegalArgumentException("has_child query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_parent")) {_            throw new IllegalArgumentException("has_parent query isn't support as part of a role query")__        } else if (queryBuilder instanceof BoolQueryBuilder) {_            BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder) queryBuilder__            List<QueryBuilder> clauses = new ArrayList<>()__            clauses.addAll(boolQueryBuilder.filter())__            clauses.addAll(boolQueryBuilder.must())__            clauses.addAll(boolQueryBuilder.mustNot())__            clauses.addAll(boolQueryBuilder.should())__            for (QueryBuilder clause : clauses) {_                verifyRoleQuery(clause)__            }_        } else if (queryBuilder instanceof ConstantScoreQueryBuilder) {_            verifyRoleQuery(((ConstantScoreQueryBuilder) queryBuilder).innerQuery())__        } else if (queryBuilder instanceof FunctionScoreQueryBuilder) {_            verifyRoleQuery(((FunctionScoreQueryBuilder) queryBuilder).query())__        } else if (queryBuilder instanceof BoostingQueryBuilder) {_            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).negativeQuery())__            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).positiveQuery())__        }_    };checks,whether,the,role,query,contains,queries,we,know,can,t,be,used,as,dls,role,query;static,void,verify,role,query,query,builder,query,builder,throws,ioexception,if,query,builder,instanceof,terms,query,builder,terms,query,builder,terms,query,builder,terms,query,builder,query,builder,if,terms,query,builder,terms,lookup,null,throw,new,illegal,argument,exception,terms,query,with,terms,lookup,isn,t,supported,as,part,of,a,role,query,else,if,query,builder,instanceof,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,query,builder,if,geo,shape,query,builder,shape,null,throw,new,illegal,argument,exception,geoshape,query,referring,to,indexed,shapes,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,percolate,throw,new,illegal,argument,exception,percolate,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,instanceof,bool,query,builder,bool,query,builder,bool,query,builder,bool,query,builder,query,builder,list,query,builder,clauses,new,array,list,clauses,add,all,bool,query,builder,filter,clauses,add,all,bool,query,builder,must,clauses,add,all,bool,query,builder,must,not,clauses,add,all,bool,query,builder,should,for,query,builder,clause,clauses,verify,role,query,clause,else,if,query,builder,instanceof,constant,score,query,builder,verify,role,query,constant,score,query,builder,query,builder,inner,query,else,if,query,builder,instanceof,function,score,query,builder,verify,role,query,function,score,query,builder,query,builder,query,else,if,query,builder,instanceof,boosting,query,builder,verify,role,query,boosting,query,builder,query,builder,negative,query,verify,role,query,boosting,query,builder,query,builder,positive,query
SecurityIndexSearcherWrapper -> static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException;1533295538;Checks whether the role query contains queries we know can't be used as DLS role query.;static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException {_        if (queryBuilder instanceof TermsQueryBuilder) {_            TermsQueryBuilder termsQueryBuilder = (TermsQueryBuilder) queryBuilder__            if (termsQueryBuilder.termsLookup() != null) {_                throw new IllegalArgumentException("terms query with terms lookup isn't supported as part of a role query")__            }_        } else if (queryBuilder instanceof GeoShapeQueryBuilder) {_            GeoShapeQueryBuilder geoShapeQueryBuilder = (GeoShapeQueryBuilder) queryBuilder__            if (geoShapeQueryBuilder.shape() == null) {_                throw new IllegalArgumentException("geoshape query referring to indexed shapes isn't support as part of a role query")__            }_        } else if (queryBuilder.getName().equals("percolate")) {_            _            _            _            _            throw new IllegalArgumentException("percolate query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_child")) {_            throw new IllegalArgumentException("has_child query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_parent")) {_            throw new IllegalArgumentException("has_parent query isn't support as part of a role query")__        } else if (queryBuilder instanceof BoolQueryBuilder) {_            BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder) queryBuilder__            List<QueryBuilder> clauses = new ArrayList<>()__            clauses.addAll(boolQueryBuilder.filter())__            clauses.addAll(boolQueryBuilder.must())__            clauses.addAll(boolQueryBuilder.mustNot())__            clauses.addAll(boolQueryBuilder.should())__            for (QueryBuilder clause : clauses) {_                verifyRoleQuery(clause)__            }_        } else if (queryBuilder instanceof ConstantScoreQueryBuilder) {_            verifyRoleQuery(((ConstantScoreQueryBuilder) queryBuilder).innerQuery())__        } else if (queryBuilder instanceof FunctionScoreQueryBuilder) {_            verifyRoleQuery(((FunctionScoreQueryBuilder) queryBuilder).query())__        } else if (queryBuilder instanceof BoostingQueryBuilder) {_            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).negativeQuery())__            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).positiveQuery())__        }_    };checks,whether,the,role,query,contains,queries,we,know,can,t,be,used,as,dls,role,query;static,void,verify,role,query,query,builder,query,builder,throws,ioexception,if,query,builder,instanceof,terms,query,builder,terms,query,builder,terms,query,builder,terms,query,builder,query,builder,if,terms,query,builder,terms,lookup,null,throw,new,illegal,argument,exception,terms,query,with,terms,lookup,isn,t,supported,as,part,of,a,role,query,else,if,query,builder,instanceof,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,query,builder,if,geo,shape,query,builder,shape,null,throw,new,illegal,argument,exception,geoshape,query,referring,to,indexed,shapes,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,percolate,throw,new,illegal,argument,exception,percolate,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,instanceof,bool,query,builder,bool,query,builder,bool,query,builder,bool,query,builder,query,builder,list,query,builder,clauses,new,array,list,clauses,add,all,bool,query,builder,filter,clauses,add,all,bool,query,builder,must,clauses,add,all,bool,query,builder,must,not,clauses,add,all,bool,query,builder,should,for,query,builder,clause,clauses,verify,role,query,clause,else,if,query,builder,instanceof,constant,score,query,builder,verify,role,query,constant,score,query,builder,query,builder,inner,query,else,if,query,builder,instanceof,function,score,query,builder,verify,role,query,function,score,query,builder,query,builder,query,else,if,query,builder,instanceof,boosting,query,builder,verify,role,query,boosting,query,builder,query,builder,negative,query,verify,role,query,boosting,query,builder,query,builder,positive,query
SecurityIndexSearcherWrapper -> static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException;1533815246;Checks whether the role query contains queries we know can't be used as DLS role query.;static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException {_        if (queryBuilder instanceof TermsQueryBuilder) {_            TermsQueryBuilder termsQueryBuilder = (TermsQueryBuilder) queryBuilder__            if (termsQueryBuilder.termsLookup() != null) {_                throw new IllegalArgumentException("terms query with terms lookup isn't supported as part of a role query")__            }_        } else if (queryBuilder instanceof GeoShapeQueryBuilder) {_            GeoShapeQueryBuilder geoShapeQueryBuilder = (GeoShapeQueryBuilder) queryBuilder__            if (geoShapeQueryBuilder.shape() == null) {_                throw new IllegalArgumentException("geoshape query referring to indexed shapes isn't support as part of a role query")__            }_        } else if (queryBuilder.getName().equals("percolate")) {_            _            _            _            _            throw new IllegalArgumentException("percolate query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_child")) {_            throw new IllegalArgumentException("has_child query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_parent")) {_            throw new IllegalArgumentException("has_parent query isn't support as part of a role query")__        } else if (queryBuilder instanceof BoolQueryBuilder) {_            BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder) queryBuilder__            List<QueryBuilder> clauses = new ArrayList<>()__            clauses.addAll(boolQueryBuilder.filter())__            clauses.addAll(boolQueryBuilder.must())__            clauses.addAll(boolQueryBuilder.mustNot())__            clauses.addAll(boolQueryBuilder.should())__            for (QueryBuilder clause : clauses) {_                verifyRoleQuery(clause)__            }_        } else if (queryBuilder instanceof ConstantScoreQueryBuilder) {_            verifyRoleQuery(((ConstantScoreQueryBuilder) queryBuilder).innerQuery())__        } else if (queryBuilder instanceof FunctionScoreQueryBuilder) {_            verifyRoleQuery(((FunctionScoreQueryBuilder) queryBuilder).query())__        } else if (queryBuilder instanceof BoostingQueryBuilder) {_            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).negativeQuery())__            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).positiveQuery())__        }_    };checks,whether,the,role,query,contains,queries,we,know,can,t,be,used,as,dls,role,query;static,void,verify,role,query,query,builder,query,builder,throws,ioexception,if,query,builder,instanceof,terms,query,builder,terms,query,builder,terms,query,builder,terms,query,builder,query,builder,if,terms,query,builder,terms,lookup,null,throw,new,illegal,argument,exception,terms,query,with,terms,lookup,isn,t,supported,as,part,of,a,role,query,else,if,query,builder,instanceof,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,query,builder,if,geo,shape,query,builder,shape,null,throw,new,illegal,argument,exception,geoshape,query,referring,to,indexed,shapes,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,percolate,throw,new,illegal,argument,exception,percolate,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,instanceof,bool,query,builder,bool,query,builder,bool,query,builder,bool,query,builder,query,builder,list,query,builder,clauses,new,array,list,clauses,add,all,bool,query,builder,filter,clauses,add,all,bool,query,builder,must,clauses,add,all,bool,query,builder,must,not,clauses,add,all,bool,query,builder,should,for,query,builder,clause,clauses,verify,role,query,clause,else,if,query,builder,instanceof,constant,score,query,builder,verify,role,query,constant,score,query,builder,query,builder,inner,query,else,if,query,builder,instanceof,function,score,query,builder,verify,role,query,function,score,query,builder,query,builder,query,else,if,query,builder,instanceof,boosting,query,builder,verify,role,query,boosting,query,builder,query,builder,negative,query,verify,role,query,boosting,query,builder,query,builder,positive,query
SecurityIndexSearcherWrapper -> static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException;1535552903;Checks whether the role query contains queries we know can't be used as DLS role query.;static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException {_        if (queryBuilder instanceof TermsQueryBuilder) {_            TermsQueryBuilder termsQueryBuilder = (TermsQueryBuilder) queryBuilder__            if (termsQueryBuilder.termsLookup() != null) {_                throw new IllegalArgumentException("terms query with terms lookup isn't supported as part of a role query")__            }_        } else if (queryBuilder instanceof GeoShapeQueryBuilder) {_            GeoShapeQueryBuilder geoShapeQueryBuilder = (GeoShapeQueryBuilder) queryBuilder__            if (geoShapeQueryBuilder.shape() == null) {_                throw new IllegalArgumentException("geoshape query referring to indexed shapes isn't support as part of a role query")__            }_        } else if (queryBuilder.getName().equals("percolate")) {_            _            _            _            _            throw new IllegalArgumentException("percolate query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_child")) {_            throw new IllegalArgumentException("has_child query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_parent")) {_            throw new IllegalArgumentException("has_parent query isn't support as part of a role query")__        } else if (queryBuilder instanceof BoolQueryBuilder) {_            BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder) queryBuilder__            List<QueryBuilder> clauses = new ArrayList<>()__            clauses.addAll(boolQueryBuilder.filter())__            clauses.addAll(boolQueryBuilder.must())__            clauses.addAll(boolQueryBuilder.mustNot())__            clauses.addAll(boolQueryBuilder.should())__            for (QueryBuilder clause : clauses) {_                verifyRoleQuery(clause)__            }_        } else if (queryBuilder instanceof ConstantScoreQueryBuilder) {_            verifyRoleQuery(((ConstantScoreQueryBuilder) queryBuilder).innerQuery())__        } else if (queryBuilder instanceof FunctionScoreQueryBuilder) {_            verifyRoleQuery(((FunctionScoreQueryBuilder) queryBuilder).query())__        } else if (queryBuilder instanceof BoostingQueryBuilder) {_            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).negativeQuery())__            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).positiveQuery())__        }_    };checks,whether,the,role,query,contains,queries,we,know,can,t,be,used,as,dls,role,query;static,void,verify,role,query,query,builder,query,builder,throws,ioexception,if,query,builder,instanceof,terms,query,builder,terms,query,builder,terms,query,builder,terms,query,builder,query,builder,if,terms,query,builder,terms,lookup,null,throw,new,illegal,argument,exception,terms,query,with,terms,lookup,isn,t,supported,as,part,of,a,role,query,else,if,query,builder,instanceof,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,query,builder,if,geo,shape,query,builder,shape,null,throw,new,illegal,argument,exception,geoshape,query,referring,to,indexed,shapes,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,percolate,throw,new,illegal,argument,exception,percolate,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,instanceof,bool,query,builder,bool,query,builder,bool,query,builder,bool,query,builder,query,builder,list,query,builder,clauses,new,array,list,clauses,add,all,bool,query,builder,filter,clauses,add,all,bool,query,builder,must,clauses,add,all,bool,query,builder,must,not,clauses,add,all,bool,query,builder,should,for,query,builder,clause,clauses,verify,role,query,clause,else,if,query,builder,instanceof,constant,score,query,builder,verify,role,query,constant,score,query,builder,query,builder,inner,query,else,if,query,builder,instanceof,function,score,query,builder,verify,role,query,function,score,query,builder,query,builder,query,else,if,query,builder,instanceof,boosting,query,builder,verify,role,query,boosting,query,builder,query,builder,negative,query,verify,role,query,boosting,query,builder,query,builder,positive,query
SecurityIndexSearcherWrapper -> static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException;1536314350;Checks whether the role query contains queries we know can't be used as DLS role query.;static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException {_        if (queryBuilder instanceof TermsQueryBuilder) {_            TermsQueryBuilder termsQueryBuilder = (TermsQueryBuilder) queryBuilder__            if (termsQueryBuilder.termsLookup() != null) {_                throw new IllegalArgumentException("terms query with terms lookup isn't supported as part of a role query")__            }_        } else if (queryBuilder instanceof GeoShapeQueryBuilder) {_            GeoShapeQueryBuilder geoShapeQueryBuilder = (GeoShapeQueryBuilder) queryBuilder__            if (geoShapeQueryBuilder.shape() == null) {_                throw new IllegalArgumentException("geoshape query referring to indexed shapes isn't support as part of a role query")__            }_        } else if (queryBuilder.getName().equals("percolate")) {_            _            _            _            _            throw new IllegalArgumentException("percolate query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_child")) {_            throw new IllegalArgumentException("has_child query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_parent")) {_            throw new IllegalArgumentException("has_parent query isn't support as part of a role query")__        } else if (queryBuilder instanceof BoolQueryBuilder) {_            BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder) queryBuilder__            List<QueryBuilder> clauses = new ArrayList<>()__            clauses.addAll(boolQueryBuilder.filter())__            clauses.addAll(boolQueryBuilder.must())__            clauses.addAll(boolQueryBuilder.mustNot())__            clauses.addAll(boolQueryBuilder.should())__            for (QueryBuilder clause : clauses) {_                verifyRoleQuery(clause)__            }_        } else if (queryBuilder instanceof ConstantScoreQueryBuilder) {_            verifyRoleQuery(((ConstantScoreQueryBuilder) queryBuilder).innerQuery())__        } else if (queryBuilder instanceof FunctionScoreQueryBuilder) {_            verifyRoleQuery(((FunctionScoreQueryBuilder) queryBuilder).query())__        } else if (queryBuilder instanceof BoostingQueryBuilder) {_            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).negativeQuery())__            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).positiveQuery())__        }_    };checks,whether,the,role,query,contains,queries,we,know,can,t,be,used,as,dls,role,query;static,void,verify,role,query,query,builder,query,builder,throws,ioexception,if,query,builder,instanceof,terms,query,builder,terms,query,builder,terms,query,builder,terms,query,builder,query,builder,if,terms,query,builder,terms,lookup,null,throw,new,illegal,argument,exception,terms,query,with,terms,lookup,isn,t,supported,as,part,of,a,role,query,else,if,query,builder,instanceof,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,query,builder,if,geo,shape,query,builder,shape,null,throw,new,illegal,argument,exception,geoshape,query,referring,to,indexed,shapes,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,percolate,throw,new,illegal,argument,exception,percolate,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,instanceof,bool,query,builder,bool,query,builder,bool,query,builder,bool,query,builder,query,builder,list,query,builder,clauses,new,array,list,clauses,add,all,bool,query,builder,filter,clauses,add,all,bool,query,builder,must,clauses,add,all,bool,query,builder,must,not,clauses,add,all,bool,query,builder,should,for,query,builder,clause,clauses,verify,role,query,clause,else,if,query,builder,instanceof,constant,score,query,builder,verify,role,query,constant,score,query,builder,query,builder,inner,query,else,if,query,builder,instanceof,function,score,query,builder,verify,role,query,function,score,query,builder,query,builder,query,else,if,query,builder,instanceof,boosting,query,builder,verify,role,query,boosting,query,builder,query,builder,negative,query,verify,role,query,boosting,query,builder,query,builder,positive,query
SecurityIndexSearcherWrapper -> static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException;1536828374;Checks whether the role query contains queries we know can't be used as DLS role query.;static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException {_        if (queryBuilder instanceof TermsQueryBuilder) {_            TermsQueryBuilder termsQueryBuilder = (TermsQueryBuilder) queryBuilder__            if (termsQueryBuilder.termsLookup() != null) {_                throw new IllegalArgumentException("terms query with terms lookup isn't supported as part of a role query")__            }_        } else if (queryBuilder instanceof GeoShapeQueryBuilder) {_            GeoShapeQueryBuilder geoShapeQueryBuilder = (GeoShapeQueryBuilder) queryBuilder__            if (geoShapeQueryBuilder.shape() == null) {_                throw new IllegalArgumentException("geoshape query referring to indexed shapes isn't support as part of a role query")__            }_        } else if (queryBuilder.getName().equals("percolate")) {_            _            _            _            _            throw new IllegalArgumentException("percolate query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_child")) {_            throw new IllegalArgumentException("has_child query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_parent")) {_            throw new IllegalArgumentException("has_parent query isn't support as part of a role query")__        } else if (queryBuilder instanceof BoolQueryBuilder) {_            BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder) queryBuilder__            List<QueryBuilder> clauses = new ArrayList<>()__            clauses.addAll(boolQueryBuilder.filter())__            clauses.addAll(boolQueryBuilder.must())__            clauses.addAll(boolQueryBuilder.mustNot())__            clauses.addAll(boolQueryBuilder.should())__            for (QueryBuilder clause : clauses) {_                verifyRoleQuery(clause)__            }_        } else if (queryBuilder instanceof ConstantScoreQueryBuilder) {_            verifyRoleQuery(((ConstantScoreQueryBuilder) queryBuilder).innerQuery())__        } else if (queryBuilder instanceof FunctionScoreQueryBuilder) {_            verifyRoleQuery(((FunctionScoreQueryBuilder) queryBuilder).query())__        } else if (queryBuilder instanceof BoostingQueryBuilder) {_            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).negativeQuery())__            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).positiveQuery())__        }_    };checks,whether,the,role,query,contains,queries,we,know,can,t,be,used,as,dls,role,query;static,void,verify,role,query,query,builder,query,builder,throws,ioexception,if,query,builder,instanceof,terms,query,builder,terms,query,builder,terms,query,builder,terms,query,builder,query,builder,if,terms,query,builder,terms,lookup,null,throw,new,illegal,argument,exception,terms,query,with,terms,lookup,isn,t,supported,as,part,of,a,role,query,else,if,query,builder,instanceof,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,query,builder,if,geo,shape,query,builder,shape,null,throw,new,illegal,argument,exception,geoshape,query,referring,to,indexed,shapes,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,percolate,throw,new,illegal,argument,exception,percolate,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,instanceof,bool,query,builder,bool,query,builder,bool,query,builder,bool,query,builder,query,builder,list,query,builder,clauses,new,array,list,clauses,add,all,bool,query,builder,filter,clauses,add,all,bool,query,builder,must,clauses,add,all,bool,query,builder,must,not,clauses,add,all,bool,query,builder,should,for,query,builder,clause,clauses,verify,role,query,clause,else,if,query,builder,instanceof,constant,score,query,builder,verify,role,query,constant,score,query,builder,query,builder,inner,query,else,if,query,builder,instanceof,function,score,query,builder,verify,role,query,function,score,query,builder,query,builder,query,else,if,query,builder,instanceof,boosting,query,builder,verify,role,query,boosting,query,builder,query,builder,negative,query,verify,role,query,boosting,query,builder,query,builder,positive,query
SecurityIndexSearcherWrapper -> static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException;1538170812;Checks whether the role query contains queries we know can't be used as DLS role query.;static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException {_        if (queryBuilder instanceof TermsQueryBuilder) {_            TermsQueryBuilder termsQueryBuilder = (TermsQueryBuilder) queryBuilder__            if (termsQueryBuilder.termsLookup() != null) {_                throw new IllegalArgumentException("terms query with terms lookup isn't supported as part of a role query")__            }_        } else if (queryBuilder instanceof GeoShapeQueryBuilder) {_            GeoShapeQueryBuilder geoShapeQueryBuilder = (GeoShapeQueryBuilder) queryBuilder__            if (geoShapeQueryBuilder.shape() == null) {_                throw new IllegalArgumentException("geoshape query referring to indexed shapes isn't support as part of a role query")__            }_        } else if (queryBuilder.getName().equals("percolate")) {_            _            _            _            _            throw new IllegalArgumentException("percolate query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_child")) {_            throw new IllegalArgumentException("has_child query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_parent")) {_            throw new IllegalArgumentException("has_parent query isn't support as part of a role query")__        } else if (queryBuilder instanceof BoolQueryBuilder) {_            BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder) queryBuilder__            List<QueryBuilder> clauses = new ArrayList<>()__            clauses.addAll(boolQueryBuilder.filter())__            clauses.addAll(boolQueryBuilder.must())__            clauses.addAll(boolQueryBuilder.mustNot())__            clauses.addAll(boolQueryBuilder.should())__            for (QueryBuilder clause : clauses) {_                verifyRoleQuery(clause)__            }_        } else if (queryBuilder instanceof ConstantScoreQueryBuilder) {_            verifyRoleQuery(((ConstantScoreQueryBuilder) queryBuilder).innerQuery())__        } else if (queryBuilder instanceof FunctionScoreQueryBuilder) {_            verifyRoleQuery(((FunctionScoreQueryBuilder) queryBuilder).query())__        } else if (queryBuilder instanceof BoostingQueryBuilder) {_            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).negativeQuery())__            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).positiveQuery())__        }_    };checks,whether,the,role,query,contains,queries,we,know,can,t,be,used,as,dls,role,query;static,void,verify,role,query,query,builder,query,builder,throws,ioexception,if,query,builder,instanceof,terms,query,builder,terms,query,builder,terms,query,builder,terms,query,builder,query,builder,if,terms,query,builder,terms,lookup,null,throw,new,illegal,argument,exception,terms,query,with,terms,lookup,isn,t,supported,as,part,of,a,role,query,else,if,query,builder,instanceof,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,query,builder,if,geo,shape,query,builder,shape,null,throw,new,illegal,argument,exception,geoshape,query,referring,to,indexed,shapes,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,percolate,throw,new,illegal,argument,exception,percolate,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,instanceof,bool,query,builder,bool,query,builder,bool,query,builder,bool,query,builder,query,builder,list,query,builder,clauses,new,array,list,clauses,add,all,bool,query,builder,filter,clauses,add,all,bool,query,builder,must,clauses,add,all,bool,query,builder,must,not,clauses,add,all,bool,query,builder,should,for,query,builder,clause,clauses,verify,role,query,clause,else,if,query,builder,instanceof,constant,score,query,builder,verify,role,query,constant,score,query,builder,query,builder,inner,query,else,if,query,builder,instanceof,function,score,query,builder,verify,role,query,function,score,query,builder,query,builder,query,else,if,query,builder,instanceof,boosting,query,builder,verify,role,query,boosting,query,builder,query,builder,negative,query,verify,role,query,boosting,query,builder,query,builder,positive,query
SecurityIndexSearcherWrapper -> static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException;1543834151;Checks whether the role query contains queries we know can't be used as DLS role query.;static void verifyRoleQuery(QueryBuilder queryBuilder) throws IOException {_        if (queryBuilder instanceof TermsQueryBuilder) {_            TermsQueryBuilder termsQueryBuilder = (TermsQueryBuilder) queryBuilder__            if (termsQueryBuilder.termsLookup() != null) {_                throw new IllegalArgumentException("terms query with terms lookup isn't supported as part of a role query")__            }_        } else if (queryBuilder instanceof GeoShapeQueryBuilder) {_            GeoShapeQueryBuilder geoShapeQueryBuilder = (GeoShapeQueryBuilder) queryBuilder__            if (geoShapeQueryBuilder.shape() == null) {_                throw new IllegalArgumentException("geoshape query referring to indexed shapes isn't support as part of a role query")__            }_        } else if (queryBuilder.getName().equals("percolate")) {_            _            _            _            _            throw new IllegalArgumentException("percolate query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_child")) {_            throw new IllegalArgumentException("has_child query isn't support as part of a role query")__        } else if (queryBuilder.getName().equals("has_parent")) {_            throw new IllegalArgumentException("has_parent query isn't support as part of a role query")__        } else if (queryBuilder instanceof BoolQueryBuilder) {_            BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder) queryBuilder__            List<QueryBuilder> clauses = new ArrayList<>()__            clauses.addAll(boolQueryBuilder.filter())__            clauses.addAll(boolQueryBuilder.must())__            clauses.addAll(boolQueryBuilder.mustNot())__            clauses.addAll(boolQueryBuilder.should())__            for (QueryBuilder clause : clauses) {_                verifyRoleQuery(clause)__            }_        } else if (queryBuilder instanceof ConstantScoreQueryBuilder) {_            verifyRoleQuery(((ConstantScoreQueryBuilder) queryBuilder).innerQuery())__        } else if (queryBuilder instanceof FunctionScoreQueryBuilder) {_            verifyRoleQuery(((FunctionScoreQueryBuilder) queryBuilder).query())__        } else if (queryBuilder instanceof BoostingQueryBuilder) {_            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).negativeQuery())__            verifyRoleQuery(((BoostingQueryBuilder) queryBuilder).positiveQuery())__        }_    };checks,whether,the,role,query,contains,queries,we,know,can,t,be,used,as,dls,role,query;static,void,verify,role,query,query,builder,query,builder,throws,ioexception,if,query,builder,instanceof,terms,query,builder,terms,query,builder,terms,query,builder,terms,query,builder,query,builder,if,terms,query,builder,terms,lookup,null,throw,new,illegal,argument,exception,terms,query,with,terms,lookup,isn,t,supported,as,part,of,a,role,query,else,if,query,builder,instanceof,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,geo,shape,query,builder,query,builder,if,geo,shape,query,builder,shape,null,throw,new,illegal,argument,exception,geoshape,query,referring,to,indexed,shapes,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,percolate,throw,new,illegal,argument,exception,percolate,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,get,name,equals,throw,new,illegal,argument,exception,query,isn,t,support,as,part,of,a,role,query,else,if,query,builder,instanceof,bool,query,builder,bool,query,builder,bool,query,builder,bool,query,builder,query,builder,list,query,builder,clauses,new,array,list,clauses,add,all,bool,query,builder,filter,clauses,add,all,bool,query,builder,must,clauses,add,all,bool,query,builder,must,not,clauses,add,all,bool,query,builder,should,for,query,builder,clause,clauses,verify,role,query,clause,else,if,query,builder,instanceof,constant,score,query,builder,verify,role,query,constant,score,query,builder,query,builder,inner,query,else,if,query,builder,instanceof,function,score,query,builder,verify,role,query,function,score,query,builder,query,builder,query,else,if,query,builder,instanceof,boosting,query,builder,verify,role,query,boosting,query,builder,query,builder,negative,query,verify,role,query,boosting,query,builder,query,builder,positive,query
SecurityIndexSearcherWrapper -> static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)             throws IOException;1524684173;Fall back validation that verifies that queries during rewrite don't use_the client to make remote calls. In the case of DLS this can cause a dead_lock if DLS is also applied on these remote calls. For example in the_case of terms query with lookup, this can cause recursive execution of_the DLS query until the get thread pool has been exhausted:_https://github.com/elastic/x-plugins/issues/3145;static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)_            throws IOException {_        QueryRewriteContext copy = new QueryRewriteContext(_                original.getXContentRegistry(), original.getWriteableRegistry(), null, original::nowInMillis)__        Rewriteable.rewrite(queryBuilder, copy)__        if (copy.hasAsyncActions()) {_            throw new IllegalStateException("role queries are not allowed to execute additional requests")__        }_    };fall,back,validation,that,verifies,that,queries,during,rewrite,don,t,use,the,client,to,make,remote,calls,in,the,case,of,dls,this,can,cause,a,dead,lock,if,dls,is,also,applied,on,these,remote,calls,for,example,in,the,case,of,terms,query,with,lookup,this,can,cause,recursive,execution,of,the,dls,query,until,the,get,thread,pool,has,been,exhausted,https,github,com,elastic,x,plugins,issues,3145;static,void,fail,if,query,uses,client,query,builder,query,builder,query,rewrite,context,original,throws,ioexception,query,rewrite,context,copy,new,query,rewrite,context,original,get,xcontent,registry,original,get,writeable,registry,null,original,now,in,millis,rewriteable,rewrite,query,builder,copy,if,copy,has,async,actions,throw,new,illegal,state,exception,role,queries,are,not,allowed,to,execute,additional,requests
SecurityIndexSearcherWrapper -> static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)             throws IOException;1533295538;Fall back validation that verifies that queries during rewrite don't use_the client to make remote calls. In the case of DLS this can cause a dead_lock if DLS is also applied on these remote calls. For example in the_case of terms query with lookup, this can cause recursive execution of_the DLS query until the get thread pool has been exhausted:_https://github.com/elastic/x-plugins/issues/3145;static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)_            throws IOException {_        QueryRewriteContext copy = new QueryRewriteContext(_                original.getXContentRegistry(), original.getWriteableRegistry(), null, original::nowInMillis)__        Rewriteable.rewrite(queryBuilder, copy)__        if (copy.hasAsyncActions()) {_            throw new IllegalStateException("role queries are not allowed to execute additional requests")__        }_    };fall,back,validation,that,verifies,that,queries,during,rewrite,don,t,use,the,client,to,make,remote,calls,in,the,case,of,dls,this,can,cause,a,dead,lock,if,dls,is,also,applied,on,these,remote,calls,for,example,in,the,case,of,terms,query,with,lookup,this,can,cause,recursive,execution,of,the,dls,query,until,the,get,thread,pool,has,been,exhausted,https,github,com,elastic,x,plugins,issues,3145;static,void,fail,if,query,uses,client,query,builder,query,builder,query,rewrite,context,original,throws,ioexception,query,rewrite,context,copy,new,query,rewrite,context,original,get,xcontent,registry,original,get,writeable,registry,null,original,now,in,millis,rewriteable,rewrite,query,builder,copy,if,copy,has,async,actions,throw,new,illegal,state,exception,role,queries,are,not,allowed,to,execute,additional,requests
SecurityIndexSearcherWrapper -> static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)             throws IOException;1533815246;Fall back validation that verifies that queries during rewrite don't use_the client to make remote calls. In the case of DLS this can cause a dead_lock if DLS is also applied on these remote calls. For example in the_case of terms query with lookup, this can cause recursive execution of_the DLS query until the get thread pool has been exhausted:_https://github.com/elastic/x-plugins/issues/3145;static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)_            throws IOException {_        QueryRewriteContext copy = new QueryRewriteContext(_                original.getXContentRegistry(), original.getWriteableRegistry(), null, original::nowInMillis)__        Rewriteable.rewrite(queryBuilder, copy)__        if (copy.hasAsyncActions()) {_            throw new IllegalStateException("role queries are not allowed to execute additional requests")__        }_    };fall,back,validation,that,verifies,that,queries,during,rewrite,don,t,use,the,client,to,make,remote,calls,in,the,case,of,dls,this,can,cause,a,dead,lock,if,dls,is,also,applied,on,these,remote,calls,for,example,in,the,case,of,terms,query,with,lookup,this,can,cause,recursive,execution,of,the,dls,query,until,the,get,thread,pool,has,been,exhausted,https,github,com,elastic,x,plugins,issues,3145;static,void,fail,if,query,uses,client,query,builder,query,builder,query,rewrite,context,original,throws,ioexception,query,rewrite,context,copy,new,query,rewrite,context,original,get,xcontent,registry,original,get,writeable,registry,null,original,now,in,millis,rewriteable,rewrite,query,builder,copy,if,copy,has,async,actions,throw,new,illegal,state,exception,role,queries,are,not,allowed,to,execute,additional,requests
SecurityIndexSearcherWrapper -> static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)             throws IOException;1535552903;Fall back validation that verifies that queries during rewrite don't use_the client to make remote calls. In the case of DLS this can cause a dead_lock if DLS is also applied on these remote calls. For example in the_case of terms query with lookup, this can cause recursive execution of_the DLS query until the get thread pool has been exhausted:_https://github.com/elastic/x-plugins/issues/3145;static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)_            throws IOException {_        QueryRewriteContext copy = new QueryRewriteContext(_                original.getXContentRegistry(), original.getWriteableRegistry(), null, original::nowInMillis)__        Rewriteable.rewrite(queryBuilder, copy)__        if (copy.hasAsyncActions()) {_            throw new IllegalStateException("role queries are not allowed to execute additional requests")__        }_    };fall,back,validation,that,verifies,that,queries,during,rewrite,don,t,use,the,client,to,make,remote,calls,in,the,case,of,dls,this,can,cause,a,dead,lock,if,dls,is,also,applied,on,these,remote,calls,for,example,in,the,case,of,terms,query,with,lookup,this,can,cause,recursive,execution,of,the,dls,query,until,the,get,thread,pool,has,been,exhausted,https,github,com,elastic,x,plugins,issues,3145;static,void,fail,if,query,uses,client,query,builder,query,builder,query,rewrite,context,original,throws,ioexception,query,rewrite,context,copy,new,query,rewrite,context,original,get,xcontent,registry,original,get,writeable,registry,null,original,now,in,millis,rewriteable,rewrite,query,builder,copy,if,copy,has,async,actions,throw,new,illegal,state,exception,role,queries,are,not,allowed,to,execute,additional,requests
SecurityIndexSearcherWrapper -> static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)             throws IOException;1536314350;Fall back validation that verifies that queries during rewrite don't use_the client to make remote calls. In the case of DLS this can cause a dead_lock if DLS is also applied on these remote calls. For example in the_case of terms query with lookup, this can cause recursive execution of_the DLS query until the get thread pool has been exhausted:_https://github.com/elastic/x-plugins/issues/3145;static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)_            throws IOException {_        QueryRewriteContext copy = new QueryRewriteContext(_                original.getXContentRegistry(), original.getWriteableRegistry(), null, original::nowInMillis)__        Rewriteable.rewrite(queryBuilder, copy)__        if (copy.hasAsyncActions()) {_            throw new IllegalStateException("role queries are not allowed to execute additional requests")__        }_    };fall,back,validation,that,verifies,that,queries,during,rewrite,don,t,use,the,client,to,make,remote,calls,in,the,case,of,dls,this,can,cause,a,dead,lock,if,dls,is,also,applied,on,these,remote,calls,for,example,in,the,case,of,terms,query,with,lookup,this,can,cause,recursive,execution,of,the,dls,query,until,the,get,thread,pool,has,been,exhausted,https,github,com,elastic,x,plugins,issues,3145;static,void,fail,if,query,uses,client,query,builder,query,builder,query,rewrite,context,original,throws,ioexception,query,rewrite,context,copy,new,query,rewrite,context,original,get,xcontent,registry,original,get,writeable,registry,null,original,now,in,millis,rewriteable,rewrite,query,builder,copy,if,copy,has,async,actions,throw,new,illegal,state,exception,role,queries,are,not,allowed,to,execute,additional,requests
SecurityIndexSearcherWrapper -> static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)             throws IOException;1536828374;Fall back validation that verifies that queries during rewrite don't use_the client to make remote calls. In the case of DLS this can cause a dead_lock if DLS is also applied on these remote calls. For example in the_case of terms query with lookup, this can cause recursive execution of_the DLS query until the get thread pool has been exhausted:_https://github.com/elastic/x-plugins/issues/3145;static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)_            throws IOException {_        QueryRewriteContext copy = new QueryRewriteContext(_                original.getXContentRegistry(), original.getWriteableRegistry(), null, original::nowInMillis)__        Rewriteable.rewrite(queryBuilder, copy)__        if (copy.hasAsyncActions()) {_            throw new IllegalStateException("role queries are not allowed to execute additional requests")__        }_    };fall,back,validation,that,verifies,that,queries,during,rewrite,don,t,use,the,client,to,make,remote,calls,in,the,case,of,dls,this,can,cause,a,dead,lock,if,dls,is,also,applied,on,these,remote,calls,for,example,in,the,case,of,terms,query,with,lookup,this,can,cause,recursive,execution,of,the,dls,query,until,the,get,thread,pool,has,been,exhausted,https,github,com,elastic,x,plugins,issues,3145;static,void,fail,if,query,uses,client,query,builder,query,builder,query,rewrite,context,original,throws,ioexception,query,rewrite,context,copy,new,query,rewrite,context,original,get,xcontent,registry,original,get,writeable,registry,null,original,now,in,millis,rewriteable,rewrite,query,builder,copy,if,copy,has,async,actions,throw,new,illegal,state,exception,role,queries,are,not,allowed,to,execute,additional,requests
SecurityIndexSearcherWrapper -> static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)             throws IOException;1538170812;Fall back validation that verifies that queries during rewrite don't use_the client to make remote calls. In the case of DLS this can cause a dead_lock if DLS is also applied on these remote calls. For example in the_case of terms query with lookup, this can cause recursive execution of_the DLS query until the get thread pool has been exhausted:_https://github.com/elastic/x-plugins/issues/3145;static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)_            throws IOException {_        QueryRewriteContext copy = new QueryRewriteContext(_                original.getXContentRegistry(), original.getWriteableRegistry(), null, original::nowInMillis)__        Rewriteable.rewrite(queryBuilder, copy)__        if (copy.hasAsyncActions()) {_            throw new IllegalStateException("role queries are not allowed to execute additional requests")__        }_    };fall,back,validation,that,verifies,that,queries,during,rewrite,don,t,use,the,client,to,make,remote,calls,in,the,case,of,dls,this,can,cause,a,dead,lock,if,dls,is,also,applied,on,these,remote,calls,for,example,in,the,case,of,terms,query,with,lookup,this,can,cause,recursive,execution,of,the,dls,query,until,the,get,thread,pool,has,been,exhausted,https,github,com,elastic,x,plugins,issues,3145;static,void,fail,if,query,uses,client,query,builder,query,builder,query,rewrite,context,original,throws,ioexception,query,rewrite,context,copy,new,query,rewrite,context,original,get,xcontent,registry,original,get,writeable,registry,null,original,now,in,millis,rewriteable,rewrite,query,builder,copy,if,copy,has,async,actions,throw,new,illegal,state,exception,role,queries,are,not,allowed,to,execute,additional,requests
SecurityIndexSearcherWrapper -> static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)             throws IOException;1543834151;Fall back validation that verifies that queries during rewrite don't use_the client to make remote calls. In the case of DLS this can cause a dead_lock if DLS is also applied on these remote calls. For example in the_case of terms query with lookup, this can cause recursive execution of_the DLS query until the get thread pool has been exhausted:_https://github.com/elastic/x-plugins/issues/3145;static void failIfQueryUsesClient(QueryBuilder queryBuilder, QueryRewriteContext original)_            throws IOException {_        QueryRewriteContext copy = new QueryRewriteContext(_                original.getXContentRegistry(), original.getWriteableRegistry(), null, original::nowInMillis)__        Rewriteable.rewrite(queryBuilder, copy)__        if (copy.hasAsyncActions()) {_            throw new IllegalStateException("role queries are not allowed to execute additional requests")__        }_    };fall,back,validation,that,verifies,that,queries,during,rewrite,don,t,use,the,client,to,make,remote,calls,in,the,case,of,dls,this,can,cause,a,dead,lock,if,dls,is,also,applied,on,these,remote,calls,for,example,in,the,case,of,terms,query,with,lookup,this,can,cause,recursive,execution,of,the,dls,query,until,the,get,thread,pool,has,been,exhausted,https,github,com,elastic,x,plugins,issues,3145;static,void,fail,if,query,uses,client,query,builder,query,builder,query,rewrite,context,original,throws,ioexception,query,rewrite,context,copy,new,query,rewrite,context,original,get,xcontent,registry,original,get,writeable,registry,null,original,now,in,millis,rewriteable,rewrite,query,builder,copy,if,copy,has,async,actions,throw,new,illegal,state,exception,role,queries,are,not,allowed,to,execute,additional,requests
