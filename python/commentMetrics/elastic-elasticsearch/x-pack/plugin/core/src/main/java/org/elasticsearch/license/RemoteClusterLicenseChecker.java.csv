# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteClusterLicenseChecker -> LicenseCheck -> public boolean isSuccess();1534848846;Test if this instance represents a successful license check.__@return true if this instance represents a successful license check, otherwise false;public boolean isSuccess() {_            return this == SUCCESS__        };test,if,this,instance,represents,a,successful,license,check,return,true,if,this,instance,represents,a,successful,license,check,otherwise,false;public,boolean,is,success,return,this,success
RemoteClusterLicenseChecker -> LicenseCheck -> public boolean isSuccess();1535965276;Test if this instance represents a successful license check.__@return true if this instance represents a successful license check, otherwise false;public boolean isSuccess() {_            return this == SUCCESS__        };test,if,this,instance,represents,a,successful,license,check,return,true,if,this,instance,represents,a,successful,license,check,otherwise,false;public,boolean,is,success,return,this,success
RemoteClusterLicenseChecker -> LicenseCheck -> public boolean isSuccess();1545296284;Test if this instance represents a successful license check.__@return true if this instance represents a successful license check, otherwise false;public boolean isSuccess() {_            return this == SUCCESS__        };test,if,this,instance,represents,a,successful,license,check,return,true,if,this,instance,represents,a,successful,license,check,otherwise,false;public,boolean,is,success,return,this,success
RemoteClusterLicenseChecker -> LicenseCheck -> public boolean isSuccess();1547561945;Test if this instance represents a successful license check.__@return true if this instance represents a successful license check, otherwise false;public boolean isSuccess() {_            return this == SUCCESS__        };test,if,this,instance,represents,a,successful,license,check,return,true,if,this,instance,represents,a,successful,license,check,otherwise,false;public,boolean,is,success,return,this,success
RemoteClusterLicenseChecker -> public static boolean containsRemoteIndex(final List<String> indices);1534848846;Predicate to test if the collection of index names contains any that represent the name of a remote index.__@param indices the collection of index names_@return true if the collection of index names contains a name that represents a remote index, otherwise false;public static boolean containsRemoteIndex(final List<String> indices) {_        return indices.stream().anyMatch(RemoteClusterLicenseChecker::isRemoteIndex)__    };predicate,to,test,if,the,collection,of,index,names,contains,any,that,represent,the,name,of,a,remote,index,param,indices,the,collection,of,index,names,return,true,if,the,collection,of,index,names,contains,a,name,that,represents,a,remote,index,otherwise,false;public,static,boolean,contains,remote,index,final,list,string,indices,return,indices,stream,any,match,remote,cluster,license,checker,is,remote,index
RemoteClusterLicenseChecker -> public static boolean containsRemoteIndex(final List<String> indices);1535965276;Predicate to test if the collection of index names contains any that represent the name of a remote index.__@param indices the collection of index names_@return true if the collection of index names contains a name that represents a remote index, otherwise false;public static boolean containsRemoteIndex(final List<String> indices) {_        return indices.stream().anyMatch(RemoteClusterLicenseChecker::isRemoteIndex)__    };predicate,to,test,if,the,collection,of,index,names,contains,any,that,represent,the,name,of,a,remote,index,param,indices,the,collection,of,index,names,return,true,if,the,collection,of,index,names,contains,a,name,that,represents,a,remote,index,otherwise,false;public,static,boolean,contains,remote,index,final,list,string,indices,return,indices,stream,any,match,remote,cluster,license,checker,is,remote,index
RemoteClusterLicenseChecker -> public static boolean containsRemoteIndex(final List<String> indices);1545296284;Predicate to test if the collection of index names contains any that represent the name of a remote index.__@param indices the collection of index names_@return true if the collection of index names contains a name that represents a remote index, otherwise false;public static boolean containsRemoteIndex(final List<String> indices) {_        return indices.stream().anyMatch(RemoteClusterLicenseChecker::isRemoteIndex)__    };predicate,to,test,if,the,collection,of,index,names,contains,any,that,represent,the,name,of,a,remote,index,param,indices,the,collection,of,index,names,return,true,if,the,collection,of,index,names,contains,a,name,that,represents,a,remote,index,otherwise,false;public,static,boolean,contains,remote,index,final,list,string,indices,return,indices,stream,any,match,remote,cluster,license,checker,is,remote,index
RemoteClusterLicenseChecker -> public static boolean containsRemoteIndex(final List<String> indices);1547561945;Predicate to test if the collection of index names contains any that represent the name of a remote index.__@param indices the collection of index names_@return true if the collection of index names contains a name that represents a remote index, otherwise false;public static boolean containsRemoteIndex(final List<String> indices) {_        return indices.stream().anyMatch(RemoteClusterLicenseChecker::isRemoteIndex)__    };predicate,to,test,if,the,collection,of,index,names,contains,any,that,represent,the,name,of,a,remote,index,param,indices,the,collection,of,index,names,return,true,if,the,collection,of,index,names,contains,a,name,that,represents,a,remote,index,otherwise,false;public,static,boolean,contains,remote,index,final,list,string,indices,return,indices,stream,any,match,remote,cluster,license,checker,is,remote,index
RemoteClusterLicenseChecker -> public static List<String> remoteIndices(final List<String> indices);1534848846;Filters the collection of index names for names that represent a remote index. Remote index names are of the form_{@code cluster_name:index_name}.__@param indices the collection of index names_@return list of index names that represent remote index names;public static List<String> remoteIndices(final List<String> indices) {_        return indices.stream().filter(RemoteClusterLicenseChecker::isRemoteIndex).collect(Collectors.toList())__    };filters,the,collection,of,index,names,for,names,that,represent,a,remote,index,remote,index,names,are,of,the,form,code,param,indices,the,collection,of,index,names,return,list,of,index,names,that,represent,remote,index,names;public,static,list,string,remote,indices,final,list,string,indices,return,indices,stream,filter,remote,cluster,license,checker,is,remote,index,collect,collectors,to,list
RemoteClusterLicenseChecker -> public static List<String> remoteIndices(final List<String> indices);1535965276;Filters the collection of index names for names that represent a remote index. Remote index names are of the form_{@code cluster_name:index_name}.__@param indices the collection of index names_@return list of index names that represent remote index names;public static List<String> remoteIndices(final List<String> indices) {_        return indices.stream().filter(RemoteClusterLicenseChecker::isRemoteIndex).collect(Collectors.toList())__    };filters,the,collection,of,index,names,for,names,that,represent,a,remote,index,remote,index,names,are,of,the,form,code,param,indices,the,collection,of,index,names,return,list,of,index,names,that,represent,remote,index,names;public,static,list,string,remote,indices,final,list,string,indices,return,indices,stream,filter,remote,cluster,license,checker,is,remote,index,collect,collectors,to,list
RemoteClusterLicenseChecker -> public static List<String> remoteIndices(final List<String> indices);1545296284;Filters the collection of index names for names that represent a remote index. Remote index names are of the form_{@code cluster_name:index_name}.__@param indices the collection of index names_@return list of index names that represent remote index names;public static List<String> remoteIndices(final List<String> indices) {_        return indices.stream().filter(RemoteClusterLicenseChecker::isRemoteIndex).collect(Collectors.toList())__    };filters,the,collection,of,index,names,for,names,that,represent,a,remote,index,remote,index,names,are,of,the,form,code,param,indices,the,collection,of,index,names,return,list,of,index,names,that,represent,remote,index,names;public,static,list,string,remote,indices,final,list,string,indices,return,indices,stream,filter,remote,cluster,license,checker,is,remote,index,collect,collectors,to,list
RemoteClusterLicenseChecker -> public static List<String> remoteIndices(final List<String> indices);1547561945;Filters the collection of index names for names that represent a remote index. Remote index names are of the form_{@code cluster_name:index_name}.__@param indices the collection of index names_@return list of index names that represent remote index names;public static List<String> remoteIndices(final List<String> indices) {_        return indices.stream().filter(RemoteClusterLicenseChecker::isRemoteIndex).collect(Collectors.toList())__    };filters,the,collection,of,index,names,for,names,that,represent,a,remote,index,remote,index,names,are,of,the,form,code,param,indices,the,collection,of,index,names,return,list,of,index,names,that,represent,remote,index,names;public,static,list,string,remote,indices,final,list,string,indices,return,indices,stream,filter,remote,cluster,license,checker,is,remote,index,collect,collectors,to,list
RemoteClusterLicenseChecker -> RemoteClusterLicenseInfo -> public XPackInfoResponse.LicenseInfo licenseInfo();1534848846;The license info of the remote cluster.__@return the license info;public XPackInfoResponse.LicenseInfo licenseInfo() {_            return licenseInfo__        };the,license,info,of,the,remote,cluster,return,the,license,info;public,xpack,info,response,license,info,license,info,return,license,info
RemoteClusterLicenseChecker -> RemoteClusterLicenseInfo -> public XPackInfoResponse.LicenseInfo licenseInfo();1535965276;The license info of the remote cluster.__@return the license info;public XPackInfoResponse.LicenseInfo licenseInfo() {_            return licenseInfo__        };the,license,info,of,the,remote,cluster,return,the,license,info;public,xpack,info,response,license,info,license,info,return,license,info
RemoteClusterLicenseChecker -> RemoteClusterLicenseInfo -> public XPackInfoResponse.LicenseInfo licenseInfo();1545296284;The license info of the remote cluster.__@return the license info;public XPackInfoResponse.LicenseInfo licenseInfo() {_            return licenseInfo__        };the,license,info,of,the,remote,cluster,return,the,license,info;public,xpack,info,response,license,info,license,info,return,license,info
RemoteClusterLicenseChecker -> RemoteClusterLicenseInfo -> public XPackInfoResponse.LicenseInfo licenseInfo();1547561945;The license info of the remote cluster.__@return the license info;public XPackInfoResponse.LicenseInfo licenseInfo() {_            return licenseInfo__        };the,license,info,of,the,remote,cluster,return,the,license,info;public,xpack,info,response,license,info,license,info,return,license,info
RemoteClusterLicenseChecker -> public RemoteClusterLicenseChecker(final Client client, final Predicate<License.OperationMode> predicate);1535965276;Constructs a remote cluster license checker with the specified license predicate for checking license compatibility. The predicate_does not need to check for the active license state as this is handled by the remote cluster license checker.__@param client    the client_@param predicate the license predicate;public RemoteClusterLicenseChecker(final Client client, final Predicate<License.OperationMode> predicate) {_        this.client = client__        this.predicate = predicate__    };constructs,a,remote,cluster,license,checker,with,the,specified,license,predicate,for,checking,license,compatibility,the,predicate,does,not,need,to,check,for,the,active,license,state,as,this,is,handled,by,the,remote,cluster,license,checker,param,client,the,client,param,predicate,the,license,predicate;public,remote,cluster,license,checker,final,client,client,final,predicate,license,operation,mode,predicate,this,client,client,this,predicate,predicate
RemoteClusterLicenseChecker -> public RemoteClusterLicenseChecker(final Client client, final Predicate<License.OperationMode> predicate);1545296284;Constructs a remote cluster license checker with the specified license predicate for checking license compatibility. The predicate_does not need to check for the active license state as this is handled by the remote cluster license checker.__@param client    the client_@param predicate the license predicate;public RemoteClusterLicenseChecker(final Client client, final Predicate<License.OperationMode> predicate) {_        this.client = client__        this.predicate = predicate__    };constructs,a,remote,cluster,license,checker,with,the,specified,license,predicate,for,checking,license,compatibility,the,predicate,does,not,need,to,check,for,the,active,license,state,as,this,is,handled,by,the,remote,cluster,license,checker,param,client,the,client,param,predicate,the,license,predicate;public,remote,cluster,license,checker,final,client,client,final,predicate,license,operation,mode,predicate,this,client,client,this,predicate,predicate
RemoteClusterLicenseChecker -> public RemoteClusterLicenseChecker(final Client client, final Predicate<License.OperationMode> predicate);1547561945;Constructs a remote cluster license checker with the specified license predicate for checking license compatibility. The predicate_does not need to check for the active license state as this is handled by the remote cluster license checker.__@param client    the client_@param predicate the license predicate;public RemoteClusterLicenseChecker(final Client client, final Predicate<License.OperationMode> predicate) {_        this.client = client__        this.predicate = predicate__    };constructs,a,remote,cluster,license,checker,with,the,specified,license,predicate,for,checking,license,compatibility,the,predicate,does,not,need,to,check,for,the,active,license,state,as,this,is,handled,by,the,remote,cluster,license,checker,param,client,the,client,param,predicate,the,license,predicate;public,remote,cluster,license,checker,final,client,client,final,predicate,license,operation,mode,predicate,this,client,client,this,predicate,predicate
RemoteClusterLicenseChecker -> LicenseCheck -> public static LicenseCheck failure(final RemoteClusterLicenseInfo remoteClusterLicenseInfo);1534848846;Creates a failing license check encapsulating the specified remote cluster license info.__@param remoteClusterLicenseInfo the remote cluster license info_@return a failing license check;public static LicenseCheck failure(final RemoteClusterLicenseInfo remoteClusterLicenseInfo) {_            return new LicenseCheck(remoteClusterLicenseInfo)__        };creates,a,failing,license,check,encapsulating,the,specified,remote,cluster,license,info,param,remote,cluster,license,info,the,remote,cluster,license,info,return,a,failing,license,check;public,static,license,check,failure,final,remote,cluster,license,info,remote,cluster,license,info,return,new,license,check,remote,cluster,license,info
RemoteClusterLicenseChecker -> LicenseCheck -> public static LicenseCheck failure(final RemoteClusterLicenseInfo remoteClusterLicenseInfo);1535965276;Creates a failing license check encapsulating the specified remote cluster license info.__@param remoteClusterLicenseInfo the remote cluster license info_@return a failing license check;public static LicenseCheck failure(final RemoteClusterLicenseInfo remoteClusterLicenseInfo) {_            return new LicenseCheck(remoteClusterLicenseInfo)__        };creates,a,failing,license,check,encapsulating,the,specified,remote,cluster,license,info,param,remote,cluster,license,info,the,remote,cluster,license,info,return,a,failing,license,check;public,static,license,check,failure,final,remote,cluster,license,info,remote,cluster,license,info,return,new,license,check,remote,cluster,license,info
RemoteClusterLicenseChecker -> LicenseCheck -> public static LicenseCheck failure(final RemoteClusterLicenseInfo remoteClusterLicenseInfo);1545296284;Creates a failing license check encapsulating the specified remote cluster license info.__@param remoteClusterLicenseInfo the remote cluster license info_@return a failing license check;public static LicenseCheck failure(final RemoteClusterLicenseInfo remoteClusterLicenseInfo) {_            return new LicenseCheck(remoteClusterLicenseInfo)__        };creates,a,failing,license,check,encapsulating,the,specified,remote,cluster,license,info,param,remote,cluster,license,info,the,remote,cluster,license,info,return,a,failing,license,check;public,static,license,check,failure,final,remote,cluster,license,info,remote,cluster,license,info,return,new,license,check,remote,cluster,license,info
RemoteClusterLicenseChecker -> LicenseCheck -> public static LicenseCheck failure(final RemoteClusterLicenseInfo remoteClusterLicenseInfo);1547561945;Creates a failing license check encapsulating the specified remote cluster license info.__@param remoteClusterLicenseInfo the remote cluster license info_@return a failing license check;public static LicenseCheck failure(final RemoteClusterLicenseInfo remoteClusterLicenseInfo) {_            return new LicenseCheck(remoteClusterLicenseInfo)__        };creates,a,failing,license,check,encapsulating,the,specified,remote,cluster,license,info,param,remote,cluster,license,info,the,remote,cluster,license,info,return,a,failing,license,check;public,static,license,check,failure,final,remote,cluster,license,info,remote,cluster,license,info,return,new,license,check,remote,cluster,license,info
RemoteClusterLicenseChecker -> public static boolean isRemoteIndex(final String index);1534848846;Predicate to test if the index name represents the name of a remote index.__@param index the index name_@return true if the collection of indices contains a remote index, otherwise false;public static boolean isRemoteIndex(final String index) {_        return index.indexOf(RemoteClusterAware.REMOTE_CLUSTER_INDEX_SEPARATOR) != -1__    };predicate,to,test,if,the,index,name,represents,the,name,of,a,remote,index,param,index,the,index,name,return,true,if,the,collection,of,indices,contains,a,remote,index,otherwise,false;public,static,boolean,is,remote,index,final,string,index,return,index,index,of,remote,cluster,aware,1
RemoteClusterLicenseChecker -> public static boolean isRemoteIndex(final String index);1535965276;Predicate to test if the index name represents the name of a remote index.__@param index the index name_@return true if the collection of indices contains a remote index, otherwise false;public static boolean isRemoteIndex(final String index) {_        return index.indexOf(RemoteClusterAware.REMOTE_CLUSTER_INDEX_SEPARATOR) != -1__    };predicate,to,test,if,the,index,name,represents,the,name,of,a,remote,index,param,index,the,index,name,return,true,if,the,collection,of,indices,contains,a,remote,index,otherwise,false;public,static,boolean,is,remote,index,final,string,index,return,index,index,of,remote,cluster,aware,1
RemoteClusterLicenseChecker -> public static boolean isRemoteIndex(final String index);1545296284;Predicate to test if the index name represents the name of a remote index.__@param index the index name_@return true if the collection of indices contains a remote index, otherwise false;public static boolean isRemoteIndex(final String index) {_        return index.indexOf(RemoteClusterAware.REMOTE_CLUSTER_INDEX_SEPARATOR) != -1__    };predicate,to,test,if,the,index,name,represents,the,name,of,a,remote,index,param,index,the,index,name,return,true,if,the,collection,of,indices,contains,a,remote,index,otherwise,false;public,static,boolean,is,remote,index,final,string,index,return,index,index,of,remote,cluster,aware,1
RemoteClusterLicenseChecker -> public static boolean isRemoteIndex(final String index);1547561945;Predicate to test if the index name represents the name of a remote index.__@param index the index name_@return true if the collection of indices contains a remote index, otherwise false;public static boolean isRemoteIndex(final String index) {_        return index.indexOf(RemoteClusterAware.REMOTE_CLUSTER_INDEX_SEPARATOR) != -1__    };predicate,to,test,if,the,index,name,represents,the,name,of,a,remote,index,param,index,the,index,name,return,true,if,the,collection,of,indices,contains,a,remote,index,otherwise,false;public,static,boolean,is,remote,index,final,string,index,return,index,index,of,remote,cluster,aware,1
RemoteClusterLicenseChecker -> LicenseCheck -> public static LicenseCheck success();1534848846;A successful license check.__@return a successful license check instance;public static LicenseCheck success() {_            return SUCCESS__        };a,successful,license,check,return,a,successful,license,check,instance;public,static,license,check,success,return,success
RemoteClusterLicenseChecker -> LicenseCheck -> public static LicenseCheck success();1535965276;A successful license check.__@return a successful license check instance;public static LicenseCheck success() {_            return SUCCESS__        };a,successful,license,check,return,a,successful,license,check,instance;public,static,license,check,success,return,success
RemoteClusterLicenseChecker -> LicenseCheck -> public static LicenseCheck success();1545296284;A successful license check.__@return a successful license check instance;public static LicenseCheck success() {_            return SUCCESS__        };a,successful,license,check,return,a,successful,license,check,instance;public,static,license,check,success,return,success
RemoteClusterLicenseChecker -> LicenseCheck -> public static LicenseCheck success();1547561945;A successful license check.__@return a successful license check instance;public static LicenseCheck success() {_            return SUCCESS__        };a,successful,license,check,return,a,successful,license,check,instance;public,static,license,check,success,return,success
RemoteClusterLicenseChecker -> public static List<String> remoteClusterAliases(final List<String> indices);1534848846;Extract the list of remote cluster aliases from the list of index names. Remote index names are of the form_{@code cluster_alias:index_name} and the cluster_alias is extracted for each index name that represents a remote index.__@param indices the collection of index names_@return the remote cluster names;public static List<String> remoteClusterAliases(final List<String> indices) {_        return indices.stream()_                .filter(RemoteClusterLicenseChecker::isRemoteIndex)_                .map(index -> index.substring(0, index.indexOf(RemoteClusterAware.REMOTE_CLUSTER_INDEX_SEPARATOR)))_                .distinct()_                .collect(Collectors.toList())__    };extract,the,list,of,remote,cluster,aliases,from,the,list,of,index,names,remote,index,names,are,of,the,form,code,and,the,is,extracted,for,each,index,name,that,represents,a,remote,index,param,indices,the,collection,of,index,names,return,the,remote,cluster,names;public,static,list,string,remote,cluster,aliases,final,list,string,indices,return,indices,stream,filter,remote,cluster,license,checker,is,remote,index,map,index,index,substring,0,index,index,of,remote,cluster,aware,distinct,collect,collectors,to,list
RemoteClusterLicenseChecker -> public static List<String> remoteClusterAliases(final List<String> indices);1535965276;Extract the list of remote cluster aliases from the list of index names. Remote index names are of the form_{@code cluster_alias:index_name} and the cluster_alias is extracted for each index name that represents a remote index.__@param indices the collection of index names_@return the remote cluster names;public static List<String> remoteClusterAliases(final List<String> indices) {_        return indices.stream()_                .filter(RemoteClusterLicenseChecker::isRemoteIndex)_                .map(index -> index.substring(0, index.indexOf(RemoteClusterAware.REMOTE_CLUSTER_INDEX_SEPARATOR)))_                .distinct()_                .collect(Collectors.toList())__    };extract,the,list,of,remote,cluster,aliases,from,the,list,of,index,names,remote,index,names,are,of,the,form,code,and,the,is,extracted,for,each,index,name,that,represents,a,remote,index,param,indices,the,collection,of,index,names,return,the,remote,cluster,names;public,static,list,string,remote,cluster,aliases,final,list,string,indices,return,indices,stream,filter,remote,cluster,license,checker,is,remote,index,map,index,index,substring,0,index,index,of,remote,cluster,aware,distinct,collect,collectors,to,list
RemoteClusterLicenseChecker -> public static List<String> remoteClusterAliases(final List<String> indices);1545296284;Extract the list of remote cluster aliases from the list of index names. Remote index names are of the form_{@code cluster_alias:index_name} and the cluster_alias is extracted for each index name that represents a remote index.__@param indices the collection of index names_@return the remote cluster names;public static List<String> remoteClusterAliases(final List<String> indices) {_        return indices.stream()_                .filter(RemoteClusterLicenseChecker::isRemoteIndex)_                .map(index -> index.substring(0, index.indexOf(RemoteClusterAware.REMOTE_CLUSTER_INDEX_SEPARATOR)))_                .distinct()_                .collect(Collectors.toList())__    };extract,the,list,of,remote,cluster,aliases,from,the,list,of,index,names,remote,index,names,are,of,the,form,code,and,the,is,extracted,for,each,index,name,that,represents,a,remote,index,param,indices,the,collection,of,index,names,return,the,remote,cluster,names;public,static,list,string,remote,cluster,aliases,final,list,string,indices,return,indices,stream,filter,remote,cluster,license,checker,is,remote,index,map,index,index,substring,0,index,index,of,remote,cluster,aware,distinct,collect,collectors,to,list
RemoteClusterLicenseChecker -> public void checkRemoteClusterLicenses(final List<String> clusterAliases, final ActionListener<LicenseCheck> listener);1534848846;Checks the specified clusters for license compatibility. The specified callback will be invoked once if all clusters are_license-compatible, otherwise the specified callback will be invoked once on the first cluster that is not license-compatible.__@param clusterAliases the cluster aliases to check_@param listener       a callback;public void checkRemoteClusterLicenses(final List<String> clusterAliases, final ActionListener<LicenseCheck> listener) {_        final Iterator<String> clusterAliasesIterator = clusterAliases.iterator()__        if (clusterAliasesIterator.hasNext() == false) {_            listener.onResponse(LicenseCheck.success())__            return__        }__        final AtomicReference<String> clusterAlias = new AtomicReference<>()___        final ActionListener<XPackInfoResponse> infoListener = new ActionListener<XPackInfoResponse>() {__            @Override_            public void onResponse(final XPackInfoResponse xPackInfoResponse) {_                final XPackInfoResponse.LicenseInfo licenseInfo = xPackInfoResponse.getLicenseInfo()__                if ((licenseInfo.getStatus() == LicenseStatus.ACTIVE) == false || predicate.test(licenseInfo) == false) {_                    listener.onResponse(LicenseCheck.failure(new RemoteClusterLicenseInfo(clusterAlias.get(), licenseInfo)))__                    return__                }__                if (clusterAliasesIterator.hasNext()) {_                    clusterAlias.set(clusterAliasesIterator.next())__                    _                    remoteClusterLicense(clusterAlias.get(), this)__                } else {_                    listener.onResponse(LicenseCheck.success())__                }_            }__            @Override_            public void onFailure(final Exception e) {_                final String message = "could not determine the license type for cluster [" + clusterAlias.get() + "]"__                listener.onFailure(new ElasticsearchException(message, e))__            }__        }___        _        clusterAlias.set(clusterAliasesIterator.next())__        remoteClusterLicense(clusterAlias.get(), infoListener)__    };checks,the,specified,clusters,for,license,compatibility,the,specified,callback,will,be,invoked,once,if,all,clusters,are,license,compatible,otherwise,the,specified,callback,will,be,invoked,once,on,the,first,cluster,that,is,not,license,compatible,param,cluster,aliases,the,cluster,aliases,to,check,param,listener,a,callback;public,void,check,remote,cluster,licenses,final,list,string,cluster,aliases,final,action,listener,license,check,listener,final,iterator,string,cluster,aliases,iterator,cluster,aliases,iterator,if,cluster,aliases,iterator,has,next,false,listener,on,response,license,check,success,return,final,atomic,reference,string,cluster,alias,new,atomic,reference,final,action,listener,xpack,info,response,info,listener,new,action,listener,xpack,info,response,override,public,void,on,response,final,xpack,info,response,x,pack,info,response,final,xpack,info,response,license,info,license,info,x,pack,info,response,get,license,info,if,license,info,get,status,license,status,active,false,predicate,test,license,info,false,listener,on,response,license,check,failure,new,remote,cluster,license,info,cluster,alias,get,license,info,return,if,cluster,aliases,iterator,has,next,cluster,alias,set,cluster,aliases,iterator,next,remote,cluster,license,cluster,alias,get,this,else,listener,on,response,license,check,success,override,public,void,on,failure,final,exception,e,final,string,message,could,not,determine,the,license,type,for,cluster,cluster,alias,get,listener,on,failure,new,elasticsearch,exception,message,e,cluster,alias,set,cluster,aliases,iterator,next,remote,cluster,license,cluster,alias,get,info,listener
RemoteClusterLicenseChecker -> public void checkRemoteClusterLicenses(final List<String> clusterAliases, final ActionListener<LicenseCheck> listener);1535965276;Checks the specified clusters for license compatibility. The specified callback will be invoked once if all clusters are_license-compatible, otherwise the specified callback will be invoked once on the first cluster that is not license-compatible.__@param clusterAliases the cluster aliases to check_@param listener       a callback;public void checkRemoteClusterLicenses(final List<String> clusterAliases, final ActionListener<LicenseCheck> listener) {_        final Iterator<String> clusterAliasesIterator = clusterAliases.iterator()__        if (clusterAliasesIterator.hasNext() == false) {_            listener.onResponse(LicenseCheck.success())__            return__        }__        final AtomicReference<String> clusterAlias = new AtomicReference<>()___        final ActionListener<XPackInfoResponse> infoListener = new ActionListener<XPackInfoResponse>() {__            @Override_            public void onResponse(final XPackInfoResponse xPackInfoResponse) {_                final XPackInfoResponse.LicenseInfo licenseInfo = xPackInfoResponse.getLicenseInfo()__                if ((licenseInfo.getStatus() == LicenseStatus.ACTIVE) == false_                        || predicate.test(License.OperationMode.resolve(licenseInfo.getMode())) == false) {_                    listener.onResponse(LicenseCheck.failure(new RemoteClusterLicenseInfo(clusterAlias.get(), licenseInfo)))__                    return__                }__                if (clusterAliasesIterator.hasNext()) {_                    clusterAlias.set(clusterAliasesIterator.next())__                    _                    remoteClusterLicense(clusterAlias.get(), this)__                } else {_                    listener.onResponse(LicenseCheck.success())__                }_            }__            @Override_            public void onFailure(final Exception e) {_                final String message = "could not determine the license type for cluster [" + clusterAlias.get() + "]"__                listener.onFailure(new ElasticsearchException(message, e))__            }__        }___        _        clusterAlias.set(clusterAliasesIterator.next())__        remoteClusterLicense(clusterAlias.get(), infoListener)__    };checks,the,specified,clusters,for,license,compatibility,the,specified,callback,will,be,invoked,once,if,all,clusters,are,license,compatible,otherwise,the,specified,callback,will,be,invoked,once,on,the,first,cluster,that,is,not,license,compatible,param,cluster,aliases,the,cluster,aliases,to,check,param,listener,a,callback;public,void,check,remote,cluster,licenses,final,list,string,cluster,aliases,final,action,listener,license,check,listener,final,iterator,string,cluster,aliases,iterator,cluster,aliases,iterator,if,cluster,aliases,iterator,has,next,false,listener,on,response,license,check,success,return,final,atomic,reference,string,cluster,alias,new,atomic,reference,final,action,listener,xpack,info,response,info,listener,new,action,listener,xpack,info,response,override,public,void,on,response,final,xpack,info,response,x,pack,info,response,final,xpack,info,response,license,info,license,info,x,pack,info,response,get,license,info,if,license,info,get,status,license,status,active,false,predicate,test,license,operation,mode,resolve,license,info,get,mode,false,listener,on,response,license,check,failure,new,remote,cluster,license,info,cluster,alias,get,license,info,return,if,cluster,aliases,iterator,has,next,cluster,alias,set,cluster,aliases,iterator,next,remote,cluster,license,cluster,alias,get,this,else,listener,on,response,license,check,success,override,public,void,on,failure,final,exception,e,final,string,message,could,not,determine,the,license,type,for,cluster,cluster,alias,get,listener,on,failure,new,elasticsearch,exception,message,e,cluster,alias,set,cluster,aliases,iterator,next,remote,cluster,license,cluster,alias,get,info,listener
RemoteClusterLicenseChecker -> public void checkRemoteClusterLicenses(final List<String> clusterAliases, final ActionListener<LicenseCheck> listener);1545296284;Checks the specified clusters for license compatibility. The specified callback will be invoked once if all clusters are_license-compatible, otherwise the specified callback will be invoked once on the first cluster that is not license-compatible.__@param clusterAliases the cluster aliases to check_@param listener       a callback;public void checkRemoteClusterLicenses(final List<String> clusterAliases, final ActionListener<LicenseCheck> listener) {_        final Iterator<String> clusterAliasesIterator = clusterAliases.iterator()__        if (clusterAliasesIterator.hasNext() == false) {_            listener.onResponse(LicenseCheck.success())__            return__        }__        final AtomicReference<String> clusterAlias = new AtomicReference<>()___        final ActionListener<XPackInfoResponse> infoListener = new ActionListener<XPackInfoResponse>() {__            @Override_            public void onResponse(final XPackInfoResponse xPackInfoResponse) {_                final XPackInfoResponse.LicenseInfo licenseInfo = xPackInfoResponse.getLicenseInfo()__                if (licenseInfo == null) {_                    listener.onFailure(new ResourceNotFoundException("license info is missing for cluster [" + clusterAlias.get() + "]"))__                    return__                }_                if ((licenseInfo.getStatus() == LicenseStatus.ACTIVE) == false_                        || predicate.test(License.OperationMode.resolve(licenseInfo.getMode())) == false) {_                    listener.onResponse(LicenseCheck.failure(new RemoteClusterLicenseInfo(clusterAlias.get(), licenseInfo)))__                    return__                }__                if (clusterAliasesIterator.hasNext()) {_                    clusterAlias.set(clusterAliasesIterator.next())__                    _                    remoteClusterLicense(clusterAlias.get(), this)__                } else {_                    listener.onResponse(LicenseCheck.success())__                }_            }__            @Override_            public void onFailure(final Exception e) {_                final String message = "could not determine the license type for cluster [" + clusterAlias.get() + "]"__                listener.onFailure(new ElasticsearchException(message, e))__            }__        }___        _        clusterAlias.set(clusterAliasesIterator.next())__        remoteClusterLicense(clusterAlias.get(), infoListener)__    };checks,the,specified,clusters,for,license,compatibility,the,specified,callback,will,be,invoked,once,if,all,clusters,are,license,compatible,otherwise,the,specified,callback,will,be,invoked,once,on,the,first,cluster,that,is,not,license,compatible,param,cluster,aliases,the,cluster,aliases,to,check,param,listener,a,callback;public,void,check,remote,cluster,licenses,final,list,string,cluster,aliases,final,action,listener,license,check,listener,final,iterator,string,cluster,aliases,iterator,cluster,aliases,iterator,if,cluster,aliases,iterator,has,next,false,listener,on,response,license,check,success,return,final,atomic,reference,string,cluster,alias,new,atomic,reference,final,action,listener,xpack,info,response,info,listener,new,action,listener,xpack,info,response,override,public,void,on,response,final,xpack,info,response,x,pack,info,response,final,xpack,info,response,license,info,license,info,x,pack,info,response,get,license,info,if,license,info,null,listener,on,failure,new,resource,not,found,exception,license,info,is,missing,for,cluster,cluster,alias,get,return,if,license,info,get,status,license,status,active,false,predicate,test,license,operation,mode,resolve,license,info,get,mode,false,listener,on,response,license,check,failure,new,remote,cluster,license,info,cluster,alias,get,license,info,return,if,cluster,aliases,iterator,has,next,cluster,alias,set,cluster,aliases,iterator,next,remote,cluster,license,cluster,alias,get,this,else,listener,on,response,license,check,success,override,public,void,on,failure,final,exception,e,final,string,message,could,not,determine,the,license,type,for,cluster,cluster,alias,get,listener,on,failure,new,elasticsearch,exception,message,e,cluster,alias,set,cluster,aliases,iterator,next,remote,cluster,license,cluster,alias,get,info,listener
RemoteClusterLicenseChecker -> public void checkRemoteClusterLicenses(final List<String> clusterAliases, final ActionListener<LicenseCheck> listener);1547561945;Checks the specified clusters for license compatibility. The specified callback will be invoked once if all clusters are_license-compatible, otherwise the specified callback will be invoked once on the first cluster that is not license-compatible.__@param clusterAliases the cluster aliases to check_@param listener       a callback;public void checkRemoteClusterLicenses(final List<String> clusterAliases, final ActionListener<LicenseCheck> listener) {_        final Iterator<String> clusterAliasesIterator = clusterAliases.iterator()__        if (clusterAliasesIterator.hasNext() == false) {_            listener.onResponse(LicenseCheck.success())__            return__        }__        final AtomicReference<String> clusterAlias = new AtomicReference<>()___        final ActionListener<XPackInfoResponse> infoListener = new ActionListener<XPackInfoResponse>() {__            @Override_            public void onResponse(final XPackInfoResponse xPackInfoResponse) {_                final XPackInfoResponse.LicenseInfo licenseInfo = xPackInfoResponse.getLicenseInfo()__                if (licenseInfo == null) {_                    listener.onFailure(new ResourceNotFoundException("license info is missing for cluster [" + clusterAlias.get() + "]"))__                    return__                }_                if ((licenseInfo.getStatus() == LicenseStatus.ACTIVE) == false_                        || predicate.test(License.OperationMode.resolve(licenseInfo.getMode())) == false) {_                    listener.onResponse(LicenseCheck.failure(new RemoteClusterLicenseInfo(clusterAlias.get(), licenseInfo)))__                    return__                }__                if (clusterAliasesIterator.hasNext()) {_                    clusterAlias.set(clusterAliasesIterator.next())__                    _                    remoteClusterLicense(clusterAlias.get(), this)__                } else {_                    listener.onResponse(LicenseCheck.success())__                }_            }__            @Override_            public void onFailure(final Exception e) {_                final String message = "could not determine the license type for cluster [" + clusterAlias.get() + "]"__                listener.onFailure(new ElasticsearchException(message, e))__            }__        }___        _        clusterAlias.set(clusterAliasesIterator.next())__        remoteClusterLicense(clusterAlias.get(), infoListener)__    };checks,the,specified,clusters,for,license,compatibility,the,specified,callback,will,be,invoked,once,if,all,clusters,are,license,compatible,otherwise,the,specified,callback,will,be,invoked,once,on,the,first,cluster,that,is,not,license,compatible,param,cluster,aliases,the,cluster,aliases,to,check,param,listener,a,callback;public,void,check,remote,cluster,licenses,final,list,string,cluster,aliases,final,action,listener,license,check,listener,final,iterator,string,cluster,aliases,iterator,cluster,aliases,iterator,if,cluster,aliases,iterator,has,next,false,listener,on,response,license,check,success,return,final,atomic,reference,string,cluster,alias,new,atomic,reference,final,action,listener,xpack,info,response,info,listener,new,action,listener,xpack,info,response,override,public,void,on,response,final,xpack,info,response,x,pack,info,response,final,xpack,info,response,license,info,license,info,x,pack,info,response,get,license,info,if,license,info,null,listener,on,failure,new,resource,not,found,exception,license,info,is,missing,for,cluster,cluster,alias,get,return,if,license,info,get,status,license,status,active,false,predicate,test,license,operation,mode,resolve,license,info,get,mode,false,listener,on,response,license,check,failure,new,remote,cluster,license,info,cluster,alias,get,license,info,return,if,cluster,aliases,iterator,has,next,cluster,alias,set,cluster,aliases,iterator,next,remote,cluster,license,cluster,alias,get,this,else,listener,on,response,license,check,success,override,public,void,on,failure,final,exception,e,final,string,message,could,not,determine,the,license,type,for,cluster,cluster,alias,get,listener,on,failure,new,elasticsearch,exception,message,e,cluster,alias,set,cluster,aliases,iterator,next,remote,cluster,license,cluster,alias,get,info,listener
RemoteClusterLicenseChecker -> RemoteClusterLicenseInfo -> public String clusterAlias();1534848846;The alias of the remote cluster.__@return the cluster alias;public String clusterAlias() {_            return clusterAlias__        };the,alias,of,the,remote,cluster,return,the,cluster,alias;public,string,cluster,alias,return,cluster,alias
RemoteClusterLicenseChecker -> RemoteClusterLicenseInfo -> public String clusterAlias();1535965276;The alias of the remote cluster.__@return the cluster alias;public String clusterAlias() {_            return clusterAlias__        };the,alias,of,the,remote,cluster,return,the,cluster,alias;public,string,cluster,alias,return,cluster,alias
RemoteClusterLicenseChecker -> RemoteClusterLicenseInfo -> public String clusterAlias();1545296284;The alias of the remote cluster.__@return the cluster alias;public String clusterAlias() {_            return clusterAlias__        };the,alias,of,the,remote,cluster,return,the,cluster,alias;public,string,cluster,alias,return,cluster,alias
RemoteClusterLicenseChecker -> RemoteClusterLicenseInfo -> public String clusterAlias();1547561945;The alias of the remote cluster.__@return the cluster alias;public String clusterAlias() {_            return clusterAlias__        };the,alias,of,the,remote,cluster,return,the,cluster,alias;public,string,cluster,alias,return,cluster,alias
RemoteClusterLicenseChecker -> public static String buildErrorMessage(             final String feature,             final RemoteClusterLicenseInfo remoteClusterLicenseInfo,             final Predicate<XPackInfoResponse.LicenseInfo> predicate);1534848846;Constructs an error message for license incompatibility.__@param feature                  the name of the feature that initiated the remote cluster license check._@param remoteClusterLicenseInfo the remote cluster license info of the cluster that failed the license check_@return an error message representing license incompatibility;public static String buildErrorMessage(_            final String feature,_            final RemoteClusterLicenseInfo remoteClusterLicenseInfo,_            final Predicate<XPackInfoResponse.LicenseInfo> predicate) {_        final StringBuilder error = new StringBuilder()__        if (remoteClusterLicenseInfo.licenseInfo().getStatus() != LicenseStatus.ACTIVE) {_            error.append(String.format(Locale.ROOT, "the license on cluster [%s] is not active", remoteClusterLicenseInfo.clusterAlias()))__        } else {_            assert predicate.test(remoteClusterLicenseInfo.licenseInfo()) == false : "license must be incompatible to build error message"__            final String message = String.format(_                    Locale.ROOT,_                    "the license mode [%s] on cluster [%s] does not enable [%s]",_                    License.OperationMode.resolve(remoteClusterLicenseInfo.licenseInfo().getMode()),_                    remoteClusterLicenseInfo.clusterAlias(),_                    feature)__            error.append(message)__        }__        return error.toString()__    };constructs,an,error,message,for,license,incompatibility,param,feature,the,name,of,the,feature,that,initiated,the,remote,cluster,license,check,param,remote,cluster,license,info,the,remote,cluster,license,info,of,the,cluster,that,failed,the,license,check,return,an,error,message,representing,license,incompatibility;public,static,string,build,error,message,final,string,feature,final,remote,cluster,license,info,remote,cluster,license,info,final,predicate,xpack,info,response,license,info,predicate,final,string,builder,error,new,string,builder,if,remote,cluster,license,info,license,info,get,status,license,status,active,error,append,string,format,locale,root,the,license,on,cluster,s,is,not,active,remote,cluster,license,info,cluster,alias,else,assert,predicate,test,remote,cluster,license,info,license,info,false,license,must,be,incompatible,to,build,error,message,final,string,message,string,format,locale,root,the,license,mode,s,on,cluster,s,does,not,enable,s,license,operation,mode,resolve,remote,cluster,license,info,license,info,get,mode,remote,cluster,license,info,cluster,alias,feature,error,append,message,return,error,to,string
RemoteClusterLicenseChecker -> public static String buildErrorMessage(             final String feature,             final RemoteClusterLicenseInfo remoteClusterLicenseInfo,             final Predicate<XPackInfoResponse.LicenseInfo> predicate);1535965276;Constructs an error message for license incompatibility.__@param feature                  the name of the feature that initiated the remote cluster license check._@param remoteClusterLicenseInfo the remote cluster license info of the cluster that failed the license check_@return an error message representing license incompatibility;public static String buildErrorMessage(_            final String feature,_            final RemoteClusterLicenseInfo remoteClusterLicenseInfo,_            final Predicate<XPackInfoResponse.LicenseInfo> predicate) {_        final StringBuilder error = new StringBuilder()__        if (remoteClusterLicenseInfo.licenseInfo().getStatus() != LicenseStatus.ACTIVE) {_            error.append(String.format(Locale.ROOT, "the license on cluster [%s] is not active", remoteClusterLicenseInfo.clusterAlias()))__        } else {_            assert predicate.test(remoteClusterLicenseInfo.licenseInfo()) == false : "license must be incompatible to build error message"__            final String message = String.format(_                    Locale.ROOT,_                    "the license mode [%s] on cluster [%s] does not enable [%s]",_                    License.OperationMode.resolve(remoteClusterLicenseInfo.licenseInfo().getMode()),_                    remoteClusterLicenseInfo.clusterAlias(),_                    feature)__            error.append(message)__        }__        return error.toString()__    };constructs,an,error,message,for,license,incompatibility,param,feature,the,name,of,the,feature,that,initiated,the,remote,cluster,license,check,param,remote,cluster,license,info,the,remote,cluster,license,info,of,the,cluster,that,failed,the,license,check,return,an,error,message,representing,license,incompatibility;public,static,string,build,error,message,final,string,feature,final,remote,cluster,license,info,remote,cluster,license,info,final,predicate,xpack,info,response,license,info,predicate,final,string,builder,error,new,string,builder,if,remote,cluster,license,info,license,info,get,status,license,status,active,error,append,string,format,locale,root,the,license,on,cluster,s,is,not,active,remote,cluster,license,info,cluster,alias,else,assert,predicate,test,remote,cluster,license,info,license,info,false,license,must,be,incompatible,to,build,error,message,final,string,message,string,format,locale,root,the,license,mode,s,on,cluster,s,does,not,enable,s,license,operation,mode,resolve,remote,cluster,license,info,license,info,get,mode,remote,cluster,license,info,cluster,alias,feature,error,append,message,return,error,to,string
RemoteClusterLicenseChecker -> public static String buildErrorMessage(             final String feature,             final RemoteClusterLicenseInfo remoteClusterLicenseInfo,             final Predicate<XPackInfoResponse.LicenseInfo> predicate);1545296284;Constructs an error message for license incompatibility.__@param feature                  the name of the feature that initiated the remote cluster license check._@param remoteClusterLicenseInfo the remote cluster license info of the cluster that failed the license check_@return an error message representing license incompatibility;public static String buildErrorMessage(_            final String feature,_            final RemoteClusterLicenseInfo remoteClusterLicenseInfo,_            final Predicate<XPackInfoResponse.LicenseInfo> predicate) {_        final StringBuilder error = new StringBuilder()__        if (remoteClusterLicenseInfo.licenseInfo().getStatus() != LicenseStatus.ACTIVE) {_            error.append(String.format(Locale.ROOT, "the license on cluster [%s] is not active", remoteClusterLicenseInfo.clusterAlias()))__        } else {_            assert predicate.test(remoteClusterLicenseInfo.licenseInfo()) == false : "license must be incompatible to build error message"__            final String message = String.format(_                    Locale.ROOT,_                    "the license mode [%s] on cluster [%s] does not enable [%s]",_                    License.OperationMode.resolve(remoteClusterLicenseInfo.licenseInfo().getMode()),_                    remoteClusterLicenseInfo.clusterAlias(),_                    feature)__            error.append(message)__        }__        return error.toString()__    };constructs,an,error,message,for,license,incompatibility,param,feature,the,name,of,the,feature,that,initiated,the,remote,cluster,license,check,param,remote,cluster,license,info,the,remote,cluster,license,info,of,the,cluster,that,failed,the,license,check,return,an,error,message,representing,license,incompatibility;public,static,string,build,error,message,final,string,feature,final,remote,cluster,license,info,remote,cluster,license,info,final,predicate,xpack,info,response,license,info,predicate,final,string,builder,error,new,string,builder,if,remote,cluster,license,info,license,info,get,status,license,status,active,error,append,string,format,locale,root,the,license,on,cluster,s,is,not,active,remote,cluster,license,info,cluster,alias,else,assert,predicate,test,remote,cluster,license,info,license,info,false,license,must,be,incompatible,to,build,error,message,final,string,message,string,format,locale,root,the,license,mode,s,on,cluster,s,does,not,enable,s,license,operation,mode,resolve,remote,cluster,license,info,license,info,get,mode,remote,cluster,license,info,cluster,alias,feature,error,append,message,return,error,to,string
RemoteClusterLicenseChecker -> public static String buildErrorMessage(             final String feature,             final RemoteClusterLicenseInfo remoteClusterLicenseInfo,             final Predicate<XPackInfoResponse.LicenseInfo> predicate);1547561945;Constructs an error message for license incompatibility.__@param feature                  the name of the feature that initiated the remote cluster license check._@param remoteClusterLicenseInfo the remote cluster license info of the cluster that failed the license check_@return an error message representing license incompatibility;public static String buildErrorMessage(_            final String feature,_            final RemoteClusterLicenseInfo remoteClusterLicenseInfo,_            final Predicate<XPackInfoResponse.LicenseInfo> predicate) {_        final StringBuilder error = new StringBuilder()__        if (remoteClusterLicenseInfo.licenseInfo().getStatus() != LicenseStatus.ACTIVE) {_            error.append(String.format(Locale.ROOT, "the license on cluster [%s] is not active", remoteClusterLicenseInfo.clusterAlias()))__        } else {_            assert predicate.test(remoteClusterLicenseInfo.licenseInfo()) == false : "license must be incompatible to build error message"__            final String message = String.format(_                    Locale.ROOT,_                    "the license mode [%s] on cluster [%s] does not enable [%s]",_                    License.OperationMode.resolve(remoteClusterLicenseInfo.licenseInfo().getMode()),_                    remoteClusterLicenseInfo.clusterAlias(),_                    feature)__            error.append(message)__        }__        return error.toString()__    };constructs,an,error,message,for,license,incompatibility,param,feature,the,name,of,the,feature,that,initiated,the,remote,cluster,license,check,param,remote,cluster,license,info,the,remote,cluster,license,info,of,the,cluster,that,failed,the,license,check,return,an,error,message,representing,license,incompatibility;public,static,string,build,error,message,final,string,feature,final,remote,cluster,license,info,remote,cluster,license,info,final,predicate,xpack,info,response,license,info,predicate,final,string,builder,error,new,string,builder,if,remote,cluster,license,info,license,info,get,status,license,status,active,error,append,string,format,locale,root,the,license,on,cluster,s,is,not,active,remote,cluster,license,info,cluster,alias,else,assert,predicate,test,remote,cluster,license,info,license,info,false,license,must,be,incompatible,to,build,error,message,final,string,message,string,format,locale,root,the,license,mode,s,on,cluster,s,does,not,enable,s,license,operation,mode,resolve,remote,cluster,license,info,license,info,get,mode,remote,cluster,license,info,cluster,alias,feature,error,append,message,return,error,to,string
RemoteClusterLicenseChecker -> LicenseCheck -> public RemoteClusterLicenseInfo remoteClusterLicenseInfo();1534848846;The remote cluster license info. This method should only be invoked if this instance represents a failing license check.__@return the remote cluster license info;public RemoteClusterLicenseInfo remoteClusterLicenseInfo() {_            assert isSuccess() == false__            return remoteClusterLicenseInfo__        };the,remote,cluster,license,info,this,method,should,only,be,invoked,if,this,instance,represents,a,failing,license,check,return,the,remote,cluster,license,info;public,remote,cluster,license,info,remote,cluster,license,info,assert,is,success,false,return,remote,cluster,license,info
RemoteClusterLicenseChecker -> LicenseCheck -> public RemoteClusterLicenseInfo remoteClusterLicenseInfo();1535965276;The remote cluster license info. This method should only be invoked if this instance represents a failing license check.__@return the remote cluster license info;public RemoteClusterLicenseInfo remoteClusterLicenseInfo() {_            assert isSuccess() == false__            return remoteClusterLicenseInfo__        };the,remote,cluster,license,info,this,method,should,only,be,invoked,if,this,instance,represents,a,failing,license,check,return,the,remote,cluster,license,info;public,remote,cluster,license,info,remote,cluster,license,info,assert,is,success,false,return,remote,cluster,license,info
RemoteClusterLicenseChecker -> LicenseCheck -> public RemoteClusterLicenseInfo remoteClusterLicenseInfo();1545296284;The remote cluster license info. This method should only be invoked if this instance represents a failing license check.__@return the remote cluster license info;public RemoteClusterLicenseInfo remoteClusterLicenseInfo() {_            assert isSuccess() == false__            return remoteClusterLicenseInfo__        };the,remote,cluster,license,info,this,method,should,only,be,invoked,if,this,instance,represents,a,failing,license,check,return,the,remote,cluster,license,info;public,remote,cluster,license,info,remote,cluster,license,info,assert,is,success,false,return,remote,cluster,license,info
RemoteClusterLicenseChecker -> LicenseCheck -> public RemoteClusterLicenseInfo remoteClusterLicenseInfo();1547561945;The remote cluster license info. This method should only be invoked if this instance represents a failing license check.__@return the remote cluster license info;public RemoteClusterLicenseInfo remoteClusterLicenseInfo() {_            assert isSuccess() == false__            return remoteClusterLicenseInfo__        };the,remote,cluster,license,info,this,method,should,only,be,invoked,if,this,instance,represents,a,failing,license,check,return,the,remote,cluster,license,info;public,remote,cluster,license,info,remote,cluster,license,info,assert,is,success,false,return,remote,cluster,license,info
