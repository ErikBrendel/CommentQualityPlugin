commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void init() throws Exception {     service = mock(SlackService.class). }
false;public;0;85;;public void testExecute() throws Exception {     final String accountName = "account1".     TextTemplateEngine templateEngine = mock(TextTemplateEngine.class).     SlackMessage.Template messageTemplate = mock(SlackMessage.Template.class).     SlackMessage message = mock(SlackMessage.class).     SlackAction action = new SlackAction(accountName, messageTemplate, null).     ExecutableSlackAction executable = new ExecutableSlackAction(action, logger, service, templateEngine).     Map<String, Object> data = new HashMap<>().     Payload payload = new Payload.Simple(data).     Map<String, Object> metadata = MapBuilder.<String, Object>newMapBuilder().put("_key", "_val").map().     ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC).     JodaCompatibleZonedDateTime jodaJavaNow = new JodaCompatibleZonedDateTime(now.toInstant(), ZoneOffset.UTC).     Wid wid = new Wid(randomAlphaOfLength(5), now).     WatchExecutionContext ctx = mockExecutionContextBuilder(wid.watchId()).wid(wid).payload(payload).time(wid.watchId(), now).metadata(metadata).buildMock().     Map<String, Object> triggerModel = new HashMap<>().     triggerModel.put("triggered_time", jodaJavaNow).     triggerModel.put("scheduled_time", jodaJavaNow).     Map<String, Object> ctxModel = new HashMap<>().     ctxModel.put("id", ctx.id().value()).     ctxModel.put("watch_id", wid.watchId()).     ctxModel.put("payload", data).     ctxModel.put("metadata", metadata).     ctxModel.put("execution_time", jodaJavaNow).     ctxModel.put("trigger", triggerModel).     ctxModel.put("vars", emptyMap()).     Map<String, Object> expectedModel = singletonMap("ctx", ctxModel).     when(messageTemplate.render(eq(wid.watchId()), eq("_action"), eq(templateEngine), eq(expectedModel), any(SlackMessageDefaults.class))).thenReturn(message).     SlackAccount account = mock(SlackAccount.class).     when(service.getAccount(accountName)).thenReturn(account).     List<SentMessages.SentMessage> messages = new ArrayList<>().     boolean hasError = false.     boolean hasSuccess = false.     int count = randomIntBetween(1, 2).     for (int i = 0. i < count. i++) {         HttpResponse response = mock(HttpResponse.class).         HttpRequest request = mock(HttpRequest.class).         int randomInt = randomIntBetween(0, 2).         switch(randomInt) {             case 0:                 messages.add(SentMessages.SentMessage.error(randomAlphaOfLength(10), message, new Exception("unknown error"))).                 hasError = true.                 break.             case 1:                 // error response                 when(response.status()).thenReturn(randomIntBetween(300, 600)).                 messages.add(SentMessages.SentMessage.responded(randomAlphaOfLength(10), message, request, response)).                 hasError = true.                 break.             case 2:                 // success                 when(response.status()).thenReturn(randomIntBetween(200, 299)).                 messages.add(SentMessages.SentMessage.responded(randomAlphaOfLength(10), message, request, response)).                 hasSuccess = true.         }     }     SentMessages sentMessages = new SentMessages(accountName, messages).     when(account.send(message, eq(any()))).thenReturn(sentMessages).     Action.Result.Status expectedStatus = !hasError ? Action.Result.Status.SUCCESS : !hasSuccess ? Action.Result.Status.FAILURE : Action.Result.Status.PARTIAL_FAILURE.     Action.Result result = executable.execute("_action", ctx, payload).     assertThat(result, notNullValue()).     assertThat(result, instanceOf(SlackAction.Result.Executed.class)).     assertThat(result.status(), equalTo(expectedStatus)).     assertThat(((SlackAction.Result.Executed) result).sentMessages(), sameInstance(sentMessages)). }
false;public;0;22;;public void testParser() throws Exception {     XContentBuilder builder = jsonBuilder().startObject().     String accountName = randomAlphaOfLength(10).     SlackMessage.Template message = SlackMessageTests.createRandomTemplate().     builder.field("account", accountName).     builder.field("message", message, ToXContent.EMPTY_PARAMS).     builder.endObject().     BytesReference bytes = BytesReference.bytes(builder).     logger.info("slack action json [{}]", bytes.utf8ToString()).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     parser.nextToken().     SlackAction action = SlackAction.parse("_watch", "_action", parser).     assertThat(action, notNullValue()).     assertThat(action.account, is(accountName)).     assertThat(action.message, notNullValue()).     assertThat(action.message, is(message)). }
false;public;0;23;;public void testParserSelfGenerated() throws Exception {     String accountName = randomBoolean() ? randomAlphaOfLength(10) : null.     SlackMessage.Template message = SlackMessageTests.createRandomTemplate().     HttpProxy proxy = null.     if (randomBoolean()) {         proxy = new HttpProxy("localhost", 8080).     }     SlackAction action = new SlackAction(accountName, message, proxy).     XContentBuilder builder = jsonBuilder().     action.toXContent(builder, ToXContent.EMPTY_PARAMS).     BytesReference bytes = BytesReference.bytes(builder).     logger.info("{}", bytes.utf8ToString()).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     parser.nextToken().     SlackAction parsedAction = SlackAction.parse("_watch", "_action", parser).     assertThat(parsedAction, notNullValue()).     assertThat(parsedAction, is(action)).     assertThat(parsedAction.proxy, is(action.proxy)). }
false;public;0;11;;public void testParserInvalid() throws Exception {     XContentBuilder builder = jsonBuilder().startObject().field("unknown_field", "value").endObject().     XContentParser parser = createParser(builder).     parser.nextToken().     try {         SlackAction.parse("_watch", "_action", parser).         fail("Expected ElasticsearchParseException").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), is("failed to parse [slack] action [_watch/_action]. unexpected token [VALUE_STRING]")).     } }
