commented;modifiers;parameterAmount;loc;comment;code
false;public;0;62;;public void testExecuteWithAggs() throws Exception {     String index = "test-index".     String type = "test-type".     client().admin().indices().prepareCreate(index).addMapping(type).get().     ArrayCompareCondition.Op op = randomFrom(ArrayCompareCondition.Op.values()).     ArrayCompareCondition.Quantifier quantifier = randomFrom(ArrayCompareCondition.Quantifier.values()).     int numberOfDocuments = randomIntBetween(1, 100).     int numberOfDocumentsWatchingFor = 1 + numberOfDocuments.     for (int i = 0. i < numberOfDocuments. i++) {         client().prepareIndex(index, type).setSource(source("elastic", "you know, for search", i)).get().         client().prepareIndex(index, type).setSource(source("fights_for_the_users", "you know, for the users", i)).get().     }     refresh().     SearchResponse response = client().prepareSearch(index).addAggregation(AggregationBuilders.terms("top_tweeters").field("user.screen_name.keyword").size(3)).get().     ArrayCompareCondition condition = new ArrayCompareCondition("ctx.payload.aggregations.top_tweeters.buckets", "doc_count", op, numberOfDocumentsWatchingFor, quantifier, Clock.systemUTC()).     WatchExecutionContext ctx = mockExecutionContext("_name", new Payload.XContent(response, ToXContent.EMPTY_PARAMS)).     Condition.Result result = condition.execute(ctx).     boolean met = quantifier.eval(Arrays.<Object>asList(numberOfDocuments, numberOfDocuments), numberOfDocumentsWatchingFor, op).     assertEquals(met, result.met()).     Map<String, Object> resolvedValues = result.getResolvedValues().     assertThat(resolvedValues, notNullValue()).     assertThat(resolvedValues.size(), is(1)).     Map<String, Object> elastic = new HashMap<>().     elastic.put("doc_count", numberOfDocuments).     elastic.put("key", "elastic").     Map<String, Object> fightsForTheUsers = new HashMap<>().     fightsForTheUsers.put("doc_count", numberOfDocuments).     fightsForTheUsers.put("key", "fights_for_the_users").     assertThat(resolvedValues, hasEntry("ctx.payload.aggregations.top_tweeters.buckets", (Object) Arrays.asList(elastic, fightsForTheUsers))).     client().prepareIndex(index, type).setSource(source("fights_for_the_users", "you know, for the users", numberOfDocuments)).get().     refresh().     response = client().prepareSearch(index).addAggregation(AggregationBuilders.terms("top_tweeters").field("user.screen_name.keyword").size(3)).get().     ctx = mockExecutionContext("_name", new Payload.XContent(response, ToXContent.EMPTY_PARAMS)).     result = condition.execute(ctx).     met = quantifier.eval(Arrays.<Object>asList(numberOfDocumentsWatchingFor, numberOfDocuments), numberOfDocumentsWatchingFor, op).     assertEquals(met, result.met()).     resolvedValues = result.getResolvedValues().     assertThat(resolvedValues, notNullValue()).     assertThat(resolvedValues.size(), is(1)).     fightsForTheUsers.put("doc_count", numberOfDocumentsWatchingFor).     assertThat(resolvedValues, hasEntry("ctx.payload.aggregations.top_tweeters.buckets", (Object) Arrays.asList(fightsForTheUsers, elastic))). }
false;private;3;8;;private XContentBuilder source(String screenName, String tweet, int i) throws IOException {     return jsonBuilder().startObject().startObject("user").field("screen_name", screenName).endObject().field("tweet", tweet + " " + i).endObject(). }
