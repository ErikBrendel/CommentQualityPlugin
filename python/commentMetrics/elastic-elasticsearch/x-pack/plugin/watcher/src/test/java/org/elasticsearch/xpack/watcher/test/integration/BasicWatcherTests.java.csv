commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;public void testIndexWatch() throws Exception {     WatcherClient watcherClient = watcherClient().     createIndex("idx").     // Have a sample document in the index, the watch is going to evaluate     client().prepareIndex("idx", "type").setSource("field", "foo").get().     refresh().     WatcherSearchTemplateRequest request = templateRequest(searchSource().query(termQuery("field", "foo")), "idx").     watcherClient.preparePutWatch("_name").setSource(watchBuilder().trigger(schedule(interval(5, IntervalSchedule.Interval.Unit.SECONDS))).input(searchInput(request)).condition(new CompareCondition("ctx.payload.hits.total", CompareCondition.Op.EQ, 1L)).addAction("_logger", loggingAction("_logging").setCategory("_category"))).get().     timeWarp().trigger("_name").     assertWatchWithMinimumPerformedActionsCount("_name", 1).     GetWatchResponse getWatchResponse = watcherClient().prepareGetWatch().setId("_name").get().     assertThat(getWatchResponse.isFound(), is(true)).     assertThat(getWatchResponse.getSource(), notNullValue()). }
false;public;0;23;;public void testIndexWatchRegisterWatchBeforeTargetIndex() throws Exception {     WatcherClient watcherClient = watcherClient().     WatcherSearchTemplateRequest searchRequest = templateRequest(searchSource().query(termQuery("field", "value")), "idx").     watcherClient.preparePutWatch("_name").setSource(watchBuilder().trigger(schedule(interval(5, IntervalSchedule.Interval.Unit.SECONDS))).input(searchInput(searchRequest)).condition(new CompareCondition("ctx.payload.hits.total", CompareCondition.Op.EQ, 1L))).get().     timeWarp().trigger("_name").     // The watch's condition won't meet because there is no data that matches with the query     assertWatchWithNoActionNeeded("_name", 1).     // Index sample doc after we register the watch and the watch's condition should meet     client().prepareIndex("idx", "type").setSource("field", "value").get().     refresh().     timeWarp().clock().fastForwardSeconds(5).     timeWarp().trigger("_name").     refresh().     assertWatchWithMinimumPerformedActionsCount("_name", 1). }
false;public;0;22;;public void testDeleteWatch() throws Exception {     WatcherClient watcherClient = watcherClient().     WatcherSearchTemplateRequest searchRequest = templateRequest(searchSource().query(matchAllQuery()), "idx").     PutWatchResponse indexResponse = watcherClient.preparePutWatch("_name").setSource(watchBuilder().trigger(schedule(cron("0/1 * * * * ? 2020"))).input(searchInput(searchRequest)).condition(new CompareCondition("ctx.payload.hits.total", CompareCondition.Op.EQ, 1L))).get().     assertThat(indexResponse.isCreated(), is(true)).     DeleteWatchResponse deleteWatchResponse = watcherClient.prepareDeleteWatch("_name").get().     assertThat(deleteWatchResponse, notNullValue()).     assertThat(deleteWatchResponse.isFound(), is(true)).     refresh().     assertHitCount(client().prepareSearch(Watch.INDEX).setSize(0).get(), 0L).     // Deleting the same watch for the second time     deleteWatchResponse = watcherClient.prepareDeleteWatch("_name").get().     assertThat(deleteWatchResponse, notNullValue()).     assertThat(deleteWatchResponse.isFound(), is(false)). }
false;public;0;33;;public void testMalformedWatch() throws Exception {     WatcherClient watcherClient = watcherClient().     createIndex("idx").     // Have a sample document in the index, the watch is going to evaluate     client().prepareIndex("idx", "type").setSource("field", "value").get().     XContentBuilder watchSource = jsonBuilder().     watchSource.startObject().     watchSource.field("unknown_field", "x").     watchSource.startObject("schedule").field("cron", "0/5 * * * * ? *").endObject().     watchSource.startObject("condition").startObject("script").field("script", "return true").     watchSource.field("request", templateRequest(searchSource().query(matchAllQuery()))).     watchSource.endObject().endObject().     watchSource.endObject().     try {         watcherClient.preparePutWatch("_name").setSource(BytesReference.bytes(watchSource), watchSource.contentType()).get().         fail().     } catch (ElasticsearchParseException e) {     // In watch store we fail parsing if an watch contains undefined fields.     }     try {         client().prepareIndex(Watch.INDEX, Watch.DOC_TYPE, "_name").setSource(watchSource).get().         fail().     } catch (Exception e) {     // The watch index template the mapping is defined as strict     } }
false;public;0;41;;@TestLogging("org.elasticsearch.xpack.watcher:DEBUG") public void testModifyWatches() throws Exception {     createIndex("idx").     WatcherSearchTemplateRequest searchRequest = templateRequest(searchSource().query(matchAllQuery()), "idx").     WatchSourceBuilder source = watchBuilder().trigger(schedule(interval("5s"))).input(searchInput(searchRequest)).addAction("_id", indexAction("idx", "action")).     watcherClient().preparePutWatch("_name").setSource(source.condition(new CompareCondition("ctx.payload.hits.total", CompareCondition.Op.EQ, 1L))).get().     timeWarp().clock().fastForwardSeconds(5).     timeWarp().trigger("_name").     assertWatchWithMinimumPerformedActionsCount("_name", 0, false).     watcherClient().preparePutWatch("_name").setSource(source.condition(new CompareCondition("ctx.payload.hits.total", CompareCondition.Op.EQ, 0L))).get().     timeWarp().clock().fastForwardSeconds(5).     timeWarp().trigger("_name").     refresh().     assertWatchWithMinimumPerformedActionsCount("_name", 1, false).     watcherClient().preparePutWatch("_name").setSource(source.trigger(schedule(Schedules.cron("0/1 * * * * ? 2020"))).condition(new CompareCondition("ctx.payload.hits.total", CompareCondition.Op.EQ, 0L))).get().     timeWarp().clock().fastForwardSeconds(5).     timeWarp().trigger("_name").     long count = findNumberOfPerformedActions("_name").     timeWarp().clock().fastForwardSeconds(5).     timeWarp().trigger("_name").     assertThat(count, equalTo(findNumberOfPerformedActions("_name"))). }
false;public;0;4;;public void testConditionSearchWithSource() throws Exception {     SearchSourceBuilder searchSourceBuilder = searchSource().query(matchQuery("level", "a")).     testConditionSearch(templateRequest(searchSourceBuilder, "events")). }
false;public;0;18;;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/39306") public void testConditionSearchWithIndexedTemplate() throws Exception {     SearchSourceBuilder searchSourceBuilder = searchSource().query(matchQuery("level", "a")).     assertAcked(client().admin().cluster().preparePutStoredScript().setId("my-template").setContent(BytesReference.bytes(jsonBuilder().startObject().startObject("script").field("lang", "mustache").field("source").value(searchSourceBuilder).endObject().endObject()), XContentType.JSON).get()).     Script template = new Script(ScriptType.STORED, null, "my-template", Collections.emptyMap()).     WatcherSearchTemplateRequest searchRequest = new WatcherSearchTemplateRequest(new String[] { "events" }, new String[0], SearchType.DEFAULT, WatcherSearchTemplateRequest.DEFAULT_INDICES_OPTIONS, template).     testConditionSearch(searchRequest). }
false;public;0;33;;public void testInputFiltering() throws Exception {     WatcherClient watcherClient = watcherClient().     createIndex("idx").     // Have a sample document in the index, the watch is going to evaluate     client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field("field", "foovalue").endObject()).get().     refresh().     WatcherSearchTemplateRequest request = templateRequest(searchSource().query(termQuery("field", "foovalue")), "idx").     watcherClient.preparePutWatch("_name1").setSource(watchBuilder().trigger(schedule(interval(5, IntervalSchedule.Interval.Unit.SECONDS))).input(searchInput(request).extractKeys("hits.total.value")).condition(new CompareCondition("ctx.payload.hits.total", CompareCondition.Op.EQ, 1L))).get().     // in this watcher the condition will fail, because max_score isn't extracted, only total:     watcherClient.preparePutWatch("_name2").setSource(watchBuilder().trigger(schedule(interval(5, IntervalSchedule.Interval.Unit.SECONDS))).input(searchInput(request).extractKeys("hits.total.value")).condition(new CompareCondition("ctx.payload.hits.max_score", CompareCondition.Op.GTE, 0L))).get().     timeWarp().trigger("_name1").     assertWatchWithMinimumPerformedActionsCount("_name1", 1).     timeWarp().trigger("_name2").     assertWatchWithNoActionNeeded("_name2", 1).     // Check that the input result payload has been filtered     refresh().     SearchResponse searchResponse = searchWatchRecords(builder -> builder.setQuery(matchQuery("watch_id", "_name1"))).     assertHitCount(searchResponse, 1).     XContentSource source = xContentSource(searchResponse.getHits().getAt(0).getSourceRef()).     assertThat(source.getValue("result.input.payload.hits.total"), equalTo((Object) 1)). }
false;public;0;69;;public void testPutWatchWithNegativeSchedule() throws Exception {     try {         watcherClient().preparePutWatch("_name").setSource(watchBuilder().trigger(schedule(interval(-5, IntervalSchedule.Interval.Unit.SECONDS))).input(simpleInput("key", "value")).condition(InternalAlwaysCondition.INSTANCE).addAction("_logger", loggingAction("executed!"))).get().         fail("put watch should have failed").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("interval can't be lower than 1000 ms, but [-5s] was specified")).     }     try {         watcherClient().preparePutWatch("_name").setSource(watchBuilder().trigger(schedule(hourly().minutes(-10).build())).input(simpleInput("key", "value")).condition(InternalAlwaysCondition.INSTANCE).addAction("_logger", loggingAction("executed!"))).get().         fail("put watch should have failed").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("invalid hourly minute [-10]. minute must be between 0 and 59 incl.")).     }     try {         watcherClient().preparePutWatch("_name").setSource(watchBuilder().trigger(schedule(daily().atRoundHour(-10).build())).input(simpleInput("key", "value")).condition(InternalAlwaysCondition.INSTANCE).addAction("_logger", loggingAction("executed!"))).get().         fail("put watch should have failed").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("invalid time [0-10:00]. invalid time hour value [-10]. time hours must be between 0 and 23 incl.")).     }     try {         watcherClient().preparePutWatch("_name").setSource(watchBuilder().trigger(schedule(weekly().time(WeekTimes.builder().atRoundHour(-10).build()).build())).input(simpleInput("key", "value")).condition(InternalAlwaysCondition.INSTANCE).addAction("_logger", loggingAction("executed!"))).get().         fail("put watch should have failed").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("invalid time [0-10:00]. invalid time hour value [-10]. time hours must be between 0 and 23 incl.")).     }     try {         watcherClient().preparePutWatch("_name").setSource(watchBuilder().trigger(schedule(monthly().time(MonthTimes.builder().atRoundHour(-10).build()).build())).input(simpleInput("key", "value")).condition(InternalAlwaysCondition.INSTANCE).addAction("_logger", loggingAction("executed!"))).get().         fail("put watch should have failed").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("invalid time [0-10:00]. invalid time hour value [-10]. time hours must be between 0 and 23 incl.")).     } }
false;private;1;44;;private void testConditionSearch(WatcherSearchTemplateRequest request) throws Exception {     // reset, so we don't miss event docs when we filter over the _timestamp field.     timeWarp().clock().setTime(ZonedDateTime.now(Clock.systemUTC())).     String watchName = "_name".     assertAcked(prepareCreate("events").addMapping("event", "level", "type=text")).     watcherClient().preparePutWatch(watchName).setSource(watchBuilder().trigger(schedule(interval("5s"))).input(searchInput(request)).condition(new CompareCondition("ctx.payload.hits.total", CompareCondition.Op.GTE, 3L))).get().     logger.info("created watch [{}] at [{}]", watchName, ZonedDateTime.now(Clock.systemUTC())).     client().prepareIndex("events", "event").setSource("level", "a").get().     client().prepareIndex("events", "event").setSource("level", "a").get().     refresh().     timeWarp().clock().fastForwardSeconds(1).     timeWarp().trigger(watchName).     assertWatchWithNoActionNeeded(watchName, 1).     client().prepareIndex("events", "event").setSource("level", "b").get().     refresh().     timeWarp().clock().fastForwardSeconds(1).     timeWarp().trigger(watchName).     assertWatchWithNoActionNeeded(watchName, 2).     client().prepareIndex("events", "event").setSource("level", "a").get().     refresh().     timeWarp().clock().fastForwardSeconds(1).     timeWarp().trigger(watchName).     assertWatchWithMinimumPerformedActionsCount(watchName, 1). }
