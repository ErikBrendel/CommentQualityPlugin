commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Before public void setupAction() throws Exception {     ThreadPool threadPool = mock(ThreadPool.class).     when(threadPool.getThreadContext()).thenReturn(threadContext).     TransportService transportService = mock(TransportService.class).     WatchParser parser = mock(WatchParser.class).     when(parser.parseWithSecrets(eq("_id"), eq(false), anyObject(), anyObject(), anyObject(), anyBoolean(), anyLong(), anyLong())).thenReturn(watch).     Client client = mock(Client.class).     when(client.threadPool()).thenReturn(threadPool).     // mock an index response that calls the listener     doAnswer(invocation -> {         IndexRequest request = (IndexRequest) invocation.getArguments()[1].         ActionListener<IndexResponse> listener = (ActionListener) invocation.getArguments()[2].         ShardId shardId = new ShardId(new Index(Watch.INDEX, "uuid"), 0).         listener.onResponse(new IndexResponse(shardId, request.type(), request.id(), 1, 1, 1, true)).         return null.     }).when(client).execute(any(), any(), any()).     action = new TransportPutWatchAction(transportService, threadPool, new ActionFilters(Collections.emptySet()), new ClockMock(), new XPackLicenseState(Settings.EMPTY), parser, client). }
false;public;0;16;;public void testHeadersAreFilteredWhenPuttingWatches() throws Exception {     // set up threadcontext with some arbitrary info     String headerName = randomFrom(ClientHelper.SECURITY_HEADER_FILTERS).     threadContext.putHeader(headerName, randomAlphaOfLength(10)).     threadContext.putHeader(randomAlphaOfLength(10), "doesntmatter").     PutWatchRequest putWatchRequest = new PutWatchRequest().     putWatchRequest.setId("_id").     action.doExecute(putWatchRequest, ActionListener.wrap(r -> {     }, e -> assertThat(e, is(nullValue())))).     ArgumentCaptor<Map> captor = ArgumentCaptor.forClass(Map.class).     verify(watch.status()).setHeaders(captor.capture()).     Map<String, String> capturedHeaders = captor.getValue().     assertThat(capturedHeaders.keySet(), hasSize(1)).     assertThat(capturedHeaders, hasKey(headerName)). }
