commented;modifiers;parameterAmount;loc;comment;code
false;public;0;38;;public void testExecute() throws Exception {     ChainTransform transform = new ChainTransform(new NamedExecutableTransform.Transform("name1"), new NamedExecutableTransform.Transform("name2"), new NamedExecutableTransform.Transform("name3")).     ExecutableChainTransform executable = new ExecutableChainTransform(transform, logger, new NamedExecutableTransform("name1"), new NamedExecutableTransform("name2"), new NamedExecutableTransform("name3")).     WatchExecutionContext ctx = mock(WatchExecutionContext.class).     Payload payload = new Payload.Simple(new HashMap<String, Object>()).     ChainTransform.Result result = executable.execute(ctx, payload).     assertThat(result.status(), is(Transform.Result.Status.SUCCESS)).     assertThat(result.results(), hasSize(3)).     assertThat(result.results().get(0), instanceOf(NamedExecutableTransform.Result.class)).     assertThat(result.results().get(0).status(), is(Transform.Result.Status.SUCCESS)).     assertThat((List<String>) result.results().get(0).payload().data().get("names"), hasSize(1)).     assertThat((List<String>) result.results().get(0).payload().data().get("names"), contains("name1")).     assertThat(result.results().get(1), instanceOf(NamedExecutableTransform.Result.class)).     assertThat(result.results().get(1).status(), is(Transform.Result.Status.SUCCESS)).     assertThat((List<String>) result.results().get(1).payload().data().get("names"), hasSize(2)).     assertThat((List<String>) result.results().get(1).payload().data().get("names"), contains("name1", "name2")).     assertThat(result.results().get(2), instanceOf(NamedExecutableTransform.Result.class)).     assertThat(result.results().get(2).status(), is(Transform.Result.Status.SUCCESS)).     assertThat((List<String>) result.results().get(2).payload().data().get("names"), hasSize(3)).     assertThat((List<String>) result.results().get(2).payload().data().get("names"), contains("name1", "name2", "name3")).     Map<String, Object> data = result.payload().data().     assertThat(data, notNullValue()).     assertThat(data, hasKey("names")).     assertThat(data.get("names"), instanceOf(List.class)).     List<String> names = (List<String>) data.get("names").     assertThat(names, hasSize(3)).     assertThat(names, contains("name1", "name2", "name3")). }
false;public;0;31;;public void testExecuteFailure() throws Exception {     ChainTransform transform = new ChainTransform(new NamedExecutableTransform.Transform("name1"), new NamedExecutableTransform.Transform("name2"), new FailingExecutableTransform.Transform()).     ExecutableChainTransform executable = new ExecutableChainTransform(transform, logger, new NamedExecutableTransform("name1"), new NamedExecutableTransform("name2"), new FailingExecutableTransform(logger)).     WatchExecutionContext ctx = mock(WatchExecutionContext.class).     Payload payload = new Payload.Simple(new HashMap<String, Object>()).     ChainTransform.Result result = executable.execute(ctx, payload).     assertThat(result.status(), is(Transform.Result.Status.FAILURE)).     assertThat(result.reason(), notNullValue()).     assertThat(result.results(), hasSize(3)).     assertThat(result.results().get(0), instanceOf(NamedExecutableTransform.Result.class)).     assertThat(result.results().get(0).status(), is(Transform.Result.Status.SUCCESS)).     assertThat((List<String>) result.results().get(0).payload().data().get("names"), hasSize(1)).     assertThat((List<String>) result.results().get(0).payload().data().get("names"), contains("name1")).     assertThat(result.results().get(1), instanceOf(NamedExecutableTransform.Result.class)).     assertThat(result.results().get(1).status(), is(Transform.Result.Status.SUCCESS)).     assertThat((List<String>) result.results().get(1).payload().data().get("names"), hasSize(2)).     assertThat((List<String>) result.results().get(1).payload().data().get("names"), contains("name1", "name2")).     assertThat(result.results().get(2), instanceOf(FailingExecutableTransform.Result.class)).     assertThat(result.results().get(2).status(), is(Transform.Result.Status.FAILURE)).     assertThat(result.results().get(2).reason(), containsString("_error")). }
false;public;0;23;;public void testParser() throws Exception {     TransformRegistry registry = new TransformRegistry(singletonMap("named", new NamedExecutableTransform.Factory(logger))).     ChainTransformFactory transformParser = new ChainTransformFactory(registry).     XContentBuilder builder = jsonBuilder().startArray().startObject().startObject("named").field("name", "name1").endObject().endObject().startObject().startObject("named").field("name", "name2").endObject().endObject().startObject().startObject("named").field("name", "name3").endObject().endObject().startObject().field("named", "name4").endObject().endArray().     XContentParser parser = createParser(JsonXContent.jsonXContent, BytesReference.bytes(builder)).     parser.nextToken().     ExecutableChainTransform executable = transformParser.parseExecutable("_id", parser).     assertThat(executable, notNullValue()).     assertThat(executable.transform().getTransforms(), notNullValue()).     assertThat(executable.transform().getTransforms(), hasSize(4)).     for (int i = 0. i < executable.transform().getTransforms().size(). i++) {         assertThat(executable.executableTransforms().get(i), instanceOf(NamedExecutableTransform.class)).         assertThat(((NamedExecutableTransform) executable.executableTransforms().get(i)).transform().name, is("name" + (i + 1))).     } }
false;public;2;13;;@Override public Result execute(WatchExecutionContext ctx, Payload payload) {     List<String> names = (List<String>) payload.data().get("names").     if (names == null) {         names = new ArrayList<>().     } else {         names = new ArrayList<>(names).     }     names.add(transform.name).     Map<String, Object> data = new HashMap<>().     data.put("names", names).     return new Result("named", new Payload.Simple(data)). }
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject().field("name", name).endObject(). }
false;protected;2;4;;@Override protected XContentBuilder typeXContent(XContentBuilder builder, Params params) throws IOException {     return builder. }
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;2;15;;@Override public Transform parseTransform(String watchId, XContentParser parser) throws IOException {     if (parser.currentToken() == XContentParser.Token.VALUE_STRING) {         return new Transform(parser.text()).     }     assert parser.currentToken() == XContentParser.Token.START_OBJECT.     XContentParser.Token token = parser.nextToken().     // the "name" field     assert token == XContentParser.Token.FIELD_NAME.     token = parser.nextToken().     assert token == XContentParser.Token.VALUE_STRING.     String name = parser.text().     token = parser.nextToken().     assert token == XContentParser.Token.END_OBJECT.     return new Transform(name). }
false;public;1;4;;@Override public NamedExecutableTransform createExecutable(Transform transform) {     return new NamedExecutableTransform(transform). }
false;public;2;4;;@Override public Result execute(WatchExecutionContext ctx, Payload payload) {     return new Result(TYPE). }
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject().endObject(). }
false;protected;2;4;;@Override protected XContentBuilder typeXContent(XContentBuilder builder, Params params) throws IOException {     return builder. }
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;2;7;;@Override public Transform parseTransform(String watchId, XContentParser parser) throws IOException {     assert parser.currentToken() == XContentParser.Token.START_OBJECT.     XContentParser.Token token = parser.nextToken().     assert token == XContentParser.Token.END_OBJECT.     return new Transform(). }
false;public;1;4;;@Override public FailingExecutableTransform createExecutable(Transform transform) {     return new FailingExecutableTransform(transformLogger). }
