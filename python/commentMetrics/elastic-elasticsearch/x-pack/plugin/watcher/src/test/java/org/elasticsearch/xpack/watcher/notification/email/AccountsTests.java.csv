commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testSingleAccount() throws Exception {     Settings.Builder builder = Settings.builder().put("default_account", "account1").     addAccountSettings("account1", builder).     EmailService service = new EmailService(builder.build(), null, new ClusterSettings(Settings.EMPTY, new HashSet<>(EmailService.getSettings()))).     Account account = service.getAccount("account1").     assertThat(account, notNullValue()).     assertThat(account.name(), equalTo("account1")).     // falling back on the default     account = service.getAccount(null).     assertThat(account, notNullValue()).     assertThat(account.name(), equalTo("account1")). }
false;public;0;12;;public void testSingleAccountNoExplicitDefault() throws Exception {     Settings.Builder builder = Settings.builder().     addAccountSettings("account1", builder).     EmailService service = new EmailService(builder.build(), null, new ClusterSettings(Settings.EMPTY, new HashSet<>(EmailService.getSettings()))).     Account account = service.getAccount("account1").     assertThat(account, notNullValue()).     assertThat(account.name(), equalTo("account1")).     // falling back on the default     account = service.getAccount(null).     assertThat(account, notNullValue()).     assertThat(account.name(), equalTo("account1")). }
false;public;0;18;;public void testMultipleAccounts() throws Exception {     Settings.Builder builder = Settings.builder().put("xpack.notification.email.default_account", "account1").     addAccountSettings("account1", builder).     addAccountSettings("account2", builder).     EmailService service = new EmailService(builder.build(), null, new ClusterSettings(Settings.EMPTY, new HashSet<>(EmailService.getSettings()))).     Account account = service.getAccount("account1").     assertThat(account, notNullValue()).     assertThat(account.name(), equalTo("account1")).     account = service.getAccount("account2").     assertThat(account, notNullValue()).     assertThat(account.name(), equalTo("account2")).     // falling back on the default     account = service.getAccount(null).     assertThat(account, notNullValue()).     assertThat(account.name(), equalTo("account1")). }
false;public;0;18;;public void testMultipleAccountsNoExplicitDefault() throws Exception {     Settings.Builder builder = Settings.builder().put("default_account", "account1").     addAccountSettings("account1", builder).     addAccountSettings("account2", builder).     EmailService service = new EmailService(builder.build(), null, new ClusterSettings(Settings.EMPTY, new HashSet<>(EmailService.getSettings()))).     Account account = service.getAccount("account1").     assertThat(account, notNullValue()).     assertThat(account.name(), equalTo("account1")).     account = service.getAccount("account2").     assertThat(account, notNullValue()).     assertThat(account.name(), equalTo("account2")).     account = service.getAccount(null).     assertThat(account, notNullValue()).     assertThat(account.name(), isOneOf("account1", "account2")). }
false;public;0;8;;public void testMultipleAccountsUnknownDefault() throws Exception {     Settings.Builder builder = Settings.builder().put("xpack.notification.email.default_account", "unknown").     addAccountSettings("account1", builder).     addAccountSettings("account2", builder).     ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, new HashSet<>(EmailService.getSettings())).     SettingsException e = expectThrows(SettingsException.class, () -> new EmailService(builder.build(), null, clusterSettings)).     assertThat(e.getMessage(), is("could not find default account [unknown]")). }
false;public;0;6;;public void testNoAccount() throws Exception {     Settings.Builder builder = Settings.builder().     EmailService service = new EmailService(builder.build(), null, new ClusterSettings(Settings.EMPTY, new HashSet<>(EmailService.getSettings()))).     expectThrows(IllegalArgumentException.class, () -> service.getAccount(null)). }
false;public;0;6;;public void testNoAccountWithDefaultAccount() throws Exception {     Settings settings = Settings.builder().put("xpack.notification.email.default_account", "unknown").build().     ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, new HashSet<>(EmailService.getSettings())).     SettingsException e = expectThrows(SettingsException.class, () -> new EmailService(settings, null, clusterSettings)).     assertThat(e.getMessage(), is("could not find default account [unknown]")). }
false;private;2;3;;private void addAccountSettings(String name, Settings.Builder builder) {     builder.put("xpack.notification.email.account." + name + ".smtp.host", "_host"). }
