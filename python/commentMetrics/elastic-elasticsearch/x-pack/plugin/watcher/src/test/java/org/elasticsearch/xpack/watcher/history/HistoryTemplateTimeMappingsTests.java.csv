commented;modifiers;parameterAmount;loc;comment;code
false;public;0;37;;public void testTimeFields() throws Exception {     PutWatchResponse putWatchResponse = watcherClient().preparePutWatch("_id").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput()).condition(InternalAlwaysCondition.INSTANCE).addAction("_logging", loggingAction("foobar"))).get().     assertThat(putWatchResponse.isCreated(), is(true)).     timeWarp().trigger("_id").     assertWatchWithMinimumActionsCount("_id", ExecutionState.EXECUTED, 1).     assertBusy(() -> {         GetMappingsResponse mappingsResponse = client().admin().indices().prepareGetMappings().get().         assertThat(mappingsResponse, notNullValue()).         assertThat(mappingsResponse.getMappings().isEmpty(), is(false)).         for (ObjectObjectCursor<String, ImmutableOpenMap<String, MappingMetaData>> metadatas : mappingsResponse.getMappings()) {             if (!metadatas.key.startsWith(HistoryStoreField.INDEX_PREFIX)) {                 continue.             }             MappingMetaData metadata = metadatas.value.get("doc").             assertThat(metadata, notNullValue()).             try {                 Map<String, Object> source = metadata.getSourceAsMap().                 logger.info("checking index [{}] with metadata:\n[{}]", metadatas.key, metadata.source().toString()).                 assertThat(extractValue("properties.trigger_event.properties.type.type", source), is((Object) "keyword")).                 assertThat(extractValue("properties.trigger_event.properties.triggered_time.type", source), is((Object) "date")).                 assertThat(extractValue("properties.trigger_event.properties.schedule.properties.scheduled_time.type", source), is((Object) "date")).                 assertThat(extractValue("properties.result.properties.execution_time.type", source), is((Object) "date")).             } catch (ElasticsearchParseException e) {                 throw new RuntimeException(e).             }         }     }). }
