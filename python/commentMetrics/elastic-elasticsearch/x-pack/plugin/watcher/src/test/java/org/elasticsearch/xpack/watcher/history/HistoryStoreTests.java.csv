commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void init() {     Settings settings = Settings.builder().put("node.name", randomAlphaOfLength(10)).build().     client = mock(Client.class).     ThreadPool threadPool = mock(ThreadPool.class).     when(client.threadPool()).thenReturn(threadPool).     when(client.settings()).thenReturn(settings).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(settings)).     BulkProcessor.Listener listener = mock(BulkProcessor.Listener.class).     BulkProcessor bulkProcessor = BulkProcessor.builder(client, listener).setConcurrentRequests(0).setBulkActions(1).build().     historyStore = new HistoryStore(bulkProcessor). }
false;public;0;26;;public void testPut() throws Exception {     ZonedDateTime now = Instant.ofEpochMilli(0).atZone(ZoneOffset.UTC).     Wid wid = new Wid("_name", now).     String index = getHistoryIndexNameForTime(now).     ScheduleTriggerEvent event = new ScheduleTriggerEvent(wid.watchId(), now, now).     WatchRecord watchRecord = new WatchRecord.MessageWatchRecord(wid, event, ExecutionState.EXECUTED, null, randomAlphaOfLength(10)).     IndexResponse indexResponse = mock(IndexResponse.class).     doAnswer(invocation -> {         BulkRequest request = (BulkRequest) invocation.getArguments()[1].         ActionListener<BulkResponse> listener = (ActionListener<BulkResponse>) invocation.getArguments()[2].         IndexRequest indexRequest = (IndexRequest) request.requests().get(0).         if (indexRequest.id().equals(wid.value()) && indexRequest.type().equals(HistoryStore.DOC_TYPE) && indexRequest.opType() == OpType.CREATE && indexRequest.index().equals(index)) {             listener.onResponse(new BulkResponse(new BulkItemResponse[] { new BulkItemResponse(1, OpType.CREATE, indexResponse) }, 1)).         } else {             listener.onFailure(new ElasticsearchException("test issue")).         }         return null.     }).when(client).bulk(any(), any()).     historyStore.put(watchRecord).     verify(client).bulk(any(), any()). }
false;public;0;11;;public void testIndexNameGeneration() {     String indexTemplateVersion = INDEX_TEMPLATE_VERSION.     assertThat(getHistoryIndexNameForTime(Instant.ofEpochMilli((long) 0).atZone(ZoneOffset.UTC)), equalTo(".watcher-history-" + indexTemplateVersion + "-1970.01.01")).     assertThat(getHistoryIndexNameForTime(Instant.ofEpochMilli(100000000000L).atZone(ZoneOffset.UTC)), equalTo(".watcher-history-" + indexTemplateVersion + "-1973.03.03")).     assertThat(getHistoryIndexNameForTime(Instant.ofEpochMilli(1416582852000L).atZone(ZoneOffset.UTC)), equalTo(".watcher-history-" + indexTemplateVersion + "-2014.11.21")).     assertThat(getHistoryIndexNameForTime(Instant.ofEpochMilli(2833165811000L).atZone(ZoneOffset.UTC)), equalTo(".watcher-history-" + indexTemplateVersion + "-2059.10.12")). }
false;public;0;63;;public void testStoreWithHideSecrets() throws Exception {     HttpClient httpClient = mock(HttpClient.class).     when(httpClient.execute(any(HttpRequest.class))).thenReturn(new HttpResponse(HttpStatus.SC_INTERNAL_SERVER_ERROR)).     final String username = randomFrom("admin", "elastic", "test").     final String password = randomFrom("secret", "supersecret", "123456").     final String url = "https://" + randomFrom("localhost", "internal-jira.elastic.co") + ":" + randomFrom(80, 8080, 449, 9443).     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("secure_url", url).     secureSettings.setString("secure_user", username).     secureSettings.setString("secure_password", password).     Settings settings = Settings.builder().setSecureSettings(secureSettings).build().     JiraAccount account = new JiraAccount("_account", settings, httpClient).     JiraIssue jiraIssue = account.createIssue(singletonMap("foo", "bar"), null).     ActionWrapperResult result = new ActionWrapperResult(JiraAction.TYPE, new JiraAction.Executed(jiraIssue)).     ZonedDateTime now = Instant.ofEpochMilli((long) 0).atZone(ZoneOffset.UTC).     Wid wid = new Wid("_name", now).     Watch watch = mock(Watch.class).     when(watch.id()).thenReturn("_id").     when(watch.status()).thenReturn(new WatchStatus(now, singletonMap("_action", new ActionStatus(now)))).     WatchExecutionContext context = mock(WatchExecutionContext.class).     when(context.id()).thenReturn(wid).     when(context.triggerEvent()).thenReturn(new ScheduleTriggerEvent(wid.watchId(), now, now)).     when(context.vars()).thenReturn(emptyMap()).     when(context.watch()).thenReturn(watch).     WatchExecutionResult watchExecutionResult = new WatchExecutionResult(context, 0).     WatchRecord watchRecord.     if (randomBoolean()) {         watchRecord = new WatchRecord.MessageWatchRecord(context, watchExecutionResult).     } else {         watchRecord = new WatchRecord.ExceptionWatchRecord(context, watchExecutionResult, new IllegalStateException()).     }     watchRecord.result().actionsResults().put(JiraAction.TYPE, result).     ArgumentCaptor<BulkRequest> requestCaptor = ArgumentCaptor.forClass(BulkRequest.class).     doAnswer(invocation -> {         ActionListener<BulkResponse> listener = (ActionListener<BulkResponse>) invocation.getArguments()[2].         IndexResponse indexResponse = mock(IndexResponse.class).         listener.onResponse(new BulkResponse(new BulkItemResponse[] { new BulkItemResponse(1, OpType.CREATE, indexResponse) }, 1)).         return null.     }).when(client).bulk(requestCaptor.capture(), any()).     if (randomBoolean()) {         historyStore.put(watchRecord).     } else {         historyStore.forcePut(watchRecord).     }     assertThat(requestCaptor.getAllValues(), hasSize(1)).     assertThat(requestCaptor.getValue().requests().get(0), instanceOf(IndexRequest.class)).     IndexRequest capturedIndexRequest = (IndexRequest) requestCaptor.getValue().requests().get(0).     String indexedJson = capturedIndexRequest.source().utf8ToString().     assertThat(indexedJson, containsString(username)).     assertThat(indexedJson, not(containsString(password))). }
