commented;modifiers;parameterAmount;loc;comment;code
false;protected,static;0;9;;protected static void start() throws Exception {     Node node = new MockNode(Settings.builder().put(SETTINGS).put("node.data", false).build(), Arrays.asList(BenchmarkWatcher.class)).     client = node.client().     client.admin().cluster().prepareHealth("*").setWaitForGreenStatus().get().     Thread.sleep(5000).     watcherClient = node.injector().getInstance(WatcherClient.class).     scheduler = node.injector().getInstance(ScheduleTriggerEngineMock.class). }
false;public;0;8;;@Override public void run() {     while (true) {         for (int j = begin. j < end. j++) {             scheduler.trigger("_name" + j).         }     } }
false;public,static;1;43;;public static void main(String[] args) throws Exception {     start().     client.admin().indices().prepareCreate("test").get().     client.prepareIndex("test", "test", "1").setSource("{}", XContentType.JSON).get().     int numAlerts = 1000.     for (int i = 0. i < numAlerts. i++) {         final String name = "_name" + i.         PutWatchRequest putAlertRequest = new PutWatchRequest(name, new WatchSourceBuilder().trigger(schedule(interval("5s"))).input(searchInput(templateRequest(new SearchSourceBuilder(), "test"))).condition(new ScriptCondition(new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, "ctx.payload.hits.total.value > 0", emptyMap()))).buildAsBytes(XContentType.JSON), XContentType.JSON).         putAlertRequest.setId(name).         watcherClient.putWatch(putAlertRequest).actionGet().     }     int numThreads = 50.     int watchersPerThread = numAlerts / numThreads.     Thread[] threads = new Thread[numThreads].     for (int i = 0. i < numThreads. i++) {         final int begin = i * watchersPerThread.         final int end = (i + 1) * watchersPerThread.         Runnable r = new Runnable() {              @Override             public void run() {                 while (true) {                     for (int j = begin. j < end. j++) {                         scheduler.trigger("_name" + j).                     }                 }             }         }.         threads[i] = new Thread(r).         threads[i].start().     }     for (Thread thread : threads) {         thread.join().     } }
false;public;0;8;;@Override public void run() {     while (true) {         for (int j = begin. j < end. j++) {             scheduler.trigger("_name" + j).         }     } }
false;public,static;1;40;;public static void main(String[] args) throws Exception {     start().     int numAlerts = 1000.     for (int i = 0. i < numAlerts. i++) {         final String name = "_name" + i.         PutWatchRequest putAlertRequest = new PutWatchRequest(name, new WatchSourceBuilder().trigger(schedule(interval("5s"))).input(searchInput(templateRequest(new SearchSourceBuilder(), "test")).extractKeys("hits.total.value")).condition(new ScriptCondition(new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, "1 == 1", emptyMap()))).addAction("_id", indexAction("index", "type")).buildAsBytes(XContentType.JSON), XContentType.JSON).         putAlertRequest.setId(name).         watcherClient.putWatch(putAlertRequest).actionGet().     }     int numThreads = 50.     int watchersPerThread = numAlerts / numThreads.     Thread[] threads = new Thread[numThreads].     for (int i = 0. i < numThreads. i++) {         final int begin = i * watchersPerThread.         final int end = (i + 1) * watchersPerThread.         Runnable r = new Runnable() {              @Override             public void run() {                 while (true) {                     for (int j = begin. j < end. j++) {                         scheduler.trigger("_name" + j).                     }                 }             }         }.         threads[i] = new Thread(r).         threads[i].start().     }     for (Thread thread : threads) {         thread.join().     } }
false;public,static;1;37;;public static void main(String[] args) throws Exception {     start().     int numAlerts = 1000.     for (int i = 0. i < numAlerts. i++) {         final String name = "_name" + i.         PutWatchRequest putAlertRequest = new PutWatchRequest(name, new WatchSourceBuilder().trigger(schedule(interval("5s"))).input(httpInput(HttpRequestTemplate.builder("localhost", 9200))).condition(new ScriptCondition(new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, "ctx.payload.tagline == \"You Know, for Search\"", emptyMap()))).buildAsBytes(XContentType.JSON), XContentType.JSON).         putAlertRequest.setId(name).         watcherClient.putWatch(putAlertRequest).actionGet().     }     int numThreads = 50.     int watchersPerThread = numAlerts / numThreads.     Thread[] threads = new Thread[numThreads].     for (int i = 0. i < numThreads. i++) {         final int begin = i * watchersPerThread.         final int end = (i + 1) * watchersPerThread.         Runnable r = () -> {             while (true) {                 for (int j = begin. j < end. j++) {                     scheduler.trigger("_name" + j).                 }             }         }.         threads[i] = new Thread(r).         threads[i].start().     }     for (Thread thread : threads) {         thread.join().     } }
false;protected;2;4;;@Override protected TriggerEngine getTriggerEngine(Clock clock, ScheduleRegistry scheduleRegistry) {     return new ScheduleTriggerEngineMock(scheduleRegistry, clock). }
