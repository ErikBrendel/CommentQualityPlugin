commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testDefault() throws Exception {     WeeklySchedule schedule = new WeeklySchedule().     String[] crons = expressions(schedule).     assertThat(crons, arrayWithSize(1)).     assertThat(crons, arrayContaining("0 0 0 ? * MON")). }
false;public;0;10;;public void testSingleTime() throws Exception {     WeekTimes time = validWeekTime().     WeeklySchedule schedule = new WeeklySchedule(time).     String[] crons = expressions(schedule).     assertThat(crons, arrayWithSize(time.times().length)).     for (DayTimes dayTimes : time.times()) {         assertThat(crons, hasItemInArray("0 " + join(",", dayTimes.minute()) + " " + join(",", dayTimes.hour()) + " ? * " + Strings.collectionToCommaDelimitedString(time.days()))).     } }
false;public;0;16;;public void testMultipleTimes() throws Exception {     WeekTimes[] times = validWeekTimes().     WeeklySchedule schedule = new WeeklySchedule(times).     String[] crons = expressions(schedule).     int count = 0.     for (int i = 0. i < times.length. i++) {         count += times[i].times().length.     }     assertThat(crons, arrayWithSize(count)).     for (WeekTimes weekTimes : times) {         for (DayTimes dayTimes : weekTimes.times()) {             assertThat(crons, hasItemInArray("0 " + join(",", dayTimes.minute()) + " " + join(",", dayTimes.hour()) + " ? * " + Strings.collectionToCommaDelimitedString(weekTimes.days()))).         }     } }
false;public;0;10;;public void testParserEmpty() throws Exception {     XContentBuilder builder = jsonBuilder().startObject().endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     WeeklySchedule schedule = new WeeklySchedule.Parser().parse(parser).     assertThat(schedule, notNullValue()).     assertThat(schedule.times().length, is(1)).     assertThat(schedule.times()[0], is(new WeekTimes(DayOfWeek.MONDAY, new DayTimes()))). }
false;public;0;21;;public void testParserSingleTime() throws Exception {     DayTimes time = validDayTime().     XContentBuilder builder = jsonBuilder().startObject().field("on", "mon").startObject("at").array("hour", time.hour()).array("minute", time.minute()).endObject().endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     WeeklySchedule schedule = new WeeklySchedule.Parser().parse(parser).     assertThat(schedule, notNullValue()).     assertThat(schedule.times().length, is(1)).     assertThat(schedule.times()[0].days(), hasSize(1)).     assertThat(schedule.times()[0].days(), contains(DayOfWeek.MONDAY)).     assertThat(schedule.times()[0].times(), arrayWithSize(1)).     assertThat(schedule.times()[0].times(), hasItemInArray(time)). }
false;public;0;20;;public void testParserSingleTimeInvalid() throws Exception {     HourAndMinute time = invalidDayTime().     XContentBuilder builder = jsonBuilder().startObject().field("on", "mon").startObject("at").field("hour", time.hour).field("minute", time.minute).endObject().endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     try {         new WeeklySchedule.Parser().parse(parser).         fail("Expected ElasticsearchParseException").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), is("could not parse [weekly] schedule. invalid weekly times")).     } }
false;public;0;13;;public void testParserMultipleTimes() throws Exception {     WeekTimes[] times = validWeekTimes().     XContentBuilder builder = jsonBuilder().value(times).     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     WeeklySchedule schedule = new WeeklySchedule.Parser().parse(parser).     assertThat(schedule, notNullValue()).     assertThat(schedule.times().length, is(times.length)).     for (int i = 0. i < times.length. i++) {         assertThat(schedule.times(), hasItemInArray(times[i])).     } }
false;public;0;17;;public void testParserMultipleTimesObjectsInvalid() throws Exception {     HourAndMinute[] times = invalidDayTimes().     XContentBuilder builder = jsonBuilder().startObject().field("on", randomDaysOfWeek()).array("at", (Object[]) times).endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     try {         new WeeklySchedule.Parser().parse(parser).         fail("Expected ElasticsearchParseException").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), is("could not parse [weekly] schedule. invalid weekly times")).     } }
