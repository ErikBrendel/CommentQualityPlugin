commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;public void testCreateCtxModel() throws Exception {     ZonedDateTime scheduledTime = ZonedDateTime.now(ZoneOffset.UTC).     ZonedDateTime triggeredTime = scheduledTime.toInstant().plusMillis(50).atZone(ZoneOffset.UTC).     ZonedDateTime executionTime = triggeredTime.toInstant().plusMillis(50).atZone(ZoneOffset.UTC).     Payload payload = new Payload.Simple(singletonMap("payload_key", "payload_value")).     Map<String, Object> metatdata = singletonMap("metadata_key", "metadata_value").     TriggerEvent event = new ScheduleTriggerEvent("_watch_id", triggeredTime, scheduledTime).     Wid wid = new Wid("_watch_id", executionTime).     WatchExecutionContext ctx = WatcherTestUtils.mockExecutionContextBuilder("_watch_id").wid(wid).executionTime(executionTime).triggerEvent(event).payload(payload).metadata(metatdata).buildMock().     Map<String, Object> model = Variables.createCtxParamsMap(ctx, payload).     assertThat(model, notNullValue()).     assertThat(model.size(), is(1)).     JodaCompatibleZonedDateTime jodaJavaExecutionTime = new JodaCompatibleZonedDateTime(executionTime.toInstant(), ZoneOffset.UTC).     assertThat(ObjectPath.eval("ctx", model), instanceOf(Map.class)).     assertThat(ObjectPath.eval("ctx.id", model), is(wid.value())).     // NOTE: we use toString() here because two ZonedDateTime are *not* equal, we need to check with isEqual     // for date/time equality, but no hamcrest matcher exists for that     assertThat(ObjectPath.eval("ctx.execution_time", model), Matchers.hasToString(jodaJavaExecutionTime.toString())).     assertThat(ObjectPath.eval("ctx.trigger", model), is(event.data())).     assertThat(ObjectPath.eval("ctx.payload", model), is(payload.data())).     assertThat(ObjectPath.eval("ctx.metadata", model), is(metatdata)). }
