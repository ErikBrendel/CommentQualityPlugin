# id;timestamp;commentText;codeText;commentWords;codeWords
HistoryActionConditionTests -> @SuppressWarnings("unchecked")     public void testActionConditionWithHardFailures() throws Exception;1524684173;A hard failure is where an exception is thrown by the script condition.;@SuppressWarnings("unchecked")_    public void testActionConditionWithHardFailures() throws Exception {_        final String id = "testActionConditionWithHardFailures"___        final ExecutableCondition scriptConditionFailsHard = mockScriptCondition("throw new IllegalStateException('failed')_")__        final List<ExecutableCondition> actionConditionsWithFailure =_                Arrays.asList(scriptConditionFailsHard, conditionPasses, InternalAlwaysCondition.INSTANCE)___        Collections.shuffle(actionConditionsWithFailure, random())___        final int failedIndex = actionConditionsWithFailure.indexOf(scriptConditionFailsHard)___        putAndTriggerWatch(id, input, actionConditionsWithFailure.toArray(new Condition[actionConditionsWithFailure.size()]))___        flush()___        assertWatchWithMinimumActionsCount(id, ExecutionState.EXECUTED, 1)___        _        final SearchResponse response = searchHistory(SearchSourceBuilder.searchSource().query(termQuery("watch_id", id)))__        assertThat(response.getHits().getTotalHits(), is(1L))___        final SearchHit hit = response.getHits().getAt(0)__        final List<Object> actions = getActionsFromHit(hit.getSourceAsMap())___        for (int i = 0_ i < actionConditionsWithFailure.size()_ ++i) {_            final Map<String, Object> action = (Map<String, Object>)actions.get(i)__            final Map<String, Object> condition = (Map<String, Object>)action.get("condition")__            final Map<String, Object> logging = (Map<String, Object>)action.get("logging")___            assertThat(action.get("id"), is("action" + i))___            if (i == failedIndex) {_                assertThat(action.get("status"), is("condition_failed"))__                assertThat(action.get("reason"), is("condition failed. skipping: [expected] failed hard"))__                assertThat(condition, nullValue())__                assertThat(logging, nullValue())__            } else {_                assertThat(condition.get("type"), is(actionConditionsWithFailure.get(i).type()))___                assertThat(action.get("status"), is("success"))__                assertThat(condition.get("met"), is(true))__                assertThat(action.get("reason"), nullValue())__                assertThat(logging.get("logged_text"), is(Integer.toString(i)))__            }_        }_    };a,hard,failure,is,where,an,exception,is,thrown,by,the,script,condition;suppress,warnings,unchecked,public,void,test,action,condition,with,hard,failures,throws,exception,final,string,id,test,action,condition,with,hard,failures,final,executable,condition,script,condition,fails,hard,mock,script,condition,throw,new,illegal,state,exception,failed,final,list,executable,condition,action,conditions,with,failure,arrays,as,list,script,condition,fails,hard,condition,passes,internal,always,condition,instance,collections,shuffle,action,conditions,with,failure,random,final,int,failed,index,action,conditions,with,failure,index,of,script,condition,fails,hard,put,and,trigger,watch,id,input,action,conditions,with,failure,to,array,new,condition,action,conditions,with,failure,size,flush,assert,watch,with,minimum,actions,count,id,execution,state,executed,1,final,search,response,response,search,history,search,source,builder,search,source,query,term,query,id,assert,that,response,get,hits,get,total,hits,is,1l,final,search,hit,hit,response,get,hits,get,at,0,final,list,object,actions,get,actions,from,hit,hit,get,source,as,map,for,int,i,0,i,action,conditions,with,failure,size,i,final,map,string,object,action,map,string,object,actions,get,i,final,map,string,object,condition,map,string,object,action,get,condition,final,map,string,object,logging,map,string,object,action,get,logging,assert,that,action,get,id,is,action,i,if,i,failed,index,assert,that,action,get,status,is,assert,that,action,get,reason,is,condition,failed,skipping,expected,failed,hard,assert,that,condition,null,value,assert,that,logging,null,value,else,assert,that,condition,get,type,is,action,conditions,with,failure,get,i,type,assert,that,action,get,status,is,success,assert,that,condition,get,met,is,true,assert,that,action,get,reason,null,value,assert,that,logging,get,is,integer,to,string,i
HistoryActionConditionTests -> @SuppressWarnings("unchecked")     public void testActionConditionWithHardFailures() throws Exception;1532028790;A hard failure is where an exception is thrown by the script condition.;@SuppressWarnings("unchecked")_    public void testActionConditionWithHardFailures() throws Exception {_        final String id = "testActionConditionWithHardFailures"___        final ExecutableCondition scriptConditionFailsHard = mockScriptCondition("throw new IllegalStateException('failed')_")__        final List<ExecutableCondition> actionConditionsWithFailure =_                Arrays.asList(scriptConditionFailsHard, conditionPasses, InternalAlwaysCondition.INSTANCE)___        Collections.shuffle(actionConditionsWithFailure, random())___        final int failedIndex = actionConditionsWithFailure.indexOf(scriptConditionFailsHard)___        putAndTriggerWatch(id, input, actionConditionsWithFailure.toArray(new Condition[actionConditionsWithFailure.size()]))___        flush()___        assertWatchWithMinimumActionsCount(id, ExecutionState.EXECUTED, 1)___        _        final SearchResponse response = searchHistory(SearchSourceBuilder.searchSource().query(termQuery("watch_id", id)))__        assertThat(response.getHits().getTotalHits(), is(1L))___        final SearchHit hit = response.getHits().getAt(0)__        final List<Object> actions = getActionsFromHit(hit.getSourceAsMap())___        for (int i = 0_ i < actionConditionsWithFailure.size()_ ++i) {_            final Map<String, Object> action = (Map<String, Object>)actions.get(i)__            final Map<String, Object> condition = (Map<String, Object>)action.get("condition")__            final Map<String, Object> logging = (Map<String, Object>)action.get("logging")___            assertThat(action.get("id"), is("action" + i))___            if (i == failedIndex) {_                assertThat(action.get("status"), is("condition_failed"))__                assertThat(action.get("reason"), is("condition failed. skipping: [expected] failed hard"))__                assertThat(condition, nullValue())__                assertThat(logging, nullValue())__            } else {_                assertThat(condition.get("type"), is(actionConditionsWithFailure.get(i).type()))___                assertThat(action.get("status"), is("success"))__                assertThat(condition.get("met"), is(true))__                assertThat(action.get("reason"), nullValue())__                assertThat(logging.get("logged_text"), is(Integer.toString(i)))__            }_        }_    };a,hard,failure,is,where,an,exception,is,thrown,by,the,script,condition;suppress,warnings,unchecked,public,void,test,action,condition,with,hard,failures,throws,exception,final,string,id,test,action,condition,with,hard,failures,final,executable,condition,script,condition,fails,hard,mock,script,condition,throw,new,illegal,state,exception,failed,final,list,executable,condition,action,conditions,with,failure,arrays,as,list,script,condition,fails,hard,condition,passes,internal,always,condition,instance,collections,shuffle,action,conditions,with,failure,random,final,int,failed,index,action,conditions,with,failure,index,of,script,condition,fails,hard,put,and,trigger,watch,id,input,action,conditions,with,failure,to,array,new,condition,action,conditions,with,failure,size,flush,assert,watch,with,minimum,actions,count,id,execution,state,executed,1,final,search,response,response,search,history,search,source,builder,search,source,query,term,query,id,assert,that,response,get,hits,get,total,hits,is,1l,final,search,hit,hit,response,get,hits,get,at,0,final,list,object,actions,get,actions,from,hit,hit,get,source,as,map,for,int,i,0,i,action,conditions,with,failure,size,i,final,map,string,object,action,map,string,object,actions,get,i,final,map,string,object,condition,map,string,object,action,get,condition,final,map,string,object,logging,map,string,object,action,get,logging,assert,that,action,get,id,is,action,i,if,i,failed,index,assert,that,action,get,status,is,assert,that,action,get,reason,is,condition,failed,skipping,expected,failed,hard,assert,that,condition,null,value,assert,that,logging,null,value,else,assert,that,condition,get,type,is,action,conditions,with,failure,get,i,type,assert,that,action,get,status,is,success,assert,that,condition,get,met,is,true,assert,that,action,get,reason,null,value,assert,that,logging,get,is,integer,to,string,i
HistoryActionConditionTests -> @SuppressWarnings("unchecked")     public void testActionConditionWithHardFailures() throws Exception;1538170812;A hard failure is where an exception is thrown by the script condition.;@SuppressWarnings("unchecked")_    public void testActionConditionWithHardFailures() throws Exception {_        final String id = "testActionConditionWithHardFailures"___        final ExecutableCondition scriptConditionFailsHard = mockScriptCondition("throw new IllegalStateException('failed')_")__        final List<ExecutableCondition> actionConditionsWithFailure =_                Arrays.asList(scriptConditionFailsHard, conditionPasses, InternalAlwaysCondition.INSTANCE)___        Collections.shuffle(actionConditionsWithFailure, random())___        final int failedIndex = actionConditionsWithFailure.indexOf(scriptConditionFailsHard)___        putAndTriggerWatch(id, input, actionConditionsWithFailure.toArray(new Condition[actionConditionsWithFailure.size()]))___        flush()___        assertWatchWithMinimumActionsCount(id, ExecutionState.EXECUTED, 1)___        _        final SearchResponse response = searchHistory(SearchSourceBuilder.searchSource().query(termQuery("watch_id", id)))__        assertThat(response.getHits().getTotalHits(), is(1L))___        final SearchHit hit = response.getHits().getAt(0)__        final List<Object> actions = getActionsFromHit(hit.getSourceAsMap())___        for (int i = 0_ i < actionConditionsWithFailure.size()_ ++i) {_            final Map<String, Object> action = (Map<String, Object>)actions.get(i)__            final Map<String, Object> condition = (Map<String, Object>)action.get("condition")__            final Map<String, Object> logging = (Map<String, Object>)action.get("logging")___            assertThat(action.get("id"), is("action" + i))___            if (i == failedIndex) {_                assertThat(action.get("status"), is("condition_failed"))__                assertThat(action.get("reason"), is("condition failed. skipping: [expected] failed hard"))__                assertThat(condition, nullValue())__                assertThat(logging, nullValue())__            } else {_                assertThat(condition.get("type"), is(actionConditionsWithFailure.get(i).type()))___                assertThat(action.get("status"), is("success"))__                assertThat(condition.get("met"), is(true))__                assertThat(action.get("reason"), nullValue())__                assertThat(logging.get("logged_text"), is(Integer.toString(i)))__            }_        }_    };a,hard,failure,is,where,an,exception,is,thrown,by,the,script,condition;suppress,warnings,unchecked,public,void,test,action,condition,with,hard,failures,throws,exception,final,string,id,test,action,condition,with,hard,failures,final,executable,condition,script,condition,fails,hard,mock,script,condition,throw,new,illegal,state,exception,failed,final,list,executable,condition,action,conditions,with,failure,arrays,as,list,script,condition,fails,hard,condition,passes,internal,always,condition,instance,collections,shuffle,action,conditions,with,failure,random,final,int,failed,index,action,conditions,with,failure,index,of,script,condition,fails,hard,put,and,trigger,watch,id,input,action,conditions,with,failure,to,array,new,condition,action,conditions,with,failure,size,flush,assert,watch,with,minimum,actions,count,id,execution,state,executed,1,final,search,response,response,search,history,search,source,builder,search,source,query,term,query,id,assert,that,response,get,hits,get,total,hits,is,1l,final,search,hit,hit,response,get,hits,get,at,0,final,list,object,actions,get,actions,from,hit,hit,get,source,as,map,for,int,i,0,i,action,conditions,with,failure,size,i,final,map,string,object,action,map,string,object,actions,get,i,final,map,string,object,condition,map,string,object,action,get,condition,final,map,string,object,logging,map,string,object,action,get,logging,assert,that,action,get,id,is,action,i,if,i,failed,index,assert,that,action,get,status,is,assert,that,action,get,reason,is,condition,failed,skipping,expected,failed,hard,assert,that,condition,null,value,assert,that,logging,null,value,else,assert,that,condition,get,type,is,action,conditions,with,failure,get,i,type,assert,that,action,get,status,is,success,assert,that,condition,get,met,is,true,assert,that,action,get,reason,null,value,assert,that,logging,get,is,integer,to,string,i
HistoryActionConditionTests -> @SuppressWarnings("unchecked")     public void testActionConditionWithHardFailures() throws Exception;1544035746;A hard failure is where an exception is thrown by the script condition.;@SuppressWarnings("unchecked")_    public void testActionConditionWithHardFailures() throws Exception {_        final String id = "testActionConditionWithHardFailures"___        final ExecutableCondition scriptConditionFailsHard = mockScriptCondition("throw new IllegalStateException('failed')_")__        final List<ExecutableCondition> actionConditionsWithFailure =_                Arrays.asList(scriptConditionFailsHard, conditionPasses, InternalAlwaysCondition.INSTANCE)___        Collections.shuffle(actionConditionsWithFailure, random())___        final int failedIndex = actionConditionsWithFailure.indexOf(scriptConditionFailsHard)___        putAndTriggerWatch(id, input, actionConditionsWithFailure.toArray(new Condition[actionConditionsWithFailure.size()]))___        flush()___        assertWatchWithMinimumActionsCount(id, ExecutionState.EXECUTED, 1)___        _        final SearchResponse response = searchHistory(SearchSourceBuilder.searchSource().query(termQuery("watch_id", id)))__        assertThat(response.getHits().getTotalHits().value, is(1L))___        final SearchHit hit = response.getHits().getAt(0)__        final List<Object> actions = getActionsFromHit(hit.getSourceAsMap())___        for (int i = 0_ i < actionConditionsWithFailure.size()_ ++i) {_            final Map<String, Object> action = (Map<String, Object>)actions.get(i)__            final Map<String, Object> condition = (Map<String, Object>)action.get("condition")__            final Map<String, Object> logging = (Map<String, Object>)action.get("logging")___            assertThat(action.get("id"), is("action" + i))___            if (i == failedIndex) {_                assertThat(action.get("status"), is("condition_failed"))__                assertThat(action.get("reason"), is("condition failed. skipping: [expected] failed hard"))__                assertThat(condition, nullValue())__                assertThat(logging, nullValue())__            } else {_                assertThat(condition.get("type"), is(actionConditionsWithFailure.get(i).type()))___                assertThat(action.get("status"), is("success"))__                assertThat(condition.get("met"), is(true))__                assertThat(action.get("reason"), nullValue())__                assertThat(logging.get("logged_text"), is(Integer.toString(i)))__            }_        }_    };a,hard,failure,is,where,an,exception,is,thrown,by,the,script,condition;suppress,warnings,unchecked,public,void,test,action,condition,with,hard,failures,throws,exception,final,string,id,test,action,condition,with,hard,failures,final,executable,condition,script,condition,fails,hard,mock,script,condition,throw,new,illegal,state,exception,failed,final,list,executable,condition,action,conditions,with,failure,arrays,as,list,script,condition,fails,hard,condition,passes,internal,always,condition,instance,collections,shuffle,action,conditions,with,failure,random,final,int,failed,index,action,conditions,with,failure,index,of,script,condition,fails,hard,put,and,trigger,watch,id,input,action,conditions,with,failure,to,array,new,condition,action,conditions,with,failure,size,flush,assert,watch,with,minimum,actions,count,id,execution,state,executed,1,final,search,response,response,search,history,search,source,builder,search,source,query,term,query,id,assert,that,response,get,hits,get,total,hits,value,is,1l,final,search,hit,hit,response,get,hits,get,at,0,final,list,object,actions,get,actions,from,hit,hit,get,source,as,map,for,int,i,0,i,action,conditions,with,failure,size,i,final,map,string,object,action,map,string,object,actions,get,i,final,map,string,object,condition,map,string,object,action,get,condition,final,map,string,object,logging,map,string,object,action,get,logging,assert,that,action,get,id,is,action,i,if,i,failed,index,assert,that,action,get,status,is,assert,that,action,get,reason,is,condition,failed,skipping,expected,failed,hard,assert,that,condition,null,value,assert,that,logging,null,value,else,assert,that,condition,get,type,is,action,conditions,with,failure,get,i,type,assert,that,action,get,status,is,success,assert,that,condition,get,met,is,true,assert,that,action,get,reason,null,value,assert,that,logging,get,is,integer,to,string,i
HistoryActionConditionTests -> private void putAndTriggerWatch(final String id, final Input input, final Condition... actionConditions);1524684173;Create a Watch with the specified {@code id} and {@code input}._<p>_The {@code actionConditions} are__@param id The ID of the Watch_@param input The input to use for the Watch_@param actionConditions The conditions to add to the Watch;private void putAndTriggerWatch(final String id, final Input input, final Condition... actionConditions) {_        WatchSourceBuilder source = watchBuilder()_                .trigger(schedule(interval("5s")))_                .input(input)_                .condition(InternalAlwaysCondition.INSTANCE)___        for (int i = 0_ i < actionConditions.length_ ++i) {_            source.addAction("action" + i, actionConditions[i], loggingAction(Integer.toString(i)))__        }__        PutWatchResponse putWatchResponse = watcherClient().preparePutWatch(id).setSource(source).get()___        assertThat(putWatchResponse.isCreated(), is(true))___        timeWarp().trigger(id)__    };create,a,watch,with,the,specified,code,id,and,code,input,p,the,code,action,conditions,are,param,id,the,id,of,the,watch,param,input,the,input,to,use,for,the,watch,param,action,conditions,the,conditions,to,add,to,the,watch;private,void,put,and,trigger,watch,final,string,id,final,input,input,final,condition,action,conditions,watch,source,builder,source,watch,builder,trigger,schedule,interval,5s,input,input,condition,internal,always,condition,instance,for,int,i,0,i,action,conditions,length,i,source,add,action,action,i,action,conditions,i,logging,action,integer,to,string,i,put,watch,response,put,watch,response,watcher,client,prepare,put,watch,id,set,source,source,get,assert,that,put,watch,response,is,created,is,true,time,warp,trigger,id
HistoryActionConditionTests -> private void putAndTriggerWatch(final String id, final Input input, final Condition... actionConditions);1532028790;Create a Watch with the specified {@code id} and {@code input}._<p>_The {@code actionConditions} are__@param id The ID of the Watch_@param input The input to use for the Watch_@param actionConditions The conditions to add to the Watch;private void putAndTriggerWatch(final String id, final Input input, final Condition... actionConditions) {_        WatchSourceBuilder source = watchBuilder()_                .trigger(schedule(interval("5s")))_                .input(input)_                .condition(InternalAlwaysCondition.INSTANCE)___        for (int i = 0_ i < actionConditions.length_ ++i) {_            source.addAction("action" + i, actionConditions[i], loggingAction(Integer.toString(i)))__        }__        PutWatchResponse putWatchResponse = watcherClient().preparePutWatch(id).setSource(source).get()___        assertThat(putWatchResponse.isCreated(), is(true))___        timeWarp().trigger(id)__    };create,a,watch,with,the,specified,code,id,and,code,input,p,the,code,action,conditions,are,param,id,the,id,of,the,watch,param,input,the,input,to,use,for,the,watch,param,action,conditions,the,conditions,to,add,to,the,watch;private,void,put,and,trigger,watch,final,string,id,final,input,input,final,condition,action,conditions,watch,source,builder,source,watch,builder,trigger,schedule,interval,5s,input,input,condition,internal,always,condition,instance,for,int,i,0,i,action,conditions,length,i,source,add,action,action,i,action,conditions,i,logging,action,integer,to,string,i,put,watch,response,put,watch,response,watcher,client,prepare,put,watch,id,set,source,source,get,assert,that,put,watch,response,is,created,is,true,time,warp,trigger,id
HistoryActionConditionTests -> private void putAndTriggerWatch(final String id, final Input input, final Condition... actionConditions);1538170812;Create a Watch with the specified {@code id} and {@code input}._<p>_The {@code actionConditions} are__@param id The ID of the Watch_@param input The input to use for the Watch_@param actionConditions The conditions to add to the Watch;private void putAndTriggerWatch(final String id, final Input input, final Condition... actionConditions) {_        WatchSourceBuilder source = watchBuilder()_                .trigger(schedule(interval("5s")))_                .input(input)_                .condition(InternalAlwaysCondition.INSTANCE)___        for (int i = 0_ i < actionConditions.length_ ++i) {_            source.addAction("action" + i, actionConditions[i], loggingAction(Integer.toString(i)))__        }__        PutWatchResponse putWatchResponse = watcherClient().preparePutWatch(id).setSource(source).get()___        assertThat(putWatchResponse.isCreated(), is(true))___        timeWarp().trigger(id)__    };create,a,watch,with,the,specified,code,id,and,code,input,p,the,code,action,conditions,are,param,id,the,id,of,the,watch,param,input,the,input,to,use,for,the,watch,param,action,conditions,the,conditions,to,add,to,the,watch;private,void,put,and,trigger,watch,final,string,id,final,input,input,final,condition,action,conditions,watch,source,builder,source,watch,builder,trigger,schedule,interval,5s,input,input,condition,internal,always,condition,instance,for,int,i,0,i,action,conditions,length,i,source,add,action,action,i,action,conditions,i,logging,action,integer,to,string,i,put,watch,response,put,watch,response,watcher,client,prepare,put,watch,id,set,source,source,get,assert,that,put,watch,response,is,created,is,true,time,warp,trigger,id
HistoryActionConditionTests -> private void putAndTriggerWatch(final String id, final Input input, final Condition... actionConditions);1544035746;Create a Watch with the specified {@code id} and {@code input}._<p>_The {@code actionConditions} are__@param id The ID of the Watch_@param input The input to use for the Watch_@param actionConditions The conditions to add to the Watch;private void putAndTriggerWatch(final String id, final Input input, final Condition... actionConditions) {_        WatchSourceBuilder source = watchBuilder()_                .trigger(schedule(interval("5s")))_                .input(input)_                .condition(InternalAlwaysCondition.INSTANCE)___        for (int i = 0_ i < actionConditions.length_ ++i) {_            source.addAction("action" + i, actionConditions[i], loggingAction(Integer.toString(i)))__        }__        PutWatchResponse putWatchResponse = watcherClient().preparePutWatch(id).setSource(source).get()___        assertThat(putWatchResponse.isCreated(), is(true))___        timeWarp().trigger(id)__    };create,a,watch,with,the,specified,code,id,and,code,input,p,the,code,action,conditions,are,param,id,the,id,of,the,watch,param,input,the,input,to,use,for,the,watch,param,action,conditions,the,conditions,to,add,to,the,watch;private,void,put,and,trigger,watch,final,string,id,final,input,input,final,condition,action,conditions,watch,source,builder,source,watch,builder,trigger,schedule,interval,5s,input,input,condition,internal,always,condition,instance,for,int,i,0,i,action,conditions,length,i,source,add,action,action,i,action,conditions,i,logging,action,integer,to,string,i,put,watch,response,put,watch,response,watcher,client,prepare,put,watch,id,set,source,source,get,assert,that,put,watch,response,is,created,is,true,time,warp,trigger,id
HistoryActionConditionTests -> @SuppressWarnings("unchecked")     private List<Object> getActionsFromHit(final Map<String, Object> source);1524684173;Get the "actions" from the Watch History hit.__@param source The hit's source._@return The list of "actions";@SuppressWarnings("unchecked")_    private List<Object> getActionsFromHit(final Map<String, Object> source) {_        final Map<String, Object> result = (Map<String, Object>)source.get("result")___        return (List<Object>)result.get("actions")__    };get,the,actions,from,the,watch,history,hit,param,source,the,hit,s,source,return,the,list,of,actions;suppress,warnings,unchecked,private,list,object,get,actions,from,hit,final,map,string,object,source,final,map,string,object,result,map,string,object,source,get,result,return,list,object,result,get,actions
HistoryActionConditionTests -> @SuppressWarnings("unchecked")     private List<Object> getActionsFromHit(final Map<String, Object> source);1532028790;Get the "actions" from the Watch History hit.__@param source The hit's source._@return The list of "actions";@SuppressWarnings("unchecked")_    private List<Object> getActionsFromHit(final Map<String, Object> source) {_        final Map<String, Object> result = (Map<String, Object>)source.get("result")___        return (List<Object>)result.get("actions")__    };get,the,actions,from,the,watch,history,hit,param,source,the,hit,s,source,return,the,list,of,actions;suppress,warnings,unchecked,private,list,object,get,actions,from,hit,final,map,string,object,source,final,map,string,object,result,map,string,object,source,get,result,return,list,object,result,get,actions
HistoryActionConditionTests -> @SuppressWarnings("unchecked")     private List<Object> getActionsFromHit(final Map<String, Object> source);1538170812;Get the "actions" from the Watch History hit.__@param source The hit's source._@return The list of "actions";@SuppressWarnings("unchecked")_    private List<Object> getActionsFromHit(final Map<String, Object> source) {_        final Map<String, Object> result = (Map<String, Object>)source.get("result")___        return (List<Object>)result.get("actions")__    };get,the,actions,from,the,watch,history,hit,param,source,the,hit,s,source,return,the,list,of,actions;suppress,warnings,unchecked,private,list,object,get,actions,from,hit,final,map,string,object,source,final,map,string,object,result,map,string,object,source,get,result,return,list,object,result,get,actions
HistoryActionConditionTests -> @SuppressWarnings("unchecked")     private List<Object> getActionsFromHit(final Map<String, Object> source);1544035746;Get the "actions" from the Watch History hit.__@param source The hit's source._@return The list of "actions";@SuppressWarnings("unchecked")_    private List<Object> getActionsFromHit(final Map<String, Object> source) {_        final Map<String, Object> result = (Map<String, Object>)source.get("result")___        return (List<Object>)result.get("actions")__    };get,the,actions,from,the,watch,history,hit,param,source,the,hit,s,source,return,the,list,of,actions;suppress,warnings,unchecked,private,list,object,get,actions,from,hit,final,map,string,object,source,final,map,string,object,result,map,string,object,source,get,result,return,list,object,result,get,actions
HistoryActionConditionTests -> private static ExecutableCondition mockScriptCondition(String inlineScript);1524684173;Create an inline script using the {@link CustomScriptPlugin}.__@param inlineScript The script to "compile" and run_@return Never {@code null};private static ExecutableCondition mockScriptCondition(String inlineScript) {_        Script script = new Script(ScriptType.INLINE, MockScriptPlugin.NAME, inlineScript, Collections.emptyMap())__        return new ScriptCondition(script)__    };create,an,inline,script,using,the,link,custom,script,plugin,param,inline,script,the,script,to,compile,and,run,return,never,code,null;private,static,executable,condition,mock,script,condition,string,inline,script,script,script,new,script,script,type,inline,mock,script,plugin,name,inline,script,collections,empty,map,return,new,script,condition,script
HistoryActionConditionTests -> private static ExecutableCondition mockScriptCondition(String inlineScript);1532028790;Create an inline script using the {@link CustomScriptPlugin}.__@param inlineScript The script to "compile" and run_@return Never {@code null};private static ExecutableCondition mockScriptCondition(String inlineScript) {_        Script script = new Script(ScriptType.INLINE, MockScriptPlugin.NAME, inlineScript, Collections.emptyMap())__        return new ScriptCondition(script)__    };create,an,inline,script,using,the,link,custom,script,plugin,param,inline,script,the,script,to,compile,and,run,return,never,code,null;private,static,executable,condition,mock,script,condition,string,inline,script,script,script,new,script,script,type,inline,mock,script,plugin,name,inline,script,collections,empty,map,return,new,script,condition,script
HistoryActionConditionTests -> private static ExecutableCondition mockScriptCondition(String inlineScript);1538170812;Create an inline script using the {@link CustomScriptPlugin}.__@param inlineScript The script to "compile" and run_@return Never {@code null};private static ExecutableCondition mockScriptCondition(String inlineScript) {_        Script script = new Script(ScriptType.INLINE, MockScriptPlugin.NAME, inlineScript, Collections.emptyMap())__        return new ScriptCondition(script)__    };create,an,inline,script,using,the,link,custom,script,plugin,param,inline,script,the,script,to,compile,and,run,return,never,code,null;private,static,executable,condition,mock,script,condition,string,inline,script,script,script,new,script,script,type,inline,mock,script,plugin,name,inline,script,collections,empty,map,return,new,script,condition,script
HistoryActionConditionTests -> private static ExecutableCondition mockScriptCondition(String inlineScript);1544035746;Create an inline script using the {@link CustomScriptPlugin}.__@param inlineScript The script to "compile" and run_@return Never {@code null};private static ExecutableCondition mockScriptCondition(String inlineScript) {_        Script script = new Script(ScriptType.INLINE, MockScriptPlugin.NAME, inlineScript, Collections.emptyMap())__        return new ScriptCondition(script)__    };create,an,inline,script,using,the,link,custom,script,plugin,param,inline,script,the,script,to,compile,and,run,return,never,code,null;private,static,executable,condition,mock,script,condition,string,inline,script,script,script,new,script,script,type,inline,mock,script,plugin,name,inline,script,collections,empty,map,return,new,script,condition,script
