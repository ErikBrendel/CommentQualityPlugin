commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setupAction() {     TransportService transportService = mock(TransportService.class).     ThreadPool threadPool = mock(ThreadPool.class).     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     when(threadPool.getThreadContext()).thenReturn(threadContext).     WatchParser watchParser = mock(WatchParser.class).     client = mock(Client.class).     when(client.threadPool()).thenReturn(threadPool).     action = new TransportAckWatchAction(transportService, new ActionFilters(Collections.emptySet()), Clock.systemUTC(), new XPackLicenseState(Settings.EMPTY), watchParser, client, createClusterService(threadPool)). }
false;public;0;24;;public void testWatchNotFound() {     String watchId = "my_watch_id".     doAnswer(invocation -> {         ActionListener<GetResponse> listener = (ActionListener<GetResponse>) invocation.getArguments()[1].         listener.onResponse(new GetResponse(new GetResult(Watch.INDEX, Watch.DOC_TYPE, watchId, UNASSIGNED_SEQ_NO, 0, -1, false, BytesArray.EMPTY, Collections.emptyMap()))).         return null.     }).when(client).get(anyObject(), anyObject()).     doAnswer(invocation -> {         ContextPreservingActionListener listener = (ContextPreservingActionListener) invocation.getArguments()[2].         listener.onResponse(new WatcherStatsResponse(new ClusterName("clusterName"), new WatcherMetaData(false), Collections.emptyList(), Collections.emptyList())).         return null.     }).when(client).execute(eq(WatcherStatsAction.INSTANCE), anyObject(), anyObject()).     AckWatchRequest ackWatchRequest = new AckWatchRequest(watchId).     PlainActionFuture<AckWatchResponse> listener = PlainActionFuture.newFuture().     action.doExecute(ackWatchRequest, listener).     ExecutionException exception = expectThrows(ExecutionException.class, listener::get).     ElasticsearchException e = (ElasticsearchException) exception.getCause().     assertThat(e.getMessage(), is("Watch with id [" + watchId + "] does not exist")). }
false;public;0;24;;public void testThatWatchCannotBeAckedWhileRunning() {     String watchId = "my_watch_id".     doAnswer(invocation -> {         ContextPreservingActionListener listener = (ContextPreservingActionListener) invocation.getArguments()[2].         DiscoveryNode discoveryNode = new DiscoveryNode("node_2", buildNewFakeTransportAddress(), Version.CURRENT).         WatcherStatsResponse.Node node = new WatcherStatsResponse.Node(discoveryNode).         WatchExecutionSnapshot snapshot = mock(WatchExecutionSnapshot.class).         when(snapshot.watchId()).thenReturn(watchId).         node.setSnapshots(Collections.singletonList(snapshot)).         listener.onResponse(new WatcherStatsResponse(new ClusterName("clusterName"), new WatcherMetaData(false), Collections.singletonList(node), Collections.emptyList())).         return null.     }).when(client).execute(eq(WatcherStatsAction.INSTANCE), anyObject(), anyObject()).     AckWatchRequest ackWatchRequest = new AckWatchRequest(watchId).     PlainActionFuture<AckWatchResponse> listener = PlainActionFuture.newFuture().     action.doExecute(ackWatchRequest, listener).     ExecutionException exception = expectThrows(ExecutionException.class, listener::get).     ElasticsearchException e = (ElasticsearchException) exception.getCause().     assertThat(e.getMessage(), is("watch[my_watch_id] is running currently, cannot ack until finished")).     assertThat(e.status(), is(RestStatus.CONFLICT)). }
