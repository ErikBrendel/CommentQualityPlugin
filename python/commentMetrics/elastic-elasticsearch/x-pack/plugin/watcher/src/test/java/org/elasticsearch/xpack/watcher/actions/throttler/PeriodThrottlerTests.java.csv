commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;public void testBelowPeriodSuccessful() throws Exception {     TimeValue period = TimeValue.timeValueSeconds(randomIntBetween(2, 5)).     PeriodThrottler throttler = new PeriodThrottler(Clock.systemUTC(), period).     WatchExecutionContext ctx = mockExecutionContext("_name", Payload.EMPTY).     ActionStatus actionStatus = mock(ActionStatus.class).     ZonedDateTime now = Clock.systemUTC().instant().atZone(ZoneOffset.UTC).     when(actionStatus.lastSuccessfulExecution()).thenReturn(ActionStatus.Execution.successful(now.minusSeconds((int) period.seconds() - 1))).     WatchStatus status = mock(WatchStatus.class).     when(status.actionStatus("_action")).thenReturn(actionStatus).     when(ctx.watch().status()).thenReturn(status).     Throttler.Result result = throttler.throttle("_action", ctx).     assertThat(result, notNullValue()).     assertThat(result.throttle(), is(true)).     assertThat(result.reason(), notNullValue()).     assertThat(result.reason(), startsWith("throttling interval is set to [" + period + "]")).     assertThat(result.type(), is(Throttler.Type.PERIOD)). }
false;public;0;18;;public void testAbovePeriod() throws Exception {     TimeValue period = TimeValue.timeValueSeconds(randomIntBetween(2, 5)).     PeriodThrottler throttler = new PeriodThrottler(Clock.systemUTC(), period).     WatchExecutionContext ctx = mockExecutionContext("_name", Payload.EMPTY).     ActionStatus actionStatus = mock(ActionStatus.class).     ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC).     when(actionStatus.lastSuccessfulExecution()).thenReturn(ActionStatus.Execution.successful(now.minusSeconds((int) period.seconds() + 1))).     WatchStatus status = mock(WatchStatus.class).     when(status.actionStatus("_action")).thenReturn(actionStatus).     when(ctx.watch().status()).thenReturn(status).     Throttler.Result result = throttler.throttle("_action", ctx).     assertThat(result, notNullValue()).     assertThat(result.throttle(), is(false)).     assertThat(result.reason(), nullValue()). }
