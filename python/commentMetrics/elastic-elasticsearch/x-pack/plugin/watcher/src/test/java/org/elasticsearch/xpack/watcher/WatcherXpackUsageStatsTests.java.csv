commented;modifiers;parameterAmount;loc;comment;code
true;public;0;21;// was merged ;// as these tests use three data nodes, those watches will be across two of those // nodes due to having two watcher shards, so that we can be sure that the count // was merged public void testWatcherUsageStatsTests() {     long watchCount = randomLongBetween(5, 20).     for (int i = 0. i < watchCount. i++) {         watcherClient().preparePutWatch("_id" + i).setSource(watchBuilder().trigger(schedule(cron("0/5 * * * * ? 2050"))).input(simpleInput()).addAction("_id", loggingAction("whatever " + i))).get().     }     XPackUsageRequest request = new XPackUsageRequest().     XPackUsageResponse usageResponse = client().execute(XPackUsageAction.INSTANCE, request).actionGet().     Optional<XPackFeatureSet.Usage> usage = usageResponse.getUsages().stream().filter(u -> u instanceof WatcherFeatureSetUsage).findFirst().     assertThat(usage.isPresent(), is(true)).     WatcherFeatureSetUsage featureSetUsage = (WatcherFeatureSetUsage) usage.get().     long activeWatchCount = (long) ((Map) featureSetUsage.stats().get("count")).get("active").     assertThat(activeWatchCount, is(watchCount)). }
