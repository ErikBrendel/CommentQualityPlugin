commented;modifiers;parameterAmount;loc;comment;code
false;public;0;32;;public void testProxy() throws Exception {     HttpProxy proxy = new HttpProxy("localhost", 8080).     SlackMessage.Template messageTemplate = SlackMessage.Template.builder().addTo("to").setText(new TextTemplate("content")).build().     SlackAction action = new SlackAction("account1", messageTemplate, proxy).     HttpClient httpClient = mock(HttpClient.class).     ArgumentCaptor<HttpRequest> argumentCaptor = ArgumentCaptor.forClass(HttpRequest.class).     when(httpClient.execute(argumentCaptor.capture())).thenReturn(new HttpResponse(200)).     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("secure_url", "http://example.org").     Settings accountSettings = Settings.builder().setSecureSettings(secureSettings).build().     SlackAccount account = new SlackAccount("account1", accountSettings, httpClient, logger).     SlackService service = mock(SlackService.class).     when(service.getAccount(eq("account1"))).thenReturn(account).     ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC).     Wid wid = new Wid(randomAlphaOfLength(5), now).     WatchExecutionContext ctx = mockExecutionContextBuilder(wid.watchId()).wid(wid).payload(new Payload.Simple()).time(wid.watchId(), now).buildMock().     ExecutableSlackAction executable = new ExecutableSlackAction(action, logger, service, new MockTextTemplateEngine()).     executable.execute("foo", ctx, new Payload.Simple()).     HttpRequest request = argumentCaptor.getValue().     assertThat(request.proxy(), is(proxy)). }
