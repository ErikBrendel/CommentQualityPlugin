commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     List<Class<? extends Plugin>> types = super.pluginTypes().     types.add(CustomScriptPlugin.class).     return types. }
false;protected;1;18;;@Override protected Path nodeConfigPath(int nodeOrdinal) {     final Path config = createTempDir().resolve("config").     final Path scripts = config.resolve("scripts").     try {         Files.createDirectories(scripts).         // When using the MockScriptPlugin we can map File scripts to inline scripts:         // the name of the file script is used in test method while the source of the file script         // must match a predefined script from CustomScriptPlugin.pluginScripts() method         Files.write(scripts.resolve("my-script.mockscript"), "['key3' : ctx.payload.key1 + ctx.payload.key2]".getBytes("UTF-8")).     } catch (final IOException e) {         throw new UncheckedIOException(e).     }     return config. }
false;protected;0;17;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     Map<String, Function<Map<String, Object>, Object>> scripts = new HashMap<>().     scripts.put("['key3' : ctx.payload.key1 + ctx.payload.key2]", vars -> {         int key1 = (int) XContentMapValues.extractValue("ctx.payload.key1", vars).         int key2 = (int) XContentMapValues.extractValue("ctx.payload.key2", vars).         return singletonMap("key3", key1 + key2).     }).     scripts.put("['key4' : ctx.payload.key3 + 10]", vars -> {         int key3 = (int) XContentMapValues.extractValue("ctx.payload.key3", vars).         return singletonMap("key4", key3 + 10).     }).     return scripts. }
false;public;0;53;;public void testScriptTransform() throws Exception {     final Script script.     if (randomBoolean()) {         logger.info("testing script transform with an inline script").         script = mockScript("['key3' : ctx.payload.key1 + ctx.payload.key2]").     } else {         logger.info("testing script transform with an indexed script").         assertAcked(client().admin().cluster().preparePutStoredScript().setId("my-script").setContent(new BytesArray("{\"script\" : {\"lang\": \"" + MockScriptPlugin.NAME + "\", " + "\"source\": \"['key3' : ctx.payload.key1 + ctx.payload.key2]\"}"), XContentType.JSON).get()).         script = new Script(ScriptType.STORED, null, "my-script", Collections.emptyMap()).     }     // put a watch that has watch level transform:     PutWatchResponse putWatchResponse = watcherClient().preparePutWatch("_id1").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput(MapBuilder.<String, Object>newMapBuilder().put("key1", 10).put("key2", 10))).transform(scriptTransform(script)).addAction("_id", indexAction("output1", "type"))).get().     assertThat(putWatchResponse.isCreated(), is(true)).     // put a watch that has a action level transform:     putWatchResponse = watcherClient().preparePutWatch("_id2").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput(MapBuilder.<String, Object>newMapBuilder().put("key1", 10).put("key2", 10))).addAction("_id", scriptTransform(script), indexAction("output2", "type"))).get().     assertThat(putWatchResponse.isCreated(), is(true)).     executeWatch("_id1").     executeWatch("_id2").     refresh().     assertWatchWithMinimumPerformedActionsCount("_id1", 1, false).     assertWatchWithMinimumPerformedActionsCount("_id2", 1, false).     refresh().     SearchResponse response = client().prepareSearch("output1").get().     assertNoFailures(response).     assertThat(response.getHits().getTotalHits().value, greaterThanOrEqualTo(1L)).     assertThat(response.getHits().getAt(0).getSourceAsMap().size(), equalTo(1)).     assertThat(response.getHits().getAt(0).getSourceAsMap().get("key3").toString(), equalTo("20")).     response = client().prepareSearch("output2").get().     assertNoFailures(response).     assertThat(response.getHits().getTotalHits().value, greaterThanOrEqualTo(1L)).     assertThat(response.getHits().getAt(0).getSourceAsMap().size(), equalTo(1)).     assertThat(response.getHits().getAt(0).getSourceAsMap().get("key3").toString(), equalTo("20")). }
false;public;0;45;;@TestLogging("org.elasticsearch.xpack.watcher:DEBUG") public void testSearchTransform() throws Exception {     createIndex("my-condition-index", "my-payload-index").     ensureGreen("my-condition-index", "my-payload-index").     index("my-payload-index", "payload", "mytestresult").     refresh().     WatcherSearchTemplateRequest inputRequest = templateRequest(searchSource().query(matchAllQuery()), "my-condition-index").     WatcherSearchTemplateRequest transformRequest = templateRequest(searchSource().query(matchAllQuery()), "my-payload-index").     PutWatchResponse putWatchResponse = watcherClient().preparePutWatch("_id1").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(searchInput(inputRequest)).transform(searchTransform(transformRequest)).addAction("_id", indexAction("output1", "result"))).get().     assertThat(putWatchResponse.isCreated(), is(true)).     putWatchResponse = watcherClient().preparePutWatch("_id2").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(searchInput(inputRequest)).addAction("_id", searchTransform(transformRequest), indexAction("output2", "result"))).get().     assertThat(putWatchResponse.isCreated(), is(true)).     executeWatch("_id1").     executeWatch("_id2").     refresh().     assertWatchWithMinimumPerformedActionsCount("_id1", 1, false).     assertWatchWithMinimumPerformedActionsCount("_id2", 1, false).     refresh().     SearchResponse response = client().prepareSearch("output1").get().     assertNoFailures(response).     assertThat(response.getHits().getTotalHits().value, greaterThanOrEqualTo(1L)).     assertThat(response.getHits().getAt(0).getSourceAsString(), containsString("mytestresult")).     response = client().prepareSearch("output2").get().     assertNoFailures(response).     assertThat(response.getHits().getTotalHits().value, greaterThanOrEqualTo(1L)).     assertThat(response.getHits().getAt(0).getSourceAsString(), containsString("mytestresult")). }
false;public;0;43;;public void testChainTransform() throws Exception {     Script script1 = mockScript("['key3' : ctx.payload.key1 + ctx.payload.key2]").     Script script2 = mockScript("['key4' : ctx.payload.key3 + 10]").     // put a watch that has watch level transform:     PutWatchResponse putWatchResponse = watcherClient().preparePutWatch("_id1").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput(MapBuilder.<String, Object>newMapBuilder().put("key1", 10).put("key2", 10))).transform(chainTransform(scriptTransform(script1), scriptTransform(script2))).addAction("_id", indexAction("output1", "type"))).get().     assertThat(putWatchResponse.isCreated(), is(true)).     // put a watch that has a action level transform:     putWatchResponse = watcherClient().preparePutWatch("_id2").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput(MapBuilder.<String, Object>newMapBuilder().put("key1", 10).put("key2", 10))).addAction("_id", chainTransform(scriptTransform(script1), scriptTransform(script2)), indexAction("output2", "type"))).get().     assertThat(putWatchResponse.isCreated(), is(true)).     executeWatch("_id1").     executeWatch("_id2").     refresh().     assertWatchWithMinimumPerformedActionsCount("_id1", 1, false).     assertWatchWithMinimumPerformedActionsCount("_id2", 1, false).     refresh().     SearchResponse response = client().prepareSearch("output1").get().     assertNoFailures(response).     assertThat(response.getHits().getTotalHits().value, greaterThanOrEqualTo(1L)).     assertThat(response.getHits().getAt(0).getSourceAsMap().size(), equalTo(1)).     assertThat(response.getHits().getAt(0).getSourceAsMap().get("key4").toString(), equalTo("30")).     response = client().prepareSearch("output2").get().     assertNoFailures(response).     assertThat(response.getHits().getTotalHits().value, greaterThanOrEqualTo(1L)).     assertThat(response.getHits().getAt(0).getSourceAsMap().size(), equalTo(1)).     assertThat(response.getHits().getAt(0).getSourceAsMap().get("key4").toString(), equalTo("30")). }
false;private;1;5;;private void executeWatch(String watchId) {     watcherClient().prepareExecuteWatch(watchId).setRecordExecution(true).get(). }
