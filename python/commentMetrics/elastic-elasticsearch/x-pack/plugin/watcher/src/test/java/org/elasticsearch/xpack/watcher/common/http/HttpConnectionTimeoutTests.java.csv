commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Network public void testDefaultTimeout() throws Exception {     Environment environment = TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     HttpClient httpClient = new HttpClient(Settings.EMPTY, new SSLService(environment.settings(), environment), null, mockClusterService()).     HttpRequest request = HttpRequest.builder(UNROUTABLE_IP, 12345).method(HttpMethod.POST).path("/" + randomAlphaOfLength(5)).build().     long start = System.nanoTime().     try {         httpClient.execute(request).         fail("expected timeout exception").     } catch (ConnectTimeoutException ete) {         TimeValue timeout = TimeValue.timeValueNanos(System.nanoTime() - start).         logger.info("http connection timed out after {}", timeout).         // it's supposed to be 10, but we'll give it an error margin of 2 seconds         assertThat(timeout.seconds(), greaterThan(8L)).         assertThat(timeout.seconds(), lessThan(12L)).     // expected     } }
false;public;0;25;;@Network public void testDefaultTimeoutCustom() throws Exception {     Environment environment = TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     HttpClient httpClient = new HttpClient(Settings.builder().put("xpack.http.default_connection_timeout", "5s").build(), new SSLService(environment.settings(), environment), null, mockClusterService()).     HttpRequest request = HttpRequest.builder(UNROUTABLE_IP, 12345).method(HttpMethod.POST).path("/" + randomAlphaOfLength(5)).build().     long start = System.nanoTime().     try {         httpClient.execute(request).         fail("expected timeout exception").     } catch (ConnectTimeoutException ete) {         TimeValue timeout = TimeValue.timeValueNanos(System.nanoTime() - start).         logger.info("http connection timed out after {}", timeout).         // it's supposed to be 7, but we'll give it an error margin of 2 seconds         assertThat(timeout.seconds(), greaterThan(3L)).         assertThat(timeout.seconds(), lessThan(7L)).     // expected     } }
false;public;0;26;;@Network public void testTimeoutCustomPerRequest() throws Exception {     Environment environment = TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     HttpClient httpClient = new HttpClient(Settings.builder().put("xpack.http.default_connection_timeout", "10s").build(), new SSLService(environment.settings(), environment), null, mockClusterService()).     HttpRequest request = HttpRequest.builder(UNROUTABLE_IP, 12345).connectionTimeout(TimeValue.timeValueSeconds(5)).method(HttpMethod.POST).path("/" + randomAlphaOfLength(5)).build().     long start = System.nanoTime().     try {         httpClient.execute(request).         fail("expected timeout exception").     } catch (ConnectTimeoutException ete) {         TimeValue timeout = TimeValue.timeValueNanos(System.nanoTime() - start).         logger.info("http connection timed out after {}", timeout).         // it's supposed to be 7, but we'll give it an error margin of 2 seconds         assertThat(timeout.seconds(), greaterThan(3L)).         assertThat(timeout.seconds(), lessThan(7L)).     // expected     } }
