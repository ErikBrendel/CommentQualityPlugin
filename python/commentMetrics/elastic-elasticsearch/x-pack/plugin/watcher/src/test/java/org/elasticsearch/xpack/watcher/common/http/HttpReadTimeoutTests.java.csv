commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void init() throws Exception {     webServer.start().     webServer.enqueue(new MockResponse().setBeforeReplyDelay(TimeValue.timeValueSeconds(20))). }
false;public;0;4;;@After public void cleanup() throws Exception {     webServer.close(). }
false;public;0;20;;public void testDefaultTimeout() throws Exception {     Environment environment = TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     HttpRequest request = HttpRequest.builder("localhost", webServer.getPort()).method(HttpMethod.POST).path("/").build().     try (HttpClient httpClient = new HttpClient(Settings.EMPTY, new SSLService(environment.settings(), environment), null, mockClusterService())) {         long start = System.nanoTime().         expectThrows(SocketTimeoutException.class, () -> httpClient.execute(request)).         TimeValue timeout = TimeValue.timeValueNanos(System.nanoTime() - start).         logger.info("http connection timed out after {}", timeout).         // it's supposed to be 10, but we'll give it an error margin of 2 seconds         assertThat(timeout.seconds(), greaterThan(8L)).         assertThat(timeout.seconds(), lessThan(12L)).     } }
false;public;0;22;;public void testDefaultTimeoutCustom() throws Exception {     Environment environment = TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     HttpRequest request = HttpRequest.builder("localhost", webServer.getPort()).method(HttpMethod.POST).path("/").build().     try (HttpClient httpClient = new HttpClient(Settings.builder().put("xpack.http.default_read_timeout", "3s").build(), new SSLService(environment.settings(), environment), null, mockClusterService())) {         long start = System.nanoTime().         expectThrows(SocketTimeoutException.class, () -> httpClient.execute(request)).         TimeValue timeout = TimeValue.timeValueNanos(System.nanoTime() - start).         logger.info("http connection timed out after {}", timeout).         // it's supposed to be 3, but we'll give it an error margin of 2 seconds         assertThat(timeout.seconds(), greaterThan(1L)).         assertThat(timeout.seconds(), lessThan(5L)).     } }
false;public;0;23;;public void testTimeoutCustomPerRequest() throws Exception {     Environment environment = TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     HttpRequest request = HttpRequest.builder("localhost", webServer.getPort()).readTimeout(TimeValue.timeValueSeconds(3)).method(HttpMethod.POST).path("/").build().     try (HttpClient httpClient = new HttpClient(Settings.builder().put("xpack.http.default_read_timeout", "10s").build(), new SSLService(environment.settings(), environment), null, mockClusterService())) {         long start = System.nanoTime().         expectThrows(SocketTimeoutException.class, () -> httpClient.execute(request)).         TimeValue timeout = TimeValue.timeValueNanos(System.nanoTime() - start).         logger.info("http connection timed out after {}", timeout).         // it's supposed to be 3, but we'll give it an error margin of 2 seconds         assertThat(timeout.seconds(), greaterThan(1L)).         assertThat(timeout.seconds(), lessThan(5L)).     } }
