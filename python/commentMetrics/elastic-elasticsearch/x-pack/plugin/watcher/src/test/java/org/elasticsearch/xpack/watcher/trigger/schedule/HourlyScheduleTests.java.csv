commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testDefault() throws Exception {     HourlySchedule schedule = new HourlySchedule().     String[] crons = expressions(schedule).     assertThat(crons, arrayWithSize(1)).     assertThat(crons, arrayContaining("0 0 * * * ?")). }
false;public;0;7;;public void testSingleMinute() throws Exception {     int minute = validMinute().     HourlySchedule schedule = new HourlySchedule(minute).     String[] crons = expressions(schedule).     assertThat(crons, arrayWithSize(1)).     assertThat(crons, arrayContaining("0 " + minute + " * * * ?")). }
false;public;0;9;;public void testSingleMinuteInvalid() throws Exception {     try {         new HourlySchedule(invalidMinute()).         fail("Expected IllegalArgumentException").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("invalid hourly minute")).         assertThat(e.getMessage(), containsString("minute must be between 0 and 59 incl.")).     } }
false;public;0;8;;public void testMultipleMinutes() throws Exception {     int[] minutes = validMinutes().     String minutesStr = Strings.join(",", minutes).     HourlySchedule schedule = new HourlySchedule(minutes).     String[] crons = expressions(schedule).     assertThat(crons, arrayWithSize(1)).     assertThat(crons, arrayContaining("0 " + minutesStr + " * * * ?")). }
false;public;0;10;;public void testMultipleMinutesInvalid() throws Exception {     int[] minutes = invalidMinutes().     try {         new HourlySchedule(minutes).         fail("Expected IllegalArgumentException").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("invalid hourly minute")).         assertThat(e.getMessage(), containsString("minute must be between 0 and 59 incl.")).     } }
false;public;0;10;;public void testParserEmpty() throws Exception {     XContentBuilder builder = jsonBuilder().startObject().endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     HourlySchedule schedule = new HourlySchedule.Parser().parse(parser).     assertThat(schedule, notNullValue()).     assertThat(schedule.minutes().length, is(1)).     assertThat(schedule.minutes()[0], is(0)). }
false;public;0;14;;public void testParserSingleMinuteNumber() throws Exception {     int minute = validMinute().     XContentBuilder builder = jsonBuilder().startObject().field("minute", minute).endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     HourlySchedule schedule = new HourlySchedule.Parser().parse(parser).     assertThat(schedule, notNullValue()).     assertThat(schedule.minutes().length, is(1)).     assertThat(schedule.minutes()[0], is(minute)). }
false;public;0;15;;public void testParserSingleMinuteNumberInvalid() throws Exception {     XContentBuilder builder = jsonBuilder().startObject().field("minute", invalidMinute()).endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     try {         new HourlySchedule.Parser().parse(parser).         fail("Expected ElasticsearchParseException").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), is("could not parse [hourly] schedule. invalid value for [minute]")).     } }
false;public;0;14;;public void testParserSingleMinuteString() throws Exception {     int minute = validMinute().     XContentBuilder builder = jsonBuilder().startObject().field("minute", String.valueOf(minute)).endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     HourlySchedule schedule = new HourlySchedule.Parser().parse(parser).     assertThat(schedule, notNullValue()).     assertThat(schedule.minutes().length, is(1)).     assertThat(schedule.minutes()[0], is(minute)). }
false;public;0;15;;public void testParserSingleMinuteStringInvalid() throws Exception {     XContentBuilder builder = jsonBuilder().startObject().field("minute", String.valueOf(invalidMinute())).endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     try {         new HourlySchedule.Parser().parse(parser).         fail("Expected ElasticsearchParseException").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), is("could not parse [hourly] schedule. invalid value for [minute]")).     } }
false;public;0;17;;public void testParserMultipleMinutesNumbers() throws Exception {     int[] minutes = validMinutes().     XContentBuilder builder = jsonBuilder().startObject().field("minute", minutes).endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     HourlySchedule schedule = new HourlySchedule.Parser().parse(parser).     assertThat(schedule, notNullValue()).     assertThat(schedule.minutes().length, is(minutes.length)).     List<Integer> ints = Arrays.stream(schedule.minutes()).mapToObj(Integer::valueOf).collect(Collectors.toList()).     for (int i = 0. i < minutes.length. i++) {         assertThat(ints, hasItem(minutes[i])).     } }
false;public;0;16;;public void testParserMultipleMinutesNumbersInvalid() throws Exception {     int[] minutes = invalidMinutes().     XContentBuilder builder = jsonBuilder().startObject().field("minute", minutes).endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     try {         new HourlySchedule.Parser().parse(parser).         fail("Expected ElasticsearchParseException").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), is("could not parse [hourly] schedule. invalid value for [minute]")).     } }
false;public;0;18;;public void testParserMultipleMinutesStrings() throws Exception {     int[] minutes = validMinutes().     XContentBuilder builder = jsonBuilder().startObject().field("minute", Arrays.stream(minutes).mapToObj(Integer::toString).collect(Collectors.toList())).endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     HourlySchedule schedule = new HourlySchedule.Parser().parse(parser).     assertThat(schedule, notNullValue()).     assertThat(schedule.minutes().length, is(minutes.length)).     List<Integer> ints = Arrays.stream(schedule.minutes()).mapToObj(Integer::valueOf).collect(Collectors.toList()).     for (int i = 0. i < minutes.length. i++) {         assertThat(ints, hasItem(minutes[i])).     } }
false;public;0;16;;public void testParserMultipleMinutesStringsInvalid() throws Exception {     int[] minutes = invalidMinutes().     XContentBuilder builder = jsonBuilder().startObject().field("minute", Arrays.stream(minutes).mapToObj(Integer::toString).collect(Collectors.toList())).endObject().     BytesReference bytes = BytesReference.bytes(builder).     XContentParser parser = createParser(JsonXContent.jsonXContent, bytes).     // advancing to the start object     parser.nextToken().     try {         new HourlySchedule.Parser().parse(parser).         fail("Expected ElasticsearchParseException").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), is("could not parse [hourly] schedule. invalid value for [minute]")).     } }
