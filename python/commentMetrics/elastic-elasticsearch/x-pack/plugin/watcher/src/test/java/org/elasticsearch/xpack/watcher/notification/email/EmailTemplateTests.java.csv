commented;modifiers;parameterAmount;loc;comment;code
false;public;0;65;;public void testEmailTemplateParserSelfGenerated() throws Exception {     TextTemplate from = randomFrom(new TextTemplate("from@from.com"), null).     List<TextTemplate> addresses = new ArrayList<>().     for (int i = 0. i < randomIntBetween(1, 5). ++i) {         addresses.add(new TextTemplate("address" + i + "@test.com")).     }     TextTemplate[] possibleList = addresses.toArray(new TextTemplate[addresses.size()]).     TextTemplate[] replyTo = randomFrom(possibleList, null).     TextTemplate[] to = randomFrom(possibleList, null).     TextTemplate[] cc = randomFrom(possibleList, null).     TextTemplate[] bcc = randomFrom(possibleList, null).     TextTemplate priority = new TextTemplate(randomFrom(Email.Priority.values()).name()).     TextTemplate subjectTemplate = new TextTemplate("Templated Subject {{foo}}").     TextTemplate textBodyTemplate = new TextTemplate("Templated Body {{foo}}").     TextTemplate htmlBodyTemplate = new TextTemplate("Templated Html Body <script>nefarious scripting</script>").     String htmlBody = "Templated Html Body <script>nefarious scripting</script>".     String sanitizedHtmlBody = "Templated Html Body".     EmailTemplate emailTemplate = new EmailTemplate(from, replyTo, priority, to, cc, bcc, subjectTemplate, textBodyTemplate, htmlBodyTemplate).     XContentBuilder builder = XContentFactory.jsonBuilder().     emailTemplate.toXContent(builder, ToXContent.EMPTY_PARAMS).     XContentParser parser = createParser(builder).     parser.nextToken().     EmailTemplate.Parser emailTemplateParser = new EmailTemplate.Parser().     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else {             assertThat(emailTemplateParser.handle(currentFieldName, parser), is(true)).         }     }     EmailTemplate parsedEmailTemplate = emailTemplateParser.parsedTemplate().     Map<String, Object> model = new HashMap<>().     HtmlSanitizer htmlSanitizer = mock(HtmlSanitizer.class).     when(htmlSanitizer.sanitize(htmlBody)).thenReturn(sanitizedHtmlBody).     Email.Builder emailBuilder = parsedEmailTemplate.render(new MockTextTemplateEngine(), model, htmlSanitizer, new HashMap<>()).     assertThat(emailTemplate.from, equalTo(parsedEmailTemplate.from)).     assertThat(emailTemplate.replyTo, equalTo(parsedEmailTemplate.replyTo)).     assertThat(emailTemplate.priority, equalTo(parsedEmailTemplate.priority)).     assertThat(emailTemplate.to, equalTo(parsedEmailTemplate.to)).     assertThat(emailTemplate.cc, equalTo(parsedEmailTemplate.cc)).     assertThat(emailTemplate.bcc, equalTo(parsedEmailTemplate.bcc)).     assertThat(emailTemplate.subject, equalTo(parsedEmailTemplate.subject)).     assertThat(emailTemplate.textBody, equalTo(parsedEmailTemplate.textBody)).     assertThat(emailTemplate.htmlBody, equalTo(parsedEmailTemplate.htmlBody)).     emailBuilder.id("_id").     Email email = emailBuilder.build().     assertThat(email.subject, equalTo(subjectTemplate.getTemplate())).     assertThat(email.textBody, equalTo(textBodyTemplate.getTemplate())).     assertThat(email.htmlBody, equalTo(sanitizedHtmlBody)). }
false;public;0;21;;public void testParsingMultipleEmailAddresses() throws Exception {     EmailTemplate template = EmailTemplate.builder().from("sender@example.org").to("to1@example.org, to2@example.org").cc("cc1@example.org, cc2@example.org").bcc("bcc1@example.org, bcc2@example.org").textBody("blah").build().     Email email = template.render(new MockTextTemplateEngine(), emptyMap(), null, emptyMap()).id("foo").build().     assertThat(email.to.size(), is(2)).     assertThat(email.to, containsInAnyOrder(new Email.Address("to1@example.org"), new Email.Address("to2@example.org"))).     assertThat(email.cc.size(), is(2)).     assertThat(email.cc, containsInAnyOrder(new Email.Address("cc1@example.org"), new Email.Address("cc2@example.org"))).     assertThat(email.bcc.size(), is(2)).     assertThat(email.bcc, containsInAnyOrder(new Email.Address("bcc1@example.org"), new Email.Address("bcc2@example.org"))). }
false;public;0;12;;public void testEmailValidation() {     assertValidEmail("sender@example.org").     assertValidEmail("sender+foo@example.org").     assertValidEmail("Test User <sender@example.org>").     assertValidEmail("Test User <sender@example.org>, foo@example.org").     assertValidEmail("a@com").     assertValidEmail("{{valid due to mustache}}, sender@example.org").     assertInvalidEmail("lol.com").     assertInvalidEmail("user").     // only the whole string is tested if this is a mustache template, not parts of it     assertValidEmail("{{valid due to mustache}}, lol.com"). }
false;private;1;3;;private void assertValidEmail(String email) {     EmailTemplate.Parser.validateEmailAddresses(new TextTemplate(email)). }
false;private;1;5;;private void assertInvalidEmail(String email) {     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> EmailTemplate.Parser.validateEmailAddresses(new TextTemplate(email))).     assertThat(e.getMessage(), startsWith("invalid email address")). }
