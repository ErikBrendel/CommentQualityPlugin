commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;public void testWatchMetadata() throws Exception {     Map<String, Object> metadata = new HashMap<>().     metadata.put("foo", "bar").     List<String> metaList = new ArrayList<>().     metaList.add("this").     metaList.add("is").     metaList.add("a").     metaList.add("test").     metadata.put("baz", metaList).     watcherClient().preparePutWatch("_name").setSource(watchBuilder().trigger(schedule(cron("0/5 * * * * ? *"))).input(noneInput()).condition(new CompareCondition("ctx.payload.hits.total.value", CompareCondition.Op.EQ, 1L)).metadata(metadata)).get().     timeWarp().trigger("_name").     refresh().     SearchResponse searchResponse = client().prepareSearch(HistoryStoreField.INDEX_PREFIX_WITH_TEMPLATE + "*").setQuery(termQuery("metadata.foo", "bar")).get().     assertThat(searchResponse.getHits().getTotalHits().value, greaterThan(0L)). }
false;public;0;29;;public void testWatchMetadataAvailableAtExecution() throws Exception {     Map<String, Object> metadata = new HashMap<>().     metadata.put("foo", "bar").     metadata.put("logtext", "This is a test").     LoggingAction.Builder loggingAction = loggingAction(new TextTemplate("_logging")).setLevel(LoggingLevel.DEBUG).setCategory("test").     watcherClient().preparePutWatch("_name").setSource(watchBuilder().trigger(schedule(cron("0 0 0 1 1 ? 2050"))).input(noneInput()).condition(InternalAlwaysCondition.INSTANCE).addAction("testLogger", loggingAction).defaultThrottlePeriod(TimeValue.timeValueSeconds(0)).metadata(metadata)).get().     TriggerEvent triggerEvent = new ScheduleTriggerEvent(ZonedDateTime.now(ZoneOffset.UTC), ZonedDateTime.now(ZoneOffset.UTC)).     ExecuteWatchResponse executeWatchResponse = watcherClient().prepareExecuteWatch("_name").setTriggerEvent(triggerEvent).setActionMode("_all", ActionExecutionMode.SIMULATE).get().     Map<String, Object> result = executeWatchResponse.getRecordSource().getAsMap().     logger.info("result=\n{}", result).     assertThat(ObjectPath.<String>eval("metadata.foo", result), equalTo("bar")).     assertThat(ObjectPath.<String>eval("result.actions.0.id", result), equalTo("testLogger")).     assertThat(ObjectPath.<String>eval("result.actions.0.logging.logged_text", result), equalTo("_logging")). }
