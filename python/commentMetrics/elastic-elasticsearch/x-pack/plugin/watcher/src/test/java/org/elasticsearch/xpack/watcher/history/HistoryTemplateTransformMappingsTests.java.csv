commented;modifiers;parameterAmount;loc;comment;code
false;public;0;61;;public void testTransformFields() throws Exception {     assertAcked(client().admin().indices().prepareCreate("idx").addMapping("doc", jsonBuilder().startObject().startObject("properties").startObject("foo").field("type", "object").field("enabled", false).endObject().endObject().endObject())).     client().prepareBulk().setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).add(client().prepareIndex("idx", "doc", "1").setSource(jsonBuilder().startObject().field("name", "first").field("foo", "bar").endObject())).add(client().prepareIndex("idx", "doc", "2").setSource(jsonBuilder().startObject().field("name", "second").startObject("foo").field("what", "ever").endObject().endObject())).get().     watcherClient().preparePutWatch("_first").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput()).transform(searchTransform(templateRequest(searchSource().query(QueryBuilders.termQuery("name", "first")), "idx"))).addAction("logger", searchTransform(templateRequest(searchSource().query(QueryBuilders.termQuery("name", "first")), "idx")), loggingAction("indexed"))).get().     // execute another watch which with a transform that should conflict with the previous watch. Since the     // mapping for the transform construct is disabled, there should be no problems.     watcherClient().preparePutWatch("_second").setSource(watchBuilder().trigger(schedule(interval("5s"))).input(simpleInput()).transform(searchTransform(templateRequest(searchSource().query(QueryBuilders.termQuery("name", "second")), "idx"))).addAction("logger", searchTransform(templateRequest(searchSource().query(QueryBuilders.termQuery("name", "second")), "idx")), loggingAction("indexed"))).get().     watcherClient().prepareExecuteWatch("_first").setRecordExecution(true).get().     watcherClient().prepareExecuteWatch("_second").setRecordExecution(true).get().     assertBusy(() -> {         GetFieldMappingsResponse response = client().admin().indices().prepareGetFieldMappings(".watcher-history*").setFields("result.actions.transform.payload").setTypes("doc").includeDefaults(true).get().         // time might have rolled over to a new day, thus we need to check that this field exists only in one of the history indices         List<Boolean> payloadNulls = response.mappings().values().stream().map(map -> map.get("doc")).map(map -> map.get("result.actions.transform.payload")).filter(Objects::nonNull).map(GetFieldMappingsResponse.FieldMappingMetaData::isNull).collect(Collectors.toList()).         assertThat(payloadNulls, hasItem(true)).     }). }
