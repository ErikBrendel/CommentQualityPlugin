commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testGoodCase() throws IOException {     int length = scaledRandomIntBetween(1, 100).     test(length, length). }
false;public;0;5;;public void testLimitReached() {     int length = scaledRandomIntBetween(1, 100).     IOException e = expectThrows(IOException.class, () -> test(length + 1, length)).     assertThat(e.getMessage(), is("Maximum limit of [" + length + "] bytes reached")). }
false;public;0;9;;public void testMarking() {     ByteSizeValue byteSizeValue = new ByteSizeValue(1, ByteSizeUnit.BYTES).     SizeLimitInputStream is = new SizeLimitInputStream(byteSizeValue, new ByteArrayInputStream("empty".getBytes(UTF_8))).     assertThat(is.markSupported(), is(false)).     expectThrows(UnsupportedOperationException.class, () -> is.mark(10)).     IOException e = expectThrows(IOException.class, () -> is.reset()).     assertThat(e.getMessage(), is("reset not supported")). }
false;private;2;14;;private void test(int inputStreamLength, int maxAllowedSize) throws IOException {     String data = randomAlphaOfLength(inputStreamLength).     ByteSizeValue byteSizeValue = new ByteSizeValue(maxAllowedSize, ByteSizeUnit.BYTES).     SizeLimitInputStream is = new SizeLimitInputStream(byteSizeValue, new ByteArrayInputStream(data.getBytes(UTF_8))).     if (randomBoolean()) {         is.read(new byte[inputStreamLength]).     } else {         for (int i = 0. i < inputStreamLength. i++) {             is.read().         }     } }
