commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void testExecute() throws Exception {     Map<String, Object> data = new HashMap<>().     data.put("foo", "bar").     data.put("baz", new ArrayList<String>()).     ExecutableInput staticInput = new ExecutableSimpleInput(new SimpleInput(new Payload.Simple(data))).     Input.Result staticResult = staticInput.execute(null, new Payload.Simple()).     assertEquals(staticResult.payload().data().get("foo"), "bar").     List baz = (List) staticResult.payload().data().get("baz").     assertTrue(baz.isEmpty()). }
false;public;0;18;;public void testParserValid() throws Exception {     Map<String, Object> data = new HashMap<>().     data.put("foo", "bar").     data.put("baz", new ArrayList<String>()).     XContentBuilder jsonBuilder = jsonBuilder().map(data).     InputFactory parser = new SimpleInputFactory().     XContentParser xContentParser = createParser(jsonBuilder).     xContentParser.nextToken().     ExecutableInput input = parser.parseExecutable("_id", xContentParser).     assertEquals(input.type(), SimpleInput.TYPE).     Input.Result staticResult = input.execute(null, new Payload.Simple()).     assertEquals(staticResult.payload().data().get("foo"), "bar").     List baz = (List) staticResult.payload().data().get("baz").     assertTrue(baz.isEmpty()). }
false;public;0;13;;public void testParserInvalid() throws Exception {     XContentBuilder jsonBuilder = jsonBuilder().value("just a string").     InputFactory parser = new SimpleInputFactory().     XContentParser xContentParser = createParser(jsonBuilder).     xContentParser.nextToken().     try {         parser.parseInput("_id", xContentParser).         fail("[simple] input parse should fail with an InputException for an empty json object").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), containsString("expected an object but found [VALUE_STRING] instead")).     } }
