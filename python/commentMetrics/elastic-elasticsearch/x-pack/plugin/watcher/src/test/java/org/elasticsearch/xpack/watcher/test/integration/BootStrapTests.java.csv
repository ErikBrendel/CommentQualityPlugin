commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean timeWarped() {     return false. }
false;public;0;79;;public void testLoadMalformedWatchRecord() throws Exception {     client().prepareIndex(Watch.INDEX, Watch.DOC_TYPE, "_id").setSource(jsonBuilder().startObject().startObject(WatchField.TRIGGER.getPreferredName()).startObject("schedule").field("cron", "0/5 * * * * ? 2050").endObject().endObject().startObject(WatchField.ACTIONS.getPreferredName()).endObject().endObject()).get().     // valid watch record:     ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC).     Wid wid = new Wid("_id", now).     ScheduleTriggerEvent event = new ScheduleTriggerEvent("_id", now, now).     ExecutableCondition condition = InternalAlwaysCondition.INSTANCE.     String index = HistoryStoreField.getHistoryIndexNameForTime(now).     client().prepareIndex(index, HistoryStore.DOC_TYPE, wid.value()).setSource(jsonBuilder().startObject().startObject(WatchRecord.TRIGGER_EVENT.getPreferredName()).field(event.type(), event).endObject().startObject(WatchField.CONDITION.getPreferredName()).field(condition.type(), condition).endObject().startObject(WatchField.INPUT.getPreferredName()).startObject("none").endObject().endObject().endObject()).setWaitForActiveShards(ActiveShardCount.ALL).setRefreshPolicy(IMMEDIATE).get().     // unknown condition:     wid = new Wid("_id", now).     client().prepareIndex(index, HistoryStore.DOC_TYPE, wid.value()).setSource(jsonBuilder().startObject().startObject(WatchRecord.TRIGGER_EVENT.getPreferredName()).field(event.type(), event).endObject().startObject(WatchField.CONDITION.getPreferredName()).startObject("unknown").endObject().endObject().startObject(WatchField.INPUT.getPreferredName()).startObject("none").endObject().endObject().endObject()).setWaitForActiveShards(ActiveShardCount.ALL).setRefreshPolicy(IMMEDIATE).get().     // unknown trigger:     wid = new Wid("_id", now).     client().prepareIndex(index, HistoryStore.DOC_TYPE, wid.value()).setSource(jsonBuilder().startObject().startObject(WatchRecord.TRIGGER_EVENT.getPreferredName()).startObject("unknown").endObject().endObject().startObject(WatchField.CONDITION.getPreferredName()).field(condition.type(), condition).endObject().startObject(WatchField.INPUT.getPreferredName()).startObject("none").endObject().endObject().endObject()).setWaitForActiveShards(ActiveShardCount.ALL).setRefreshPolicy(IMMEDIATE).get().     stopWatcher().     startWatcher().     assertBusy(() -> {         WatcherStatsResponse response = watcherClient().prepareWatcherStats().get().         assertThat(response.getWatchesCount(), equalTo(1L)).     }). }
false;public;0;29;;public void testLoadExistingWatchesUponStartup() throws Exception {     stopWatcher().     int numWatches = scaledRandomIntBetween(16, 128).     WatcherSearchTemplateRequest request = templateRequest(searchSource().query(termQuery("field", "value")), "my-index").     BulkRequestBuilder bulkRequestBuilder = client().prepareBulk().     for (int i = 0. i < numWatches. i++) {         bulkRequestBuilder.add(client().prepareIndex(Watch.INDEX, Watch.DOC_TYPE, "_id" + i).setSource(watchBuilder().trigger(schedule(cron("0 0/5 * * * ? 2050"))).input(searchInput(request)).condition(new CompareCondition("ctx.payload.hits.total.value", CompareCondition.Op.EQ, 1L)).buildAsBytes(XContentType.JSON), XContentType.JSON).setWaitForActiveShards(ActiveShardCount.ALL)).     }     bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).get().     assertHitCount(client().prepareSearch(Watch.INDEX).setSize(0).get(), numWatches).     startWatcher().     assertBusy(() -> {         WatcherStatsResponse response = watcherClient().prepareWatcherStats().get().         assertThat(response.getWatchesCount(), equalTo((long) numWatches)).     }). }
false;public;0;49;;public void testMixedTriggeredWatchLoading() throws Exception {     createIndex("output").     client().prepareIndex("my-index", "foo", "bar").setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).setSource("field", "value").get().     WatcherStatsResponse response = watcherClient().prepareWatcherStats().get().     assertThat(response.getWatchesCount(), equalTo(0L)).     WatcherSearchTemplateRequest request = templateRequest(searchSource().query(termQuery("field", "value")), "my-index").     ensureGreen("output", "my-index").     int numWatches = 8.     for (int i = 0. i < numWatches. i++) {         String watchId = "_id" + i.         watcherClient().preparePutWatch(watchId).setSource(watchBuilder().trigger(schedule(cron("0/5 * * * * ? 2050"))).input(searchInput(request)).condition(InternalAlwaysCondition.INSTANCE).addAction("_id", indexAction("output", "test")).defaultThrottlePeriod(TimeValue.timeValueMillis(0))).get().     }     stopWatcher().     ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC).     final int numRecords = scaledRandomIntBetween(numWatches, 128).     BulkRequestBuilder bulkRequestBuilder = client().prepareBulk().     for (int i = 0. i < numRecords. i++) {         String watchId = "_id" + (i % numWatches).         now = now.plusMinutes(1).         ScheduleTriggerEvent event = new ScheduleTriggerEvent(watchId, now, now).         Wid wid = new Wid(watchId, now).         TriggeredWatch triggeredWatch = new TriggeredWatch(wid, event).         bulkRequestBuilder.add(client().prepareIndex(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE, triggeredWatch.id().value()).setSource(jsonBuilder().value(triggeredWatch)).request()).     }     bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).get().     logger.info("Added [{}] triggered watches for [{}] different watches, starting watcher again", numRecords, numWatches).     startWatcher().     assertSingleExecutionAndCompleteWatchHistory(numWatches, numRecords). }
false;public;0;41;;public void testTriggeredWatchLoading() throws Exception {     createIndex("output").     client().prepareIndex("my-index", "foo", "bar").setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).setSource("field", "value").get().     WatcherStatsResponse response = watcherClient().prepareWatcherStats().get().     assertThat(response.getWatchesCount(), equalTo(0L)).     String watchId = "_id".     WatcherSearchTemplateRequest request = templateRequest(searchSource().query(termQuery("field", "value")), "my-index").     watcherClient().preparePutWatch(watchId).setSource(watchBuilder().trigger(schedule(cron("0/5 * * * * ? 2050"))).input(searchInput(request)).condition(InternalAlwaysCondition.INSTANCE).addAction("_id", indexAction("output", "test")).defaultThrottlePeriod(TimeValue.timeValueMillis(0))).get().     stopWatcher().     ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC).     final int numRecords = scaledRandomIntBetween(2, 12).     BulkRequestBuilder bulkRequestBuilder = client().prepareBulk().     for (int i = 0. i < numRecords. i++) {         now = now.plusMinutes(1).         ScheduleTriggerEvent event = new ScheduleTriggerEvent(watchId, now, now).         Wid wid = new Wid(watchId, now).         TriggeredWatch triggeredWatch = new TriggeredWatch(wid, event).         bulkRequestBuilder.add(client().prepareIndex(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE, triggeredWatch.id().value()).setSource(jsonBuilder().value(triggeredWatch)).setWaitForActiveShards(ActiveShardCount.ALL)).     }     bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).get().     startWatcher().     assertSingleExecutionAndCompleteWatchHistory(1, numRecords). }
false;private;2;25;;private void assertSingleExecutionAndCompleteWatchHistory(final long numberOfWatches, final int expectedWatchHistoryCount) throws Exception {     assertBusy(() -> {         // We need to wait until all the records are processed from the internal execution queue, only then we can assert         // that numRecords watch records have been processed as part of starting up.         WatcherStatsResponse response = watcherClient().prepareWatcherStats().setIncludeCurrentWatches(true).get().         long maxSize = response.getNodes().stream().map(WatcherStatsResponse.Node::getSnapshots).mapToLong(List::size).sum().         assertThat(maxSize, equalTo(0L)).         refresh().         SearchResponse searchResponse = client().prepareSearch("output").get().         assertThat(searchResponse.getHits().getTotalHits().value, is(greaterThanOrEqualTo(numberOfWatches))).         long successfulWatchExecutions = searchResponse.getHits().getTotalHits().value.         // the watch history should contain entries for each triggered watch, which a few have been marked as not executed         SearchResponse historySearchResponse = client().prepareSearch(HistoryStoreField.INDEX_PREFIX + "*").setSize(10000).get().         assertHitCount(historySearchResponse, expectedWatchHistoryCount).         long notExecutedCount = Arrays.stream(historySearchResponse.getHits().getHits()).filter(hit -> hit.getSourceAsMap().get("state").equals(ExecutionState.NOT_EXECUTED_ALREADY_QUEUED.id())).count().         logger.info("Watches not executed: [{}]: expected watch history count [{}] - [{}] successful watch exections", notExecutedCount, expectedWatchHistoryCount, successfulWatchExecutions).         assertThat(notExecutedCount, is(expectedWatchHistoryCount - successfulWatchExecutions)).     }, 20, TimeUnit.SECONDS). }
false;public;0;10;;public void testManuallyStopped() throws Exception {     WatcherStatsResponse response = watcherClient().prepareWatcherStats().get().     assertThat(response.watcherMetaData().manuallyStopped(), is(false)).     stopWatcher().     response = watcherClient().prepareWatcherStats().get().     assertThat(response.watcherMetaData().manuallyStopped(), is(true)).     startWatcher().     response = watcherClient().prepareWatcherStats().get().     assertThat(response.watcherMetaData().manuallyStopped(), is(false)). }
false;public;0;56;;public void testWatchRecordSavedTwice() throws Exception {     // A watch record without a watch is the easiest to simulate, so that is what this test does.     if (client().admin().indices().prepareExists(Watch.INDEX).get().isExists() == false) {         // we rarely create an .watches alias in the base class         assertAcked(client().admin().indices().prepareCreate(Watch.INDEX)).     }     LocalDateTime localDateTime = LocalDateTime.of(2015, 11, 5, 0, 0, 0, 0).     ZonedDateTime triggeredTime = ZonedDateTime.of(localDateTime, ZoneOffset.UTC).     final String watchRecordIndex = HistoryStoreField.getHistoryIndexNameForTime(triggeredTime).     logger.info("Stopping watcher").     stopWatcher().     BulkRequestBuilder bulkRequestBuilder = client().prepareBulk().     int numRecords = scaledRandomIntBetween(8, 32).     for (int i = 0. i < numRecords. i++) {         String watchId = Integer.toString(i).         ScheduleTriggerEvent event = new ScheduleTriggerEvent(watchId, triggeredTime, triggeredTime).         Wid wid = new Wid(watchId, triggeredTime).         TriggeredWatch triggeredWatch = new TriggeredWatch(wid, event).         bulkRequestBuilder.add(client().prepareIndex(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE, triggeredWatch.id().value()).setSource(jsonBuilder().value(triggeredWatch))).         String id = internalCluster().getInstance(ClusterService.class).localNode().getId().         WatchRecord watchRecord = new WatchRecord.MessageWatchRecord(wid, event, ExecutionState.EXECUTED, "executed", id).         bulkRequestBuilder.add(client().prepareIndex(watchRecordIndex, HistoryStore.DOC_TYPE, watchRecord.id().value()).setSource(jsonBuilder().value(watchRecord))).     }     assertNoFailures(bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).get()).     logger.info("Starting watcher").     startWatcher().     assertBusy(() -> {         // We need to wait until all the records are processed from the internal execution queue, only then we can assert         // that numRecords watch records have been processed as part of starting up.         WatcherStatsResponse response = watcherClient().prepareWatcherStats().setIncludeCurrentWatches(true).get().         long maxSize = response.getNodes().stream().map(WatcherStatsResponse.Node::getSnapshots).mapToLong(List::size).sum().         assertThat(maxSize, equalTo(0L)).         // but even then since the execution of the watch record is async it may take a little bit before         // the actual documents are in the output index         refresh().         SearchResponse searchResponse = client().prepareSearch(watchRecordIndex).setSize(numRecords).get().         assertThat(searchResponse.getHits().getTotalHits().value, Matchers.equalTo((long) numRecords)).         for (int i = 0. i < numRecords. i++) {             assertThat(searchResponse.getHits().getAt(i).getSourceAsMap().get("state"), is(ExecutionState.EXECUTED.id())).         }     }). }
