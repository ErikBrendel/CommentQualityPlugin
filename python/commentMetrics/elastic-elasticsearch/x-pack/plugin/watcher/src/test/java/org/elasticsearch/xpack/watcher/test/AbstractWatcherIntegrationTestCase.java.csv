# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractWatcherIntegrationTestCase -> protected boolean timeWarped();1524684173;@return  whether the test suite should run in time warp mode. By default this will be determined globally_to all test suites based on {@code -Dtests.timewarp} system property (when missing, defaults to_{@code true}). If a test suite requires to force the mode or force not running under this mode_this method can be overridden.;protected boolean timeWarped() {_        return true__    };return,whether,the,test,suite,should,run,in,time,warp,mode,by,default,this,will,be,determined,globally,to,all,test,suites,based,on,code,dtests,timewarp,system,property,when,missing,defaults,to,code,true,if,a,test,suite,requires,to,force,the,mode,or,force,not,running,under,this,mode,this,method,can,be,overridden;protected,boolean,time,warped,return,true
AbstractWatcherIntegrationTestCase -> protected boolean timeWarped();1526638450;@return  whether the test suite should run in time warp mode. By default this will be determined globally_to all test suites based on {@code -Dtests.timewarp} system property (when missing, defaults to_{@code true}). If a test suite requires to force the mode or force not running under this mode_this method can be overridden.;protected boolean timeWarped() {_        return true__    };return,whether,the,test,suite,should,run,in,time,warp,mode,by,default,this,will,be,determined,globally,to,all,test,suites,based,on,code,dtests,timewarp,system,property,when,missing,defaults,to,code,true,if,a,test,suite,requires,to,force,the,mode,or,force,not,running,under,this,mode,this,method,can,be,overridden;protected,boolean,time,warped,return,true
AbstractWatcherIntegrationTestCase -> protected boolean timeWarped();1527840262;@return  whether the test suite should run in time warp mode. By default this will be determined globally_to all test suites based on {@code -Dtests.timewarp} system property (when missing, defaults to_{@code true}). If a test suite requires to force the mode or force not running under this mode_this method can be overridden.;protected boolean timeWarped() {_        return true__    };return,whether,the,test,suite,should,run,in,time,warp,mode,by,default,this,will,be,determined,globally,to,all,test,suites,based,on,code,dtests,timewarp,system,property,when,missing,defaults,to,code,true,if,a,test,suite,requires,to,force,the,mode,or,force,not,running,under,this,mode,this,method,can,be,overridden;protected,boolean,time,warped,return,true
AbstractWatcherIntegrationTestCase -> protected boolean timeWarped();1528762805;@return  whether the test suite should run in time warp mode. By default this will be determined globally_to all test suites based on {@code -Dtests.timewarp} system property (when missing, defaults to_{@code true}). If a test suite requires to force the mode or force not running under this mode_this method can be overridden.;protected boolean timeWarped() {_        return true__    };return,whether,the,test,suite,should,run,in,time,warp,mode,by,default,this,will,be,determined,globally,to,all,test,suites,based,on,code,dtests,timewarp,system,property,when,missing,defaults,to,code,true,if,a,test,suite,requires,to,force,the,mode,or,force,not,running,under,this,mode,this,method,can,be,overridden;protected,boolean,time,warped,return,true
AbstractWatcherIntegrationTestCase -> protected boolean timeWarped();1528893677;@return  whether the test suite should run in time warp mode. By default this will be determined globally_to all test suites based on {@code -Dtests.timewarp} system property (when missing, defaults to_{@code true}). If a test suite requires to force the mode or force not running under this mode_this method can be overridden.;protected boolean timeWarped() {_        return true__    };return,whether,the,test,suite,should,run,in,time,warp,mode,by,default,this,will,be,determined,globally,to,all,test,suites,based,on,code,dtests,timewarp,system,property,when,missing,defaults,to,code,true,if,a,test,suite,requires,to,force,the,mode,or,force,not,running,under,this,mode,this,method,can,be,overridden;protected,boolean,time,warped,return,true
AbstractWatcherIntegrationTestCase -> protected boolean timeWarped();1538067637;@return  whether the test suite should run in time warp mode. By default this will be determined globally_to all test suites based on {@code -Dtests.timewarp} system property (when missing, defaults to_{@code true}). If a test suite requires to force the mode or force not running under this mode_this method can be overridden.;protected boolean timeWarped() {_        return true__    };return,whether,the,test,suite,should,run,in,time,warp,mode,by,default,this,will,be,determined,globally,to,all,test,suites,based,on,code,dtests,timewarp,system,property,when,missing,defaults,to,code,true,if,a,test,suite,requires,to,force,the,mode,or,force,not,running,under,this,mode,this,method,can,be,overridden;protected,boolean,time,warped,return,true
AbstractWatcherIntegrationTestCase -> protected boolean timeWarped();1539723533;@return  whether the test suite should run in time warp mode. By default this will be determined globally_to all test suites based on {@code -Dtests.timewarp} system property (when missing, defaults to_{@code true}). If a test suite requires to force the mode or force not running under this mode_this method can be overridden.;protected boolean timeWarped() {_        return true__    };return,whether,the,test,suite,should,run,in,time,warp,mode,by,default,this,will,be,determined,globally,to,all,test,suites,based,on,code,dtests,timewarp,system,property,when,missing,defaults,to,code,true,if,a,test,suite,requires,to,force,the,mode,or,force,not,running,under,this,mode,this,method,can,be,overridden;protected,boolean,time,warped,return,true
AbstractWatcherIntegrationTestCase -> protected boolean timeWarped();1544035746;@return  whether the test suite should run in time warp mode. By default this will be determined globally_to all test suites based on {@code -Dtests.timewarp} system property (when missing, defaults to_{@code true}). If a test suite requires to force the mode or force not running under this mode_this method can be overridden.;protected boolean timeWarped() {_        return true__    };return,whether,the,test,suite,should,run,in,time,warp,mode,by,default,this,will,be,determined,globally,to,all,test,suites,based,on,code,dtests,timewarp,system,property,when,missing,defaults,to,code,true,if,a,test,suite,requires,to,force,the,mode,or,force,not,running,under,this,mode,this,method,can,be,overridden;protected,boolean,time,warped,return,true
AbstractWatcherIntegrationTestCase -> protected boolean timeWarped();1545124299;@return  whether the test suite should run in time warp mode. By default this will be determined globally_to all test suites based on {@code -Dtests.timewarp} system property (when missing, defaults to_{@code true}). If a test suite requires to force the mode or force not running under this mode_this method can be overridden.;protected boolean timeWarped() {_        return true__    };return,whether,the,test,suite,should,run,in,time,warp,mode,by,default,this,will,be,determined,globally,to,all,test,suites,based,on,code,dtests,timewarp,system,property,when,missing,defaults,to,code,true,if,a,test,suite,requires,to,force,the,mode,or,force,not,running,under,this,mode,this,method,can,be,overridden;protected,boolean,time,warped,return,true
AbstractWatcherIntegrationTestCase -> protected boolean timeWarped();1548263888;@return  whether the test suite should run in time warp mode. By default this will be determined globally_to all test suites based on {@code -Dtests.timewarp} system property (when missing, defaults to_{@code true}). If a test suite requires to force the mode or force not running under this mode_this method can be overridden.;protected boolean timeWarped() {_        return true__    };return,whether,the,test,suite,should,run,in,time,warp,mode,by,default,this,will,be,determined,globally,to,all,test,suites,based,on,code,dtests,timewarp,system,property,when,missing,defaults,to,code,true,if,a,test,suite,requires,to,force,the,mode,or,force,not,running,under,this,mode,this,method,can,be,overridden;protected,boolean,time,warped,return,true
AbstractWatcherIntegrationTestCase -> protected boolean timeWarped();1549289311;@return  whether the test suite should run in time warp mode. By default this will be determined globally_to all test suites based on {@code -Dtests.timewarp} system property (when missing, defaults to_{@code true}). If a test suite requires to force the mode or force not running under this mode_this method can be overridden.;protected boolean timeWarped() {_        return true__    };return,whether,the,test,suite,should,run,in,time,warp,mode,by,default,this,will,be,determined,globally,to,all,test,suites,based,on,code,dtests,timewarp,system,property,when,missing,defaults,to,code,true,if,a,test,suite,requires,to,force,the,mode,or,force,not,running,under,this,mode,this,method,can,be,overridden;protected,boolean,time,warped,return,true
AbstractWatcherIntegrationTestCase -> private void createWatcherIndicesOrAliases() throws Exception;1524684173;In order to test, that .watches and .triggered-watches indices can also point to an alias, we will rarely create those_after starting watcher__The idea behind this is the possible use of the migration helper for upgrades, see_https://github.com/elastic/elasticsearch-migration/;private void createWatcherIndicesOrAliases() throws Exception {_        if (internalCluster().size() > 0) {_            ensureWatcherTemplatesAdded()__            _            String watchIndexName__            String triggeredWatchIndexName__            if (rarely()) {_                watchIndexName = ".watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(watchIndexName)_                        .setCause("Index to test aliases with .watches index")_                        .addAlias(new Alias(Watch.INDEX))_                        .get()__                assertAcked(response)__                logger.info("set alias for .watches index to [{}]", watchIndexName)__            } else {_                watchIndexName = Watch.INDEX__                Settings.Builder builder = Settings.builder()__                if (randomBoolean()) {_                    builder.put("index.number_of_shards", scaledRandomIntBetween(1, 5))__                }_                assertAcked(client().admin().indices().prepareCreate(watchIndexName).setSettings(builder))__            }__            _            if (rarely()) {_                triggeredWatchIndexName = ".triggered_watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(triggeredWatchIndexName)_                        .setCause("Index to test aliases with .triggered-watches index")_                        .addAlias(new Alias(TriggeredWatchStoreField.INDEX_NAME))_                        .get()__                assertAcked(response)__                logger.info("set alias for .triggered-watches index to [{}]", triggeredWatchIndexName)__            } else {_                triggeredWatchIndexName = TriggeredWatchStoreField.INDEX_NAME__                assertAcked(client().admin().indices().prepareCreate(triggeredWatchIndexName))__            }__            String historyIndex = HistoryStoreField.getHistoryIndexNameForTime(DateTime.now(DateTimeZone.UTC))__            assertAcked(client().admin().indices().prepareCreate(historyIndex))__            logger.info("creating watch history index [{}]", historyIndex)__            ensureGreen(historyIndex, watchIndexName, triggeredWatchIndexName)__        }_    };in,order,to,test,that,watches,and,triggered,watches,indices,can,also,point,to,an,alias,we,will,rarely,create,those,after,starting,watcher,the,idea,behind,this,is,the,possible,use,of,the,migration,helper,for,upgrades,see,https,github,com,elastic,elasticsearch,migration;private,void,create,watcher,indices,or,aliases,throws,exception,if,internal,cluster,size,0,ensure,watcher,templates,added,string,watch,index,name,string,triggered,watch,index,name,if,rarely,watch,index,name,watches,alias,index,create,index,response,response,client,admin,indices,prepare,create,watch,index,name,set,cause,index,to,test,aliases,with,watches,index,add,alias,new,alias,watch,index,get,assert,acked,response,logger,info,set,alias,for,watches,index,to,watch,index,name,else,watch,index,name,watch,index,settings,builder,builder,settings,builder,if,random,boolean,builder,put,index,scaled,random,int,between,1,5,assert,acked,client,admin,indices,prepare,create,watch,index,name,set,settings,builder,if,rarely,triggered,watch,index,name,alias,index,create,index,response,response,client,admin,indices,prepare,create,triggered,watch,index,name,set,cause,index,to,test,aliases,with,triggered,watches,index,add,alias,new,alias,triggered,watch,store,field,get,assert,acked,response,logger,info,set,alias,for,triggered,watches,index,to,triggered,watch,index,name,else,triggered,watch,index,name,triggered,watch,store,field,assert,acked,client,admin,indices,prepare,create,triggered,watch,index,name,string,history,index,history,store,field,get,history,index,name,for,time,date,time,now,date,time,zone,utc,assert,acked,client,admin,indices,prepare,create,history,index,logger,info,creating,watch,history,index,history,index,ensure,green,history,index,watch,index,name,triggered,watch,index,name
AbstractWatcherIntegrationTestCase -> private void createWatcherIndicesOrAliases() throws Exception;1526638450;In order to test, that .watches and .triggered-watches indices can also point to an alias, we will rarely create those_after starting watcher__The idea behind this is the possible use of the migration helper for upgrades, see_https://github.com/elastic/elasticsearch-migration/;private void createWatcherIndicesOrAliases() throws Exception {_        if (internalCluster().size() > 0) {_            ensureWatcherTemplatesAdded()__            _            String watchIndexName__            String triggeredWatchIndexName__            if (rarely()) {_                watchIndexName = ".watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(watchIndexName)_                        .setCause("Index to test aliases with .watches index")_                        .addAlias(new Alias(Watch.INDEX))_                        .get()__                assertAcked(response)__                logger.info("set alias for .watches index to [{}]", watchIndexName)__            } else {_                watchIndexName = Watch.INDEX__                Settings.Builder builder = Settings.builder()__                if (randomBoolean()) {_                    builder.put("index.number_of_shards", scaledRandomIntBetween(1, 5))__                }_                assertAcked(client().admin().indices().prepareCreate(watchIndexName).setSettings(builder))__            }__            _            if (rarely()) {_                triggeredWatchIndexName = ".triggered_watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(triggeredWatchIndexName)_                        .setCause("Index to test aliases with .triggered-watches index")_                        .addAlias(new Alias(TriggeredWatchStoreField.INDEX_NAME))_                        .get()__                assertAcked(response)__                logger.info("set alias for .triggered-watches index to [{}]", triggeredWatchIndexName)__            } else {_                triggeredWatchIndexName = TriggeredWatchStoreField.INDEX_NAME__                assertAcked(client().admin().indices().prepareCreate(triggeredWatchIndexName))__            }__            String historyIndex = HistoryStoreField.getHistoryIndexNameForTime(DateTime.now(DateTimeZone.UTC))__            assertAcked(client().admin().indices().prepareCreate(historyIndex))__            logger.info("creating watch history index [{}]", historyIndex)__            ensureGreen(historyIndex, watchIndexName, triggeredWatchIndexName)__        }_    };in,order,to,test,that,watches,and,triggered,watches,indices,can,also,point,to,an,alias,we,will,rarely,create,those,after,starting,watcher,the,idea,behind,this,is,the,possible,use,of,the,migration,helper,for,upgrades,see,https,github,com,elastic,elasticsearch,migration;private,void,create,watcher,indices,or,aliases,throws,exception,if,internal,cluster,size,0,ensure,watcher,templates,added,string,watch,index,name,string,triggered,watch,index,name,if,rarely,watch,index,name,watches,alias,index,create,index,response,response,client,admin,indices,prepare,create,watch,index,name,set,cause,index,to,test,aliases,with,watches,index,add,alias,new,alias,watch,index,get,assert,acked,response,logger,info,set,alias,for,watches,index,to,watch,index,name,else,watch,index,name,watch,index,settings,builder,builder,settings,builder,if,random,boolean,builder,put,index,scaled,random,int,between,1,5,assert,acked,client,admin,indices,prepare,create,watch,index,name,set,settings,builder,if,rarely,triggered,watch,index,name,alias,index,create,index,response,response,client,admin,indices,prepare,create,triggered,watch,index,name,set,cause,index,to,test,aliases,with,triggered,watches,index,add,alias,new,alias,triggered,watch,store,field,get,assert,acked,response,logger,info,set,alias,for,triggered,watches,index,to,triggered,watch,index,name,else,triggered,watch,index,name,triggered,watch,store,field,assert,acked,client,admin,indices,prepare,create,triggered,watch,index,name,string,history,index,history,store,field,get,history,index,name,for,time,date,time,now,date,time,zone,utc,assert,acked,client,admin,indices,prepare,create,history,index,logger,info,creating,watch,history,index,history,index,ensure,green,history,index,watch,index,name,triggered,watch,index,name
AbstractWatcherIntegrationTestCase -> private void createWatcherIndicesOrAliases() throws Exception;1527840262;In order to test, that .watches and .triggered-watches indices can also point to an alias, we will rarely create those_after starting watcher__The idea behind this is the possible use of the migration helper for upgrades, see_https://github.com/elastic/elasticsearch-migration/;private void createWatcherIndicesOrAliases() throws Exception {_        if (internalCluster().size() > 0) {_            ensureWatcherTemplatesAdded()__            _            String watchIndexName__            String triggeredWatchIndexName__            if (rarely()) {_                watchIndexName = ".watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(watchIndexName)_                        .setCause("Index to test aliases with .watches index")_                        .addAlias(new Alias(Watch.INDEX))_                        .get()__                assertAcked(response)__                logger.info("set alias for .watches index to [{}]", watchIndexName)__            } else {_                watchIndexName = Watch.INDEX__                Settings.Builder builder = Settings.builder()__                if (randomBoolean()) {_                    builder.put("index.number_of_shards", scaledRandomIntBetween(1, 5))__                }_                assertAcked(client().admin().indices().prepareCreate(watchIndexName).setSettings(builder))__            }__            _            if (rarely()) {_                triggeredWatchIndexName = ".triggered_watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(triggeredWatchIndexName)_                        .setCause("Index to test aliases with .triggered-watches index")_                        .addAlias(new Alias(TriggeredWatchStoreField.INDEX_NAME))_                        .get()__                assertAcked(response)__                logger.info("set alias for .triggered-watches index to [{}]", triggeredWatchIndexName)__            } else {_                triggeredWatchIndexName = TriggeredWatchStoreField.INDEX_NAME__                assertAcked(client().admin().indices().prepareCreate(triggeredWatchIndexName))__            }__            String historyIndex = HistoryStoreField.getHistoryIndexNameForTime(DateTime.now(DateTimeZone.UTC))__            assertAcked(client().admin().indices().prepareCreate(historyIndex))__            logger.info("creating watch history index [{}]", historyIndex)__            ensureGreen(historyIndex, watchIndexName, triggeredWatchIndexName)__        }_    };in,order,to,test,that,watches,and,triggered,watches,indices,can,also,point,to,an,alias,we,will,rarely,create,those,after,starting,watcher,the,idea,behind,this,is,the,possible,use,of,the,migration,helper,for,upgrades,see,https,github,com,elastic,elasticsearch,migration;private,void,create,watcher,indices,or,aliases,throws,exception,if,internal,cluster,size,0,ensure,watcher,templates,added,string,watch,index,name,string,triggered,watch,index,name,if,rarely,watch,index,name,watches,alias,index,create,index,response,response,client,admin,indices,prepare,create,watch,index,name,set,cause,index,to,test,aliases,with,watches,index,add,alias,new,alias,watch,index,get,assert,acked,response,logger,info,set,alias,for,watches,index,to,watch,index,name,else,watch,index,name,watch,index,settings,builder,builder,settings,builder,if,random,boolean,builder,put,index,scaled,random,int,between,1,5,assert,acked,client,admin,indices,prepare,create,watch,index,name,set,settings,builder,if,rarely,triggered,watch,index,name,alias,index,create,index,response,response,client,admin,indices,prepare,create,triggered,watch,index,name,set,cause,index,to,test,aliases,with,triggered,watches,index,add,alias,new,alias,triggered,watch,store,field,get,assert,acked,response,logger,info,set,alias,for,triggered,watches,index,to,triggered,watch,index,name,else,triggered,watch,index,name,triggered,watch,store,field,assert,acked,client,admin,indices,prepare,create,triggered,watch,index,name,string,history,index,history,store,field,get,history,index,name,for,time,date,time,now,date,time,zone,utc,assert,acked,client,admin,indices,prepare,create,history,index,logger,info,creating,watch,history,index,history,index,ensure,green,history,index,watch,index,name,triggered,watch,index,name
AbstractWatcherIntegrationTestCase -> private void createWatcherIndicesOrAliases() throws Exception;1528762805;In order to test, that .watches and .triggered-watches indices can also point to an alias, we will rarely create those_after starting watcher__The idea behind this is the possible use of the migration helper for upgrades, see_https://github.com/elastic/elasticsearch-migration/;private void createWatcherIndicesOrAliases() throws Exception {_        if (internalCluster().size() > 0) {_            ensureWatcherTemplatesAdded()__            _            String watchIndexName__            String triggeredWatchIndexName__            if (rarely()) {_                watchIndexName = ".watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(watchIndexName)_                        .setCause("Index to test aliases with .watches index")_                        .addAlias(new Alias(Watch.INDEX))_                        .get()__                assertAcked(response)__                logger.info("set alias for .watches index to [{}]", watchIndexName)__            } else {_                watchIndexName = Watch.INDEX__                Settings.Builder builder = Settings.builder()__                if (randomBoolean()) {_                    builder.put("index.number_of_shards", scaledRandomIntBetween(1, 5))__                }_                assertAcked(client().admin().indices().prepareCreate(watchIndexName).setSettings(builder))__            }__            _            if (rarely()) {_                triggeredWatchIndexName = ".triggered_watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(triggeredWatchIndexName)_                        .setCause("Index to test aliases with .triggered-watches index")_                        .addAlias(new Alias(TriggeredWatchStoreField.INDEX_NAME))_                        .get()__                assertAcked(response)__                logger.info("set alias for .triggered-watches index to [{}]", triggeredWatchIndexName)__            } else {_                triggeredWatchIndexName = TriggeredWatchStoreField.INDEX_NAME__                assertAcked(client().admin().indices().prepareCreate(triggeredWatchIndexName))__            }__            String historyIndex = HistoryStoreField.getHistoryIndexNameForTime(DateTime.now(DateTimeZone.UTC))__            assertAcked(client().admin().indices().prepareCreate(historyIndex))__            logger.info("creating watch history index [{}]", historyIndex)__            ensureGreen(historyIndex, watchIndexName, triggeredWatchIndexName)__        }_    };in,order,to,test,that,watches,and,triggered,watches,indices,can,also,point,to,an,alias,we,will,rarely,create,those,after,starting,watcher,the,idea,behind,this,is,the,possible,use,of,the,migration,helper,for,upgrades,see,https,github,com,elastic,elasticsearch,migration;private,void,create,watcher,indices,or,aliases,throws,exception,if,internal,cluster,size,0,ensure,watcher,templates,added,string,watch,index,name,string,triggered,watch,index,name,if,rarely,watch,index,name,watches,alias,index,create,index,response,response,client,admin,indices,prepare,create,watch,index,name,set,cause,index,to,test,aliases,with,watches,index,add,alias,new,alias,watch,index,get,assert,acked,response,logger,info,set,alias,for,watches,index,to,watch,index,name,else,watch,index,name,watch,index,settings,builder,builder,settings,builder,if,random,boolean,builder,put,index,scaled,random,int,between,1,5,assert,acked,client,admin,indices,prepare,create,watch,index,name,set,settings,builder,if,rarely,triggered,watch,index,name,alias,index,create,index,response,response,client,admin,indices,prepare,create,triggered,watch,index,name,set,cause,index,to,test,aliases,with,triggered,watches,index,add,alias,new,alias,triggered,watch,store,field,get,assert,acked,response,logger,info,set,alias,for,triggered,watches,index,to,triggered,watch,index,name,else,triggered,watch,index,name,triggered,watch,store,field,assert,acked,client,admin,indices,prepare,create,triggered,watch,index,name,string,history,index,history,store,field,get,history,index,name,for,time,date,time,now,date,time,zone,utc,assert,acked,client,admin,indices,prepare,create,history,index,logger,info,creating,watch,history,index,history,index,ensure,green,history,index,watch,index,name,triggered,watch,index,name
AbstractWatcherIntegrationTestCase -> private void createWatcherIndicesOrAliases() throws Exception;1528893677;In order to test, that .watches and .triggered-watches indices can also point to an alias, we will rarely create those_after starting watcher__The idea behind this is the possible use of the migration helper for upgrades, see_https://github.com/elastic/elasticsearch-migration/;private void createWatcherIndicesOrAliases() throws Exception {_        if (internalCluster().size() > 0) {_            ensureWatcherTemplatesAdded()__            _            String watchIndexName__            String triggeredWatchIndexName__            if (rarely()) {_                watchIndexName = ".watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(watchIndexName)_                        .setCause("Index to test aliases with .watches index")_                        .addAlias(new Alias(Watch.INDEX))_                        .get()__                assertAcked(response)__                logger.info("set alias for .watches index to [{}]", watchIndexName)__            } else {_                watchIndexName = Watch.INDEX__                Settings.Builder builder = Settings.builder()__                if (randomBoolean()) {_                    builder.put("index.number_of_shards", scaledRandomIntBetween(1, 5))__                }_                assertAcked(client().admin().indices().prepareCreate(watchIndexName).setSettings(builder))__            }__            _            if (rarely()) {_                triggeredWatchIndexName = ".triggered_watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(triggeredWatchIndexName)_                        .setCause("Index to test aliases with .triggered-watches index")_                        .addAlias(new Alias(TriggeredWatchStoreField.INDEX_NAME))_                        .get()__                assertAcked(response)__                logger.info("set alias for .triggered-watches index to [{}]", triggeredWatchIndexName)__            } else {_                triggeredWatchIndexName = TriggeredWatchStoreField.INDEX_NAME__                assertAcked(client().admin().indices().prepareCreate(triggeredWatchIndexName))__            }__            String historyIndex = HistoryStoreField.getHistoryIndexNameForTime(DateTime.now(DateTimeZone.UTC))__            assertAcked(client().admin().indices().prepareCreate(historyIndex))__            logger.info("creating watch history index [{}]", historyIndex)__            ensureGreen(historyIndex, watchIndexName, triggeredWatchIndexName)__        }_    };in,order,to,test,that,watches,and,triggered,watches,indices,can,also,point,to,an,alias,we,will,rarely,create,those,after,starting,watcher,the,idea,behind,this,is,the,possible,use,of,the,migration,helper,for,upgrades,see,https,github,com,elastic,elasticsearch,migration;private,void,create,watcher,indices,or,aliases,throws,exception,if,internal,cluster,size,0,ensure,watcher,templates,added,string,watch,index,name,string,triggered,watch,index,name,if,rarely,watch,index,name,watches,alias,index,create,index,response,response,client,admin,indices,prepare,create,watch,index,name,set,cause,index,to,test,aliases,with,watches,index,add,alias,new,alias,watch,index,get,assert,acked,response,logger,info,set,alias,for,watches,index,to,watch,index,name,else,watch,index,name,watch,index,settings,builder,builder,settings,builder,if,random,boolean,builder,put,index,scaled,random,int,between,1,5,assert,acked,client,admin,indices,prepare,create,watch,index,name,set,settings,builder,if,rarely,triggered,watch,index,name,alias,index,create,index,response,response,client,admin,indices,prepare,create,triggered,watch,index,name,set,cause,index,to,test,aliases,with,triggered,watches,index,add,alias,new,alias,triggered,watch,store,field,get,assert,acked,response,logger,info,set,alias,for,triggered,watches,index,to,triggered,watch,index,name,else,triggered,watch,index,name,triggered,watch,store,field,assert,acked,client,admin,indices,prepare,create,triggered,watch,index,name,string,history,index,history,store,field,get,history,index,name,for,time,date,time,now,date,time,zone,utc,assert,acked,client,admin,indices,prepare,create,history,index,logger,info,creating,watch,history,index,history,index,ensure,green,history,index,watch,index,name,triggered,watch,index,name
AbstractWatcherIntegrationTestCase -> private void createWatcherIndicesOrAliases() throws Exception;1538067637;In order to test, that .watches and .triggered-watches indices can also point to an alias, we will rarely create those_after starting watcher__The idea behind this is the possible use of the migration helper for upgrades, see_https://github.com/elastic/elasticsearch-migration/;private void createWatcherIndicesOrAliases() throws Exception {_        if (internalCluster().size() > 0) {_            ensureWatcherTemplatesAdded()__            _            String watchIndexName__            String triggeredWatchIndexName__            if (rarely()) {_                watchIndexName = ".watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(watchIndexName)_                        .setCause("Index to test aliases with .watches index")_                        .addAlias(new Alias(Watch.INDEX))_                        .get()__                assertAcked(response)__                logger.info("set alias for .watches index to [{}]", watchIndexName)__            } else {_                watchIndexName = Watch.INDEX__                Settings.Builder builder = Settings.builder()__                if (randomBoolean()) {_                    builder.put("index.number_of_shards", scaledRandomIntBetween(1, 5))__                }_                assertAcked(client().admin().indices().prepareCreate(watchIndexName).setSettings(builder))__            }__            _            if (rarely()) {_                triggeredWatchIndexName = ".triggered_watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(triggeredWatchIndexName)_                        .setCause("Index to test aliases with .triggered-watches index")_                        .addAlias(new Alias(TriggeredWatchStoreField.INDEX_NAME))_                        .get()__                assertAcked(response)__                logger.info("set alias for .triggered-watches index to [{}]", triggeredWatchIndexName)__            } else {_                triggeredWatchIndexName = TriggeredWatchStoreField.INDEX_NAME__                assertAcked(client().admin().indices().prepareCreate(triggeredWatchIndexName))__            }__            String historyIndex = HistoryStoreField.getHistoryIndexNameForTime(DateTime.now(DateTimeZone.UTC))__            assertAcked(client().admin().indices().prepareCreate(historyIndex))__            logger.info("creating watch history index [{}]", historyIndex)__            ensureGreen(historyIndex, watchIndexName, triggeredWatchIndexName)__        }_    };in,order,to,test,that,watches,and,triggered,watches,indices,can,also,point,to,an,alias,we,will,rarely,create,those,after,starting,watcher,the,idea,behind,this,is,the,possible,use,of,the,migration,helper,for,upgrades,see,https,github,com,elastic,elasticsearch,migration;private,void,create,watcher,indices,or,aliases,throws,exception,if,internal,cluster,size,0,ensure,watcher,templates,added,string,watch,index,name,string,triggered,watch,index,name,if,rarely,watch,index,name,watches,alias,index,create,index,response,response,client,admin,indices,prepare,create,watch,index,name,set,cause,index,to,test,aliases,with,watches,index,add,alias,new,alias,watch,index,get,assert,acked,response,logger,info,set,alias,for,watches,index,to,watch,index,name,else,watch,index,name,watch,index,settings,builder,builder,settings,builder,if,random,boolean,builder,put,index,scaled,random,int,between,1,5,assert,acked,client,admin,indices,prepare,create,watch,index,name,set,settings,builder,if,rarely,triggered,watch,index,name,alias,index,create,index,response,response,client,admin,indices,prepare,create,triggered,watch,index,name,set,cause,index,to,test,aliases,with,triggered,watches,index,add,alias,new,alias,triggered,watch,store,field,get,assert,acked,response,logger,info,set,alias,for,triggered,watches,index,to,triggered,watch,index,name,else,triggered,watch,index,name,triggered,watch,store,field,assert,acked,client,admin,indices,prepare,create,triggered,watch,index,name,string,history,index,history,store,field,get,history,index,name,for,time,date,time,now,date,time,zone,utc,assert,acked,client,admin,indices,prepare,create,history,index,logger,info,creating,watch,history,index,history,index,ensure,green,history,index,watch,index,name,triggered,watch,index,name
AbstractWatcherIntegrationTestCase -> private void createWatcherIndicesOrAliases() throws Exception;1539723533;In order to test, that .watches and .triggered-watches indices can also point to an alias, we will rarely create those_after starting watcher__The idea behind this is the possible use of the migration helper for upgrades, see_https://github.com/elastic/elasticsearch-migration/;private void createWatcherIndicesOrAliases() throws Exception {_        if (internalCluster().size() > 0) {_            ensureWatcherTemplatesAdded()__            _            String watchIndexName__            String triggeredWatchIndexName__            if (rarely()) {_                watchIndexName = ".watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(watchIndexName)_                        .setCause("Index to test aliases with .watches index")_                        .addAlias(new Alias(Watch.INDEX))_                        .get()__                assertAcked(response)__                logger.info("set alias for .watches index to [{}]", watchIndexName)__            } else {_                watchIndexName = Watch.INDEX__                Settings.Builder builder = Settings.builder()__                if (randomBoolean()) {_                    builder.put("index.number_of_shards", scaledRandomIntBetween(1, 5))__                }_                assertAcked(client().admin().indices().prepareCreate(watchIndexName).setSettings(builder))__            }__            _            if (rarely()) {_                triggeredWatchIndexName = ".triggered_watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(triggeredWatchIndexName)_                        .setCause("Index to test aliases with .triggered-watches index")_                        .addAlias(new Alias(TriggeredWatchStoreField.INDEX_NAME))_                        .get()__                assertAcked(response)__                logger.info("set alias for .triggered-watches index to [{}]", triggeredWatchIndexName)__            } else {_                triggeredWatchIndexName = TriggeredWatchStoreField.INDEX_NAME__                assertAcked(client().admin().indices().prepareCreate(triggeredWatchIndexName))__            }__            String historyIndex = HistoryStoreField.getHistoryIndexNameForTime(DateTime.now(DateTimeZone.UTC))__            assertAcked(client().admin().indices().prepareCreate(historyIndex))__            logger.info("creating watch history index [{}]", historyIndex)__            ensureGreen(historyIndex, watchIndexName, triggeredWatchIndexName)__        }_    };in,order,to,test,that,watches,and,triggered,watches,indices,can,also,point,to,an,alias,we,will,rarely,create,those,after,starting,watcher,the,idea,behind,this,is,the,possible,use,of,the,migration,helper,for,upgrades,see,https,github,com,elastic,elasticsearch,migration;private,void,create,watcher,indices,or,aliases,throws,exception,if,internal,cluster,size,0,ensure,watcher,templates,added,string,watch,index,name,string,triggered,watch,index,name,if,rarely,watch,index,name,watches,alias,index,create,index,response,response,client,admin,indices,prepare,create,watch,index,name,set,cause,index,to,test,aliases,with,watches,index,add,alias,new,alias,watch,index,get,assert,acked,response,logger,info,set,alias,for,watches,index,to,watch,index,name,else,watch,index,name,watch,index,settings,builder,builder,settings,builder,if,random,boolean,builder,put,index,scaled,random,int,between,1,5,assert,acked,client,admin,indices,prepare,create,watch,index,name,set,settings,builder,if,rarely,triggered,watch,index,name,alias,index,create,index,response,response,client,admin,indices,prepare,create,triggered,watch,index,name,set,cause,index,to,test,aliases,with,triggered,watches,index,add,alias,new,alias,triggered,watch,store,field,get,assert,acked,response,logger,info,set,alias,for,triggered,watches,index,to,triggered,watch,index,name,else,triggered,watch,index,name,triggered,watch,store,field,assert,acked,client,admin,indices,prepare,create,triggered,watch,index,name,string,history,index,history,store,field,get,history,index,name,for,time,date,time,now,date,time,zone,utc,assert,acked,client,admin,indices,prepare,create,history,index,logger,info,creating,watch,history,index,history,index,ensure,green,history,index,watch,index,name,triggered,watch,index,name
AbstractWatcherIntegrationTestCase -> private void createWatcherIndicesOrAliases() throws Exception;1544035746;In order to test, that .watches and .triggered-watches indices can also point to an alias, we will rarely create those_after starting watcher__The idea behind this is the possible use of the migration helper for upgrades, see_https://github.com/elastic/elasticsearch-migration/;private void createWatcherIndicesOrAliases() throws Exception {_        if (internalCluster().size() > 0) {_            ensureWatcherTemplatesAdded()__            _            String watchIndexName__            String triggeredWatchIndexName__            if (rarely()) {_                watchIndexName = ".watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(watchIndexName)_                        .setCause("Index to test aliases with .watches index")_                        .addAlias(new Alias(Watch.INDEX))_                        .get()__                assertAcked(response)__                logger.info("set alias for .watches index to [{}]", watchIndexName)__            } else {_                watchIndexName = Watch.INDEX__                Settings.Builder builder = Settings.builder()__                if (randomBoolean()) {_                    builder.put("index.number_of_shards", scaledRandomIntBetween(1, 5))__                }_                assertAcked(client().admin().indices().prepareCreate(watchIndexName).setSettings(builder))__            }__            _            if (rarely()) {_                triggeredWatchIndexName = ".triggered_watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(triggeredWatchIndexName)_                        .setCause("Index to test aliases with .triggered-watches index")_                        .addAlias(new Alias(TriggeredWatchStoreField.INDEX_NAME))_                        .get()__                assertAcked(response)__                logger.info("set alias for .triggered-watches index to [{}]", triggeredWatchIndexName)__            } else {_                triggeredWatchIndexName = TriggeredWatchStoreField.INDEX_NAME__                assertAcked(client().admin().indices().prepareCreate(triggeredWatchIndexName))__            }__            String historyIndex = HistoryStoreField.getHistoryIndexNameForTime(DateTime.now(DateTimeZone.UTC))__            assertAcked(client().admin().indices().prepareCreate(historyIndex))__            logger.info("creating watch history index [{}]", historyIndex)__            ensureGreen(historyIndex, watchIndexName, triggeredWatchIndexName)__        }_    };in,order,to,test,that,watches,and,triggered,watches,indices,can,also,point,to,an,alias,we,will,rarely,create,those,after,starting,watcher,the,idea,behind,this,is,the,possible,use,of,the,migration,helper,for,upgrades,see,https,github,com,elastic,elasticsearch,migration;private,void,create,watcher,indices,or,aliases,throws,exception,if,internal,cluster,size,0,ensure,watcher,templates,added,string,watch,index,name,string,triggered,watch,index,name,if,rarely,watch,index,name,watches,alias,index,create,index,response,response,client,admin,indices,prepare,create,watch,index,name,set,cause,index,to,test,aliases,with,watches,index,add,alias,new,alias,watch,index,get,assert,acked,response,logger,info,set,alias,for,watches,index,to,watch,index,name,else,watch,index,name,watch,index,settings,builder,builder,settings,builder,if,random,boolean,builder,put,index,scaled,random,int,between,1,5,assert,acked,client,admin,indices,prepare,create,watch,index,name,set,settings,builder,if,rarely,triggered,watch,index,name,alias,index,create,index,response,response,client,admin,indices,prepare,create,triggered,watch,index,name,set,cause,index,to,test,aliases,with,triggered,watches,index,add,alias,new,alias,triggered,watch,store,field,get,assert,acked,response,logger,info,set,alias,for,triggered,watches,index,to,triggered,watch,index,name,else,triggered,watch,index,name,triggered,watch,store,field,assert,acked,client,admin,indices,prepare,create,triggered,watch,index,name,string,history,index,history,store,field,get,history,index,name,for,time,date,time,now,date,time,zone,utc,assert,acked,client,admin,indices,prepare,create,history,index,logger,info,creating,watch,history,index,history,index,ensure,green,history,index,watch,index,name,triggered,watch,index,name
AbstractWatcherIntegrationTestCase -> private void createWatcherIndicesOrAliases() throws Exception;1545124299;In order to test, that .watches and .triggered-watches indices can also point to an alias, we will rarely create those_after starting watcher__The idea behind this is the possible use of the migration helper for upgrades, see_https://github.com/elastic/elasticsearch-migration/;private void createWatcherIndicesOrAliases() throws Exception {_        if (internalCluster().size() > 0) {_            ensureWatcherTemplatesAdded()__            _            String watchIndexName__            String triggeredWatchIndexName__            if (rarely()) {_                watchIndexName = ".watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(watchIndexName)_                        .setCause("Index to test aliases with .watches index")_                        .addAlias(new Alias(Watch.INDEX))_                        .get()__                assertAcked(response)__                logger.info("set alias for .watches index to [{}]", watchIndexName)__            } else {_                watchIndexName = Watch.INDEX__                Settings.Builder builder = Settings.builder()__                if (randomBoolean()) {_                    builder.put("index.number_of_shards", scaledRandomIntBetween(1, 5))__                }_                assertAcked(client().admin().indices().prepareCreate(watchIndexName).setSettings(builder))__            }__            _            if (rarely()) {_                triggeredWatchIndexName = ".triggered_watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(triggeredWatchIndexName)_                        .setCause("Index to test aliases with .triggered-watches index")_                        .addAlias(new Alias(TriggeredWatchStoreField.INDEX_NAME))_                        .get()__                assertAcked(response)__                logger.info("set alias for .triggered-watches index to [{}]", triggeredWatchIndexName)__            } else {_                triggeredWatchIndexName = TriggeredWatchStoreField.INDEX_NAME__                assertAcked(client().admin().indices().prepareCreate(triggeredWatchIndexName))__            }__            String historyIndex = HistoryStoreField.getHistoryIndexNameForTime(DateTime.now(DateTimeZone.UTC))__            assertAcked(client().admin().indices().prepareCreate(historyIndex))__            logger.info("creating watch history index [{}]", historyIndex)__            ensureGreen(historyIndex, watchIndexName, triggeredWatchIndexName)__        }_    };in,order,to,test,that,watches,and,triggered,watches,indices,can,also,point,to,an,alias,we,will,rarely,create,those,after,starting,watcher,the,idea,behind,this,is,the,possible,use,of,the,migration,helper,for,upgrades,see,https,github,com,elastic,elasticsearch,migration;private,void,create,watcher,indices,or,aliases,throws,exception,if,internal,cluster,size,0,ensure,watcher,templates,added,string,watch,index,name,string,triggered,watch,index,name,if,rarely,watch,index,name,watches,alias,index,create,index,response,response,client,admin,indices,prepare,create,watch,index,name,set,cause,index,to,test,aliases,with,watches,index,add,alias,new,alias,watch,index,get,assert,acked,response,logger,info,set,alias,for,watches,index,to,watch,index,name,else,watch,index,name,watch,index,settings,builder,builder,settings,builder,if,random,boolean,builder,put,index,scaled,random,int,between,1,5,assert,acked,client,admin,indices,prepare,create,watch,index,name,set,settings,builder,if,rarely,triggered,watch,index,name,alias,index,create,index,response,response,client,admin,indices,prepare,create,triggered,watch,index,name,set,cause,index,to,test,aliases,with,triggered,watches,index,add,alias,new,alias,triggered,watch,store,field,get,assert,acked,response,logger,info,set,alias,for,triggered,watches,index,to,triggered,watch,index,name,else,triggered,watch,index,name,triggered,watch,store,field,assert,acked,client,admin,indices,prepare,create,triggered,watch,index,name,string,history,index,history,store,field,get,history,index,name,for,time,date,time,now,date,time,zone,utc,assert,acked,client,admin,indices,prepare,create,history,index,logger,info,creating,watch,history,index,history,index,ensure,green,history,index,watch,index,name,triggered,watch,index,name
AbstractWatcherIntegrationTestCase -> private void createWatcherIndicesOrAliases() throws Exception;1548263888;In order to test, that .watches and .triggered-watches indices can also point to an alias, we will rarely create those_after starting watcher__The idea behind this is the possible use of the migration helper for upgrades, see_https://github.com/elastic/elasticsearch-migration/;private void createWatcherIndicesOrAliases() throws Exception {_        if (internalCluster().size() > 0) {_            ensureWatcherTemplatesAdded()__            _            String watchIndexName__            String triggeredWatchIndexName__            if (rarely()) {_                watchIndexName = ".watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(watchIndexName)_                        .setCause("Index to test aliases with .watches index")_                        .addAlias(new Alias(Watch.INDEX))_                        .get()__                assertAcked(response)__                logger.info("set alias for .watches index to [{}]", watchIndexName)__            } else {_                watchIndexName = Watch.INDEX__                Settings.Builder builder = Settings.builder()__                if (randomBoolean()) {_                    builder.put("index.number_of_shards", scaledRandomIntBetween(1, 5))__                }_                assertAcked(client().admin().indices().prepareCreate(watchIndexName).setSettings(builder))__            }__            _            if (rarely()) {_                triggeredWatchIndexName = ".triggered_watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(triggeredWatchIndexName)_                        .setCause("Index to test aliases with .triggered-watches index")_                        .addAlias(new Alias(TriggeredWatchStoreField.INDEX_NAME))_                        .get()__                assertAcked(response)__                logger.info("set alias for .triggered-watches index to [{}]", triggeredWatchIndexName)__            } else {_                triggeredWatchIndexName = TriggeredWatchStoreField.INDEX_NAME__                assertAcked(client().admin().indices().prepareCreate(triggeredWatchIndexName))__            }__            String historyIndex = HistoryStoreField.getHistoryIndexNameForTime(DateTime.now(DateTimeZone.UTC))__            assertAcked(client().admin().indices().prepareCreate(historyIndex))__            logger.info("creating watch history index [{}]", historyIndex)__            ensureGreen(historyIndex, watchIndexName, triggeredWatchIndexName)__        }_    };in,order,to,test,that,watches,and,triggered,watches,indices,can,also,point,to,an,alias,we,will,rarely,create,those,after,starting,watcher,the,idea,behind,this,is,the,possible,use,of,the,migration,helper,for,upgrades,see,https,github,com,elastic,elasticsearch,migration;private,void,create,watcher,indices,or,aliases,throws,exception,if,internal,cluster,size,0,ensure,watcher,templates,added,string,watch,index,name,string,triggered,watch,index,name,if,rarely,watch,index,name,watches,alias,index,create,index,response,response,client,admin,indices,prepare,create,watch,index,name,set,cause,index,to,test,aliases,with,watches,index,add,alias,new,alias,watch,index,get,assert,acked,response,logger,info,set,alias,for,watches,index,to,watch,index,name,else,watch,index,name,watch,index,settings,builder,builder,settings,builder,if,random,boolean,builder,put,index,scaled,random,int,between,1,5,assert,acked,client,admin,indices,prepare,create,watch,index,name,set,settings,builder,if,rarely,triggered,watch,index,name,alias,index,create,index,response,response,client,admin,indices,prepare,create,triggered,watch,index,name,set,cause,index,to,test,aliases,with,triggered,watches,index,add,alias,new,alias,triggered,watch,store,field,get,assert,acked,response,logger,info,set,alias,for,triggered,watches,index,to,triggered,watch,index,name,else,triggered,watch,index,name,triggered,watch,store,field,assert,acked,client,admin,indices,prepare,create,triggered,watch,index,name,string,history,index,history,store,field,get,history,index,name,for,time,date,time,now,date,time,zone,utc,assert,acked,client,admin,indices,prepare,create,history,index,logger,info,creating,watch,history,index,history,index,ensure,green,history,index,watch,index,name,triggered,watch,index,name
AbstractWatcherIntegrationTestCase -> private void createWatcherIndicesOrAliases() throws Exception;1549289311;In order to test, that .watches and .triggered-watches indices can also point to an alias, we will rarely create those_after starting watcher__The idea behind this is the possible use of the migration helper for upgrades, see_https://github.com/elastic/elasticsearch-migration/;private void createWatcherIndicesOrAliases() throws Exception {_        if (internalCluster().size() > 0) {_            ensureWatcherTemplatesAdded()__            _            String watchIndexName__            String triggeredWatchIndexName__            if (rarely()) {_                watchIndexName = ".watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(watchIndexName)_                        .setCause("Index to test aliases with .watches index")_                        .addAlias(new Alias(Watch.INDEX))_                        .get()__                assertAcked(response)__                logger.info("set alias for .watches index to [{}]", watchIndexName)__            } else {_                watchIndexName = Watch.INDEX__                Settings.Builder builder = Settings.builder()__                if (randomBoolean()) {_                    builder.put("index.number_of_shards", scaledRandomIntBetween(1, 5))__                }_                assertAcked(client().admin().indices().prepareCreate(watchIndexName).setSettings(builder))__            }__            _            if (rarely()) {_                triggeredWatchIndexName = ".triggered_watches-alias-index"__                CreateIndexResponse response = client().admin().indices().prepareCreate(triggeredWatchIndexName)_                        .setCause("Index to test aliases with .triggered-watches index")_                        .addAlias(new Alias(TriggeredWatchStoreField.INDEX_NAME))_                        .get()__                assertAcked(response)__                logger.info("set alias for .triggered-watches index to [{}]", triggeredWatchIndexName)__            } else {_                triggeredWatchIndexName = TriggeredWatchStoreField.INDEX_NAME__                assertAcked(client().admin().indices().prepareCreate(triggeredWatchIndexName))__            }__            String historyIndex = HistoryStoreField.getHistoryIndexNameForTime(ZonedDateTime.now(ZoneOffset.UTC))__            assertAcked(client().admin().indices().prepareCreate(historyIndex))__            logger.info("creating watch history index [{}]", historyIndex)__            ensureGreen(historyIndex, watchIndexName, triggeredWatchIndexName)__        }_    };in,order,to,test,that,watches,and,triggered,watches,indices,can,also,point,to,an,alias,we,will,rarely,create,those,after,starting,watcher,the,idea,behind,this,is,the,possible,use,of,the,migration,helper,for,upgrades,see,https,github,com,elastic,elasticsearch,migration;private,void,create,watcher,indices,or,aliases,throws,exception,if,internal,cluster,size,0,ensure,watcher,templates,added,string,watch,index,name,string,triggered,watch,index,name,if,rarely,watch,index,name,watches,alias,index,create,index,response,response,client,admin,indices,prepare,create,watch,index,name,set,cause,index,to,test,aliases,with,watches,index,add,alias,new,alias,watch,index,get,assert,acked,response,logger,info,set,alias,for,watches,index,to,watch,index,name,else,watch,index,name,watch,index,settings,builder,builder,settings,builder,if,random,boolean,builder,put,index,scaled,random,int,between,1,5,assert,acked,client,admin,indices,prepare,create,watch,index,name,set,settings,builder,if,rarely,triggered,watch,index,name,alias,index,create,index,response,response,client,admin,indices,prepare,create,triggered,watch,index,name,set,cause,index,to,test,aliases,with,triggered,watches,index,add,alias,new,alias,triggered,watch,store,field,get,assert,acked,response,logger,info,set,alias,for,triggered,watches,index,to,triggered,watch,index,name,else,triggered,watch,index,name,triggered,watch,store,field,assert,acked,client,admin,indices,prepare,create,triggered,watch,index,name,string,history,index,history,store,field,get,history,index,name,for,time,zoned,date,time,now,zone,offset,utc,assert,acked,client,admin,indices,prepare,create,history,index,logger,info,creating,watch,history,index,history,index,ensure,green,history,index,watch,index,name,triggered,watch,index,name
