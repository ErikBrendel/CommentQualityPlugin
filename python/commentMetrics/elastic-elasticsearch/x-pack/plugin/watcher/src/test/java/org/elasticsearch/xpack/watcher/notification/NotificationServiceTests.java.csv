commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testSingleAccount() {     String accountName = randomAlphaOfLength(10).     Settings settings = Settings.builder().put("xpack.notification.test.account." + accountName, "bar").build().     TestNotificationService service = new TestNotificationService(settings).     assertThat(service.getAccount(accountName), is(accountName)).     // single account, this will also be the default     assertThat(service.getAccount("non-existing"), is(accountName)).     assertThat(service.getAccount(null), is(accountName)). }
false;public;0;13;;public void testMultipleAccountsWithExistingDefault() {     String accountName = randomAlphaOfLength(10).     Settings settings = Settings.builder().put("xpack.notification.test.account." + accountName, "bar").put("xpack.notification.test.account.second", "bar").put("xpack.notification.test.default_account", accountName).build().     TestNotificationService service = new TestNotificationService(settings).     assertThat(service.getAccount(accountName), is(accountName)).     assertThat(service.getAccount("second"), is("second")).     assertThat(service.getAccount("non-existing"), is(accountName)). }
false;public;0;11;;public void testMultipleAccountsWithNoDefault() {     String accountName = randomAlphaOfLength(10).     Settings settings = Settings.builder().put("xpack.notification.test.account." + accountName, "bar").put("xpack.notification.test.account.second", "bar").put("xpack.notification.test.account.third", "bar").build().     TestNotificationService service = new TestNotificationService(settings).     assertThat(service.getAccount(null), anyOf(is(accountName), is("second"), is("third"))). }
false;public;0;11;;public void testMultipleAccountsUnknownDefault() {     String accountName = randomAlphaOfLength(10).     Settings settings = Settings.builder().put("xpack.notification.test.account." + accountName, "bar").put("xpack.notification.test.account.second", "bar").put("xpack.notification.test.default_account", "non-existing").build().     SettingsException e = expectThrows(SettingsException.class, () -> new TestNotificationService(settings)).     assertThat(e.getMessage(), is("could not find default account [non-existing]")). }
false;public;0;7;;public void testNoSpecifiedDefaultAccount() {     String accountName = randomAlphaOfLength(10).     Settings settings = Settings.builder().put("xpack.notification.test.account." + accountName, "bar").build().     TestNotificationService service = new TestNotificationService(settings).     assertThat(service.getAccount(null), is(accountName)). }
false;public;0;6;;public void testAccountDoesNotExist() throws Exception {     TestNotificationService service = new TestNotificationService(Settings.EMPTY).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> service.getAccount(null)).     assertThat(e.getMessage(), is("no accounts of type [test] configured. Please set up an account using the [xpack.notification.test] settings")). }
false;public;0;17;;public void testAccountWithSecureSettings() throws Exception {     final Setting<SecureString> secureSetting1 = SecureSetting.secureString("xpack.notification.test.account.secure_only", null).     final Setting<SecureString> secureSetting2 = SecureSetting.secureString("xpack.notification.test.account.mixed.secure", null).     final Map<String, char[]> secureSettingsMap = new HashMap<>().     secureSettingsMap.put(secureSetting1.getKey(), "secure_only".toCharArray()).     secureSettingsMap.put(secureSetting2.getKey(), "mixed_secure".toCharArray()).     Settings settings = Settings.builder().put("xpack.notification.test.account.unsecure_only", "bar").put("xpack.notification.test.account.mixed.unsecure", "mixed_unsecure").setSecureSettings(secureSettingsFromMap(secureSettingsMap)).build().     TestNotificationService service = new TestNotificationService(settings, Arrays.asList(secureSetting1, secureSetting2)).     assertThat(service.getAccount("secure_only"), is("secure_only")).     assertThat(service.getAccount("unsecure_only"), is("unsecure_only")).     assertThat(service.getAccount("mixed"), is("mixed")).     assertThat(service.getAccount(null), anyOf(is("secure_only"), is("unsecure_only"), is("mixed"))). }
false;public;0;19;;public void testAccountCreationCached() {     String accountName = randomAlphaOfLength(10).     Settings settings = Settings.builder().put("xpack.notification.test.account." + accountName, "bar").build().     final AtomicInteger validationInvocationCount = new AtomicInteger(0).     TestNotificationService service = new TestNotificationService(settings, (String name, Settings accountSettings) -> {         validationInvocationCount.incrementAndGet().     }).     assertThat(validationInvocationCount.get(), is(0)).     assertThat(service.getAccount(accountName), is(accountName)).     assertThat(validationInvocationCount.get(), is(1)).     if (randomBoolean()) {         assertThat(service.getAccount(accountName), is(accountName)).     } else {         assertThat(service.getAccount(null), is(accountName)).     }     // counter is still 1 because the account is cached     assertThat(validationInvocationCount.get(), is(1)). }
false;public;0;46;;public void testAccountUpdateSettings() throws Exception {     final Setting<SecureString> secureSetting = SecureSetting.secureString("xpack.notification.test.account.x.secure", null).     final Setting<String> setting = Setting.simpleString("xpack.notification.test.account.x.dynamic", Setting.Property.Dynamic, Setting.Property.NodeScope).     final AtomicReference<String> secureSettingValue = new AtomicReference<String>(randomAlphaOfLength(4)).     final AtomicReference<String> settingValue = new AtomicReference<String>(randomAlphaOfLength(4)).     final Map<String, char[]> secureSettingsMap = new HashMap<>().     final AtomicInteger validationInvocationCount = new AtomicInteger(0).     secureSettingsMap.put(secureSetting.getKey(), secureSettingValue.get().toCharArray()).     final Settings.Builder settingsBuilder = Settings.builder().put(setting.getKey(), settingValue.get()).setSecureSettings(secureSettingsFromMap(secureSettingsMap)).     final TestNotificationService service = new TestNotificationService(settingsBuilder.build(), Arrays.asList(secureSetting), (String name, Settings accountSettings) -> {         assertThat(accountSettings.get("dynamic"), is(settingValue.get())).         assertThat(SecureSetting.secureString("secure", null).get(accountSettings), is(secureSettingValue.get())).         validationInvocationCount.incrementAndGet().     }).     assertThat(validationInvocationCount.get(), is(0)).     service.getAccount(null).     assertThat(validationInvocationCount.get(), is(1)).     // update secure setting only     updateSecureSetting(secureSettingValue, secureSetting, secureSettingsMap, settingsBuilder, service).     assertThat(validationInvocationCount.get(), is(1)).     service.getAccount(null).     assertThat(validationInvocationCount.get(), is(2)).     updateDynamicClusterSetting(settingValue, setting, settingsBuilder, service).     assertThat(validationInvocationCount.get(), is(2)).     service.getAccount(null).     assertThat(validationInvocationCount.get(), is(3)).     // update both     if (randomBoolean()) {         // update secure first         updateSecureSetting(secureSettingValue, secureSetting, secureSettingsMap, settingsBuilder, service).         // update cluster second         updateDynamicClusterSetting(settingValue, setting, settingsBuilder, service).     } else {         // update cluster first         updateDynamicClusterSetting(settingValue, setting, settingsBuilder, service).         // update secure second         updateSecureSetting(secureSettingValue, secureSetting, secureSettingsMap, settingsBuilder, service).     }     assertThat(validationInvocationCount.get(), is(3)).     service.getAccount(null).     assertThat(validationInvocationCount.get(), is(4)). }
false;private,static;4;6;;private static void updateDynamicClusterSetting(AtomicReference<String> settingValue, Setting<String> setting, Settings.Builder settingsBuilder, TestNotificationService service) {     settingValue.set(randomAlphaOfLength(4)).     settingsBuilder.put(setting.getKey(), settingValue.get()).     service.clusterSettingsConsumer(settingsBuilder.build()). }
false;private,static;5;6;;private static void updateSecureSetting(AtomicReference<String> secureSettingValue, Setting<SecureString> secureSetting, Map<String, char[]> secureSettingsMap, Settings.Builder settingsBuilder, TestNotificationService service) {     secureSettingValue.set(randomAlphaOfLength(4)).     secureSettingsMap.put(secureSetting.getKey(), secureSettingValue.get().toCharArray()).     service.reload(settingsBuilder.build()). }
false;protected;2;5;;@Override protected String createAccount(String name, Settings accountSettings) {     validator.accept(name, accountSettings).     return name. }
false;public;0;4;;@Override public boolean isLoaded() {     return true. }
false;public;1;4;;@Override public SecureString getString(String setting) throws GeneralSecurityException {     return new SecureString(secureSettingsMap.get(setting)). }
false;public;0;4;;@Override public Set<String> getSettingNames() {     return secureSettingsMap.keySet(). }
false;public;1;4;;@Override public InputStream getFile(String setting) throws GeneralSecurityException {     return null. }
false;public;0;3;;@Override public void close() throws IOException { }
false;private,static;1;28;;private static SecureSettings secureSettingsFromMap(Map<String, char[]> secureSettingsMap) {     return new SecureSettings() {          @Override         public boolean isLoaded() {             return true.         }          @Override         public SecureString getString(String setting) throws GeneralSecurityException {             return new SecureString(secureSettingsMap.get(setting)).         }          @Override         public Set<String> getSettingNames() {             return secureSettingsMap.keySet().         }          @Override         public InputStream getFile(String setting) throws GeneralSecurityException {             return null.         }          @Override         public void close() throws IOException {         }     }. }
