commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testFromXContentWithTemplateDefaultLang() throws IOException {     String source = "{\"template\":{\"id\":\"default-script\", \"params\":{\"foo\":\"bar\"}}}".     assertTemplate(source, "default-script", null, singletonMap("foo", "bar")). }
false;public;0;4;;public void testFromXContentWithTemplateCustomLang() throws IOException {     String source = "{\"template\":{\"source\":\"custom-script\", \"lang\":\"painful\",\"params\":{\"bar\":\"baz\"}}}".     assertTemplate(source, "custom-script", "painful", singletonMap("bar", "baz")). }
false;public;0;3;;public void testDefaultHitCountsDefaults() throws IOException {     assertHitCount("{}", true). }
false;public;0;5;;public void testDefaultHitCountsConfigured() throws IOException {     boolean hitCountsAsInt = randomBoolean().     String source = "{ \"rest_total_hits_as_int\" : " + hitCountsAsInt + " }".     assertHitCount(source, hitCountsAsInt). }
false;public;0;8;;public void testDeprecationForSingleType() throws IOException {     String source = "{\"types\":\"mytype\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         parser.nextToken().         WatcherSearchTemplateRequest.fromXContent(parser, SearchType.QUERY_THEN_FETCH).     }     assertWarnings(WatcherSearchTemplateRequest.TYPES_DEPRECATION_MESSAGE). }
false;public;0;8;;public void testDeprecationForMultiType() throws IOException {     String source = "{\"types\":[\"mytype1\",\"mytype2\"]}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         parser.nextToken().         WatcherSearchTemplateRequest.fromXContent(parser, SearchType.QUERY_THEN_FETCH).     }     assertWarnings(WatcherSearchTemplateRequest.TYPES_DEPRECATION_MESSAGE). }
false;private;2;7;;private void assertHitCount(String source, boolean expectedHitCountAsInt) throws IOException {     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         parser.nextToken().         WatcherSearchTemplateRequest request = WatcherSearchTemplateRequest.fromXContent(parser, SearchType.QUERY_THEN_FETCH).         assertThat(request.isRestTotalHitsAsint(), is(expectedHitCountAsInt)).     } }
false;private;4;11;;private void assertTemplate(String source, String expectedScript, String expectedLang, Map<String, Object> expectedParams) throws IOException {     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         parser.nextToken().         WatcherSearchTemplateRequest result = WatcherSearchTemplateRequest.fromXContent(parser, randomFrom(SearchType.values())).         assertNotNull(result.getTemplate()).         assertThat(result.getTemplate().getIdOrCode(), equalTo(expectedScript)).         assertThat(result.getTemplate().getLang(), equalTo(expectedLang)).         assertThat(result.getTemplate().getParams(), equalTo(expectedParams)).     } }
