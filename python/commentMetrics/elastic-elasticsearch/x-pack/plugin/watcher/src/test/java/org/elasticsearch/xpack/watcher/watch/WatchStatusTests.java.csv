commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testAckStatusIsResetOnUnmetCondition() {     HashMap<String, ActionStatus> myMap = new HashMap<>().     ActionStatus actionStatus = new ActionStatus(ZonedDateTime.now(ZoneOffset.UTC)).     myMap.put("foo", actionStatus).     actionStatus.update(ZonedDateTime.now(ZoneOffset.UTC), new LoggingAction.Result.Success("foo")).     actionStatus.onAck(ZonedDateTime.now(ZoneOffset.UTC)).     assertThat(actionStatus.ackStatus().state(), is(State.ACKED)).     WatchStatus status = new WatchStatus(ZonedDateTime.now(ZoneOffset.UTC), myMap).     status.onCheck(false, ZonedDateTime.now(ZoneOffset.UTC)).     assertThat(status.actionStatus("foo").ackStatus().state(), is(State.AWAITS_SUCCESSFUL_EXECUTION)). }
false;public;0;29;;public void testHeadersToXContent() throws Exception {     WatchStatus status = new WatchStatus(ZonedDateTime.now(ZoneOffset.UTC), Collections.emptyMap()).     String key = randomAlphaOfLength(10).     String value = randomAlphaOfLength(10).     Map<String, String> headers = Collections.singletonMap(key, value).     status.setHeaders(headers).     // by default headers are hidden     try (XContentBuilder builder = jsonBuilder()) {         status.toXContent(builder, ToXContent.EMPTY_PARAMS).         try (XContentParser parser = createParser(builder)) {             Map<String, Object> fields = parser.map().             assertThat(fields, not(hasKey(WatchStatus.Field.HEADERS.getPreferredName()))).         }     }     // but they are required when storing a watch     try (XContentBuilder builder = jsonBuilder()) {         status.toXContent(builder, WatcherParams.builder().hideHeaders(false).build()).         try (XContentParser parser = createParser(builder)) {             parser.nextToken().             Map<String, Object> fields = parser.map().             assertThat(fields, hasKey(WatchStatus.Field.HEADERS.getPreferredName())).             assertThat(fields.get(WatchStatus.Field.HEADERS.getPreferredName()), instanceOf(Map.class)).             Map<String, Object> extractedHeaders = (Map<String, Object>) fields.get(WatchStatus.Field.HEADERS.getPreferredName()).             assertThat(extractedHeaders, is(headers)).         }     } }
false;public;0;20;;public void testHeadersSerialization() throws IOException {     WatchStatus status = new WatchStatus(ZonedDateTime.now(ZoneOffset.UTC), Collections.emptyMap()).     String key = randomAlphaOfLength(10).     String value = randomAlphaOfLength(10).     Map<String, String> headers = Collections.singletonMap(key, value).     status.setHeaders(headers).     BytesStreamOutput out = new BytesStreamOutput().     status.writeTo(out).     BytesReference bytesReference = out.bytes().     WatchStatus readStatus = new WatchStatus(bytesReference.streamInput()).     assertThat(readStatus, is(status)).     assertThat(readStatus.getHeaders(), is(headers)).     // test equals     assertThat(readStatus.hashCode(), is(status.hashCode())).     assertThat(readStatus, equalTo(status)).     readStatus.getHeaders().clear().     assertThat(readStatus, not(equalTo(status))). }
