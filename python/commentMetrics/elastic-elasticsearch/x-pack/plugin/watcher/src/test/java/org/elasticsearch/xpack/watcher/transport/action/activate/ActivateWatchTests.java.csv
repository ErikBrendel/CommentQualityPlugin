commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean timeWarped() {     return false. }
false;public;0;65;;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/30699") public void testDeactivateAndActivate() throws Exception {     PutWatchResponse putWatchResponse = watcherClient().preparePutWatch().setId("_id").setSource(watchBuilder().trigger(schedule(interval("1s"))).input(simpleInput("foo", "bar")).addAction("_a1", indexAction("actions", "action1")).defaultThrottlePeriod(new TimeValue(0, TimeUnit.SECONDS))).get().     assertThat(putWatchResponse.isCreated(), is(true)).     GetWatchResponse getWatchResponse = watcherClient().prepareGetWatch("_id").get().     assertThat(getWatchResponse, notNullValue()).     assertThat(getWatchResponse.getStatus().state().isActive(), is(true)).     logger.info("Waiting for watch to be executed at least once").     assertWatchWithMinimumActionsCount("_id", ExecutionState.EXECUTED, 1).     // we now know the watch is executing... lets deactivate it     ActivateWatchResponse activateWatchResponse = watcherClient().prepareActivateWatch("_id", false).get().     assertThat(activateWatchResponse, notNullValue()).     assertThat(activateWatchResponse.getStatus().state().isActive(), is(false)).     getWatchResponse = watcherClient().prepareGetWatch("_id").get().     assertThat(getWatchResponse, notNullValue()).     assertThat(getWatchResponse.getStatus().state().isActive(), is(false)).     // wait until no watch is executing     assertBusy(() -> {         WatcherStatsResponse statsResponse = watcherClient().prepareWatcherStats().setIncludeCurrentWatches(true).get().         int sum = statsResponse.getNodes().stream().map(WatcherStatsResponse.Node::getSnapshots).mapToInt(List::size).sum().         assertThat(sum, is(0)).     }).     logger.info("Ensured no more watches are being executed").     refresh().     long count1 = docCount(".watcher-history*", "doc", matchAllQuery()).     logger.info("Sleeping for 5 seconds, watch history count [{}]", count1).     Thread.sleep(5000).     refresh().     long count2 = docCount(".watcher-history*", "doc", matchAllQuery()).     assertThat(count2, is(count1)).     // lets activate it again     logger.info("Activating watch again").     activateWatchResponse = watcherClient().prepareActivateWatch("_id", true).get().     assertThat(activateWatchResponse, notNullValue()).     assertThat(activateWatchResponse.getStatus().state().isActive(), is(true)).     getWatchResponse = watcherClient().prepareGetWatch("_id").get().     assertThat(getWatchResponse, notNullValue()).     assertThat(getWatchResponse.getStatus().state().isActive(), is(true)).     logger.info("Sleeping for another five seconds, ensuring that watch is executed").     Thread.sleep(5000).     refresh().     long count3 = docCount(".watcher-history*", "doc", matchAllQuery()).     assertThat(count3, greaterThan(count1)). }
false;public;0;52;;public void testLoadWatchWithoutAState() throws Exception {     WatcherClient watcherClient = watcherClient().     PutWatchResponse putWatchResponse = watcherClient.preparePutWatch().setId("_id").setSource(watchBuilder().trigger(// some time in 2050     schedule(cron("0 0 0 1 1 ? 2050"))).input(simpleInput("foo", "bar")).addAction("_a1", indexAction("actions", "action1")).defaultThrottlePeriod(new TimeValue(0, TimeUnit.SECONDS))).get().     assertThat(putWatchResponse.isCreated(), is(true)).     GetWatchResponse getWatchResponse = watcherClient.prepareGetWatch("_id").get().     assertThat(getWatchResponse, notNullValue()).     assertThat(getWatchResponse.getStatus().state().isActive(), is(true)).     GetResponse getResponse = client().prepareGet(".watches", "doc", "_id").get().     XContentSource source = new XContentSource(getResponse.getSourceAsBytesRef(), XContentType.JSON).     Set<String> filters = Sets.newHashSet("trigger.**", "input.**", "condition.**", "throttle_period.**", "transform.**", "actions.**", "metadata.**", "status.version", "status.last_checked", "status.last_met_condition", "status.actions.**").     XContentBuilder builder = new XContentBuilder(XContentType.JSON.xContent(), new BytesStreamOutput(), filters).     source.toXContent(builder, ToXContent.EMPTY_PARAMS).     // now that we filtered out the watch status state, lets put it back in     IndexResponse indexResponse = client().prepareIndex(".watches", "doc", "_id").setSource(BytesReference.bytes(builder), XContentType.JSON).get().     assertThat(indexResponse.getId(), is("_id")).     // now, let's restart     stopWatcher().     startWatcher().     getWatchResponse = watcherClient.prepareGetWatch("_id").get().     assertThat(getWatchResponse, notNullValue()).     assertThat(getWatchResponse.getStatus().state(), notNullValue()).     assertThat(getWatchResponse.getStatus().state().isActive(), is(true)). }
