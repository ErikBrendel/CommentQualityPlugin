commented;modifiers;parameterAmount;loc;comment;code
false;public;0;56;;public void testToXContent() throws Exception {     final JiraIssue issue = randomJiraIssue().     try (XContentBuilder builder = randomFrom(jsonBuilder(), smileBuilder(), yamlBuilder(), cborBuilder())) {         issue.toXContent(builder, WatcherParams.builder().hideSecrets(false).build()).         Map<String, Object> parsedFields = null.         Map<String, Object> parsedResult = null.         HttpRequest parsedRequest = null.         HttpResponse parsedResponse = null.         String parsedAccount = null.         String parsedReason = null.         try (XContentParser parser = createParser(builder)) {             assertNull(parser.currentToken()).             parser.nextToken().             XContentParser.Token token = parser.currentToken().             assertThat(token, is(XContentParser.Token.START_OBJECT)).             String currentFieldName = null.             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                 if (token == XContentParser.Token.FIELD_NAME) {                     currentFieldName = parser.currentName().                 } else if ("account".equals(currentFieldName)) {                     parsedAccount = parser.text().                 } else if ("result".equals(currentFieldName)) {                     parsedResult = parser.map().                 } else if ("request".equals(currentFieldName)) {                     parsedRequest = HttpRequest.Parser.parse(parser).                 } else if ("response".equals(currentFieldName)) {                     parsedResponse = HttpResponse.parse(parser).                 } else if ("fields".equals(currentFieldName)) {                     parsedFields = parser.map().                 } else if ("reason".equals(currentFieldName)) {                     parsedReason = parser.text().                 } else {                     fail("unknown field [" + currentFieldName + "]").                 }             }         }         assertThat(parsedAccount, equalTo(issue.getAccount())).         assertThat(parsedFields, equalTo(issue.getFields())).         if (issue.successful()) {             assertThat(parsedResult, hasEntry("key", "TEST")).             assertNull(parsedRequest).             assertNull(parsedResponse).         } else {             assertThat(parsedRequest, equalTo(issue.getRequest())).             assertThat(parsedResponse, equalTo(issue.getResponse())).             assertThat(parsedReason, equalTo(resolveFailureReason(issue.getResponse()))).         }     } }
false;public;0;16;;public void testEquals() {     final JiraIssue issue1 = randomJiraIssue().     final boolean equals = randomBoolean().     final Map<String, Object> fields = new HashMap<>(issue1.getFields()).     if (equals == false) {         if (fields.isEmpty()) {             fields.put(randomAlphaOfLength(5), randomAlphaOfLength(10)).         } else {             fields.remove(randomFrom(fields.keySet())).         }     }     JiraIssue issue2 = new JiraIssue(issue1.getAccount(), fields, issue1.getRequest(), issue1.getResponse(), issue1.getFailureReason()).     assertThat(issue1.equals(issue2), is(equals)). }
false;private,static;0;14;;private static JiraIssue randomJiraIssue() {     String account = "account_" + randomIntBetween(0, 100).     Map<String, Object> fields = randomIssueDefaults().     HttpRequest request = HttpRequest.builder(randomFrom("localhost", "internal-jira.elastic.co"), randomFrom(80, 443)).method(HttpMethod.POST).path(JiraAccount.DEFAULT_PATH).auth(new BasicAuth(randomAlphaOfLength(5), randomAlphaOfLength(5).toCharArray())).build().     if (rarely()) {         Tuple<Integer, String> error = randomHttpError().         return JiraIssue.responded(account, fields, request, new HttpResponse(error.v1(), "{\"error\": \"" + error.v2() + "\"}")).     }     return JiraIssue.responded(account, fields, request, new HttpResponse(HttpStatus.SC_CREATED, "{\"key\": \"TEST\"}")). }
