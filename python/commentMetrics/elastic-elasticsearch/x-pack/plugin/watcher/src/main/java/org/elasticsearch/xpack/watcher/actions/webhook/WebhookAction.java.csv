commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;0;3;;public HttpRequestTemplate getRequest() {     return requestTemplate. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     WebhookAction action = (WebhookAction) o.     return requestTemplate.equals(action.requestTemplate). }
false;public;0;4;;@Override public int hashCode() {     return requestTemplate.hashCode(). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return requestTemplate.toXContent(builder, params). }
false;public,static;3;9;;public static WebhookAction parse(String watchId, String actionId, XContentParser parser) throws IOException {     try {         HttpRequestTemplate request = HttpRequestTemplate.Parser.parse(parser).         return new WebhookAction(request).     } catch (ElasticsearchParseException pe) {         throw new ElasticsearchParseException("could not parse [{}] action [{}/{}]. failed parsing http request template", pe, TYPE, watchId, actionId).     } }
false;public,static;1;3;;public static Builder builder(HttpRequestTemplate requestTemplate) {     return new Builder(requestTemplate). }
false;public;0;3;;public HttpResponse response() {     return response. }
false;public;0;3;;public HttpRequest request() {     return request. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject(type).field(Field.REQUEST.getPreferredName(), request, params).field(Field.RESPONSE.getPreferredName(), response, params).endObject(). }
false;public;0;3;;public HttpResponse response() {     return response. }
false;public;0;3;;public HttpRequest request() {     return request. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     super.toXContent(builder, params).     return builder.startObject(type).field(Field.REQUEST.getPreferredName(), request, params).field(Field.RESPONSE.getPreferredName(), response, params).endObject(). }
false;public;0;3;;public HttpRequest request() {     return request. }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject(type).field(Field.REQUEST.getPreferredName(), request, params).endObject(). }
false;public;0;4;;@Override public WebhookAction build() {     return new WebhookAction(requestTemplate). }
