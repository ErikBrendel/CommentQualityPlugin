commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;0;3;;public String getAccount() {     return account. }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     JiraAction that = (JiraAction) o.     return Objects.equals(account, that.account) && Objects.equals(fields, that.fields) && Objects.equals(proxy, that.proxy). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(account, fields, proxy). }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (account != null) {         builder.field(Field.ACCOUNT.getPreferredName(), account).     }     if (proxy != null) {         proxy.toXContent(builder, params).     }     builder.field(Field.FIELDS.getPreferredName(), fields).     return builder.endObject(). }
false;public,static;3;36;;public static JiraAction parse(String watchId, String actionId, XContentParser parser) throws IOException {     String account = null.     HttpProxy proxy = null.     Map<String, Object> fields = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Field.ACCOUNT.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.VALUE_STRING) {                 account = parser.text().             } else {                 throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. expected [{}] to be of type string, but " + "found [{}] instead", TYPE, watchId, actionId, Field.ACCOUNT.getPreferredName(), token).             }         } else if (Field.PROXY.match(currentFieldName, parser.getDeprecationHandler())) {             proxy = HttpProxy.parse(parser).         } else if (Field.FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 fields = parser.map().             } catch (Exception e) {                 throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. failed to parse [{}] field", e, TYPE, watchId, actionId, Field.FIELDS.getPreferredName()).             }         } else {             throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. unexpected token [{}/{}]", TYPE, watchId, actionId, token, currentFieldName).         }     }     if (fields == null) {         fields = Collections.emptyMap().     }     return new JiraAction(account, fields, proxy). }
false;public;0;3;;public JiraIssue getResult() {     return result. }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.field(type, result, params). }
false;public;0;3;;public Map<String, Object> getFields() {     return fields. }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject(type).field(Field.FIELDS.getPreferredName(), fields).endObject(). }
false;public;0;4;;@Override public JiraAction build() {     return action. }
false;public,static;2;3;;public static Builder builder(String account, Map<String, Object> fields) {     return new Builder(new JiraAction(account, fields, null)). }
