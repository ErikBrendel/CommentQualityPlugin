commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;2;9;;@Override public long nextScheduledTimeAfter(long startTime, long time) {     assert time >= startTime.     if (startTime == time) {         time++.     }     long delta = time - startTime.     return startTime + (delta / interval.millis + 1) * interval.millis. }
false;public;0;3;;public Interval interval() {     return interval. }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return interval.toXContent(builder, params). }
false;public;0;4;;@Override public String toString() {     return interval.toString(). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     IntervalSchedule schedule = (IntervalSchedule) o.     if (!interval.equals(schedule.interval))         return false.     return true. }
false;public;0;4;;@Override public int hashCode() {     return interval.hashCode(). }
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;1;17;;@Override public IntervalSchedule parse(XContentParser parser) throws IOException {     XContentParser.Token token = parser.currentToken().     try {         if (token == XContentParser.Token.VALUE_NUMBER) {             return new IntervalSchedule(Interval.seconds(parser.longValue())).         }         if (token == XContentParser.Token.VALUE_STRING) {             String value = parser.text().             return new IntervalSchedule(Interval.parse(value)).         }     } catch (Exception e) {         throw new ElasticsearchParseException("could not parse schedule: {}", e, e.getMessage()).     }     throw new ElasticsearchParseException("could not parse [{}] schedule. expected either a numeric value " + "(millis) or a string value representing time value (e.g. '5s'), but found [{}]", TYPE, token). }
false;public;1;3;;public long millis(long duration) {     return duration * millis. }
false;public;1;10;;public long parse(String value) {     assert value.endsWith(suffix).     String num = value.substring(0, value.indexOf(suffix)).     try {         return Long.parseLong(num).     } catch (NumberFormatException nfe) {         throw new ElasticsearchParseException("could not parse [{}] schedule. could not parse [{}] as a [{}] duration", TYPE, num, name().toLowerCase(Locale.ROOT)).     } }
false;public;1;3;;public String format(long duration) {     return duration + suffix. }
false;public;0;3;;public long seconds() {     return unit.millis(duration) / Unit.SECONDS.millis. }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.value(unit.format(duration)). }
false;public;0;4;;@Override public String toString() {     return unit.format(duration). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Interval interval = (Interval) o.     if (unit.millis(duration) != interval.unit.millis(interval.duration))         return false.     return true. }
false;public;0;6;;@Override public int hashCode() {     long millis = unit.millis(duration).     int result = (int) (millis ^ (millis >>> 32)).     return result. }
false;public,static;1;3;;public static Interval seconds(long duration) {     return new Interval(duration, Unit.SECONDS). }
false;public,static;1;8;;public static Interval parse(String value) {     for (Unit unit : Unit.values()) {         if (value.endsWith(unit.suffix)) {             return new Interval(unit.parse(value), unit).         }     }     throw illegalArgument("could not parse [{}] schedule. unrecognized interval format [{}]", TYPE, value). }
