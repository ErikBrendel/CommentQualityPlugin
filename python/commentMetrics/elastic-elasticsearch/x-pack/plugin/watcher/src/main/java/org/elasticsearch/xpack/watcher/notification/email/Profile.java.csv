commented;modifiers;parameterAmount;loc;comment;code
false;public;1;38;;@Override public String textBody(MimeMessage msg) throws IOException, MessagingException {     MimeMultipart mixed = (MimeMultipart) msg.getContent().     MimeMultipart related = null.     for (int i = 0. i < mixed.getCount(). i++) {         MimeBodyPart part = (MimeBodyPart) mixed.getBodyPart(i).         if (part.getContentType().startsWith("multipart/related")) {             related = (MimeMultipart) part.getContent().             break.         }     }     if (related == null) {         throw new IllegalStateException("could not extract body text from mime message using [standard] profile. could not find " + "part content type with [multipart/related]").     }     MimeMultipart alternative = null.     for (int i = 0. i < related.getCount(). i++) {         MimeBodyPart part = (MimeBodyPart) related.getBodyPart(i).         if (part.getContentType().startsWith("multipart/alternative")) {             alternative = (MimeMultipart) part.getContent().             break.         }     }     if (alternative == null) {         throw new IllegalStateException("could not extract body text from mime message using [standard] profile. could not find " + "part content type with [multipart/alternative]").     }     for (int i = 0. i < alternative.getCount(). i++) {         MimeBodyPart part = (MimeBodyPart) alternative.getBodyPart(i).         if (part.getContentType().startsWith("text/plain")) {             return (String) part.getContent().         }     }     throw new IllegalStateException("could not extract body text from mime message using [standard] profile"). }
false;public;2;39;;@Override public MimeMessage toMimeMessage(Email email, Session session) throws MessagingException {     MimeMessage message = createCommon(email, session).     MimeMultipart mixed = new MimeMultipart("mixed").     message.setContent(mixed).     MimeMultipart related = new MimeMultipart("related").     mixed.addBodyPart(wrap(related, null)).     MimeMultipart alternative = new MimeMultipart("alternative").     related.addBodyPart(wrap(alternative, "text/alternative")).     MimeBodyPart text = new MimeBodyPart().     if (email.textBody != null) {         text.setText(email.textBody, StandardCharsets.UTF_8.name()).     } else {         text.setText("", StandardCharsets.UTF_8.name()).     }     alternative.addBodyPart(text).     if (email.htmlBody != null) {         MimeBodyPart html = new MimeBodyPart().         html.setText(email.htmlBody, StandardCharsets.UTF_8.name(), "html").         alternative.addBodyPart(html).     }     if (!email.attachments.isEmpty()) {         for (Attachment attachment : email.attachments.values()) {             if (attachment.isInline()) {                 related.addBodyPart(attachment.bodyPart()).             } else {                 mixed.addBodyPart(attachment.bodyPart()).             }         }     }     return message. }
false;public;1;4;;@Override public String textBody(MimeMessage msg) throws IOException, MessagingException {     return STANDARD.textBody(msg). }
false;public;2;4;;@Override public MimeMessage toMimeMessage(Email email, Session session) throws MessagingException {     return STANDARD.toMimeMessage(email, session). }
false;public;1;4;;@Override public String textBody(MimeMessage msg) throws IOException, MessagingException {     return STANDARD.textBody(msg). }
false;public;2;4;;@Override public MimeMessage toMimeMessage(Email email, Session session) throws MessagingException {     return STANDARD.toMimeMessage(email, session). }
false;public;1;4;;@Override public String textBody(MimeMessage msg) throws IOException, MessagingException {     return STANDARD.textBody(msg). }
false;public;2;4;;@Override public MimeMessage toMimeMessage(Email email, Session session) throws MessagingException {     return STANDARD.toMimeMessage(email, session). }
false;public,abstract;2;1;;public abstract MimeMessage toMimeMessage(Email email, Session session) throws MessagingException.
false;public,abstract;1;1;;public abstract String textBody(MimeMessage msg) throws IOException, MessagingException.
false;public,static;1;7;;public static Profile resolve(String name) {     Profile profile = resolve(name, null).     if (profile == null) {         throw new IllegalArgumentException("[" + name + "] is an unknown email profile").     }     return profile. }
false;public,static;2;14;;public static Profile resolve(String name, Profile defaultProfile) {     if (name == null) {         return defaultProfile.     }     switch(name.toLowerCase(Locale.ROOT)) {         case "std":         case "standard":             return STANDARD.         case "outlook":             return OUTLOOK.         case "gmail":             return GMAIL.         case "mac":             return MAC.         default:             return defaultProfile.     } }
false;static;2;28;;static MimeMessage createCommon(Email email, Session session) throws MessagingException {     MimeMessage message = new MimeMessage(session).     message.setHeader(MESSAGE_ID_HEADER, email.id).     if (email.from != null) {         message.setFrom(email.from).     }     if (email.replyTo != null) {         message.setReplyTo(email.replyTo.toArray()).     }     if (email.priority != null) {         email.priority.applyTo(message).     }     message.setSentDate(Date.from(email.sentDate.toInstant())).     message.setRecipients(Message.RecipientType.TO, email.to.toArray()).     if (email.cc != null) {         message.setRecipients(Message.RecipientType.CC, email.cc.toArray()).     }     if (email.bcc != null) {         message.setRecipients(Message.RecipientType.BCC, email.bcc.toArray()).     }     if (email.subject != null) {         message.setSubject(email.subject, StandardCharsets.UTF_8.name()).     } else {         message.setSubject("", StandardCharsets.UTF_8.name()).     }     return message. }
false;static;2;9;;static MimeBodyPart wrap(MimeMultipart multipart, String contentType) throws MessagingException {     MimeBodyPart part = new MimeBodyPart().     if (contentType == null) {         part.setContent(multipart).     } else {         part.setContent(multipart, contentType).     }     return part. }
