commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getAccountName() {     return accountName. }
false;public;0;4;;@Override public Iterator<SentMessage> iterator() {     return messages.iterator(). }
false;public;0;3;;public int count() {     return messages.size(). }
false;public;0;3;;public List<SentMessage> asList() {     return Collections.unmodifiableList(messages). }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(ACCOUNT.getPreferredName(), accountName).     builder.startArray(SENT_MESSAGES.getPreferredName()).     for (SentMessage message : messages) {         message.toXContent(builder, params).     }     builder.endArray().     return builder.endObject(). }
false;public,static;4;3;;public static SentMessage responded(String to, SlackMessage message, HttpRequest request, HttpResponse response) {     return new SentMessage(to, message, request, response, null). }
false;public,static;3;3;;public static SentMessage error(String to, SlackMessage message, Exception e) {     return new SentMessage(to, message, null, null, e). }
false;public;0;3;;public HttpRequest getRequest() {     return request. }
false;public;0;3;;public HttpResponse getResponse() {     return response. }
false;public;0;3;;public Exception getException() {     return exception. }
false;public;0;3;;public boolean isSuccess() {     return response != null && response.status() >= 200 && response.status() < 300. }
false;public;2;33;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(STATUS.getPreferredName(), isSuccess() ? "success" : "failure").     if (isSuccess() == false) {         if (request != null) {             if (WatcherParams.hideSecrets(params)) {                 // for slack                 try (InputStream is = HttpRequest.filterToXContent(request, builder.contentType().xContent(), params, "path")) {                     builder.rawField(REQUEST.getPreferredName(), is, builder.contentType()).                 }             } else {                 builder.field(REQUEST.getPreferredName()).                 request.toXContent(builder, params).             }         }         if (response != null) {             builder.field(RESPONSE.getPreferredName()).             response.toXContent(builder, params).         }         if (exception != null) {             ElasticsearchException.generateFailureXContent(builder, params, exception, true).         }     }     if (to != null) {         builder.field(TO.getPreferredName(), to).     }     builder.field(MESSAGE.getPreferredName()).     message.toXContent(builder, params, false).     return builder.endObject(). }
