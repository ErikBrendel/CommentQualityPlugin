commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "watcher_execute_watch". }
false;public;2;8;;@Override public RestResponse buildResponse(ExecuteWatchResponse response, XContentBuilder builder) throws Exception {     builder.startObject().     builder.field(Field.ID.getPreferredName(), response.getRecordId()).     builder.field(Field.WATCH_RECORD.getPreferredName(), response.getRecordSource(), request).     builder.endObject().     return new BytesRestResponse(RestStatus.OK, builder). }
false;protected;2;15;;@Override protected RestChannelConsumer doPrepareRequest(final RestRequest request, WatcherClient client) throws IOException {     ExecuteWatchRequest executeWatchRequest = parseRequest(request, client).     return channel -> client.executeWatch(executeWatchRequest, new RestBuilderListener<ExecuteWatchResponse>(channel) {          @Override         public RestResponse buildResponse(ExecuteWatchResponse response, XContentBuilder builder) throws Exception {             builder.startObject().             builder.field(Field.ID.getPreferredName(), response.getRecordId()).             builder.field(Field.WATCH_RECORD.getPreferredName(), response.getRecordSource(), request).             builder.endObject().             return new BytesRestResponse(RestStatus.OK, builder).         }     }). }
true;private;2;73;// This tightly binds the REST API to the java API ;// This tightly binds the REST API to the java API private ExecuteWatchRequest parseRequest(RestRequest request, WatcherClient client) throws IOException {     ExecuteWatchRequestBuilder builder = client.prepareExecuteWatch().     builder.setId(request.param("id")).     builder.setDebug(WatcherParams.debug(request)).     if (request.hasContent() == false) {         return builder.request().     }     builder.setRecordExecution(request.paramAsBoolean(RECORD_EXECUTION.getPreferredName(), builder.request().isRecordExecution())).     builder.setIgnoreCondition(request.paramAsBoolean(IGNORE_CONDITION.getPreferredName(), builder.request().isIgnoreCondition())).     try (XContentParser parser = request.contentParser()) {         parser.nextToken().         String currentFieldName = null.         XContentParser.Token token.         while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {             if (token == XContentParser.Token.FIELD_NAME) {                 currentFieldName = parser.currentName().             } else if (token == XContentParser.Token.VALUE_BOOLEAN) {                 if (IGNORE_CONDITION.match(currentFieldName, parser.getDeprecationHandler())) {                     builder.setIgnoreCondition(parser.booleanValue()).                 } else if (RECORD_EXECUTION.match(currentFieldName, parser.getDeprecationHandler())) {                     builder.setRecordExecution(parser.booleanValue()).                 } else {                     throw new ElasticsearchParseException("could not parse watch execution request. unexpected boolean field [{}]", currentFieldName).                 }             } else if (token == XContentParser.Token.START_OBJECT) {                 if (Field.ALTERNATIVE_INPUT.match(currentFieldName, parser.getDeprecationHandler())) {                     builder.setAlternativeInput(parser.map()).                 } else if (Field.TRIGGER_DATA.match(currentFieldName, parser.getDeprecationHandler())) {                     builder.setTriggerData(parser.map()).                 } else if (Field.WATCH.match(currentFieldName, parser.getDeprecationHandler())) {                     try (XContentBuilder watcherSource = XContentBuilder.builder(parser.contentType().xContent())) {                         watcherSource.generator().copyCurrentStructure(parser).                         builder.setWatchSource(BytesReference.bytes(watcherSource), parser.contentType()).                     }                 } else if (Field.ACTION_MODES.match(currentFieldName, parser.getDeprecationHandler())) {                     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                         if (token == XContentParser.Token.FIELD_NAME) {                             currentFieldName = parser.currentName().                         } else if (token == XContentParser.Token.VALUE_STRING) {                             try {                                 ActionExecutionMode mode = ActionExecutionMode.resolve(parser.textOrNull()).                                 builder.setActionMode(currentFieldName, mode).                             } catch (IllegalArgumentException iae) {                                 throw new ElasticsearchParseException("could not parse watch execution request", iae).                             }                         } else {                             throw new ElasticsearchParseException("could not parse watch execution request. unexpected array field [{}]", currentFieldName).                         }                     }                 } else {                     if (RESERVED_FIELD_NAMES.contains(currentFieldName)) {                         throw new ElasticsearchParseException("please wrap watch including field [{}] inside a \"watch\" field", currentFieldName).                     } else {                         throw new ElasticsearchParseException("could not parse watch execution request. unexpected object field [{}]", currentFieldName).                     }                 }             } else {                 throw new ElasticsearchParseException("could not parse watch execution request. unexpected token [{}]", token).             }         }     }     return builder.request(). }
false;public;0;4;;@Override public Set<String> getFilteredFields() {     return FILTERED_FIELDS. }
