commented;modifiers;parameterAmount;loc;comment;code
false;;0;1;;String type().
true;;1;1;/**  * It's the responsibility of the trigger engine implementation to select the appropriate jobs  * from the given list of jobs  */ ;/**  * It's the responsibility of the trigger engine implementation to select the appropriate jobs  * from the given list of jobs  */ void start(Collection<Watch> jobs).
false;;0;1;;void stop().
false;;1;1;;void register(Consumer<Iterable<TriggerEvent>> consumer).
false;;1;1;;void add(Watch job).
true;;0;1;/**  * Get into a pause state, implies clearing out existing jobs  */ ;/**  * Get into a pause state, implies clearing out existing jobs  */ void pauseExecution().
true;;1;1;/**  * Removes the job associated with the given name from this trigger engine.  *  * @param jobId   The name of the job to remove  * @return          {@code true} if the job existed and removed, {@code false} otherwise.  */ ;/**  * Removes the job associated with the given name from this trigger engine.  *  * @param jobId   The name of the job to remove  * @return          {@code true} if the job existed and removed, {@code false} otherwise.  */ boolean remove(String jobId).
false;;3;1;;E simulateEvent(String jobId, @Nullable Map<String, Object> data, TriggerService service).
false;;2;1;;T parseTrigger(String context, XContentParser parser) throws IOException.
false;;4;1;;E parseTriggerEvent(TriggerService service, String watchId, String context, XContentParser parser) throws IOException.
