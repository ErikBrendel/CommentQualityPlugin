# id;timestamp;commentText;codeText;commentWords;codeWords
Account -> Config -> Smtp -> static Properties loadSmtpProperties(Settings settings);1524684173;loads the standard Java Mail properties as settings from the given account settings._The standard settings are not that readable, therefore we enabled the user to configure_those in a readable way... this method first loads the smtp settings (which corresponds to_all Java Mail {@code mail.smtp.*} settings), and then replaces the readable keys to the official_"unreadable" keys. We'll then use these settings when crea;static Properties loadSmtpProperties(Settings settings) {_                Settings.Builder builder = Settings.builder().put(DEFAULT_SMTP_TIMEOUT_SETTINGS).put(settings)__                replaceTimeValue(builder, "connection_timeout", "connectiontimeout")__                replaceTimeValue(builder, "write_timeout", "writetimeout")__                replaceTimeValue(builder, "timeout", "timeout")___                replace(builder, "local_address", "localaddress")__                replace(builder, "local_port", "localport")__                replace(builder, "send_partial", "sendpartial")__                replace(builder, "wait_on_quit", "quitwait")___                settings = builder.build()__                Properties props = new Properties()__                for (String key : settings.keySet()) {_                    props.setProperty(SMTP_SETTINGS_PREFIX + key, settings.get(key))__                }_                return props__            };loads,the,standard,java,mail,properties,as,settings,from,the,given,account,settings,the,standard,settings,are,not,that,readable,therefore,we,enabled,the,user,to,configure,those,in,a,readable,way,this,method,first,loads,the,smtp,settings,which,corresponds,to,all,java,mail,code,mail,smtp,settings,and,then,replaces,the,readable,keys,to,the,official,unreadable,keys,we,ll,then,use,these,settings,when,crea;static,properties,load,smtp,properties,settings,settings,settings,builder,builder,settings,builder,put,put,settings,replace,time,value,builder,connectiontimeout,replace,time,value,builder,writetimeout,replace,time,value,builder,timeout,timeout,replace,builder,localaddress,replace,builder,localport,replace,builder,sendpartial,replace,builder,quitwait,settings,builder,build,properties,props,new,properties,for,string,key,settings,key,set,props,set,property,key,settings,get,key,return,props
Account -> Config -> Smtp -> static Properties loadSmtpProperties(Settings settings);1531729807;loads the standard Java Mail properties as settings from the given account settings._The standard settings are not that readable, therefore we enabled the user to configure_those in a readable way... this method first loads the smtp settings (which corresponds to_all Java Mail {@code mail.smtp.*} settings), and then replaces the readable keys to the official_"unreadable" keys. We'll then use these settings when crea;static Properties loadSmtpProperties(Settings settings) {_                Settings.Builder builder = Settings.builder().put(DEFAULT_SMTP_TIMEOUT_SETTINGS).put(settings)__                replaceTimeValue(builder, "connection_timeout", "connectiontimeout")__                replaceTimeValue(builder, "write_timeout", "writetimeout")__                replaceTimeValue(builder, "timeout", "timeout")___                replace(builder, "local_address", "localaddress")__                replace(builder, "local_port", "localport")__                replace(builder, "send_partial", "sendpartial")__                replace(builder, "wait_on_quit", "quitwait")___                settings = builder.build()__                Properties props = new Properties()__                _                Set<String> insecureSettings = settings.filter(s -> s.startsWith("secure_") == false).keySet()__                for (String key : insecureSettings) {_                    props.setProperty(SMTP_SETTINGS_PREFIX + key, settings.get(key))__                }_                return props__            };loads,the,standard,java,mail,properties,as,settings,from,the,given,account,settings,the,standard,settings,are,not,that,readable,therefore,we,enabled,the,user,to,configure,those,in,a,readable,way,this,method,first,loads,the,smtp,settings,which,corresponds,to,all,java,mail,code,mail,smtp,settings,and,then,replaces,the,readable,keys,to,the,official,unreadable,keys,we,ll,then,use,these,settings,when,crea;static,properties,load,smtp,properties,settings,settings,settings,builder,builder,settings,builder,put,put,settings,replace,time,value,builder,connectiontimeout,replace,time,value,builder,writetimeout,replace,time,value,builder,timeout,timeout,replace,builder,localaddress,replace,builder,localport,replace,builder,sendpartial,replace,builder,quitwait,settings,builder,build,properties,props,new,properties,set,string,insecure,settings,settings,filter,s,s,starts,with,false,key,set,for,string,key,insecure,settings,props,set,property,key,settings,get,key,return,props
Account -> Config -> Smtp -> static Properties loadSmtpProperties(Settings settings);1547981484;loads the standard Java Mail properties as settings from the given account settings._The standard settings are not that readable, therefore we enabled the user to configure_those in a readable way... this method first loads the smtp settings (which corresponds to_all Java Mail {@code mail.smtp.*} settings), and then replaces the readable keys to the official_"unreadable" keys. We'll then use these settings when crea;static Properties loadSmtpProperties(Settings settings) {_                Settings.Builder builder = Settings.builder().put(DEFAULT_SMTP_TIMEOUT_SETTINGS).put(settings)__                replaceTimeValue(builder, "connection_timeout", "connectiontimeout")__                replaceTimeValue(builder, "write_timeout", "writetimeout")__                replaceTimeValue(builder, "timeout", "timeout")___                replace(builder, "local_address", "localaddress")__                replace(builder, "local_port", "localport")__                replace(builder, "send_partial", "sendpartial")__                replace(builder, "wait_on_quit", "quitwait")___                settings = builder.build()__                Properties props = new Properties()__                _                Set<String> insecureSettings = settings.filter(s -> s.startsWith("secure_") == false).keySet()__                for (String key : insecureSettings) {_                    props.setProperty(SMTP_SETTINGS_PREFIX + key, settings.get(key))__                }_                return props__            };loads,the,standard,java,mail,properties,as,settings,from,the,given,account,settings,the,standard,settings,are,not,that,readable,therefore,we,enabled,the,user,to,configure,those,in,a,readable,way,this,method,first,loads,the,smtp,settings,which,corresponds,to,all,java,mail,code,mail,smtp,settings,and,then,replaces,the,readable,keys,to,the,official,unreadable,keys,we,ll,then,use,these,settings,when,crea;static,properties,load,smtp,properties,settings,settings,settings,builder,builder,settings,builder,put,put,settings,replace,time,value,builder,connectiontimeout,replace,time,value,builder,writetimeout,replace,time,value,builder,timeout,timeout,replace,builder,localaddress,replace,builder,localport,replace,builder,sendpartial,replace,builder,quitwait,settings,builder,build,properties,props,new,properties,set,string,insecure,settings,settings,filter,s,s,starts,with,false,key,set,for,string,key,insecure,settings,props,set,property,key,settings,get,key,return,props
