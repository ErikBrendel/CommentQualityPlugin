# id;timestamp;commentText;codeText;commentWords;codeWords
TriggerService -> public boolean remove(String jobName);1524684173;Removes the job associated with the given name from this trigger service.__@param jobName   The name of the job to remove_@return          {@code true} if the job existed and removed, {@code false} otherwise.;public boolean remove(String jobName) {_        perWatchStats.remove(jobName)__        for (TriggerEngine engine : engines.values()) {_            if (engine.remove(jobName)) {_                return true__            }_        }_        return false__    };removes,the,job,associated,with,the,given,name,from,this,trigger,service,param,job,name,the,name,of,the,job,to,remove,return,code,true,if,the,job,existed,and,removed,code,false,otherwise;public,boolean,remove,string,job,name,per,watch,stats,remove,job,name,for,trigger,engine,engine,engines,values,if,engine,remove,job,name,return,true,return,false
TriggerService -> public boolean remove(String jobName);1541092382;Removes the job associated with the given name from this trigger service.__@param jobName   The name of the job to remove_@return          {@code true} if the job existed and removed, {@code false} otherwise.;public boolean remove(String jobName) {_        perWatchStats.remove(jobName)__        for (TriggerEngine engine : engines.values()) {_            if (engine.remove(jobName)) {_                return true__            }_        }_        return false__    };removes,the,job,associated,with,the,given,name,from,this,trigger,service,param,job,name,the,name,of,the,job,to,remove,return,code,true,if,the,job,existed,and,removed,code,false,otherwise;public,boolean,remove,string,job,name,per,watch,stats,remove,job,name,for,trigger,engine,engine,engines,values,if,engine,remove,job,name,return,true,return,false
TriggerService -> public boolean remove(String jobName);1543343306;Removes the job associated with the given name from this trigger service.__@param jobName   The name of the job to remove_@return          {@code true} if the job existed and removed, {@code false} otherwise.;public boolean remove(String jobName) {_        perWatchStats.remove(jobName)__        for (TriggerEngine engine : engines.values()) {_            if (engine.remove(jobName)) {_                return true__            }_        }_        return false__    };removes,the,job,associated,with,the,given,name,from,this,trigger,service,param,job,name,the,name,of,the,job,to,remove,return,code,true,if,the,job,existed,and,removed,code,false,otherwise;public,boolean,remove,string,job,name,per,watch,stats,remove,job,name,for,trigger,engine,engine,engines,values,if,engine,remove,job,name,return,true,return,false
TriggerService -> public boolean remove(String jobName);1550611634;Removes the job associated with the given name from this trigger service.__@param jobName   The name of the job to remove_@return          {@code true} if the job existed and removed, {@code false} otherwise.;public boolean remove(String jobName) {_        perWatchStats.remove(jobName)__        for (TriggerEngine engine : engines.values()) {_            if (engine.remove(jobName)) {_                return true__            }_        }_        return false__    };removes,the,job,associated,with,the,given,name,from,this,trigger,service,param,job,name,the,name,of,the,job,to,remove,return,code,true,if,the,job,existed,and,removed,code,false,otherwise;public,boolean,remove,string,job,name,per,watch,stats,remove,job,name,for,trigger,engine,engine,engines,values,if,engine,remove,job,name,return,true,return,false
TriggerService -> public Counters stats();1524684173;Returns some statistics about the watches loaded in the trigger service_@return a set of counters containing statistics;public Counters stats() {_        Counters counters = new Counters()__        _        int watchCount = perWatchStats.size()__        counters.inc("count.active", watchCount)__        counters.inc("count.total", watchCount)__        counters.inc("watch.trigger._all.active", watchCount)__        counters.inc("watch.trigger._all.total", watchCount)__        counters.inc("watch.input._all.total", watchCount)__        counters.inc("watch.input._all.active", watchCount)__        perWatchStats.values().forEach(stats -> {_            if (stats.metadata) {_                counters.inc("watch.metadata.active")__                counters.inc("watch.metadata.total")__            }_            counters.inc("watch.trigger." + stats.triggerType + ".total")__            counters.inc("watch.trigger." + stats.triggerType + ".active")__            if (Strings.isNullOrEmpty(stats.scheduleType) == false) {_                counters.inc("watch.trigger.schedule." + stats.scheduleType + ".total")__                counters.inc("watch.trigger.schedule." + stats.scheduleType + ".active")__                counters.inc("watch.trigger.schedule._all.total")__                counters.inc("watch.trigger.schedule._all.active")__            }_            counters.inc("watch.input." + stats.inputType + ".active")__            counters.inc("watch.input." + stats.inputType + ".total")___            counters.inc("watch.condition." + stats.conditionType + ".active")__            counters.inc("watch.condition." + stats.conditionType + ".total")__            counters.inc("watch.condition._all.total")__            counters.inc("watch.condition._all.active")___            if (Strings.isNullOrEmpty(stats.transformType) == false) {_                counters.inc("watch.transform." + stats.transformType + ".active")__                counters.inc("watch.transform." + stats.transformType + ".total")__                counters.inc("watch.transform._all.active")__                counters.inc("watch.transform._all.total")__            }__            for (TriggerWatchStats.ActionStats action : stats.actions) {_                counters.inc("watch.action." + action.actionType + ".active")__                counters.inc("watch.action." + action.actionType + ".total")__                counters.inc("watch.action._all.active")__                counters.inc("watch.action._all.total")___                if (Strings.isNullOrEmpty(action.conditionType) == false) {_                    counters.inc("watch.action.condition." + action.conditionType + ".active")__                    counters.inc("watch.action.condition." + action.conditionType + ".total")__                    counters.inc("watch.action.condition._all.active")__                    counters.inc("watch.action.condition._all.total")__                }_                if (Strings.isNullOrEmpty(action.transformType) == false) {_                    counters.inc("watch.action.transform." + action.transformType + ".active")__                    counters.inc("watch.action.transform." + action.transformType + ".total")__                    counters.inc("watch.action.transform._all.active")__                    counters.inc("watch.action.transform._all.total")__                }_            }_        })__        return counters__    };returns,some,statistics,about,the,watches,loaded,in,the,trigger,service,return,a,set,of,counters,containing,statistics;public,counters,stats,counters,counters,new,counters,int,watch,count,per,watch,stats,size,counters,inc,count,active,watch,count,counters,inc,count,total,watch,count,counters,inc,watch,trigger,active,watch,count,counters,inc,watch,trigger,total,watch,count,counters,inc,watch,input,total,watch,count,counters,inc,watch,input,active,watch,count,per,watch,stats,values,for,each,stats,if,stats,metadata,counters,inc,watch,metadata,active,counters,inc,watch,metadata,total,counters,inc,watch,trigger,stats,trigger,type,total,counters,inc,watch,trigger,stats,trigger,type,active,if,strings,is,null,or,empty,stats,schedule,type,false,counters,inc,watch,trigger,schedule,stats,schedule,type,total,counters,inc,watch,trigger,schedule,stats,schedule,type,active,counters,inc,watch,trigger,schedule,total,counters,inc,watch,trigger,schedule,active,counters,inc,watch,input,stats,input,type,active,counters,inc,watch,input,stats,input,type,total,counters,inc,watch,condition,stats,condition,type,active,counters,inc,watch,condition,stats,condition,type,total,counters,inc,watch,condition,total,counters,inc,watch,condition,active,if,strings,is,null,or,empty,stats,transform,type,false,counters,inc,watch,transform,stats,transform,type,active,counters,inc,watch,transform,stats,transform,type,total,counters,inc,watch,transform,active,counters,inc,watch,transform,total,for,trigger,watch,stats,action,stats,action,stats,actions,counters,inc,watch,action,action,action,type,active,counters,inc,watch,action,action,action,type,total,counters,inc,watch,action,active,counters,inc,watch,action,total,if,strings,is,null,or,empty,action,condition,type,false,counters,inc,watch,action,condition,action,condition,type,active,counters,inc,watch,action,condition,action,condition,type,total,counters,inc,watch,action,condition,active,counters,inc,watch,action,condition,total,if,strings,is,null,or,empty,action,transform,type,false,counters,inc,watch,action,transform,action,transform,type,active,counters,inc,watch,action,transform,action,transform,type,total,counters,inc,watch,action,transform,active,counters,inc,watch,action,transform,total,return,counters
TriggerService -> public Counters stats();1541092382;Returns some statistics about the watches loaded in the trigger service_@return a set of counters containing statistics;public Counters stats() {_        Counters counters = new Counters()__        _        int watchCount = perWatchStats.size()__        counters.inc("count.active", watchCount)__        counters.inc("count.total", watchCount)__        counters.inc("watch.trigger._all.active", watchCount)__        counters.inc("watch.trigger._all.total", watchCount)__        counters.inc("watch.input._all.total", watchCount)__        counters.inc("watch.input._all.active", watchCount)__        perWatchStats.values().forEach(stats -> {_            if (stats.metadata) {_                counters.inc("watch.metadata.active")__                counters.inc("watch.metadata.total")__            }_            counters.inc("watch.trigger." + stats.triggerType + ".total")__            counters.inc("watch.trigger." + stats.triggerType + ".active")__            if (Strings.isNullOrEmpty(stats.scheduleType) == false) {_                counters.inc("watch.trigger.schedule." + stats.scheduleType + ".total")__                counters.inc("watch.trigger.schedule." + stats.scheduleType + ".active")__                counters.inc("watch.trigger.schedule._all.total")__                counters.inc("watch.trigger.schedule._all.active")__            }_            counters.inc("watch.input." + stats.inputType + ".active")__            counters.inc("watch.input." + stats.inputType + ".total")___            counters.inc("watch.condition." + stats.conditionType + ".active")__            counters.inc("watch.condition." + stats.conditionType + ".total")__            counters.inc("watch.condition._all.total")__            counters.inc("watch.condition._all.active")___            if (Strings.isNullOrEmpty(stats.transformType) == false) {_                counters.inc("watch.transform." + stats.transformType + ".active")__                counters.inc("watch.transform." + stats.transformType + ".total")__                counters.inc("watch.transform._all.active")__                counters.inc("watch.transform._all.total")__            }__            for (TriggerWatchStats.ActionStats action : stats.actions) {_                counters.inc("watch.action." + action.actionType + ".active")__                counters.inc("watch.action." + action.actionType + ".total")__                counters.inc("watch.action._all.active")__                counters.inc("watch.action._all.total")___                if (Strings.isNullOrEmpty(action.conditionType) == false) {_                    counters.inc("watch.action.condition." + action.conditionType + ".active")__                    counters.inc("watch.action.condition." + action.conditionType + ".total")__                    counters.inc("watch.action.condition._all.active")__                    counters.inc("watch.action.condition._all.total")__                }_                if (Strings.isNullOrEmpty(action.transformType) == false) {_                    counters.inc("watch.action.transform." + action.transformType + ".active")__                    counters.inc("watch.action.transform." + action.transformType + ".total")__                    counters.inc("watch.action.transform._all.active")__                    counters.inc("watch.action.transform._all.total")__                }_            }_        })__        return counters__    };returns,some,statistics,about,the,watches,loaded,in,the,trigger,service,return,a,set,of,counters,containing,statistics;public,counters,stats,counters,counters,new,counters,int,watch,count,per,watch,stats,size,counters,inc,count,active,watch,count,counters,inc,count,total,watch,count,counters,inc,watch,trigger,active,watch,count,counters,inc,watch,trigger,total,watch,count,counters,inc,watch,input,total,watch,count,counters,inc,watch,input,active,watch,count,per,watch,stats,values,for,each,stats,if,stats,metadata,counters,inc,watch,metadata,active,counters,inc,watch,metadata,total,counters,inc,watch,trigger,stats,trigger,type,total,counters,inc,watch,trigger,stats,trigger,type,active,if,strings,is,null,or,empty,stats,schedule,type,false,counters,inc,watch,trigger,schedule,stats,schedule,type,total,counters,inc,watch,trigger,schedule,stats,schedule,type,active,counters,inc,watch,trigger,schedule,total,counters,inc,watch,trigger,schedule,active,counters,inc,watch,input,stats,input,type,active,counters,inc,watch,input,stats,input,type,total,counters,inc,watch,condition,stats,condition,type,active,counters,inc,watch,condition,stats,condition,type,total,counters,inc,watch,condition,total,counters,inc,watch,condition,active,if,strings,is,null,or,empty,stats,transform,type,false,counters,inc,watch,transform,stats,transform,type,active,counters,inc,watch,transform,stats,transform,type,total,counters,inc,watch,transform,active,counters,inc,watch,transform,total,for,trigger,watch,stats,action,stats,action,stats,actions,counters,inc,watch,action,action,action,type,active,counters,inc,watch,action,action,action,type,total,counters,inc,watch,action,active,counters,inc,watch,action,total,if,strings,is,null,or,empty,action,condition,type,false,counters,inc,watch,action,condition,action,condition,type,active,counters,inc,watch,action,condition,action,condition,type,total,counters,inc,watch,action,condition,active,counters,inc,watch,action,condition,total,if,strings,is,null,or,empty,action,transform,type,false,counters,inc,watch,action,transform,action,transform,type,active,counters,inc,watch,action,transform,action,transform,type,total,counters,inc,watch,action,transform,active,counters,inc,watch,action,transform,total,return,counters
TriggerService -> public Counters stats();1543343306;Returns some statistics about the watches loaded in the trigger service_@return a set of counters containing statistics;public Counters stats() {_        Counters counters = new Counters()__        _        int watchCount = perWatchStats.size()__        counters.inc("count.active", watchCount)__        counters.inc("count.total", watchCount)__        counters.inc("watch.trigger._all.active", watchCount)__        counters.inc("watch.trigger._all.total", watchCount)__        counters.inc("watch.input._all.total", watchCount)__        counters.inc("watch.input._all.active", watchCount)__        perWatchStats.values().forEach(stats -> {_            if (stats.metadata) {_                counters.inc("watch.metadata.active")__                counters.inc("watch.metadata.total")__            }_            counters.inc("watch.trigger." + stats.triggerType + ".total")__            counters.inc("watch.trigger." + stats.triggerType + ".active")__            if (Strings.isNullOrEmpty(stats.scheduleType) == false) {_                counters.inc("watch.trigger.schedule." + stats.scheduleType + ".total")__                counters.inc("watch.trigger.schedule." + stats.scheduleType + ".active")__                counters.inc("watch.trigger.schedule._all.total")__                counters.inc("watch.trigger.schedule._all.active")__            }_            counters.inc("watch.input." + stats.inputType + ".active")__            counters.inc("watch.input." + stats.inputType + ".total")___            counters.inc("watch.condition." + stats.conditionType + ".active")__            counters.inc("watch.condition." + stats.conditionType + ".total")__            counters.inc("watch.condition._all.total")__            counters.inc("watch.condition._all.active")___            if (Strings.isNullOrEmpty(stats.transformType) == false) {_                counters.inc("watch.transform." + stats.transformType + ".active")__                counters.inc("watch.transform." + stats.transformType + ".total")__                counters.inc("watch.transform._all.active")__                counters.inc("watch.transform._all.total")__            }__            for (TriggerWatchStats.ActionStats action : stats.actions) {_                counters.inc("watch.action." + action.actionType + ".active")__                counters.inc("watch.action." + action.actionType + ".total")__                counters.inc("watch.action._all.active")__                counters.inc("watch.action._all.total")___                if (Strings.isNullOrEmpty(action.conditionType) == false) {_                    counters.inc("watch.action.condition." + action.conditionType + ".active")__                    counters.inc("watch.action.condition." + action.conditionType + ".total")__                    counters.inc("watch.action.condition._all.active")__                    counters.inc("watch.action.condition._all.total")__                }_                if (Strings.isNullOrEmpty(action.transformType) == false) {_                    counters.inc("watch.action.transform." + action.transformType + ".active")__                    counters.inc("watch.action.transform." + action.transformType + ".total")__                    counters.inc("watch.action.transform._all.active")__                    counters.inc("watch.action.transform._all.total")__                }_            }_        })__        return counters__    };returns,some,statistics,about,the,watches,loaded,in,the,trigger,service,return,a,set,of,counters,containing,statistics;public,counters,stats,counters,counters,new,counters,int,watch,count,per,watch,stats,size,counters,inc,count,active,watch,count,counters,inc,count,total,watch,count,counters,inc,watch,trigger,active,watch,count,counters,inc,watch,trigger,total,watch,count,counters,inc,watch,input,total,watch,count,counters,inc,watch,input,active,watch,count,per,watch,stats,values,for,each,stats,if,stats,metadata,counters,inc,watch,metadata,active,counters,inc,watch,metadata,total,counters,inc,watch,trigger,stats,trigger,type,total,counters,inc,watch,trigger,stats,trigger,type,active,if,strings,is,null,or,empty,stats,schedule,type,false,counters,inc,watch,trigger,schedule,stats,schedule,type,total,counters,inc,watch,trigger,schedule,stats,schedule,type,active,counters,inc,watch,trigger,schedule,total,counters,inc,watch,trigger,schedule,active,counters,inc,watch,input,stats,input,type,active,counters,inc,watch,input,stats,input,type,total,counters,inc,watch,condition,stats,condition,type,active,counters,inc,watch,condition,stats,condition,type,total,counters,inc,watch,condition,total,counters,inc,watch,condition,active,if,strings,is,null,or,empty,stats,transform,type,false,counters,inc,watch,transform,stats,transform,type,active,counters,inc,watch,transform,stats,transform,type,total,counters,inc,watch,transform,active,counters,inc,watch,transform,total,for,trigger,watch,stats,action,stats,action,stats,actions,counters,inc,watch,action,action,action,type,active,counters,inc,watch,action,action,action,type,total,counters,inc,watch,action,active,counters,inc,watch,action,total,if,strings,is,null,or,empty,action,condition,type,false,counters,inc,watch,action,condition,action,condition,type,active,counters,inc,watch,action,condition,action,condition,type,total,counters,inc,watch,action,condition,active,counters,inc,watch,action,condition,total,if,strings,is,null,or,empty,action,transform,type,false,counters,inc,watch,action,transform,action,transform,type,active,counters,inc,watch,action,transform,action,transform,type,total,counters,inc,watch,action,transform,active,counters,inc,watch,action,transform,total,return,counters
TriggerService -> public Counters stats();1550611634;Returns some statistics about the watches loaded in the trigger service_@return a set of counters containing statistics;public Counters stats() {_        Counters counters = new Counters()__        _        int watchCount = perWatchStats.size()__        counters.inc("count.active", watchCount)__        counters.inc("count.total", watchCount)__        counters.inc("watch.trigger._all.active", watchCount)__        counters.inc("watch.trigger._all.total", watchCount)__        counters.inc("watch.input._all.total", watchCount)__        counters.inc("watch.input._all.active", watchCount)__        perWatchStats.values().forEach(stats -> {_            if (stats.metadata) {_                counters.inc("watch.metadata.active")__                counters.inc("watch.metadata.total")__            }_            counters.inc("watch.trigger." + stats.triggerType + ".total")__            counters.inc("watch.trigger." + stats.triggerType + ".active")__            if (Strings.isNullOrEmpty(stats.scheduleType) == false) {_                counters.inc("watch.trigger.schedule." + stats.scheduleType + ".total")__                counters.inc("watch.trigger.schedule." + stats.scheduleType + ".active")__                counters.inc("watch.trigger.schedule._all.total")__                counters.inc("watch.trigger.schedule._all.active")__            }_            counters.inc("watch.input." + stats.inputType + ".active")__            counters.inc("watch.input." + stats.inputType + ".total")___            counters.inc("watch.condition." + stats.conditionType + ".active")__            counters.inc("watch.condition." + stats.conditionType + ".total")__            counters.inc("watch.condition._all.total")__            counters.inc("watch.condition._all.active")___            if (Strings.isNullOrEmpty(stats.transformType) == false) {_                counters.inc("watch.transform." + stats.transformType + ".active")__                counters.inc("watch.transform." + stats.transformType + ".total")__                counters.inc("watch.transform._all.active")__                counters.inc("watch.transform._all.total")__            }__            for (TriggerWatchStats.ActionStats action : stats.actions) {_                counters.inc("watch.action." + action.actionType + ".active")__                counters.inc("watch.action." + action.actionType + ".total")__                counters.inc("watch.action._all.active")__                counters.inc("watch.action._all.total")___                if (Strings.isNullOrEmpty(action.conditionType) == false) {_                    counters.inc("watch.action.condition." + action.conditionType + ".active")__                    counters.inc("watch.action.condition." + action.conditionType + ".total")__                    counters.inc("watch.action.condition._all.active")__                    counters.inc("watch.action.condition._all.total")__                }_                if (Strings.isNullOrEmpty(action.transformType) == false) {_                    counters.inc("watch.action.transform." + action.transformType + ".active")__                    counters.inc("watch.action.transform." + action.transformType + ".total")__                    counters.inc("watch.action.transform._all.active")__                    counters.inc("watch.action.transform._all.total")__                }_            }_        })__        return counters__    };returns,some,statistics,about,the,watches,loaded,in,the,trigger,service,return,a,set,of,counters,containing,statistics;public,counters,stats,counters,counters,new,counters,int,watch,count,per,watch,stats,size,counters,inc,count,active,watch,count,counters,inc,count,total,watch,count,counters,inc,watch,trigger,active,watch,count,counters,inc,watch,trigger,total,watch,count,counters,inc,watch,input,total,watch,count,counters,inc,watch,input,active,watch,count,per,watch,stats,values,for,each,stats,if,stats,metadata,counters,inc,watch,metadata,active,counters,inc,watch,metadata,total,counters,inc,watch,trigger,stats,trigger,type,total,counters,inc,watch,trigger,stats,trigger,type,active,if,strings,is,null,or,empty,stats,schedule,type,false,counters,inc,watch,trigger,schedule,stats,schedule,type,total,counters,inc,watch,trigger,schedule,stats,schedule,type,active,counters,inc,watch,trigger,schedule,total,counters,inc,watch,trigger,schedule,active,counters,inc,watch,input,stats,input,type,active,counters,inc,watch,input,stats,input,type,total,counters,inc,watch,condition,stats,condition,type,active,counters,inc,watch,condition,stats,condition,type,total,counters,inc,watch,condition,total,counters,inc,watch,condition,active,if,strings,is,null,or,empty,stats,transform,type,false,counters,inc,watch,transform,stats,transform,type,active,counters,inc,watch,transform,stats,transform,type,total,counters,inc,watch,transform,active,counters,inc,watch,transform,total,for,trigger,watch,stats,action,stats,action,stats,actions,counters,inc,watch,action,action,action,type,active,counters,inc,watch,action,action,action,type,total,counters,inc,watch,action,active,counters,inc,watch,action,total,if,strings,is,null,or,empty,action,condition,type,false,counters,inc,watch,action,condition,action,condition,type,active,counters,inc,watch,action,condition,action,condition,type,total,counters,inc,watch,action,condition,active,counters,inc,watch,action,condition,total,if,strings,is,null,or,empty,action,transform,type,false,counters,inc,watch,action,transform,action,transform,type,active,counters,inc,watch,action,transform,action,transform,type,total,counters,inc,watch,action,transform,active,counters,inc,watch,action,transform,total,return,counters
TriggerService -> public synchronized void pauseExecution();1524684173;Stop execution/triggering of watches on this node, do not try to reload anything, just sit still;public synchronized void pauseExecution() {_        engines.values().forEach(TriggerEngine::pauseExecution)__        perWatchStats.clear()__    };stop,execution,triggering,of,watches,on,this,node,do,not,try,to,reload,anything,just,sit,still;public,synchronized,void,pause,execution,engines,values,for,each,trigger,engine,pause,execution,per,watch,stats,clear
TriggerService -> public synchronized void pauseExecution();1541092382;Stop execution/triggering of watches on this node, do not try to reload anything, just sit still;public synchronized void pauseExecution() {_        engines.values().forEach(TriggerEngine::pauseExecution)__        perWatchStats.clear()__    };stop,execution,triggering,of,watches,on,this,node,do,not,try,to,reload,anything,just,sit,still;public,synchronized,void,pause,execution,engines,values,for,each,trigger,engine,pause,execution,per,watch,stats,clear
TriggerService -> public synchronized void pauseExecution();1543343306;Stop execution/triggering of watches on this node, do not try to reload anything, just sit still;public synchronized void pauseExecution() {_        engines.values().forEach(TriggerEngine::pauseExecution)__        perWatchStats.clear()__    };stop,execution,triggering,of,watches,on,this,node,do,not,try,to,reload,anything,just,sit,still;public,synchronized,void,pause,execution,engines,values,for,each,trigger,engine,pause,execution,per,watch,stats,clear
TriggerService -> public synchronized void pauseExecution();1550611634;Stop execution/triggering of watches on this node, do not try to reload anything, just sit still;public synchronized void pauseExecution() {_        engines.values().forEach(TriggerEngine::pauseExecution)__        perWatchStats.clear()__    };stop,execution,triggering,of,watches,on,this,node,do,not,try,to,reload,anything,just,sit,still;public,synchronized,void,pause,execution,engines,values,for,each,trigger,engine,pause,execution,per,watch,stats,clear
TriggerService -> private void addToStats(Watch watch);1524684173;create statistics for a single watch, and store it in a local map_allowing for easy deletion in case the watch gets removed from the trigger service;private void addToStats(Watch watch) {_        TriggerWatchStats watchStats = TriggerWatchStats.create(watch)__        perWatchStats.put(watch.id(), watchStats)__    };create,statistics,for,a,single,watch,and,store,it,in,a,local,map,allowing,for,easy,deletion,in,case,the,watch,gets,removed,from,the,trigger,service;private,void,add,to,stats,watch,watch,trigger,watch,stats,watch,stats,trigger,watch,stats,create,watch,per,watch,stats,put,watch,id,watch,stats
TriggerService -> private void addToStats(Watch watch);1541092382;create statistics for a single watch, and store it in a local map_allowing for easy deletion in case the watch gets removed from the trigger service;private void addToStats(Watch watch) {_        TriggerWatchStats watchStats = TriggerWatchStats.create(watch)__        perWatchStats.put(watch.id(), watchStats)__    };create,statistics,for,a,single,watch,and,store,it,in,a,local,map,allowing,for,easy,deletion,in,case,the,watch,gets,removed,from,the,trigger,service;private,void,add,to,stats,watch,watch,trigger,watch,stats,watch,stats,trigger,watch,stats,create,watch,per,watch,stats,put,watch,id,watch,stats
TriggerService -> private void addToStats(Watch watch);1543343306;create statistics for a single watch, and store it in a local map_allowing for easy deletion in case the watch gets removed from the trigger service;private void addToStats(Watch watch) {_        TriggerWatchStats watchStats = TriggerWatchStats.create(watch)__        perWatchStats.put(watch.id(), watchStats)__    };create,statistics,for,a,single,watch,and,store,it,in,a,local,map,allowing,for,easy,deletion,in,case,the,watch,gets,removed,from,the,trigger,service;private,void,add,to,stats,watch,watch,trigger,watch,stats,watch,stats,trigger,watch,stats,create,watch,per,watch,stats,put,watch,id,watch,stats
TriggerService -> private void addToStats(Watch watch);1550611634;create statistics for a single watch, and store it in a local map_allowing for easy deletion in case the watch gets removed from the trigger service;private void addToStats(Watch watch) {_        TriggerWatchStats watchStats = TriggerWatchStats.create(watch)__        perWatchStats.put(watch.id(), watchStats)__    };create,statistics,for,a,single,watch,and,store,it,in,a,local,map,allowing,for,easy,deletion,in,case,the,watch,gets,removed,from,the,trigger,service;private,void,add,to,stats,watch,watch,trigger,watch,stats,watch,stats,trigger,watch,stats,create,watch,per,watch,stats,put,watch,id,watch,stats
TriggerService -> public void add(Watch watch);1524684173;Adds the given job to the trigger service. If there is already a registered job in this service with the_same job ID, the newly added job will replace the old job (the old job will not be triggered anymore)__@param watch   The new watch;public void add(Watch watch) {_        engines.get(watch.trigger().type()).add(watch)__        addToStats(watch)__    };adds,the,given,job,to,the,trigger,service,if,there,is,already,a,registered,job,in,this,service,with,the,same,job,id,the,newly,added,job,will,replace,the,old,job,the,old,job,will,not,be,triggered,anymore,param,watch,the,new,watch;public,void,add,watch,watch,engines,get,watch,trigger,type,add,watch,add,to,stats,watch
TriggerService -> public void add(Watch watch);1541092382;Adds the given job to the trigger service. If there is already a registered job in this service with the_same job ID, the newly added job will replace the old job (the old job will not be triggered anymore)__@param watch   The new watch;public void add(Watch watch) {_        engines.get(watch.trigger().type()).add(watch)__        addToStats(watch)__    };adds,the,given,job,to,the,trigger,service,if,there,is,already,a,registered,job,in,this,service,with,the,same,job,id,the,newly,added,job,will,replace,the,old,job,the,old,job,will,not,be,triggered,anymore,param,watch,the,new,watch;public,void,add,watch,watch,engines,get,watch,trigger,type,add,watch,add,to,stats,watch
TriggerService -> public void add(Watch watch);1543343306;Adds the given job to the trigger service. If there is already a registered job in this service with the_same job ID, the newly added job will replace the old job (the old job will not be triggered anymore)__@param watch   The new watch;public void add(Watch watch) {_        engines.get(watch.trigger().type()).add(watch)__        addToStats(watch)__    };adds,the,given,job,to,the,trigger,service,if,there,is,already,a,registered,job,in,this,service,with,the,same,job,id,the,newly,added,job,will,replace,the,old,job,the,old,job,will,not,be,triggered,anymore,param,watch,the,new,watch;public,void,add,watch,watch,engines,get,watch,trigger,type,add,watch,add,to,stats,watch
TriggerService -> public void add(Watch watch);1550611634;Adds the given job to the trigger service. If there is already a registered job in this service with the_same job ID, the newly added job will replace the old job (the old job will not be triggered anymore)__@param watch   The new watch;public void add(Watch watch) {_        engines.get(watch.trigger().type()).add(watch)__        addToStats(watch)__    };adds,the,given,job,to,the,trigger,service,if,there,is,already,a,registered,job,in,this,service,with,the,same,job,id,the,newly,added,job,will,replace,the,old,job,the,old,job,will,not,be,triggered,anymore,param,watch,the,new,watch;public,void,add,watch,watch,engines,get,watch,trigger,type,add,watch,add,to,stats,watch
