commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;54;;@Override protected void doExecute(PutWatchRequest request, ActionListener<PutWatchResponse> listener) {     try {         ZonedDateTime now = clock.instant().atZone(ZoneOffset.UTC).         boolean isUpdate = request.getVersion() > 0 || request.getIfSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO.         Watch watch = parser.parseWithSecrets(request.getId(), false, request.getSource(), now, request.xContentType(), isUpdate, request.getIfSeqNo(), request.getIfPrimaryTerm()).         watch.setState(request.isActive(), now).         // ensure we only filter for the allowed headers         Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream().filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)).         watch.status().setHeaders(filteredHeaders).         try (XContentBuilder builder = jsonBuilder()) {             watch.toXContent(builder, DEFAULT_PARAMS).             if (isUpdate) {                 UpdateRequest updateRequest = new UpdateRequest(Watch.INDEX, Watch.DOC_TYPE, request.getId()).                 if (request.getIfSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO) {                     updateRequest.setIfSeqNo(request.getIfSeqNo()).                     updateRequest.setIfPrimaryTerm(request.getIfPrimaryTerm()).                 } else {                     updateRequest.version(request.getVersion()).                 }                 updateRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).                 updateRequest.doc(builder).                 executeAsyncWithOrigin(client.threadPool().getThreadContext(), WATCHER_ORIGIN, updateRequest, ActionListener.<UpdateResponse>wrap(response -> {                     boolean created = response.getResult() == DocWriteResponse.Result.CREATED.                     listener.onResponse(new PutWatchResponse(response.getId(), response.getVersion(), response.getSeqNo(), response.getPrimaryTerm(), created)).                 }, listener::onFailure), client::update).             } else {                 IndexRequest indexRequest = new IndexRequest(Watch.INDEX, Watch.DOC_TYPE, request.getId()).                 indexRequest.source(builder).                 indexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).                 executeAsyncWithOrigin(client.threadPool().getThreadContext(), WATCHER_ORIGIN, indexRequest, ActionListener.<IndexResponse>wrap(response -> {                     boolean created = response.getResult() == DocWriteResponse.Result.CREATED.                     listener.onResponse(new PutWatchResponse(response.getId(), response.getVersion(), response.getSeqNo(), response.getPrimaryTerm(), created)).                 }, listener::onFailure), client::index).             }         }     } catch (Exception e) {         listener.onFailure(e).     } }
