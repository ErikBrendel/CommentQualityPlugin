commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public EmailTemplate getEmail() {     return email. }
false;public;0;3;;public String getAccount() {     return account. }
false;public;0;3;;public Authentication getAuth() {     return auth. }
false;public;0;3;;public Profile getProfile() {     return profile. }
false;public;0;3;;public DataAttachment getDataAttachment() {     return dataAttachment. }
false;public;0;3;;public EmailAttachments getAttachments() {     return emailAttachments. }
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     EmailAction action = (EmailAction) o.     return Objects.equals(email, action.email) && Objects.equals(account, action.account) && Objects.equals(auth, action.auth) && Objects.equals(profile, action.profile) && Objects.equals(emailAttachments, action.emailAttachments) && Objects.equals(dataAttachment, action.dataAttachment). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(email, account, auth, profile, dataAttachment, emailAttachments). }
false;public;2;26;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (account != null) {         builder.field(Field.ACCOUNT.getPreferredName(), account).     }     if (auth != null) {         builder.field(Field.USER.getPreferredName(), auth.user()).         if (WatcherParams.hideSecrets(params) && auth.password().value().startsWith(CryptoService.ENCRYPTED_TEXT_PREFIX) == false) {             builder.field(Field.PASSWORD.getPreferredName(), WatcherXContentParser.REDACTED_PASSWORD).         } else {             builder.field(Field.PASSWORD.getPreferredName(), auth.password().value()).         }     }     if (profile != null) {         builder.field(Field.PROFILE.getPreferredName(), profile.name().toLowerCase(Locale.ROOT)).     }     if (dataAttachment != null) {         builder.field(Field.ATTACH_DATA.getPreferredName(), dataAttachment, params).     }     if (emailAttachments != null) {         emailAttachments.toXContent(builder, params).     }     email.xContentBody(builder, params).     return builder.endObject(). }
false;public,static;4;56;;public static EmailAction parse(String watchId, String actionId, XContentParser parser, EmailAttachmentsParser emailAttachmentsParser) throws IOException {     EmailTemplate.Parser emailParser = new EmailTemplate.Parser().     String account = null.     String user = null.     Secret password = null.     Profile profile = Profile.STANDARD.     DataAttachment dataAttachment = null.     EmailAttachments attachments = EmailAttachments.EMPTY_ATTACHMENTS.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Field.ATTACH_DATA.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 dataAttachment = DataAttachment.parse(parser).             } catch (IOException ioe) {                 throw new ElasticsearchParseException("could not parse [{}] action [{}/{}]. failed to parse data attachment field " + "[{}]", ioe, TYPE, watchId, actionId, currentFieldName).             }         } else if (Field.ATTACHMENTS.match(currentFieldName, parser.getDeprecationHandler())) {             attachments = emailAttachmentsParser.parse(parser).         } else if (!emailParser.handle(currentFieldName, parser)) {             if (token == XContentParser.Token.VALUE_STRING) {                 if (Field.ACCOUNT.match(currentFieldName, parser.getDeprecationHandler())) {                     account = parser.text().                 } else if (Field.USER.match(currentFieldName, parser.getDeprecationHandler())) {                     user = parser.text().                 } else if (Field.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {                     password = WatcherXContentParser.secretOrNull(parser).                 } else if (Field.PROFILE.match(currentFieldName, parser.getDeprecationHandler())) {                     try {                         profile = Profile.resolve(parser.text()).                     } catch (IllegalArgumentException iae) {                         throw new ElasticsearchParseException("could not parse [{}] action [{}/{}]", TYPE, watchId, actionId, iae).                     }                 } else {                     throw new ElasticsearchParseException("could not parse [{}] action [{}/{}]. unexpected string field [{}]", TYPE, watchId, actionId, currentFieldName).                 }             } else {                 throw new ElasticsearchParseException("could not parse [{}] action [{}/{}]. unexpected token [{}]", TYPE, watchId, actionId, token).             }         }     }     Authentication auth = null.     if (user != null) {         auth = new Authentication(user, password).     }     return new EmailAction(emailParser.parsedTemplate(), account, auth, profile, dataAttachment, attachments). }
false;public,static;1;3;;public static Builder builder(EmailTemplate email) {     return new Builder(email). }
false;public;0;3;;public String account() {     return account. }
false;public;0;3;;public Email email() {     return email. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject(type).field(Field.ACCOUNT.getPreferredName(), account).field(Field.MESSAGE.getPreferredName(), email, params).endObject(). }
false;public;0;3;;public Email email() {     return email. }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject(type).field(Field.MESSAGE.getPreferredName(), email, params).endObject(). }
false;public;1;4;;public Builder setAccount(String account) {     this.account = account.     return this. }
false;public;2;4;;public Builder setAuthentication(String username, char[] password) {     this.auth = new Authentication(username, new Secret(password)).     return this. }
false;public;1;4;;public Builder setProfile(Profile profile) {     this.profile = profile.     return this. }
false;public;1;5;;@Deprecated public Builder setAttachPayload(DataAttachment dataAttachment) {     this.dataAttachment = dataAttachment.     return this. }
false;public;1;4;;public Builder setAttachments(EmailAttachments attachments) {     this.attachments = attachments.     return this. }
false;public;0;3;;public EmailAction build() {     return new EmailAction(email, account, auth, profile, dataAttachment, attachments). }
