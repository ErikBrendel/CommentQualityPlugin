commented;modifiers;parameterAmount;loc;comment;code
false;public;3;20;;@Override public Action.Result execute(final String actionId, WatchExecutionContext ctx, Payload payload) throws Exception {     SlackAccount account = slackService.getAccount(action.account).     if (account == null) {         // the account associated with this action was deleted         throw new IllegalStateException("account [" + action.account + "] was not found. perhaps it was deleted").     }     Map<String, Object> model = Variables.createCtxParamsMap(ctx, payload).     SlackMessage message = action.message.render(ctx.id().watchId(), actionId, templateEngine, model, account.getMessageDefaults()).     if (ctx.simulateAction(actionId)) {         return new SlackAction.Result.Simulated(message).     }     SentMessages sentMessages = account.send(message, action.proxy).     return new SlackAction.Result.Executed(sentMessages). }
