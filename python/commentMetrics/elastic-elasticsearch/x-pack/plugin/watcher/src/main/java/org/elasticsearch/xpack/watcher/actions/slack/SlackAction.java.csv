commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     SlackAction that = (SlackAction) o.     return Objects.equals(account, that.account) && Objects.equals(message, that.message) && Objects.equals(proxy, that.proxy). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(account, message, proxy). }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (account != null) {         builder.field(Field.ACCOUNT.getPreferredName(), account).     }     if (proxy != null) {         proxy.toXContent(builder, params).     }     builder.field(Field.MESSAGE.getPreferredName(), message).     return builder.endObject(). }
false;public,static;3;39;;public static SlackAction parse(String watchId, String actionId, XContentParser parser) throws IOException {     String account = null.     SlackMessage.Template message = null.     HttpProxy proxy = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Field.ACCOUNT.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.VALUE_STRING) {                 account = parser.text().             } else {                 throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. expected [{}] to be of type string, but " + "found [{}] instead", TYPE, watchId, actionId, Field.ACCOUNT.getPreferredName(), token).             }         } else if (Field.PROXY.match(currentFieldName, parser.getDeprecationHandler())) {             proxy = HttpProxy.parse(parser).         } else if (Field.MESSAGE.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 message = SlackMessage.Template.parse(parser).             } catch (Exception e) {                 throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. failed to parse [{}] field", e, TYPE, watchId, actionId, Field.MESSAGE.getPreferredName()).             }         } else {             throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. unexpected token [{}]", TYPE, watchId, actionId, token).         }     }     if (message == null) {         throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. missing required [{}] field", TYPE, watchId, actionId, Field.MESSAGE.getPreferredName()).     }     return new SlackAction(account, message, proxy). }
false;public,static;2;3;;public static Builder builder(String account, SlackMessage.Template message) {     return new Builder(new SlackAction(account, message, null)). }
false;public;0;3;;public SentMessages sentMessages() {     return sentMessages. }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.field(type, sentMessages, params). }
false;static;1;15;;static Status status(SentMessages sentMessages) {     boolean hasSuccesses = false.     boolean hasFailures = false.     for (SentMessages.SentMessage message : sentMessages) {         if (message.isSuccess()) {             hasSuccesses = true.         } else {             hasFailures = true.         }         if (hasFailures && hasSuccesses) {             return Status.PARTIAL_FAILURE.         }     }     return hasFailures ? Status.FAILURE : Status.SUCCESS. }
false;public;0;3;;public SlackMessage getMessage() {     return message. }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject(type).field(Field.MESSAGE.getPreferredName(), message, params).endObject(). }
false;public;0;4;;@Override public SlackAction build() {     return action. }
