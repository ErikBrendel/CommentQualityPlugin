commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;0;3;;public WatcherSearchTemplateRequest getRequest() {     return request. }
false;public;0;3;;public TimeValue getTimeout() {     return timeout. }
false;public;0;3;;public ZoneId getDynamicNameTimeZone() {     return dynamicNameTimeZone. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     SearchTransform that = (SearchTransform) o.     if (request != null ? !request.equals(that.request) : that.request != null)         return false.     if (timeout != null ? !timeout.equals(that.timeout) : that.timeout != null)         return false.     return !(dynamicNameTimeZone != null ? !dynamicNameTimeZone.equals(that.dynamicNameTimeZone) : that.dynamicNameTimeZone != null). }
false;public;0;7;;@Override public int hashCode() {     int result = request != null ? request.hashCode() : 0.     result = 31 * result + (timeout != null ? timeout.hashCode() : 0).     result = 31 * result + (dynamicNameTimeZone != null ? dynamicNameTimeZone.hashCode() : 0).     return result. }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (request != null) {         builder.field(Field.REQUEST.getPreferredName(), request).     }     if (timeout != null) {         builder.humanReadableField(Field.TIMEOUT.getPreferredName(), Field.TIMEOUT_HUMAN.getPreferredName(), timeout).     }     if (dynamicNameTimeZone != null) {         builder.field(Field.DYNAMIC_NAME_TIMEZONE.getPreferredName(), dynamicNameTimeZone.toString()).     }     builder.endObject().     return builder. }
false;public,static;2;41;;public static SearchTransform parse(String watchId, XContentParser parser) throws IOException {     WatcherSearchTemplateRequest request = null.     TimeValue timeout = null.     ZoneId dynamicNameTimeZone = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Field.REQUEST.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 request = WatcherSearchTemplateRequest.fromXContent(parser, ExecutableSearchTransform.DEFAULT_SEARCH_TYPE).             } catch (ElasticsearchParseException srpe) {                 throw new ElasticsearchParseException("could not parse [{}] transform for watch [{}]. failed to parse [{}]", srpe, TYPE, watchId, currentFieldName).             }         } else if (Field.TIMEOUT.match(currentFieldName, parser.getDeprecationHandler())) {             timeout = timeValueMillis(parser.longValue()).         } else if (Field.TIMEOUT_HUMAN.match(currentFieldName, parser.getDeprecationHandler())) {             // Parser for human specified timeouts and 2.x compatibility             timeout = WatcherDateTimeUtils.parseTimeValue(parser, Field.TIMEOUT_HUMAN.toString()).         } else if (Field.DYNAMIC_NAME_TIMEZONE.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.VALUE_STRING) {                 dynamicNameTimeZone = DateUtils.of(parser.text()).             } else {                 throw new ElasticsearchParseException("could not parse [{}] transform for watch [{}]. failed to parse [{}]. must be a" + " string value (e.g. 'UTC' or '+01:00').", TYPE, watchId, currentFieldName).             }         } else {             throw new ElasticsearchParseException("could not parse [{}] transform for watch [{}]. unexpected field [{}]", TYPE, watchId, currentFieldName).         }     }     if (request == null) {         throw new ElasticsearchParseException("could not parse [{}] transform for watch [{}]. missing required [{}] field", TYPE, watchId, Field.REQUEST.getPreferredName()).     }     return new SearchTransform(request, timeout, dynamicNameTimeZone). }
false;public,static;1;3;;public static Builder builder(WatcherSearchTemplateRequest request) {     return new Builder(request). }
false;public;0;3;;public WatcherSearchTemplateRequest executedRequest() {     return request. }
false;protected;2;9;;@Override protected XContentBuilder typeXContent(XContentBuilder builder, Params params) throws IOException {     if (request != null) {         builder.startObject(type).         builder.field(Field.REQUEST.getPreferredName(), request).         builder.endObject().     }     return builder. }
false;public;1;4;;public Builder timeout(TimeValue readTimeout) {     this.timeout = readTimeout.     return this. }
false;public;1;4;;public Builder dynamicNameTimeZone(ZoneId dynamicNameTimeZone) {     this.dynamicNameTimeZone = dynamicNameTimeZone.     return this. }
false;public;0;4;;@Override public SearchTransform build() {     return new SearchTransform(request, timeout, dynamicNameTimeZone). }
