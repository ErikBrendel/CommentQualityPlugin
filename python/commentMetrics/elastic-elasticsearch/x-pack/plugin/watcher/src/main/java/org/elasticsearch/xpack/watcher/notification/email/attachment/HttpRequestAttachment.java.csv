commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public HttpRequestTemplate getRequestTemplate() {     return requestTemplate. }
false;public;0;3;;public String getContentType() {     return contentType. }
false;public;0;4;;@Override public String id() {     return id. }
false;public;0;4;;@Override public boolean inline() {     return inline. }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(id).startObject(HttpEmailAttachementParser.TYPE).field(HttpEmailAttachementParser.Fields.REQUEST.getPreferredName(), requestTemplate, params).     if (Strings.hasLength(contentType)) {         builder.field(HttpEmailAttachementParser.Fields.CONTENT_TYPE.getPreferredName(), contentType).     }     if (inline) {         builder.field(HttpEmailAttachementParser.Fields.INLINE.getPreferredName(), inline).     }     return builder.endObject().endObject(). }
false;public,static;1;3;;public static Builder builder(String id) {     return new Builder(id). }
false;public;0;4;;@Override public String type() {     return HttpEmailAttachementParser.TYPE. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     HttpRequestAttachment otherDataAttachment = (HttpRequestAttachment) o.     return Objects.equals(id, otherDataAttachment.id) && Objects.equals(requestTemplate, otherDataAttachment.requestTemplate) && Objects.equals(contentType, otherDataAttachment.contentType) && Objects.equals(inline, otherDataAttachment.inline). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id, requestTemplate, contentType, inline). }
false;public;1;4;;public Builder httpRequestTemplate(HttpRequestTemplate httpRequestTemplate) {     this.httpRequestTemplate = httpRequestTemplate.     return this. }
false;public;1;4;;public Builder contentType(String contentType) {     this.contentType = contentType.     return this. }
false;public;1;4;;public Builder inline(boolean inline) {     this.inline = inline.     return this. }
false;public;0;3;;public HttpRequestAttachment build() {     return new HttpRequestAttachment(id, httpRequestTemplate, inline, contentType). }
