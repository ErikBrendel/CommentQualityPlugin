commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public TextTemplate from() {     return from. }
false;public;0;3;;public TextTemplate[] replyTo() {     return replyTo. }
false;public;0;3;;public TextTemplate priority() {     return priority. }
false;public;0;3;;public TextTemplate[] to() {     return to. }
false;public;0;3;;public TextTemplate[] cc() {     return cc. }
false;public;0;3;;public TextTemplate[] bcc() {     return bcc. }
false;public;0;3;;public TextTemplate subject() {     return subject. }
false;public;0;3;;public TextTemplate textBody() {     return textBody. }
false;public;0;3;;public TextTemplate htmlBody() {     return htmlBody. }
false;public;4;43;;public Email.Builder render(TextTemplateEngine engine, Map<String, Object> model, HtmlSanitizer htmlSanitizer, Map<String, Attachment> attachments) throws AddressException {     Email.Builder builder = Email.builder().     if (from != null) {         builder.from(engine.render(from, model)).     }     if (replyTo != null) {         Email.AddressList addresses = templatesToAddressList(engine, replyTo, model).         builder.replyTo(addresses).     }     if (priority != null) {         builder.priority(Email.Priority.resolve(engine.render(priority, model))).     }     if (to != null) {         Email.AddressList addresses = templatesToAddressList(engine, to, model).         builder.to(addresses).     }     if (cc != null) {         Email.AddressList addresses = templatesToAddressList(engine, cc, model).         builder.cc(addresses).     }     if (bcc != null) {         Email.AddressList addresses = templatesToAddressList(engine, bcc, model).         builder.bcc(addresses).     }     if (subject != null) {         builder.subject(engine.render(subject, model)).     }     if (textBody != null) {         builder.textBody(engine.render(textBody, model)).     }     if (attachments != null) {         for (Attachment attachment : attachments.values()) {             builder.attach(attachment).         }     }     if (htmlBody != null) {         String renderedHtml = engine.render(htmlBody, model).         renderedHtml = htmlSanitizer.sanitize(renderedHtml).         builder.htmlBody(renderedHtml).     }     return builder. }
false;private,static;3;8;;private static Email.AddressList templatesToAddressList(TextTemplateEngine engine, TextTemplate[] templates, Map<String, Object> model) throws AddressException {     List<Email.Address> addresses = new ArrayList<>(templates.length).     for (TextTemplate template : templates) {         Email.AddressList.parse(engine.render(template, model)).forEach(addresses::add).     }     return new Email.AddressList(addresses). }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     EmailTemplate that = (EmailTemplate) o.     return Objects.equals(from, that.from) && Arrays.equals(replyTo, that.replyTo) && Objects.equals(priority, that.priority) && Arrays.equals(to, that.to) && Arrays.equals(cc, that.cc) && Arrays.equals(bcc, that.bcc) && Objects.equals(subject, that.subject) && Objects.equals(textBody, that.textBody) && Objects.equals(htmlBody, that.htmlBody). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(from, replyTo, priority, to, cc, bcc, subject, textBody, htmlBody). }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     xContentBody(builder, params).     return builder.endObject(). }
false;public;2;50;;public XContentBuilder xContentBody(XContentBuilder builder, Params params) throws IOException {     if (from != null) {         builder.field(Email.Field.FROM.getPreferredName(), from, params).     }     if (replyTo != null) {         builder.startArray(Email.Field.REPLY_TO.getPreferredName()).         for (TextTemplate template : replyTo) {             template.toXContent(builder, params).         }         builder.endArray().     }     if (priority != null) {         builder.field(Email.Field.PRIORITY.getPreferredName(), priority, params).     }     if (to != null) {         builder.startArray(Email.Field.TO.getPreferredName()).         for (TextTemplate template : to) {             template.toXContent(builder, params).         }         builder.endArray().     }     if (cc != null) {         builder.startArray(Email.Field.CC.getPreferredName()).         for (TextTemplate template : cc) {             template.toXContent(builder, params).         }         builder.endArray().     }     if (bcc != null) {         builder.startArray(Email.Field.BCC.getPreferredName()).         for (TextTemplate template : bcc) {             template.toXContent(builder, params).         }         builder.endArray().     }     if (subject != null) {         builder.field(Email.Field.SUBJECT.getPreferredName(), subject, params).     }     if (textBody != null || htmlBody != null) {         builder.startObject(Email.Field.BODY.getPreferredName()).         if (textBody != null) {             builder.field(Email.Field.BODY_TEXT.getPreferredName(), textBody, params).         }         if (htmlBody != null) {             builder.field(Email.Field.BODY_HTML.getPreferredName(), htmlBody, params).         }         builder.endObject().     }     return builder. }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;1;3;;public Builder from(String from) {     return from(new TextTemplate(from)). }
false;public;1;4;;public Builder from(TextTemplate from) {     this.from = from.     return this. }
false;public;1;7;;public Builder replyTo(String... replyTo) {     TextTemplate[] templates = new TextTemplate[replyTo.length].     for (int i = 0. i < templates.length. i++) {         templates[i] = new TextTemplate(replyTo[i]).     }     return replyTo(templates). }
false;public;1;4;;public Builder replyTo(TextTemplate... replyTo) {     this.replyTo = replyTo.     return this. }
false;public;1;3;;public Builder priority(Email.Priority priority) {     return priority(new TextTemplate(priority.name())). }
false;public;1;4;;public Builder priority(TextTemplate priority) {     this.priority = priority.     return this. }
false;public;1;7;;public Builder to(String... to) {     TextTemplate[] templates = new TextTemplate[to.length].     for (int i = 0. i < templates.length. i++) {         templates[i] = new TextTemplate(to[i]).     }     return to(templates). }
false;public;1;4;;public Builder to(TextTemplate... to) {     this.to = to.     return this. }
false;public;1;7;;public Builder cc(String... cc) {     TextTemplate[] templates = new TextTemplate[cc.length].     for (int i = 0. i < templates.length. i++) {         templates[i] = new TextTemplate(cc[i]).     }     return cc(templates). }
false;public;1;4;;public Builder cc(TextTemplate... cc) {     this.cc = cc.     return this. }
false;public;1;7;;public Builder bcc(String... bcc) {     TextTemplate[] templates = new TextTemplate[bcc.length].     for (int i = 0. i < templates.length. i++) {         templates[i] = new TextTemplate(bcc[i]).     }     return bcc(templates). }
false;public;1;4;;public Builder bcc(TextTemplate... bcc) {     this.bcc = bcc.     return this. }
false;public;1;3;;public Builder subject(String subject) {     return subject(new TextTemplate(subject)). }
false;public;1;4;;public Builder subject(TextTemplate subject) {     this.subject = subject.     return this. }
false;public;1;3;;public Builder textBody(String text) {     return textBody(new TextTemplate(text)). }
false;public;1;4;;public Builder textBody(TextTemplate text) {     this.textBody = text.     return this. }
false;public;1;3;;public Builder htmlBody(String html) {     return htmlBody(new TextTemplate(html)). }
false;public;1;4;;public Builder htmlBody(TextTemplate html) {     this.htmlBody = html.     return this. }
false;public;0;3;;public EmailTemplate build() {     return new EmailTemplate(from, replyTo, priority, to, cc, bcc, subject, textBody, htmlBody). }
false;public;2;78;;public boolean handle(String fieldName, XContentParser parser) throws IOException {     if (Email.Field.FROM.match(fieldName, parser.getDeprecationHandler())) {         builder.from(TextTemplate.parse(parser)).         validateEmailAddresses(builder.from).     } else if (Email.Field.REPLY_TO.match(fieldName, parser.getDeprecationHandler())) {         if (parser.currentToken() == XContentParser.Token.START_ARRAY) {             List<TextTemplate> templates = new ArrayList<>().             while (parser.nextToken() != XContentParser.Token.END_ARRAY) {                 templates.add(TextTemplate.parse(parser)).             }             builder.replyTo(templates.toArray(new TextTemplate[templates.size()])).         } else {             builder.replyTo(TextTemplate.parse(parser)).         }         validateEmailAddresses(builder.replyTo).     } else if (Email.Field.TO.match(fieldName, parser.getDeprecationHandler())) {         if (parser.currentToken() == XContentParser.Token.START_ARRAY) {             List<TextTemplate> templates = new ArrayList<>().             while (parser.nextToken() != XContentParser.Token.END_ARRAY) {                 templates.add(TextTemplate.parse(parser)).             }             builder.to(templates.toArray(new TextTemplate[templates.size()])).         } else {             builder.to(TextTemplate.parse(parser)).         }         validateEmailAddresses(builder.to).     } else if (Email.Field.CC.match(fieldName, parser.getDeprecationHandler())) {         if (parser.currentToken() == XContentParser.Token.START_ARRAY) {             List<TextTemplate> templates = new ArrayList<>().             while (parser.nextToken() != XContentParser.Token.END_ARRAY) {                 templates.add(TextTemplate.parse(parser)).             }             builder.cc(templates.toArray(new TextTemplate[templates.size()])).         } else {             builder.cc(TextTemplate.parse(parser)).         }         validateEmailAddresses(builder.cc).     } else if (Email.Field.BCC.match(fieldName, parser.getDeprecationHandler())) {         if (parser.currentToken() == XContentParser.Token.START_ARRAY) {             List<TextTemplate> templates = new ArrayList<>().             while (parser.nextToken() != XContentParser.Token.END_ARRAY) {                 templates.add(TextTemplate.parse(parser)).             }             builder.bcc(templates.toArray(new TextTemplate[templates.size()])).         } else {             builder.bcc(TextTemplate.parse(parser)).         }         validateEmailAddresses(builder.bcc).     } else if (Email.Field.PRIORITY.match(fieldName, parser.getDeprecationHandler())) {         builder.priority(TextTemplate.parse(parser)).     } else if (Email.Field.SUBJECT.match(fieldName, parser.getDeprecationHandler())) {         builder.subject(TextTemplate.parse(parser)).     } else if (Email.Field.BODY.match(fieldName, parser.getDeprecationHandler())) {         if (parser.currentToken() == XContentParser.Token.VALUE_STRING) {             builder.textBody(TextTemplate.parse(parser)).         } else if (parser.currentToken() == XContentParser.Token.START_OBJECT) {             XContentParser.Token token.             String currentFieldName = null.             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                 if (token == XContentParser.Token.FIELD_NAME) {                     currentFieldName = parser.currentName().                 } else if (currentFieldName == null) {                     throw new ElasticsearchParseException("could not parse email template. empty [{}] field", fieldName).                 } else if (Email.Field.BODY_TEXT.match(currentFieldName, parser.getDeprecationHandler())) {                     builder.textBody(TextTemplate.parse(parser)).                 } else if (Email.Field.BODY_HTML.match(currentFieldName, parser.getDeprecationHandler())) {                     builder.htmlBody(TextTemplate.parse(parser)).                 } else {                     throw new ElasticsearchParseException("could not parse email template. unknown field [{}.{}] field", fieldName, currentFieldName).                 }             }         }     } else {         return false.     }     return true. }
true;static;1;15;/**  * If this is a text template not using mustache  * @param emails The list of email addresses to parse  */ ;/**  * If this is a text template not using mustache  * @param emails The list of email addresses to parse  */ static void validateEmailAddresses(TextTemplate... emails) {     for (TextTemplate emailTemplate : emails) {         // no mustache, do validation         if (emailTemplate.isUsingMustache() == false) {             String email = emailTemplate.getTemplate().             try {                 for (Email.Address address : Email.AddressList.parse(email)) {                     address.validate().                 }             } catch (AddressException e) {                 throw new ElasticsearchParseException("invalid email address [{}]", e, email).             }         }     } }
false;public;0;3;;public EmailTemplate parsedTemplate() {     return builder.build(). }
