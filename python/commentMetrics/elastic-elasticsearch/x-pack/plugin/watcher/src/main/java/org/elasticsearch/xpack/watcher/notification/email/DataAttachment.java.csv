commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String contentType() {     return XContentType.YAML.mediaType(). }
false;public;2;4;;@Override public Attachment create(String id, Map<String, Object> data) {     return new Attachment.XContent.Yaml(id, id, new Payload.Simple(data)). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject().field(Field.FORMAT.getPreferredName(), "yaml").endObject(). }
false;public;0;4;;@Override public String contentType() {     return XContentType.JSON.mediaType(). }
false;public;2;4;;@Override public Attachment create(String id, Map<String, Object> data) {     return new Attachment.XContent.Json(id, id, new Payload.Simple(data)). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject().field(Field.FORMAT.getPreferredName(), "json").endObject(). }
false;public,abstract;0;1;;public abstract String contentType().
false;public,abstract;2;1;;public abstract Attachment create(String id, Map<String, Object> data).
false;public,static;1;8;;public static DataAttachment resolve(String format) {     switch(format.toLowerCase(Locale.ROOT)) {         case "yaml":             return YAML.         case "json":             return JSON.         default:             throw illegalArgument("unknown data attachment format [{}]", format).     } }
false;public,static;1;36;;public static DataAttachment parse(XContentParser parser) throws IOException {     XContentParser.Token token = parser.currentToken().     if (token == XContentParser.Token.VALUE_NULL) {         return null.     }     if (token == XContentParser.Token.VALUE_BOOLEAN) {         return parser.booleanValue() ? DEFAULT : null.     }     if (token != XContentParser.Token.START_OBJECT) {         throw new ElasticsearchParseException("could not parse data attachment. expected either a boolean value or an object but " + "found [{}] instead", token).     }     DataAttachment dataAttachment = DEFAULT.     String currentFieldName = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (currentFieldName == null) {             throw new ElasticsearchParseException("could not parse data attachment. expected [{}] field but found [{}] instead", Field.FORMAT.getPreferredName(), token).         } else if (Field.FORMAT.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.VALUE_STRING) {                 dataAttachment = resolve(parser.text()).             } else {                 throw new ElasticsearchParseException("could not parse data attachment. expected string value for [{}] field but " + "found [{}] instead", currentFieldName, token).             }         } else {             throw new ElasticsearchParseException("could not parse data attachment. unexpected field [{}]", currentFieldName).         }     }     return dataAttachment. }
