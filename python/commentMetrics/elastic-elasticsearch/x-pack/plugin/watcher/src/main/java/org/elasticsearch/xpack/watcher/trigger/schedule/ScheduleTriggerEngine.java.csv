commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;1;4;;@Override public void register(Consumer<Iterable<TriggerEvent>> consumer) {     consumers.add(consumer). }
false;public;3;21;;@Override public ScheduleTriggerEvent simulateEvent(String jobId, @Nullable Map<String, Object> data, TriggerService service) {     ZonedDateTime now = clock.instant().atZone(ZoneOffset.UTC).     if (data == null) {         return new ScheduleTriggerEvent(jobId, now, now).     }     Object value = data.get(ScheduleTriggerEvent.Field.TRIGGERED_TIME.getPreferredName()).     ZonedDateTime triggeredTime = value != null ? WatcherDateTimeUtils.convertToDate(value, clock) : now.     if (triggeredTime == null) {         throw illegalArgument("could not simulate schedule event. could not convert provided triggered time [{}] to date/time", value).     }     value = data.get(ScheduleTriggerEvent.Field.SCHEDULED_TIME.getPreferredName()).     ZonedDateTime scheduledTime = value != null ? WatcherDateTimeUtils.convertToDate(value, clock) : triggeredTime.     if (scheduledTime == null) {         throw illegalArgument("could not simulate schedule event. could not convert provided scheduled time [{}] to date/time", value).     }     return new ScheduleTriggerEvent(jobId, triggeredTime, scheduledTime). }
false;public;2;5;;@Override public ScheduleTrigger parseTrigger(String context, XContentParser parser) throws IOException {     Schedule schedule = scheduleRegistry.parse(context, parser).     return new ScheduleTrigger(schedule). }
false;public;4;5;;@Override public ScheduleTriggerEvent parseTriggerEvent(TriggerService service, String watchId, String context, XContentParser parser) throws IOException {     return ScheduleTriggerEvent.parse(parser, watchId, context, clock). }
