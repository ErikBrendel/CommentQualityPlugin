commented;modifiers;parameterAmount;loc;comment;code
false;public;2;34;;public String render(TextTemplate textTemplate, Map<String, Object> model) {     if (textTemplate == null) {         return null.     }     String template = textTemplate.getTemplate().     String mediaType = compileParams(detectContentType(template)).     template = trimContentType(textTemplate).     if (textTemplate.isUsingMustache() == false) {         return template.     }     Map<String, Object> mergedModel = new HashMap<>().     if (textTemplate.getParams() != null) {         mergedModel.putAll(textTemplate.getParams()).     }     mergedModel.putAll(model).     Map<String, String> options = null.     if (textTemplate.getType() == ScriptType.INLINE) {         options = new HashMap<>().         if (textTemplate.getScript() != null && textTemplate.getScript().getOptions() != null) {             options.putAll(textTemplate.getScript().getOptions()).         }         options.put(Script.CONTENT_TYPE_OPTION, mediaType).     }     Script script = new Script(textTemplate.getType(), textTemplate.getType() == ScriptType.STORED ? null : "mustache", template, options, mergedModel).     TemplateScript.Factory compiledTemplate = service.compile(script, Watcher.SCRIPT_TEMPLATE_CONTEXT).     return compiledTemplate.newInstance(model).execute(). }
false;private;1;18;;private String trimContentType(TextTemplate textTemplate) {     String template = textTemplate.getTemplate().     if (!template.startsWith("__")) {         // Doesn't even start with __ so can't have a content type         return template.     }     // There must be a __<content_type__:: prefix so the minimum length before detecting '__::' is 3     int index = template.indexOf("__::", 3).     // and have '__::' somewhere in the content     if (index >= 0 && index < 12) {         if (template.length() == 6) {             template = "".         } else {             template = template.substring(index + 4).         }     }     return template. }
false;private;1;10;;private XContentType detectContentType(String content) {     if (content.startsWith("__")) {         // There must be a __<content_type__:: prefix so the minimum length before detecting '__::' is 3         int endOfContentName = content.indexOf("__::", 3).         if (endOfContentName != -1) {             return XContentType.fromMediaTypeOrFormat(content.substring(2, endOfContentName)).         }     }     return null. }
false;private;1;7;;private String compileParams(XContentType contentType) {     if (contentType == XContentType.JSON) {         return "application/json".     } else {         return "text/plain".     } }
