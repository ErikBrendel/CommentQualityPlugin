commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (Strings.hasText(host) && port != null) {         builder.startObject("proxy").field("host", host).field("port", port).         if (scheme != null) {             builder.field("scheme", scheme.scheme()).         }         builder.endObject().     }     return builder. }
false;public;0;3;;public String getHost() {     return host. }
false;public;0;3;;public Integer getPort() {     return port. }
false;public;0;3;;public Scheme getScheme() {     return scheme. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     HttpProxy that = (HttpProxy) o.     return Objects.equals(port, that.port) && Objects.equals(host, that.host) && Objects.equals(scheme, that.scheme). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(host, port, scheme). }
false;public,static;1;28;;public static HttpProxy parse(XContentParser parser) throws IOException {     XContentParser.Token token.     String currentFieldName = null.     String host = null.     Integer port = null.     Scheme scheme = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (HOST.match(currentFieldName, parser.getDeprecationHandler())) {             host = parser.text().         } else if (SCHEME.match(currentFieldName, parser.getDeprecationHandler())) {             scheme = Scheme.parse(parser.text()).         } else if (PORT.match(currentFieldName, parser.getDeprecationHandler())) {             port = parser.intValue().             if (port <= 0 || port >= 65535) {                 throw new ElasticsearchParseException("Proxy port must be between 1 and 65534, but was " + port).             }         }     }     if (port == null || host == null) {         throw new ElasticsearchParseException("Proxy must contain 'port' and 'host' field").     }     return new HttpProxy(host, port, scheme). }
