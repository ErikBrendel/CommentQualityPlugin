commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "watcher_ack_watch". }
false;public;2;7;;@Override public RestResponse buildResponse(AckWatchResponse response, XContentBuilder builder) throws Exception {     return new BytesRestResponse(RestStatus.OK, builder.startObject().field(WatchField.STATUS.getPreferredName(), response.getStatus(), WatcherParams.HIDE_SECRETS).endObject()). }
false;public;2;17;;@Override public RestChannelConsumer doPrepareRequest(RestRequest request, WatcherClient client) throws IOException {     AckWatchRequest ackWatchRequest = new AckWatchRequest(request.param("id")).     String[] actions = request.paramAsStringArray("actions", null).     if (actions != null) {         ackWatchRequest.setActionIds(actions).     }     return channel -> client.ackWatch(ackWatchRequest, new RestBuilderListener<AckWatchResponse>(channel) {          @Override         public RestResponse buildResponse(AckWatchResponse response, XContentBuilder builder) throws Exception {             return new BytesRestResponse(RestStatus.OK, builder.startObject().field(WatchField.STATUS.getPreferredName(), response.getStatus(), WatcherParams.HIDE_SECRETS).endObject()).         }     }). }
