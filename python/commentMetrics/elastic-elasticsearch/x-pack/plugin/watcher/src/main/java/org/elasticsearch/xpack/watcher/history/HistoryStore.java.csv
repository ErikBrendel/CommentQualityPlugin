commented;modifiers;parameterAmount;loc;comment;code
true;public;1;12;/**  * Stores the specified watchRecord.  * If the specified watchRecord already was stored this call will fail with a version conflict.  */ ;/**  * Stores the specified watchRecord.  * If the specified watchRecord already was stored this call will fail with a version conflict.  */ public void put(WatchRecord watchRecord) throws Exception {     String index = HistoryStoreField.getHistoryIndexNameForTime(watchRecord.triggerEvent().triggeredTime()).     try (XContentBuilder builder = XContentFactory.jsonBuilder()) {         watchRecord.toXContent(builder, WatcherParams.HIDE_SECRETS).         IndexRequest request = new IndexRequest(index, DOC_TYPE, watchRecord.id().value()).source(builder).         request.opType(IndexRequest.OpType.CREATE).         bulkProcessor.add(request).     } catch (IOException ioe) {         throw ioException("failed to persist watch record [{}]", ioe, watchRecord).     } }
true;public;1;12;/**  * Stores the specified watchRecord.  * Any existing watchRecord will be overwritten.  */ ;/**  * Stores the specified watchRecord.  * Any existing watchRecord will be overwritten.  */ public void forcePut(WatchRecord watchRecord) {     String index = HistoryStoreField.getHistoryIndexNameForTime(watchRecord.triggerEvent().triggeredTime()).     try (XContentBuilder builder = XContentFactory.jsonBuilder()) {         watchRecord.toXContent(builder, WatcherParams.HIDE_SECRETS).         IndexRequest request = new IndexRequest(index, DOC_TYPE, watchRecord.id().value()).source(builder).         bulkProcessor.add(request).     } catch (IOException ioe) {         final WatchRecord wr = watchRecord.         logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to persist watch record [{}]", wr), ioe).     } }
true;public,static;1;6;/**  * Check if everything is set up for the history store to operate fully. Checks for the  * current watcher history index and if it is open.  *  * @param state The current cluster state  * @return true, if history store is ready to be started  */ ;/**  * Check if everything is set up for the history store to operate fully. Checks for the  * current watcher history index and if it is open.  *  * @param state The current cluster state  * @return true, if history store is ready to be started  */ public static boolean validate(ClusterState state) {     String currentIndex = HistoryStoreField.getHistoryIndexNameForTime(ZonedDateTime.now(ZoneOffset.UTC)).     IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(currentIndex, state.metaData()).     return indexMetaData == null || (indexMetaData.getState() == IndexMetaData.State.OPEN && state.routingTable().index(indexMetaData.getIndex()).allPrimaryShardsActive()). }
