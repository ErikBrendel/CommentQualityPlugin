# id;timestamp;commentText;codeText;commentWords;codeWords
InputRegistry -> public ExecutableInput<?, ?> parse(String watchId, XContentParser parser) throws IOException;1531179852;Reads the contents of parser to create the correct Input__@param parser                The parser containing the input definition_@return                      A new input instance from the parser;public ExecutableInput<?, ?> parse(String watchId, XContentParser parser) throws IOException {_        String type = null___        if (parser.currentToken() != XContentParser.Token.START_OBJECT) {_            throw new ElasticsearchParseException("could not parse input for watch [{}]. expected an object representing the input, but " +_                    "found [{}] instead", watchId, parser.currentToken())__        }__        XContentParser.Token token__        ExecutableInput<?, ?> input = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                type = parser.currentName()__            } else if (type == null) {_                throw new ElasticsearchParseException("could not parse input for watch [{}]. expected field indicating the input type, " +_                        "but found [{}] instead", watchId, token)__            } else if (token == XContentParser.Token.START_OBJECT) {_                InputFactory<?, ?, ?> factory = factories.get(type)__                if (factory == null) {_                    throw new ElasticsearchParseException("could not parse input for watch [{}]. unknown input type [{}]", watchId, type)__                }_                input = factory.parseExecutable(watchId, parser)__            } else {_                throw new ElasticsearchParseException("could not parse input for watch [{}]. expected an object representing input [{}], " +_                        "but found [{}] instead", watchId, type, token)__            }_        }__        if (input == null) {_            throw new ElasticsearchParseException("could not parse input for watch [{}]. expected field indicating the input type, but " +_                    "found an empty object instead", watchId, token)__        }__        return input__    };reads,the,contents,of,parser,to,create,the,correct,input,param,parser,the,parser,containing,the,input,definition,return,a,new,input,instance,from,the,parser;public,executable,input,parse,string,watch,id,xcontent,parser,parser,throws,ioexception,string,type,null,if,parser,current,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,could,not,parse,input,for,watch,expected,an,object,representing,the,input,but,found,instead,watch,id,parser,current,token,xcontent,parser,token,token,executable,input,input,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,type,parser,current,name,else,if,type,null,throw,new,elasticsearch,parse,exception,could,not,parse,input,for,watch,expected,field,indicating,the,input,type,but,found,instead,watch,id,token,else,if,token,xcontent,parser,token,input,factory,factory,factories,get,type,if,factory,null,throw,new,elasticsearch,parse,exception,could,not,parse,input,for,watch,unknown,input,type,watch,id,type,input,factory,parse,executable,watch,id,parser,else,throw,new,elasticsearch,parse,exception,could,not,parse,input,for,watch,expected,an,object,representing,input,but,found,instead,watch,id,type,token,if,input,null,throw,new,elasticsearch,parse,exception,could,not,parse,input,for,watch,expected,field,indicating,the,input,type,but,found,an,empty,object,instead,watch,id,token,return,input
InputRegistry -> public ExecutableInput<?, ?> parse(String watchId, XContentParser parser) throws IOException;1539615817;Reads the contents of parser to create the correct Input__@param parser                The parser containing the input definition_@return                      A new input instance from the parser;public ExecutableInput<?, ?> parse(String watchId, XContentParser parser) throws IOException {_        String type = null___        if (parser.currentToken() != XContentParser.Token.START_OBJECT) {_            throw new ElasticsearchParseException("could not parse input for watch [{}]. expected an object representing the input, but " +_                    "found [{}] instead", watchId, parser.currentToken())__        }__        XContentParser.Token token__        ExecutableInput<?, ?> input = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                type = parser.currentName()__            } else if (type == null) {_                throw new ElasticsearchParseException("could not parse input for watch [{}]. expected field indicating the input type, " +_                        "but found [{}] instead", watchId, token)__            } else if (token == XContentParser.Token.START_OBJECT) {_                InputFactory<?, ?, ?> factory = factories.get(type)__                if (factory == null) {_                    throw new ElasticsearchParseException("could not parse input for watch [{}]. unknown input type [{}]", watchId, type)__                }_                input = factory.parseExecutable(watchId, parser)__            } else {_                throw new ElasticsearchParseException("could not parse input for watch [{}]. expected an object representing input [{}], " +_                        "but found [{}] instead", watchId, type, token)__            }_        }__        if (input == null) {_            throw new ElasticsearchParseException("could not parse input for watch [{}]. expected field indicating the input type, but " +_                    "found an empty object instead", watchId, token)__        }__        return input__    };reads,the,contents,of,parser,to,create,the,correct,input,param,parser,the,parser,containing,the,input,definition,return,a,new,input,instance,from,the,parser;public,executable,input,parse,string,watch,id,xcontent,parser,parser,throws,ioexception,string,type,null,if,parser,current,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,could,not,parse,input,for,watch,expected,an,object,representing,the,input,but,found,instead,watch,id,parser,current,token,xcontent,parser,token,token,executable,input,input,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,type,parser,current,name,else,if,type,null,throw,new,elasticsearch,parse,exception,could,not,parse,input,for,watch,expected,field,indicating,the,input,type,but,found,instead,watch,id,token,else,if,token,xcontent,parser,token,input,factory,factory,factories,get,type,if,factory,null,throw,new,elasticsearch,parse,exception,could,not,parse,input,for,watch,unknown,input,type,watch,id,type,input,factory,parse,executable,watch,id,parser,else,throw,new,elasticsearch,parse,exception,could,not,parse,input,for,watch,expected,an,object,representing,input,but,found,instead,watch,id,type,token,if,input,null,throw,new,elasticsearch,parse,exception,could,not,parse,input,for,watch,expected,field,indicating,the,input,type,but,found,an,empty,object,instead,watch,id,token,return,input
