commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Set<String> types() {     return parsers.keySet(). }
false;public;2;19;;public Schedule parse(String context, XContentParser parser) throws IOException {     String type = null.     XContentParser.Token token.     Schedule schedule = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             type = parser.currentName().         } else if (type != null) {             schedule = parse(context, type, parser).         } else {             throw new ElasticsearchParseException("could not parse schedule. expected a schedule type field, but found [{}] instead", token).         }     }     if (schedule == null) {         throw new ElasticsearchParseException("could not parse schedule. expected a schedule type field, but no fields were found").     }     return schedule. }
false;public;3;7;;public Schedule parse(String context, String type, XContentParser parser) throws IOException {     Schedule.Parser scheduleParser = parsers.get(type).     if (scheduleParser == null) {         throw new ElasticsearchParseException("could not parse schedule for [{}]. unknown schedule type [{}]", context, type).     }     return scheduleParser.parse(parser). }
