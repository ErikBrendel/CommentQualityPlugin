commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public ScriptTransform.Result execute(WatchExecutionContext ctx, Payload payload) {     try {         return doExecute(ctx, payload).     } catch (Exception e) {         logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to execute [{}] transform for [{}]", TYPE, ctx.id()), e).         return new ScriptTransform.Result(e).     } }
false;;2;13;;ScriptTransform.Result doExecute(WatchExecutionContext ctx, Payload payload) throws IOException {     Script script = transform.getScript().     WatcherTransformScript.Factory factory = scriptService.compile(script, WatcherTransformScript.CONTEXT).     WatcherTransformScript transformScript = factory.newInstance(script.getParams(), ctx, payload).     Object value = transformScript.execute().     // TODO: deprecate one of these styles (returning a map or returning an opaque value below)     if (value instanceof Map) {         return new ScriptTransform.Result(new Payload.Simple((Map<String, Object>) value)).     }     Map<String, Object> data = new HashMap<>().     data.put("_value", value).     return new ScriptTransform.Result(new Payload.Simple(data)). }
