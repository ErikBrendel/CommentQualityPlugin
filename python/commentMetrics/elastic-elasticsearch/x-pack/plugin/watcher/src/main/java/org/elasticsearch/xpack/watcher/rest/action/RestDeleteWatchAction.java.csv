commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "watcher_delete_watch". }
false;public;2;10;;@Override public RestResponse buildResponse(DeleteWatchResponse response, XContentBuilder builder) throws Exception {     builder.startObject().field("_id", response.getId()).field("_version", response.getVersion()).field("found", response.isFound()).endObject().     RestStatus status = response.isFound() ? OK : NOT_FOUND.     return new BytesRestResponse(status, builder). }
false;protected;2;16;;@Override protected RestChannelConsumer doPrepareRequest(final RestRequest request, WatcherClient client) throws IOException {     DeleteWatchRequest deleteWatchRequest = new DeleteWatchRequest(request.param("id")).     return channel -> client.deleteWatch(deleteWatchRequest, new RestBuilderListener<DeleteWatchResponse>(channel) {          @Override         public RestResponse buildResponse(DeleteWatchResponse response, XContentBuilder builder) throws Exception {             builder.startObject().field("_id", response.getId()).field("_version", response.getVersion()).field("found", response.isFound()).endObject().             RestStatus status = response.isFound() ? OK : NOT_FOUND.             return new BytesRestResponse(status, builder).         }     }). }
