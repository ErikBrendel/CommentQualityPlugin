# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutableJiraAction -> static Map<String, Object> merge(final Map<String, Object> fields, final Map<String, ?> defaults, final Function<String, String> fn);1524684173;Merges the defaults provided as the second parameter into the content of the first_while applying a {@link Function} on both map key and map value.;static Map<String, Object> merge(final Map<String, Object> fields, final Map<String, ?> defaults, final Function<String, String> fn) {_        if (defaults != null) {_            for (Map.Entry<String, ?> defaultEntry : defaults.entrySet()) {_                Object value = defaultEntry.getValue()__                if (value instanceof String) {_                    _                    value = fn.apply((String) value)___                } else if (value instanceof Map) {_                    _                    value = merge(new HashMap<>(), (Map<String, ?>) value, fn)___                } else if (value instanceof String[]) {_                    _                    String[] newValues = new String[((String[]) value).length]__                    for (int i = 0_ i < newValues.length_ i++) {_                        newValues[i] = fn.apply(((String[]) value)[i])__                    }_                    value = newValues___                } else if (value instanceof List) {_                    _                    List<Object> newValues = new ArrayList<>(((List) value).size())__                    for (Object v : (List) value) {_                        if (v instanceof String) {_                            newValues.add(fn.apply((String) v))__                        } else {_                            newValues.add(v)__                        }_                    }_                    value = newValues__                }__                _                String key = fn.apply(defaultEntry.getKey())___                _                _                if (fields.containsKey(key) == false) {_                    fields.put(key, value)__                }_            }_        }_        return fields__    };merges,the,defaults,provided,as,the,second,parameter,into,the,content,of,the,first,while,applying,a,link,function,on,both,map,key,and,map,value;static,map,string,object,merge,final,map,string,object,fields,final,map,string,defaults,final,function,string,string,fn,if,defaults,null,for,map,entry,string,default,entry,defaults,entry,set,object,value,default,entry,get,value,if,value,instanceof,string,value,fn,apply,string,value,else,if,value,instanceof,map,value,merge,new,hash,map,map,string,value,fn,else,if,value,instanceof,string,string,new,values,new,string,string,value,length,for,int,i,0,i,new,values,length,i,new,values,i,fn,apply,string,value,i,value,new,values,else,if,value,instanceof,list,list,object,new,values,new,array,list,list,value,size,for,object,v,list,value,if,v,instanceof,string,new,values,add,fn,apply,string,v,else,new,values,add,v,value,new,values,string,key,fn,apply,default,entry,get,key,if,fields,contains,key,key,false,fields,put,key,value,return,fields
ExecutableJiraAction -> static Map<String, Object> merge(final Map<String, Object> fields, final Map<String, ?> defaults, final Function<String, String> fn);1538170812;Merges the defaults provided as the second parameter into the content of the first_while applying a {@link Function} on both map key and map value.;static Map<String, Object> merge(final Map<String, Object> fields, final Map<String, ?> defaults, final Function<String, String> fn) {_        if (defaults != null) {_            for (Map.Entry<String, ?> defaultEntry : defaults.entrySet()) {_                Object value = defaultEntry.getValue()__                if (value instanceof String) {_                    _                    value = fn.apply((String) value)___                } else if (value instanceof Map) {_                    _                    value = merge(new HashMap<>(), (Map<String, ?>) value, fn)___                } else if (value instanceof String[]) {_                    _                    String[] newValues = new String[((String[]) value).length]__                    for (int i = 0_ i < newValues.length_ i++) {_                        newValues[i] = fn.apply(((String[]) value)[i])__                    }_                    value = newValues___                } else if (value instanceof List) {_                    _                    List<Object> newValues = new ArrayList<>(((List) value).size())__                    for (Object v : (List) value) {_                        if (v instanceof String) {_                            newValues.add(fn.apply((String) v))__                        } else {_                            newValues.add(v)__                        }_                    }_                    value = newValues__                }__                _                String key = fn.apply(defaultEntry.getKey())___                _                _                if (fields.containsKey(key) == false) {_                    fields.put(key, value)__                }_            }_        }_        return fields__    };merges,the,defaults,provided,as,the,second,parameter,into,the,content,of,the,first,while,applying,a,link,function,on,both,map,key,and,map,value;static,map,string,object,merge,final,map,string,object,fields,final,map,string,defaults,final,function,string,string,fn,if,defaults,null,for,map,entry,string,default,entry,defaults,entry,set,object,value,default,entry,get,value,if,value,instanceof,string,value,fn,apply,string,value,else,if,value,instanceof,map,value,merge,new,hash,map,map,string,value,fn,else,if,value,instanceof,string,string,new,values,new,string,string,value,length,for,int,i,0,i,new,values,length,i,new,values,i,fn,apply,string,value,i,value,new,values,else,if,value,instanceof,list,list,object,new,values,new,array,list,list,value,size,for,object,v,list,value,if,v,instanceof,string,new,values,add,fn,apply,string,v,else,new,values,add,v,value,new,values,string,key,fn,apply,default,entry,get,key,if,fields,contains,key,key,false,fields,put,key,value,return,fields
ExecutableJiraAction -> static Map<String, Object> merge(final Map<String, Object> fields, final Map<String, ?> defaults, final Function<String, String> fn);1548720069;Merges the defaults provided as the second parameter into the content of the first_while applying a {@link Function} on both map key and map value.;static Map<String, Object> merge(final Map<String, Object> fields, final Map<String, ?> defaults, final Function<String, String> fn) {_        if (defaults != null) {_            for (Map.Entry<String, ?> defaultEntry : defaults.entrySet()) {_                Object value = defaultEntry.getValue()__                if (value instanceof String) {_                    _                    value = fn.apply((String) value)___                } else if (value instanceof Map) {_                    _                    value = merge(new HashMap<>(), (Map<String, ?>) value, fn)___                } else if (value instanceof String[]) {_                    _                    String[] newValues = new String[((String[]) value).length]__                    for (int i = 0_ i < newValues.length_ i++) {_                        newValues[i] = fn.apply(((String[]) value)[i])__                    }_                    value = newValues___                } else if (value instanceof List) {_                    _                    List<Object> newValues = new ArrayList<>(((List) value).size())__                    for (Object v : (List) value) {_                        if (v instanceof String) {_                            newValues.add(fn.apply((String) v))__                        } else if (v instanceof Map) {_                            newValues.add(merge(new HashMap<>(), (Map<String, ?>) v, fn))__                        } else {_                            newValues.add(v)__                        }_                    }_                    value = newValues__                }__                _                String key = fn.apply(defaultEntry.getKey())___                _                _                if (fields.containsKey(key) == false) {_                    fields.put(key, value)__                }_            }_        }_        return fields__    };merges,the,defaults,provided,as,the,second,parameter,into,the,content,of,the,first,while,applying,a,link,function,on,both,map,key,and,map,value;static,map,string,object,merge,final,map,string,object,fields,final,map,string,defaults,final,function,string,string,fn,if,defaults,null,for,map,entry,string,default,entry,defaults,entry,set,object,value,default,entry,get,value,if,value,instanceof,string,value,fn,apply,string,value,else,if,value,instanceof,map,value,merge,new,hash,map,map,string,value,fn,else,if,value,instanceof,string,string,new,values,new,string,string,value,length,for,int,i,0,i,new,values,length,i,new,values,i,fn,apply,string,value,i,value,new,values,else,if,value,instanceof,list,list,object,new,values,new,array,list,list,value,size,for,object,v,list,value,if,v,instanceof,string,new,values,add,fn,apply,string,v,else,if,v,instanceof,map,new,values,add,merge,new,hash,map,map,string,v,fn,else,new,values,add,v,value,new,values,string,key,fn,apply,default,entry,get,key,if,fields,contains,key,key,false,fields,put,key,value,return,fields
