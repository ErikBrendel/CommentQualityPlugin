commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Attachment that = (Attachment) o.     return Objects.equals(fallback, that.fallback) && Objects.equals(color, that.color) && Objects.equals(pretext, that.pretext) && Objects.equals(authorName, that.authorName) && Objects.equals(authorLink, that.authorLink) && Objects.equals(authorIcon, that.authorIcon) && Objects.equals(title, that.title) && Objects.equals(titleLink, that.titleLink) && Objects.equals(text, that.text) && Objects.equals(imageUrl, that.imageUrl) && Objects.equals(thumbUrl, that.thumbUrl) && Objects.equals(actions, that.actions) && Arrays.equals(markdownSupportedFields, that.markdownSupportedFields) && Arrays.equals(fields, that.fields). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(fallback, color, pretext, authorName, authorLink, authorIcon, title, titleLink, text, fields, imageUrl, thumbUrl, markdownSupportedFields, actions). }
true;public;2;60;/**  * renders the attachment in slack compatible structure:  * <p>  * https://api.slack.com/docs/attachments#attachment_structure  */ ;/**  * renders the attachment in slack compatible structure:  * <p>  * https://api.slack.com/docs/attachments#attachment_structure  */ @Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (fallback != null) {         builder.field(XField.FALLBACK.getPreferredName(), fallback).     }     if (color != null) {         builder.field(XField.COLOR.getPreferredName(), color).     }     if (pretext != null) {         builder.field(XField.PRETEXT.getPreferredName(), pretext).     }     if (authorName != null) {         builder.field(XField.AUTHOR_NAME.getPreferredName(), authorName).         if (authorLink != null) {             builder.field(XField.AUTHOR_LINK.getPreferredName(), authorLink).         }         if (authorIcon != null) {             builder.field(XField.AUTHOR_ICON.getPreferredName(), authorIcon).         }     }     if (title != null) {         builder.field(XField.TITLE.getPreferredName(), title).         if (titleLink != null) {             builder.field(XField.TITLE_LINK.getPreferredName(), titleLink).         }     }     if (text != null) {         builder.field(XField.TEXT.getPreferredName(), text).     }     if (fields != null) {         builder.startArray(XField.FIELDS.getPreferredName()).         for (Field field : fields) {             field.toXContent(builder, params).         }         builder.endArray().     }     if (imageUrl != null) {         builder.field(XField.IMAGE_URL.getPreferredName(), imageUrl).     }     if (thumbUrl != null) {         builder.field(XField.THUMB_URL.getPreferredName(), thumbUrl).     }     if (markdownSupportedFields != null) {         builder.startArray(XField.MARKDOWN_IN.getPreferredName()).         for (String field : markdownSupportedFields) {             builder.value(field).         }         builder.endArray().     }     if (actions != null && actions.isEmpty() == false) {         builder.startArray("actions").         for (Action action : actions) {             action.toXContent(builder, params).         }         builder.endArray().     }     return builder.endObject(). }
false;public;3;36;;public Attachment render(TextTemplateEngine engine, Map<String, Object> model, SlackMessageDefaults.AttachmentDefaults defaults) {     String fallback = this.fallback != null ? engine.render(this.fallback, model) : defaults.fallback.     String color = this.color != null ? engine.render(this.color, model) : defaults.color.     String pretext = this.pretext != null ? engine.render(this.pretext, model) : defaults.pretext.     String authorName = this.authorName != null ? engine.render(this.authorName, model) : defaults.authorName.     String authorLink = this.authorLink != null ? engine.render(this.authorLink, model) : defaults.authorLink.     String authorIcon = this.authorIcon != null ? engine.render(this.authorIcon, model) : defaults.authorIcon.     String title = this.title != null ? engine.render(this.title, model) : defaults.title.     String titleLink = this.titleLink != null ? engine.render(this.titleLink, model) : defaults.titleLink.     String text = this.text != null ? engine.render(this.text, model) : defaults.text.     String imageUrl = this.imageUrl != null ? engine.render(this.imageUrl, model) : defaults.imageUrl.     String thumbUrl = this.thumbUrl != null ? engine.render(this.thumbUrl, model) : defaults.thumbUrl.     Field[] fields = null.     if (this.fields != null) {         fields = new Field[this.fields.length].         for (int i = 0. i < fields.length. i++) {             fields[i] = this.fields[i].render(engine, model, defaults.field).         }     }     String[] markdownFields = null.     if (this.markdownSupportedFields != null) {         markdownFields = new String[this.markdownSupportedFields.length].         for (int i = 0. i < markdownSupportedFields.length. i++) {             markdownFields[i] = engine.render(this.markdownSupportedFields[i], model).         }     }     List<Action> actions = new ArrayList<>().     if (this.actions != null && this.actions.isEmpty() == false) {         for (Action.Template action : this.actions) {             actions.add(action.render(engine, model)).         }     }     return new Attachment(fallback, color, pretext, authorName, authorLink, authorIcon, title, titleLink, text, fields, imageUrl, thumbUrl, markdownFields, actions). }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Template template = (Template) o.     return Objects.equals(fallback, template.fallback) && Objects.equals(color, template.color) && Objects.equals(pretext, template.pretext) && Objects.equals(authorName, template.authorName) && Objects.equals(authorLink, template.authorLink) && Objects.equals(authorIcon, template.authorIcon) && Objects.equals(title, template.title) && Objects.equals(titleLink, template.titleLink) && Objects.equals(text, template.text) && Objects.equals(imageUrl, template.imageUrl) && Objects.equals(thumbUrl, template.thumbUrl) && Objects.equals(actions, template.actions) && Arrays.equals(fields, template.fields) && Arrays.equals(markdownSupportedFields, template.markdownSupportedFields). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(fallback, color, pretext, authorName, authorLink, authorIcon, title, titleLink, text, fields, imageUrl, thumbUrl, markdownSupportedFields, actions). }
false;public;2;60;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (fallback != null) {         builder.field(XField.FALLBACK.getPreferredName(), fallback, params).     }     if (color != null) {         builder.field(XField.COLOR.getPreferredName(), color, params).     }     if (pretext != null) {         builder.field(XField.PRETEXT.getPreferredName(), pretext, params).     }     if (authorName != null) {         builder.field(XField.AUTHOR_NAME.getPreferredName(), authorName, params).         if (authorLink != null) {             builder.field(XField.AUTHOR_LINK.getPreferredName(), authorLink, params).         }         if (authorIcon != null) {             builder.field(XField.AUTHOR_ICON.getPreferredName(), authorIcon, params).         }     }     if (title != null) {         builder.field(XField.TITLE.getPreferredName(), title, params).         if (titleLink != null) {             builder.field(XField.TITLE_LINK.getPreferredName(), titleLink, params).         }     }     if (text != null) {         builder.field(XField.TEXT.getPreferredName(), text, params).     }     if (fields != null) {         builder.startArray(XField.FIELDS.getPreferredName()).         for (Field.Template field : fields) {             field.toXContent(builder, params).         }         builder.endArray().     }     if (imageUrl != null) {         builder.field(XField.IMAGE_URL.getPreferredName(), imageUrl, params).     }     if (thumbUrl != null) {         builder.field(XField.THUMB_URL.getPreferredName(), thumbUrl, params).     }     if (markdownSupportedFields != null) {         builder.startArray(XField.MARKDOWN_IN.getPreferredName()).         for (TextTemplate field : markdownSupportedFields) {             field.toXContent(builder, params).         }         builder.endArray().     }     if (actions != null && actions.isEmpty() == false) {         builder.startArray(XField.ACTIONS.getPreferredName()).         for (Action.Template action : actions) {             action.toXContent(builder, params).         }         builder.endArray().     }     return builder.endObject(). }
false;public,static;1;167;;public static Template parse(XContentParser parser) throws IOException {     TextTemplate fallback = null.     TextTemplate color = null.     TextTemplate pretext = null.     TextTemplate authorName = null.     TextTemplate authorLink = null.     TextTemplate authorIcon = null.     TextTemplate title = null.     TextTemplate titleLink = null.     TextTemplate text = null.     Field.Template[] fields = null.     TextTemplate imageUrl = null.     TextTemplate thumbUrl = null.     TextTemplate[] markdownFields = null.     List<Action.Template> actions = new ArrayList<>().     XContentParser.Token token = null.     String currentFieldName = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (XField.FALLBACK.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 fallback = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.FALLBACK).             }         } else if (XField.COLOR.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 color = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.COLOR).             }         } else if (XField.PRETEXT.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 pretext = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.PRETEXT).             }         } else if (XField.AUTHOR_NAME.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 authorName = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.AUTHOR_NAME).             }         } else if (XField.AUTHOR_LINK.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 authorLink = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.AUTHOR_LINK).             }         } else if (XField.AUTHOR_ICON.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 authorIcon = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.AUTHOR_ICON).             }         } else if (XField.TITLE.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 title = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.TITLE).             }         } else if (XField.TITLE_LINK.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 titleLink = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.TITLE_LINK).             }         } else if (XField.TEXT.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 text = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.TEXT).             }         } else if (XField.FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.START_ARRAY) {                 List<Field.Template> list = new ArrayList<>().                 while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                     try {                         list.add(Field.Template.parse(parser)).                     } catch (ElasticsearchParseException pe) {                         throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.FIELDS).                     }                 }                 fields = list.toArray(new Field.Template[list.size()]).             } else {                 try {                     fields = new Field.Template[] { Field.Template.parse(parser) }.                 } catch (ElasticsearchParseException pe) {                     throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.FIELDS).                 }             }         } else if (XField.IMAGE_URL.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 imageUrl = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.IMAGE_URL).             }         } else if (XField.THUMB_URL.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 thumbUrl = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.THUMB_URL).             }         } else if (XField.MARKDOWN_IN.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.START_ARRAY) {                 List<TextTemplate> list = new ArrayList<>().                 while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                     try {                         list.add(new TextTemplate(parser.text())).                     } catch (ElasticsearchParseException pe) {                         throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.MARKDOWN_IN).                     }                 }                 markdownFields = list.toArray(new TextTemplate[list.size()]).             } else {                 try {                     markdownFields = new TextTemplate[] { new TextTemplate(parser.text()) }.                 } catch (ElasticsearchParseException pe) {                     throw new ElasticsearchParseException("could not parse message attachment. failed to parse [{}] field", pe, XField.MARKDOWN_IN).                 }             }         } else if (XField.ACTIONS.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.START_OBJECT) {                 actions.add(Action.ACTION_PARSER.parse(parser, null)).             }         } else {             throw new ElasticsearchParseException("could not parse message attachment field. unexpected field [{}]", currentFieldName).         }     }     if (authorName == null) {         if (authorLink != null) {             throw new ElasticsearchParseException("could not parse message attachment field. found field [{}], but no [{}] is " + "defined", XField.AUTHOR_LINK, XField.AUTHOR_NAME).         }         if (authorIcon != null) {             throw new ElasticsearchParseException("could not parse message attachment field. found field [{}], but no [{}] is " + "defined", XField.AUTHOR_ICON, XField.AUTHOR_NAME).         }     }     if (title == null) {         if (titleLink != null) {             throw new ElasticsearchParseException("could not parse message attachment field. found field [{}], but no [{}] is " + "defined", XField.TITLE_LINK, XField.TITLE).         }     }     return new Template(fallback, color, pretext, authorName, authorLink, authorIcon, title, titleLink, text, fields, imageUrl, thumbUrl, markdownFields, actions). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;1;4;;public Builder setFallback(TextTemplate fallback) {     this.fallback = fallback.     return this. }
false;public;1;3;;public Builder setFallback(String fallback) {     return setFallback(new TextTemplate(fallback)). }
false;public;1;4;;public Builder setColor(TextTemplate color) {     this.color = color.     return this. }
false;public;1;3;;public Builder setColor(String color) {     return setColor(new TextTemplate(color)). }
false;public;1;4;;public Builder setPretext(TextTemplate pretext) {     this.pretext = pretext.     return this. }
false;public;1;3;;public Builder setPretext(String pretext) {     return setPretext(new TextTemplate(pretext)). }
false;public;1;4;;public Builder setAuthorName(TextTemplate authorName) {     this.authorName = authorName.     return this. }
false;public;1;3;;public Builder setAuthorName(String authorName) {     return setAuthorName(new TextTemplate(authorName)). }
false;public;1;4;;public Builder setAuthorLink(TextTemplate authorLink) {     this.authorLink = authorLink.     return this. }
false;public;1;3;;public Builder setAuthorLink(String authorLink) {     return setAuthorLink(new TextTemplate(authorLink)). }
false;public;1;4;;public Builder setAuthorIcon(TextTemplate authorIcon) {     this.authorIcon = authorIcon.     return this. }
false;public;1;3;;public Builder setAuthorIcon(String authorIcon) {     return setAuthorIcon(new TextTemplate(authorIcon)). }
false;public;1;4;;public Builder setTitle(TextTemplate title) {     this.title = title.     return this. }
false;public;1;3;;public Builder setTitle(String title) {     return setTitle(new TextTemplate(title)). }
false;public;1;4;;public Builder setTitleLink(TextTemplate titleLink) {     this.titleLink = titleLink.     return this. }
false;public;1;3;;public Builder setTitleLink(String titleLink) {     return setTitleLink(new TextTemplate(titleLink)). }
false;public;1;4;;public Builder setText(TextTemplate text) {     this.text = text.     return this. }
false;public;1;3;;public Builder setText(String text) {     return setText(new TextTemplate(text)). }
false;public;3;4;;public Builder addField(TextTemplate title, TextTemplate value, boolean isShort) {     fields.add(new Field.Template(title, value, isShort)).     return this. }
false;public;3;3;;public Builder addField(String title, String value, boolean isShort) {     return addField(new TextTemplate(title), new TextTemplate(value), isShort). }
false;public;1;4;;public Builder setImageUrl(TextTemplate imageUrl) {     this.imageUrl = imageUrl.     return this. }
false;public;1;3;;public Builder setImageUrl(String imageUrl) {     return setImageUrl(new TextTemplate(imageUrl)). }
false;public;1;4;;public Builder setThumbUrl(TextTemplate thumbUrl) {     this.thumbUrl = thumbUrl.     return this. }
false;public;1;3;;public Builder setThumbUrl(String thumbUrl) {     return setThumbUrl(new TextTemplate(thumbUrl)). }
false;public;1;4;;public Builder addMarkdownField(String name) {     this.markdownFields.add(new TextTemplate(name)).     return this. }
false;public;1;4;;public Builder addAction(Action.Template action) {     this.actions.add(action).     return this. }
false;public;0;7;;public Template build() {     Field.Template[] fields = this.fields.isEmpty() ? null : this.fields.toArray(new Field.Template[this.fields.size()]).     TextTemplate[] markdownFields = this.markdownFields.isEmpty() ? null : this.markdownFields.toArray(new TextTemplate[this.markdownFields.size()]).     return new Template(fallback, color, pretext, authorName, authorLink, authorIcon, title, titleLink, text, fields, imageUrl, thumbUrl, markdownFields, actions). }
