commented;modifiers;parameterAmount;loc;comment;code
false;private,static;3;7;;private static String getSetting(String accountName, Settings settings, Setting<SecureString> secureSetting) {     SecureString secureString = secureSetting.get(settings).     if (secureString == null || secureString.length() < 1) {         throw requiredSettingException(accountName, secureSetting.getKey()).     }     return secureString.toString(). }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public Map<String, Object> getDefaults() {     return issueDefaults. }
false;public;2;13;;public JiraIssue createIssue(final Map<String, Object> fields, final HttpProxy proxy) throws IOException {     HttpRequest request = HttpRequest.builder(url.getHost(), url.getPort()).scheme(Scheme.parse(url.getScheme())).method(HttpMethod.POST).path(url.getPath().isEmpty() || url.getPath().equals("/") ? DEFAULT_PATH : url.getPath()).jsonBody((builder, params) -> builder.field("fields", fields)).auth(new BasicAuth(user, password.toCharArray())).proxy(proxy).build().     HttpResponse response = httpClient.execute(request).     return JiraIssue.responded(name, fields, request, response). }
false;private,static;2;3;;private static SettingsException requiredSettingException(String account, String setting) {     return new SettingsException("invalid jira [" + account + "] account settings. missing required [" + setting + "] setting"). }
