commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;0;3;;public Payload getPayload() {     return payload. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     SimpleInput that = (SimpleInput) o.     return payload.equals(that.payload). }
false;public;0;4;;@Override public int hashCode() {     return payload.hashCode(). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return payload.toXContent(builder, params). }
false;public,static;2;8;;public static SimpleInput parse(String watchId, XContentParser parser) throws IOException {     if (parser.currentToken() != XContentParser.Token.START_OBJECT) {         throw new ElasticsearchParseException("could not parse [{}] input for watch [{}]. expected an object but found [{}] instead", TYPE, watchId, parser.currentToken()).     }     Payload payload = new Payload.Simple(parser.map()).     return new SimpleInput(payload). }
false;public,static;1;3;;public static Builder builder(Payload payload) {     return new Builder(payload). }
false;protected;2;4;;@Override protected XContentBuilder typeXContent(XContentBuilder builder, Params params) throws IOException {     return builder. }
false;public;0;4;;@Override public SimpleInput build() {     return new SimpleInput(payload). }
