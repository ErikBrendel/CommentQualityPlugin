commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     LoggingAction action = (LoggingAction) o.     if (!text.equals(action.text))         return false.     if (level != action.level)         return false.     return !(category != null ? !category.equals(action.category) : action.category != null). }
false;public;0;7;;@Override public int hashCode() {     int result = text.hashCode().     result = 31 * result + (level != null ? level.hashCode() : 0).     result = 31 * result + (category != null ? category.hashCode() : 0).     return result. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (category != null) {         builder.field(Field.CATEGORY.getPreferredName(), category).     }     builder.field(Field.LEVEL.getPreferredName(), level.value()).     builder.field(Field.TEXT.getPreferredName(), text, params).     return builder.endObject(). }
false;public,static;3;44;;public static LoggingAction parse(String watchId, String actionId, XContentParser parser) throws IOException {     String category = null.     LoggingLevel level = null.     TextTemplate text = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Field.TEXT.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 text = TextTemplate.parse(parser).             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. failed to parse [{}] field", pe, TYPE, watchId, actionId, Field.TEXT.getPreferredName()).             }         } else if (token == XContentParser.Token.VALUE_STRING) {             if (Field.CATEGORY.match(currentFieldName, parser.getDeprecationHandler())) {                 category = parser.text().             } else if (Field.LEVEL.match(currentFieldName, parser.getDeprecationHandler())) {                 try {                     level = LoggingLevel.valueOf(parser.text().toUpperCase(Locale.ROOT)).                 } catch (IllegalArgumentException iae) {                     throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. unknown logging level [{}]", TYPE, watchId, actionId, parser.text()).                 }             } else {                 throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. unexpected string field [{}]", TYPE, watchId, actionId, currentFieldName).             }         } else {             throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. unexpected token [{}]", TYPE, watchId, actionId, token).         }     }     if (text == null) {         throw new ElasticsearchParseException("failed to parse [{}] action [{}/{}]. missing required [{}] field", TYPE, watchId, actionId, Field.TEXT.getPreferredName()).     }     return new LoggingAction(text, level, category). }
false;public,static;1;3;;public static Builder builder(TextTemplate template) {     return new Builder(template). }
false;public;0;3;;public String loggedText() {     return loggedText. }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject(type).field(Field.LOGGED_TEXT.getPreferredName(), loggedText).endObject(). }
false;public;0;3;;public String loggedText() {     return loggedText. }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject(type).field(Field.LOGGED_TEXT.getPreferredName(), loggedText).endObject(). }
false;public;1;4;;public Builder setLevel(LoggingLevel level) {     this.level = level.     return this. }
false;public;1;4;;public Builder setCategory(String category) {     this.category = category.     return this. }
false;public;0;4;;@Override public LoggingAction build() {     return new LoggingAction(text, level, category). }
