commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getUsername() {     return username. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     BasicAuth other = (BasicAuth) o.     return Objects.equals(username, other.username) && Objects.equals(password, other.password). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(username, password). }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Field.USERNAME.getPreferredName(), username).     // if the password is not null, ensure we never return the original password value, unless it is encrypted with the CryptoService     if (password != null) {         if (WatcherParams.hideSecrets(params) && password.value().startsWith(CryptoService.ENCRYPTED_TEXT_PREFIX) == false) {             builder.field(Field.PASSWORD.getPreferredName(), WatcherXContentParser.REDACTED_PASSWORD).         } else {             builder.field(Field.PASSWORD.getPreferredName(), password.value()).         }     }     return builder.endObject(). }
false;public,static;1;28;;public static BasicAuth parseInner(XContentParser parser) throws IOException {     String username = null.     Secret password = null.     String fieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             fieldName = parser.currentName().         } else if (token == XContentParser.Token.VALUE_STRING) {             if (Field.USERNAME.getPreferredName().equals(fieldName)) {                 username = parser.text().             } else if (Field.PASSWORD.getPreferredName().equals(fieldName)) {                 password = WatcherXContentParser.secretOrNull(parser).             } else {                 throw new ElasticsearchParseException("unsupported field [" + fieldName + "]").             }         } else {             throw new ElasticsearchParseException("unsupported token [" + token + "]").         }     }     if (username == null) {         throw new ElasticsearchParseException("username is a required option").     }     return new BasicAuth(username, password). }
false;public,static;1;13;;public static BasicAuth parse(XContentParser parser) throws IOException {     String type = null.     XContentParser.Token token.     BasicAuth auth = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             type = parser.currentName().         } else if (token == XContentParser.Token.START_OBJECT && type != null) {             auth = BasicAuth.parseInner(parser).         }     }     return auth. }
