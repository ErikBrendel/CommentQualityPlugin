# id;timestamp;commentText;codeText;commentWords;codeWords
HttpClient -> static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy);1524684173;Enriches the config object optionally with proxy information__@param config    The request builder config object_@param request   The request parsed into the HTTP client;static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {_        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {_            _            _            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme()__            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme)__            config.setProxy(proxy)__        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {_            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme())__            config.setProxy(proxy)__        }_    };enriches,the,config,object,optionally,with,proxy,information,param,config,the,request,builder,config,object,param,request,the,request,parsed,into,the,http,client;static,void,set,proxy,request,config,builder,config,http,request,request,http,proxy,configured,proxy,if,request,proxy,null,request,proxy,equals,http,proxy,false,string,scheme,request,proxy,get,scheme,null,request,proxy,get,scheme,scheme,scheme,http,scheme,http,host,proxy,new,http,host,request,proxy,get,host,request,proxy,get,port,scheme,config,set,proxy,proxy,else,if,http,proxy,equals,configured,proxy,false,http,host,proxy,new,http,host,configured,proxy,get,host,configured,proxy,get,port,configured,proxy,get,scheme,scheme,config,set,proxy,proxy
HttpClient -> static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy);1525859433;Enriches the config object optionally with proxy information__@param config    The request builder config object_@param request   The request parsed into the HTTP client;static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {_        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {_            _            _            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme()__            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme)__            config.setProxy(proxy)__        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {_            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme())__            config.setProxy(proxy)__        }_    };enriches,the,config,object,optionally,with,proxy,information,param,config,the,request,builder,config,object,param,request,the,request,parsed,into,the,http,client;static,void,set,proxy,request,config,builder,config,http,request,request,http,proxy,configured,proxy,if,request,proxy,null,request,proxy,equals,http,proxy,false,string,scheme,request,proxy,get,scheme,null,request,proxy,get,scheme,scheme,scheme,http,scheme,http,host,proxy,new,http,host,request,proxy,get,host,request,proxy,get,port,scheme,config,set,proxy,proxy,else,if,http,proxy,equals,configured,proxy,false,http,host,proxy,new,http,host,configured,proxy,get,host,configured,proxy,get,port,configured,proxy,get,scheme,scheme,config,set,proxy,proxy
HttpClient -> static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy);1531729807;Enriches the config object optionally with proxy information__@param config    The request builder config object_@param request   The request parsed into the HTTP client;static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {_        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {_            _            _            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme()__            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme)__            config.setProxy(proxy)__        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {_            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme())__            config.setProxy(proxy)__        }_    };enriches,the,config,object,optionally,with,proxy,information,param,config,the,request,builder,config,object,param,request,the,request,parsed,into,the,http,client;static,void,set,proxy,request,config,builder,config,http,request,request,http,proxy,configured,proxy,if,request,proxy,null,request,proxy,equals,http,proxy,false,string,scheme,request,proxy,get,scheme,null,request,proxy,get,scheme,scheme,scheme,http,scheme,http,host,proxy,new,http,host,request,proxy,get,host,request,proxy,get,port,scheme,config,set,proxy,proxy,else,if,http,proxy,equals,configured,proxy,false,http,host,proxy,new,http,host,configured,proxy,get,host,configured,proxy,get,port,configured,proxy,get,scheme,scheme,config,set,proxy,proxy
HttpClient -> static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy);1534338685;Enriches the config object optionally with proxy information__@param config    The request builder config object_@param request   The request parsed into the HTTP client;static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {_        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {_            _            _            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme()__            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme)__            config.setProxy(proxy)__        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {_            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme())__            config.setProxy(proxy)__        }_    };enriches,the,config,object,optionally,with,proxy,information,param,config,the,request,builder,config,object,param,request,the,request,parsed,into,the,http,client;static,void,set,proxy,request,config,builder,config,http,request,request,http,proxy,configured,proxy,if,request,proxy,null,request,proxy,equals,http,proxy,false,string,scheme,request,proxy,get,scheme,null,request,proxy,get,scheme,scheme,scheme,http,scheme,http,host,proxy,new,http,host,request,proxy,get,host,request,proxy,get,port,scheme,config,set,proxy,proxy,else,if,http,proxy,equals,configured,proxy,false,http,host,proxy,new,http,host,configured,proxy,get,host,configured,proxy,get,port,configured,proxy,get,scheme,scheme,config,set,proxy,proxy
HttpClient -> static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy);1537300661;Enriches the config object optionally with proxy information__@param config    The request builder config object_@param request   The request parsed into the HTTP client;static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {_        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {_            _            _            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme()__            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme)__            config.setProxy(proxy)__        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {_            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme())__            config.setProxy(proxy)__        }_    };enriches,the,config,object,optionally,with,proxy,information,param,config,the,request,builder,config,object,param,request,the,request,parsed,into,the,http,client;static,void,set,proxy,request,config,builder,config,http,request,request,http,proxy,configured,proxy,if,request,proxy,null,request,proxy,equals,http,proxy,false,string,scheme,request,proxy,get,scheme,null,request,proxy,get,scheme,scheme,scheme,http,scheme,http,host,proxy,new,http,host,request,proxy,get,host,request,proxy,get,port,scheme,config,set,proxy,proxy,else,if,http,proxy,equals,configured,proxy,false,http,host,proxy,new,http,host,configured,proxy,get,host,configured,proxy,get,port,configured,proxy,get,scheme,scheme,config,set,proxy,proxy
HttpClient -> static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy);1541008027;Enriches the config object optionally with proxy information__@param config    The request builder config object_@param request   The request parsed into the HTTP client;static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {_        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {_            _            _            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme()__            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme)__            config.setProxy(proxy)__        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {_            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme())__            config.setProxy(proxy)__        }_    };enriches,the,config,object,optionally,with,proxy,information,param,config,the,request,builder,config,object,param,request,the,request,parsed,into,the,http,client;static,void,set,proxy,request,config,builder,config,http,request,request,http,proxy,configured,proxy,if,request,proxy,null,request,proxy,equals,http,proxy,false,string,scheme,request,proxy,get,scheme,null,request,proxy,get,scheme,scheme,scheme,http,scheme,http,host,proxy,new,http,host,request,proxy,get,host,request,proxy,get,port,scheme,config,set,proxy,proxy,else,if,http,proxy,equals,configured,proxy,false,http,host,proxy,new,http,host,configured,proxy,get,host,configured,proxy,get,port,configured,proxy,get,scheme,scheme,config,set,proxy,proxy
HttpClient -> static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy);1541092382;Enriches the config object optionally with proxy information__@param config    The request builder config object_@param request   The request parsed into the HTTP client;static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {_        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {_            _            _            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme()__            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme)__            config.setProxy(proxy)__        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {_            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme())__            config.setProxy(proxy)__        }_    };enriches,the,config,object,optionally,with,proxy,information,param,config,the,request,builder,config,object,param,request,the,request,parsed,into,the,http,client;static,void,set,proxy,request,config,builder,config,http,request,request,http,proxy,configured,proxy,if,request,proxy,null,request,proxy,equals,http,proxy,false,string,scheme,request,proxy,get,scheme,null,request,proxy,get,scheme,scheme,scheme,http,scheme,http,host,proxy,new,http,host,request,proxy,get,host,request,proxy,get,port,scheme,config,set,proxy,proxy,else,if,http,proxy,equals,configured,proxy,false,http,host,proxy,new,http,host,configured,proxy,get,host,configured,proxy,get,port,configured,proxy,get,scheme,scheme,config,set,proxy,proxy
HttpClient -> static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy);1543343306;Enriches the config object optionally with proxy information__@param config    The request builder config object_@param request   The request parsed into the HTTP client;static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {_        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {_            _            _            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme()__            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme)__            config.setProxy(proxy)__        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {_            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme())__            config.setProxy(proxy)__        }_    };enriches,the,config,object,optionally,with,proxy,information,param,config,the,request,builder,config,object,param,request,the,request,parsed,into,the,http,client;static,void,set,proxy,request,config,builder,config,http,request,request,http,proxy,configured,proxy,if,request,proxy,null,request,proxy,equals,http,proxy,false,string,scheme,request,proxy,get,scheme,null,request,proxy,get,scheme,scheme,scheme,http,scheme,http,host,proxy,new,http,host,request,proxy,get,host,request,proxy,get,port,scheme,config,set,proxy,proxy,else,if,http,proxy,equals,configured,proxy,false,http,host,proxy,new,http,host,configured,proxy,get,host,configured,proxy,get,port,configured,proxy,get,scheme,scheme,config,set,proxy,proxy
HttpClient -> static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy);1547194967;Enriches the config object optionally with proxy information__@param config    The request builder config object_@param request   The request parsed into the HTTP client;static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {_        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {_            _            _            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme()__            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme)__            config.setProxy(proxy)__        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {_            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme())__            config.setProxy(proxy)__        }_    };enriches,the,config,object,optionally,with,proxy,information,param,config,the,request,builder,config,object,param,request,the,request,parsed,into,the,http,client;static,void,set,proxy,request,config,builder,config,http,request,request,http,proxy,configured,proxy,if,request,proxy,null,request,proxy,equals,http,proxy,false,string,scheme,request,proxy,get,scheme,null,request,proxy,get,scheme,scheme,scheme,http,scheme,http,host,proxy,new,http,host,request,proxy,get,host,request,proxy,get,port,scheme,config,set,proxy,proxy,else,if,http,proxy,equals,configured,proxy,false,http,host,proxy,new,http,host,configured,proxy,get,host,configured,proxy,get,port,configured,proxy,get,scheme,scheme,config,set,proxy,proxy
HttpClient -> static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy);1548883469;Enriches the config object optionally with proxy information__@param config    The request builder config object_@param request   The request parsed into the HTTP client;static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {_        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {_            _            _            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme()__            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme)__            config.setProxy(proxy)__        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {_            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme())__            config.setProxy(proxy)__        }_    };enriches,the,config,object,optionally,with,proxy,information,param,config,the,request,builder,config,object,param,request,the,request,parsed,into,the,http,client;static,void,set,proxy,request,config,builder,config,http,request,request,http,proxy,configured,proxy,if,request,proxy,null,request,proxy,equals,http,proxy,false,string,scheme,request,proxy,get,scheme,null,request,proxy,get,scheme,scheme,scheme,http,scheme,http,host,proxy,new,http,host,request,proxy,get,host,request,proxy,get,port,scheme,config,set,proxy,proxy,else,if,http,proxy,equals,configured,proxy,false,http,host,proxy,new,http,host,configured,proxy,get,host,configured,proxy,get,port,configured,proxy,get,scheme,scheme,config,set,proxy,proxy
HttpClient -> static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy);1551125855;Enriches the config object optionally with proxy information__@param config    The request builder config object_@param request   The request parsed into the HTTP client;static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {_        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {_            _            _            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme()__            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme)__            config.setProxy(proxy)__        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {_            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme())__            config.setProxy(proxy)__        }_    };enriches,the,config,object,optionally,with,proxy,information,param,config,the,request,builder,config,object,param,request,the,request,parsed,into,the,http,client;static,void,set,proxy,request,config,builder,config,http,request,request,http,proxy,configured,proxy,if,request,proxy,null,request,proxy,equals,http,proxy,false,string,scheme,request,proxy,get,scheme,null,request,proxy,get,scheme,scheme,scheme,http,scheme,http,host,proxy,new,http,host,request,proxy,get,host,request,proxy,get,port,scheme,config,set,proxy,proxy,else,if,http,proxy,equals,configured,proxy,false,http,host,proxy,new,http,host,configured,proxy,get,host,configured,proxy,get,port,configured,proxy,get,scheme,scheme,config,set,proxy,proxy
HttpClient -> private HttpProxy getProxyFromSettings();1524684173;Creates a HTTP proxy from the system wide settings__@return A http proxy instance, if no settings are configured this will be a HttpProxy.NO_PROXY instance;private HttpProxy getProxyFromSettings() {_        String proxyHost = HttpSettings.PROXY_HOST.get(settings)__        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?_                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP__        int proxyPort = HttpSettings.PROXY_PORT.get(settings)__        if (proxyPort != 0 && Strings.hasText(proxyHost)) {_            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort)__        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {_            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +_                    HttpSettings.PROXY_PORT.getKey() + "]")__        }__        if (proxyPort > 0 && Strings.hasText(proxyHost)) {_            return new HttpProxy(proxyHost, proxyPort, proxyScheme)__        }__        return HttpProxy.NO_PROXY__    };creates,a,http,proxy,from,the,system,wide,settings,return,a,http,proxy,instance,if,no,settings,are,configured,this,will,be,a,http,proxy,instance;private,http,proxy,get,proxy,from,settings,string,proxy,host,http,settings,get,settings,scheme,proxy,scheme,http,settings,exists,settings,scheme,parse,http,settings,get,settings,scheme,http,int,proxy,port,http,settings,get,settings,if,proxy,port,0,strings,has,text,proxy,host,logger,info,using,default,proxy,for,http,input,and,slack,hipchat,pagerduty,webhook,actions,proxy,host,proxy,port,else,if,proxy,port,0,strings,has,text,proxy,host,throw,new,illegal,argument,exception,http,proxy,requires,both,settings,http,settings,get,key,and,http,settings,get,key,if,proxy,port,0,strings,has,text,proxy,host,return,new,http,proxy,proxy,host,proxy,port,proxy,scheme,return,http,proxy
HttpClient -> private HttpProxy getProxyFromSettings();1525859433;Creates a HTTP proxy from the system wide settings__@return A http proxy instance, if no settings are configured this will be a HttpProxy.NO_PROXY instance;private HttpProxy getProxyFromSettings() {_        String proxyHost = HttpSettings.PROXY_HOST.get(settings)__        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?_                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP__        int proxyPort = HttpSettings.PROXY_PORT.get(settings)__        if (proxyPort != 0 && Strings.hasText(proxyHost)) {_            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort)__        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {_            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +_                    HttpSettings.PROXY_PORT.getKey() + "]")__        }__        if (proxyPort > 0 && Strings.hasText(proxyHost)) {_            return new HttpProxy(proxyHost, proxyPort, proxyScheme)__        }__        return HttpProxy.NO_PROXY__    };creates,a,http,proxy,from,the,system,wide,settings,return,a,http,proxy,instance,if,no,settings,are,configured,this,will,be,a,http,proxy,instance;private,http,proxy,get,proxy,from,settings,string,proxy,host,http,settings,get,settings,scheme,proxy,scheme,http,settings,exists,settings,scheme,parse,http,settings,get,settings,scheme,http,int,proxy,port,http,settings,get,settings,if,proxy,port,0,strings,has,text,proxy,host,logger,info,using,default,proxy,for,http,input,and,slack,hipchat,pagerduty,webhook,actions,proxy,host,proxy,port,else,if,proxy,port,0,strings,has,text,proxy,host,throw,new,illegal,argument,exception,http,proxy,requires,both,settings,http,settings,get,key,and,http,settings,get,key,if,proxy,port,0,strings,has,text,proxy,host,return,new,http,proxy,proxy,host,proxy,port,proxy,scheme,return,http,proxy
HttpClient -> private HttpProxy getProxyFromSettings();1531729807;Creates a HTTP proxy from the system wide settings__@return A http proxy instance, if no settings are configured this will be a HttpProxy.NO_PROXY instance;private HttpProxy getProxyFromSettings() {_        String proxyHost = HttpSettings.PROXY_HOST.get(settings)__        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?_                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP__        int proxyPort = HttpSettings.PROXY_PORT.get(settings)__        if (proxyPort != 0 && Strings.hasText(proxyHost)) {_            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort)__        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {_            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +_                    HttpSettings.PROXY_PORT.getKey() + "]")__        }__        if (proxyPort > 0 && Strings.hasText(proxyHost)) {_            return new HttpProxy(proxyHost, proxyPort, proxyScheme)__        }__        return HttpProxy.NO_PROXY__    };creates,a,http,proxy,from,the,system,wide,settings,return,a,http,proxy,instance,if,no,settings,are,configured,this,will,be,a,http,proxy,instance;private,http,proxy,get,proxy,from,settings,string,proxy,host,http,settings,get,settings,scheme,proxy,scheme,http,settings,exists,settings,scheme,parse,http,settings,get,settings,scheme,http,int,proxy,port,http,settings,get,settings,if,proxy,port,0,strings,has,text,proxy,host,logger,info,using,default,proxy,for,http,input,and,slack,hipchat,pagerduty,webhook,actions,proxy,host,proxy,port,else,if,proxy,port,0,strings,has,text,proxy,host,throw,new,illegal,argument,exception,http,proxy,requires,both,settings,http,settings,get,key,and,http,settings,get,key,if,proxy,port,0,strings,has,text,proxy,host,return,new,http,proxy,proxy,host,proxy,port,proxy,scheme,return,http,proxy
HttpClient -> private HttpProxy getProxyFromSettings();1534338685;Creates a HTTP proxy from the system wide settings__@return A http proxy instance, if no settings are configured this will be a HttpProxy.NO_PROXY instance;private HttpProxy getProxyFromSettings() {_        String proxyHost = HttpSettings.PROXY_HOST.get(settings)__        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?_                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP__        int proxyPort = HttpSettings.PROXY_PORT.get(settings)__        if (proxyPort != 0 && Strings.hasText(proxyHost)) {_            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort)__        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {_            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +_                    HttpSettings.PROXY_PORT.getKey() + "]")__        }__        if (proxyPort > 0 && Strings.hasText(proxyHost)) {_            return new HttpProxy(proxyHost, proxyPort, proxyScheme)__        }__        return HttpProxy.NO_PROXY__    };creates,a,http,proxy,from,the,system,wide,settings,return,a,http,proxy,instance,if,no,settings,are,configured,this,will,be,a,http,proxy,instance;private,http,proxy,get,proxy,from,settings,string,proxy,host,http,settings,get,settings,scheme,proxy,scheme,http,settings,exists,settings,scheme,parse,http,settings,get,settings,scheme,http,int,proxy,port,http,settings,get,settings,if,proxy,port,0,strings,has,text,proxy,host,logger,info,using,default,proxy,for,http,input,and,slack,hipchat,pagerduty,webhook,actions,proxy,host,proxy,port,else,if,proxy,port,0,strings,has,text,proxy,host,throw,new,illegal,argument,exception,http,proxy,requires,both,settings,http,settings,get,key,and,http,settings,get,key,if,proxy,port,0,strings,has,text,proxy,host,return,new,http,proxy,proxy,host,proxy,port,proxy,scheme,return,http,proxy
HttpClient -> private HttpProxy getProxyFromSettings();1537300661;Creates an HTTP proxy from the system wide settings__@return An HTTP proxy instance, if no settings are configured this will be an HttpProxy.NO_PROXY instance;private HttpProxy getProxyFromSettings() {_        String proxyHost = HttpSettings.PROXY_HOST.get(settings)__        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?_                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP__        int proxyPort = HttpSettings.PROXY_PORT.get(settings)__        if (proxyPort != 0 && Strings.hasText(proxyHost)) {_            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort)__        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {_            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +_                    HttpSettings.PROXY_PORT.getKey() + "]")__        }__        if (proxyPort > 0 && Strings.hasText(proxyHost)) {_            return new HttpProxy(proxyHost, proxyPort, proxyScheme)__        }__        return HttpProxy.NO_PROXY__    };creates,an,http,proxy,from,the,system,wide,settings,return,an,http,proxy,instance,if,no,settings,are,configured,this,will,be,an,http,proxy,instance;private,http,proxy,get,proxy,from,settings,string,proxy,host,http,settings,get,settings,scheme,proxy,scheme,http,settings,exists,settings,scheme,parse,http,settings,get,settings,scheme,http,int,proxy,port,http,settings,get,settings,if,proxy,port,0,strings,has,text,proxy,host,logger,info,using,default,proxy,for,http,input,and,slack,hipchat,pagerduty,webhook,actions,proxy,host,proxy,port,else,if,proxy,port,0,strings,has,text,proxy,host,throw,new,illegal,argument,exception,http,proxy,requires,both,settings,http,settings,get,key,and,http,settings,get,key,if,proxy,port,0,strings,has,text,proxy,host,return,new,http,proxy,proxy,host,proxy,port,proxy,scheme,return,http,proxy
HttpClient -> private HttpProxy getProxyFromSettings(Settings settings);1541008027;Creates an HTTP proxy from the system wide settings__@return An HTTP proxy instance, if no settings are configured this will be an HttpProxy.NO_PROXY instance;private HttpProxy getProxyFromSettings(Settings settings) {_        String proxyHost = HttpSettings.PROXY_HOST.get(settings)__        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?_                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP__        int proxyPort = HttpSettings.PROXY_PORT.get(settings)__        if (proxyPort != 0 && Strings.hasText(proxyHost)) {_            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort)__        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {_            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +_                    HttpSettings.PROXY_PORT.getKey() + "]")__        }__        if (proxyPort > 0 && Strings.hasText(proxyHost)) {_            return new HttpProxy(proxyHost, proxyPort, proxyScheme)__        }__        return HttpProxy.NO_PROXY__    };creates,an,http,proxy,from,the,system,wide,settings,return,an,http,proxy,instance,if,no,settings,are,configured,this,will,be,an,http,proxy,instance;private,http,proxy,get,proxy,from,settings,settings,settings,string,proxy,host,http,settings,get,settings,scheme,proxy,scheme,http,settings,exists,settings,scheme,parse,http,settings,get,settings,scheme,http,int,proxy,port,http,settings,get,settings,if,proxy,port,0,strings,has,text,proxy,host,logger,info,using,default,proxy,for,http,input,and,slack,hipchat,pagerduty,webhook,actions,proxy,host,proxy,port,else,if,proxy,port,0,strings,has,text,proxy,host,throw,new,illegal,argument,exception,http,proxy,requires,both,settings,http,settings,get,key,and,http,settings,get,key,if,proxy,port,0,strings,has,text,proxy,host,return,new,http,proxy,proxy,host,proxy,port,proxy,scheme,return,http,proxy
HttpClient -> private HttpProxy getProxyFromSettings(Settings settings);1541092382;Creates an HTTP proxy from the system wide settings__@return An HTTP proxy instance, if no settings are configured this will be an HttpProxy.NO_PROXY instance;private HttpProxy getProxyFromSettings(Settings settings) {_        String proxyHost = HttpSettings.PROXY_HOST.get(settings)__        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?_                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP__        int proxyPort = HttpSettings.PROXY_PORT.get(settings)__        if (proxyPort != 0 && Strings.hasText(proxyHost)) {_            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort)__        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {_            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +_                    HttpSettings.PROXY_PORT.getKey() + "]")__        }__        if (proxyPort > 0 && Strings.hasText(proxyHost)) {_            return new HttpProxy(proxyHost, proxyPort, proxyScheme)__        }__        return HttpProxy.NO_PROXY__    };creates,an,http,proxy,from,the,system,wide,settings,return,an,http,proxy,instance,if,no,settings,are,configured,this,will,be,an,http,proxy,instance;private,http,proxy,get,proxy,from,settings,settings,settings,string,proxy,host,http,settings,get,settings,scheme,proxy,scheme,http,settings,exists,settings,scheme,parse,http,settings,get,settings,scheme,http,int,proxy,port,http,settings,get,settings,if,proxy,port,0,strings,has,text,proxy,host,logger,info,using,default,proxy,for,http,input,and,slack,hipchat,pagerduty,webhook,actions,proxy,host,proxy,port,else,if,proxy,port,0,strings,has,text,proxy,host,throw,new,illegal,argument,exception,http,proxy,requires,both,settings,http,settings,get,key,and,http,settings,get,key,if,proxy,port,0,strings,has,text,proxy,host,return,new,http,proxy,proxy,host,proxy,port,proxy,scheme,return,http,proxy
HttpClient -> private HttpProxy getProxyFromSettings(Settings settings);1543343306;Creates an HTTP proxy from the system wide settings__@return An HTTP proxy instance, if no settings are configured this will be an HttpProxy.NO_PROXY instance;private HttpProxy getProxyFromSettings(Settings settings) {_        String proxyHost = HttpSettings.PROXY_HOST.get(settings)__        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?_                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP__        int proxyPort = HttpSettings.PROXY_PORT.get(settings)__        if (proxyPort != 0 && Strings.hasText(proxyHost)) {_            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort)__        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {_            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +_                    HttpSettings.PROXY_PORT.getKey() + "]")__        }__        if (proxyPort > 0 && Strings.hasText(proxyHost)) {_            return new HttpProxy(proxyHost, proxyPort, proxyScheme)__        }__        return HttpProxy.NO_PROXY__    };creates,an,http,proxy,from,the,system,wide,settings,return,an,http,proxy,instance,if,no,settings,are,configured,this,will,be,an,http,proxy,instance;private,http,proxy,get,proxy,from,settings,settings,settings,string,proxy,host,http,settings,get,settings,scheme,proxy,scheme,http,settings,exists,settings,scheme,parse,http,settings,get,settings,scheme,http,int,proxy,port,http,settings,get,settings,if,proxy,port,0,strings,has,text,proxy,host,logger,info,using,default,proxy,for,http,input,and,slack,hipchat,pagerduty,webhook,actions,proxy,host,proxy,port,else,if,proxy,port,0,strings,has,text,proxy,host,throw,new,illegal,argument,exception,http,proxy,requires,both,settings,http,settings,get,key,and,http,settings,get,key,if,proxy,port,0,strings,has,text,proxy,host,return,new,http,proxy,proxy,host,proxy,port,proxy,scheme,return,http,proxy
HttpClient -> private HttpProxy getProxyFromSettings(Settings settings);1547194967;Creates an HTTP proxy from the system wide settings__@return An HTTP proxy instance, if no settings are configured this will be an HttpProxy.NO_PROXY instance;private HttpProxy getProxyFromSettings(Settings settings) {_        String proxyHost = HttpSettings.PROXY_HOST.get(settings)__        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?_                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP__        int proxyPort = HttpSettings.PROXY_PORT.get(settings)__        if (proxyPort != 0 && Strings.hasText(proxyHost)) {_            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort)__        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {_            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +_                    HttpSettings.PROXY_PORT.getKey() + "]")__        }__        if (proxyPort > 0 && Strings.hasText(proxyHost)) {_            return new HttpProxy(proxyHost, proxyPort, proxyScheme)__        }__        return HttpProxy.NO_PROXY__    };creates,an,http,proxy,from,the,system,wide,settings,return,an,http,proxy,instance,if,no,settings,are,configured,this,will,be,an,http,proxy,instance;private,http,proxy,get,proxy,from,settings,settings,settings,string,proxy,host,http,settings,get,settings,scheme,proxy,scheme,http,settings,exists,settings,scheme,parse,http,settings,get,settings,scheme,http,int,proxy,port,http,settings,get,settings,if,proxy,port,0,strings,has,text,proxy,host,logger,info,using,default,proxy,for,http,input,and,slack,hipchat,pagerduty,webhook,actions,proxy,host,proxy,port,else,if,proxy,port,0,strings,has,text,proxy,host,throw,new,illegal,argument,exception,http,proxy,requires,both,settings,http,settings,get,key,and,http,settings,get,key,if,proxy,port,0,strings,has,text,proxy,host,return,new,http,proxy,proxy,host,proxy,port,proxy,scheme,return,http,proxy
HttpClient -> private HttpProxy getProxyFromSettings(Settings settings);1548883469;Creates an HTTP proxy from the system wide settings__@return An HTTP proxy instance, if no settings are configured this will be an HttpProxy.NO_PROXY instance;private HttpProxy getProxyFromSettings(Settings settings) {_        String proxyHost = HttpSettings.PROXY_HOST.get(settings)__        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?_                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP__        int proxyPort = HttpSettings.PROXY_PORT.get(settings)__        if (proxyPort != 0 && Strings.hasText(proxyHost)) {_            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort)__        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {_            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +_                    HttpSettings.PROXY_PORT.getKey() + "]")__        }__        if (proxyPort > 0 && Strings.hasText(proxyHost)) {_            return new HttpProxy(proxyHost, proxyPort, proxyScheme)__        }__        return HttpProxy.NO_PROXY__    };creates,an,http,proxy,from,the,system,wide,settings,return,an,http,proxy,instance,if,no,settings,are,configured,this,will,be,an,http,proxy,instance;private,http,proxy,get,proxy,from,settings,settings,settings,string,proxy,host,http,settings,get,settings,scheme,proxy,scheme,http,settings,exists,settings,scheme,parse,http,settings,get,settings,scheme,http,int,proxy,port,http,settings,get,settings,if,proxy,port,0,strings,has,text,proxy,host,logger,info,using,default,proxy,for,http,input,and,slack,hipchat,pagerduty,webhook,actions,proxy,host,proxy,port,else,if,proxy,port,0,strings,has,text,proxy,host,throw,new,illegal,argument,exception,http,proxy,requires,both,settings,http,settings,get,key,and,http,settings,get,key,if,proxy,port,0,strings,has,text,proxy,host,return,new,http,proxy,proxy,host,proxy,port,proxy,scheme,return,http,proxy
HttpClient -> private HttpProxy getProxyFromSettings(Settings settings);1551125855;Creates an HTTP proxy from the system wide settings__@return An HTTP proxy instance, if no settings are configured this will be an HttpProxy.NO_PROXY instance;private HttpProxy getProxyFromSettings(Settings settings) {_        String proxyHost = HttpSettings.PROXY_HOST.get(settings)__        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?_                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP__        int proxyPort = HttpSettings.PROXY_PORT.get(settings)__        if (proxyPort != 0 && Strings.hasText(proxyHost)) {_            logger.info("Using default proxy for http input and slack/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort)__        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {_            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +_                    HttpSettings.PROXY_PORT.getKey() + "]")__        }__        if (proxyPort > 0 && Strings.hasText(proxyHost)) {_            return new HttpProxy(proxyHost, proxyPort, proxyScheme)__        }__        return HttpProxy.NO_PROXY__    };creates,an,http,proxy,from,the,system,wide,settings,return,an,http,proxy,instance,if,no,settings,are,configured,this,will,be,an,http,proxy,instance;private,http,proxy,get,proxy,from,settings,settings,settings,string,proxy,host,http,settings,get,settings,scheme,proxy,scheme,http,settings,exists,settings,scheme,parse,http,settings,get,settings,scheme,http,int,proxy,port,http,settings,get,settings,if,proxy,port,0,strings,has,text,proxy,host,logger,info,using,default,proxy,for,http,input,and,slack,pagerduty,webhook,actions,proxy,host,proxy,port,else,if,proxy,port,0,strings,has,text,proxy,host,throw,new,illegal,argument,exception,http,proxy,requires,both,settings,http,settings,get,key,and,http,settings,get,key,if,proxy,port,0,strings,has,text,proxy,host,return,new,http,proxy,proxy,host,proxy,port,proxy,scheme,return,http,proxy
