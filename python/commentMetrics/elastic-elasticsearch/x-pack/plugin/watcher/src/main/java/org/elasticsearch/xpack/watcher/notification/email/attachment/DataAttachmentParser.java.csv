commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;2;22;;@Override public DataAttachment parse(String id, XContentParser parser) throws IOException {     org.elasticsearch.xpack.watcher.notification.email.DataAttachment dataAttachment = org.elasticsearch.xpack.watcher.notification.email.DataAttachment.YAML.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Strings.hasLength(currentFieldName) && Fields.FORMAT.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.VALUE_STRING) {                 dataAttachment = resolve(parser.text()).             } else {                 throw new ElasticsearchParseException("could not parse data attachment. expected string value for [{}] field but " + "found [{}] instead", currentFieldName, token).             }         }     }     return new DataAttachment(id, dataAttachment). }
false;public;3;5;;@Override public Attachment toAttachment(WatchExecutionContext ctx, Payload payload, DataAttachment attachment) throws IOException {     Map<String, Object> model = Variables.createCtxParamsMap(ctx, payload).     return attachment.getDataAttachment().create(attachment.id(), model). }
