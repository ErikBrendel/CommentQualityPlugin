# id;timestamp;commentText;codeText;commentWords;codeWords
NotificationService -> private static SecureSettings extractSecureSettings(Settings source, List<Setting<?>> securePluginSettings)             throws GeneralSecurityException;1543520056;Extracts the {@link SecureSettings}` out of the passed in {@link Settings} object. The {@code Setting} argument has to have the_{@code SecureSettings} open/available. Normally {@code SecureSettings} are available only under specific callstacks (eg. during node_initialization or during a `reload` call). The returned copy can be reused freely as it will never be closed (this is a bit of_cheating, but it is necessary in this specific circumstance). Only works for secure settings of type string (not file).__@param source_A {@code Settings} object with its {@code SecureSettings} open/available._@param securePluginSettings_The list of settings to copy._@return A copy of the {@code SecureSettings} of the passed in {@code Settings} argument.;private static SecureSettings extractSecureSettings(Settings source, List<Setting<?>> securePluginSettings)_            throws GeneralSecurityException {_        _        final SecureSettings sourceSecureSettings = Settings.builder().put(source, true).getSecureSettings()__        _        final Map<String, SecureString> cache = new HashMap<>()__        if (sourceSecureSettings != null && securePluginSettings != null) {_            for (final String settingKey : sourceSecureSettings.getSettingNames()) {_                for (final Setting<?> secureSetting : securePluginSettings) {_                    if (secureSetting.match(settingKey)) {_                        cache.put(settingKey, sourceSecureSettings.getString(settingKey))__                    }_                }_            }_        }_        return new SecureSettings() {__            @Override_            public boolean isLoaded() {_                return true__            }__            @Override_            public SecureString getString(String setting) throws GeneralSecurityException {_                return cache.get(setting)__            }__            @Override_            public Set<String> getSettingNames() {_                return cache.keySet()__            }__            @Override_            public InputStream getFile(String setting) throws GeneralSecurityException {_                throw new IllegalStateException("A NotificationService setting cannot be File.")__            }__            @Override_            public void close() throws IOException {_            }_        }__    };extracts,the,link,secure,settings,out,of,the,passed,in,link,settings,object,the,code,setting,argument,has,to,have,the,code,secure,settings,open,available,normally,code,secure,settings,are,available,only,under,specific,callstacks,eg,during,node,initialization,or,during,a,reload,call,the,returned,copy,can,be,reused,freely,as,it,will,never,be,closed,this,is,a,bit,of,cheating,but,it,is,necessary,in,this,specific,circumstance,only,works,for,secure,settings,of,type,string,not,file,param,source,a,code,settings,object,with,its,code,secure,settings,open,available,param,secure,plugin,settings,the,list,of,settings,to,copy,return,a,copy,of,the,code,secure,settings,of,the,passed,in,code,settings,argument;private,static,secure,settings,extract,secure,settings,settings,source,list,setting,secure,plugin,settings,throws,general,security,exception,final,secure,settings,source,secure,settings,settings,builder,put,source,true,get,secure,settings,final,map,string,secure,string,cache,new,hash,map,if,source,secure,settings,null,secure,plugin,settings,null,for,final,string,setting,key,source,secure,settings,get,setting,names,for,final,setting,secure,setting,secure,plugin,settings,if,secure,setting,match,setting,key,cache,put,setting,key,source,secure,settings,get,string,setting,key,return,new,secure,settings,override,public,boolean,is,loaded,return,true,override,public,secure,string,get,string,string,setting,throws,general,security,exception,return,cache,get,setting,override,public,set,string,get,setting,names,return,cache,key,set,override,public,input,stream,get,file,string,setting,throws,general,security,exception,throw,new,illegal,state,exception,a,notification,service,setting,cannot,be,file,override,public,void,close,throws,ioexception
NotificationService -> private static SecureSettings extractSecureSettings(Settings source, List<Setting<?>> securePluginSettings)             throws GeneralSecurityException;1545050755;Extracts the {@link SecureSettings}` out of the passed in {@link Settings} object. The {@code Setting} argument has to have the_{@code SecureSettings} open/available. Normally {@code SecureSettings} are available only under specific callstacks (eg. during node_initialization or during a `reload` call). The returned copy can be reused freely as it will never be closed (this is a bit of_cheating, but it is necessary in this specific circumstance). Only works for secure settings of type string (not file).__@param source_A {@code Settings} object with its {@code SecureSettings} open/available._@param securePluginSettings_The list of settings to copy._@return A copy of the {@code SecureSettings} of the passed in {@code Settings} argument.;private static SecureSettings extractSecureSettings(Settings source, List<Setting<?>> securePluginSettings)_            throws GeneralSecurityException {_        _        final SecureSettings sourceSecureSettings = Settings.builder().put(source, true).getSecureSettings()__        _        final Map<String, SecureString> cache = new HashMap<>()__        if (sourceSecureSettings != null && securePluginSettings != null) {_            for (final String settingKey : sourceSecureSettings.getSettingNames()) {_                for (final Setting<?> secureSetting : securePluginSettings) {_                    if (secureSetting.match(settingKey)) {_                        cache.put(settingKey, sourceSecureSettings.getString(settingKey))__                    }_                }_            }_        }_        return new SecureSettings() {__            @Override_            public boolean isLoaded() {_                return true__            }__            @Override_            public SecureString getString(String setting) throws GeneralSecurityException {_                return cache.get(setting)__            }__            @Override_            public Set<String> getSettingNames() {_                return cache.keySet()__            }__            @Override_            public InputStream getFile(String setting) throws GeneralSecurityException {_                throw new IllegalStateException("A NotificationService setting cannot be File.")__            }__            @Override_            public void close() throws IOException {_            }_        }__    };extracts,the,link,secure,settings,out,of,the,passed,in,link,settings,object,the,code,setting,argument,has,to,have,the,code,secure,settings,open,available,normally,code,secure,settings,are,available,only,under,specific,callstacks,eg,during,node,initialization,or,during,a,reload,call,the,returned,copy,can,be,reused,freely,as,it,will,never,be,closed,this,is,a,bit,of,cheating,but,it,is,necessary,in,this,specific,circumstance,only,works,for,secure,settings,of,type,string,not,file,param,source,a,code,settings,object,with,its,code,secure,settings,open,available,param,secure,plugin,settings,the,list,of,settings,to,copy,return,a,copy,of,the,code,secure,settings,of,the,passed,in,code,settings,argument;private,static,secure,settings,extract,secure,settings,settings,source,list,setting,secure,plugin,settings,throws,general,security,exception,final,secure,settings,source,secure,settings,settings,builder,put,source,true,get,secure,settings,final,map,string,secure,string,cache,new,hash,map,if,source,secure,settings,null,secure,plugin,settings,null,for,final,string,setting,key,source,secure,settings,get,setting,names,for,final,setting,secure,setting,secure,plugin,settings,if,secure,setting,match,setting,key,cache,put,setting,key,source,secure,settings,get,string,setting,key,return,new,secure,settings,override,public,boolean,is,loaded,return,true,override,public,secure,string,get,string,string,setting,throws,general,security,exception,return,cache,get,setting,override,public,set,string,get,setting,names,return,cache,key,set,override,public,input,stream,get,file,string,setting,throws,general,security,exception,throw,new,illegal,state,exception,a,notification,service,setting,cannot,be,file,override,public,void,close,throws,ioexception
