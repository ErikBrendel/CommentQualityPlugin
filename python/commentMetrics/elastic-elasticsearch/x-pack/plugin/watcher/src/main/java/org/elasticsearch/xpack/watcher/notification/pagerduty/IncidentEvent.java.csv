commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     IncidentEvent template = (IncidentEvent) o.     return Objects.equals(description, template.description) && Objects.equals(incidentKey, template.incidentKey) && Objects.equals(client, template.client) && Objects.equals(clientUrl, template.clientUrl) && Objects.equals(attachPayload, template.attachPayload) && Objects.equals(eventType, template.eventType) && Objects.equals(account, template.account) && Objects.equals(proxy, template.proxy) && Arrays.equals(contexts, template.contexts). }
false;public;0;6;;@Override public int hashCode() {     int result = Objects.hash(description, incidentKey, client, clientUrl, account, attachPayload, eventType, proxy).     result = 31 * result + Arrays.hashCode(contexts).     return result. }
false;;3;10;;HttpRequest createRequest(final String serviceKey, final Payload payload, final String watchId) throws IOException {     return HttpRequest.builder(HOST, -1).method(HttpMethod.POST).scheme(Scheme.HTTPS).path(PATH).proxy(proxy).setHeader("Accept", ACCEPT_HEADER).jsonBody((b, p) -> buildAPIXContent(b, p, serviceKey, payload, watchId)).build(). }
false;;5;43;;XContentBuilder buildAPIXContent(XContentBuilder builder, Params params, String serviceKey, Payload payload, String watchId) throws IOException {     builder.field(Fields.ROUTING_KEY.getPreferredName(), serviceKey).     builder.field(Fields.EVENT_ACTION.getPreferredName(), eventType).     if (incidentKey != null) {         builder.field(Fields.DEDUP_KEY.getPreferredName(), incidentKey).     }     builder.startObject(Fields.PAYLOAD.getPreferredName()).     {         builder.field(Fields.SUMMARY.getPreferredName(), description).         if (attachPayload && payload != null) {             builder.startObject(Fields.CUSTOM_DETAILS.getPreferredName()).             {                 builder.field(Fields.PAYLOAD.getPreferredName(), payload, params).             }             builder.endObject().         }         if (watchId != null) {             builder.field(Fields.SOURCE.getPreferredName(), watchId).         } else {             builder.field(Fields.SOURCE.getPreferredName(), "watcher").         }         // TODO externalize this into something user editable         builder.field(Fields.SEVERITY.getPreferredName(), "critical").     }     builder.endObject().     if (client != null) {         builder.field(Fields.CLIENT.getPreferredName(), client).     }     if (clientUrl != null) {         builder.field(Fields.CLIENT_URL.getPreferredName(), clientUrl).     }     if (contexts != null && contexts.length > 0) {         toXContentV2Contexts(builder, params, contexts).     }     return builder. }
true;private;3;16;/**  * Turns the V1 API contexts into 2 distinct lists, images and links. The V2 API has separated these out into 2 top level fields.  */ ;/**  * Turns the V1 API contexts into 2 distinct lists, images and links. The V2 API has separated these out into 2 top level fields.  */ private void toXContentV2Contexts(XContentBuilder builder, ToXContent.Params params, IncidentEventContext[] contexts) throws IOException {     // contexts can be either links or images, and the v2 api needs them separate     Map<IncidentEventContext.Type, List<IncidentEventContext>> groups = Arrays.stream(contexts).collect(Collectors.groupingBy(iec -> iec.type)).     List<IncidentEventContext> links = groups.getOrDefault(IncidentEventContext.Type.LINK, Collections.emptyList()).     if (links.isEmpty() == false) {         builder.array(Fields.LINKS.getPreferredName(), links.toArray()).     }     List<IncidentEventContext> images = groups.getOrDefault(IncidentEventContext.Type.IMAGE, Collections.emptyList()).     if (images.isEmpty() == false) {         builder.array(Fields.IMAGES.getPreferredName(), images.toArray()).     } }
false;public;2;29;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field(Fields.DESCRIPTION.getPreferredName(), description).     if (incidentKey != null) {         builder.field(Fields.INCIDENT_KEY.getPreferredName(), incidentKey).     }     if (client != null) {         builder.field(Fields.CLIENT.getPreferredName(), client).     }     if (clientUrl != null) {         builder.field(Fields.CLIENT_URL.getPreferredName(), clientUrl).     }     if (account != null) {         builder.field(Fields.ACCOUNT.getPreferredName(), account).     }     if (proxy != null) {         proxy.toXContent(builder, params).     }     builder.field(Fields.ATTACH_PAYLOAD.getPreferredName(), attachPayload).     if (contexts != null) {         builder.startArray(Fields.CONTEXTS.getPreferredName()).         for (IncidentEventContext context : contexts) {             context.toXContent(builder, params).         }         builder.endArray().     }     return builder.endObject(). }
false;public,static;1;3;;public static Template.Builder templateBuilder(String description) {     return templateBuilder(new TextTemplate(description)). }
false;public,static;1;3;;public static Template.Builder templateBuilder(TextTemplate description) {     return new Template.Builder(description). }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Template template = (Template) o.     return Objects.equals(description, template.description) && Objects.equals(incidentKey, template.incidentKey) && Objects.equals(client, template.client) && Objects.equals(clientUrl, template.clientUrl) && Objects.equals(eventType, template.eventType) && Objects.equals(attachPayload, template.attachPayload) && Objects.equals(account, template.account) && Objects.equals(proxy, template.proxy) && Arrays.equals(contexts, template.contexts). }
false;public;0;6;;@Override public int hashCode() {     int result = Objects.hash(description, eventType, incidentKey, client, clientUrl, attachPayload, account, proxy).     result = 31 * result + Arrays.hashCode(contexts).     return result. }
false;public;5;18;;public IncidentEvent render(String watchId, String actionId, TextTemplateEngine engine, Map<String, Object> model, IncidentEventDefaults defaults) {     String description = this.description != null ? engine.render(this.description, model) : defaults.description.     String incidentKey = this.incidentKey != null ? engine.render(this.incidentKey, model) : defaults.incidentKey != null ? defaults.incidentKey : watchId.     String client = this.client != null ? engine.render(this.client, model) : defaults.client.     String clientUrl = this.clientUrl != null ? engine.render(this.clientUrl, model) : defaults.clientUrl.     String eventType = this.eventType != null ? engine.render(this.eventType, model) : defaults.eventType.     boolean attachPayload = this.attachPayload != null ? this.attachPayload : defaults.attachPayload.     IncidentEventContext[] contexts = null.     if (this.contexts != null) {         contexts = new IncidentEventContext[this.contexts.length].         for (int i = 0. i < this.contexts.length. i++) {             contexts[i] = this.contexts[i].render(engine, model, defaults).         }     }     return new IncidentEvent(description, eventType, incidentKey, client, clientUrl, account, attachPayload, contexts, proxy). }
false;public;2;34;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field(Fields.DESCRIPTION.getPreferredName(), description, params).     if (incidentKey != null) {         builder.field(Fields.INCIDENT_KEY.getPreferredName(), incidentKey, params).     }     if (client != null) {         builder.field(Fields.CLIENT.getPreferredName(), client, params).     }     if (clientUrl != null) {         builder.field(Fields.CLIENT_URL.getPreferredName(), clientUrl, params).     }     if (eventType != null) {         builder.field(Fields.EVENT_TYPE.getPreferredName(), eventType, params).     }     if (attachPayload != null) {         builder.field(Fields.ATTACH_PAYLOAD.getPreferredName(), attachPayload).     }     if (account != null) {         builder.field(Fields.ACCOUNT.getPreferredName(), account).     }     if (proxy != null) {         proxy.toXContent(builder, params).     }     if (contexts != null) {         builder.startArray(Fields.CONTEXTS.getPreferredName()).         for (IncidentEventContext.Template context : contexts) {             context.toXContent(builder, params).         }         builder.endArray().     }     return builder.endObject(). }
false;public,static;3;88;;public static Template parse(String watchId, String actionId, XContentParser parser) throws IOException {     TextTemplate incidentKey = null.     TextTemplate description = null.     TextTemplate client = null.     TextTemplate clientUrl = null.     TextTemplate eventType = null.     String account = null.     HttpProxy proxy = null.     Boolean attachPayload = null.     IncidentEventContext.Template[] contexts = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Fields.INCIDENT_KEY.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 incidentKey = TextTemplate.parse(parser).             } catch (ElasticsearchParseException e) {                 throw new ElasticsearchParseException("could not parse pager duty event template. failed to parse field [{}]", Fields.INCIDENT_KEY.getPreferredName()).             }         } else if (Fields.DESCRIPTION.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 description = TextTemplate.parse(parser).             } catch (ElasticsearchParseException e) {                 throw new ElasticsearchParseException("could not parse pager duty event template. failed to parse field [{}]", Fields.DESCRIPTION.getPreferredName()).             }         } else if (Fields.CLIENT.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 client = TextTemplate.parse(parser).             } catch (ElasticsearchParseException e) {                 throw new ElasticsearchParseException("could not parse pager duty event template. failed to parse field [{}]", Fields.CLIENT.getPreferredName()).             }         } else if (Fields.CLIENT_URL.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 clientUrl = TextTemplate.parse(parser).             } catch (ElasticsearchParseException e) {                 throw new ElasticsearchParseException("could not parse pager duty event template. failed to parse field [{}]", Fields.CLIENT_URL.getPreferredName()).             }         } else if (Fields.ACCOUNT.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 account = parser.text().             } catch (ElasticsearchParseException e) {                 throw new ElasticsearchParseException("could not parse pager duty event template. failed to parse field [{}]", Fields.CLIENT_URL.getPreferredName()).             }         } else if (Fields.PROXY.match(currentFieldName, parser.getDeprecationHandler())) {             proxy = HttpProxy.parse(parser).         } else if (Fields.EVENT_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 eventType = TextTemplate.parse(parser).             } catch (ElasticsearchParseException e) {                 throw new ElasticsearchParseException("could not parse pager duty event template. failed to parse field [{}]", Fields.EVENT_TYPE.getPreferredName()).             }         } else if (Fields.ATTACH_PAYLOAD.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.VALUE_BOOLEAN) {                 attachPayload = parser.booleanValue().             } else {                 throw new ElasticsearchParseException("could not parse pager duty event template. failed to parse field [{}], " + "expected a boolean value but found [{}] instead", Fields.ATTACH_PAYLOAD.getPreferredName(), token).             }         } else if (Fields.CONTEXTS.match(currentFieldName, parser.getDeprecationHandler()) || Fields.CONTEXT_DEPRECATED.match(currentFieldName, parser.getDeprecationHandler())) {             if (token == XContentParser.Token.START_ARRAY) {                 List<IncidentEventContext.Template> list = new ArrayList<>().                 while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                     try {                         list.add(IncidentEventContext.Template.parse(parser)).                     } catch (ElasticsearchParseException e) {                         throw new ElasticsearchParseException("could not parse pager duty event template. failed to parse field " + "[{}]", parser.currentName()).                     }                 }                 contexts = list.toArray(new IncidentEventContext.Template[list.size()]).             }         } else {             throw new ElasticsearchParseException("could not parse pager duty event template. unexpected field [{}]", currentFieldName).         }     }     return new Template(description, eventType, incidentKey, client, clientUrl, account, attachPayload, contexts, proxy). }
false;public;1;4;;public Builder setIncidentKey(TextTemplate incidentKey) {     this.incidentKey = incidentKey.     return this. }
false;public;1;4;;public Builder setClient(TextTemplate client) {     this.client = client.     return this. }
false;public;1;4;;public Builder setClientUrl(TextTemplate clientUrl) {     this.clientUrl = clientUrl.     return this. }
false;public;1;4;;public Builder setEventType(TextTemplate eventType) {     this.eventType = eventType.     return this. }
false;public;1;4;;public Builder setAccount(String account) {     this.account = account.     return this. }
false;public;1;4;;public Builder setAttachPayload(Boolean attachPayload) {     this.attachPayload = attachPayload.     return this. }
false;public;1;4;;public Builder setProxy(HttpProxy proxy) {     this.proxy = proxy.     return this. }
false;public;1;4;;public Builder addContext(IncidentEventContext.Template context) {     this.contexts.add(context).     return this. }
false;public;0;5;;public Template build() {     IncidentEventContext.Template[] contexts = this.contexts.isEmpty() ? null : this.contexts.toArray(new IncidentEventContext.Template[this.contexts.size()]).     return new Template(description, eventType, incidentKey, client, clientUrl, account, attachPayload, contexts, proxy). }
