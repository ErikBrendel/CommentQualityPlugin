commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String name() {     return XPackField.WATCHER. }
false;public;0;4;;@Override public String description() {     return "Alerting, Notification and Automation for the Elastic Stack". }
false;public;0;4;;@Override public boolean available() {     return licenseState != null && licenseState.isWatcherAllowed(). }
false;public;0;4;;@Override public boolean enabled() {     return enabled. }
false;public;0;4;;@Override public Map<String, Object> nativeCodeInfo() {     return null. }
false;public;1;22;;@Override public void usage(ActionListener<XPackFeatureSet.Usage> listener) {     if (enabled) {         try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), WATCHER_ORIGIN)) {             WatcherClient watcherClient = new WatcherClient(client).             WatcherStatsRequest request = new WatcherStatsRequest().             request.includeStats(true).             watcherClient.watcherStats(request, ActionListener.wrap(r -> {                 List<Counters> countersPerNode = r.getNodes().stream().map(WatcherStatsResponse.Node::getStats).filter(Objects::nonNull).collect(Collectors.toList()).                 Counters mergedCounters = Counters.merge(countersPerNode).                 listener.onResponse(new WatcherFeatureSetUsage(available(), enabled(), mergedCounters.toNestedMap())).             }, listener::onFailure)).         }     } else {         listener.onResponse(new WatcherFeatureSetUsage(available(), enabled(), Collections.emptyMap())).     } }
