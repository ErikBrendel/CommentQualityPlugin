commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public String sanitize(String html) {     if (!enabled) {         return html.     }     return policy.sanitize(html). }
false;static;2;102;;@SuppressForbidden(reason = "PolicyFactory uses guava Function") static PolicyFactory createCommonPolicy(List<String> allow, List<String> disallow) {     HtmlPolicyBuilder policyBuilder = new HtmlPolicyBuilder().     if (allow.stream().anyMatch("_all"::equals)) {         return policyBuilder.allowElements(TABLE_TAGS).allowAttributes("span").onElements("col").allowElements(BLOCK_TAGS).allowElements(FORMATTING_TAGS).allowWithoutAttributes("span").allowStyling(CssSchema.DEFAULT).allowStandardUrlProtocols().allowElements("a").allowAttributes("href").onElements("a").requireRelNofollowOnLinks().allowElements("img").allowAttributes("src").onElements("img").allowStandardUrlProtocols().allowUrlProtocols("cid").toFactory().     }     EnumSet<Images> images = EnumSet.noneOf(Images.class).     for (String tag : allow) {         tag = tag.toLowerCase(Locale.ROOT).         switch(tag) {             case "_tables":                 policyBuilder.allowElements(TABLE_TAGS).                 policyBuilder.allowAttributes("span").onElements("col").                 policyBuilder.allowAttributes("border", "cellpadding").onElements("table").                 policyBuilder.allowAttributes("colspan", "rowspan").onElements("th", "td").                 break.             case "_links":                 policyBuilder.allowElements("a").allowAttributes("href").onElements("a").allowStandardUrlProtocols().requireRelNofollowOnLinks().                 break.             case "_blocks":                 policyBuilder.allowElements(BLOCK_TAGS).                 break.             case "_formatting":                 policyBuilder.allowElements(FORMATTING_TAGS).allowWithoutAttributes("span").                 break.             case "_styles":                 policyBuilder.allowStyling(CssSchema.DEFAULT).                 break.             case "img:all":             case "img":                 images.add(Images.ALL).                 break.             case "img:embedded":                 images.add(Images.EMBEDDED).                 break.             default:                 policyBuilder.allowElements(tag).         }     }     for (String tag : disallow) {         tag = tag.toLowerCase(Locale.ROOT).         switch(tag) {             case "_tables":                 policyBuilder.disallowElements(TABLE_TAGS).                 break.             case "_links":                 policyBuilder.disallowElements("a").                 break.             case "_blocks":                 policyBuilder.disallowElements(BLOCK_TAGS).                 break.             case "_formatting":                 policyBuilder.disallowElements(FORMATTING_TAGS).                 break.             case "_styles":                 policyBuilder.disallowAttributes("style").                 break.             case "img:all":             case "img":                 images.remove(Images.ALL).                 break.             case "img:embedded":                 images.remove(Images.EMBEDDED).                 break.             default:                 policyBuilder.disallowElements(tag).         }     }     if (!images.isEmpty()) {         policyBuilder.allowAttributes("src").onElements("img").allowUrlProtocols("cid").         if (images.contains(Images.ALL)) {             policyBuilder.allowElements("img").             policyBuilder.allowStandardUrlProtocols().         } else {             // embedded             policyBuilder.allowElements(EmbeddedImgOnlyPolicy.INSTANCE, "img").         }     }     return policyBuilder.toFactory(). }
false;public;2;18;;@Override public String apply(String elementName, List<String> attrs) {     if (!"img".equals(elementName) || attrs.size() == 0) {         return elementName.     }     String attrName = null.     for (String attr : attrs) {         if (attrName == null) {             attrName = attr.toLowerCase(Locale.ROOT).             continue.         }         // reject external image source (only allow embedded ones)         if ("src".equals(attrName) && !attr.startsWith("cid:")) {             return null.         }     }     return elementName. }
false;public,static;0;3;;public static List<Setting<?>> getSettings() {     return Arrays.asList(SETTING_SANITIZATION_ALLOW, SETTING_SANITIZATION_DISALLOW, SETTING_SANITIZATION_ENABLED). }
