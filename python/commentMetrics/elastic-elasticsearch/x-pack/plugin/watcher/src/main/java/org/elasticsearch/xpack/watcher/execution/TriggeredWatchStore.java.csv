commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;public void putAll(final List<TriggeredWatch> triggeredWatches, final ActionListener<BulkResponse> listener) throws IOException {     if (triggeredWatches.isEmpty()) {         listener.onResponse(new BulkResponse(new BulkItemResponse[] {}, 0)).         return.     }     client.bulk(createBulkRequest(triggeredWatches), listener). }
false;public;1;5;;public BulkResponse putAll(final List<TriggeredWatch> triggeredWatches) throws IOException {     PlainActionFuture<BulkResponse> future = PlainActionFuture.newFuture().     putAll(triggeredWatches, future).     return future.actionGet(defaultBulkTimeout). }
true;private;1;14;/**  * Create a bulk request from the triggered watches with a specified document type  * @param triggeredWatches  The list of triggered watches  * @return                  The bulk request for the triggered watches  * @throws IOException      If a triggered watch could not be parsed to JSON, this exception is thrown  */ ;/**  * Create a bulk request from the triggered watches with a specified document type  * @param triggeredWatches  The list of triggered watches  * @return                  The bulk request for the triggered watches  * @throws IOException      If a triggered watch could not be parsed to JSON, this exception is thrown  */ private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches) throws IOException {     BulkRequest request = new BulkRequest().     for (TriggeredWatch triggeredWatch : triggeredWatches) {         IndexRequest indexRequest = new IndexRequest(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE, triggeredWatch.id().value()).         try (XContentBuilder builder = XContentFactory.jsonBuilder()) {             triggeredWatch.toXContent(builder, ToXContent.EMPTY_PARAMS).             indexRequest.source(builder).         }         indexRequest.opType(IndexRequest.OpType.CREATE).         request.add(indexRequest).     }     return request. }
true;public;1;4;/**  * Delete a triggered watch entry.  * Note that this happens asynchronously, as these kind of requests are batched together to reduce the amount of concurrent requests.  *  * @param wid The ID os the triggered watch id  */ ;/**  * Delete a triggered watch entry.  * Note that this happens asynchronously, as these kind of requests are batched together to reduce the amount of concurrent requests.  *  * @param wid The ID os the triggered watch id  */ public void delete(Wid wid) {     DeleteRequest request = new DeleteRequest(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE, wid.value()).     bulkProcessor.add(request). }
true;public;2;55;/**  * Checks if any of the loaded watches has been put into the triggered watches index for immediate execution  *  * Note: This is executing a blocking call over the network, thus a potential source of problems  *  * @param watches       The list of watches that will be loaded here  * @param clusterState  The current cluster state  * @return              A list of triggered watches that have been started to execute somewhere else but not finished  */ ;/**  * Checks if any of the loaded watches has been put into the triggered watches index for immediate execution  *  * Note: This is executing a blocking call over the network, thus a potential source of problems  *  * @param watches       The list of watches that will be loaded here  * @param clusterState  The current cluster state  * @return              A list of triggered watches that have been started to execute somewhere else but not finished  */ public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState) {     if (watches.isEmpty()) {         return Collections.emptyList().     }     // non existing index, return immediately     IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(TriggeredWatchStoreField.INDEX_NAME, clusterState.metaData()).     if (indexMetaData == null) {         return Collections.emptyList().     }     try {         RefreshRequest request = new RefreshRequest(TriggeredWatchStoreField.INDEX_NAME).         client.admin().indices().refresh(request).actionGet(TimeValue.timeValueSeconds(5)).     } catch (IndexNotFoundException e) {         return Collections.emptyList().     }     Set<String> ids = watches.stream().map(Watch::id).collect(Collectors.toSet()).     Collection<TriggeredWatch> triggeredWatches = new ArrayList<>(ids.size()).     SearchRequest searchRequest = new SearchRequest(TriggeredWatchStoreField.INDEX_NAME).scroll(scrollTimeout).preference(Preference.LOCAL.toString()).source(new SearchSourceBuilder().size(scrollSize).sort(SortBuilders.fieldSort("_doc")).version(true)).     SearchResponse response = null.     try {         response = client.search(searchRequest).actionGet(defaultSearchTimeout).         logger.debug("trying to find triggered watches for ids {}: found [{}] docs", ids, response.getHits().getTotalHits().value).         while (response.getHits().getHits().length != 0) {             for (SearchHit hit : response.getHits()) {                 Wid wid = new Wid(hit.getId()).                 if (ids.contains(wid.watchId())) {                     TriggeredWatch triggeredWatch = triggeredWatchParser.parse(hit.getId(), hit.getVersion(), hit.getSourceRef()).                     triggeredWatches.add(triggeredWatch).                 }             }             SearchScrollRequest request = new SearchScrollRequest(response.getScrollId()).             request.scroll(scrollTimeout).             response = client.searchScroll(request).actionGet(defaultSearchTimeout).         }     } finally {         if (response != null) {             ClearScrollRequest clearScrollRequest = new ClearScrollRequest().             clearScrollRequest.addScrollId(response.getScrollId()).             client.clearScroll(clearScrollRequest).actionGet(scrollTimeout).         }     }     return triggeredWatches. }
false;public,static;1;5;;public static boolean validate(ClusterState state) {     IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(TriggeredWatchStoreField.INDEX_NAME, state.metaData()).     return indexMetaData == null || (indexMetaData.getState() == IndexMetaData.State.OPEN && state.routingTable().index(indexMetaData.getIndex()).allPrimaryShardsActive()). }
