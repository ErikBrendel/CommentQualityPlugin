# id;timestamp;commentText;codeText;commentWords;codeWords
TriggeredWatchStore -> private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches) throws IOException;1537300661;Create a bulk request from the triggered watches with a specified document type_@param triggeredWatches  The list of triggered watches_@return                  The bulk request for the triggered watches_@throws IOException      If a triggered watch could not be parsed to JSON, this exception is thrown;private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches) throws IOException {_        BulkRequest request = new BulkRequest()__        for (TriggeredWatch triggeredWatch : triggeredWatches) {_            IndexRequest indexRequest = new IndexRequest(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE,_                triggeredWatch.id().value())__            try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                triggeredWatch.toXContent(builder, ToXContent.EMPTY_PARAMS)__                indexRequest.source(builder)__            }_            indexRequest.opType(IndexRequest.OpType.CREATE)__            request.add(indexRequest)__        }_        return request__    };create,a,bulk,request,from,the,triggered,watches,with,a,specified,document,type,param,triggered,watches,the,list,of,triggered,watches,return,the,bulk,request,for,the,triggered,watches,throws,ioexception,if,a,triggered,watch,could,not,be,parsed,to,json,this,exception,is,thrown;private,bulk,request,create,bulk,request,final,list,triggered,watch,triggered,watches,throws,ioexception,bulk,request,request,new,bulk,request,for,triggered,watch,triggered,watch,triggered,watches,index,request,index,request,new,index,request,triggered,watch,store,field,triggered,watch,store,field,triggered,watch,id,value,try,xcontent,builder,builder,xcontent,factory,json,builder,triggered,watch,to,xcontent,builder,to,xcontent,index,request,source,builder,index,request,op,type,index,request,op,type,create,request,add,index,request,return,request
TriggeredWatchStore -> private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches) throws IOException;1541092382;Create a bulk request from the triggered watches with a specified document type_@param triggeredWatches  The list of triggered watches_@return                  The bulk request for the triggered watches_@throws IOException      If a triggered watch could not be parsed to JSON, this exception is thrown;private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches) throws IOException {_        BulkRequest request = new BulkRequest()__        for (TriggeredWatch triggeredWatch : triggeredWatches) {_            IndexRequest indexRequest = new IndexRequest(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE,_                triggeredWatch.id().value())__            try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                triggeredWatch.toXContent(builder, ToXContent.EMPTY_PARAMS)__                indexRequest.source(builder)__            }_            indexRequest.opType(IndexRequest.OpType.CREATE)__            request.add(indexRequest)__        }_        return request__    };create,a,bulk,request,from,the,triggered,watches,with,a,specified,document,type,param,triggered,watches,the,list,of,triggered,watches,return,the,bulk,request,for,the,triggered,watches,throws,ioexception,if,a,triggered,watch,could,not,be,parsed,to,json,this,exception,is,thrown;private,bulk,request,create,bulk,request,final,list,triggered,watch,triggered,watches,throws,ioexception,bulk,request,request,new,bulk,request,for,triggered,watch,triggered,watch,triggered,watches,index,request,index,request,new,index,request,triggered,watch,store,field,triggered,watch,store,field,triggered,watch,id,value,try,xcontent,builder,builder,xcontent,factory,json,builder,triggered,watch,to,xcontent,builder,to,xcontent,index,request,source,builder,index,request,op,type,index,request,op,type,create,request,add,index,request,return,request
TriggeredWatchStore -> private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches) throws IOException;1543343306;Create a bulk request from the triggered watches with a specified document type_@param triggeredWatches  The list of triggered watches_@return                  The bulk request for the triggered watches_@throws IOException      If a triggered watch could not be parsed to JSON, this exception is thrown;private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches) throws IOException {_        BulkRequest request = new BulkRequest()__        for (TriggeredWatch triggeredWatch : triggeredWatches) {_            IndexRequest indexRequest = new IndexRequest(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE,_                triggeredWatch.id().value())__            try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                triggeredWatch.toXContent(builder, ToXContent.EMPTY_PARAMS)__                indexRequest.source(builder)__            }_            indexRequest.opType(IndexRequest.OpType.CREATE)__            request.add(indexRequest)__        }_        return request__    };create,a,bulk,request,from,the,triggered,watches,with,a,specified,document,type,param,triggered,watches,the,list,of,triggered,watches,return,the,bulk,request,for,the,triggered,watches,throws,ioexception,if,a,triggered,watch,could,not,be,parsed,to,json,this,exception,is,thrown;private,bulk,request,create,bulk,request,final,list,triggered,watch,triggered,watches,throws,ioexception,bulk,request,request,new,bulk,request,for,triggered,watch,triggered,watch,triggered,watches,index,request,index,request,new,index,request,triggered,watch,store,field,triggered,watch,store,field,triggered,watch,id,value,try,xcontent,builder,builder,xcontent,factory,json,builder,triggered,watch,to,xcontent,builder,to,xcontent,index,request,source,builder,index,request,op,type,index,request,op,type,create,request,add,index,request,return,request
TriggeredWatchStore -> private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches) throws IOException;1544035746;Create a bulk request from the triggered watches with a specified document type_@param triggeredWatches  The list of triggered watches_@return                  The bulk request for the triggered watches_@throws IOException      If a triggered watch could not be parsed to JSON, this exception is thrown;private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches) throws IOException {_        BulkRequest request = new BulkRequest()__        for (TriggeredWatch triggeredWatch : triggeredWatches) {_            IndexRequest indexRequest = new IndexRequest(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE,_                triggeredWatch.id().value())__            try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                triggeredWatch.toXContent(builder, ToXContent.EMPTY_PARAMS)__                indexRequest.source(builder)__            }_            indexRequest.opType(IndexRequest.OpType.CREATE)__            request.add(indexRequest)__        }_        return request__    };create,a,bulk,request,from,the,triggered,watches,with,a,specified,document,type,param,triggered,watches,the,list,of,triggered,watches,return,the,bulk,request,for,the,triggered,watches,throws,ioexception,if,a,triggered,watch,could,not,be,parsed,to,json,this,exception,is,thrown;private,bulk,request,create,bulk,request,final,list,triggered,watch,triggered,watches,throws,ioexception,bulk,request,request,new,bulk,request,for,triggered,watch,triggered,watch,triggered,watches,index,request,index,request,new,index,request,triggered,watch,store,field,triggered,watch,store,field,triggered,watch,id,value,try,xcontent,builder,builder,xcontent,factory,json,builder,triggered,watch,to,xcontent,builder,to,xcontent,index,request,source,builder,index,request,op,type,index,request,op,type,create,request,add,index,request,return,request
TriggeredWatchStore -> public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState);1524684173;Checks if any of the loaded watches has been put into the triggered watches index for immediate execution__Note: This is executing a blocking call over the network, thus a potential source of problems__@param watches       The list of watches that will be loaded here_@param clusterState  The current cluster state_@return              A list of triggered watches that have been started to execute somewhere else but not finished;public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState) {_        if (watches.isEmpty()) {_            return Collections.emptyList()__        }__        _        IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(TriggeredWatchStoreField.INDEX_NAME, clusterState.metaData())__        if (indexMetaData == null) {_            return Collections.emptyList()__        }__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), WATCHER_ORIGIN)) {_            client.admin().indices().refresh(new RefreshRequest(TriggeredWatchStoreField.INDEX_NAME))_                    .actionGet(TimeValue.timeValueSeconds(5))__        } catch (IndexNotFoundException e) {_            return Collections.emptyList()__        }__        Set<String> ids = watches.stream().map(Watch::id).collect(Collectors.toSet())__        Collection<TriggeredWatch> triggeredWatches = new ArrayList<>(ids.size())___        SearchRequest searchRequest = new SearchRequest(TriggeredWatchStoreField.INDEX_NAME)_                .scroll(scrollTimeout)_                .preference(Preference.LOCAL.toString())_                .source(new SearchSourceBuilder()_                        .size(scrollSize)_                        .sort(SortBuilders.fieldSort("_doc"))_                        .version(true))___        SearchResponse response = null__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), WATCHER_ORIGIN)) {_            response = client.search(searchRequest).actionGet(defaultSearchTimeout)__            logger.debug("trying to find triggered watches for ids {}: found [{}] docs", ids, response.getHits().getTotalHits())__            while (response.getHits().getHits().length != 0) {_                for (SearchHit hit : response.getHits()) {_                    Wid wid = new Wid(hit.getId())__                    if (ids.contains(wid.watchId())) {_                        TriggeredWatch triggeredWatch = triggeredWatchParser.parse(hit.getId(), hit.getVersion(), hit.getSourceRef())__                        triggeredWatches.add(triggeredWatch)__                    }_                }_                SearchScrollRequest request = new SearchScrollRequest(response.getScrollId())__                request.scroll(scrollTimeout)__                response = client.searchScroll(request).actionGet(defaultSearchTimeout)__            }_        } finally {_            if (response != null) {_                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), WATCHER_ORIGIN)) {_                    ClearScrollRequest clearScrollRequest = new ClearScrollRequest()__                    clearScrollRequest.addScrollId(response.getScrollId())__                    client.clearScroll(clearScrollRequest).actionGet(scrollTimeout)__                }_            }_        }__        return triggeredWatches__    };checks,if,any,of,the,loaded,watches,has,been,put,into,the,triggered,watches,index,for,immediate,execution,note,this,is,executing,a,blocking,call,over,the,network,thus,a,potential,source,of,problems,param,watches,the,list,of,watches,that,will,be,loaded,here,param,cluster,state,the,current,cluster,state,return,a,list,of,triggered,watches,that,have,been,started,to,execute,somewhere,else,but,not,finished;public,collection,triggered,watch,find,triggered,watches,collection,watch,watches,cluster,state,cluster,state,if,watches,is,empty,return,collections,empty,list,index,meta,data,index,meta,data,watch,store,utils,get,concrete,index,triggered,watch,store,field,cluster,state,meta,data,if,index,meta,data,null,return,collections,empty,list,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,new,refresh,request,triggered,watch,store,field,action,get,time,value,time,value,seconds,5,catch,index,not,found,exception,e,return,collections,empty,list,set,string,ids,watches,stream,map,watch,id,collect,collectors,to,set,collection,triggered,watch,triggered,watches,new,array,list,ids,size,search,request,search,request,new,search,request,triggered,watch,store,field,scroll,scroll,timeout,preference,preference,local,to,string,source,new,search,source,builder,size,scroll,size,sort,sort,builders,field,sort,version,true,search,response,response,null,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,response,client,search,search,request,action,get,default,search,timeout,logger,debug,trying,to,find,triggered,watches,for,ids,found,docs,ids,response,get,hits,get,total,hits,while,response,get,hits,get,hits,length,0,for,search,hit,hit,response,get,hits,wid,wid,new,wid,hit,get,id,if,ids,contains,wid,watch,id,triggered,watch,triggered,watch,triggered,watch,parser,parse,hit,get,id,hit,get,version,hit,get,source,ref,triggered,watches,add,triggered,watch,search,scroll,request,request,new,search,scroll,request,response,get,scroll,id,request,scroll,scroll,timeout,response,client,search,scroll,request,action,get,default,search,timeout,finally,if,response,null,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,clear,scroll,request,clear,scroll,request,new,clear,scroll,request,clear,scroll,request,add,scroll,id,response,get,scroll,id,client,clear,scroll,clear,scroll,request,action,get,scroll,timeout,return,triggered,watches
TriggeredWatchStore -> public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState);1525334055;Checks if any of the loaded watches has been put into the triggered watches index for immediate execution__Note: This is executing a blocking call over the network, thus a potential source of problems__@param watches       The list of watches that will be loaded here_@param clusterState  The current cluster state_@return              A list of triggered watches that have been started to execute somewhere else but not finished;public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState) {_        if (watches.isEmpty()) {_            return Collections.emptyList()__        }__        _        IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(TriggeredWatchStoreField.INDEX_NAME, clusterState.metaData())__        if (indexMetaData == null) {_            return Collections.emptyList()__        }__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), WATCHER_ORIGIN)) {_            client.admin().indices().refresh(new RefreshRequest(TriggeredWatchStoreField.INDEX_NAME))_                .actionGet(TimeValue.timeValueSeconds(5))__        } catch (IndexNotFoundException e) {_            return Collections.emptyList()__        }__        Set<String> ids = watches.stream().map(Watch::id).collect(Collectors.toSet())__        Collection<TriggeredWatch> triggeredWatches = new ArrayList<>(ids.size())___        SearchRequest searchRequest = new SearchRequest(TriggeredWatchStoreField.INDEX_NAME)_            .scroll(scrollTimeout)_            .preference(Preference.LOCAL.toString())_            .source(new SearchSourceBuilder()_                .size(scrollSize)_                .sort(SortBuilders.fieldSort("_doc"))_                .version(true))___        SearchResponse response = null__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), WATCHER_ORIGIN)) {_            response = client.search(searchRequest).actionGet(defaultSearchTimeout)__            logger.debug("trying to find triggered watches for ids {}: found [{}] docs", ids, response.getHits().getTotalHits())__            while (response.getHits().getHits().length != 0) {_                for (SearchHit hit : response.getHits()) {_                    Wid wid = new Wid(hit.getId())__                    if (ids.contains(wid.watchId())) {_                        TriggeredWatch triggeredWatch = triggeredWatchParser.parse(hit.getId(), hit.getVersion(), hit.getSourceRef())__                        triggeredWatches.add(triggeredWatch)__                    }_                }_                SearchScrollRequest request = new SearchScrollRequest(response.getScrollId())__                request.scroll(scrollTimeout)__                response = client.searchScroll(request).actionGet(defaultSearchTimeout)__            }_        } finally {_            if (response != null) {_                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), WATCHER_ORIGIN)) {_                    ClearScrollRequest clearScrollRequest = new ClearScrollRequest()__                    clearScrollRequest.addScrollId(response.getScrollId())__                    client.clearScroll(clearScrollRequest).actionGet(scrollTimeout)__                }_            }_        }__        return triggeredWatches__    };checks,if,any,of,the,loaded,watches,has,been,put,into,the,triggered,watches,index,for,immediate,execution,note,this,is,executing,a,blocking,call,over,the,network,thus,a,potential,source,of,problems,param,watches,the,list,of,watches,that,will,be,loaded,here,param,cluster,state,the,current,cluster,state,return,a,list,of,triggered,watches,that,have,been,started,to,execute,somewhere,else,but,not,finished;public,collection,triggered,watch,find,triggered,watches,collection,watch,watches,cluster,state,cluster,state,if,watches,is,empty,return,collections,empty,list,index,meta,data,index,meta,data,watch,store,utils,get,concrete,index,triggered,watch,store,field,cluster,state,meta,data,if,index,meta,data,null,return,collections,empty,list,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,new,refresh,request,triggered,watch,store,field,action,get,time,value,time,value,seconds,5,catch,index,not,found,exception,e,return,collections,empty,list,set,string,ids,watches,stream,map,watch,id,collect,collectors,to,set,collection,triggered,watch,triggered,watches,new,array,list,ids,size,search,request,search,request,new,search,request,triggered,watch,store,field,scroll,scroll,timeout,preference,preference,local,to,string,source,new,search,source,builder,size,scroll,size,sort,sort,builders,field,sort,version,true,search,response,response,null,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,response,client,search,search,request,action,get,default,search,timeout,logger,debug,trying,to,find,triggered,watches,for,ids,found,docs,ids,response,get,hits,get,total,hits,while,response,get,hits,get,hits,length,0,for,search,hit,hit,response,get,hits,wid,wid,new,wid,hit,get,id,if,ids,contains,wid,watch,id,triggered,watch,triggered,watch,triggered,watch,parser,parse,hit,get,id,hit,get,version,hit,get,source,ref,triggered,watches,add,triggered,watch,search,scroll,request,request,new,search,scroll,request,response,get,scroll,id,request,scroll,scroll,timeout,response,client,search,scroll,request,action,get,default,search,timeout,finally,if,response,null,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,clear,scroll,request,clear,scroll,request,new,clear,scroll,request,clear,scroll,request,add,scroll,id,response,get,scroll,id,client,clear,scroll,clear,scroll,request,action,get,scroll,timeout,return,triggered,watches
TriggeredWatchStore -> public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState);1537300661;Checks if any of the loaded watches has been put into the triggered watches index for immediate execution__Note: This is executing a blocking call over the network, thus a potential source of problems__@param watches       The list of watches that will be loaded here_@param clusterState  The current cluster state_@return              A list of triggered watches that have been started to execute somewhere else but not finished;public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState) {_        if (watches.isEmpty()) {_            return Collections.emptyList()__        }__        _        IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(TriggeredWatchStoreField.INDEX_NAME, clusterState.metaData())__        if (indexMetaData == null) {_            return Collections.emptyList()__        }__        try {_            RefreshRequest request = new RefreshRequest(TriggeredWatchStoreField.INDEX_NAME)__            client.admin().indices().refresh(request).actionGet(TimeValue.timeValueSeconds(5))__        } catch (IndexNotFoundException e) {_            return Collections.emptyList()__        }__        Set<String> ids = watches.stream().map(Watch::id).collect(Collectors.toSet())__        Collection<TriggeredWatch> triggeredWatches = new ArrayList<>(ids.size())___        SearchRequest searchRequest = new SearchRequest(TriggeredWatchStoreField.INDEX_NAME)_            .scroll(scrollTimeout)_            .preference(Preference.LOCAL.toString())_            .source(new SearchSourceBuilder()_                .size(scrollSize)_                .sort(SortBuilders.fieldSort("_doc"))_                .version(true))___        SearchResponse response = null__        try {_            response = client.search(searchRequest).actionGet(defaultSearchTimeout)__            logger.debug("trying to find triggered watches for ids {}: found [{}] docs", ids, response.getHits().getTotalHits())__            while (response.getHits().getHits().length != 0) {_                for (SearchHit hit : response.getHits()) {_                    Wid wid = new Wid(hit.getId())__                    if (ids.contains(wid.watchId())) {_                        TriggeredWatch triggeredWatch = triggeredWatchParser.parse(hit.getId(), hit.getVersion(), hit.getSourceRef())__                        triggeredWatches.add(triggeredWatch)__                    }_                }_                SearchScrollRequest request = new SearchScrollRequest(response.getScrollId())__                request.scroll(scrollTimeout)__                response = client.searchScroll(request).actionGet(defaultSearchTimeout)__            }_        } finally {_            if (response != null) {_                ClearScrollRequest clearScrollRequest = new ClearScrollRequest()__                clearScrollRequest.addScrollId(response.getScrollId())__                client.clearScroll(clearScrollRequest).actionGet(scrollTimeout)__            }_        }__        return triggeredWatches__    };checks,if,any,of,the,loaded,watches,has,been,put,into,the,triggered,watches,index,for,immediate,execution,note,this,is,executing,a,blocking,call,over,the,network,thus,a,potential,source,of,problems,param,watches,the,list,of,watches,that,will,be,loaded,here,param,cluster,state,the,current,cluster,state,return,a,list,of,triggered,watches,that,have,been,started,to,execute,somewhere,else,but,not,finished;public,collection,triggered,watch,find,triggered,watches,collection,watch,watches,cluster,state,cluster,state,if,watches,is,empty,return,collections,empty,list,index,meta,data,index,meta,data,watch,store,utils,get,concrete,index,triggered,watch,store,field,cluster,state,meta,data,if,index,meta,data,null,return,collections,empty,list,try,refresh,request,request,new,refresh,request,triggered,watch,store,field,client,admin,indices,refresh,request,action,get,time,value,time,value,seconds,5,catch,index,not,found,exception,e,return,collections,empty,list,set,string,ids,watches,stream,map,watch,id,collect,collectors,to,set,collection,triggered,watch,triggered,watches,new,array,list,ids,size,search,request,search,request,new,search,request,triggered,watch,store,field,scroll,scroll,timeout,preference,preference,local,to,string,source,new,search,source,builder,size,scroll,size,sort,sort,builders,field,sort,version,true,search,response,response,null,try,response,client,search,search,request,action,get,default,search,timeout,logger,debug,trying,to,find,triggered,watches,for,ids,found,docs,ids,response,get,hits,get,total,hits,while,response,get,hits,get,hits,length,0,for,search,hit,hit,response,get,hits,wid,wid,new,wid,hit,get,id,if,ids,contains,wid,watch,id,triggered,watch,triggered,watch,triggered,watch,parser,parse,hit,get,id,hit,get,version,hit,get,source,ref,triggered,watches,add,triggered,watch,search,scroll,request,request,new,search,scroll,request,response,get,scroll,id,request,scroll,scroll,timeout,response,client,search,scroll,request,action,get,default,search,timeout,finally,if,response,null,clear,scroll,request,clear,scroll,request,new,clear,scroll,request,clear,scroll,request,add,scroll,id,response,get,scroll,id,client,clear,scroll,clear,scroll,request,action,get,scroll,timeout,return,triggered,watches
TriggeredWatchStore -> public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState);1541092382;Checks if any of the loaded watches has been put into the triggered watches index for immediate execution__Note: This is executing a blocking call over the network, thus a potential source of problems__@param watches       The list of watches that will be loaded here_@param clusterState  The current cluster state_@return              A list of triggered watches that have been started to execute somewhere else but not finished;public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState) {_        if (watches.isEmpty()) {_            return Collections.emptyList()__        }__        _        IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(TriggeredWatchStoreField.INDEX_NAME, clusterState.metaData())__        if (indexMetaData == null) {_            return Collections.emptyList()__        }__        try {_            RefreshRequest request = new RefreshRequest(TriggeredWatchStoreField.INDEX_NAME)__            client.admin().indices().refresh(request).actionGet(TimeValue.timeValueSeconds(5))__        } catch (IndexNotFoundException e) {_            return Collections.emptyList()__        }__        Set<String> ids = watches.stream().map(Watch::id).collect(Collectors.toSet())__        Collection<TriggeredWatch> triggeredWatches = new ArrayList<>(ids.size())___        SearchRequest searchRequest = new SearchRequest(TriggeredWatchStoreField.INDEX_NAME)_            .scroll(scrollTimeout)_            .preference(Preference.LOCAL.toString())_            .source(new SearchSourceBuilder()_                .size(scrollSize)_                .sort(SortBuilders.fieldSort("_doc"))_                .version(true))___        SearchResponse response = null__        try {_            response = client.search(searchRequest).actionGet(defaultSearchTimeout)__            logger.debug("trying to find triggered watches for ids {}: found [{}] docs", ids, response.getHits().getTotalHits())__            while (response.getHits().getHits().length != 0) {_                for (SearchHit hit : response.getHits()) {_                    Wid wid = new Wid(hit.getId())__                    if (ids.contains(wid.watchId())) {_                        TriggeredWatch triggeredWatch = triggeredWatchParser.parse(hit.getId(), hit.getVersion(), hit.getSourceRef())__                        triggeredWatches.add(triggeredWatch)__                    }_                }_                SearchScrollRequest request = new SearchScrollRequest(response.getScrollId())__                request.scroll(scrollTimeout)__                response = client.searchScroll(request).actionGet(defaultSearchTimeout)__            }_        } finally {_            if (response != null) {_                ClearScrollRequest clearScrollRequest = new ClearScrollRequest()__                clearScrollRequest.addScrollId(response.getScrollId())__                client.clearScroll(clearScrollRequest).actionGet(scrollTimeout)__            }_        }__        return triggeredWatches__    };checks,if,any,of,the,loaded,watches,has,been,put,into,the,triggered,watches,index,for,immediate,execution,note,this,is,executing,a,blocking,call,over,the,network,thus,a,potential,source,of,problems,param,watches,the,list,of,watches,that,will,be,loaded,here,param,cluster,state,the,current,cluster,state,return,a,list,of,triggered,watches,that,have,been,started,to,execute,somewhere,else,but,not,finished;public,collection,triggered,watch,find,triggered,watches,collection,watch,watches,cluster,state,cluster,state,if,watches,is,empty,return,collections,empty,list,index,meta,data,index,meta,data,watch,store,utils,get,concrete,index,triggered,watch,store,field,cluster,state,meta,data,if,index,meta,data,null,return,collections,empty,list,try,refresh,request,request,new,refresh,request,triggered,watch,store,field,client,admin,indices,refresh,request,action,get,time,value,time,value,seconds,5,catch,index,not,found,exception,e,return,collections,empty,list,set,string,ids,watches,stream,map,watch,id,collect,collectors,to,set,collection,triggered,watch,triggered,watches,new,array,list,ids,size,search,request,search,request,new,search,request,triggered,watch,store,field,scroll,scroll,timeout,preference,preference,local,to,string,source,new,search,source,builder,size,scroll,size,sort,sort,builders,field,sort,version,true,search,response,response,null,try,response,client,search,search,request,action,get,default,search,timeout,logger,debug,trying,to,find,triggered,watches,for,ids,found,docs,ids,response,get,hits,get,total,hits,while,response,get,hits,get,hits,length,0,for,search,hit,hit,response,get,hits,wid,wid,new,wid,hit,get,id,if,ids,contains,wid,watch,id,triggered,watch,triggered,watch,triggered,watch,parser,parse,hit,get,id,hit,get,version,hit,get,source,ref,triggered,watches,add,triggered,watch,search,scroll,request,request,new,search,scroll,request,response,get,scroll,id,request,scroll,scroll,timeout,response,client,search,scroll,request,action,get,default,search,timeout,finally,if,response,null,clear,scroll,request,clear,scroll,request,new,clear,scroll,request,clear,scroll,request,add,scroll,id,response,get,scroll,id,client,clear,scroll,clear,scroll,request,action,get,scroll,timeout,return,triggered,watches
TriggeredWatchStore -> public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState);1543343306;Checks if any of the loaded watches has been put into the triggered watches index for immediate execution__Note: This is executing a blocking call over the network, thus a potential source of problems__@param watches       The list of watches that will be loaded here_@param clusterState  The current cluster state_@return              A list of triggered watches that have been started to execute somewhere else but not finished;public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState) {_        if (watches.isEmpty()) {_            return Collections.emptyList()__        }__        _        IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(TriggeredWatchStoreField.INDEX_NAME, clusterState.metaData())__        if (indexMetaData == null) {_            return Collections.emptyList()__        }__        try {_            RefreshRequest request = new RefreshRequest(TriggeredWatchStoreField.INDEX_NAME)__            client.admin().indices().refresh(request).actionGet(TimeValue.timeValueSeconds(5))__        } catch (IndexNotFoundException e) {_            return Collections.emptyList()__        }__        Set<String> ids = watches.stream().map(Watch::id).collect(Collectors.toSet())__        Collection<TriggeredWatch> triggeredWatches = new ArrayList<>(ids.size())___        SearchRequest searchRequest = new SearchRequest(TriggeredWatchStoreField.INDEX_NAME)_            .scroll(scrollTimeout)_            .preference(Preference.LOCAL.toString())_            .source(new SearchSourceBuilder()_                .size(scrollSize)_                .sort(SortBuilders.fieldSort("_doc"))_                .version(true))___        SearchResponse response = null__        try {_            response = client.search(searchRequest).actionGet(defaultSearchTimeout)__            logger.debug("trying to find triggered watches for ids {}: found [{}] docs", ids, response.getHits().getTotalHits())__            while (response.getHits().getHits().length != 0) {_                for (SearchHit hit : response.getHits()) {_                    Wid wid = new Wid(hit.getId())__                    if (ids.contains(wid.watchId())) {_                        TriggeredWatch triggeredWatch = triggeredWatchParser.parse(hit.getId(), hit.getVersion(), hit.getSourceRef())__                        triggeredWatches.add(triggeredWatch)__                    }_                }_                SearchScrollRequest request = new SearchScrollRequest(response.getScrollId())__                request.scroll(scrollTimeout)__                response = client.searchScroll(request).actionGet(defaultSearchTimeout)__            }_        } finally {_            if (response != null) {_                ClearScrollRequest clearScrollRequest = new ClearScrollRequest()__                clearScrollRequest.addScrollId(response.getScrollId())__                client.clearScroll(clearScrollRequest).actionGet(scrollTimeout)__            }_        }__        return triggeredWatches__    };checks,if,any,of,the,loaded,watches,has,been,put,into,the,triggered,watches,index,for,immediate,execution,note,this,is,executing,a,blocking,call,over,the,network,thus,a,potential,source,of,problems,param,watches,the,list,of,watches,that,will,be,loaded,here,param,cluster,state,the,current,cluster,state,return,a,list,of,triggered,watches,that,have,been,started,to,execute,somewhere,else,but,not,finished;public,collection,triggered,watch,find,triggered,watches,collection,watch,watches,cluster,state,cluster,state,if,watches,is,empty,return,collections,empty,list,index,meta,data,index,meta,data,watch,store,utils,get,concrete,index,triggered,watch,store,field,cluster,state,meta,data,if,index,meta,data,null,return,collections,empty,list,try,refresh,request,request,new,refresh,request,triggered,watch,store,field,client,admin,indices,refresh,request,action,get,time,value,time,value,seconds,5,catch,index,not,found,exception,e,return,collections,empty,list,set,string,ids,watches,stream,map,watch,id,collect,collectors,to,set,collection,triggered,watch,triggered,watches,new,array,list,ids,size,search,request,search,request,new,search,request,triggered,watch,store,field,scroll,scroll,timeout,preference,preference,local,to,string,source,new,search,source,builder,size,scroll,size,sort,sort,builders,field,sort,version,true,search,response,response,null,try,response,client,search,search,request,action,get,default,search,timeout,logger,debug,trying,to,find,triggered,watches,for,ids,found,docs,ids,response,get,hits,get,total,hits,while,response,get,hits,get,hits,length,0,for,search,hit,hit,response,get,hits,wid,wid,new,wid,hit,get,id,if,ids,contains,wid,watch,id,triggered,watch,triggered,watch,triggered,watch,parser,parse,hit,get,id,hit,get,version,hit,get,source,ref,triggered,watches,add,triggered,watch,search,scroll,request,request,new,search,scroll,request,response,get,scroll,id,request,scroll,scroll,timeout,response,client,search,scroll,request,action,get,default,search,timeout,finally,if,response,null,clear,scroll,request,clear,scroll,request,new,clear,scroll,request,clear,scroll,request,add,scroll,id,response,get,scroll,id,client,clear,scroll,clear,scroll,request,action,get,scroll,timeout,return,triggered,watches
TriggeredWatchStore -> public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState);1544035746;Checks if any of the loaded watches has been put into the triggered watches index for immediate execution__Note: This is executing a blocking call over the network, thus a potential source of problems__@param watches       The list of watches that will be loaded here_@param clusterState  The current cluster state_@return              A list of triggered watches that have been started to execute somewhere else but not finished;public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState) {_        if (watches.isEmpty()) {_            return Collections.emptyList()__        }__        _        IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(TriggeredWatchStoreField.INDEX_NAME, clusterState.metaData())__        if (indexMetaData == null) {_            return Collections.emptyList()__        }__        try {_            RefreshRequest request = new RefreshRequest(TriggeredWatchStoreField.INDEX_NAME)__            client.admin().indices().refresh(request).actionGet(TimeValue.timeValueSeconds(5))__        } catch (IndexNotFoundException e) {_            return Collections.emptyList()__        }__        Set<String> ids = watches.stream().map(Watch::id).collect(Collectors.toSet())__        Collection<TriggeredWatch> triggeredWatches = new ArrayList<>(ids.size())___        SearchRequest searchRequest = new SearchRequest(TriggeredWatchStoreField.INDEX_NAME)_            .scroll(scrollTimeout)_            .preference(Preference.LOCAL.toString())_            .source(new SearchSourceBuilder()_                .size(scrollSize)_                .sort(SortBuilders.fieldSort("_doc"))_                .version(true))___        SearchResponse response = null__        try {_            response = client.search(searchRequest).actionGet(defaultSearchTimeout)__            logger.debug("trying to find triggered watches for ids {}: found [{}] docs", ids, response.getHits().getTotalHits().value)__            while (response.getHits().getHits().length != 0) {_                for (SearchHit hit : response.getHits()) {_                    Wid wid = new Wid(hit.getId())__                    if (ids.contains(wid.watchId())) {_                        TriggeredWatch triggeredWatch = triggeredWatchParser.parse(hit.getId(), hit.getVersion(), hit.getSourceRef())__                        triggeredWatches.add(triggeredWatch)__                    }_                }_                SearchScrollRequest request = new SearchScrollRequest(response.getScrollId())__                request.scroll(scrollTimeout)__                response = client.searchScroll(request).actionGet(defaultSearchTimeout)__            }_        } finally {_            if (response != null) {_                ClearScrollRequest clearScrollRequest = new ClearScrollRequest()__                clearScrollRequest.addScrollId(response.getScrollId())__                client.clearScroll(clearScrollRequest).actionGet(scrollTimeout)__            }_        }__        return triggeredWatches__    };checks,if,any,of,the,loaded,watches,has,been,put,into,the,triggered,watches,index,for,immediate,execution,note,this,is,executing,a,blocking,call,over,the,network,thus,a,potential,source,of,problems,param,watches,the,list,of,watches,that,will,be,loaded,here,param,cluster,state,the,current,cluster,state,return,a,list,of,triggered,watches,that,have,been,started,to,execute,somewhere,else,but,not,finished;public,collection,triggered,watch,find,triggered,watches,collection,watch,watches,cluster,state,cluster,state,if,watches,is,empty,return,collections,empty,list,index,meta,data,index,meta,data,watch,store,utils,get,concrete,index,triggered,watch,store,field,cluster,state,meta,data,if,index,meta,data,null,return,collections,empty,list,try,refresh,request,request,new,refresh,request,triggered,watch,store,field,client,admin,indices,refresh,request,action,get,time,value,time,value,seconds,5,catch,index,not,found,exception,e,return,collections,empty,list,set,string,ids,watches,stream,map,watch,id,collect,collectors,to,set,collection,triggered,watch,triggered,watches,new,array,list,ids,size,search,request,search,request,new,search,request,triggered,watch,store,field,scroll,scroll,timeout,preference,preference,local,to,string,source,new,search,source,builder,size,scroll,size,sort,sort,builders,field,sort,version,true,search,response,response,null,try,response,client,search,search,request,action,get,default,search,timeout,logger,debug,trying,to,find,triggered,watches,for,ids,found,docs,ids,response,get,hits,get,total,hits,value,while,response,get,hits,get,hits,length,0,for,search,hit,hit,response,get,hits,wid,wid,new,wid,hit,get,id,if,ids,contains,wid,watch,id,triggered,watch,triggered,watch,triggered,watch,parser,parse,hit,get,id,hit,get,version,hit,get,source,ref,triggered,watches,add,triggered,watch,search,scroll,request,request,new,search,scroll,request,response,get,scroll,id,request,scroll,scroll,timeout,response,client,search,scroll,request,action,get,default,search,timeout,finally,if,response,null,clear,scroll,request,clear,scroll,request,new,clear,scroll,request,clear,scroll,request,add,scroll,id,response,get,scroll,id,client,clear,scroll,clear,scroll,request,action,get,scroll,timeout,return,triggered,watches
TriggeredWatchStore -> public void delete(Wid wid);1537300661;Delete a triggered watch entry._Note that this happens asynchronously, as these kind of requests are batched together to reduce the amount of concurrent requests.__@param wid The ID os the triggered watch id;public void delete(Wid wid) {_        DeleteRequest request = new DeleteRequest(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE, wid.value())__        bulkProcessor.add(request)__    };delete,a,triggered,watch,entry,note,that,this,happens,asynchronously,as,these,kind,of,requests,are,batched,together,to,reduce,the,amount,of,concurrent,requests,param,wid,the,id,os,the,triggered,watch,id;public,void,delete,wid,wid,delete,request,request,new,delete,request,triggered,watch,store,field,triggered,watch,store,field,wid,value,bulk,processor,add,request
TriggeredWatchStore -> public void delete(Wid wid);1541092382;Delete a triggered watch entry._Note that this happens asynchronously, as these kind of requests are batched together to reduce the amount of concurrent requests.__@param wid The ID os the triggered watch id;public void delete(Wid wid) {_        DeleteRequest request = new DeleteRequest(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE, wid.value())__        bulkProcessor.add(request)__    };delete,a,triggered,watch,entry,note,that,this,happens,asynchronously,as,these,kind,of,requests,are,batched,together,to,reduce,the,amount,of,concurrent,requests,param,wid,the,id,os,the,triggered,watch,id;public,void,delete,wid,wid,delete,request,request,new,delete,request,triggered,watch,store,field,triggered,watch,store,field,wid,value,bulk,processor,add,request
TriggeredWatchStore -> public void delete(Wid wid);1543343306;Delete a triggered watch entry._Note that this happens asynchronously, as these kind of requests are batched together to reduce the amount of concurrent requests.__@param wid The ID os the triggered watch id;public void delete(Wid wid) {_        DeleteRequest request = new DeleteRequest(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE, wid.value())__        bulkProcessor.add(request)__    };delete,a,triggered,watch,entry,note,that,this,happens,asynchronously,as,these,kind,of,requests,are,batched,together,to,reduce,the,amount,of,concurrent,requests,param,wid,the,id,os,the,triggered,watch,id;public,void,delete,wid,wid,delete,request,request,new,delete,request,triggered,watch,store,field,triggered,watch,store,field,wid,value,bulk,processor,add,request
TriggeredWatchStore -> public void delete(Wid wid);1544035746;Delete a triggered watch entry._Note that this happens asynchronously, as these kind of requests are batched together to reduce the amount of concurrent requests.__@param wid The ID os the triggered watch id;public void delete(Wid wid) {_        DeleteRequest request = new DeleteRequest(TriggeredWatchStoreField.INDEX_NAME, TriggeredWatchStoreField.DOC_TYPE, wid.value())__        bulkProcessor.add(request)__    };delete,a,triggered,watch,entry,note,that,this,happens,asynchronously,as,these,kind,of,requests,are,batched,together,to,reduce,the,amount,of,concurrent,requests,param,wid,the,id,os,the,triggered,watch,id;public,void,delete,wid,wid,delete,request,request,new,delete,request,triggered,watch,store,field,triggered,watch,store,field,wid,value,bulk,processor,add,request
TriggeredWatchStore -> private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches, String docType) throws IOException;1524684173;Create a bulk request from the triggered watches with a specified document type_@param triggeredWatches  The list of triggered watches_@param docType           The document type to use, either the current one or legacy_@return                  The bulk request for the triggered watches_@throws IOException      If a triggered watch could not be parsed to JSON, this exception is thrown;private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches, String docType) throws IOException {_        BulkRequest request = new BulkRequest()__        for (TriggeredWatch triggeredWatch : triggeredWatches) {_            IndexRequest indexRequest = new IndexRequest(TriggeredWatchStoreField.INDEX_NAME, docType, triggeredWatch.id().value())__            try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                triggeredWatch.toXContent(builder, ToXContent.EMPTY_PARAMS)__                indexRequest.source(builder)__            }_            indexRequest.opType(IndexRequest.OpType.CREATE)__            request.add(indexRequest)__        }_        return request__    };create,a,bulk,request,from,the,triggered,watches,with,a,specified,document,type,param,triggered,watches,the,list,of,triggered,watches,param,doc,type,the,document,type,to,use,either,the,current,one,or,legacy,return,the,bulk,request,for,the,triggered,watches,throws,ioexception,if,a,triggered,watch,could,not,be,parsed,to,json,this,exception,is,thrown;private,bulk,request,create,bulk,request,final,list,triggered,watch,triggered,watches,string,doc,type,throws,ioexception,bulk,request,request,new,bulk,request,for,triggered,watch,triggered,watch,triggered,watches,index,request,index,request,new,index,request,triggered,watch,store,field,doc,type,triggered,watch,id,value,try,xcontent,builder,builder,xcontent,factory,json,builder,triggered,watch,to,xcontent,builder,to,xcontent,index,request,source,builder,index,request,op,type,index,request,op,type,create,request,add,index,request,return,request
TriggeredWatchStore -> private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches, String docType) throws IOException;1525334055;Create a bulk request from the triggered watches with a specified document type_@param triggeredWatches  The list of triggered watches_@param docType           The document type to use, either the current one or legacy_@return                  The bulk request for the triggered watches_@throws IOException      If a triggered watch could not be parsed to JSON, this exception is thrown;private BulkRequest createBulkRequest(final List<TriggeredWatch> triggeredWatches, String docType) throws IOException {_        BulkRequest request = new BulkRequest()__        for (TriggeredWatch triggeredWatch : triggeredWatches) {_            IndexRequest indexRequest = new IndexRequest(TriggeredWatchStoreField.INDEX_NAME, docType, triggeredWatch.id().value())__            try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                triggeredWatch.toXContent(builder, ToXContent.EMPTY_PARAMS)__                indexRequest.source(builder)__            }_            indexRequest.opType(IndexRequest.OpType.CREATE)__            request.add(indexRequest)__        }_        return request__    };create,a,bulk,request,from,the,triggered,watches,with,a,specified,document,type,param,triggered,watches,the,list,of,triggered,watches,param,doc,type,the,document,type,to,use,either,the,current,one,or,legacy,return,the,bulk,request,for,the,triggered,watches,throws,ioexception,if,a,triggered,watch,could,not,be,parsed,to,json,this,exception,is,thrown;private,bulk,request,create,bulk,request,final,list,triggered,watch,triggered,watches,string,doc,type,throws,ioexception,bulk,request,request,new,bulk,request,for,triggered,watch,triggered,watch,triggered,watches,index,request,index,request,new,index,request,triggered,watch,store,field,doc,type,triggered,watch,id,value,try,xcontent,builder,builder,xcontent,factory,json,builder,triggered,watch,to,xcontent,builder,to,xcontent,index,request,source,builder,index,request,op,type,index,request,op,type,create,request,add,index,request,return,request
