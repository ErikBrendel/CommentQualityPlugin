commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "watcher_put_watch". }
false;public;2;6;;@Override public RestResponse buildResponse(PutWatchResponse response, XContentBuilder builder) throws Exception {     response.toXContent(builder, request).     RestStatus status = response.isCreated() ? CREATED : OK.     return new BytesRestResponse(status, builder). }
false;protected;2;17;;@Override protected RestChannelConsumer doPrepareRequest(final RestRequest request, WatcherClient client) throws IOException {     PutWatchRequest putWatchRequest = new PutWatchRequest(request.param("id"), request.content(), request.getXContentType()).     putWatchRequest.setVersion(request.paramAsLong("version", Versions.MATCH_ANY)).     putWatchRequest.setIfSeqNo(request.paramAsLong("if_seq_no", putWatchRequest.getIfSeqNo())).     putWatchRequest.setIfPrimaryTerm(request.paramAsLong("if_primary_term", putWatchRequest.getIfPrimaryTerm())).     putWatchRequest.setActive(request.paramAsBoolean("active", putWatchRequest.isActive())).     return channel -> client.putWatch(putWatchRequest, new RestBuilderListener<PutWatchResponse>(channel) {          @Override         public RestResponse buildResponse(PutWatchResponse response, XContentBuilder builder) throws Exception {             response.toXContent(builder, request).             RestStatus status = response.isCreated() ? CREATED : OK.             return new BytesRestResponse(status, builder).         }     }). }
false;public;0;4;;@Override public Set<String> getFilteredFields() {     return FILTERED_FIELDS. }
