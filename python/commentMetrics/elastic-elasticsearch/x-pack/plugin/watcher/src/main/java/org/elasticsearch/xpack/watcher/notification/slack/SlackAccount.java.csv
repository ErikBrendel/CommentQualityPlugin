commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public SlackMessageDefaults getMessageDefaults() {     return messageDefaults. }
false;public;2;14;;public SentMessages send(final SlackMessage message, HttpProxy proxy) {     String[] to = message.getTo().     if (to == null || to.length == 0) {         SentMessages.SentMessage sentMessage = send(null, message, proxy).         return new SentMessages(name, Collections.singletonList(sentMessage)).     }     List<SentMessages.SentMessage> sentMessages = new ArrayList<>().     for (String channel : to) {         sentMessages.add(send(channel, message, proxy)).     }     return new SentMessages(name, sentMessages). }
false;public;2;30;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (to != null) {         builder.field("channel", to).     }     if (message.getFrom() != null) {         builder.field("username", message.getFrom()).     }     String icon = message.getIcon().     if (icon != null) {         if (icon.startsWith("http")) {             builder.field("icon_url", icon).         } else {             builder.field("icon_emoji", icon).         }     }     if (message.getText() != null) {         builder.field("text", message.getText()).     }     Attachment[] attachments = message.getAttachments().     if (attachments != null && attachments.length > 0) {         builder.startArray("attachments").         for (Attachment attachment : attachments) {             attachment.toXContent(builder, params).         }         builder.endArray().     }     return builder. }
false;public;3;48;;public SentMessages.SentMessage send(final String to, final SlackMessage message, final HttpProxy proxy) {     HttpRequest request = HttpRequest.builder(url.getHost(), url.getPort()).path(url.getPath()).method(HttpMethod.POST).proxy(proxy).scheme(Scheme.parse(url.getScheme())).jsonBody(new ToXContent() {          @Override         public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {             if (to != null) {                 builder.field("channel", to).             }             if (message.getFrom() != null) {                 builder.field("username", message.getFrom()).             }             String icon = message.getIcon().             if (icon != null) {                 if (icon.startsWith("http")) {                     builder.field("icon_url", icon).                 } else {                     builder.field("icon_emoji", icon).                 }             }             if (message.getText() != null) {                 builder.field("text", message.getText()).             }             Attachment[] attachments = message.getAttachments().             if (attachments != null && attachments.length > 0) {                 builder.startArray("attachments").                 for (Attachment attachment : attachments) {                     attachment.toXContent(builder, params).                 }                 builder.endArray().             }             return builder.         }     }).build().     try {         HttpResponse response = httpClient.execute(request).         return SentMessages.SentMessage.responded(to, message, request, response).     } catch (Exception e) {         logger.error("failed to execute slack api http request", e).         return SentMessages.SentMessage.error(to, message, e).     } }
false;static;2;13;;static URI url(String name, Settings settings) {     SecureString secureStringUrl = SECURE_URL_SETTING.get(settings).     if (secureStringUrl == null || secureStringUrl.length() < 1) {         throw new SettingsException("invalid slack [" + name + "] account settings. missing required [" + SECURE_URL_SETTING.getKey() + "] setting").     }     try {         return new URI(secureStringUrl.toString()).     } catch (URISyntaxException e) {         throw new SettingsException("invalid slack [" + name + "] account settings. invalid [" + SECURE_URL_SETTING.getKey() + "] setting", e).     } }
