# id;timestamp;commentText;codeText;commentWords;codeWords
WatcherSearchTemplateRequest -> public static WatcherSearchTemplateRequest fromXContent(XContentParser parser, SearchType searchType) throws IOException;1524684173;Reads a new watcher search request instance for the specified parser.;public static WatcherSearchTemplateRequest fromXContent(XContentParser parser, SearchType searchType) throws IOException {_        List<String> indices = new ArrayList<>()__        List<String> types = new ArrayList<>()__        IndicesOptions indicesOptions = DEFAULT_INDICES_OPTIONS__        BytesReference searchSource = null__        Script template = null___        XContentParser.Token token__        String currentFieldName = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentFieldName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            indices.add(parser.textOrNull())__                        } else {_                            throw new ElasticsearchParseException("could not read search request. expected string values in [" +_                                    currentFieldName + "] field, but instead found [" + token + "]")__                        }_                    }_                } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            types.add(parser.textOrNull())__                        } else {_                            throw new ElasticsearchParseException("could not read search request. expected string values in [" +_                                    currentFieldName + "] field, but instead found [" + token + "]")__                        }_                    }_                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected array field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.START_OBJECT) {_                if (BODY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                        builder.copyCurrentStructure(parser)__                        searchSource = BytesReference.bytes(builder)__                    }_                } else if (INDICES_OPTIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    boolean expandOpen = DEFAULT_INDICES_OPTIONS.expandWildcardsOpen()__                    boolean expandClosed = DEFAULT_INDICES_OPTIONS.expandWildcardsClosed()__                    boolean allowNoIndices = DEFAULT_INDICES_OPTIONS.allowNoIndices()__                    boolean ignoreUnavailable = DEFAULT_INDICES_OPTIONS.ignoreUnavailable()__                    while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                        if (token == XContentParser.Token.FIELD_NAME) {_                            currentFieldName = parser.currentName()__                        } else if (token.isValue()) {_                            if (EXPAND_WILDCARDS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                switch (parser.text()) {_                                    case "all":_                                        expandOpen = true__                                        expandClosed = true__                                        break__                                    case "open":_                                        expandOpen = true__                                        expandClosed = false__                                        break__                                    case "closed":_                                        expandOpen = false__                                        expandClosed = true__                                        break__                                    case "none":_                                        expandOpen = false__                                        expandClosed = false__                                        break__                                    default:_                                        throw new ElasticsearchParseException("could not read search request. unknown value [" +_                                                parser.text() + "] for [" + currentFieldName + "] field ")__                                }_                            } else if (IGNORE_UNAVAILABLE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                ignoreUnavailable = parser.booleanValue()__                            } else if (ALLOW_NO_INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                allowNoIndices = parser.booleanValue()__                            } else {_                                throw new ElasticsearchParseException("could not read search request. unexpected index option [" +_                                        currentFieldName + "]")__                            }_                        } else {_                            throw new ElasticsearchParseException("could not read search request. unexpected object field [" +_                                    currentFieldName + "]")__                        }_                    }_                    indicesOptions = IndicesOptions.fromOptions(ignoreUnavailable, allowNoIndices, expandOpen, expandClosed,_                            DEFAULT_INDICES_OPTIONS)__                } else if (TEMPLATE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    template = Script.parse(parser, Script.DEFAULT_TEMPLATE_LANG)__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected object field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.VALUE_STRING) {_                if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    String indicesStr = parser.text()__                    indices.addAll(Arrays.asList(Strings.delimitedListToStringArray(indicesStr, ",", " \t")))__                } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    String typesStr = parser.text()__                    types.addAll(Arrays.asList(Strings.delimitedListToStringArray(typesStr, ",", " \t")))__                } else if (SEARCH_TYPE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    searchType = SearchType.fromString(parser.text().toLowerCase(Locale.ROOT))__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected string field [" +_                            currentFieldName + "]")__                }_            } else {_                throw new ElasticsearchParseException("could not read search request. unexpected token [" + token + "]")__            }_        }__        if (searchSource == null) {_            searchSource = BytesArray.EMPTY__        }__        return new WatcherSearchTemplateRequest(indices.toArray(new String[0]), types.toArray(new String[0]), searchType,_                indicesOptions, searchSource, template)__    };reads,a,new,watcher,search,request,instance,for,the,specified,parser;public,static,watcher,search,template,request,from,xcontent,xcontent,parser,parser,search,type,search,type,throws,ioexception,list,string,indices,new,array,list,list,string,types,new,array,list,indices,options,indices,options,bytes,reference,search,source,null,script,template,null,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,indices,add,parser,text,or,null,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,expected,string,values,in,current,field,name,field,but,instead,found,token,else,if,match,current,field,name,parser,get,deprecation,handler,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,types,add,parser,text,or,null,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,expected,string,values,in,current,field,name,field,but,instead,found,token,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,array,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,search,source,bytes,reference,bytes,builder,else,if,match,current,field,name,parser,get,deprecation,handler,boolean,expand,open,expand,wildcards,open,boolean,expand,closed,expand,wildcards,closed,boolean,allow,no,indices,allow,no,indices,boolean,ignore,unavailable,ignore,unavailable,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,token,is,value,if,match,current,field,name,parser,get,deprecation,handler,switch,parser,text,case,all,expand,open,true,expand,closed,true,break,case,open,expand,open,true,expand,closed,false,break,case,closed,expand,open,false,expand,closed,true,break,case,none,expand,open,false,expand,closed,false,break,default,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unknown,value,parser,text,for,current,field,name,field,else,if,match,current,field,name,parser,get,deprecation,handler,ignore,unavailable,parser,boolean,value,else,if,match,current,field,name,parser,get,deprecation,handler,allow,no,indices,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,index,option,current,field,name,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,object,field,current,field,name,indices,options,indices,options,from,options,ignore,unavailable,allow,no,indices,expand,open,expand,closed,else,if,match,current,field,name,parser,get,deprecation,handler,template,script,parse,parser,script,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,object,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,string,indices,str,parser,text,indices,add,all,arrays,as,list,strings,delimited,list,to,string,array,indices,str,t,else,if,match,current,field,name,parser,get,deprecation,handler,string,types,str,parser,text,types,add,all,arrays,as,list,strings,delimited,list,to,string,array,types,str,t,else,if,match,current,field,name,parser,get,deprecation,handler,search,type,search,type,from,string,parser,text,to,lower,case,locale,root,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,string,field,current,field,name,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,token,token,if,search,source,null,search,source,bytes,array,empty,return,new,watcher,search,template,request,indices,to,array,new,string,0,types,to,array,new,string,0,search,type,indices,options,search,source,template
WatcherSearchTemplateRequest -> public static WatcherSearchTemplateRequest fromXContent(XContentParser parser, SearchType searchType) throws IOException;1543597357;Reads a new watcher search request instance for the specified parser.;public static WatcherSearchTemplateRequest fromXContent(XContentParser parser, SearchType searchType) throws IOException {_        List<String> indices = new ArrayList<>()__        List<String> types = new ArrayList<>()__        IndicesOptions indicesOptions = DEFAULT_INDICES_OPTIONS__        BytesReference searchSource = null__        Script template = null__        boolean totalHitsAsInt = false___        XContentParser.Token token__        String currentFieldName = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentFieldName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            indices.add(parser.textOrNull())__                        } else {_                            throw new ElasticsearchParseException("could not read search request. expected string values in [" +_                                    currentFieldName + "] field, but instead found [" + token + "]")__                        }_                    }_                } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            types.add(parser.textOrNull())__                        } else {_                            throw new ElasticsearchParseException("could not read search request. expected string values in [" +_                                    currentFieldName + "] field, but instead found [" + token + "]")__                        }_                    }_                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected array field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.START_OBJECT) {_                if (BODY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                        builder.copyCurrentStructure(parser)__                        searchSource = BytesReference.bytes(builder)__                    }_                } else if (INDICES_OPTIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    boolean expandOpen = DEFAULT_INDICES_OPTIONS.expandWildcardsOpen()__                    boolean expandClosed = DEFAULT_INDICES_OPTIONS.expandWildcardsClosed()__                    boolean allowNoIndices = DEFAULT_INDICES_OPTIONS.allowNoIndices()__                    boolean ignoreUnavailable = DEFAULT_INDICES_OPTIONS.ignoreUnavailable()__                    while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                        if (token == XContentParser.Token.FIELD_NAME) {_                            currentFieldName = parser.currentName()__                        } else if (token.isValue()) {_                            if (EXPAND_WILDCARDS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                switch (parser.text()) {_                                    case "all":_                                        expandOpen = true__                                        expandClosed = true__                                        break__                                    case "open":_                                        expandOpen = true__                                        expandClosed = false__                                        break__                                    case "closed":_                                        expandOpen = false__                                        expandClosed = true__                                        break__                                    case "none":_                                        expandOpen = false__                                        expandClosed = false__                                        break__                                    default:_                                        throw new ElasticsearchParseException("could not read search request. unknown value [" +_                                                parser.text() + "] for [" + currentFieldName + "] field ")__                                }_                            } else if (IGNORE_UNAVAILABLE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                ignoreUnavailable = parser.booleanValue()__                            } else if (ALLOW_NO_INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                allowNoIndices = parser.booleanValue()__                            } else {_                                throw new ElasticsearchParseException("could not read search request. unexpected index option [" +_                                        currentFieldName + "]")__                            }_                        } else {_                            throw new ElasticsearchParseException("could not read search request. unexpected object field [" +_                                    currentFieldName + "]")__                        }_                    }_                    indicesOptions = IndicesOptions.fromOptions(ignoreUnavailable, allowNoIndices, expandOpen, expandClosed,_                            DEFAULT_INDICES_OPTIONS)__                } else if (TEMPLATE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    template = Script.parse(parser, Script.DEFAULT_TEMPLATE_LANG)__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected object field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.VALUE_STRING) {_                if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    String indicesStr = parser.text()__                    indices.addAll(Arrays.asList(Strings.delimitedListToStringArray(indicesStr, ",", " \t")))__                } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    String typesStr = parser.text()__                    types.addAll(Arrays.asList(Strings.delimitedListToStringArray(typesStr, ",", " \t")))__                } else if (SEARCH_TYPE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    searchType = SearchType.fromString(parser.text().toLowerCase(Locale.ROOT))__                } else if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    totalHitsAsInt = parser.booleanValue()__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected string field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.VALUE_BOOLEAN) {_                if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    totalHitsAsInt = parser.booleanValue()__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected boolean field [" +_                        currentFieldName + "]")__                }_            } else {_                throw new ElasticsearchParseException("could not read search request. unexpected token [" + token + "]")__            }_        }__        if (searchSource == null) {_            searchSource = BytesArray.EMPTY__        }__        WatcherSearchTemplateRequest request = new WatcherSearchTemplateRequest(indices.toArray(new String[0]),_            types.toArray(new String[0]), searchType, indicesOptions, searchSource, template)__        request.setRestTotalHitsAsInt(totalHitsAsInt)__        return request__    };reads,a,new,watcher,search,request,instance,for,the,specified,parser;public,static,watcher,search,template,request,from,xcontent,xcontent,parser,parser,search,type,search,type,throws,ioexception,list,string,indices,new,array,list,list,string,types,new,array,list,indices,options,indices,options,bytes,reference,search,source,null,script,template,null,boolean,total,hits,as,int,false,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,indices,add,parser,text,or,null,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,expected,string,values,in,current,field,name,field,but,instead,found,token,else,if,match,current,field,name,parser,get,deprecation,handler,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,types,add,parser,text,or,null,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,expected,string,values,in,current,field,name,field,but,instead,found,token,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,array,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,search,source,bytes,reference,bytes,builder,else,if,match,current,field,name,parser,get,deprecation,handler,boolean,expand,open,expand,wildcards,open,boolean,expand,closed,expand,wildcards,closed,boolean,allow,no,indices,allow,no,indices,boolean,ignore,unavailable,ignore,unavailable,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,token,is,value,if,match,current,field,name,parser,get,deprecation,handler,switch,parser,text,case,all,expand,open,true,expand,closed,true,break,case,open,expand,open,true,expand,closed,false,break,case,closed,expand,open,false,expand,closed,true,break,case,none,expand,open,false,expand,closed,false,break,default,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unknown,value,parser,text,for,current,field,name,field,else,if,match,current,field,name,parser,get,deprecation,handler,ignore,unavailable,parser,boolean,value,else,if,match,current,field,name,parser,get,deprecation,handler,allow,no,indices,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,index,option,current,field,name,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,object,field,current,field,name,indices,options,indices,options,from,options,ignore,unavailable,allow,no,indices,expand,open,expand,closed,else,if,match,current,field,name,parser,get,deprecation,handler,template,script,parse,parser,script,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,object,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,string,indices,str,parser,text,indices,add,all,arrays,as,list,strings,delimited,list,to,string,array,indices,str,t,else,if,match,current,field,name,parser,get,deprecation,handler,string,types,str,parser,text,types,add,all,arrays,as,list,strings,delimited,list,to,string,array,types,str,t,else,if,match,current,field,name,parser,get,deprecation,handler,search,type,search,type,from,string,parser,text,to,lower,case,locale,root,else,if,match,current,field,name,parser,get,deprecation,handler,total,hits,as,int,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,string,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,total,hits,as,int,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,boolean,field,current,field,name,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,token,token,if,search,source,null,search,source,bytes,array,empty,watcher,search,template,request,request,new,watcher,search,template,request,indices,to,array,new,string,0,types,to,array,new,string,0,search,type,indices,options,search,source,template,request,set,rest,total,hits,as,int,total,hits,as,int,return,request
WatcherSearchTemplateRequest -> public static WatcherSearchTemplateRequest fromXContent(XContentParser parser, SearchType searchType) throws IOException;1544035746;Reads a new watcher search request instance for the specified parser.;public static WatcherSearchTemplateRequest fromXContent(XContentParser parser, SearchType searchType) throws IOException {_        List<String> indices = new ArrayList<>()__        List<String> types = new ArrayList<>()__        IndicesOptions indicesOptions = DEFAULT_INDICES_OPTIONS__        BytesReference searchSource = null__        Script template = null__        boolean totalHitsAsInt = false___        XContentParser.Token token__        String currentFieldName = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentFieldName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            indices.add(parser.textOrNull())__                        } else {_                            throw new ElasticsearchParseException("could not read search request. expected string values in [" +_                                    currentFieldName + "] field, but instead found [" + token + "]")__                        }_                    }_                } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            types.add(parser.textOrNull())__                        } else {_                            throw new ElasticsearchParseException("could not read search request. expected string values in [" +_                                    currentFieldName + "] field, but instead found [" + token + "]")__                        }_                    }_                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected array field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.START_OBJECT) {_                if (BODY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                        builder.copyCurrentStructure(parser)__                        searchSource = BytesReference.bytes(builder)__                    }_                } else if (INDICES_OPTIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    boolean expandOpen = DEFAULT_INDICES_OPTIONS.expandWildcardsOpen()__                    boolean expandClosed = DEFAULT_INDICES_OPTIONS.expandWildcardsClosed()__                    boolean allowNoIndices = DEFAULT_INDICES_OPTIONS.allowNoIndices()__                    boolean ignoreUnavailable = DEFAULT_INDICES_OPTIONS.ignoreUnavailable()__                    while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                        if (token == XContentParser.Token.FIELD_NAME) {_                            currentFieldName = parser.currentName()__                        } else if (token.isValue()) {_                            if (EXPAND_WILDCARDS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                switch (parser.text()) {_                                    case "all":_                                        expandOpen = true__                                        expandClosed = true__                                        break__                                    case "open":_                                        expandOpen = true__                                        expandClosed = false__                                        break__                                    case "closed":_                                        expandOpen = false__                                        expandClosed = true__                                        break__                                    case "none":_                                        expandOpen = false__                                        expandClosed = false__                                        break__                                    default:_                                        throw new ElasticsearchParseException("could not read search request. unknown value [" +_                                                parser.text() + "] for [" + currentFieldName + "] field ")__                                }_                            } else if (IGNORE_UNAVAILABLE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                ignoreUnavailable = parser.booleanValue()__                            } else if (ALLOW_NO_INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                allowNoIndices = parser.booleanValue()__                            } else {_                                throw new ElasticsearchParseException("could not read search request. unexpected index option [" +_                                        currentFieldName + "]")__                            }_                        } else {_                            throw new ElasticsearchParseException("could not read search request. unexpected object field [" +_                                    currentFieldName + "]")__                        }_                    }_                    indicesOptions = IndicesOptions.fromOptions(ignoreUnavailable, allowNoIndices, expandOpen, expandClosed,_                            DEFAULT_INDICES_OPTIONS)__                } else if (TEMPLATE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    template = Script.parse(parser, Script.DEFAULT_TEMPLATE_LANG)__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected object field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.VALUE_STRING) {_                if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    String indicesStr = parser.text()__                    indices.addAll(Arrays.asList(Strings.delimitedListToStringArray(indicesStr, ",", " \t")))__                } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    String typesStr = parser.text()__                    types.addAll(Arrays.asList(Strings.delimitedListToStringArray(typesStr, ",", " \t")))__                } else if (SEARCH_TYPE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    searchType = SearchType.fromString(parser.text().toLowerCase(Locale.ROOT))__                } else if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    totalHitsAsInt = parser.booleanValue()__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected string field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.VALUE_BOOLEAN) {_                if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    totalHitsAsInt = parser.booleanValue()__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected boolean field [" +_                        currentFieldName + "]")__                }_            } else {_                throw new ElasticsearchParseException("could not read search request. unexpected token [" + token + "]")__            }_        }__        if (searchSource == null) {_            searchSource = BytesArray.EMPTY__        }__        WatcherSearchTemplateRequest request = new WatcherSearchTemplateRequest(indices.toArray(new String[0]),_            types.toArray(new String[0]), searchType, indicesOptions, searchSource, template)__        request.setRestTotalHitsAsInt(totalHitsAsInt)__        return request__    };reads,a,new,watcher,search,request,instance,for,the,specified,parser;public,static,watcher,search,template,request,from,xcontent,xcontent,parser,parser,search,type,search,type,throws,ioexception,list,string,indices,new,array,list,list,string,types,new,array,list,indices,options,indices,options,bytes,reference,search,source,null,script,template,null,boolean,total,hits,as,int,false,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,indices,add,parser,text,or,null,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,expected,string,values,in,current,field,name,field,but,instead,found,token,else,if,match,current,field,name,parser,get,deprecation,handler,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,types,add,parser,text,or,null,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,expected,string,values,in,current,field,name,field,but,instead,found,token,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,array,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,search,source,bytes,reference,bytes,builder,else,if,match,current,field,name,parser,get,deprecation,handler,boolean,expand,open,expand,wildcards,open,boolean,expand,closed,expand,wildcards,closed,boolean,allow,no,indices,allow,no,indices,boolean,ignore,unavailable,ignore,unavailable,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,token,is,value,if,match,current,field,name,parser,get,deprecation,handler,switch,parser,text,case,all,expand,open,true,expand,closed,true,break,case,open,expand,open,true,expand,closed,false,break,case,closed,expand,open,false,expand,closed,true,break,case,none,expand,open,false,expand,closed,false,break,default,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unknown,value,parser,text,for,current,field,name,field,else,if,match,current,field,name,parser,get,deprecation,handler,ignore,unavailable,parser,boolean,value,else,if,match,current,field,name,parser,get,deprecation,handler,allow,no,indices,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,index,option,current,field,name,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,object,field,current,field,name,indices,options,indices,options,from,options,ignore,unavailable,allow,no,indices,expand,open,expand,closed,else,if,match,current,field,name,parser,get,deprecation,handler,template,script,parse,parser,script,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,object,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,string,indices,str,parser,text,indices,add,all,arrays,as,list,strings,delimited,list,to,string,array,indices,str,t,else,if,match,current,field,name,parser,get,deprecation,handler,string,types,str,parser,text,types,add,all,arrays,as,list,strings,delimited,list,to,string,array,types,str,t,else,if,match,current,field,name,parser,get,deprecation,handler,search,type,search,type,from,string,parser,text,to,lower,case,locale,root,else,if,match,current,field,name,parser,get,deprecation,handler,total,hits,as,int,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,string,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,total,hits,as,int,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,boolean,field,current,field,name,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,token,token,if,search,source,null,search,source,bytes,array,empty,watcher,search,template,request,request,new,watcher,search,template,request,indices,to,array,new,string,0,types,to,array,new,string,0,search,type,indices,options,search,source,template,request,set,rest,total,hits,as,int,total,hits,as,int,return,request
WatcherSearchTemplateRequest -> public static WatcherSearchTemplateRequest fromXContent(XContentParser parser, SearchType searchType) throws IOException;1545124299;Reads a new watcher search request instance for the specified parser.;public static WatcherSearchTemplateRequest fromXContent(XContentParser parser, SearchType searchType) throws IOException {_        List<String> indices = new ArrayList<>()__        List<String> types = new ArrayList<>()__        IndicesOptions indicesOptions = DEFAULT_INDICES_OPTIONS__        BytesReference searchSource = null__        Script template = null__        _        boolean totalHitsAsInt = true___        XContentParser.Token token__        String currentFieldName = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentFieldName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            indices.add(parser.textOrNull())__                        } else {_                            throw new ElasticsearchParseException("could not read search request. expected string values in [" +_                                    currentFieldName + "] field, but instead found [" + token + "]")__                        }_                    }_                } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            types.add(parser.textOrNull())__                        } else {_                            throw new ElasticsearchParseException("could not read search request. expected string values in [" +_                                    currentFieldName + "] field, but instead found [" + token + "]")__                        }_                    }_                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected array field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.START_OBJECT) {_                if (BODY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                        builder.copyCurrentStructure(parser)__                        searchSource = BytesReference.bytes(builder)__                    }_                } else if (INDICES_OPTIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    boolean expandOpen = DEFAULT_INDICES_OPTIONS.expandWildcardsOpen()__                    boolean expandClosed = DEFAULT_INDICES_OPTIONS.expandWildcardsClosed()__                    boolean allowNoIndices = DEFAULT_INDICES_OPTIONS.allowNoIndices()__                    boolean ignoreUnavailable = DEFAULT_INDICES_OPTIONS.ignoreUnavailable()__                    while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                        if (token == XContentParser.Token.FIELD_NAME) {_                            currentFieldName = parser.currentName()__                        } else if (token.isValue()) {_                            if (EXPAND_WILDCARDS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                switch (parser.text()) {_                                    case "all":_                                        expandOpen = true__                                        expandClosed = true__                                        break__                                    case "open":_                                        expandOpen = true__                                        expandClosed = false__                                        break__                                    case "closed":_                                        expandOpen = false__                                        expandClosed = true__                                        break__                                    case "none":_                                        expandOpen = false__                                        expandClosed = false__                                        break__                                    default:_                                        throw new ElasticsearchParseException("could not read search request. unknown value [" +_                                                parser.text() + "] for [" + currentFieldName + "] field ")__                                }_                            } else if (IGNORE_UNAVAILABLE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                ignoreUnavailable = parser.booleanValue()__                            } else if (ALLOW_NO_INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                allowNoIndices = parser.booleanValue()__                            } else {_                                throw new ElasticsearchParseException("could not read search request. unexpected index option [" +_                                        currentFieldName + "]")__                            }_                        } else {_                            throw new ElasticsearchParseException("could not read search request. unexpected object field [" +_                                    currentFieldName + "]")__                        }_                    }_                    indicesOptions = IndicesOptions.fromOptions(ignoreUnavailable, allowNoIndices, expandOpen, expandClosed,_                            DEFAULT_INDICES_OPTIONS)__                } else if (TEMPLATE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    template = Script.parse(parser, Script.DEFAULT_TEMPLATE_LANG)__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected object field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.VALUE_STRING) {_                if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    String indicesStr = parser.text()__                    indices.addAll(Arrays.asList(Strings.delimitedListToStringArray(indicesStr, ",", " \t")))__                } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    String typesStr = parser.text()__                    types.addAll(Arrays.asList(Strings.delimitedListToStringArray(typesStr, ",", " \t")))__                } else if (SEARCH_TYPE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    searchType = SearchType.fromString(parser.text().toLowerCase(Locale.ROOT))__                } else if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    totalHitsAsInt = parser.booleanValue()__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected string field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.VALUE_BOOLEAN) {_                if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    totalHitsAsInt = parser.booleanValue()__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected boolean field [" +_                        currentFieldName + "]")__                }_            } else {_                throw new ElasticsearchParseException("could not read search request. unexpected token [" + token + "]")__            }_        }__        if (searchSource == null) {_            searchSource = BytesArray.EMPTY__        }__        WatcherSearchTemplateRequest request = new WatcherSearchTemplateRequest(indices.toArray(new String[0]),_            types.toArray(new String[0]), searchType, indicesOptions, searchSource, template)__        request.setRestTotalHitsAsInt(totalHitsAsInt)__        return request__    };reads,a,new,watcher,search,request,instance,for,the,specified,parser;public,static,watcher,search,template,request,from,xcontent,xcontent,parser,parser,search,type,search,type,throws,ioexception,list,string,indices,new,array,list,list,string,types,new,array,list,indices,options,indices,options,bytes,reference,search,source,null,script,template,null,boolean,total,hits,as,int,true,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,indices,add,parser,text,or,null,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,expected,string,values,in,current,field,name,field,but,instead,found,token,else,if,match,current,field,name,parser,get,deprecation,handler,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,types,add,parser,text,or,null,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,expected,string,values,in,current,field,name,field,but,instead,found,token,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,array,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,search,source,bytes,reference,bytes,builder,else,if,match,current,field,name,parser,get,deprecation,handler,boolean,expand,open,expand,wildcards,open,boolean,expand,closed,expand,wildcards,closed,boolean,allow,no,indices,allow,no,indices,boolean,ignore,unavailable,ignore,unavailable,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,token,is,value,if,match,current,field,name,parser,get,deprecation,handler,switch,parser,text,case,all,expand,open,true,expand,closed,true,break,case,open,expand,open,true,expand,closed,false,break,case,closed,expand,open,false,expand,closed,true,break,case,none,expand,open,false,expand,closed,false,break,default,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unknown,value,parser,text,for,current,field,name,field,else,if,match,current,field,name,parser,get,deprecation,handler,ignore,unavailable,parser,boolean,value,else,if,match,current,field,name,parser,get,deprecation,handler,allow,no,indices,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,index,option,current,field,name,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,object,field,current,field,name,indices,options,indices,options,from,options,ignore,unavailable,allow,no,indices,expand,open,expand,closed,else,if,match,current,field,name,parser,get,deprecation,handler,template,script,parse,parser,script,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,object,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,string,indices,str,parser,text,indices,add,all,arrays,as,list,strings,delimited,list,to,string,array,indices,str,t,else,if,match,current,field,name,parser,get,deprecation,handler,string,types,str,parser,text,types,add,all,arrays,as,list,strings,delimited,list,to,string,array,types,str,t,else,if,match,current,field,name,parser,get,deprecation,handler,search,type,search,type,from,string,parser,text,to,lower,case,locale,root,else,if,match,current,field,name,parser,get,deprecation,handler,total,hits,as,int,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,string,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,total,hits,as,int,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,boolean,field,current,field,name,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,token,token,if,search,source,null,search,source,bytes,array,empty,watcher,search,template,request,request,new,watcher,search,template,request,indices,to,array,new,string,0,types,to,array,new,string,0,search,type,indices,options,search,source,template,request,set,rest,total,hits,as,int,total,hits,as,int,return,request
WatcherSearchTemplateRequest -> public static WatcherSearchTemplateRequest fromXContent(XContentParser parser, SearchType searchType) throws IOException;1548704803;Reads a new watcher search request instance for the specified parser.;public static WatcherSearchTemplateRequest fromXContent(XContentParser parser, SearchType searchType) throws IOException {_        List<String> indices = new ArrayList<>()__        List<String> types = new ArrayList<>()__        IndicesOptions indicesOptions = DEFAULT_INDICES_OPTIONS__        BytesReference searchSource = null__        Script template = null__        _        boolean totalHitsAsInt = true___        XContentParser.Token token__        String currentFieldName = null__        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            if (token == XContentParser.Token.FIELD_NAME) {_                currentFieldName = parser.currentName()__            } else if (token == XContentParser.Token.START_ARRAY) {_                if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            indices.add(parser.textOrNull())__                        } else {_                            throw new ElasticsearchParseException("could not read search request. expected string values in [" +_                                    currentFieldName + "] field, but instead found [" + token + "]")__                        }_                    }_                } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    deprecationLogger.deprecatedAndMaybeLog("watcher_search_input", TYPES_DEPRECATION_MESSAGE)__                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {_                        if (token == XContentParser.Token.VALUE_STRING) {_                            types.add(parser.textOrNull())__                        } else {_                            throw new ElasticsearchParseException("could not read search request. expected string values in [" +_                                    currentFieldName + "] field, but instead found [" + token + "]")__                        }_                    }_                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected array field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.START_OBJECT) {_                if (BODY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                        builder.copyCurrentStructure(parser)__                        searchSource = BytesReference.bytes(builder)__                    }_                } else if (INDICES_OPTIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    boolean expandOpen = DEFAULT_INDICES_OPTIONS.expandWildcardsOpen()__                    boolean expandClosed = DEFAULT_INDICES_OPTIONS.expandWildcardsClosed()__                    boolean allowNoIndices = DEFAULT_INDICES_OPTIONS.allowNoIndices()__                    boolean ignoreUnavailable = DEFAULT_INDICES_OPTIONS.ignoreUnavailable()__                    while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                        if (token == XContentParser.Token.FIELD_NAME) {_                            currentFieldName = parser.currentName()__                        } else if (token.isValue()) {_                            if (EXPAND_WILDCARDS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                switch (parser.text()) {_                                    case "all":_                                        expandOpen = true__                                        expandClosed = true__                                        break__                                    case "open":_                                        expandOpen = true__                                        expandClosed = false__                                        break__                                    case "closed":_                                        expandOpen = false__                                        expandClosed = true__                                        break__                                    case "none":_                                        expandOpen = false__                                        expandClosed = false__                                        break__                                    default:_                                        throw new ElasticsearchParseException("could not read search request. unknown value [" +_                                                parser.text() + "] for [" + currentFieldName + "] field ")__                                }_                            } else if (IGNORE_UNAVAILABLE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                ignoreUnavailable = parser.booleanValue()__                            } else if (ALLOW_NO_INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                                allowNoIndices = parser.booleanValue()__                            } else {_                                throw new ElasticsearchParseException("could not read search request. unexpected index option [" +_                                        currentFieldName + "]")__                            }_                        } else {_                            throw new ElasticsearchParseException("could not read search request. unexpected object field [" +_                                    currentFieldName + "]")__                        }_                    }_                    indicesOptions = IndicesOptions.fromOptions(ignoreUnavailable, allowNoIndices, expandOpen, expandClosed,_                            DEFAULT_INDICES_OPTIONS)__                } else if (TEMPLATE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    template = Script.parse(parser, Script.DEFAULT_TEMPLATE_LANG)__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected object field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.VALUE_STRING) {_                if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    String indicesStr = parser.text()__                    indices.addAll(Arrays.asList(Strings.delimitedListToStringArray(indicesStr, ",", " \t")))__                } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    deprecationLogger.deprecatedAndMaybeLog("watcher_search_input", TYPES_DEPRECATION_MESSAGE)__                    String typesStr = parser.text()__                    types.addAll(Arrays.asList(Strings.delimitedListToStringArray(typesStr, ",", " \t")))__                } else if (SEARCH_TYPE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    searchType = SearchType.fromString(parser.text().toLowerCase(Locale.ROOT))__                } else if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    totalHitsAsInt = parser.booleanValue()__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected string field [" +_                            currentFieldName + "]")__                }_            } else if (token == XContentParser.Token.VALUE_BOOLEAN) {_                if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {_                    totalHitsAsInt = parser.booleanValue()__                } else {_                    throw new ElasticsearchParseException("could not read search request. unexpected boolean field [" +_                        currentFieldName + "]")__                }_            } else {_                throw new ElasticsearchParseException("could not read search request. unexpected token [" + token + "]")__            }_        }__        if (searchSource == null) {_            searchSource = BytesArray.EMPTY__        }__        WatcherSearchTemplateRequest request = new WatcherSearchTemplateRequest(indices.toArray(new String[0]),_            types.size() == 0 ? null : types.toArray(new String[0]), searchType, indicesOptions, searchSource, template)__        request.setRestTotalHitsAsInt(totalHitsAsInt)__        return request__    };reads,a,new,watcher,search,request,instance,for,the,specified,parser;public,static,watcher,search,template,request,from,xcontent,xcontent,parser,parser,search,type,search,type,throws,ioexception,list,string,indices,new,array,list,list,string,types,new,array,list,indices,options,indices,options,bytes,reference,search,source,null,script,template,null,boolean,total,hits,as,int,true,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,indices,add,parser,text,or,null,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,expected,string,values,in,current,field,name,field,but,instead,found,token,else,if,match,current,field,name,parser,get,deprecation,handler,deprecation,logger,deprecated,and,maybe,log,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,types,add,parser,text,or,null,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,expected,string,values,in,current,field,name,field,but,instead,found,token,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,array,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,search,source,bytes,reference,bytes,builder,else,if,match,current,field,name,parser,get,deprecation,handler,boolean,expand,open,expand,wildcards,open,boolean,expand,closed,expand,wildcards,closed,boolean,allow,no,indices,allow,no,indices,boolean,ignore,unavailable,ignore,unavailable,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,token,is,value,if,match,current,field,name,parser,get,deprecation,handler,switch,parser,text,case,all,expand,open,true,expand,closed,true,break,case,open,expand,open,true,expand,closed,false,break,case,closed,expand,open,false,expand,closed,true,break,case,none,expand,open,false,expand,closed,false,break,default,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unknown,value,parser,text,for,current,field,name,field,else,if,match,current,field,name,parser,get,deprecation,handler,ignore,unavailable,parser,boolean,value,else,if,match,current,field,name,parser,get,deprecation,handler,allow,no,indices,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,index,option,current,field,name,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,object,field,current,field,name,indices,options,indices,options,from,options,ignore,unavailable,allow,no,indices,expand,open,expand,closed,else,if,match,current,field,name,parser,get,deprecation,handler,template,script,parse,parser,script,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,object,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,string,indices,str,parser,text,indices,add,all,arrays,as,list,strings,delimited,list,to,string,array,indices,str,t,else,if,match,current,field,name,parser,get,deprecation,handler,deprecation,logger,deprecated,and,maybe,log,string,types,str,parser,text,types,add,all,arrays,as,list,strings,delimited,list,to,string,array,types,str,t,else,if,match,current,field,name,parser,get,deprecation,handler,search,type,search,type,from,string,parser,text,to,lower,case,locale,root,else,if,match,current,field,name,parser,get,deprecation,handler,total,hits,as,int,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,string,field,current,field,name,else,if,token,xcontent,parser,token,if,match,current,field,name,parser,get,deprecation,handler,total,hits,as,int,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,boolean,field,current,field,name,else,throw,new,elasticsearch,parse,exception,could,not,read,search,request,unexpected,token,token,if,search,source,null,search,source,bytes,array,empty,watcher,search,template,request,request,new,watcher,search,template,request,indices,to,array,new,string,0,types,size,0,null,types,to,array,new,string,0,search,type,indices,options,search,source,template,request,set,rest,total,hits,as,int,total,hits,as,int,return,request
WatcherSearchTemplateRequest -> public void setRestTotalHitsAsInt(boolean value);1543597357;Indicates whether the total hits in the response should be_serialized as number (<code>true</code>) or as an object (<code>false</code>)._Defaults to false.;public void setRestTotalHitsAsInt(boolean value) {_        this.restTotalHitsAsInt = restTotalHitsAsInt__    };indicates,whether,the,total,hits,in,the,response,should,be,serialized,as,number,code,true,code,or,as,an,object,code,false,code,defaults,to,false;public,void,set,rest,total,hits,as,int,boolean,value,this,rest,total,hits,as,int,rest,total,hits,as,int
WatcherSearchTemplateRequest -> public void setRestTotalHitsAsInt(boolean value);1544035746;Indicates whether the total hits in the response should be_serialized as number (<code>true</code>) or as an object (<code>false</code>)._Defaults to false.;public void setRestTotalHitsAsInt(boolean value) {_        this.restTotalHitsAsInt = value__    };indicates,whether,the,total,hits,in,the,response,should,be,serialized,as,number,code,true,code,or,as,an,object,code,false,code,defaults,to,false;public,void,set,rest,total,hits,as,int,boolean,value,this,rest,total,hits,as,int,value
WatcherSearchTemplateRequest -> public void setRestTotalHitsAsInt(boolean value);1545124299;Indicates whether the total hits in the response should be_serialized as number (<code>true</code>) or as an object (<code>false</code>)._Defaults to false.;public void setRestTotalHitsAsInt(boolean value) {_        this.restTotalHitsAsInt = value__    };indicates,whether,the,total,hits,in,the,response,should,be,serialized,as,number,code,true,code,or,as,an,object,code,false,code,defaults,to,false;public,void,set,rest,total,hits,as,int,boolean,value,this,rest,total,hits,as,int,value
WatcherSearchTemplateRequest -> public void setRestTotalHitsAsInt(boolean value);1548704803;Indicates whether the total hits in the response should be_serialized as number (<code>true</code>) or as an object (<code>false</code>)._Defaults to false.;public void setRestTotalHitsAsInt(boolean value) {_        this.restTotalHitsAsInt = value__    };indicates,whether,the,total,hits,in,the,response,should,be,serialized,as,number,code,true,code,or,as,an,object,code,false,code,defaults,to,false;public,void,set,rest,total,hits,as,int,boolean,value,this,rest,total,hits,as,int,value
