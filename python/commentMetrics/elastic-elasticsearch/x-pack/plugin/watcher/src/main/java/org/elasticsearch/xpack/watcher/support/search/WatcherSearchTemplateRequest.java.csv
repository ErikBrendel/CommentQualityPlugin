commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Nullable public Script getTemplate() {     return template. }
false;public;0;3;;public String[] getIndices() {     return indices. }
false;public;0;3;;public String[] getTypes() {     return types. }
false;public;0;3;;public SearchType getSearchType() {     return searchType. }
false;public;0;3;;public IndicesOptions getIndicesOptions() {     return indicesOptions. }
false;public;0;3;;public boolean isRestTotalHitsAsint() {     return restTotalHitsAsInt. }
true;public;1;3;/**  * Indicates whether the total hits in the response should be  * serialized as number (<code>true</code>) or as an object (<code>false</code>).  * Defaults to false.  */ ;/**  * Indicates whether the total hits in the response should be  * serialized as number (<code>true</code>) or as an object (<code>false</code>).  * Defaults to false.  */ public void setRestTotalHitsAsInt(boolean value) {     this.restTotalHitsAsInt = value. }
false;public;0;3;;public BytesReference getSearchSource() {     return searchSource. }
false;public;0;7;;public Script getOrCreateTemplate() {     if (template != null) {         return template.     } else {         return new Script(ScriptType.INLINE, Script.DEFAULT_TEMPLATE_LANG, searchSource.utf8ToString(), Collections.emptyMap()).     } }
false;public;2;42;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (searchType != null) {         builder.field(SEARCH_TYPE_FIELD.getPreferredName(), searchType.toString().toLowerCase(Locale.ENGLISH)).     }     if (indices != null) {         builder.array(INDICES_FIELD.getPreferredName(), indices).     }     if (types != null) {         builder.array(TYPES_FIELD.getPreferredName(), types).     }     if (restTotalHitsAsInt) {         builder.field(REST_TOTAL_HITS_AS_INT_FIELD.getPreferredName(), restTotalHitsAsInt).     }     if (searchSource != null && searchSource.length() > 0) {         try (InputStream stream = searchSource.streamInput()) {             builder.rawField(BODY_FIELD.getPreferredName(), stream).         }     }     if (indicesOptions != DEFAULT_INDICES_OPTIONS) {         builder.startObject(INDICES_OPTIONS_FIELD.getPreferredName()).         String value.         if (indicesOptions.expandWildcardsClosed() && indicesOptions.expandWildcardsOpen()) {             value = "all".         } else if (indicesOptions.expandWildcardsOpen()) {             value = "open".         } else if (indicesOptions.expandWildcardsClosed()) {             value = "closed".         } else {             value = "none".         }         builder.field(EXPAND_WILDCARDS_FIELD.getPreferredName(), value).         builder.field(IGNORE_UNAVAILABLE_FIELD.getPreferredName(), indicesOptions.ignoreUnavailable()).         builder.field(ALLOW_NO_INDICES_FIELD.getPreferredName(), indicesOptions.allowNoIndices()).         builder.endObject().     }     if (template != null) {         builder.field(TEMPLATE_FIELD.getPreferredName(), template).     }     return builder.endObject(). }
true;public,static;2;133;/**  * Reads a new watcher search request instance for the specified parser.  */ ;/**  * Reads a new watcher search request instance for the specified parser.  */ public static WatcherSearchTemplateRequest fromXContent(XContentParser parser, SearchType searchType) throws IOException {     List<String> indices = new ArrayList<>().     List<String> types = new ArrayList<>().     IndicesOptions indicesOptions = DEFAULT_INDICES_OPTIONS.     BytesReference searchSource = null.     Script template = null.     // TODO this is to retain BWC compatibility in 7.0 and can be removed for 8.0     boolean totalHitsAsInt = true.     XContentParser.Token token.     String currentFieldName = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.START_ARRAY) {             if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                     if (token == XContentParser.Token.VALUE_STRING) {                         indices.add(parser.textOrNull()).                     } else {                         throw new ElasticsearchParseException("could not read search request. expected string values in [" + currentFieldName + "] field, but instead found [" + token + "]").                     }                 }             } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 deprecationLogger.deprecatedAndMaybeLog("watcher_search_input", TYPES_DEPRECATION_MESSAGE).                 while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                     if (token == XContentParser.Token.VALUE_STRING) {                         types.add(parser.textOrNull()).                     } else {                         throw new ElasticsearchParseException("could not read search request. expected string values in [" + currentFieldName + "] field, but instead found [" + token + "]").                     }                 }             } else {                 throw new ElasticsearchParseException("could not read search request. unexpected array field [" + currentFieldName + "]").             }         } else if (token == XContentParser.Token.START_OBJECT) {             if (BODY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 try (XContentBuilder builder = XContentFactory.jsonBuilder()) {                     builder.copyCurrentStructure(parser).                     searchSource = BytesReference.bytes(builder).                 }             } else if (INDICES_OPTIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 boolean expandOpen = DEFAULT_INDICES_OPTIONS.expandWildcardsOpen().                 boolean expandClosed = DEFAULT_INDICES_OPTIONS.expandWildcardsClosed().                 boolean allowNoIndices = DEFAULT_INDICES_OPTIONS.allowNoIndices().                 boolean ignoreUnavailable = DEFAULT_INDICES_OPTIONS.ignoreUnavailable().                 while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                     if (token == XContentParser.Token.FIELD_NAME) {                         currentFieldName = parser.currentName().                     } else if (token.isValue()) {                         if (EXPAND_WILDCARDS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                             switch(parser.text()) {                                 case "all":                                     expandOpen = true.                                     expandClosed = true.                                     break.                                 case "open":                                     expandOpen = true.                                     expandClosed = false.                                     break.                                 case "closed":                                     expandOpen = false.                                     expandClosed = true.                                     break.                                 case "none":                                     expandOpen = false.                                     expandClosed = false.                                     break.                                 default:                                     throw new ElasticsearchParseException("could not read search request. unknown value [" + parser.text() + "] for [" + currentFieldName + "] field ").                             }                         } else if (IGNORE_UNAVAILABLE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                             ignoreUnavailable = parser.booleanValue().                         } else if (ALLOW_NO_INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                             allowNoIndices = parser.booleanValue().                         } else {                             throw new ElasticsearchParseException("could not read search request. unexpected index option [" + currentFieldName + "]").                         }                     } else {                         throw new ElasticsearchParseException("could not read search request. unexpected object field [" + currentFieldName + "]").                     }                 }                 indicesOptions = IndicesOptions.fromOptions(ignoreUnavailable, allowNoIndices, expandOpen, expandClosed, DEFAULT_INDICES_OPTIONS).             } else if (TEMPLATE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 template = Script.parse(parser, Script.DEFAULT_TEMPLATE_LANG).             } else {                 throw new ElasticsearchParseException("could not read search request. unexpected object field [" + currentFieldName + "]").             }         } else if (token == XContentParser.Token.VALUE_STRING) {             if (INDICES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 String indicesStr = parser.text().                 indices.addAll(Arrays.asList(Strings.delimitedListToStringArray(indicesStr, ",", " \t"))).             } else if (TYPES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 deprecationLogger.deprecatedAndMaybeLog("watcher_search_input", TYPES_DEPRECATION_MESSAGE).                 String typesStr = parser.text().                 types.addAll(Arrays.asList(Strings.delimitedListToStringArray(typesStr, ",", " \t"))).             } else if (SEARCH_TYPE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 searchType = SearchType.fromString(parser.text().toLowerCase(Locale.ROOT)).             } else if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 totalHitsAsInt = parser.booleanValue().             } else {                 throw new ElasticsearchParseException("could not read search request. unexpected string field [" + currentFieldName + "]").             }         } else if (token == XContentParser.Token.VALUE_BOOLEAN) {             if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 totalHitsAsInt = parser.booleanValue().             } else {                 throw new ElasticsearchParseException("could not read search request. unexpected boolean field [" + currentFieldName + "]").             }         } else {             throw new ElasticsearchParseException("could not read search request. unexpected token [" + token + "]").         }     }     if (searchSource == null) {         searchSource = BytesArray.EMPTY.     }     WatcherSearchTemplateRequest request = new WatcherSearchTemplateRequest(indices.toArray(new String[0]), types.size() == 0 ? null : types.toArray(new String[0]), searchType, indicesOptions, searchSource, template).     request.setRestTotalHitsAsInt(totalHitsAsInt).     return request. }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     WatcherSearchTemplateRequest other = (WatcherSearchTemplateRequest) o.     return Arrays.equals(indices, other.indices) && Arrays.equals(types, other.types) && Objects.equals(searchType, other.searchType) && Objects.equals(indicesOptions, other.indicesOptions) && Objects.equals(searchSource, other.searchSource) && Objects.equals(template, other.template) && Objects.equals(restTotalHitsAsInt, other.restTotalHitsAsInt). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(indices, types, searchType, indicesOptions, searchSource, template, restTotalHitsAsInt). }
