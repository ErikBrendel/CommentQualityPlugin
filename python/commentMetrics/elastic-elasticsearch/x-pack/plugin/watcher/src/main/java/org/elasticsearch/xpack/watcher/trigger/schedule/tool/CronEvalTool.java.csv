commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static void main(String[] args) throws Exception {     exit(new CronEvalTool().main(args, Terminal.DEFAULT)). }
false;protected;2;9;;@Override protected void execute(Terminal terminal, OptionSet options) throws Exception {     int count = countOption.value(options).     List<String> args = arguments.values(options).     if (args.size() != 1) {         throw new UserException(ExitCodes.USAGE, "expecting a single argument that is the cron expression to evaluate").     }     execute(terminal, args.get(0), count). }
false;;3;39;;void execute(Terminal terminal, String expression, int count) throws Exception {     Cron.validate(expression).     terminal.println("Valid!").     final ZonedDateTime date = ZonedDateTime.now(ZoneOffset.UTC).     final boolean isLocalTimeUTC = UTC_FORMATTER.zone().equals(LOCAL_FORMATTER.zone()).     if (isLocalTimeUTC) {         terminal.println("Now is [" + UTC_FORMATTER.format(date) + "] in UTC").     } else {         terminal.println("Now is [" + UTC_FORMATTER.format(date) + "] in UTC, local time is [" + LOCAL_FORMATTER.format(date) + "]").     }     terminal.println("Here are the next " + count + " times this cron expression will trigger:").     Cron cron = new Cron(expression).     long time = date.toInstant().toEpochMilli().     for (int i = 0. i < count. i++) {         long prevTime = time.         time = cron.getNextValidTimeAfter(time).         if (time < 0) {             if (i == 0) {                 throw new UserException(ExitCodes.OK, "Could not compute future times since [" + UTC_FORMATTER.format(Instant.ofEpochMilli(prevTime)) + "] " + "(perhaps the cron expression only points to " + "times in the" + " " + "past?)").             }             break.         }         if (isLocalTimeUTC) {             terminal.println((i + 1) + ".\t" + UTC_FORMATTER.format(Instant.ofEpochMilli(time))).         } else {             terminal.println((i + 1) + ".\t" + UTC_FORMATTER.format(Instant.ofEpochMilli(time))).             terminal.println("\t" + LOCAL_FORMATTER.format(Instant.ofEpochMilli(time))).         }     } }
