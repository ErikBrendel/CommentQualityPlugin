commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String type() {     return TYPE. }
false;public;0;3;;public String getIndex() {     return index. }
false;public;0;3;;public String getDocType() {     return docType. }
false;public;0;3;;public String getDocId() {     return docId. }
false;public;0;3;;public String getExecutionTimeField() {     return executionTimeField. }
false;public;0;3;;public ZoneId getDynamicNameTimeZone() {     return dynamicNameTimeZone. }
false;public;0;3;;public RefreshPolicy getRefreshPolicy() {     return refreshPolicy. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     IndexAction that = (IndexAction) o.     return Objects.equals(index, that.index) && Objects.equals(docType, that.docType) && Objects.equals(docId, that.docId) && Objects.equals(executionTimeField, that.executionTimeField) && Objects.equals(timeout, that.timeout) && Objects.equals(dynamicNameTimeZone, that.dynamicNameTimeZone) && Objects.equals(refreshPolicy, that.refreshPolicy). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(index, docType, docId, executionTimeField, timeout, dynamicNameTimeZone, refreshPolicy). }
false;public;2;26;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (index != null) {         builder.field(Field.INDEX.getPreferredName(), index).     }     if (docType != null) {         builder.field(Field.DOC_TYPE.getPreferredName(), docType).     }     if (docId != null) {         builder.field(Field.DOC_ID.getPreferredName(), docId).     }     if (executionTimeField != null) {         builder.field(Field.EXECUTION_TIME_FIELD.getPreferredName(), executionTimeField).     }     if (timeout != null) {         builder.humanReadableField(Field.TIMEOUT.getPreferredName(), Field.TIMEOUT_HUMAN.getPreferredName(), timeout).     }     if (dynamicNameTimeZone != null) {         builder.field(Field.DYNAMIC_NAME_TIMEZONE.getPreferredName(), dynamicNameTimeZone.toString()).     }     if (refreshPolicy != null) {         builder.field(Field.REFRESH.getPreferredName(), refreshPolicy.getValue()).     }     return builder.endObject(). }
false;public,static;3;60;;public static IndexAction parse(String watchId, String actionId, XContentParser parser) throws IOException {     String index = null.     String docType = null.     String docId = null.     String executionTimeField = null.     TimeValue timeout = null.     ZoneId dynamicNameTimeZone = null.     RefreshPolicy refreshPolicy = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Field.INDEX.match(currentFieldName, parser.getDeprecationHandler())) {             try {                 index = parser.text().             } catch (ElasticsearchParseException pe) {                 throw new ElasticsearchParseException("could not parse [{}] action [{}/{}]. failed to parse index name value for " + "field [{}]", pe, TYPE, watchId, actionId, currentFieldName).             }         } else if (token == XContentParser.Token.VALUE_NUMBER) {             if (Field.TIMEOUT.match(currentFieldName, parser.getDeprecationHandler())) {                 timeout = timeValueMillis(parser.longValue()).             } else {                 throw new ElasticsearchParseException("could not parse [{}] action [{}/{}]. unexpected number field [{}]", TYPE, watchId, actionId, currentFieldName).             }         } else if (token == XContentParser.Token.VALUE_STRING) {             if (Field.DOC_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {                 deprecationLogger.deprecatedAndMaybeLog("watcher_index_action", TYPES_DEPRECATION_MESSAGE).                 docType = parser.text().             } else if (Field.DOC_ID.match(currentFieldName, parser.getDeprecationHandler())) {                 docId = parser.text().             } else if (Field.EXECUTION_TIME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 executionTimeField = parser.text().             } else if (Field.TIMEOUT_HUMAN.match(currentFieldName, parser.getDeprecationHandler())) {                 // Parser for human specified timeouts and 2.x compatibility                 timeout = WatcherDateTimeUtils.parseTimeValue(parser, Field.TIMEOUT_HUMAN.toString()).             } else if (Field.DYNAMIC_NAME_TIMEZONE.match(currentFieldName, parser.getDeprecationHandler())) {                 if (token == XContentParser.Token.VALUE_STRING) {                     dynamicNameTimeZone = DateUtils.of(parser.text()).                 } else {                     throw new ElasticsearchParseException("could not parse [{}] action for watch [{}]. failed to parse [{}]. must be " + "a string value (e.g. 'UTC' or '+01:00').", TYPE, watchId, currentFieldName).                 }             } else if (Field.REFRESH.match(currentFieldName, parser.getDeprecationHandler())) {                 refreshPolicy = RefreshPolicy.parse(parser.text()).             } else {                 throw new ElasticsearchParseException("could not parse [{}] action [{}/{}]. unexpected string field [{}]", TYPE, watchId, actionId, currentFieldName).             }         } else {             throw new ElasticsearchParseException("could not parse [{}] action [{}/{}]. unexpected token [{}]", TYPE, watchId, actionId, token).         }     }     return new IndexAction(index, docType, docId, executionTimeField, timeout, dynamicNameTimeZone, refreshPolicy). }
false;public,static;2;3;;public static Builder builder(String index, String docType) {     return new Builder(index, docType). }
false;public;0;3;;public XContentSource response() {     return response. }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject(type).field(Field.RESPONSE.getPreferredName(), response, params).endObject(). }
false;public;0;3;;public String index() {     return index. }
false;public;0;3;;public String docType() {     return docType. }
false;public;0;3;;public String docId() {     return docId. }
false;public;0;3;;public XContentSource source() {     return source. }
false;public;2;19;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(type).startObject(Field.REQUEST.getPreferredName()).field(Field.INDEX.getPreferredName(), index).field(Field.DOC_TYPE.getPreferredName(), docType).     if (docId != null) {         builder.field(Field.DOC_ID.getPreferredName(), docId).     }     if (refreshPolicy != null) {         builder.field(Field.REFRESH.getPreferredName(), refreshPolicy.getValue()).     }     return builder.field(Field.SOURCE.getPreferredName(), source, params).endObject().endObject(). }
false;public;1;4;;public Builder setDocId(String docId) {     this.docId = docId.     return this. }
false;public;1;4;;public Builder setExecutionTimeField(String executionTimeField) {     this.executionTimeField = executionTimeField.     return this. }
false;public;1;4;;public Builder setTimeout(TimeValue writeTimeout) {     this.timeout = writeTimeout.     return this. }
false;public;1;4;;public Builder setDynamicNameTimeZone(ZoneId dynamicNameTimeZone) {     this.dynamicNameTimeZone = dynamicNameTimeZone.     return this. }
false;public;1;4;;public Builder setRefreshPolicy(RefreshPolicy refreshPolicy) {     this.refreshPolicy = refreshPolicy.     return this. }
false;public;0;4;;@Override public IndexAction build() {     return new IndexAction(index, docType, docId, executionTimeField, timeout, dynamicNameTimeZone, refreshPolicy). }
