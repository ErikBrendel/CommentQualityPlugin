# id;timestamp;commentText;codeText;commentWords;codeWords
XPackRestIT -> private void enableMonitoring() throws Exception;1524684173;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1525334055;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1531179852;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1531729807;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1532353780;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1532685069;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1537806831;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1539717534;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1539796943;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1540238977;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1540581592;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1541624883;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            awaitCallApi("search", singletonMap("index", ".monitoring-*"), emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,await,call,api,search,singleton,map,index,monitoring,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1544035746;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            Map<String, String> searchParams = new HashMap<>()__            searchParams.put("index", ".monitoring-*")__            searchParams.put(TOTAL_HIT_AS_INT_PARAM, "true")__            awaitCallApi("search", searchParams, emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,map,string,string,search,params,new,hash,map,search,params,put,index,monitoring,search,params,put,true,await,call,api,search,search,params,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1544295436;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            Map<String, String> searchParams = new HashMap<>()__            searchParams.put("index", ".monitoring-*")__            searchParams.put(TOTAL_HIT_AS_INT_PARAM, "true")__            awaitCallApi("search", searchParams, emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,map,string,string,search,params,new,hash,map,search,params,put,index,monitoring,search,params,put,true,await,call,api,search,search,params,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1544440022;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            Map<String, String> searchParams = new HashMap<>()__            searchParams.put("index", ".monitoring-*")__            searchParams.put(TOTAL_HIT_AS_INT_PARAM, "true")__            awaitCallApi("search", searchParams, emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,map,string,string,search,params,new,hash,map,search,params,put,index,monitoring,search,params,put,true,await,call,api,search,search,params,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1544462583;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            Map<String, String> searchParams = new HashMap<>()__            searchParams.put("index", ".monitoring-*")__            searchParams.put(TOTAL_HIT_AS_INT_PARAM, "true")__            awaitCallApi("search", searchParams, emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,map,string,string,search,params,new,hash,map,search,params,put,index,monitoring,search,params,put,true,await,call,api,search,search,params,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1545155131;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            Map<String, String> searchParams = new HashMap<>()__            searchParams.put("index", ".monitoring-*")__            searchParams.put(TOTAL_HIT_AS_INT_PARAM, "true")__            awaitCallApi("search", searchParams, emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,map,string,string,search,params,new,hash,map,search,params,put,index,monitoring,search,params,put,true,await,call,api,search,search,params,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1546630609;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            Map<String, String> searchParams = new HashMap<>()__            searchParams.put("index", ".monitoring-*")__            searchParams.put(TOTAL_HITS_AS_INT_PARAM, "true")__            awaitCallApi("search", searchParams, emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,map,string,string,search,params,new,hash,map,search,params,put,index,monitoring,search,params,put,true,await,call,api,search,search,params,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1547843554;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            Map<String, String> searchParams = new HashMap<>()__            searchParams.put("index", ".monitoring-*")__            searchParams.put(TOTAL_HITS_AS_INT_PARAM, "true")__            awaitCallApi("search", searchParams, emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,map,string,string,search,params,new,hash,map,search,params,put,index,monitoring,search,params,put,true,await,call,api,search,search,params,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void enableMonitoring() throws Exception;1550481268;Enable monitoring and waits for monitoring documents to be collected and indexed in_monitoring indices.This is the signal that the local exporter is started and ready_for the tests.;private void enableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final ClientYamlTestResponse xpackUsage =_                    callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(), getApiCallHeaders())___            @SuppressWarnings("unchecked")_            final Map<String, Object> exporters = (Map<String, Object>) xpackUsage.evaluate("monitoring.enabled_exporters")__            assertNotNull("List of monitoring exporters must not be null", exporters)__            assertThat("List of enabled exporters must be empty before enabling monitoring",_                    XContentMapValues.extractRawValues("monitoring.enabled_exporters", exporters), hasSize(0))___            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", true)__            settings.put("xpack.monitoring.collection.interval", "1s")__            settings.put("xpack.monitoring.exporters._local.enabled", true)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when enabling monitoring")__            Map<String, String> searchParams = new HashMap<>()__            searchParams.put("index", ".monitoring-*")__            searchParams.put(TOTAL_HITS_AS_INT_PARAM, "true")__            awaitCallApi("search", searchParams, emptyList(),_                    response -> ((Number) response.evaluate("hits.total")).intValue() > 0,_                    () -> "Exception when waiting for monitoring documents to be indexed")__        }_    };enable,monitoring,and,waits,for,monitoring,documents,to,be,collected,and,indexed,in,monitoring,indices,this,is,the,signal,that,the,local,exporter,is,started,and,ready,for,the,tests;private,void,enable,monitoring,throws,exception,if,is,monitoring,test,final,client,yaml,test,response,xpack,usage,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,exporters,map,string,object,xpack,usage,evaluate,monitoring,assert,not,null,list,of,monitoring,exporters,must,not,be,null,exporters,assert,that,list,of,enabled,exporters,must,be,empty,before,enabling,monitoring,xcontent,map,values,extract,raw,values,monitoring,exporters,has,size,0,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,true,settings,put,xpack,monitoring,collection,interval,1s,settings,put,xpack,monitoring,exporters,enabled,true,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,enabling,monitoring,map,string,string,search,params,new,hash,map,search,params,put,index,monitoring,search,params,put,true,await,call,api,search,search,params,empty,list,response,number,response,evaluate,hits,total,int,value,0,exception,when,waiting,for,monitoring,documents,to,be,indexed
XPackRestIT -> private void waitForTemplates() throws Exception;1524684173;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))__            templates.addAll(Arrays.asList(WatcherIndexTemplateRegistryField.TEMPLATE_NAMES))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,templates,add,all,arrays,as,list,watcher,index,template,registry,field,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1525334055;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1531179852;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1531729807;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1532353780;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1532685069;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1537806831;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1539717534;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1539796943;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1540238977;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1540581592;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1541624883;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1544035746;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1544295436;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1544440022;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1544462583;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1545155131;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix(),_                    AnomalyDetectorsIndex.configIndexName()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,anomaly,detectors,index,config,index,name,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1546630609;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndex.jobStateIndexName(),_                    AnomalyDetectorsIndex.jobResultsIndexPrefix(),_                    AnomalyDetectorsIndex.configIndexName()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,anomaly,detectors,index,config,index,name,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1547843554;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndexFields.STATE_INDEX_PREFIX,_                    AnomalyDetectorsIndex.jobResultsIndexPrefix(),_                    AnomalyDetectorsIndex.configIndexName()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,fields,anomaly,detectors,index,job,results,index,prefix,anomaly,detectors,index,config,index,name,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void waitForTemplates() throws Exception;1550481268;Waits for the Security template and the Machine Learning templates to be created by the {@link MetaDataUpgrader};private void waitForTemplates() throws Exception {_        if (installTemplates()) {_            List<String> templates = new ArrayList<>()__            templates.addAll(Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                    AnomalyDetectorsIndexFields.STATE_INDEX_PREFIX,_                    AnomalyDetectorsIndex.jobResultsIndexPrefix(),_                    AnomalyDetectorsIndex.configIndexName()))___            for (String template : templates) {_                awaitCallApi("indices.exists_template", singletonMap("name", template), emptyList(),_                        response -> true,_                        () -> "Exception when waiting for [" + template + "] template to be created")__            }_        }_    };waits,for,the,security,template,and,the,machine,learning,templates,to,be,created,by,the,link,meta,data,upgrader;private,void,wait,for,templates,throws,exception,if,install,templates,list,string,templates,new,array,list,templates,add,all,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,fields,anomaly,detectors,index,job,results,index,prefix,anomaly,detectors,index,config,index,name,for,string,template,templates,await,call,api,indices,singleton,map,name,template,empty,list,response,true,exception,when,waiting,for,template,template,to,be,created
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1524684173;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1525334055;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1531179852;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1531729807;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1532353780;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1532685069;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1537806831;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1539717534;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1539796943;private void clearILMState() throws Exception {_if (isILMTest()) {_ILMRestTestStateCleaner.clearILMMetadata(adminClient())_____/**_Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };private,void,clear,ilmstate,throws,exception,if,is,ilmtest,ilmrest,test,state,cleaner,clear,ilmmetadata,admin,client,executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1540238977;private void clearILMState() throws Exception {_if (isILMTest()) {_ILMRestTestStateCleaner.clearILMMetadata(adminClient())_____/**_Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };private,void,clear,ilmstate,throws,exception,if,is,ilmtest,ilmrest,test,state,cleaner,clear,ilmmetadata,admin,client,executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1540581592;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1541624883;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1544035746;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1544295436;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1544440022;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1544462583;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1545155131;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1546630609;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1547843554;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> private void awaitCallApi(String apiName,                               Map<String, String> params,                               List<Map<String, Object>> bodies,                               CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,                               Supplier<String> error) throws Exception;1550481268;Executes an API call using the admin context, waiting for it to succeed.;private void awaitCallApi(String apiName,_                              Map<String, String> params,_                              List<Map<String, Object>> bodies,_                              CheckedFunction<ClientYamlTestResponse, Boolean, IOException> success,_                              Supplier<String> error) throws Exception {__        AtomicReference<IOException> exceptionHolder = new AtomicReference<>()__        awaitBusy(() -> {_            try {_                ClientYamlTestResponse response = callApi(apiName, params, bodies, getApiCallHeaders())__                if (response.getStatusCode() == HttpStatus.SC_OK) {_                    exceptionHolder.set(null)__                    return success.apply(response)__                }_                return false__            } catch (IOException e) {_                exceptionHolder.set(e)__            }_            return false__        })___        IOException exception = exceptionHolder.get()__        if (exception != null) {_            throw new IllegalStateException(error.get(), exception)__        }_    };executes,an,api,call,using,the,admin,context,waiting,for,it,to,succeed;private,void,await,call,api,string,api,name,map,string,string,params,list,map,string,object,bodies,checked,function,client,yaml,test,response,boolean,ioexception,success,supplier,string,error,throws,exception,atomic,reference,ioexception,exception,holder,new,atomic,reference,await,busy,try,client,yaml,test,response,response,call,api,api,name,params,bodies,get,api,call,headers,if,response,get,status,code,http,status,exception,holder,set,null,return,success,apply,response,return,false,catch,ioexception,e,exception,holder,set,e,return,false,ioexception,exception,exception,holder,get,if,exception,null,throw,new,illegal,state,exception,error,get,exception
XPackRestIT -> @After     public void cleanup() throws Exception;1524684173;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        clearRollupState()__        if (isWaitForPendingTasks()) {_            _            _            XPackRestTestHelper.waitForPendingTasks(adminClient())__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,clear,rollup,state,if,is,wait,for,pending,tasks,xpack,rest,test,helper,wait,for,pending,tasks,admin,client
XPackRestIT -> @After     public void cleanup() throws Exception;1525334055;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        clearRollupState()__        if (isWaitForPendingTasks()) {_            _            _            XPackRestTestHelper.waitForPendingTasks(adminClient())__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,clear,rollup,state,if,is,wait,for,pending,tasks,xpack,rest,test,helper,wait,for,pending,tasks,admin,client
XPackRestIT -> @After     public void cleanup() throws Exception;1531179852;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        clearRollupState()__        if (isWaitForPendingTasks()) {_            _            _            XPackRestTestHelper.waitForPendingTasks(adminClient())__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,clear,rollup,state,if,is,wait,for,pending,tasks,xpack,rest,test,helper,wait,for,pending,tasks,admin,client
XPackRestIT -> @After     public void cleanup() throws Exception;1531729807;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        clearRollupState()__        if (isWaitForPendingTasks()) {_            _            _            XPackRestTestHelper.waitForPendingTasks(adminClient())__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,clear,rollup,state,if,is,wait,for,pending,tasks,xpack,rest,test,helper,wait,for,pending,tasks,admin,client
XPackRestIT -> @After     public void cleanup() throws Exception;1532353780;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        clearRollupState()__        if (isWaitForPendingTasks()) {_            _            _            XPackRestTestHelper.waitForPendingTasks(adminClient())__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,clear,rollup,state,if,is,wait,for,pending,tasks,xpack,rest,test,helper,wait,for,pending,tasks,admin,client
XPackRestIT -> @After     public void cleanup() throws Exception;1532685069;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        clearRollupState()__        if (isWaitForPendingTasks()) {_            _            _            XPackRestTestHelper.waitForPendingTasks(adminClient())__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,clear,rollup,state,if,is,wait,for,pending,tasks,xpack,rest,test,helper,wait,for,pending,tasks,admin,client
XPackRestIT -> @After     public void cleanup() throws Exception;1537806831;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        clearRollupState()__        if (isWaitForPendingTasks()) {_            _            _            XPackRestTestHelper.waitForPendingTasks(adminClient())__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,clear,rollup,state,if,is,wait,for,pending,tasks,xpack,rest,test,helper,wait,for,pending,tasks,admin,client
XPackRestIT -> @After     public void cleanup() throws Exception;1539717534;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        clearRollupState()__        clearILMState()__        if (isWaitForPendingTasks()) {_            _            _            XPackRestTestHelper.waitForPendingTasks(adminClient())__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,clear,rollup,state,clear,ilmstate,if,is,wait,for,pending,tasks,xpack,rest,test,helper,wait,for,pending,tasks,admin,client
XPackRestIT -> @After     public void cleanup() throws Exception;1539796943;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        clearILMState()__        if (isWaitForPendingTasks()) {_            _            _            XPackRestTestHelper.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,clear,ilmstate,if,is,wait,for,pending,tasks,xpack,rest,test,helper,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name
XPackRestIT -> @After     public void cleanup() throws Exception;1540238977;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        clearILMState()__        if (isWaitForPendingTasks()) {_            _            _            ESRestTestCase.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,clear,ilmstate,if,is,wait,for,pending,tasks,esrest,test,case,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name
XPackRestIT -> @After     public void cleanup() throws Exception;1540581592;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        if (isWaitForPendingTasks()) {_            _            _            ESRestTestCase.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,if,is,wait,for,pending,tasks,esrest,test,case,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name
XPackRestIT -> @After     public void cleanup() throws Exception;1541624883;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        if (isWaitForPendingTasks()) {_            _            _            ESRestTestCase.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,if,is,wait,for,pending,tasks,esrest,test,case,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name
XPackRestIT -> @After     public void cleanup() throws Exception;1544035746;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        if (isWaitForPendingTasks()) {_            _            _            ESRestTestCase.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,if,is,wait,for,pending,tasks,esrest,test,case,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name
XPackRestIT -> @After     public void cleanup() throws Exception;1544295436;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        if (isWaitForPendingTasks()) {_            _            _            ESRestTestCase.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,if,is,wait,for,pending,tasks,esrest,test,case,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name
XPackRestIT -> @After     public void cleanup() throws Exception;1544440022;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        if (isWaitForPendingTasks()) {_            _            _            ESRestTestCase.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)_                        _                        || task.contains(GetDiscoveredNodesAction.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,if,is,wait,for,pending,tasks,esrest,test,case,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name,task,contains,get,discovered,nodes,action,name
XPackRestIT -> @After     public void cleanup() throws Exception;1544462583;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        if (isWaitForPendingTasks()) {_            _            _            ESRestTestCase.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,if,is,wait,for,pending,tasks,esrest,test,case,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name
XPackRestIT -> @After     public void cleanup() throws Exception;1545155131;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        if (isWaitForPendingTasks()) {_            _            _            ESRestTestCase.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,if,is,wait,for,pending,tasks,esrest,test,case,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name
XPackRestIT -> @After     public void cleanup() throws Exception;1546630609;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        if (isWaitForPendingTasks()) {_            _            _            ESRestTestCase.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,if,is,wait,for,pending,tasks,esrest,test,case,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name
XPackRestIT -> @After     public void cleanup() throws Exception;1547843554;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        if (isWaitForPendingTasks()) {_            _            _            ESRestTestCase.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,if,is,wait,for,pending,tasks,esrest,test,case,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name
XPackRestIT -> @After     public void cleanup() throws Exception;1550481268;Cleanup after tests.__Feature-specific cleanup methods should be called from here rather than using_separate @After annotated methods to ensure there is a well-defined cleanup order.;@After_    public void cleanup() throws Exception {_        disableMonitoring()__        clearMlState()__        if (isWaitForPendingTasks()) {_            _            _            ESRestTestCase.waitForPendingTasks(adminClient(), task -> {_                    _                    return task.contains(RollupJob.NAME)__            })__        }_    };cleanup,after,tests,feature,specific,cleanup,methods,should,be,called,from,here,rather,than,using,separate,after,annotated,methods,to,ensure,there,is,a,well,defined,cleanup,order;after,public,void,cleanup,throws,exception,disable,monitoring,clear,ml,state,if,is,wait,for,pending,tasks,esrest,test,case,wait,for,pending,tasks,admin,client,task,return,task,contains,rollup,job,name
XPackRestIT -> protected boolean isWaitForPendingTasks();1524684173;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1525334055;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1531179852;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1531729807;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1532353780;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1532685069;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1537806831;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1539717534;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1539796943;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1540238977;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1540581592;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1541624883;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1544035746;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1544295436;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1544440022;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1544462583;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1545155131;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1546630609;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1547843554;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> protected boolean isWaitForPendingTasks();1550481268;Should each test wait for pending tasks to finish after execution?_@return Wait for pending tasks;protected boolean isWaitForPendingTasks() {_        return true__    };should,each,test,wait,for,pending,tasks,to,finish,after,execution,return,wait,for,pending,tasks;protected,boolean,is,wait,for,pending,tasks,return,true
XPackRestIT -> private void clearRollupState() throws Exception;1524684173;Delete any left over rollup jobs__Also reuses the pending-task logic from Ml... should refactor to shared location;private void clearRollupState() throws Exception {_        if (isRollupTest()) {_            new RollupRestTestStateCleaner(logger, adminClient(), this).clearRollupMetadata()__        }_    };delete,any,left,over,rollup,jobs,also,reuses,the,pending,task,logic,from,ml,should,refactor,to,shared,location;private,void,clear,rollup,state,throws,exception,if,is,rollup,test,new,rollup,rest,test,state,cleaner,logger,admin,client,this,clear,rollup,metadata
XPackRestIT -> private void clearRollupState() throws Exception;1525334055;Delete any left over rollup jobs__Also reuses the pending-task logic from Ml... should refactor to shared location;private void clearRollupState() throws Exception {_        if (isRollupTest()) {_            new RollupRestTestStateCleaner(logger, adminClient(), this).clearRollupMetadata()__        }_    };delete,any,left,over,rollup,jobs,also,reuses,the,pending,task,logic,from,ml,should,refactor,to,shared,location;private,void,clear,rollup,state,throws,exception,if,is,rollup,test,new,rollup,rest,test,state,cleaner,logger,admin,client,this,clear,rollup,metadata
XPackRestIT -> private void clearRollupState() throws Exception;1531179852;Delete any left over rollup jobs__Also reuses the pending-task logic from Ml... should refactor to shared location;private void clearRollupState() throws Exception {_        if (isRollupTest()) {_            new RollupRestTestStateCleaner(logger, adminClient()).clearRollupMetadata()__        }_    };delete,any,left,over,rollup,jobs,also,reuses,the,pending,task,logic,from,ml,should,refactor,to,shared,location;private,void,clear,rollup,state,throws,exception,if,is,rollup,test,new,rollup,rest,test,state,cleaner,logger,admin,client,clear,rollup,metadata
XPackRestIT -> private void clearRollupState() throws Exception;1531729807;Delete any left over rollup jobs__Also reuses the pending-task logic from Ml... should refactor to shared location;private void clearRollupState() throws Exception {_        if (isRollupTest()) {_            RollupRestTestStateCleaner.clearRollupMetadata(adminClient())__        }_    };delete,any,left,over,rollup,jobs,also,reuses,the,pending,task,logic,from,ml,should,refactor,to,shared,location;private,void,clear,rollup,state,throws,exception,if,is,rollup,test,rollup,rest,test,state,cleaner,clear,rollup,metadata,admin,client
XPackRestIT -> private void clearRollupState() throws Exception;1532353780;Delete any left over rollup jobs__Also reuses the pending-task logic from Ml... should refactor to shared location;private void clearRollupState() throws Exception {_        if (isRollupTest()) {_            RollupRestTestStateCleaner.clearRollupMetadata(adminClient())__        }_    };delete,any,left,over,rollup,jobs,also,reuses,the,pending,task,logic,from,ml,should,refactor,to,shared,location;private,void,clear,rollup,state,throws,exception,if,is,rollup,test,rollup,rest,test,state,cleaner,clear,rollup,metadata,admin,client
XPackRestIT -> private void clearRollupState() throws Exception;1532685069;Delete any left over rollup jobs__Also reuses the pending-task logic from Ml... should refactor to shared location;private void clearRollupState() throws Exception {_        if (isRollupTest()) {_            RollupRestTestStateCleaner.clearRollupMetadata(adminClient())__        }_    };delete,any,left,over,rollup,jobs,also,reuses,the,pending,task,logic,from,ml,should,refactor,to,shared,location;private,void,clear,rollup,state,throws,exception,if,is,rollup,test,rollup,rest,test,state,cleaner,clear,rollup,metadata,admin,client
XPackRestIT -> private void clearRollupState() throws Exception;1537806831;Delete any left over rollup jobs__Also reuses the pending-task logic from Ml... should refactor to shared location;private void clearRollupState() throws Exception {_        if (isRollupTest()) {_            RollupRestTestStateCleaner.clearRollupMetadata(adminClient())__        }_    };delete,any,left,over,rollup,jobs,also,reuses,the,pending,task,logic,from,ml,should,refactor,to,shared,location;private,void,clear,rollup,state,throws,exception,if,is,rollup,test,rollup,rest,test,state,cleaner,clear,rollup,metadata,admin,client
XPackRestIT -> private void clearRollupState() throws Exception;1539717534;Delete any left over rollup jobs__Also reuses the pending-task logic from Ml... should refactor to shared location;private void clearRollupState() throws Exception {_        if (isRollupTest()) {_            RollupRestTestStateCleaner.clearRollupMetadata(adminClient())__        }_    };delete,any,left,over,rollup,jobs,also,reuses,the,pending,task,logic,from,ml,should,refactor,to,shared,location;private,void,clear,rollup,state,throws,exception,if,is,rollup,test,rollup,rest,test,state,cleaner,clear,rollup,metadata,admin,client
XPackRestIT -> private void disableMonitoring() throws Exception;1524684173;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    @SuppressWarnings("unchecked")_                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,suppress,warnings,unchecked,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1525334055;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    @SuppressWarnings("unchecked")_                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,suppress,warnings,unchecked,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1531179852;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    @SuppressWarnings("unchecked")_                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,suppress,warnings,unchecked,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1531729807;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    @SuppressWarnings("unchecked")_                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,suppress,warnings,unchecked,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1532353780;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1532685069;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1537806831;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1539717534;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1539796943;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1540238977;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1540581592;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1541624883;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1544035746;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1544295436;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1544440022;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1544462583;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1545155131;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1546630609;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1547843554;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void disableMonitoring() throws Exception;1550481268;Disable monitoring;private void disableMonitoring() throws Exception {_        if (isMonitoringTest()) {_            final Map<String, Object> settings = new HashMap<>()__            settings.put("xpack.monitoring.collection.enabled", null)__            settings.put("xpack.monitoring.collection.interval", null)__            settings.put("xpack.monitoring.exporters._local.enabled", null)___            awaitCallApi("cluster.put_settings", emptyMap(),_                    singletonList(singletonMap("transient", settings)),_                    response -> {_                        Object acknowledged = response.evaluate("acknowledged")__                        return acknowledged != null && (Boolean) acknowledged__                    },_                    () -> "Exception when disabling monitoring")___            awaitBusy(() -> {_                try {_                    ClientYamlTestResponse response =_                            callApi("xpack.usage", singletonMap("filter_path", "monitoring.enabled_exporters"), emptyList(),_                                    getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, ?> exporters = (Map<String, ?>) response.evaluate("monitoring.enabled_exporters")__                    if (exporters.isEmpty() == false) {_                        return false__                    }__                    final Map<String, String> params = new HashMap<>()__                    params.put("node_id", "_local")__                    params.put("metric", "thread_pool")__                    params.put("filter_path", "nodes.*.thread_pool.write.active")__                    response = callApi("nodes.stats", params, emptyList(), getApiCallHeaders())___                    @SuppressWarnings("unchecked")_                    final Map<String, Object> nodes = (Map<String, Object>) response.evaluate("nodes")__                    @SuppressWarnings("unchecked")_                    final Map<String, Object> node = (Map<String, Object>) nodes.values().iterator().next()___                    final Number activeWrites = (Number) extractValue("thread_pool.write.active", node)__                    return activeWrites != null && activeWrites.longValue() == 0L__                } catch (Exception e) {_                    throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__                }_            })__        }_    };disable,monitoring;private,void,disable,monitoring,throws,exception,if,is,monitoring,test,final,map,string,object,settings,new,hash,map,settings,put,xpack,monitoring,collection,enabled,null,settings,put,xpack,monitoring,collection,interval,null,settings,put,xpack,monitoring,exporters,enabled,null,await,call,api,cluster,empty,map,singleton,list,singleton,map,transient,settings,response,object,acknowledged,response,evaluate,acknowledged,return,acknowledged,null,boolean,acknowledged,exception,when,disabling,monitoring,await,busy,try,client,yaml,test,response,response,call,api,xpack,usage,singleton,map,monitoring,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,exporters,map,string,response,evaluate,monitoring,if,exporters,is,empty,false,return,false,final,map,string,string,params,new,hash,map,params,put,params,put,metric,params,put,nodes,write,active,response,call,api,nodes,stats,params,empty,list,get,api,call,headers,suppress,warnings,unchecked,final,map,string,object,nodes,map,string,object,response,evaluate,nodes,suppress,warnings,unchecked,final,map,string,object,node,map,string,object,nodes,values,iterator,next,final,number,active,writes,number,extract,value,write,active,node,return,active,writes,null,active,writes,long,value,0l,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
XPackRestIT -> private void clearMlState() throws Exception;1524684173;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient(), this).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,this,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1525334055;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient(), this).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,this,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1531179852;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1531729807;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1532353780;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1532685069;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1537806831;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1539717534;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1539796943;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1540238977;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1540581592;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1541624883;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1544035746;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1544295436;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1544440022;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1544462583;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1545155131;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1546630609;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1547843554;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
XPackRestIT -> private void clearMlState() throws Exception;1550481268;Delete any left over machine learning datafeeds and jobs.;private void clearMlState() throws Exception {_        if (isMachineLearningTest()) {_            new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata()__        }_    };delete,any,left,over,machine,learning,datafeeds,and,jobs;private,void,clear,ml,state,throws,exception,if,is,machine,learning,test,new,ml,rest,test,state,cleaner,logger,admin,client,clear,ml,metadata
