# id;timestamp;commentText;codeText;commentWords;codeWords
SecuritySettingsSource -> public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope);1539723533;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope) {_        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        _        if (inFipsJvm()) {_            this.usePEM = true__        } else {_            this.usePEM = randomBoolean()__        }_    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,boolean,ssl,enabled,path,parent,folder,scope,scope,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,if,in,fips,jvm,this,use,pem,true,else,this,use,pem,random,boolean
SecuritySettingsSource -> public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope);1539764946;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope) {_        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        _        if (inFipsJvm()) {_            this.usePEM = true__        } else {_            this.usePEM = randomBoolean()__        }_    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,boolean,ssl,enabled,path,parent,folder,scope,scope,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,if,in,fips,jvm,this,use,pem,true,else,this,use,pem,random,boolean
SecuritySettingsSource -> public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope);1541476610;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope) {_        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        _        if (inFipsJvm()) {_            this.usePEM = true__        } else {_            this.usePEM = randomBoolean()__        }_    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,boolean,ssl,enabled,path,parent,folder,scope,scope,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,if,in,fips,jvm,this,use,pem,true,else,this,use,pem,random,boolean
SecuritySettingsSource -> public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope);1547499982;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope) {_        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        _        if (inFipsJvm()) {_            this.usePEM = true__        } else {_            this.usePEM = randomBoolean()__        }_    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,boolean,ssl,enabled,path,parent,folder,scope,scope,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,if,in,fips,jvm,this,use,pem,true,else,this,use,pem,random,boolean
SecuritySettingsSource -> public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope);1548789003;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope) {_        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        _        if (inFipsJvm()) {_            this.usePEM = true__        } else {_            this.usePEM = randomBoolean()__        }_    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,boolean,ssl,enabled,path,parent,folder,scope,scope,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,if,in,fips,jvm,this,use,pem,true,else,this,use,pem,random,boolean
SecuritySettingsSource -> public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope);1549356548;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(boolean sslEnabled, Path parentFolder, Scope scope) {_        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        _        if (inFipsJvm()) {_            this.usePEM = true__        } else {_            this.usePEM = randomBoolean()__        }_    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,boolean,ssl,enabled,path,parent,folder,scope,scope,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,if,in,fips,jvm,this,use,pem,true,else,this,use,pem,random,boolean
SecuritySettingsSource -> public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,                                                  String certificatePath, List<String> trustedCertificates);1531910483;Returns the SSL related configuration settings given the location of a key and certificate and the location_of the PEM certificates to be trusted__@param keyPath             The path to the Private key to be used for SSL_@param password            The password with which the private key is protected_@param certificatePath     The path to the PEM formatted Certificate encapsulating the public key that corresponds_to the Private Key specified in {@code keyPath}. Will be presented to incoming_SSL connections._@param trustedCertificates A list of PEM formatted certificates that will be trusted.;public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,_                                                 String certificatePath, List<String> trustedCertificates) {_        addSSLSettingsForPEMFiles(builder, "", keyPath, password, certificatePath, trustedCertificates, true, true, true)__    };returns,the,ssl,related,configuration,settings,given,the,location,of,a,key,and,certificate,and,the,location,of,the,pem,certificates,to,be,trusted,param,key,path,the,path,to,the,private,key,to,be,used,for,ssl,param,password,the,password,with,which,the,private,key,is,protected,param,certificate,path,the,path,to,the,pem,formatted,certificate,encapsulating,the,public,key,that,corresponds,to,the,private,key,specified,in,code,key,path,will,be,presented,to,incoming,ssl,connections,param,trusted,certificates,a,list,of,pem,formatted,certificates,that,will,be,trusted;public,static,void,add,sslsettings,for,pemfiles,settings,builder,builder,string,key,path,string,password,string,certificate,path,list,string,trusted,certificates,add,sslsettings,for,pemfiles,builder,key,path,password,certificate,path,trusted,certificates,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,                                                  String certificatePath, List<String> trustedCertificates);1536964057;Returns the SSL related configuration settings given the location of a key and certificate and the location_of the PEM certificates to be trusted__@param keyPath             The path to the Private key to be used for SSL_@param password            The password with which the private key is protected_@param certificatePath     The path to the PEM formatted Certificate encapsulating the public key that corresponds_to the Private Key specified in {@code keyPath}. Will be presented to incoming_SSL connections._@param trustedCertificates A list of PEM formatted certificates that will be trusted.;public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,_                                                 String certificatePath, List<String> trustedCertificates) {_        addSSLSettingsForPEMFiles(builder, "", keyPath, password, certificatePath, trustedCertificates, true, true, true)__    };returns,the,ssl,related,configuration,settings,given,the,location,of,a,key,and,certificate,and,the,location,of,the,pem,certificates,to,be,trusted,param,key,path,the,path,to,the,private,key,to,be,used,for,ssl,param,password,the,password,with,which,the,private,key,is,protected,param,certificate,path,the,path,to,the,pem,formatted,certificate,encapsulating,the,public,key,that,corresponds,to,the,private,key,specified,in,code,key,path,will,be,presented,to,incoming,ssl,connections,param,trusted,certificates,a,list,of,pem,formatted,certificates,that,will,be,trusted;public,static,void,add,sslsettings,for,pemfiles,settings,builder,builder,string,key,path,string,password,string,certificate,path,list,string,trusted,certificates,add,sslsettings,for,pemfiles,builder,key,path,password,certificate,path,trusted,certificates,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,                                                  String certificatePath, List<String> trustedCertificates);1539723533;Returns the SSL related configuration settings given the location of a key and certificate and the location_of the PEM certificates to be trusted__@param keyPath             The path to the Private key to be used for SSL_@param password            The password with which the private key is protected_@param certificatePath     The path to the PEM formatted Certificate encapsulating the public key that corresponds_to the Private Key specified in {@code keyPath}. Will be presented to incoming_SSL connections._@param trustedCertificates A list of PEM formatted certificates that will be trusted.;public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,_                                                 String certificatePath, List<String> trustedCertificates) {_        addSSLSettingsForPEMFiles(builder, "", keyPath, password, certificatePath, trustedCertificates, true, true, true)__    };returns,the,ssl,related,configuration,settings,given,the,location,of,a,key,and,certificate,and,the,location,of,the,pem,certificates,to,be,trusted,param,key,path,the,path,to,the,private,key,to,be,used,for,ssl,param,password,the,password,with,which,the,private,key,is,protected,param,certificate,path,the,path,to,the,pem,formatted,certificate,encapsulating,the,public,key,that,corresponds,to,the,private,key,specified,in,code,key,path,will,be,presented,to,incoming,ssl,connections,param,trusted,certificates,a,list,of,pem,formatted,certificates,that,will,be,trusted;public,static,void,add,sslsettings,for,pemfiles,settings,builder,builder,string,key,path,string,password,string,certificate,path,list,string,trusted,certificates,add,sslsettings,for,pemfiles,builder,key,path,password,certificate,path,trusted,certificates,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,                                                  String certificatePath, List<String> trustedCertificates);1539764946;Returns the SSL related configuration settings given the location of a key and certificate and the location_of the PEM certificates to be trusted__@param keyPath             The path to the Private key to be used for SSL_@param password            The password with which the private key is protected_@param certificatePath     The path to the PEM formatted Certificate encapsulating the public key that corresponds_to the Private Key specified in {@code keyPath}. Will be presented to incoming_SSL connections._@param trustedCertificates A list of PEM formatted certificates that will be trusted.;public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,_                                                 String certificatePath, List<String> trustedCertificates) {_        addSSLSettingsForPEMFiles(builder, "", keyPath, password, certificatePath, trustedCertificates, true, true, true)__    };returns,the,ssl,related,configuration,settings,given,the,location,of,a,key,and,certificate,and,the,location,of,the,pem,certificates,to,be,trusted,param,key,path,the,path,to,the,private,key,to,be,used,for,ssl,param,password,the,password,with,which,the,private,key,is,protected,param,certificate,path,the,path,to,the,pem,formatted,certificate,encapsulating,the,public,key,that,corresponds,to,the,private,key,specified,in,code,key,path,will,be,presented,to,incoming,ssl,connections,param,trusted,certificates,a,list,of,pem,formatted,certificates,that,will,be,trusted;public,static,void,add,sslsettings,for,pemfiles,settings,builder,builder,string,key,path,string,password,string,certificate,path,list,string,trusted,certificates,add,sslsettings,for,pemfiles,builder,key,path,password,certificate,path,trusted,certificates,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,                                                  String certificatePath, List<String> trustedCertificates);1541476610;Returns the SSL related configuration settings given the location of a key and certificate and the location_of the PEM certificates to be trusted__@param keyPath             The path to the Private key to be used for SSL_@param password            The password with which the private key is protected_@param certificatePath     The path to the PEM formatted Certificate encapsulating the public key that corresponds_to the Private Key specified in {@code keyPath}. Will be presented to incoming_SSL connections._@param trustedCertificates A list of PEM formatted certificates that will be trusted.;public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,_                                                 String certificatePath, List<String> trustedCertificates) {_        addSSLSettingsForPEMFiles(builder, "", keyPath, password, certificatePath, trustedCertificates, true, true, true)__    };returns,the,ssl,related,configuration,settings,given,the,location,of,a,key,and,certificate,and,the,location,of,the,pem,certificates,to,be,trusted,param,key,path,the,path,to,the,private,key,to,be,used,for,ssl,param,password,the,password,with,which,the,private,key,is,protected,param,certificate,path,the,path,to,the,pem,formatted,certificate,encapsulating,the,public,key,that,corresponds,to,the,private,key,specified,in,code,key,path,will,be,presented,to,incoming,ssl,connections,param,trusted,certificates,a,list,of,pem,formatted,certificates,that,will,be,trusted;public,static,void,add,sslsettings,for,pemfiles,settings,builder,builder,string,key,path,string,password,string,certificate,path,list,string,trusted,certificates,add,sslsettings,for,pemfiles,builder,key,path,password,certificate,path,trusted,certificates,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,                                                  String certificatePath, List<String> trustedCertificates);1547499982;Returns the SSL related configuration settings given the location of a key and certificate and the location_of the PEM certificates to be trusted__@param keyPath             The path to the Private key to be used for SSL_@param password            The password with which the private key is protected_@param certificatePath     The path to the PEM formatted Certificate encapsulating the public key that corresponds_to the Private Key specified in {@code keyPath}. Will be presented to incoming_SSL connections._@param trustedCertificates A list of PEM formatted certificates that will be trusted.;public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,_                                                 String certificatePath, List<String> trustedCertificates) {_        addSSLSettingsForPEMFiles(builder, "", keyPath, password, certificatePath, trustedCertificates, true, true)__    };returns,the,ssl,related,configuration,settings,given,the,location,of,a,key,and,certificate,and,the,location,of,the,pem,certificates,to,be,trusted,param,key,path,the,path,to,the,private,key,to,be,used,for,ssl,param,password,the,password,with,which,the,private,key,is,protected,param,certificate,path,the,path,to,the,pem,formatted,certificate,encapsulating,the,public,key,that,corresponds,to,the,private,key,specified,in,code,key,path,will,be,presented,to,incoming,ssl,connections,param,trusted,certificates,a,list,of,pem,formatted,certificates,that,will,be,trusted;public,static,void,add,sslsettings,for,pemfiles,settings,builder,builder,string,key,path,string,password,string,certificate,path,list,string,trusted,certificates,add,sslsettings,for,pemfiles,builder,key,path,password,certificate,path,trusted,certificates,true,true
SecuritySettingsSource -> public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,                                                  String certificatePath, List<String> trustedCertificates);1548789003;Returns the SSL related configuration settings given the location of a key and certificate and the location_of the PEM certificates to be trusted__@param keyPath             The path to the Private key to be used for SSL_@param password            The password with which the private key is protected_@param certificatePath     The path to the PEM formatted Certificate encapsulating the public key that corresponds_to the Private Key specified in {@code keyPath}. Will be presented to incoming_SSL connections._@param trustedCertificates A list of PEM formatted certificates that will be trusted.;public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,_                                                 String certificatePath, List<String> trustedCertificates) {_        addSSLSettingsForPEMFiles(builder, "", keyPath, password, certificatePath, trustedCertificates, true, true)__    };returns,the,ssl,related,configuration,settings,given,the,location,of,a,key,and,certificate,and,the,location,of,the,pem,certificates,to,be,trusted,param,key,path,the,path,to,the,private,key,to,be,used,for,ssl,param,password,the,password,with,which,the,private,key,is,protected,param,certificate,path,the,path,to,the,pem,formatted,certificate,encapsulating,the,public,key,that,corresponds,to,the,private,key,specified,in,code,key,path,will,be,presented,to,incoming,ssl,connections,param,trusted,certificates,a,list,of,pem,formatted,certificates,that,will,be,trusted;public,static,void,add,sslsettings,for,pemfiles,settings,builder,builder,string,key,path,string,password,string,certificate,path,list,string,trusted,certificates,add,sslsettings,for,pemfiles,builder,key,path,password,certificate,path,trusted,certificates,true,true
SecuritySettingsSource -> public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,                                                  String certificatePath, List<String> trustedCertificates);1549356548;Returns the SSL related configuration settings given the location of a key and certificate and the location_of the PEM certificates to be trusted__@param keyPath             The path to the Private key to be used for SSL_@param password            The password with which the private key is protected_@param certificatePath     The path to the PEM formatted Certificate encapsulating the public key that corresponds_to the Private Key specified in {@code keyPath}. Will be presented to incoming_SSL connections._@param trustedCertificates A list of PEM formatted certificates that will be trusted.;public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,_                                                 String certificatePath, List<String> trustedCertificates) {_        addSSLSettingsForPEMFiles(builder, "", keyPath, password, certificatePath, trustedCertificates, true, true)__    };returns,the,ssl,related,configuration,settings,given,the,location,of,a,key,and,certificate,and,the,location,of,the,pem,certificates,to,be,trusted,param,key,path,the,path,to,the,private,key,to,be,used,for,ssl,param,password,the,password,with,which,the,private,key,is,protected,param,certificate,path,the,path,to,the,pem,formatted,certificate,encapsulating,the,public,key,that,corresponds,to,the,private,key,specified,in,code,key,path,will,be,presented,to,incoming,ssl,connections,param,trusted,certificates,a,list,of,pem,formatted,certificates,that,will,be,trusted;public,static,void,add,sslsettings,for,pemfiles,settings,builder,builder,string,key,path,string,password,string,certificate,path,list,string,trusted,certificates,add,sslsettings,for,pemfiles,builder,key,path,password,certificate,path,trusted,certificates,true,true
SecuritySettingsSource -> public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,                                                  String certificatePath, String prefix, List<String> trustedCertificates);1547499982;Returns the SSL related configuration settings given the location of a key and certificate and the location_of the PEM certificates to be trusted__@param keyPath             The path to the Private key to be used for SSL_@param password            The password with which the private key is protected_@param certificatePath     The path to the PEM formatted Certificate encapsulating the public key that corresponds_to the Private Key specified in {@code keyPath}. Will be presented to incoming_SSL connections._@param prefix              The settings prefix to use before ssl setting names_@param trustedCertificates A list of PEM formatted certificates that will be trusted.;public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,_                                                 String certificatePath, String prefix, List<String> trustedCertificates) {_        addSSLSettingsForPEMFiles(builder, prefix, keyPath, password, certificatePath, trustedCertificates, true, true)__    };returns,the,ssl,related,configuration,settings,given,the,location,of,a,key,and,certificate,and,the,location,of,the,pem,certificates,to,be,trusted,param,key,path,the,path,to,the,private,key,to,be,used,for,ssl,param,password,the,password,with,which,the,private,key,is,protected,param,certificate,path,the,path,to,the,pem,formatted,certificate,encapsulating,the,public,key,that,corresponds,to,the,private,key,specified,in,code,key,path,will,be,presented,to,incoming,ssl,connections,param,prefix,the,settings,prefix,to,use,before,ssl,setting,names,param,trusted,certificates,a,list,of,pem,formatted,certificates,that,will,be,trusted;public,static,void,add,sslsettings,for,pemfiles,settings,builder,builder,string,key,path,string,password,string,certificate,path,string,prefix,list,string,trusted,certificates,add,sslsettings,for,pemfiles,builder,prefix,key,path,password,certificate,path,trusted,certificates,true,true
SecuritySettingsSource -> public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,                                                  String certificatePath, String prefix, List<String> trustedCertificates);1548789003;Returns the SSL related configuration settings given the location of a key and certificate and the location_of the PEM certificates to be trusted__@param keyPath             The path to the Private key to be used for SSL_@param password            The password with which the private key is protected_@param certificatePath     The path to the PEM formatted Certificate encapsulating the public key that corresponds_to the Private Key specified in {@code keyPath}. Will be presented to incoming_SSL connections._@param prefix              The settings prefix to use before ssl setting names_@param trustedCertificates A list of PEM formatted certificates that will be trusted.;public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,_                                                 String certificatePath, String prefix, List<String> trustedCertificates) {_        addSSLSettingsForPEMFiles(builder, prefix, keyPath, password, certificatePath, trustedCertificates, true, true)__    };returns,the,ssl,related,configuration,settings,given,the,location,of,a,key,and,certificate,and,the,location,of,the,pem,certificates,to,be,trusted,param,key,path,the,path,to,the,private,key,to,be,used,for,ssl,param,password,the,password,with,which,the,private,key,is,protected,param,certificate,path,the,path,to,the,pem,formatted,certificate,encapsulating,the,public,key,that,corresponds,to,the,private,key,specified,in,code,key,path,will,be,presented,to,incoming,ssl,connections,param,prefix,the,settings,prefix,to,use,before,ssl,setting,names,param,trusted,certificates,a,list,of,pem,formatted,certificates,that,will,be,trusted;public,static,void,add,sslsettings,for,pemfiles,settings,builder,builder,string,key,path,string,password,string,certificate,path,string,prefix,list,string,trusted,certificates,add,sslsettings,for,pemfiles,builder,prefix,key,path,password,certificate,path,trusted,certificates,true,true
SecuritySettingsSource -> public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,                                                  String certificatePath, String prefix, List<String> trustedCertificates);1549356548;Returns the SSL related configuration settings given the location of a key and certificate and the location_of the PEM certificates to be trusted__@param keyPath             The path to the Private key to be used for SSL_@param password            The password with which the private key is protected_@param certificatePath     The path to the PEM formatted Certificate encapsulating the public key that corresponds_to the Private Key specified in {@code keyPath}. Will be presented to incoming_SSL connections._@param prefix              The settings prefix to use before ssl setting names_@param trustedCertificates A list of PEM formatted certificates that will be trusted.;public static void addSSLSettingsForPEMFiles(Settings.Builder builder, String keyPath, String password,_                                                 String certificatePath, String prefix, List<String> trustedCertificates) {_        addSSLSettingsForPEMFiles(builder, prefix, keyPath, password, certificatePath, trustedCertificates, true, true)__    };returns,the,ssl,related,configuration,settings,given,the,location,of,a,key,and,certificate,and,the,location,of,the,pem,certificates,to,be,trusted,param,key,path,the,path,to,the,private,key,to,be,used,for,ssl,param,password,the,password,with,which,the,private,key,is,protected,param,certificate,path,the,path,to,the,pem,formatted,certificate,encapsulating,the,public,key,that,corresponds,to,the,private,key,specified,in,code,key,path,will,be,presented,to,incoming,ssl,connections,param,prefix,the,settings,prefix,to,use,before,ssl,setting,names,param,trusted,certificates,a,list,of,pem,formatted,certificates,that,will,be,trusted;public,static,void,add,sslsettings,for,pemfiles,settings,builder,builder,string,key,path,string,password,string,certificate,path,string,prefix,list,string,trusted,certificates,add,sslsettings,for,pemfiles,builder,prefix,key,path,password,certificate,path,trusted,certificates,true,true
SecuritySettingsSource -> public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password);1524684173;Returns the configuration settings given the location of a certificate and its password__@param resourcePathToStore the location of the keystore or truststore_@param password the password;public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password) {_        addSSLSettingsForStore(builder, "", resourcePathToStore, password, true, true, true)__    };returns,the,configuration,settings,given,the,location,of,a,certificate,and,its,password,param,resource,path,to,store,the,location,of,the,keystore,or,truststore,param,password,the,password;public,static,void,add,sslsettings,for,store,settings,builder,builder,string,resource,path,to,store,string,password,add,sslsettings,for,store,builder,resource,path,to,store,password,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password);1528762805;Returns the configuration settings given the location of a certificate and its password__@param resourcePathToStore the location of the keystore or truststore_@param password the password;public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password) {_        addSSLSettingsForStore(builder, "", resourcePathToStore, password, true, true, true)__    };returns,the,configuration,settings,given,the,location,of,a,certificate,and,its,password,param,resource,path,to,store,the,location,of,the,keystore,or,truststore,param,password,the,password;public,static,void,add,sslsettings,for,store,settings,builder,builder,string,resource,path,to,store,string,password,add,sslsettings,for,store,builder,resource,path,to,store,password,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password);1529508649;Returns the configuration settings given the location of a certificate and its password__@param resourcePathToStore the location of the keystore or truststore_@param password the password;public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password) {_        addSSLSettingsForStore(builder, "", resourcePathToStore, password, true, true, true)__    };returns,the,configuration,settings,given,the,location,of,a,certificate,and,its,password,param,resource,path,to,store,the,location,of,the,keystore,or,truststore,param,password,the,password;public,static,void,add,sslsettings,for,store,settings,builder,builder,string,resource,path,to,store,string,password,add,sslsettings,for,store,builder,resource,path,to,store,password,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password);1531179852;Returns the configuration settings given the location of a certificate and its password__@param resourcePathToStore the location of the keystore or truststore_@param password the password;public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password) {_        addSSLSettingsForStore(builder, "", resourcePathToStore, password, true, true, true)__    };returns,the,configuration,settings,given,the,location,of,a,certificate,and,its,password,param,resource,path,to,store,the,location,of,the,keystore,or,truststore,param,password,the,password;public,static,void,add,sslsettings,for,store,settings,builder,builder,string,resource,path,to,store,string,password,add,sslsettings,for,store,builder,resource,path,to,store,password,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password);1531729807;Returns the configuration settings given the location of a certificate and its password__@param resourcePathToStore the location of the keystore or truststore_@param password the password;public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password) {_        addSSLSettingsForStore(builder, "", resourcePathToStore, password, true, true, true)__    };returns,the,configuration,settings,given,the,location,of,a,certificate,and,its,password,param,resource,path,to,store,the,location,of,the,keystore,or,truststore,param,password,the,password;public,static,void,add,sslsettings,for,store,settings,builder,builder,string,resource,path,to,store,string,password,add,sslsettings,for,store,builder,resource,path,to,store,password,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password);1531910483;Returns the configuration settings given the location of a certificate and its password__@param resourcePathToStore the location of the keystore or truststore_@param password the password;public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password) {_        addSSLSettingsForStore(builder, "", resourcePathToStore, password, true, true, true)__    };returns,the,configuration,settings,given,the,location,of,a,certificate,and,its,password,param,resource,path,to,store,the,location,of,the,keystore,or,truststore,param,password,the,password;public,static,void,add,sslsettings,for,store,settings,builder,builder,string,resource,path,to,store,string,password,add,sslsettings,for,store,builder,resource,path,to,store,password,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password);1536964057;Returns the configuration settings given the location of a certificate and its password__@param resourcePathToStore the location of the keystore or truststore_@param password the password;public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password) {_        addSSLSettingsForStore(builder, "", resourcePathToStore, password, true, true, true)__    };returns,the,configuration,settings,given,the,location,of,a,certificate,and,its,password,param,resource,path,to,store,the,location,of,the,keystore,or,truststore,param,password,the,password;public,static,void,add,sslsettings,for,store,settings,builder,builder,string,resource,path,to,store,string,password,add,sslsettings,for,store,builder,resource,path,to,store,password,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password);1539723533;Returns the configuration settings given the location of a certificate and its password__@param resourcePathToStore the location of the keystore or truststore_@param password the password;public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password) {_        addSSLSettingsForStore(builder, "", resourcePathToStore, password, true, true, true)__    };returns,the,configuration,settings,given,the,location,of,a,certificate,and,its,password,param,resource,path,to,store,the,location,of,the,keystore,or,truststore,param,password,the,password;public,static,void,add,sslsettings,for,store,settings,builder,builder,string,resource,path,to,store,string,password,add,sslsettings,for,store,builder,resource,path,to,store,password,true,true,true
SecuritySettingsSource -> public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password, String prefix);1547499982;Returns the configuration settings given the location of a certificate and its password__@param resourcePathToStore the location of the keystore or truststore_@param password the password;public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password, String prefix) {_        addSSLSettingsForStore(builder, prefix, resourcePathToStore, password, true, true)__    };returns,the,configuration,settings,given,the,location,of,a,certificate,and,its,password,param,resource,path,to,store,the,location,of,the,keystore,or,truststore,param,password,the,password;public,static,void,add,sslsettings,for,store,settings,builder,builder,string,resource,path,to,store,string,password,string,prefix,add,sslsettings,for,store,builder,prefix,resource,path,to,store,password,true,true
SecuritySettingsSource -> public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password, String prefix);1548789003;Returns the configuration settings given the location of a certificate and its password__@param resourcePathToStore the location of the keystore or truststore_@param password the password;public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password, String prefix) {_        addSSLSettingsForStore(builder, prefix, resourcePathToStore, password, true, true)__    };returns,the,configuration,settings,given,the,location,of,a,certificate,and,its,password,param,resource,path,to,store,the,location,of,the,keystore,or,truststore,param,password,the,password;public,static,void,add,sslsettings,for,store,settings,builder,builder,string,resource,path,to,store,string,password,string,prefix,add,sslsettings,for,store,builder,prefix,resource,path,to,store,password,true,true
SecuritySettingsSource -> public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password, String prefix);1549356548;Returns the configuration settings given the location of a certificate and its password__@param resourcePathToStore the location of the keystore or truststore_@param password the password;public static void addSSLSettingsForStore(Settings.Builder builder, String resourcePathToStore, String password, String prefix) {_        addSSLSettingsForStore(builder, prefix, resourcePathToStore, password, true, true)__    };returns,the,configuration,settings,given,the,location,of,a,certificate,and,its,password,param,resource,path,to,store,the,location,of,the,keystore,or,truststore,param,password,the,password;public,static,void,add,sslsettings,for,store,settings,builder,builder,string,resource,path,to,store,string,password,string,prefix,add,sslsettings,for,store,builder,prefix,resource,path,to,store,password,true,true
SecuritySettingsSource -> public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope);1524684173;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param numOfNodes the number of nodes for proper unicast configuration (can be more than actually available)_@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope) {_        super(numOfNodes, DEFAULT_SETTINGS)__        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        this.usePEM = randomBoolean()__    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,num,of,nodes,the,number,of,nodes,for,proper,unicast,configuration,can,be,more,than,actually,available,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,int,num,of,nodes,boolean,ssl,enabled,path,parent,folder,scope,scope,super,num,of,nodes,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,this,use,pem,random,boolean
SecuritySettingsSource -> public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope);1528762805;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param numOfNodes the number of nodes for proper unicast configuration (can be more than actually available)_@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope) {_        super(numOfNodes, DEFAULT_SETTINGS)__        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        this.usePEM = randomBoolean()__    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,num,of,nodes,the,number,of,nodes,for,proper,unicast,configuration,can,be,more,than,actually,available,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,int,num,of,nodes,boolean,ssl,enabled,path,parent,folder,scope,scope,super,num,of,nodes,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,this,use,pem,random,boolean
SecuritySettingsSource -> public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope);1529508649;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param numOfNodes the number of nodes for proper unicast configuration (can be more than actually available)_@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope) {_        super(numOfNodes, DEFAULT_SETTINGS)__        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        this.usePEM = randomBoolean()__    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,num,of,nodes,the,number,of,nodes,for,proper,unicast,configuration,can,be,more,than,actually,available,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,int,num,of,nodes,boolean,ssl,enabled,path,parent,folder,scope,scope,super,num,of,nodes,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,this,use,pem,random,boolean
SecuritySettingsSource -> public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope);1531179852;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param numOfNodes the number of nodes for proper unicast configuration (can be more than actually available)_@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope) {_        super(numOfNodes, DEFAULT_SETTINGS)__        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        this.usePEM = randomBoolean()__    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,num,of,nodes,the,number,of,nodes,for,proper,unicast,configuration,can,be,more,than,actually,available,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,int,num,of,nodes,boolean,ssl,enabled,path,parent,folder,scope,scope,super,num,of,nodes,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,this,use,pem,random,boolean
SecuritySettingsSource -> public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope);1531729807;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param numOfNodes the number of nodes for proper unicast configuration (can be more than actually available)_@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope) {_        super(numOfNodes, DEFAULT_SETTINGS)__        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        this.usePEM = randomBoolean()__    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,num,of,nodes,the,number,of,nodes,for,proper,unicast,configuration,can,be,more,than,actually,available,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,int,num,of,nodes,boolean,ssl,enabled,path,parent,folder,scope,scope,super,num,of,nodes,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,this,use,pem,random,boolean
SecuritySettingsSource -> public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope);1531910483;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param numOfNodes the number of nodes for proper unicast configuration (can be more than actually available)_@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope) {_        super(numOfNodes, DEFAULT_SETTINGS)__        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        _        if (inFipsJvm()) {_            this.usePEM = true__        } else {_            this.usePEM = randomBoolean()__        }_    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,num,of,nodes,the,number,of,nodes,for,proper,unicast,configuration,can,be,more,than,actually,available,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,int,num,of,nodes,boolean,ssl,enabled,path,parent,folder,scope,scope,super,num,of,nodes,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,if,in,fips,jvm,this,use,pem,true,else,this,use,pem,random,boolean
SecuritySettingsSource -> public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope);1536964057;Creates a new {@link org.elasticsearch.test.NodeConfigurationSource} for the security configuration.__@param numOfNodes the number of nodes for proper unicast configuration (can be more than actually available)_@param sslEnabled whether ssl is enabled_@param parentFolder the parent folder that will contain all of the configuration files that need to be created_@param scope the scope of the test that is requiring an instance of SecuritySettingsSource;public SecuritySettingsSource(int numOfNodes, boolean sslEnabled, Path parentFolder, Scope scope) {_        super(numOfNodes, DEFAULT_SETTINGS)__        this.parentFolder = parentFolder__        this.subfolderPrefix = scope.name()__        this.sslEnabled = sslEnabled__        this.hostnameVerificationEnabled = randomBoolean()__        _        if (inFipsJvm()) {_            this.usePEM = true__        } else {_            this.usePEM = randomBoolean()__        }_    };creates,a,new,link,org,elasticsearch,test,node,configuration,source,for,the,security,configuration,param,num,of,nodes,the,number,of,nodes,for,proper,unicast,configuration,can,be,more,than,actually,available,param,ssl,enabled,whether,ssl,is,enabled,param,parent,folder,the,parent,folder,that,will,contain,all,of,the,configuration,files,that,need,to,be,created,param,scope,the,scope,of,the,test,that,is,requiring,an,instance,of,security,settings,source;public,security,settings,source,int,num,of,nodes,boolean,ssl,enabled,path,parent,folder,scope,scope,super,num,of,nodes,this,parent,folder,parent,folder,this,subfolder,prefix,scope,name,this,ssl,enabled,ssl,enabled,this,hostname,verification,enabled,random,boolean,if,in,fips,jvm,this,use,pem,true,else,this,use,pem,random,boolean
