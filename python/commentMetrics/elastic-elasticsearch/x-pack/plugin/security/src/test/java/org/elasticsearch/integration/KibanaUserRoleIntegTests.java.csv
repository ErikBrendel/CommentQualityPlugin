commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override public String configRoles() {     return super.configRoles() + "\n" + "my_kibana_user:\n" + "  indices:\n" + "    - names: 'logstash-*'\n" + "      privileges:\n" + "        - view_index_metadata\n" + "        - read\n". }
false;public;0;6;;@Override public String configUsers() {     final String usersPasswdHashed = new String(getFastStoredHashAlgoForTests().hash(USERS_PASSWD)).     return super.configUsers() + "kibana_user:" + usersPasswdHashed. }
false;public;0;6;;@Override public String configUsersRoles() {     return super.configUsersRoles() + "my_kibana_user:kibana_user\n" + "kibana_user:kibana_user". }
false;public;0;22;;public void testFieldMappings() throws Exception {     final String index = "logstash-20-12-2015".     final String type = "event".     final String field = "foo".     indexRandom(true, client().prepareIndex().setIndex(index).setType(type).setSource(field, "bar")).     GetFieldMappingsResponse response = client().admin().indices().prepareGetFieldMappings().addIndices("logstash-*").setFields("*").includeDefaults(true).get().     FieldMappingMetaData fieldMappingMetaData = response.fieldMappings(index, type, field).     assertThat(fieldMappingMetaData, notNullValue()).     assertThat(fieldMappingMetaData.isNull(), is(false)).     response = client().filterWithHeader(singletonMap("Authorization", UsernamePasswordToken.basicAuthHeaderValue("kibana_user", USERS_PASSWD))).admin().indices().prepareGetFieldMappings().addIndices("logstash-*").setFields("*").includeDefaults(true).get().     FieldMappingMetaData fieldMappingMetaData1 = response.fieldMappings(index, type, field).     assertThat(fieldMappingMetaData1, notNullValue()).     assertThat(fieldMappingMetaData1.isNull(), is(false)).     assertThat(fieldMappingMetaData1.fullName(), equalTo(fieldMappingMetaData.fullName())). }
false;public;0;17;;public void testValidateQuery() throws Exception {     final String index = "logstash-20-12-2015".     final String type = "event".     final String field = "foo".     indexRandom(true, client().prepareIndex().setIndex(index).setType(type).setSource(field, "bar")).     ValidateQueryResponse response = client().admin().indices().prepareValidateQuery(index).setQuery(QueryBuilders.termQuery(field, "bar")).get().     assertThat(response.isValid(), is(true)).     response = client().filterWithHeader(singletonMap("Authorization", UsernamePasswordToken.basicAuthHeaderValue("kibana_user", USERS_PASSWD))).admin().indices().prepareValidateQuery(index).setQuery(QueryBuilders.termQuery(field, "bar")).get().     assertThat(response.isValid(), is(true)). }
false;public;0;26;;public void testSearchAndMSearch() throws Exception {     final String index = "logstash-20-12-2015".     final String type = "event".     final String field = "foo".     indexRandom(true, client().prepareIndex().setIndex(index).setType(type).setSource(field, "bar")).     SearchResponse response = client().prepareSearch(index).setQuery(QueryBuilders.matchAllQuery()).get().     final long hits = response.getHits().getTotalHits().value.     assertThat(hits, greaterThan(0L)).     response = client().filterWithHeader(singletonMap("Authorization", UsernamePasswordToken.basicAuthHeaderValue("kibana_user", USERS_PASSWD))).prepareSearch(index).setQuery(QueryBuilders.matchAllQuery()).get().     assertEquals(response.getHits().getTotalHits().value, hits).     MultiSearchResponse multiSearchResponse = client().prepareMultiSearch().add(client().prepareSearch(index).setQuery(QueryBuilders.matchAllQuery())).get().     final long multiHits = multiSearchResponse.getResponses()[0].getResponse().getHits().getTotalHits().value.     assertThat(hits, greaterThan(0L)).     multiSearchResponse = client().filterWithHeader(singletonMap("Authorization", UsernamePasswordToken.basicAuthHeaderValue("kibana_user", USERS_PASSWD))).prepareMultiSearch().add(client().prepareSearch(index).setQuery(QueryBuilders.matchAllQuery())).get().     assertEquals(multiSearchResponse.getResponses()[0].getResponse().getHits().getTotalHits().value, multiHits). }
false;public;0;15;;public void testGetIndex() throws Exception {     final String index = "logstash-20-12-2015".     final String type = "event".     final String field = "foo".     indexRandom(true, client().prepareIndex().setIndex(index).setType(type).setSource(field, "bar")).     GetIndexResponse response = client().admin().indices().prepareGetIndex().setIndices(index).get().     assertThat(response.getIndices(), arrayContaining(index)).     response = client().filterWithHeader(singletonMap("Authorization", UsernamePasswordToken.basicAuthHeaderValue("kibana_user", USERS_PASSWD))).admin().indices().prepareGetIndex().setIndices(index).get().     assertThat(response.getIndices(), arrayContaining(index)). }
false;public;0;22;;public void testGetMappings() throws Exception {     final String index = "logstash-20-12-2015".     final String type = "event".     final String field = "foo".     indexRandom(true, client().prepareIndex().setIndex(index).setType(type).setSource(field, "bar")).     GetMappingsResponse response = client().filterWithHeader(singletonMap("Authorization", UsernamePasswordToken.basicAuthHeaderValue("kibana_user", USERS_PASSWD))).admin().indices().prepareGetMappings("logstash-*").get().     ImmutableOpenMap<String, ImmutableOpenMap<String, MappingMetaData>> mappingsMap = response.getMappings().     assertNotNull(mappingsMap).     assertNotNull(mappingsMap.get(index)).     assertNotNull(mappingsMap.get(index).get(type)).     MappingMetaData mappingMetaData = mappingsMap.get(index).get(type).     assertThat(mappingMetaData.getSourceAsMap(), hasKey("properties")).     assertThat(mappingMetaData.getSourceAsMap().get("properties"), instanceOf(Map.class)).     Map<String, Object> propertiesMap = (Map<String, Object>) mappingMetaData.getSourceAsMap().get("properties").     assertThat(propertiesMap, hasKey(field)). }
