commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void ensureNativeStoresStarted() throws Exception {     assertSecurityIndexActive().     if (shouldSetReservedUserPasswords()) {         setupReservedPasswords().     } }
false;public;0;10;;@After public void stopESNativeStores() throws Exception {     deleteSecurityIndex().     if (getCurrentClusterScope() == Scope.SUITE) {         // Clear the realm cache for all realms since we use a SUITE scoped cluster         SecurityClient client = securityClient(internalCluster().transportClient()).         client.prepareClearRealmCache().get().     } }
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;public;0;6;;@Override public Set<String> excludeTemplates() {     Set<String> templates = Sets.newHashSet(super.excludeTemplates()).     // don't remove the security index template     templates.add(SecurityIndexManager.SECURITY_TEMPLATE_NAME).     return templates. }
false;protected;0;3;;protected SecureString getReservedPassword() {     return reservedPassword. }
false;protected;0;3;;protected boolean shouldSetReservedUserPasswords() {     return true. }
false;public;0;3;;public void setupReservedPasswords() throws IOException {     setupReservedPasswords(getRestClient()). }
false;public;1;24;;public void setupReservedPasswords(RestClient restClient) throws IOException {     logger.info("setting up reserved passwords for test").     {         Request request = new Request("PUT", "/_security/user/elastic/_password").         request.setJsonEntity("{\"password\": \"" + new String(reservedPassword.getChars()) + "\"}").         RequestOptions.Builder options = request.getOptions().toBuilder().         options.addHeader("Authorization", UsernamePasswordToken.basicAuthHeaderValue(ElasticUser.NAME, BOOTSTRAP_PASSWORD)).         request.setOptions(options).         restClient.performRequest(request).     }     RequestOptions.Builder optionsBuilder = RequestOptions.DEFAULT.toBuilder().     optionsBuilder.addHeader("Authorization", UsernamePasswordToken.basicAuthHeaderValue(ElasticUser.NAME, reservedPassword)).     RequestOptions options = optionsBuilder.build().     final List<String> usernames = Arrays.asList(KibanaUser.NAME, LogstashSystemUser.NAME, BeatsSystemUser.NAME, APMSystemUser.NAME, RemoteMonitoringUser.NAME).     for (String username : usernames) {         Request request = new Request("PUT", "/_security/user/" + username + "/_password").         request.setJsonEntity("{\"password\": \"" + new String(reservedPassword.getChars()) + "\"}").         request.setOptions(options).         restClient.performRequest(request).     }     logger.info("setting up reserved passwords finished"). }
