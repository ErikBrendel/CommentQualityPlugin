commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;public;1;8;;@Override public Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(AnonymousUser.ROLES_SETTING.getKey(), "anonymous").put(AuthorizationService.ANONYMOUS_AUTHORIZATION_EXCEPTION_SETTING.getKey(), authorizationExceptionsEnabled).build(). }
false;public;0;8;;@Override public String configRoles() {     return super.configRoles() + "\n" + "anonymous:\n" + "  indices:\n" + "    - names: '*'\n" + "      privileges: [ READ ]\n". }
false;public;0;19;;public void testAnonymousViaHttp() throws Exception {     try {         getRestClient().performRequest(new Request("GET", "/_nodes")).         fail("request should have failed").     } catch (ResponseException e) {         int statusCode = e.getResponse().getStatusLine().getStatusCode().         Response response = e.getResponse().         if (authorizationExceptionsEnabled) {             assertThat(statusCode, is(403)).             assertThat(response.getHeader("WWW-Authenticate"), nullValue()).             assertThat(EntityUtils.toString(response.getEntity()), containsString("security_exception")).         } else {             assertThat(statusCode, is(401)).             assertThat(response.getHeader("WWW-Authenticate"), notNullValue()).             assertThat(response.getHeader("WWW-Authenticate"), containsString("Basic")).             assertThat(EntityUtils.toString(response.getEntity()), containsString("security_exception")).         }     } }
