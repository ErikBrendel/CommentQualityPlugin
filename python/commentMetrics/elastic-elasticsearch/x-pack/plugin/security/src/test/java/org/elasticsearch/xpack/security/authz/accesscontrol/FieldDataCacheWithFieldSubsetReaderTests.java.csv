commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@Before public void setup() throws Exception {     IndexSettings indexSettings = createIndexSettings().     CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService().     String name = "_field".     indexFieldDataCache = new DummyAccountingFieldDataCache().     sortedSetDVOrdinalsIndexFieldData = new SortedSetDVOrdinalsIndexFieldData(indexSettings, indexFieldDataCache, name, circuitBreakerService, AbstractAtomicOrdinalsFieldData.DEFAULT_SCRIPT_FUNCTION).     pagedBytesIndexFieldData = new PagedBytesIndexFieldData(indexSettings, name, indexFieldDataCache, circuitBreakerService, TextFieldMapper.Defaults.FIELDDATA_MIN_FREQUENCY, TextFieldMapper.Defaults.FIELDDATA_MAX_FREQUENCY, TextFieldMapper.Defaults.FIELDDATA_MIN_SEGMENT_SIZE).     dir = newDirectory().     IndexWriterConfig iwc = new IndexWriterConfig(null).     iwc.setMergePolicy(NoMergePolicy.INSTANCE).     IndexWriter iw = new IndexWriter(dir, iwc).     numDocs = scaledRandomIntBetween(32, 128).     for (int i = 1. i <= numDocs. i++) {         Document doc = new Document().         doc.add(new StringField("_field", String.valueOf(i), Field.Store.NO)).         doc.add(new SortedSetDocValuesField("_field", new BytesRef(String.valueOf(i)))).         iw.addDocument(doc).         if (i % 24 == 0) {             iw.commit().         }     }     iw.close().     ir = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(dir), new ShardId(indexSettings.getIndex(), 0)). }
false;public;0;5;;@After public void destroy() throws Exception {     ir.close().     dir.close(). }
false;public;0;13;;public void testSortedSetDVOrdinalsIndexFieldData_global() throws Exception {     assertThat(indexFieldDataCache.topLevelBuilds, equalTo(0)).     IndexOrdinalsFieldData global = sortedSetDVOrdinalsIndexFieldData.loadGlobal(ir).     AtomicOrdinalsFieldData atomic = global.load(ir.leaves().get(0)).     assertThat(atomic.getOrdinalsValues().getValueCount(), equalTo(numDocs)).     assertThat(indexFieldDataCache.topLevelBuilds, equalTo(1)).     DirectoryReader ir = FieldSubsetReader.wrap(this.ir, new CharacterRunAutomaton(Automata.makeEmpty())).     global = sortedSetDVOrdinalsIndexFieldData.loadGlobal(ir).     atomic = global.load(ir.leaves().get(0)).     assertThat(atomic.getOrdinalsValues().getValueCount(), equalTo(0L)).     assertThat(indexFieldDataCache.topLevelBuilds, equalTo(1)). }
false;public;0;14;;public void testSortedSetDVOrdinalsIndexFieldData_segment() throws Exception {     for (LeafReaderContext context : ir.leaves()) {         AtomicOrdinalsFieldData atomic = sortedSetDVOrdinalsIndexFieldData.load(context).         assertThat(atomic.getOrdinalsValues().getValueCount(), greaterThanOrEqualTo(1L)).     }     DirectoryReader ir = FieldSubsetReader.wrap(this.ir, new CharacterRunAutomaton(Automata.makeEmpty())).     for (LeafReaderContext context : ir.leaves()) {         AtomicOrdinalsFieldData atomic = sortedSetDVOrdinalsIndexFieldData.load(context).         assertThat(atomic.getOrdinalsValues().getValueCount(), equalTo(0L)).     }     // dv based field data doesn't use index field data cache, so in the end noting should have been added     assertThat(indexFieldDataCache.leafLevelBuilds, equalTo(0)). }
false;public;0;13;;public void testPagedBytesIndexFieldData_global() throws Exception {     assertThat(indexFieldDataCache.topLevelBuilds, equalTo(0)).     IndexOrdinalsFieldData global = pagedBytesIndexFieldData.loadGlobal(ir).     AtomicOrdinalsFieldData atomic = global.load(ir.leaves().get(0)).     assertThat(atomic.getOrdinalsValues().getValueCount(), equalTo(numDocs)).     assertThat(indexFieldDataCache.topLevelBuilds, equalTo(1)).     DirectoryReader ir = FieldSubsetReader.wrap(this.ir, new CharacterRunAutomaton(Automata.makeEmpty())).     global = pagedBytesIndexFieldData.loadGlobal(ir).     atomic = global.load(ir.leaves().get(0)).     assertThat(atomic.getOrdinalsValues().getValueCount(), equalTo(0L)).     assertThat(indexFieldDataCache.topLevelBuilds, equalTo(1)). }
false;public;0;15;;public void testPagedBytesIndexFieldData_segment() throws Exception {     assertThat(indexFieldDataCache.leafLevelBuilds, equalTo(0)).     for (LeafReaderContext context : ir.leaves()) {         AtomicOrdinalsFieldData atomic = pagedBytesIndexFieldData.load(context).         assertThat(atomic.getOrdinalsValues().getValueCount(), greaterThanOrEqualTo(1L)).     }     assertThat(indexFieldDataCache.leafLevelBuilds, equalTo(ir.leaves().size())).     DirectoryReader ir = FieldSubsetReader.wrap(this.ir, new CharacterRunAutomaton(Automata.makeEmpty())).     for (LeafReaderContext context : ir.leaves()) {         AtomicOrdinalsFieldData atomic = pagedBytesIndexFieldData.load(context).         assertThat(atomic.getOrdinalsValues().getValueCount(), equalTo(0L)).     }     assertThat(indexFieldDataCache.leafLevelBuilds, equalTo(ir.leaves().size())). }
false;private;0;10;;private IndexSettings createIndexSettings() {     Settings settings = Settings.EMPTY.     IndexMetaData indexMetaData = IndexMetaData.builder("_name").settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)).numberOfShards(1).numberOfReplicas(0).creationDate(System.currentTimeMillis()).build().     return new IndexSettings(indexMetaData, settings). }
false;public;2;6;;@Override public <FD extends AtomicFieldData, IFD extends IndexFieldData<FD>> FD load(LeafReaderContext context, IFD indexFieldData) throws Exception {     leafLevelBuilds++.     return indexFieldData.loadDirect(context). }
false;public;2;6;;@Override public <FD extends AtomicFieldData, IFD extends IndexFieldData.Global<FD>> IFD load(DirectoryReader indexReader, IFD indexFieldData) throws Exception {     topLevelBuilds++.     return (IFD) indexFieldData.localGlobalDirect(indexReader). }
false;public;0;3;;@Override public void clear() { }
false;public;1;3;;@Override public void clear(String fieldName) { }
