commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void closeConnection() {     if (connection != null) {         connection.close().     } }
true;public;0;21;/**  * Tests that a client-side timeout in the asynchronous LDAP SDK is treated as a failure, rather  * than simply returning no results.  */ ;/**  * Tests that a client-side timeout in the asynchronous LDAP SDK is treated as a failure, rather  * than simply returning no results.  */ public void testSearchTimeoutIsFailure() throws Exception {     ldapServers[0].setProcessingDelayMillis(500).     final LDAPConnectionOptions options = new LDAPConnectionOptions().     options.setConnectTimeoutMillis(1500).     options.setResponseTimeoutMillis(5).     connect(options).     final Settings settings = Settings.builder().put(getFullSettingKey(REALM_IDENTIFIER, SearchGroupsResolverSettings.BASE_DN), "ou=groups,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER, SearchGroupsResolverSettings.SCOPE), LdapSearchScope.SUB_TREE).build().     final SearchGroupsResolver resolver = new SearchGroupsResolver(getConfig(settings)).     final PlainActionFuture<List<String>> future = new PlainActionFuture<>().     resolver.resolve(connection, WILLIAM_BUSH, TimeValue.timeValueSeconds(30), logger, null, future).     final ExecutionException exception = expectThrows(ExecutionException.class, future::get).     final Throwable cause = exception.getCause().     assertThat(cause, instanceOf(LDAPException.class)).     assertThat(((LDAPException) cause).getResultCode(), is(ResultCode.TIMEOUT)). }
true;public;0;12;/**  * Tests searching for groups when the "user_attribute" field is not set  */ ;/**  * Tests searching for groups when the "user_attribute" field is not set  */ public void testResolveWithDefaultUserAttribute() throws Exception {     connect(new LDAPConnectionOptions()).     Settings settings = Settings.builder().put(getFullSettingKey(REALM_IDENTIFIER, SearchGroupsResolverSettings.BASE_DN), "ou=groups,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER, SearchGroupsResolverSettings.SCOPE), LdapSearchScope.SUB_TREE).build().     final List<String> groups = resolveGroups(settings, WILLIAM_BUSH).     assertThat(groups, iterableWithSize(1)).     assertThat(groups.get(0), containsString("HMS Lydia")). }
true;public;0;12;/**  * Tests searching for groups when the "user_attribute" field is set to "dn" (which is special)  */ ;/**  * Tests searching for groups when the "user_attribute" field is set to "dn" (which is special)  */ public void testResolveWithExplicitDnAttribute() throws Exception {     connect(new LDAPConnectionOptions()).     Settings settings = Settings.builder().put(getFullSettingKey(REALM_IDENTIFIER, SearchGroupsResolverSettings.BASE_DN), "ou=groups,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER.getName(), SearchGroupsResolverSettings.USER_ATTRIBUTE), "dn").build().     final List<String> groups = resolveGroups(settings, WILLIAM_BUSH).     assertThat(groups, iterableWithSize(1)).     assertThat(groups.get(0), containsString("HMS Lydia")). }
true;public;0;11;/**  * Tests searching for groups when the "user_attribute" field is set to a missing value  */ ;/**  * Tests searching for groups when the "user_attribute" field is set to a missing value  */ public void testResolveWithMissingAttribute() throws Exception {     connect(new LDAPConnectionOptions()).     Settings settings = Settings.builder().put(getFullSettingKey(REALM_IDENTIFIER, SearchGroupsResolverSettings.BASE_DN), "ou=groups,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER.getName(), SearchGroupsResolverSettings.USER_ATTRIBUTE), "no-such-attribute").build().     final List<String> groups = resolveGroups(settings, WILLIAM_BUSH).     assertThat(groups, iterableWithSize(0)). }
false;public;0;25;;public void testSearchWithConnectionPoolForOneResult() throws Exception {     final LDAPURL ldapurl = new LDAPURL(ldapUrls()[0]).     try (LDAPConnectionPool pool = LdapUtils.privilegedConnect(() -> new LDAPConnectionPool(new SingleServerSet(ldapurl.getHost(), ldapurl.getPort()), new SimpleBindRequest("cn=Horatio Hornblower,ou=people,o=sevenSeas", "pass"), 0, 20))) {         final Settings settings = Settings.builder().put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=Horatio Hornblower,ou=people,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.LEGACY_BIND_PASSWORD), "pass").put(getFullSettingKey(REALM_IDENTIFIER, SearchGroupsResolverSettings.BASE_DN), "ou=groups,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER, SearchGroupsResolverSettings.SCOPE), LdapSearchScope.SUB_TREE).build().         final SearchGroupsResolver resolver = new SearchGroupsResolver(getConfig(settings)).         final PlainActionFuture<List<String>> future = new PlainActionFuture<>().         resolver.resolve(pool, "cn=Moultrie Crystal,ou=people,o=sevenSeas", TimeValue.timeValueSeconds(30), logger, null, future).         List<String> resolvedDNs = future.actionGet().         assertEquals(1, resolvedDNs.size()).     } }
false;private;1;8;;private void connect(LDAPConnectionOptions options) throws LDAPException {     if (connection != null) {         throw new IllegalStateException("Already connected (" + connection.getConnectionName() + ' ' + connection.getConnectedAddress() + ')').     }     final LDAPURL ldapurl = new LDAPURL(ldapUrls()[0]).     this.connection = LdapUtils.privilegedConnect(() -> new LDAPConnection(options, ldapurl.getHost(), ldapurl.getPort())). }
false;private;2;6;;private List<String> resolveGroups(Settings settings, String userDn) {     final SearchGroupsResolver resolver = new SearchGroupsResolver(getConfig(settings)).     final PlainActionFuture<List<String>> future = new PlainActionFuture<>().     resolver.resolve(connection, userDn, TimeValue.timeValueSeconds(30), logger, null, future).     return future.actionGet(). }
false;private;1;6;;private RealmConfig getConfig(Settings settings) {     if (settings.hasValue("path.home") == false) {         settings = Settings.builder().put(settings).put("path.home", createTempDir()).build().     }     return new RealmConfig(REALM_IDENTIFIER, settings, TestEnvironment.newEnvironment(settings), new ThreadContext(settings)). }
