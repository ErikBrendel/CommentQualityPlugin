commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Before public void init() throws Exception {     Path certPath = getDataPath("support/smb_ca.crt").     Environment env = TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     /*          * Prior to each test we reinitialize the socket factory with a new SSLService so that we get a new SSLContext.          * If we re-use a SSLContext, previously connected sessions can get re-established which breaks hostname          * verification tests since a re-established connection does not perform hostname verification.          */     globalSettings = Settings.builder().put("path.home", createTempDir()).put("xpack.security.transport.ssl.certificate_authorities", certPath).build().     sslService = new SSLService(globalSettings, env).     threadPool = new TestThreadPool("LdapUserSearchSessionFactoryTests"). }
false;public;0;4;;@After public void shutdown() throws InterruptedException {     terminate(threadPool). }
false;private;2;5;;private MockSecureSettings newSecureSettings(String key, String value) {     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString(key, value).     return secureSettings. }
false;public;0;27;;public void testSupportsUnauthenticatedSessions() throws Exception {     final boolean useAttribute = randomBoolean().     Settings.Builder builder = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, "", LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), "").put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=Horatio Hornblower,ou=people,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.POOL_ENABLED), randomBoolean()).     final boolean useLegacyBindPassword = configureBindPassword(builder).     if (useAttribute) {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE), "cn").     } else {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_FILTER), "(cn={0})").     }     RealmConfig config = getRealmConfig(builder.build()).     LdapUserSearchSessionFactory sessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).     try {         assertThat(sessionFactory.supportsUnauthenticatedSession(), is(true)).     } finally {         sessionFactory.close().     }     assertDeprecationWarnings(config.identifier(), useAttribute, useLegacyBindPassword). }
false;private;1;3;;private RealmConfig getRealmConfig(Settings settings) {     return new RealmConfig(REALM_IDENTIFIER, settings, TestEnvironment.newEnvironment(settings), new ThreadContext(settings)). }
false;public;0;45;;public void testUserSearchSubTree() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "o=sevenSeas".     final boolean useAttribute = randomBoolean().     Settings.Builder builder = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=Horatio Hornblower,ou=people,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.POOL_ENABLED), randomBoolean()).     final boolean useLegacyBindPassword = configureBindPassword(builder).     if (useAttribute) {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE), "cn").     } else {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_FILTER), "(cn={0})").     }     RealmConfig config = getRealmConfig(builder.build()).     LdapUserSearchSessionFactory sessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).     String user = "William Bush".     SecureString userPass = new SecureString("pass").     try {         // auth         try (LdapSession ldap = session(sessionFactory, user, userPass)) {             assertConnectionValid(ldap.getConnection(), sessionFactory.bindCredentials).             String dn = ldap.userDn().             assertThat(dn, containsString(user)).         }         // lookup         try (LdapSession ldap = unauthenticatedSession(sessionFactory, user)) {             assertConnectionValid(ldap.getConnection(), sessionFactory.bindCredentials).             String dn = ldap.userDn().             assertThat(dn, containsString(user)).         }     } finally {         sessionFactory.close().     }     assertDeprecationWarnings(config.identifier(), useAttribute, useLegacyBindPassword). }
false;public;0;35;;public void testUserSearchBaseScopeFailsWithWrongBaseDN() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "o=sevenSeas".     final boolean useAttribute = randomBoolean().     Settings.Builder builder = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=Horatio Hornblower,ou=people,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_SCOPE), LdapSearchScope.BASE).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.POOL_ENABLED), randomBoolean()).     final boolean useLegacyBindPassword = configureBindPassword(builder).     if (useAttribute) {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE), "cn").     } else {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_FILTER), "(cn={0})").     }     RealmConfig config = getRealmConfig(builder.build()).     LdapUserSearchSessionFactory sessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).     String user = "William Bush".     SecureString userPass = new SecureString("pass").     try {         assertNull(session(sessionFactory, user, userPass)).         assertNull(unauthenticatedSession(sessionFactory, user)).     } finally {         sessionFactory.close().     }     assertDeprecationWarnings(config.identifier(), useAttribute, useLegacyBindPassword). }
false;public;0;46;;public void testUserSearchBaseScopePassesWithCorrectBaseDN() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "cn=William Bush,ou=people,o=sevenSeas".     Settings.Builder builder = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=Horatio Hornblower,ou=people,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_SCOPE), LdapSearchScope.BASE).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.POOL_ENABLED), randomBoolean()).     final boolean useLegacyBindPassword = configureBindPassword(builder).     final boolean useAttribute = randomBoolean().     if (useAttribute) {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE), "cn").     } else {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_FILTER), "(cn={0})").     }     RealmConfig config = getRealmConfig(builder.build()).     LdapUserSearchSessionFactory sessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).     String user = "William Bush".     SecureString userPass = new SecureString("pass").     try {         // auth         try (LdapSession ldap = session(sessionFactory, user, userPass)) {             assertConnectionValid(ldap.getConnection(), sessionFactory.bindCredentials).             String dn = ldap.userDn().             assertThat(dn, containsString(user)).         }         // lookup         try (LdapSession ldap = unauthenticatedSession(sessionFactory, user)) {             assertConnectionValid(ldap.getConnection(), sessionFactory.bindCredentials).             String dn = ldap.userDn().             assertThat(dn, containsString(user)).         }     } finally {         sessionFactory.close().     }     assertDeprecationWarnings(config.identifier(), useAttribute, useLegacyBindPassword). }
false;public;0;36;;public void testUserSearchOneLevelScopeFailsWithWrongBaseDN() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "o=sevenSeas".     Settings.Builder builder = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=Horatio Hornblower,ou=people,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_SCOPE), LdapSearchScope.ONE_LEVEL).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.POOL_ENABLED), randomBoolean()).     final boolean useLegacyBindPassword = configureBindPassword(builder).     final boolean useAttribute = randomBoolean().     if (useAttribute) {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE), "cn").     } else {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_FILTER), "(cn={0})").     }     RealmConfig config = getRealmConfig(builder.build()).     LdapUserSearchSessionFactory sessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).     String user = "William Bush".     SecureString userPass = new SecureString("pass").     try {         assertNull(session(sessionFactory, user, userPass)).         assertNull(unauthenticatedSession(sessionFactory, user)).     } finally {         sessionFactory.close().     }     assertDeprecationWarnings(config.identifier(), useAttribute, useLegacyBindPassword). }
false;public;0;47;;public void testUserSearchOneLevelScopePassesWithCorrectBaseDN() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "ou=people,o=sevenSeas".     Settings.Builder builder = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=Horatio Hornblower,ou=people,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_SCOPE), LdapSearchScope.ONE_LEVEL).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.POOL_ENABLED), randomBoolean()).     final boolean useLegacyBindPassword = configureBindPassword(builder).     final boolean useAttribute = randomBoolean().     if (useAttribute) {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE), "cn").     } else {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_FILTER), "(cn={0})").     }     RealmConfig config = getRealmConfig(builder.build()).     LdapUserSearchSessionFactory sessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).     String user = "William Bush".     SecureString userPass = new SecureString("pass").     try {         // auth         try (LdapSession ldap = session(sessionFactory, user, userPass)) {             assertConnectionValid(ldap.getConnection(), sessionFactory.bindCredentials).             String dn = ldap.userDn().             assertThat(dn, containsString(user)).         }         // lookup         try (LdapSession ldap = unauthenticatedSession(sessionFactory, user)) {             assertConnectionValid(ldap.getConnection(), sessionFactory.bindCredentials).             String dn = ldap.userDn().             assertThat(dn, containsString(user)).         }     } finally {         sessionFactory.close().     }     assertDeprecationWarnings(config.identifier(), useAttribute, useLegacyBindPassword). }
false;public;0;34;;public void testUserSearchWithBadAttributeFails() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "o=sevenSeas".     Settings.Builder builder = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=Horatio Hornblower,ou=people,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.POOL_ENABLED), randomBoolean()).     final boolean useLegacyBindPassword = configureBindPassword(builder).     final boolean useAttribute = randomBoolean().     if (useAttribute) {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE), "uid1").     } else {         builder.put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_FILTER), "(uid1={0})").     }     RealmConfig config = getRealmConfig(builder.build()).     LdapUserSearchSessionFactory sessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).     String user = "William Bush".     SecureString userPass = new SecureString("pass").     try {         assertNull(session(sessionFactory, user, userPass)).         assertNull(unauthenticatedSession(sessionFactory, user)).     } finally {         sessionFactory.close().     }     assertDeprecationWarnings(config.identifier(), useAttribute, useLegacyBindPassword). }
false;public;0;39;;public void testUserSearchWithoutAttributePasses() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "o=sevenSeas".     final Settings.Builder realmSettings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=Horatio Hornblower,ou=people,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.POOL_ENABLED), randomBoolean()).     final boolean useLegacyBindPassword = configureBindPassword(realmSettings).     RealmConfig config = getRealmConfig(realmSettings.build()).     LdapUserSearchSessionFactory sessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).     String user = "wbush".     SecureString userPass = new SecureString("pass").     try {         // auth         try (LdapSession ldap = session(sessionFactory, user, userPass)) {             assertConnectionValid(ldap.getConnection(), sessionFactory.bindCredentials).             String dn = ldap.userDn().             assertThat(dn, containsString("William Bush")).         }         // lookup         try (LdapSession ldap = unauthenticatedSession(sessionFactory, user)) {             assertConnectionValid(ldap.getConnection(), sessionFactory.bindCredentials).             String dn = ldap.userDn().             assertThat(dn, containsString("William Bush")).         }     } finally {         sessionFactory.close().     }     assertDeprecationWarnings(config.identifier(), false, useLegacyBindPassword). }
false;public;0;29;;public void testConnectionPoolDefaultSettings() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "o=sevenSeas".     final Settings.Builder realmSettings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=Horatio Hornblower,ou=people,o=sevenSeas").     configureBindPassword(realmSettings).     RealmConfig config = getRealmConfig(realmSettings.build()).     LDAPConnectionPool connectionPool = LdapUserSearchSessionFactory.createConnectionPool(config, new SingleServerSet("localhost", randomFrom(ldapServers).getListenPort()), TimeValue.timeValueSeconds(5), NoOpLogger.INSTANCE, new SimpleBindRequest("cn=Horatio Hornblower,ou=people,o=sevenSeas", "pass"), () -> "cn=Horatio Hornblower,ou=people,o=sevenSeas").     try {         assertThat(connectionPool.getCurrentAvailableConnections(), is(PoolingSessionFactorySettings.DEFAULT_CONNECTION_POOL_INITIAL_SIZE)).         assertThat(connectionPool.getMaximumAvailableConnections(), is(PoolingSessionFactorySettings.DEFAULT_CONNECTION_POOL_SIZE)).         assertEquals(connectionPool.getHealthCheck().getClass(), GetEntryLDAPConnectionPoolHealthCheck.class).         GetEntryLDAPConnectionPoolHealthCheck healthCheck = (GetEntryLDAPConnectionPoolHealthCheck) connectionPool.getHealthCheck().         assertThat(healthCheck.getEntryDN(), is("cn=Horatio Hornblower,ou=people,o=sevenSeas")).         assertThat(healthCheck.getMaxResponseTimeMillis(), is(SessionFactorySettings.TIMEOUT_DEFAULT.millis())).     } finally {         connectionPool.close().     } }
false;public;0;28;;public void testConnectionPoolSettings() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "o=sevenSeas".     final Settings.Builder realmSettings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=Horatio Hornblower,ou=people,o=sevenSeas").put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.POOL_INITIAL_SIZE), 10).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.POOL_SIZE), 12).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.HEALTH_CHECK_ENABLED), false).     configureBindPassword(realmSettings).     RealmConfig config = getRealmConfig(realmSettings.build()).     LDAPConnectionPool connectionPool = LdapUserSearchSessionFactory.createConnectionPool(config, new SingleServerSet("localhost", randomFrom(ldapServers).getListenPort()), TimeValue.timeValueSeconds(5), NoOpLogger.INSTANCE, new SimpleBindRequest("cn=Horatio Hornblower,ou=people,o=sevenSeas", "pass"), () -> "cn=Horatio Hornblower,ou=people,o=sevenSeas").     try {         assertThat(connectionPool.getCurrentAvailableConnections(), is(10)).         assertThat(connectionPool.getMaximumAvailableConnections(), is(12)).         assertThat(connectionPool.retryFailedOperationsDueToInvalidConnections(), is(true)).         assertEquals(connectionPool.getHealthCheck().getClass(), LDAPConnectionPoolHealthCheck.class).     } finally {         connectionPool.close().     } }
false;public;0;22;;public void testThatEmptyBindDNWithHealthCheckEnabledDoesNotThrow() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "o=sevenSeas".     final Settings settings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.LEGACY_BIND_PASSWORD), "pass").build().     RealmConfig config = getRealmConfig(settings).     LdapUserSearchSessionFactory searchSessionFactory = null.     try {         searchSessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).     } finally {         if (searchSessionFactory != null) {             searchSessionFactory.close().         }     }     assertDeprecationWarnings(config.identifier(), false, true). }
false;public;0;26;;public void testThatEmptyBindDNAndDisabledPoolingDoesNotThrow() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "o=sevenSeas".     final Settings settings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.POOL_ENABLED), false).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.LEGACY_BIND_PASSWORD), "pass").build().     RealmConfig config = getRealmConfig(settings).     LdapUserSearchSessionFactory searchSessionFactory = null.     try {         searchSessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).         final PlainActionFuture<LdapSession> future = new PlainActionFuture<>().         searchSessionFactory.session("cn=ironman", new SecureString("password".toCharArray()), future).         future.get().     } finally {         if (searchSessionFactory != null) {             searchSessionFactory.close().         }     }     assertDeprecationWarnings(config.identifier(), false, true). }
false;public;0;16;;public void testEmptyBindDNReturnsAnonymousBindRequest() throws LDAPException {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "o=sevenSeas".     final Settings.Builder realmSettings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).     final boolean useLegacyBindPassword = configureBindPassword(realmSettings).     RealmConfig config = new RealmConfig(REALM_IDENTIFIER, realmSettings.build(), TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings)).     try (LdapUserSearchSessionFactory searchSessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool)) {         assertThat(searchSessionFactory.bindCredentials, notNullValue()).         assertThat(searchSessionFactory.bindCredentials.getBindDN(), isEmptyString()).     }     assertDeprecationWarnings(config.identifier(), false, useLegacyBindPassword). }
false;public;0;17;;public void testThatBindRequestReturnsSimpleBindRequest() throws LDAPException {     String groupSearchBase = "o=sevenSeas".     String userSearchBase = "o=sevenSeas".     final Settings.Builder realmSettings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "cn=ironman").put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).     final boolean useLegacyBindPassword = configureBindPassword(realmSettings).     RealmConfig config = new RealmConfig(REALM_IDENTIFIER, realmSettings.build(), TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings)).     try (LdapUserSearchSessionFactory searchSessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool)) {         assertThat(searchSessionFactory.bindCredentials, notNullValue()).         assertThat(searchSessionFactory.bindCredentials.getBindDN(), is("cn=ironman")).     }     assertDeprecationWarnings(config.identifier(), false, useLegacyBindPassword). }
false;public;0;34;;public void testThatConnectErrorIsNotThrownOnConstruction() throws Exception {     String groupSearchBase = "DC=ad,DC=test,DC=elasticsearch,DC=com".     String userSearchBase = "CN=Users,DC=ad,DC=test,DC=elasticsearch,DC=com".     // pick a random ldap server and stop it     InMemoryDirectoryServer inMemoryDirectoryServer = randomFrom(ldapServers).     String ldapUrl = new LDAPURL("ldap", "localhost", inMemoryDirectoryServer.getListenPort(), null, null, null, null).toString().     inMemoryDirectoryServer.shutDown(true).     final Settings.Builder ldapSettingsBuilder = Settings.builder().put(globalSettings).put(LdapTestCase.buildLdapSettings(new String[] { ldapUrl }, Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN), userSearchBase).put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.BIND_DN), "ironman@ad.test.elasticsearch.com").put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE), "cn").put("timeout.tcp_connect", "500ms").put("type", "ldap").put("user_search.pool.health_check.enabled", false).put(getFullSettingKey(REALM_IDENTIFIER.getName(), LdapUserSearchSessionFactorySettings.POOL_ENABLED), randomBoolean()).     final boolean useLegacyBindPassword = configureBindPassword(ldapSettingsBuilder).     RealmConfig config = getRealmConfig(ldapSettingsBuilder.build()).     LdapUserSearchSessionFactory searchSessionFactory = null.     try {         searchSessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).     } finally {         if (searchSessionFactory != null) {             searchSessionFactory.close().         }     }     assertDeprecationWarnings(config.identifier(), true, useLegacyBindPassword). }
false;private;3;16;;private void assertDeprecationWarnings(RealmConfig.RealmIdentifier realmIdentifier, boolean useAttribute, boolean legacyBindPassword) {     List<Setting<?>> deprecatedSettings = new ArrayList<>().     if (useAttribute) {         deprecatedSettings.add(LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE.getConcreteSettingForNamespace(realmIdentifier.getName())).     }     if (legacyBindPassword) {         deprecatedSettings.add(PoolingSessionFactorySettings.LEGACY_BIND_PASSWORD.apply(realmIdentifier.getType()).getConcreteSettingForNamespace(realmIdentifier.getName())).     }     if (deprecatedSettings.size() > 0) {         assertSettingDeprecationsAndWarnings(deprecatedSettings.toArray(new Setting<?>[deprecatedSettings.size()])).     } }
false;private;1;10;;private boolean configureBindPassword(Settings.Builder builder) {     final boolean useLegacyBindPassword = randomBoolean().     if (useLegacyBindPassword) {         builder.put(getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.LEGACY_BIND_PASSWORD), "pass").     } else {         final String secureKey = getFullSettingKey(REALM_IDENTIFIER, PoolingSessionFactorySettings.SECURE_BIND_PASSWORD).         builder.setSecureSettings(newSecureSettings(secureKey, "pass")).     }     return useLegacyBindPassword. }
false;static;3;10;;static LdapUserSearchSessionFactory getLdapUserSearchSessionFactory(RealmConfig config, SSLService sslService, ThreadPool threadPool) throws LDAPException {     LdapUserSearchSessionFactory sessionFactory = new LdapUserSearchSessionFactory(config, sslService, threadPool).     if (sessionFactory.getConnectionPool() != null) {         // don't use this in production         // used here to catch bugs that might get masked by an automatic retry         sessionFactory.getConnectionPool().setRetryFailedOperationsDueToInvalidConnections(false).     }     return sessionFactory. }
