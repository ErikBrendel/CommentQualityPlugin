commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void init() throws IOException {     settings = Settings.builder().put("resource.reload.interval.high", "100ms").put("path.home", createTempDir()).build(). }
false;public;0;12;;public void testBootstrapCheckOfValidFile() {     Path file = getDataPath("role_mapping.yml").     Settings ldapSettings = Settings.builder().put(settings).put(ROLE_MAPPING_FILE_SETTING, file.toAbsolutePath()).build().     RealmConfig config = getRealmConfig(ldapSettings).     final BootstrapCheck check = RoleMappingFileBootstrapCheck.create(config).     assertThat(check, notNullValue()).     assertThat(check.alwaysEnforce(), equalTo(true)).     assertFalse(check.check(createTestContext(settings, null)).isFailure()). }
false;private,static;1;3;;private static RealmConfig getRealmConfig(Settings settings) {     return new RealmConfig(REALM_ID, settings, TestEnvironment.newEnvironment(settings), new ThreadContext(Settings.EMPTY)). }
false;public;0;17;;public void testBootstrapCheckOfMissingFile() {     final String fileName = randomAlphaOfLength(10).     Path file = createTempDir().resolve(fileName).     Settings ldapSettings = Settings.builder().put(settings).put(ROLE_MAPPING_FILE_SETTING, file.toAbsolutePath()).build().     RealmConfig config = getRealmConfig(ldapSettings).     final BootstrapCheck check = RoleMappingFileBootstrapCheck.create(config).     assertThat(check, notNullValue()).     assertThat(check.alwaysEnforce(), equalTo(true)).     final BootstrapCheck.BootstrapCheckResult result = check.check(createTestContext(settings, null)).     assertTrue(result.isFailure()).     assertThat(result.getMessage(), containsString(REALM_ID.getName())).     assertThat(result.getMessage(), containsString(fileName)).     assertThat(result.getMessage(), containsString("does not exist")). }
false;public;0;19;;public void testBootstrapCheckWithInvalidYaml() throws IOException {     Path file = createTempFile("", ".yml").     // writing in utf_16 should cause a parsing error as we try to read the file in utf_8     Files.write(file, Collections.singletonList("junk"), StandardCharsets.UTF_16).     Settings ldapSettings = Settings.builder().put(settings).put(ROLE_MAPPING_FILE_SETTING, file.toAbsolutePath()).build().     RealmConfig config = getRealmConfig(ldapSettings).     final BootstrapCheck check = RoleMappingFileBootstrapCheck.create(config).     assertThat(check, notNullValue()).     assertThat(check.alwaysEnforce(), equalTo(true)).     final BootstrapCheck.BootstrapCheckResult result = check.check(createTestContext(settings, null)).     assertTrue(result.isFailure()).     assertThat(result.getMessage(), containsString(REALM_ID.getName())).     assertThat(result.getMessage(), containsString(file.toString())).     assertThat(result.getMessage(), containsString("could not read")). }
false;public;0;20;;public void testBootstrapCheckWithInvalidDn() throws IOException {     Path file = createTempFile("", ".yml").     // A DN must have at least 1 '=' symbol     Files.write(file, Collections.singletonList("role: not-a-dn")).     Settings ldapSettings = Settings.builder().put(settings).put(ROLE_MAPPING_FILE_SETTING, file.toAbsolutePath()).build().     RealmConfig config = getRealmConfig(ldapSettings).     final BootstrapCheck check = RoleMappingFileBootstrapCheck.create(config).     assertThat(check, notNullValue()).     assertThat(check.alwaysEnforce(), equalTo(true)).     final BootstrapCheck.BootstrapCheckResult result = check.check(createTestContext(settings, null)).     assertTrue(result.isFailure()).     assertThat(result.getMessage(), containsString(REALM_ID.getName())).     assertThat(result.getMessage(), containsString(file.toString())).     assertThat(result.getMessage(), containsString("invalid DN")).     assertThat(result.getMessage(), containsString("not-a-dn")). }
