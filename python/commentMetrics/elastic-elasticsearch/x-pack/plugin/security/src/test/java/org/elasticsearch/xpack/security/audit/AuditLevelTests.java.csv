commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testAllIndexAuditLevel() {     EnumSet<AuditLevel> enumSet = AuditLevel.parse(Collections.singletonList("_all")).     AuditLevel[] levels = AuditLevel.values().     assertThat(enumSet.size(), is(levels.length)).     for (AuditLevel level : levels) {         assertThat(enumSet.contains(level), is(true)).     } }
false;public;0;4;;public void testExcludeHasPreference() {     EnumSet<AuditLevel> enumSet = AuditLevel.parse(Collections.singletonList("_all"), Collections.singletonList("_all")).     assertThat(enumSet.size(), is(0)). }
false;public;0;7;;public void testExcludeHasPreferenceSingle() {     String excluded = randomFrom(AuditLevel.values()).toString().toLowerCase(Locale.ROOT).     EnumSet<AuditLevel> enumSet = AuditLevel.parse(Collections.singletonList("_all"), Collections.singletonList(excluded)).     EnumSet<AuditLevel> expected = EnumSet.allOf(AuditLevel.class).     expected.remove(AuditLevel.valueOf(excluded.toUpperCase(Locale.ROOT))).     assertThat(enumSet, equalTo(expected)). }
