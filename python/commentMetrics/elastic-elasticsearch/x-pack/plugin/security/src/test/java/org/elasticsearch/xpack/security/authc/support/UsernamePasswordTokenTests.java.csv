commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void testPutToken() throws Exception {     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     UsernamePasswordToken.putTokenHeader(threadContext, new UsernamePasswordToken("user1", new SecureString("test123"))).     String header = threadContext.getHeader(UsernamePasswordToken.BASIC_AUTH_HEADER).     assertThat(header, notNullValue()).     assertTrue(header.startsWith("Basic ")).     String token = header.substring("Basic ".length()).     token = new String(Base64.getDecoder().decode(token), StandardCharsets.UTF_8).     int i = token.indexOf(":").     assertTrue(i > 0).     String username = token.substring(0, i).     String password = token.substring(i + 1).     assertThat(username, equalTo("user1")).     assertThat(password, equalTo("test123")). }
false;public;0;10;;public void testExtractToken() throws Exception {     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     final String header = randomFrom("Basic ", "basic ", "BASIC ") + Base64.getEncoder().encodeToString("user1:test123".getBytes(StandardCharsets.UTF_8)).     threadContext.putHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, header).     UsernamePasswordToken token = UsernamePasswordToken.extractToken(threadContext).     assertThat(token, notNullValue()).     assertThat(token.principal(), equalTo("user1")).     assertThat(new String(token.credentials().getChars()), equalTo("test123")). }
false;public;0;14;;public void testExtractTokenInvalid() throws Exception {     final String[] invalidValues = { "Basic ", "Basic f", "basic " }.     for (String value : invalidValues) {         ThreadContext threadContext = new ThreadContext(Settings.EMPTY).         threadContext.putHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, value).         try {             UsernamePasswordToken.extractToken(threadContext).             fail("Expected an authentication exception for invalid basic auth token [" + value + "]").         } catch (ElasticsearchSecurityException e) {             // expected             assertAuthenticationException(e).         }     } }
false;public;0;7;;public void testHeaderNotMatchingReturnsNull() {     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     final String header = randomFrom("Basic", "BasicBroken", "invalid", "   basic   ").     threadContext.putHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, header).     UsernamePasswordToken extracted = UsernamePasswordToken.extractToken(threadContext).     assertThat(extracted, nullValue()). }
false;public;0;4;;public void testExtractTokenMissing() throws Exception {     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     assertThat(UsernamePasswordToken.extractToken(threadContext), nullValue()). }
false;public;0;5;;public void testEqualsWithDifferentPasswords() {     UsernamePasswordToken token1 = new UsernamePasswordToken("username", new SecureString("password".toCharArray())).     UsernamePasswordToken token2 = new UsernamePasswordToken("username", new SecureString("new password".toCharArray())).     assertThat(token1, not(equalTo(token2))). }
false;public;0;5;;public void testEqualsWithDifferentUsernames() {     UsernamePasswordToken token1 = new UsernamePasswordToken("username", new SecureString("password".toCharArray())).     UsernamePasswordToken token2 = new UsernamePasswordToken("username1", new SecureString("password".toCharArray())).     assertThat(token1, not(equalTo(token2))). }
false;public;0;5;;public void testEquals() {     UsernamePasswordToken token1 = new UsernamePasswordToken("username", new SecureString("password".toCharArray())).     UsernamePasswordToken token2 = new UsernamePasswordToken("username", new SecureString("password".toCharArray())).     assertThat(token1, equalTo(token2)). }
false;public,static;2;3;;public static String basicAuthHeaderValue(String username, String passwd) {     return UsernamePasswordToken.basicAuthHeaderValue(username, new SecureString(passwd.toCharArray())). }
