commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected String configUsers() {     final String usersPasswdHashed = new String(getFastStoredHashAlgoForTests().hash(USERS_PASSWD)).     StringBuilder builder = new StringBuilder(super.configUsers()).     for (int i = 1. i <= numberOfRoles. i++) {         builder.append("user").append(i).append(':').append(usersPasswdHashed).append('\n').     }     return builder.toString(). }
false;protected;0;16;;@Override protected String configUsersRoles() {     StringBuilder builder = new StringBuilder(super.configUsersRoles()).     builder.append("role0:").     for (int i = 1. i <= numberOfRoles. i++) {         builder.append("user").append(i).         if (i != numberOfRoles) {             builder.append(",").         }     }     builder.append("\n").     for (int i = 1. i <= numberOfRoles. i++) {         builder.append("role").append(i).append(":user").append(i).append('\n').     }     return builder.toString(). }
false;protected;0;21;;@Override protected String configRoles() {     StringBuilder builder = new StringBuilder(super.configRoles()).     builder.append("\nrole0:\n").     builder.append("  cluster: [ none ]\n").     builder.append("  indices:\n").     builder.append("    - names: '*'\n").     builder.append("      privileges: [ none ]\n").     for (int i = 1. i <= numberOfRoles. i++) {         builder.append("role").append(i).append(":\n").         builder.append("  cluster: [ all ]\n").         builder.append("  indices:\n").         builder.append("    - names: '*'\n").         builder.append("      privileges:\n").         builder.append("        - all\n").         builder.append("      query: \n").         builder.append("        term: \n").         builder.append("          field1: value").append(i).append('\n').     }     return builder.toString(). }
false;public;1;7;;@Override public Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(XPackSettings.DLS_FLS_ENABLED.getKey(), true).build(). }
false;public;0;27;;public void testDuelWithAliasFilters() throws Exception {     assertAcked(client().admin().indices().prepareCreate("test").addMapping("type1", "field1", "type=text", "field2", "type=text")).     List<IndexRequestBuilder> requests = new ArrayList<>(numberOfRoles).     IndicesAliasesRequestBuilder builder = client().admin().indices().prepareAliases().     for (int i = 1. i <= numberOfRoles. i++) {         String value = "value" + i.         requests.add(client().prepareIndex("test", "type1", value).setSource("field1", value)).         builder.addAlias("test", "alias" + i, QueryBuilders.termQuery("field1", value)).     }     indexRandom(true, requests).     builder.get().     for (int roleI = 1. roleI <= numberOfRoles. roleI++) {         SearchResponse searchResponse1 = client().filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue("user" + roleI, USERS_PASSWD))).prepareSearch("test").get().         SearchResponse searchResponse2 = client().prepareSearch("alias" + roleI).get().         assertThat(searchResponse1.getHits().getTotalHits().value, equalTo(searchResponse2.getHits().getTotalHits().value)).         for (int hitI = 0. hitI < searchResponse1.getHits().getHits().length. hitI++) {             assertThat(searchResponse1.getHits().getAt(hitI).getId(), equalTo(searchResponse2.getHits().getAt(hitI).getId())).         }     } }
