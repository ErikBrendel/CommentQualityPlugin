commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public void setUp() throws Exception {     super.setUp().     settings = Settings.builder().put("path.home", createTempDir().toString()).put("node.name", "test-" + getTestName()).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     threadPool = new ThreadPool(settings).     when(mockLicenseState.isSecurityAvailable()).thenReturn(true). }
false;public;0;5;;@Override public void tearDown() throws Exception {     super.tearDown().     terminate(threadPool). }
false;public;1;4;;@Override public void sendResponse(RestResponse restResponse) {     responseSetOnce.set(restResponse). }
false;public;3;12;;@Override public <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {     CreateApiKeyRequest createApiKeyRequest = (CreateApiKeyRequest) request.     @SuppressWarnings("unchecked")     RestToXContentListener<CreateApiKeyResponse> actionListener = (RestToXContentListener<CreateApiKeyResponse>) listener.     if (createApiKeyRequest.getName().equals("my-api-key")) {         actionListener.onResponse(expected).     } else {         listener.onFailure(new ElasticsearchSecurityException("encountered an error while creating API key")).     } }
false;public;0;43;;@SuppressWarnings({ "unchecked" }) public void testCreateApiKeyApi() throws Exception {     final String json = "{ \"name\" : \"my-api-key\", \"role_descriptors\": { \"role-a\": {\"cluster\":[\"a-1\", \"a-2\"]} } }".     final FakeRestRequest restRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY).withContent(new BytesArray(json), XContentType.JSON).withParams(Collections.singletonMap("refresh", randomFrom("false", "true", "wait_for"))).build().     final SetOnce<RestResponse> responseSetOnce = new SetOnce<>().     final RestChannel restChannel = new AbstractRestChannel(restRequest, randomBoolean()) {          @Override         public void sendResponse(RestResponse restResponse) {             responseSetOnce.set(restResponse).         }     }.     final CreateApiKeyResponse expected = new CreateApiKeyResponse("my-api-key", UUID.randomUUID().toString(), new SecureString(randomAlphaOfLength(5)), Instant.now().plus(Duration.ofHours(5))).     try (NodeClient client = new NodeClient(Settings.EMPTY, threadPool) {          @Override         public <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {             CreateApiKeyRequest createApiKeyRequest = (CreateApiKeyRequest) request.             @SuppressWarnings("unchecked")             RestToXContentListener<CreateApiKeyResponse> actionListener = (RestToXContentListener<CreateApiKeyResponse>) listener.             if (createApiKeyRequest.getName().equals("my-api-key")) {                 actionListener.onResponse(expected).             } else {                 listener.onFailure(new ElasticsearchSecurityException("encountered an error while creating API key")).             }         }     }) {         final RestCreateApiKeyAction restCreateApiKeyAction = new RestCreateApiKeyAction(Settings.EMPTY, mockRestController, mockLicenseState).         restCreateApiKeyAction.handleRequest(restRequest, restChannel, client).         final RestResponse restResponse = responseSetOnce.get().         assertNotNull(restResponse).         assertThat(CreateApiKeyResponse.fromXContent(createParser(XContentType.JSON.xContent(), restResponse.content())), equalTo(expected)).     } }
