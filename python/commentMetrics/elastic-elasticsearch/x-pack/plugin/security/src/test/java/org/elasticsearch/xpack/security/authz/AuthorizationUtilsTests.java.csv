commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setupContext() {     threadContext = new ThreadContext(Settings.EMPTY). }
false;public;0;3;;public void testSystemUserSwitchNonInternalAction() {     assertThat(AuthorizationUtils.shouldReplaceUserWithSystem(threadContext, randomFrom("indices:foo", "cluster:bar")), is(false)). }
false;public;0;5;;public void testSystemUserSwitchWithSystemUser() {     threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, new Authentication(SystemUser.INSTANCE, new RealmRef("test", "test", "foo"), null)).     assertThat(AuthorizationUtils.shouldReplaceUserWithSystem(threadContext, "internal:something"), is(false)). }
false;public;0;3;;public void testSystemUserSwitchWithNullUser() {     assertThat(AuthorizationUtils.shouldReplaceUserWithSystem(threadContext, "internal:something"), is(true)). }
false;public;0;7;;public void testSystemUserSwitchWithNonSystemUser() {     User user = new User(randomAlphaOfLength(6), new String[] {}).     Authentication authentication = new Authentication(user, new RealmRef("test", "test", "foo"), null).     threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication).     threadContext.putTransient(AuthorizationService.ORIGINATING_ACTION_KEY, randomFrom("indices:foo", "cluster:bar")).     assertThat(AuthorizationUtils.shouldReplaceUserWithSystem(threadContext, "internal:something"), is(true)). }
false;public;0;7;;public void testSystemUserSwitchWithNonSystemUserAndInternalAction() {     User user = new User(randomAlphaOfLength(6), new String[] {}).     Authentication authentication = new Authentication(user, new RealmRef("test", "test", "foo"), null).     threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication).     threadContext.putTransient(AuthorizationService.ORIGINATING_ACTION_KEY, randomFrom("internal:foo/bar")).     assertThat(AuthorizationUtils.shouldReplaceUserWithSystem(threadContext, "internal:something"), is(false)). }
false;public;0;21;;public void testShouldSetUser() {     assertFalse(AuthorizationUtils.shouldSetUserBasedOnActionOrigin(threadContext)).     // put origin in context     threadContext.putTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME, randomAlphaOfLength(4)).     assertTrue(AuthorizationUtils.shouldSetUserBasedOnActionOrigin(threadContext)).     // set authentication     User user = new User(randomAlphaOfLength(6), new String[] {}).     Authentication authentication = new Authentication(user, new RealmRef("test", "test", "foo"), null).     threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication).     assertFalse(AuthorizationUtils.shouldSetUserBasedOnActionOrigin(threadContext)).     threadContext = new ThreadContext(Settings.EMPTY).     threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication).     assertFalse(AuthorizationUtils.shouldSetUserBasedOnActionOrigin(threadContext)).     threadContext = new ThreadContext(Settings.EMPTY).     threadContext.putHeader(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME, randomAlphaOfLength(4)).     assertFalse(AuthorizationUtils.shouldSetUserBasedOnActionOrigin(threadContext)). }
false;public;0;3;;public void testSwitchAndExecuteXpackSecurityUser() throws Exception {     assertSwitchBasedOnOriginAndExecute(ClientHelper.SECURITY_ORIGIN, XPackSecurityUser.INSTANCE). }
false;public;0;5;;public void testSwitchAndExecuteXpackUser() throws Exception {     String origin = randomFrom(ClientHelper.ML_ORIGIN, ClientHelper.WATCHER_ORIGIN, ClientHelper.DEPRECATION_ORIGIN, ClientHelper.MONITORING_ORIGIN, ClientHelper.PERSISTENT_TASK_ORIGIN, ClientHelper.INDEX_LIFECYCLE_ORIGIN).     assertSwitchBasedOnOriginAndExecute(origin, XPackUser.INSTANCE). }
false;public;0;3;;public void testSwitchWithTaskOrigin() throws Exception {     assertSwitchBasedOnOriginAndExecute(TASKS_ORIGIN, XPackUser.INSTANCE). }
false;private;2;27;;private void assertSwitchBasedOnOriginAndExecute(String origin, User user) throws Exception {     SecurityContext securityContext = new SecurityContext(Settings.EMPTY, threadContext).     final String headerName = randomAlphaOfLengthBetween(4, 16).     final String headerValue = randomAlphaOfLengthBetween(4, 16).     final CountDownLatch latch = new CountDownLatch(2).     final ActionListener<Void> listener = ActionListener.wrap(v -> {         assertNull(threadContext.getTransient(ThreadContext.ACTION_ORIGIN_TRANSIENT_NAME)).         assertNull(threadContext.getHeader(headerName)).         assertEquals(user, securityContext.getAuthentication().getUser()).         latch.countDown().     }, e -> fail(e.getMessage())).     final Consumer<ThreadContext.StoredContext> consumer = original -> {         assertNull(threadContext.getTransient(ThreadContext.ACTION_ORIGIN_TRANSIENT_NAME)).         assertNull(threadContext.getHeader(headerName)).         assertEquals(user, securityContext.getAuthentication().getUser()).         latch.countDown().         listener.onResponse(null).     }.     threadContext.putHeader(headerName, headerValue).     try (ThreadContext.StoredContext ignored = threadContext.stashWithOrigin(origin)) {         AuthorizationUtils.switchUserBasedOnActionOriginAndExecute(threadContext, securityContext, consumer).         latch.await().     } }
