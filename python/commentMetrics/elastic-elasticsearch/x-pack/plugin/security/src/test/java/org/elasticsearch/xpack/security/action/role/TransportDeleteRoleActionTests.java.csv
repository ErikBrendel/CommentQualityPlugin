commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(DeleteRoleResponse deleteRoleResponse) {     responseRef.set(deleteRoleResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;30;;public void testReservedRole() {     final String roleName = randomFrom(new ArrayList<>(ReservedRolesStore.names())).     NativeRolesStore rolesStore = mock(NativeRolesStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, (x) -> null, null, Collections.emptySet()).     TransportDeleteRoleAction action = new TransportDeleteRoleAction(mock(ActionFilters.class), rolesStore, transportService).     DeleteRoleRequest request = new DeleteRoleRequest().     request.name(roleName).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<DeleteRoleResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<DeleteRoleResponse>() {          @Override         public void onResponse(DeleteRoleResponse deleteRoleResponse) {             responseRef.set(deleteRoleResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), is(instanceOf(IllegalArgumentException.class))).     assertThat(throwableRef.get().getMessage(), containsString("is reserved and cannot be deleted")).     verifyZeroInteractions(rolesStore). }
false;public;1;8;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     Object[] args = invocation.getArguments().     assert args.length == 2.     ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].     listener.onResponse(found).     return null. }
false;public;1;4;;@Override public void onResponse(DeleteRoleResponse deleteRoleResponse) {     responseRef.set(deleteRoleResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;42;;public void testValidRole() {     final String roleName = randomFrom("admin", "dept_a", "restricted").     NativeRolesStore rolesStore = mock(NativeRolesStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, (x) -> null, null, Collections.emptySet()).     TransportDeleteRoleAction action = new TransportDeleteRoleAction(mock(ActionFilters.class), rolesStore, transportService).     DeleteRoleRequest request = new DeleteRoleRequest().     request.name(roleName).     final boolean found = randomBoolean().     doAnswer(new Answer() {          @Override         public Void answer(InvocationOnMock invocation) throws Throwable {             Object[] args = invocation.getArguments().             assert args.length == 2.             ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].             listener.onResponse(found).             return null.         }     }).when(rolesStore).deleteRole(eq(request), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<DeleteRoleResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<DeleteRoleResponse>() {          @Override         public void onResponse(DeleteRoleResponse deleteRoleResponse) {             responseRef.set(deleteRoleResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(notNullValue())).     assertThat(responseRef.get().found(), is(found)).     assertThat(throwableRef.get(), is(nullValue())).     verify(rolesStore, times(1)).deleteRole(eq(request), any(ActionListener.class)). }
false;public;1;8;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     Object[] args = invocation.getArguments().     assert args.length == 2.     ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].     listener.onFailure(e).     return null. }
false;public;1;4;;@Override public void onResponse(DeleteRoleResponse deleteRoleResponse) {     responseRef.set(deleteRoleResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;41;;public void testException() {     final Exception e = randomFrom(new ElasticsearchSecurityException(""), new IllegalStateException()).     final String roleName = randomFrom("admin", "dept_a", "restricted").     NativeRolesStore rolesStore = mock(NativeRolesStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, (x) -> null, null, Collections.emptySet()).     TransportDeleteRoleAction action = new TransportDeleteRoleAction(mock(ActionFilters.class), rolesStore, transportService).     DeleteRoleRequest request = new DeleteRoleRequest().     request.name(roleName).     doAnswer(new Answer() {          @Override         public Void answer(InvocationOnMock invocation) throws Throwable {             Object[] args = invocation.getArguments().             assert args.length == 2.             ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].             listener.onFailure(e).             return null.         }     }).when(rolesStore).deleteRole(eq(request), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<DeleteRoleResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<DeleteRoleResponse>() {          @Override         public void onResponse(DeleteRoleResponse deleteRoleResponse) {             responseRef.set(deleteRoleResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), is(notNullValue())).     assertThat(throwableRef.get(), is(sameInstance(e))).     verify(rolesStore, times(1)).deleteRole(eq(request), any(ActionListener.class)). }
