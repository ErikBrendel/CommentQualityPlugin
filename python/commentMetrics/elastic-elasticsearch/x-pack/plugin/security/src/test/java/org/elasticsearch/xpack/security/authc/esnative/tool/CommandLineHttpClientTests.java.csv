commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     webServer = createMockWebServer().     webServer.enqueue(new MockResponse().setResponseCode(200).setBody("{\"test\": \"complete\"}")).     webServer.start(). }
false;public;0;4;;@After public void shutdown() {     webServer.close(). }
false;public;0;14;;public void testCommandLineHttpClientCanExecuteAndReturnCorrectResultUsingSSLSettings() throws Exception {     Path certPath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt").     Settings settings = Settings.builder().put("xpack.security.http.ssl.certificate_authorities", certPath.toString()).put("xpack.security.http.ssl.verification_mode", VerificationMode.CERTIFICATE).build().     CommandLineHttpClient client = new CommandLineHttpClient(settings, environment).     HttpResponse httpResponse = client.execute("GET", new URL("https://localhost:" + webServer.getPort() + "/test"), "u1", new SecureString(new char[] { 'p' }), () -> null, is -> responseBuilder(is)).     assertNotNull("Should have http response", httpResponse).     assertEquals("Http status code does not match", 200, httpResponse.getHttpStatus()).     assertEquals("Http response body does not match", "complete", httpResponse.getResponseBody().get("test")). }
false;private;0;13;;private MockWebServer createMockWebServer() {     Path certPath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt").     Path keyPath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem").     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("xpack.security.http.ssl.secure_key_passphrase", "testnode").     Settings settings = Settings.builder().put("xpack.security.http.ssl.key", keyPath.toString()).put("xpack.security.http.ssl.certificate", certPath.toString()).setSecureSettings(secureSettings).build().     TestsSSLService sslService = new TestsSSLService(settings, environment).     return new MockWebServer(sslService.sslContext("xpack.security.http.ssl."), false). }
false;private;1;8;;private HttpResponseBuilder responseBuilder(final InputStream is) throws IOException {     final HttpResponseBuilder httpResponseBuilder = new HttpResponseBuilder().     if (is != null) {         byte[] bytes = toByteArray(is).         httpResponseBuilder.withResponseBody(new String(bytes, StandardCharsets.UTF_8)).     }     return httpResponseBuilder. }
false;private;1;10;;private byte[] toByteArray(InputStream is) throws IOException {     ByteArrayOutputStream baos = new ByteArrayOutputStream().     byte[] internalBuffer = new byte[1024].     int read = is.read(internalBuffer).     while (read != -1) {         baos.write(internalBuffer, 0, read).         read = is.read(internalBuffer).     }     return baos.toByteArray(). }
