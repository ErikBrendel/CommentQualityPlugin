commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testSamlAvailableOnTrialAndPlatinum() {     final SamlBaseRestHandler handler = buildHandler(randomFrom(License.OperationMode.TRIAL, License.OperationMode.PLATINUM)).     assertThat(handler.checkFeatureAvailable(new FakeRestRequest()), Matchers.nullValue()). }
false;public;0;7;;public void testSecurityNotAvailableOnBasic() {     final SamlBaseRestHandler handler = buildHandler(License.OperationMode.BASIC).     Exception e = handler.checkFeatureAvailable(new FakeRestRequest()).     assertThat(e, instanceOf(ElasticsearchException.class)).     ElasticsearchException elasticsearchException = (ElasticsearchException) e.     assertThat(elasticsearchException.getMetadata(LicenseUtils.EXPIRED_FEATURE_METADATA), contains("security")). }
false;public;0;7;;public void testSamlNotAvailableOnStandardOrGold() {     final SamlBaseRestHandler handler = buildHandler(randomFrom(License.OperationMode.STANDARD, License.OperationMode.GOLD)).     Exception e = handler.checkFeatureAvailable(new FakeRestRequest()).     assertThat(e, instanceOf(ElasticsearchException.class)).     ElasticsearchException elasticsearchException = (ElasticsearchException) e.     assertThat(elasticsearchException.getMetadata(LicenseUtils.EXPIRED_FEATURE_METADATA), contains("saml")). }
false;public;0;4;;@Override public String getName() {     return "saml_test". }
false;protected;2;4;;@Override protected RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) {     return null. }
false;private;1;20;;private SamlBaseRestHandler buildHandler(License.OperationMode licenseMode) {     final Settings settings = Settings.builder().put(XPackSettings.SECURITY_ENABLED.getKey(), true).build().     final TestUtils.UpdatableLicenseState licenseState = new TestUtils.UpdatableLicenseState(settings).     licenseState.update(licenseMode, true, null).     return new SamlBaseRestHandler(settings, licenseState) {          @Override         public String getName() {             return "saml_test".         }          @Override         protected RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) {             return null.         }     }. }
