commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;public void testBuildRequestWithMultipleElements() throws Exception {     final PutPrivilegesRequestBuilder builder = new PutPrivilegesRequestBuilder(null, PutPrivilegesAction.INSTANCE).     builder.source(new BytesArray("{ " + "\"foo\":{" + "  \"read\":{ \"application\":\"foo\", \"name\":\"read\", \"actions\":[ \"data:/read/*\", \"admin:/read/*\" ] }," + "  \"write\":{ \"application\":\"foo\", \"name\":\"write\", \"actions\":[ \"data:/write/*\", \"admin:*\" ] }," + "  \"all\":{ \"application\":\"foo\", \"name\":\"all\", \"actions\":[ \"*\" ] }" + " }, " + "\"bar\":{" + "  \"read\":{ \"application\":\"bar\", \"name\":\"read\", \"actions\":[ \"read/*\" ] }," + "  \"write\":{ \"application\":\"bar\", \"name\":\"write\", \"actions\":[ \"write/*\" ] }," + "  \"all\":{ \"application\":\"bar\", \"name\":\"all\", \"actions\":[ \"*\" ] }" + " } " + "}"), XContentType.JSON).     final List<ApplicationPrivilegeDescriptor> privileges = builder.request().getPrivileges().     assertThat(privileges, iterableWithSize(6)).     assertThat(privileges, contains(descriptor("foo", "read", "data:/read/*", "admin:/read/*"), descriptor("foo", "write", "data:/write/*", "admin:*"), descriptor("foo", "all", "*"), descriptor("bar", "read", "read/*"), descriptor("bar", "write", "write/*"), descriptor("bar", "all", "*"))). }
false;private;3;3;;private ApplicationPrivilegeDescriptor descriptor(String app, String name, String... actions) {     return new ApplicationPrivilegeDescriptor(app, name, Sets.newHashSet(actions), Collections.emptyMap()). }
false;public;0;11;;public void testPrivilegeNameValidationOfMultipleElement() throws Exception {     final PutPrivilegesRequestBuilder builder = new PutPrivilegesRequestBuilder(null, PutPrivilegesAction.INSTANCE).     final IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> builder.source(new BytesArray("{ \"foo\":{" + "\"write\":{ \"application\":\"foo\", \"name\":\"read\", \"actions\":[\"data:/read/*\",\"admin:/read/*\"] }," + "\"all\":{ \"application\":\"foo\", \"name\":\"all\", \"actions\":[ \"/*\" ] }" + "} }"), XContentType.JSON)).     assertThat(exception.getMessage(), containsString("write")).     assertThat(exception.getMessage(), containsString("read")). }
false;public;0;12;;public void testApplicationNameValidationOfMultipleElement() throws Exception {     final PutPrivilegesRequestBuilder builder = new PutPrivilegesRequestBuilder(null, PutPrivilegesAction.INSTANCE).     final IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> builder.source(new BytesArray("{ \"bar\":{" + "\"read\":{ \"application\":\"foo\", \"name\":\"read\", \"actions\":[ \"data:/read/*\", \"admin:/read/*\" ] }," + "\"write\":{ \"application\":\"foo\", \"name\":\"write\", \"actions\":[ \"data:/write/*\", \"admin:/*\" ] }," + "\"all\":{ \"application\":\"foo\", \"name\":\"all\", \"actions\":[ \"/*\" ] }" + "} }"), XContentType.JSON)).     assertThat(exception.getMessage(), containsString("bar")).     assertThat(exception.getMessage(), containsString("foo")). }
false;public;0;16;;public void testInferApplicationNameAndPrivilegeName() throws Exception {     final PutPrivilegesRequestBuilder builder = new PutPrivilegesRequestBuilder(null, PutPrivilegesAction.INSTANCE).     builder.source(new BytesArray("{ \"foo\":{" + "\"read\":{ \"actions\":[ \"data:/read/*\", \"admin:/read/*\" ] }," + "\"write\":{ \"actions\":[ \"data:/write/*\", \"admin:/*\" ] }," + "\"all\":{ \"actions\":[ \"*\" ] }" + "} }"), XContentType.JSON).     assertThat(builder.request().getPrivileges(), iterableWithSize(3)).     for (ApplicationPrivilegeDescriptor p : builder.request().getPrivileges()) {         assertThat(p.getApplication(), equalTo("foo")).         assertThat(p.getName(), notNullValue()).     }     assertThat(builder.request().getPrivileges().get(0).getName(), equalTo("read")).     assertThat(builder.request().getPrivileges().get(1).getName(), equalTo("write")).     assertThat(builder.request().getPrivileges().get(2).getName(), equalTo("all")). }
