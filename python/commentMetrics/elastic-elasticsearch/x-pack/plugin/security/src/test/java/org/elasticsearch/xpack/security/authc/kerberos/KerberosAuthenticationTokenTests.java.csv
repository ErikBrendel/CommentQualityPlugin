commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void testExtractTokenForValidAuthorizationHeader() throws IOException {     final String base64Token = Base64.getEncoder().encodeToString(randomAlphaOfLength(5).getBytes(StandardCharsets.UTF_8)).     final String negotiate = randomBoolean() ? KerberosAuthenticationToken.NEGOTIATE_AUTH_HEADER_PREFIX : "negotiate ".     final String authzHeader = negotiate + base64Token.     final KerberosAuthenticationToken kerbAuthnToken = KerberosAuthenticationToken.extractToken(authzHeader).     assertNotNull(kerbAuthnToken).     assertEquals(UNAUTHENTICATED_PRINCIPAL_NAME, kerbAuthnToken.principal()).     assertThat(kerbAuthnToken.credentials(), instanceOf((byte[].class))).     assertArrayEquals(Base64.getDecoder().decode(base64Token), (byte[]) kerbAuthnToken.credentials()). }
false;public;0;4;;public void testExtractTokenForInvalidNegotiateAuthorizationHeaderShouldReturnNull() throws IOException {     final String header = randomFrom("negotiate", "Negotiate", " Negotiate", "NegotiateToken", "Basic ", " Custom ", null).     assertNull(KerberosAuthenticationToken.extractToken(header)). }
false;public;0;8;;public void testExtractTokenForNegotiateAuthorizationHeaderWithNoTokenShouldThrowException() throws IOException {     final String header = randomFrom(KerberosAuthenticationToken.NEGOTIATE_AUTH_HEADER_PREFIX, "negotiate ", "Negotiate      ").     final ElasticsearchSecurityException e = expectThrows(ElasticsearchSecurityException.class, () -> KerberosAuthenticationToken.extractToken(header)).     assertThat(e.getMessage(), equalTo("invalid negotiate authentication header value, expected base64 encoded token but value is empty")).     assertContainsAuthenticateHeader(e). }
false;public;0;9;;public void testExtractTokenForNotBase64EncodedTokenThrowsException() throws IOException {     final String notBase64Token = "[B@6499375d".     final ElasticsearchSecurityException e = expectThrows(ElasticsearchSecurityException.class, () -> KerberosAuthenticationToken.extractToken(KerberosAuthenticationToken.NEGOTIATE_AUTH_HEADER_PREFIX + notBase64Token)).     assertThat(e.getMessage(), equalTo("invalid negotiate authentication header value, could not decode base64 token " + notBase64Token)).     assertContainsAuthenticateHeader(e). }
false;public;0;9;;public void testKerberoAuthenticationTokenClearCredentials() {     byte[] inputBytes = randomByteArrayOfLength(5).     final String base64Token = Base64.getEncoder().encodeToString(inputBytes).     final KerberosAuthenticationToken kerbAuthnToken = KerberosAuthenticationToken.extractToken(KerberosAuthenticationToken.NEGOTIATE_AUTH_HEADER_PREFIX + base64Token).     kerbAuthnToken.clearCredentials().     Arrays.fill(inputBytes, (byte) 0).     assertArrayEquals(inputBytes, (byte[]) kerbAuthnToken.credentials()). }
false;public;0;14;;public void testEqualsHashCode() {     final KerberosAuthenticationToken kerberosAuthenticationToken = new KerberosAuthenticationToken("base64EncodedToken".getBytes(StandardCharsets.UTF_8)).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(kerberosAuthenticationToken, (original) -> {         return new KerberosAuthenticationToken((byte[]) original.credentials()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(kerberosAuthenticationToken, (original) -> {         byte[] originalCreds = (byte[]) original.credentials().         return new KerberosAuthenticationToken(Arrays.copyOf(originalCreds, originalCreds.length)).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(kerberosAuthenticationToken, (original) -> {         return new KerberosAuthenticationToken((byte[]) original.credentials()).     }, KerberosAuthenticationTokenTests::mutateTestItem). }
false;private,static;1;12;;private static KerberosAuthenticationToken mutateTestItem(KerberosAuthenticationToken original) {     switch(randomIntBetween(0, 2)) {         case 0:             return new KerberosAuthenticationToken(randomByteArrayOfLength(10)).         case 1:             return new KerberosAuthenticationToken("base64EncodedToken".getBytes(StandardCharsets.UTF_16)).         case 2:             return new KerberosAuthenticationToken("[B@6499375d".getBytes(StandardCharsets.UTF_8)).         default:             throw new IllegalArgumentException("unknown option").     } }
false;private,static;1;6;;private static void assertContainsAuthenticateHeader(ElasticsearchSecurityException e) {     assertThat(e.status(), is(RestStatus.UNAUTHORIZED)).     assertThat(e.getHeaderKeys(), hasSize(1)).     assertThat(e.getHeader(KerberosAuthenticationToken.WWW_AUTHENTICATE), notNullValue()).     assertThat(e.getHeader(KerberosAuthenticationToken.WWW_AUTHENTICATE), contains(KerberosAuthenticationToken.NEGOTIATE_SCHEME_NAME)). }
