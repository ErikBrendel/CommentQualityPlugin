# id;timestamp;commentText;codeText;commentWords;codeWords
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1524684173;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1526449283;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1527207653;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1532353780;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1532456624;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1533295538;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1535046779;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1535552903;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1536218260;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1539615817;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1540313026;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1540486836;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<TransportRequest, String>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<TransportRequest, String>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index [[remote:foo]]", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,transport,request,string,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,transport,request,string,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,remote,foo,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1541092382;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<TransportRequest, String>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<TransportRequest, String>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index [[remote:foo]]", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,transport,request,string,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,transport,request,string,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,remote,foo,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1542240273;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<TransportRequest, String>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<TransportRequest, String>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index [[remote:foo]]", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,transport,request,string,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,transport,request,string,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,remote,foo,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1548019180;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<TransportRequest, String>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<TransportRequest, String>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index [[remote:foo]]", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,transport,request,string,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,transport,request,string,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,remote,foo,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1549336917;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<TransportRequest, String>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<TransportRequest, String>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index [[remote:foo]]", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,transport,request,string,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,transport,request,string,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,remote,foo,e,get,message
IndicesAndAliasesResolverTests -> public void testNonRemotableRequestDoesNotAllowRemoteIndices();1549399169;Tests that request types that do not support remote indices will be resolved as if all index names are local.;public void testNonRemotableRequestDoesNotAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new CloseIndexRequest("remote:foo").indicesOptions(options), CloseIndexAction.NAME),_                new Tuple<TransportRequest, String>(new DeleteIndexRequest("remote:foo").indicesOptions(options), DeleteIndexAction.NAME),_                new Tuple<TransportRequest, String>(new PutMappingRequest("remote:foo").indicesOptions(options), PutMappingAction.NAME)_        )__        IndexNotFoundException e = expectThrows(IndexNotFoundException.class,_                () -> resolveIndices(tuple.v1(), buildAuthorizedIndices(user, tuple.v2())).getLocal())__        assertEquals("no such index [[remote:foo]]", e.getMessage())__    };tests,that,request,types,that,do,not,support,remote,indices,will,be,resolved,as,if,all,index,names,are,local;public,void,test,non,remotable,request,does,not,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,close,index,request,remote,foo,indices,options,options,close,index,action,name,new,tuple,transport,request,string,new,delete,index,request,remote,foo,indices,options,options,delete,index,action,name,new,tuple,transport,request,string,new,put,mapping,request,remote,foo,indices,options,options,put,mapping,action,name,index,not,found,exception,e,expect,throws,index,not,found,exception,class,resolve,indices,tuple,v1,build,authorized,indices,user,tuple,v2,get,local,assert,equals,no,such,index,remote,foo,e,get,message
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1524684173;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options), FieldCapabilitiesAction.NAME),_                new Tuple<>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options), GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1526449283;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options), FieldCapabilitiesAction.NAME),_                new Tuple<>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options), GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1527207653;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options), FieldCapabilitiesAction.NAME),_                new Tuple<>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options), GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1532353780;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options), FieldCapabilitiesAction.NAME),_                new Tuple<>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options), GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1532456624;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options), FieldCapabilitiesAction.NAME),_                new Tuple<>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options), GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1533295538;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options), FieldCapabilitiesAction.NAME),_                new Tuple<>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options), GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1535046779;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options), FieldCapabilitiesAction.NAME),_                new Tuple<>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options), GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1535552903;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options), FieldCapabilitiesAction.NAME),_                new Tuple<>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options), GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1536218260;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options), FieldCapabilitiesAction.NAME),_                new Tuple<>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options), GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1539615817;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options), FieldCapabilitiesAction.NAME),_                new Tuple<>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options), GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1540313026;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options), FieldCapabilitiesAction.NAME),_                new Tuple<>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options), GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1540486836;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<TransportRequest, String>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options),_                        FieldCapabilitiesAction.NAME),_                new Tuple<TransportRequest, String>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options),_                        GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,transport,request,string,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,transport,request,string,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1541092382;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<TransportRequest, String>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options),_                        FieldCapabilitiesAction.NAME),_                new Tuple<TransportRequest, String>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options),_                        GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,transport,request,string,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,transport,request,string,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1542240273;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<TransportRequest, String>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options),_                        FieldCapabilitiesAction.NAME),_                new Tuple<TransportRequest, String>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options),_                        GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,transport,request,string,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,transport,request,string,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1548019180;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<TransportRequest, String>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options),_                        FieldCapabilitiesAction.NAME),_                new Tuple<TransportRequest, String>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options),_                        GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,transport,request,string,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,transport,request,string,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1549336917;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<TransportRequest, String>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options),_                        FieldCapabilitiesAction.NAME),_                new Tuple<TransportRequest, String>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options),_                        GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,transport,request,string,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,transport,request,string,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
IndicesAndAliasesResolverTests -> public void testRemotableRequestsAllowRemoteIndices();1549399169;Tests that all the request types that are known to support remote indices successfully pass them through_the resolver;public void testRemotableRequestsAllowRemoteIndices() {_        IndicesOptions options = IndicesOptions.fromOptions(true, false, false, false)__        Tuple<TransportRequest, String> tuple = randomFrom(_                new Tuple<TransportRequest, String>(new SearchRequest("remote:foo").indicesOptions(options), SearchAction.NAME),_                new Tuple<TransportRequest, String>(new FieldCapabilitiesRequest().indices("remote:foo").indicesOptions(options),_                        FieldCapabilitiesAction.NAME),_                new Tuple<TransportRequest, String>(new GraphExploreRequest().indices("remote:foo").indicesOptions(options),_                        GraphExploreAction.NAME)_        )__        final TransportRequest request = tuple.v1()__        ResolvedIndices resolved = resolveIndices(request, buildAuthorizedIndices(user, tuple.v2()))__        assertThat(resolved.getRemote(), containsInAnyOrder("remote:foo"))__        assertThat(resolved.getLocal(), emptyIterable())__        assertThat(((IndicesRequest) request).indices(), arrayContaining("remote:foo"))__    };tests,that,all,the,request,types,that,are,known,to,support,remote,indices,successfully,pass,them,through,the,resolver;public,void,test,remotable,requests,allow,remote,indices,indices,options,options,indices,options,from,options,true,false,false,false,tuple,transport,request,string,tuple,random,from,new,tuple,transport,request,string,new,search,request,remote,foo,indices,options,options,search,action,name,new,tuple,transport,request,string,new,field,capabilities,request,indices,remote,foo,indices,options,options,field,capabilities,action,name,new,tuple,transport,request,string,new,graph,explore,request,indices,remote,foo,indices,options,options,graph,explore,action,name,final,transport,request,request,tuple,v1,resolved,indices,resolved,resolve,indices,request,build,authorized,indices,user,tuple,v2,assert,that,resolved,get,remote,contains,in,any,order,remote,foo,assert,that,resolved,get,local,empty,iterable,assert,that,indices,request,request,indices,array,containing,remote,foo
