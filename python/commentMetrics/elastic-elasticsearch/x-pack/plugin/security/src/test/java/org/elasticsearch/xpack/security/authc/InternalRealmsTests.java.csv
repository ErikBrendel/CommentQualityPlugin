commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;public void testNativeRealmRegistersIndexHealthChangeListener() throws Exception {     SecurityIndexManager securityIndex = mock(SecurityIndexManager.class).     Map<String, Realm.Factory> factories = InternalRealms.getFactories(mock(ThreadPool.class), mock(ResourceWatcherService.class), mock(SSLService.class), mock(NativeUsersStore.class), mock(NativeRoleMappingStore.class), securityIndex).     assertThat(factories, hasEntry(is(NativeRealmSettings.TYPE), any(Realm.Factory.class))).     verifyZeroInteractions(securityIndex).     Settings settings = Settings.builder().put("path.home", createTempDir()).build().     final RealmConfig.RealmIdentifier realmId = new RealmConfig.RealmIdentifier(NativeRealmSettings.TYPE, "test").     final Environment env = TestEnvironment.newEnvironment(settings).     final ThreadContext threadContext = new ThreadContext(settings).     factories.get(NativeRealmSettings.TYPE).create(new RealmConfig(realmId, settings, env, threadContext)).     verify(securityIndex).addIndexStateListener(isA(BiConsumer.class)).     factories.get(NativeRealmSettings.TYPE).create(new RealmConfig(realmId, settings, env, threadContext)).     verify(securityIndex, times(2)).addIndexStateListener(isA(BiConsumer.class)). }
false;public;0;7;;public void testIsStandardType() {     String type = randomFrom(NativeRealmSettings.TYPE, FileRealmSettings.TYPE, LdapRealmSettings.AD_TYPE, LdapRealmSettings.LDAP_TYPE, PkiRealmSettings.TYPE).     assertThat(InternalRealms.isStandardRealm(type), is(true)).     type = randomFrom(SamlRealmSettings.TYPE, KerberosRealmSettings.TYPE).     assertThat(InternalRealms.isStandardRealm(type), is(false)). }
