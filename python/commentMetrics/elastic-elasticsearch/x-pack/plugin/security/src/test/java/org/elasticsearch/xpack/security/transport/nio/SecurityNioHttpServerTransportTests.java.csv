commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before public void createSSLService() {     Path testNodeKey = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem").     Path testNodeCert = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt").     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("xpack.security.http.ssl.secure_key_passphrase", "testnode").     Settings settings = Settings.builder().put("xpack.security.http.ssl.key", testNodeKey).put("xpack.security.http.ssl.certificate", testNodeCert).put("path.home", createTempDir()).setSecureSettings(secureSettings).build().     env = TestEnvironment.newEnvironment(settings).     sslService = new SSLService(settings, env). }
false;public;0;18;;public void testDefaultClientAuth() throws IOException {     Settings settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).build().     nioGroupFactory = new NioGroupFactory(settings, logger).     sslService = new SSLService(settings, env).     SecurityNioHttpServerTransport transport = new SecurityNioHttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(PageCacheRecycler.class), mock(ThreadPool.class), xContentRegistry(), new NullDispatcher(), mock(IPFilter.class), sslService, nioGroupFactory).     SecurityNioHttpServerTransport.SecurityHttpChannelFactory factory = transport.channelFactory().     SocketChannel socketChannel = mock(SocketChannel.class).     when(socketChannel.getRemoteAddress()).thenReturn(address).     NioHttpChannel channel = factory.createChannel(mock(NioSelector.class), socketChannel).     SSLEngine engine = SSLEngineUtils.getSSLEngine(channel).     assertThat(engine.getNeedClientAuth(), is(false)).     assertThat(engine.getWantClientAuth(), is(false)). }
false;public;0;20;;public void testOptionalClientAuth() throws IOException {     String value = randomFrom(SSLClientAuth.OPTIONAL.name(), SSLClientAuth.OPTIONAL.name().toLowerCase(Locale.ROOT)).     Settings settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).put("xpack.security.http.ssl.client_authentication", value).build().     sslService = new SSLService(settings, env).     nioGroupFactory = new NioGroupFactory(settings, logger).     SecurityNioHttpServerTransport transport = new SecurityNioHttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(PageCacheRecycler.class), mock(ThreadPool.class), xContentRegistry(), new NullDispatcher(), mock(IPFilter.class), sslService, nioGroupFactory).     SecurityNioHttpServerTransport.SecurityHttpChannelFactory factory = transport.channelFactory().     SocketChannel socketChannel = mock(SocketChannel.class).     when(socketChannel.getRemoteAddress()).thenReturn(address).     NioHttpChannel channel = factory.createChannel(mock(NioSelector.class), socketChannel).     SSLEngine engine = SSLEngineUtils.getSSLEngine(channel).     assertThat(engine.getNeedClientAuth(), is(false)).     assertThat(engine.getWantClientAuth(), is(true)). }
false;public;0;20;;public void testRequiredClientAuth() throws IOException {     String value = randomFrom(SSLClientAuth.REQUIRED.name(), SSLClientAuth.REQUIRED.name().toLowerCase(Locale.ROOT)).     Settings settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).put("xpack.security.http.ssl.client_authentication", value).build().     nioGroupFactory = new NioGroupFactory(settings, logger).     sslService = new SSLService(settings, env).     SecurityNioHttpServerTransport transport = new SecurityNioHttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(PageCacheRecycler.class), mock(ThreadPool.class), xContentRegistry(), new NullDispatcher(), mock(IPFilter.class), sslService, nioGroupFactory).     SecurityNioHttpServerTransport.SecurityHttpChannelFactory factory = transport.channelFactory().     SocketChannel socketChannel = mock(SocketChannel.class).     when(socketChannel.getRemoteAddress()).thenReturn(address).     NioHttpChannel channel = factory.createChannel(mock(NioSelector.class), socketChannel).     SSLEngine engine = SSLEngineUtils.getSSLEngine(channel).     assertThat(engine.getNeedClientAuth(), is(true)).     assertThat(engine.getWantClientAuth(), is(false)). }
false;public;0;20;;public void testNoClientAuth() throws IOException {     String value = randomFrom(SSLClientAuth.NONE.name(), SSLClientAuth.NONE.name().toLowerCase(Locale.ROOT)).     Settings settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).put("xpack.security.http.ssl.client_authentication", value).build().     sslService = new SSLService(settings, env).     nioGroupFactory = new NioGroupFactory(settings, logger).     SecurityNioHttpServerTransport transport = new SecurityNioHttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(PageCacheRecycler.class), mock(ThreadPool.class), xContentRegistry(), new NullDispatcher(), mock(IPFilter.class), sslService, nioGroupFactory).     SecurityNioHttpServerTransport.SecurityHttpChannelFactory factory = transport.channelFactory().     SocketChannel socketChannel = mock(SocketChannel.class).     when(socketChannel.getRemoteAddress()).thenReturn(address).     NioHttpChannel channel = factory.createChannel(mock(NioSelector.class), socketChannel).     SSLEngine engine = SSLEngineUtils.getSSLEngine(channel).     assertThat(engine.getNeedClientAuth(), is(false)).     assertThat(engine.getWantClientAuth(), is(false)). }
false;public;0;31;;public void testCustomSSLConfiguration() throws IOException {     Settings settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).build().     sslService = new SSLService(settings, env).     nioGroupFactory = new NioGroupFactory(settings, logger).     SecurityNioHttpServerTransport transport = new SecurityNioHttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(PageCacheRecycler.class), mock(ThreadPool.class), xContentRegistry(), new NullDispatcher(), mock(IPFilter.class), sslService, nioGroupFactory).     SecurityNioHttpServerTransport.SecurityHttpChannelFactory factory = transport.channelFactory().     SocketChannel socketChannel = mock(SocketChannel.class).     when(socketChannel.getRemoteAddress()).thenReturn(address).     NioHttpChannel channel = factory.createChannel(mock(NioSelector.class), socketChannel).     SSLEngine defaultEngine = SSLEngineUtils.getSSLEngine(channel).     settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).put("xpack.security.http.ssl.supported_protocols", "TLSv1.2").build().     sslService = new SSLService(settings, TestEnvironment.newEnvironment(settings)).     nioGroupFactory = new NioGroupFactory(settings, logger).     transport = new SecurityNioHttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(PageCacheRecycler.class), mock(ThreadPool.class), xContentRegistry(), new NullDispatcher(), mock(IPFilter.class), sslService, nioGroupFactory).     factory = transport.channelFactory().     channel = factory.createChannel(mock(NioSelector.class), socketChannel).     SSLEngine customEngine = SSLEngineUtils.getSSLEngine(channel).     assertThat(customEngine.getEnabledProtocols(), arrayContaining("TLSv1.2")).     assertThat(customEngine.getEnabledProtocols(), not(equalTo(defaultEngine.getEnabledProtocols()))). }
false;public;0;20;;public void testThatExceptionIsThrownWhenConfiguredWithoutSslKey() {     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("xpack.security.http.ssl.truststore.secure_password", "testnode").     Settings settings = Settings.builder().put("xpack.security.http.ssl.truststore.path", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.jks")).setSecureSettings(secureSettings).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).put("path.home", createTempDir()).build().     env = TestEnvironment.newEnvironment(settings).     sslService = new SSLService(settings, env).     nioGroupFactory = new NioGroupFactory(settings, logger).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new SecurityNioHttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(PageCacheRecycler.class), mock(ThreadPool.class), xContentRegistry(), new NullDispatcher(), mock(IPFilter.class), sslService, nioGroupFactory)).     assertThat(e.getMessage(), containsString("key must be provided")). }
false;public;0;16;;public void testNoExceptionWhenConfiguredWithoutSslKeySSLDisabled() {     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("xpack.security.http.ssl.truststore.secure_password", "testnode").     Settings settings = Settings.builder().put("xpack.security.http.ssl.truststore.path", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.jks")).setSecureSettings(secureSettings).put("path.home", createTempDir()).build().     env = TestEnvironment.newEnvironment(settings).     sslService = new SSLService(settings, env).     nioGroupFactory = new NioGroupFactory(settings, logger).     SecurityNioHttpServerTransport transport = new SecurityNioHttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(PageCacheRecycler.class), mock(ThreadPool.class), xContentRegistry(), new NullDispatcher(), mock(IPFilter.class), sslService, nioGroupFactory). }
