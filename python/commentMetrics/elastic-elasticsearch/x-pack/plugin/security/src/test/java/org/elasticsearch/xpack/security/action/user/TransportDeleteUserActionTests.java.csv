commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(DeleteUserResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;28;;public void testAnonymousUser() {     Settings settings = Settings.builder().put(AnonymousUser.ROLES_SETTING.getKey(), "superuser").build().     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportDeleteUserAction action = new TransportDeleteUserAction(settings, mock(ActionFilters.class), usersStore, transportService).     DeleteUserRequest request = new DeleteUserRequest(new AnonymousUser(settings).principal()).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<DeleteUserResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<DeleteUserResponse>() {          @Override         public void onResponse(DeleteUserResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is anonymous and cannot be deleted")).     verifyZeroInteractions(usersStore). }
false;public;1;4;;@Override public void onResponse(DeleteUserResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;28;;public void testInternalUser() {     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportDeleteUserAction action = new TransportDeleteUserAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService).     DeleteUserRequest request = new DeleteUserRequest(randomFrom(SystemUser.INSTANCE.principal(), XPackUser.INSTANCE.principal())).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<DeleteUserResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<DeleteUserResponse>() {          @Override         public void onResponse(DeleteUserResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is internal")).     verifyZeroInteractions(usersStore). }
false;public;1;4;;@Override public void onResponse(DeleteUserResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;29;;public void testReservedUser() {     final User reserved = randomFrom(new ElasticUser(true), new KibanaUser(true)).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportDeleteUserAction action = new TransportDeleteUserAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService).     DeleteUserRequest request = new DeleteUserRequest(reserved.principal()).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<DeleteUserResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<DeleteUserResponse>() {          @Override         public void onResponse(DeleteUserResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is reserved and cannot be deleted")).     verifyZeroInteractions(usersStore). }
false;public;1;7;;public Void answer(InvocationOnMock invocation) {     Object[] args = invocation.getArguments().     assert args.length == 2.     ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].     listener.onResponse(found).     return null. }
false;public;1;4;;@Override public void onResponse(DeleteUserResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;39;;public void testValidUser() {     final User user = new User("joe").     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportDeleteUserAction action = new TransportDeleteUserAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService).     final boolean found = randomBoolean().     final DeleteUserRequest request = new DeleteUserRequest(user.principal()).     doAnswer(new Answer() {          public Void answer(InvocationOnMock invocation) {             Object[] args = invocation.getArguments().             assert args.length == 2.             ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].             listener.onResponse(found).             return null.         }     }).when(usersStore).deleteUser(eq(request), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<DeleteUserResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<DeleteUserResponse>() {          @Override         public void onResponse(DeleteUserResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(notNullValue())).     assertThat(responseRef.get().found(), is(found)).     assertThat(throwableRef.get(), is(nullValue())).     verify(usersStore, times(1)).deleteUser(eq(request), any(ActionListener.class)). }
false;public;1;7;;public Void answer(InvocationOnMock invocation) {     Object[] args = invocation.getArguments().     assert args.length == 2.     ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].     listener.onFailure(e).     return null. }
false;public;1;4;;@Override public void onResponse(DeleteUserResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;39;;public void testException() {     final Exception e = randomFrom(new ElasticsearchSecurityException(""), new IllegalStateException(), new RuntimeException()).     final User user = new User("joe").     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportDeleteUserAction action = new TransportDeleteUserAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService).     final DeleteUserRequest request = new DeleteUserRequest(user.principal()).     doAnswer(new Answer() {          public Void answer(InvocationOnMock invocation) {             Object[] args = invocation.getArguments().             assert args.length == 2.             ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].             listener.onFailure(e).             return null.         }     }).when(usersStore).deleteUser(eq(request), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<DeleteUserResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<DeleteUserResponse>() {          @Override         public void onResponse(DeleteUserResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), is(notNullValue())).     assertThat(throwableRef.get(), sameInstance(e)).     verify(usersStore, times(1)).deleteUser(eq(request), any(ActionListener.class)). }
