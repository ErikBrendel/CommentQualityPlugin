commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testFilteringItemsInSubLevels() throws IOException {     BytesReference content = new BytesArray("{\"root\": {\"second\": {\"third\": \"password\", \"foo\": \"bar\"}}}").     RestRequestFilter filter = () -> Collections.singleton("root.second.third").     FakeRestRequest restRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY).withContent(content, XContentType.JSON).build().     RestRequest filtered = filter.getFilteredRequest(restRequest).     assertNotEquals(content, filtered.content()).     Map<String, Object> map = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, filtered.content().streamInput()).map().     Map<String, Object> root = (Map<String, Object>) map.get("root").     assertNotNull(root).     Map<String, Object> second = (Map<String, Object>) root.get("second").     assertNotNull(second).     assertEquals("bar", second.get("foo")).     assertNull(second.get("third")). }
false;public;0;18;;public void testFilteringItemsInSubLevelsWithWildCard() throws IOException {     BytesReference content = new BytesArray("{\"root\": {\"second\": {\"third\": \"password\", \"foo\": \"bar\"}}}").     RestRequestFilter filter = () -> Collections.singleton("root.*.third").     FakeRestRequest restRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY).withContent(content, XContentType.JSON).build().     RestRequest filtered = filter.getFilteredRequest(restRequest).     assertNotEquals(content, filtered.content()).     Map<String, Object> map = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, filtered.content().streamInput()).map().     Map<String, Object> root = (Map<String, Object>) map.get("root").     assertNotNull(root).     Map<String, Object> second = (Map<String, Object>) root.get("second").     assertNotNull(second).     assertEquals("bar", second.get("foo")).     assertNull(second.get("third")). }
false;public;0;18;;public void testFilteringItemsInSubLevelsWithLeadingWildCard() throws IOException {     BytesReference content = new BytesArray("{\"root\": {\"second\": {\"third\": \"password\", \"foo\": \"bar\"}}}").     RestRequestFilter filter = () -> Collections.singleton("*.third").     FakeRestRequest restRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY).withContent(content, XContentType.JSON).build().     RestRequest filtered = filter.getFilteredRequest(restRequest).     assertNotEquals(content, filtered.content()).     Map<String, Object> map = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, filtered.content().streamInput()).map().     Map<String, Object> root = (Map<String, Object>) map.get("root").     assertNotNull(root).     Map<String, Object> second = (Map<String, Object>) root.get("second").     assertNotNull(second).     assertEquals("bar", second.get("foo")).     assertNull(second.get("third")). }
false;public;0;10;;public void testRemoteAddressWorks() throws IOException {     BytesReference content = new BytesArray("{\"root\": {\"second\": {\"third\": \"password\", \"foo\": \"bar\"}}}").     RestRequestFilter filter = () -> Collections.singleton("*.third").     InetSocketAddress address = new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 32768).     FakeRestRequest restRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY).withContent(content, XContentType.JSON).withRemoteAddress(address).build().     RestRequest filtered = filter.getFilteredRequest(restRequest).     assertEquals(address, filtered.getHttpChannel().getRemoteAddress()). }
