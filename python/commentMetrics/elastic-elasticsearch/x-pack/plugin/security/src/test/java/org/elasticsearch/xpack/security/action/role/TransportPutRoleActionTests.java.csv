commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(PutRoleResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;29;;public void testReservedRole() {     final String roleName = randomFrom(new ArrayList<>(ReservedRolesStore.names())).     NativeRolesStore rolesStore = mock(NativeRolesStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportPutRoleAction action = new TransportPutRoleAction(mock(ActionFilters.class), rolesStore, transportService).     PutRoleRequest request = new PutRoleRequest().     request.name(roleName).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<PutRoleResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<PutRoleResponse>() {          @Override         public void onResponse(PutRoleResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), is(instanceOf(IllegalArgumentException.class))).     assertThat(throwableRef.get().getMessage(), containsString("is reserved and cannot be modified")).     verifyZeroInteractions(rolesStore). }
false;public;1;8;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     Object[] args = invocation.getArguments().     assert args.length == 3.     ActionListener<Boolean> listener = (ActionListener<Boolean>) args[2].     listener.onResponse(created).     return null. }
false;public;1;4;;@Override public void onResponse(PutRoleResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;41;;public void testValidRole() {     final String roleName = randomFrom("admin", "dept_a", "restricted").     NativeRolesStore rolesStore = mock(NativeRolesStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportPutRoleAction action = new TransportPutRoleAction(mock(ActionFilters.class), rolesStore, transportService).     final boolean created = randomBoolean().     PutRoleRequest request = new PutRoleRequest().     request.name(roleName).     doAnswer(new Answer() {          @Override         public Void answer(InvocationOnMock invocation) throws Throwable {             Object[] args = invocation.getArguments().             assert args.length == 3.             ActionListener<Boolean> listener = (ActionListener<Boolean>) args[2].             listener.onResponse(created).             return null.         }     }).when(rolesStore).putRole(eq(request), any(RoleDescriptor.class), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<PutRoleResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<PutRoleResponse>() {          @Override         public void onResponse(PutRoleResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(notNullValue())).     assertThat(responseRef.get().isCreated(), is(created)).     assertThat(throwableRef.get(), is(nullValue())).     verify(rolesStore, times(1)).putRole(eq(request), any(RoleDescriptor.class), any(ActionListener.class)). }
false;public;1;8;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     Object[] args = invocation.getArguments().     assert args.length == 3.     ActionListener<Boolean> listener = (ActionListener<Boolean>) args[2].     listener.onFailure(e).     return null. }
false;public;1;4;;@Override public void onResponse(PutRoleResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;41;;public void testException() {     final Exception e = randomFrom(new ElasticsearchSecurityException(""), new IllegalStateException()).     final String roleName = randomFrom("admin", "dept_a", "restricted").     NativeRolesStore rolesStore = mock(NativeRolesStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportPutRoleAction action = new TransportPutRoleAction(mock(ActionFilters.class), rolesStore, transportService).     PutRoleRequest request = new PutRoleRequest().     request.name(roleName).     doAnswer(new Answer() {          @Override         public Void answer(InvocationOnMock invocation) throws Throwable {             Object[] args = invocation.getArguments().             assert args.length == 3.             ActionListener<Boolean> listener = (ActionListener<Boolean>) args[2].             listener.onFailure(e).             return null.         }     }).when(rolesStore).putRole(eq(request), any(RoleDescriptor.class), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<PutRoleResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<PutRoleResponse>() {          @Override         public void onResponse(PutRoleResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), is(notNullValue())).     assertThat(throwableRef.get(), is(sameInstance(e))).     verify(rolesStore, times(1)).putRole(eq(request), any(RoleDescriptor.class), any(ActionListener.class)). }
