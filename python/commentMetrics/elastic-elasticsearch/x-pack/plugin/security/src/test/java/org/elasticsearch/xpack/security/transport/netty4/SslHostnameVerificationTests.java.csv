commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean transportSSLEnabled() {     return true. }
false;protected;1;37;;@Override protected Settings nodeSettings(int nodeOrdinal) {     Settings settings = super.nodeSettings(nodeOrdinal).     Settings.Builder settingsBuilder = Settings.builder().     settingsBuilder.put(settings.filter(k -> k.startsWith("xpack.security.transport.ssl.") == false), false).     Path keyPath.     Path certPath.     Path nodeCertPath.     try {         /*              * This keystore uses a cert without any subject alternative names and a CN of "Elasticsearch Test Node No SAN"              * that will not resolve to a DNS name and will always cause hostname verification failures              */         keyPath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode-no-subjaltname.pem").         certPath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode-no-subjaltname.crt").         nodeCertPath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt").         assert keyPath != null.         assert certPath != null.         assert nodeCertPath != null.         assertThat(Files.exists(certPath), is(true)).         assertThat(Files.exists(nodeCertPath), is(true)).         assertThat(Files.exists(keyPath), is(true)).     } catch (Exception e) {         throw new RuntimeException(e).     }     SecuritySettingsSource.addSecureSettings(settingsBuilder, secureSettings -> {         secureSettings.setString("xpack.security.transport.ssl.secure_key_passphrase", "testnode-no-subjaltname").     }).     return settingsBuilder.put("xpack.security.transport.ssl.key", keyPath.toAbsolutePath()).put("xpack.security.transport.ssl.certificate", certPath.toAbsolutePath()).putList("xpack.security.transport.ssl.certificate_authorities", Arrays.asList(certPath.toString(), nodeCertPath.toString())).put("xpack.security.transport.ssl.verification_mode", "certificate").build(). }
false;protected;0;30;;@Override protected Settings transportClientSettings() {     Path keyPath.     Path certPath.     Path nodeCertPath.     try {         keyPath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode-no-subjaltname.pem").         certPath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode-no-subjaltname.crt").         nodeCertPath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt").         assert keyPath != null.         assert certPath != null.         assert nodeCertPath != null.         assertThat(Files.exists(certPath), is(true)).         assertThat(Files.exists(nodeCertPath), is(true)).         assertThat(Files.exists(keyPath), is(true)).     } catch (Exception e) {         throw new RuntimeException(e).     }     Settings settings = super.transportClientSettings().     // remove all ssl settings     Settings.Builder builder = Settings.builder().     builder.put(settings.filter(k -> k.startsWith("xpack.security.transport.ssl.") == false), false).     builder.put("xpack.security.transport.ssl.verification_mode", "certificate").put("xpack.security.transport.ssl.key", keyPath.toAbsolutePath()).put("xpack.security.transport.ssl.key_passphrase", "testnode-no-subjaltname").put("xpack.security.transport.ssl.certificate", certPath.toAbsolutePath()).putList("xpack.security.transport.ssl.certificate_authorities", Arrays.asList(certPath.toString(), nodeCertPath.toString())).     return builder.build(). }
false;public;0;17;;public void testThatHostnameMismatchDeniesTransportClientConnection() throws Exception {     Transport transport = internalCluster().getDataNodeInstance(Transport.class).     TransportAddress transportAddress = transport.boundAddress().publishAddress().     InetSocketAddress inetSocketAddress = transportAddress.address().     Settings settings = Settings.builder().put(transportClientSettings()).put("xpack.security.transport.ssl.verification_mode", "full").build().     try (TransportClient client = new TestXPackTransportClient(settings, LocalStateSecurity.class)) {         client.addTransportAddress(new TransportAddress(inetSocketAddress.getAddress(), inetSocketAddress.getPort())).         client.admin().cluster().prepareHealth().get().         fail("Expected a NoNodeAvailableException due to hostname verification failures").     } catch (NoNodeAvailableException e) {         assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#")).     } }
false;public;0;4;;public void testTransportClientConnectionIgnoringHostnameVerification() throws Exception {     Client client = internalCluster().transportClient().     assertGreenClusterState(client). }
