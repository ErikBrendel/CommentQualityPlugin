commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void getRandomPort() {     // ephemeral port     randomClientPort = randomIntBetween(49000, 65500). }
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;protected;1;11;;@Override protected Settings nodeSettings(int nodeOrdinal) {     String randomClientPortRange = randomClientPort + "-" + (randomClientPort + 100).     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("transport.profiles.client.port", randomClientPortRange).put("transport.profiles.client.bind_host", "localhost").put("transport.profiles.client.xpack.security.filter.deny", "_all").put(IPFilter.TRANSPORT_FILTER_DENY_SETTING.getKey(), "_all").build(). }
false;public;0;8;;public void testThatIpFilteringIsIntegratedIntoNettyPipelineViaHttp() throws Exception {     TransportAddress transportAddress = randomFrom(internalCluster().getDataNodeInstance(HttpServerTransport.class).boundAddress().boundAddresses()).     try (Socket socket = new Socket()) {         trySocketConnection(socket, transportAddress.address()).         assertThat(socket.isClosed(), is(true)).     } }
false;public;0;4;;public void testThatIpFilteringIsNotAppliedForDefaultTransport() throws Exception {     Client client = internalCluster().transportClient().     assertGreenClusterState(client). }
false;public;0;6;;public void testThatIpFilteringIsAppliedForProfile() throws Exception {     try (Socket socket = new Socket()) {         trySocketConnection(socket, getProfileAddress("client")).         assertThat(socket.isClosed(), is(true)).     } }
false;private;2;11;;@SuppressForbidden(reason = "Allow opening socket for test") private void trySocketConnection(Socket socket, InetSocketAddress address) throws IOException {     logger.info("connecting to {}", address).     SocketAccess.doPrivileged(() -> socket.connect(address, 500)).     assertThat(socket.isConnected(), is(true)).     try (OutputStream os = socket.getOutputStream()) {         os.write("fooooo".getBytes(StandardCharsets.UTF_8)).         os.flush().     } }
false;private,static;1;5;;private static InetSocketAddress getProfileAddress(String profile) {     TransportAddress transportAddress = randomFrom(internalCluster().getInstance(Transport.class).profileBoundAddresses().get(profile).boundAddresses()).     return transportAddress.address(). }
