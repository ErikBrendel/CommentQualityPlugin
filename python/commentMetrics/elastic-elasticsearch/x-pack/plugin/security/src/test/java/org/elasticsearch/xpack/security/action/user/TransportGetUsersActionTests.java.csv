commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void maybeEnableAnonymous() {     anonymousEnabled = randomBoolean().     if (anonymousEnabled) {         settings = Settings.builder().put(AnonymousUser.ROLES_SETTING.getKey(), "superuser").build().     } else {         settings = Settings.EMPTY.     }     threadPool = new TestThreadPool("TransportGetUsersActionTests"). }
false;public;0;6;;@After public void terminateThreadPool() throws InterruptedException {     if (threadPool != null) {         terminate(threadPool).     } }
false;public;1;4;;@Override public void onResponse(GetUsersResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;39;;public void testAnonymousUser() {     NativeUsersStore usersStore = mock(NativeUsersStore.class).     SecurityIndexManager securityIndex = mock(SecurityIndexManager.class).     when(securityIndex.isAvailable()).thenReturn(true).     AnonymousUser anonymousUser = new AnonymousUser(settings).     ReservedRealm reservedRealm = new ReservedRealm(mock(Environment.class), settings, usersStore, anonymousUser, securityIndex, threadPool).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportGetUsersAction action = new TransportGetUsersAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService, reservedRealm).     GetUsersRequest request = new GetUsersRequest().     request.usernames(anonymousUser.principal()).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<GetUsersResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<GetUsersResponse>() {          @Override         public void onResponse(GetUsersResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(throwableRef.get(), is(nullValue())).     assertThat(responseRef.get(), is(notNullValue())).     final User[] users = responseRef.get().users().     if (anonymousEnabled) {         assertThat("expected array with anonymous but got: " + Arrays.toString(users), users, arrayContaining(anonymousUser)).     } else {         assertThat("expected an empty array but got: " + Arrays.toString(users), users, emptyArray()).     }     verifyZeroInteractions(usersStore). }
false;public;1;4;;@Override public void onResponse(GetUsersResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;29;;public void testInternalUser() {     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportGetUsersAction action = new TransportGetUsersAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService, mock(ReservedRealm.class)).     GetUsersRequest request = new GetUsersRequest().     request.usernames(randomFrom(SystemUser.INSTANCE.principal(), XPackUser.INSTANCE.principal())).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<GetUsersResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<GetUsersResponse>() {          @Override         public void onResponse(GetUsersResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is internal")).     assertThat(responseRef.get(), is(nullValue())).     verifyZeroInteractions(usersStore). }
false;public;1;4;;@Override public void onResponse(GetUsersResponse response) {     responseRef.set(response). }
false;public;1;5;;@Override public void onFailure(Exception e) {     logger.warn("Request failed", e).     throwableRef.set(e). }
false;public;0;45;;public void testReservedUsersOnly() {     NativeUsersStore usersStore = mock(NativeUsersStore.class).     SecurityIndexManager securityIndex = mock(SecurityIndexManager.class).     when(securityIndex.isAvailable()).thenReturn(true).     when(securityIndex.checkMappingVersion(any())).thenReturn(true).     ReservedRealmTests.mockGetAllReservedUserInfo(usersStore, Collections.emptyMap()).     ReservedRealm reservedRealm = new ReservedRealm(mock(Environment.class), settings, usersStore, new AnonymousUser(settings), securityIndex, threadPool).     PlainActionFuture<Collection<User>> userFuture = new PlainActionFuture<>().     reservedRealm.users(userFuture).     final Collection<User> allReservedUsers = userFuture.actionGet().     final int size = randomIntBetween(1, allReservedUsers.size()).     final List<User> reservedUsers = randomSubsetOf(size, allReservedUsers).     final List<String> names = reservedUsers.stream().map(User::principal).collect(Collectors.toList()).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportGetUsersAction action = new TransportGetUsersAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService, reservedRealm).     logger.error("names {}", names).     GetUsersRequest request = new GetUsersRequest().     request.usernames(names.toArray(new String[names.size()])).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<GetUsersResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<GetUsersResponse>() {          @Override         public void onResponse(GetUsersResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             logger.warn("Request failed", e).             throwableRef.set(e).         }     }).     User[] users = responseRef.get().users().     assertThat(throwableRef.get(), is(nullValue())).     assertThat(responseRef.get(), is(notNullValue())).     assertThat(users, arrayContaining(reservedUsers.toArray(new User[reservedUsers.size()]))). }
false;public;1;7;;public Void answer(InvocationOnMock invocation) {     Object[] args = invocation.getArguments().     assert args.length == 2.     ActionListener<List<User>> listener = (ActionListener<List<User>>) args[1].     listener.onResponse(storeUsers).     return null. }
false;public;1;4;;@Override public void onResponse(GetUsersResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;50;;public void testGetAllUsers() {     final List<User> storeUsers = randomFrom(Collections.<User>emptyList(), Collections.singletonList(new User("joe")), Arrays.asList(new User("jane"), new User("fred")), randomUsers()).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     SecurityIndexManager securityIndex = mock(SecurityIndexManager.class).     when(securityIndex.isAvailable()).thenReturn(true).     ReservedRealmTests.mockGetAllReservedUserInfo(usersStore, Collections.emptyMap()).     ReservedRealm reservedRealm = new ReservedRealm(mock(Environment.class), settings, usersStore, new AnonymousUser(settings), securityIndex, threadPool).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportGetUsersAction action = new TransportGetUsersAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService, reservedRealm).     GetUsersRequest request = new GetUsersRequest().     doAnswer(new Answer() {          public Void answer(InvocationOnMock invocation) {             Object[] args = invocation.getArguments().             assert args.length == 2.             ActionListener<List<User>> listener = (ActionListener<List<User>>) args[1].             listener.onResponse(storeUsers).             return null.         }     }).when(usersStore).getUsers(eq(Strings.EMPTY_ARRAY), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<GetUsersResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<GetUsersResponse>() {          @Override         public void onResponse(GetUsersResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     final List<User> expectedList = new ArrayList<>().     PlainActionFuture<Collection<User>> userFuture = new PlainActionFuture<>().     reservedRealm.users(userFuture).     expectedList.addAll(userFuture.actionGet()).     expectedList.addAll(storeUsers).     assertThat(throwableRef.get(), is(nullValue())).     assertThat(responseRef.get(), is(notNullValue())).     assertThat(responseRef.get().users(), arrayContaining(expectedList.toArray(new User[expectedList.size()]))).     verify(usersStore, times(1)).getUsers(aryEq(Strings.EMPTY_ARRAY), any(ActionListener.class)). }
false;public;1;4;;@Override public void onResponse(GetUsersResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;46;;public void testGetStoreOnlyUsers() {     final List<User> storeUsers = randomFrom(Collections.singletonList(new User("joe")), Arrays.asList(new User("jane"), new User("fred")), randomUsers()).     final String[] storeUsernames = storeUsers.stream().map(User::principal).collect(Collectors.toList()).toArray(Strings.EMPTY_ARRAY).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportGetUsersAction action = new TransportGetUsersAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService, mock(ReservedRealm.class)).     GetUsersRequest request = new GetUsersRequest().     request.usernames(storeUsernames).     doAnswer(invocation -> {         Object[] args = invocation.getArguments().         assert args.length == 2.         ActionListener<List<User>> listener = (ActionListener<List<User>>) args[1].         listener.onResponse(storeUsers).         return null.     }).when(usersStore).getUsers(aryEq(storeUsernames), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<GetUsersResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<GetUsersResponse>() {          @Override         public void onResponse(GetUsersResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     final List<User> expectedList = new ArrayList<>().     expectedList.addAll(storeUsers).     assertThat(throwableRef.get(), is(nullValue())).     assertThat(responseRef.get(), is(notNullValue())).     assertThat(responseRef.get().users(), arrayContaining(expectedList.toArray(new User[expectedList.size()]))).     if (storeUsers.size() > 1) {         verify(usersStore, times(1)).getUsers(aryEq(storeUsernames), any(ActionListener.class)).     } else {         verify(usersStore, times(1)).getUsers(aryEq(new String[] { storeUsernames[0] }), any(ActionListener.class)).     } }
false;public;1;4;;@Override public void onResponse(GetUsersResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;40;;public void testException() {     final Exception e = randomFrom(new ElasticsearchSecurityException(""), new IllegalStateException(), new ValidationException()).     final List<User> storeUsers = randomFrom(Collections.singletonList(new User("joe")), Arrays.asList(new User("jane"), new User("fred")), randomUsers()).     final String[] storeUsernames = storeUsers.stream().map(User::principal).collect(Collectors.toList()).toArray(Strings.EMPTY_ARRAY).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportGetUsersAction action = new TransportGetUsersAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService, mock(ReservedRealm.class)).     GetUsersRequest request = new GetUsersRequest().     request.usernames(storeUsernames).     doAnswer(invocation -> {         Object[] args = invocation.getArguments().         assert args.length == 2.         ActionListener<List<User>> listener = (ActionListener<List<User>>) args[1].         listener.onFailure(e).         return null.     }).when(usersStore).getUsers(aryEq(storeUsernames), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<GetUsersResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<GetUsersResponse>() {          @Override         public void onResponse(GetUsersResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(throwableRef.get(), is(notNullValue())).     assertThat(throwableRef.get(), is(sameInstance(e))).     assertThat(responseRef.get(), is(nullValue())).     verify(usersStore, times(1)).getUsers(aryEq(storeUsernames), any(ActionListener.class)). }
false;private;0;8;;private List<User> randomUsers() {     int size = scaledRandomIntBetween(3, 16).     List<User> users = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         users.add(new User("user_" + i, randomAlphaOfLengthBetween(4, 12))).     }     return users. }
