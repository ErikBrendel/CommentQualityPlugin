commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;public void testNullValuesForEmailAndFullName() throws IOException {     final String json = "{\n" + "    \"roles\": [\n" + "      \"kibana4\"\n" + "    ],\n" + "    \"full_name\": null,\n" + "    \"email\": null,\n" + "    \"metadata\": {}\n" + "}".     PutUserRequestBuilder builder = new PutUserRequestBuilder(mock(Client.class)).     builder.source("kibana4", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, Hasher.BCRYPT).     PutUserRequest request = builder.request().     assertThat(request.username(), is("kibana4")).     assertThat(request.roles(), arrayContaining("kibana4")).     assertThat(request.fullName(), nullValue()).     assertThat(request.email(), nullValue()).     assertThat(request.metadata().isEmpty(), is(true)).     assertTrue(request.enabled()). }
false;public;0;18;;public void testMissingEmailFullName() throws Exception {     final String json = "{\n" + "    \"roles\": [\n" + "      \"kibana4\"\n" + "    ],\n" + "    \"metadata\": {}\n" + "}".     PutUserRequestBuilder builder = new PutUserRequestBuilder(mock(Client.class)).     builder.source("kibana4", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, Hasher.BCRYPT).     PutUserRequest request = builder.request().     assertThat(request.username(), is("kibana4")).     assertThat(request.roles(), arrayContaining("kibana4")).     assertThat(request.fullName(), nullValue()).     assertThat(request.email(), nullValue()).     assertThat(request.metadata().isEmpty(), is(true)). }
false;public;0;20;;public void testWithFullNameAndEmail() throws IOException {     final String json = "{\n" + "    \"roles\": [\n" + "      \"kibana4\"\n" + "    ],\n" + "    \"full_name\": \"Kibana User\",\n" + "    \"email\": \"kibana@elastic.co\",\n" + "    \"metadata\": {}\n" + "}".     PutUserRequestBuilder builder = new PutUserRequestBuilder(mock(Client.class)).     builder.source("kibana4", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, Hasher.BCRYPT).     PutUserRequest request = builder.request().     assertThat(request.username(), is("kibana4")).     assertThat(request.roles(), arrayContaining("kibana4")).     assertThat(request.fullName(), is("Kibana User")).     assertThat(request.email(), is("kibana@elastic.co")).     assertThat(request.metadata().isEmpty(), is(true)). }
false;public;0;15;;public void testInvalidFullname() throws IOException {     final String json = "{\n" + "    \"roles\": [\n" + "      \"kibana4\"\n" + "    ],\n" + "    \"full_name\": [ \"Kibana User\" ],\n" + "    \"email\": \"kibana@elastic.co\",\n" + "    \"metadata\": {}\n" + "}".     PutUserRequestBuilder builder = new PutUserRequestBuilder(mock(Client.class)).     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> builder.source("kibana4", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, Hasher.BCRYPT)).     assertThat(e.getMessage(), containsString("expected field [full_name] to be of type string")). }
false;public;0;15;;public void testInvalidEmail() throws IOException {     final String json = "{\n" + "    \"roles\": [\n" + "      \"kibana4\"\n" + "    ],\n" + "    \"full_name\": \"Kibana User\",\n" + "    \"email\": [ \"kibana@elastic.co\" ],\n" + "    \"metadata\": {}\n" + "}".     PutUserRequestBuilder builder = new PutUserRequestBuilder(mock(Client.class)).     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> builder.source("kibana4", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, Hasher.BCRYPT)).     assertThat(e.getMessage(), containsString("expected field [email] to be of type string")). }
false;public;0;16;;public void testWithEnabled() throws IOException {     final String json = "{\n" + "    \"roles\": [\n" + "      \"kibana4\"\n" + "    ],\n" + "    \"full_name\": \"Kibana User\",\n" + "    \"email\": \"kibana@elastic.co\",\n" + "    \"metadata\": {}\n," + "    \"enabled\": false\n" + "}".     PutUserRequestBuilder builder = new PutUserRequestBuilder(mock(Client.class)).     PutUserRequest request = builder.source("kibana4", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, Hasher.BCRYPT).request().     assertFalse(request.enabled()). }
false;public;0;14;;public void testWithValidPasswordHash() throws IOException {     // this is the fastest hasher we officially support     final Hasher hasher = Hasher.BCRYPT4.     final char[] hash = hasher.hash(new SecureString("secret".toCharArray())).     final String json = "{\n" + "    \"password_hash\": \"" + new String(hash) + "\"," + "    \"roles\": []\n" + "}".     PutUserRequestBuilder requestBuilder = new PutUserRequestBuilder(mock(Client.class)).     PutUserRequest request = requestBuilder.source("hash_user", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, hasher).request().     assertThat(request.passwordHash(), equalTo(hash)).     assertThat(request.username(), equalTo("hash_user")). }
false;public;0;16;;public void testWithMismatchedPasswordHash() throws IOException {     final Hasher systemHasher = Hasher.BCRYPT8.     // this is the fastest hasher we officially support     final Hasher userHasher = Hasher.BCRYPT4.     final char[] hash = userHasher.hash(new SecureString("secret".toCharArray())).     final String json = "{\n" + "    \"password_hash\": \"" + new String(hash) + "\"," + "    \"roles\": []\n" + "}".     PutUserRequestBuilder builder = new PutUserRequestBuilder(mock(Client.class)).     final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> {         builder.source("hash_user", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, systemHasher).request().     }).     assertThat(ex.getMessage(), containsString(userHasher.name())).     assertThat(ex.getMessage(), containsString(systemHasher.name())). }
false;public;0;14;;public void testWithPasswordHashThatsNotReallyAHash() throws IOException {     final Hasher systemHasher = Hasher.PBKDF2.     final String json = "{\n" + "    \"password_hash\": \"not-a-hash\"," + "    \"roles\": []\n" + "}".     PutUserRequestBuilder builder = new PutUserRequestBuilder(mock(Client.class)).     final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> {         builder.source("hash_user", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, systemHasher).request().     }).     assertThat(ex.getMessage(), containsString(Hasher.NOOP.name())).     assertThat(ex.getMessage(), containsString(systemHasher.name())). }
false;public;0;17;;public void testWithBothPasswordAndHash() throws IOException {     final Hasher hasher = randomFrom(Hasher.BCRYPT4, Hasher.PBKDF2_1000).     final String password = randomAlphaOfLength(12).     final char[] hash = hasher.hash(new SecureString(password.toCharArray())).     final LinkedHashMap<String, Object> fields = new LinkedHashMap<>().     fields.put("password", password).     fields.put("password_hash", new String(hash)).     fields.put("roles", Collections.emptyList()).     BytesReference json = BytesReference.bytes(XContentBuilder.builder(XContentType.JSON.xContent()).map(shuffleMap(fields, Collections.emptySet()))).     PutUserRequestBuilder builder = new PutUserRequestBuilder(mock(Client.class)).     final IllegalArgumentException ex = expectThrows(ValidationException.class, () -> {         builder.source("hash_user", json, XContentType.JSON, hasher).request().     }).     assertThat(ex.getMessage(), containsString("password_hash has already been set")). }
