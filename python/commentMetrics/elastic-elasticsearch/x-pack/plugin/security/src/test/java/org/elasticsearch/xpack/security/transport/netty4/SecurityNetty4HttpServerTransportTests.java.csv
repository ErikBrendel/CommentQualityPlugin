commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Before public void createSSLService() {     testnodeCert = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt").     testnodeKey = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem").     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("xpack.security.http.ssl.secure_key_passphrase", "testnode").     Settings settings = Settings.builder().put("xpack.security.http.ssl.key", testnodeKey).put("xpack.security.http.ssl.certificate", testnodeCert).put("path.home", createTempDir()).setSecureSettings(secureSettings).build().     env = TestEnvironment.newEnvironment(settings).     sslService = new SSLService(settings, env). }
false;public;0;13;;public void testDefaultClientAuth() throws Exception {     Settings settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).build().     sslService = new SSLService(settings, env).     SecurityNetty4HttpServerTransport transport = new SecurityNetty4HttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(IPFilter.class), sslService, mock(ThreadPool.class), xContentRegistry(), new NullDispatcher()).     ChannelHandler handler = transport.configureServerChannelHandler().     final EmbeddedChannel ch = new EmbeddedChannel(handler).     assertThat(ch.pipeline().get(SslHandler.class).engine().getNeedClientAuth(), is(false)).     assertThat(ch.pipeline().get(SslHandler.class).engine().getWantClientAuth(), is(false)). }
false;public;0;15;;public void testOptionalClientAuth() throws Exception {     String value = randomFrom(SSLClientAuth.OPTIONAL.name(), SSLClientAuth.OPTIONAL.name().toLowerCase(Locale.ROOT)).     Settings settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).put("xpack.security.http.ssl.client_authentication", value).build().     sslService = new SSLService(settings, env).     SecurityNetty4HttpServerTransport transport = new SecurityNetty4HttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(IPFilter.class), sslService, mock(ThreadPool.class), xContentRegistry(), new NullDispatcher()).     ChannelHandler handler = transport.configureServerChannelHandler().     final EmbeddedChannel ch = new EmbeddedChannel(handler).     assertThat(ch.pipeline().get(SslHandler.class).engine().getNeedClientAuth(), is(false)).     assertThat(ch.pipeline().get(SslHandler.class).engine().getWantClientAuth(), is(true)). }
false;public;0;15;;public void testRequiredClientAuth() throws Exception {     String value = randomFrom(SSLClientAuth.REQUIRED.name(), SSLClientAuth.REQUIRED.name().toLowerCase(Locale.ROOT)).     Settings settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).put("xpack.security.http.ssl.client_authentication", value).build().     sslService = new SSLService(settings, env).     SecurityNetty4HttpServerTransport transport = new SecurityNetty4HttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(IPFilter.class), sslService, mock(ThreadPool.class), xContentRegistry(), new NullDispatcher()).     ChannelHandler handler = transport.configureServerChannelHandler().     final EmbeddedChannel ch = new EmbeddedChannel(handler).     assertThat(ch.pipeline().get(SslHandler.class).engine().getNeedClientAuth(), is(true)).     assertThat(ch.pipeline().get(SslHandler.class).engine().getWantClientAuth(), is(false)). }
false;public;0;15;;public void testNoClientAuth() throws Exception {     String value = randomFrom(SSLClientAuth.NONE.name(), SSLClientAuth.NONE.name().toLowerCase(Locale.ROOT)).     Settings settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).put("xpack.security.http.ssl.client_authentication", value).build().     sslService = new SSLService(settings, env).     SecurityNetty4HttpServerTransport transport = new SecurityNetty4HttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(IPFilter.class), sslService, mock(ThreadPool.class), xContentRegistry(), new NullDispatcher()).     ChannelHandler handler = transport.configureServerChannelHandler().     final EmbeddedChannel ch = new EmbeddedChannel(handler).     assertThat(ch.pipeline().get(SslHandler.class).engine().getNeedClientAuth(), is(false)).     assertThat(ch.pipeline().get(SslHandler.class).engine().getWantClientAuth(), is(false)). }
false;public;0;26;;public void testCustomSSLConfiguration() throws Exception {     Settings settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).build().     sslService = new SSLService(settings, env).     SecurityNetty4HttpServerTransport transport = new SecurityNetty4HttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(IPFilter.class), sslService, mock(ThreadPool.class), xContentRegistry(), new NullDispatcher()).     ChannelHandler handler = transport.configureServerChannelHandler().     EmbeddedChannel ch = new EmbeddedChannel(handler).     SSLEngine defaultEngine = ch.pipeline().get(SslHandler.class).engine().     settings = Settings.builder().put(env.settings()).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).put("xpack.security.http.ssl.supported_protocols", "TLSv1.2").build().     sslService = new SSLService(settings, TestEnvironment.newEnvironment(settings)).     transport = new SecurityNetty4HttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(IPFilter.class), sslService, mock(ThreadPool.class), xContentRegistry(), new NullDispatcher()).     handler = transport.configureServerChannelHandler().     ch = new EmbeddedChannel(handler).     SSLEngine customEngine = ch.pipeline().get(SslHandler.class).engine().     assertThat(customEngine.getEnabledProtocols(), arrayContaining("TLSv1.2")).     assertThat(customEngine.getEnabledProtocols(), not(equalTo(defaultEngine.getEnabledProtocols()))). }
false;public;0;13;;public void testThatExceptionIsThrownWhenConfiguredWithoutSslKey() throws Exception {     Settings settings = Settings.builder().put("xpack.security.http.ssl.certificate_authorities", testnodeCert).put(XPackSettings.HTTP_SSL_ENABLED.getKey(), true).put("path.home", createTempDir()).build().     env = TestEnvironment.newEnvironment(settings).     sslService = new SSLService(settings, env).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new SecurityNetty4HttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(IPFilter.class), sslService, mock(ThreadPool.class), xContentRegistry(), new NullDispatcher())).     assertThat(e.getMessage(), containsString("key must be provided")). }
false;public;0;16;;public void testNoExceptionWhenConfiguredWithoutSslKeySSLDisabled() throws Exception {     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("xpack.security.http.ssl.secure_key_passphrase", "testnode").     Settings settings = Settings.builder().put("xpack.security.http.ssl.key", testnodeKey).put("xpack.security.http.ssl.certificate", testnodeCert).setSecureSettings(secureSettings).put("path.home", createTempDir()).build().     env = TestEnvironment.newEnvironment(settings).     sslService = new SSLService(settings, env).     SecurityNetty4HttpServerTransport transport = new SecurityNetty4HttpServerTransport(settings, new NetworkService(Collections.emptyList()), mock(BigArrays.class), mock(IPFilter.class), sslService, mock(ThreadPool.class), xContentRegistry(), new NullDispatcher()).     assertNotNull(transport.configureServerChannelHandler()). }
