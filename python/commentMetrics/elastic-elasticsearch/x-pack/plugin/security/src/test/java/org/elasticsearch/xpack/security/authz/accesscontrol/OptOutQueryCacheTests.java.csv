commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void initLuceneStuff() throws IOException {     dir = newDirectory().     w = new RandomIndexWriter(random(), dir).     reader = w.getReader().     searcher = newSearcher(reader). }
false;public;0;6;;@After public void closeLuceneStuff() throws IOException {     w.close().     dir.close().     reader.close(). }
false;public;0;61;;public void testOptOutQueryCacheSafetyCheck() throws IOException {     BooleanQuery.Builder builder = new BooleanQuery.Builder().     builder.add(new TermQuery(new Term("foo", "bar")), BooleanClause.Occur.MUST).     builder.add(new TermQuery(new Term("no", "baz")), BooleanClause.Occur.MUST_NOT).     Weight weight = builder.build().createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).     // whenever the allowed fields match the fields in the query and we do not deny access to any fields we allow caching.     IndicesAccessControl.IndexAccessControl permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(new String[] { "foo", "no" }, null)), DocumentPermissions.allowAll()).     assertTrue(OptOutQueryCache.cachingIsSafe(weight, permissions)).     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(new String[] { "foo", "no" }, new String[] {})), DocumentPermissions.allowAll()).     assertTrue(OptOutQueryCache.cachingIsSafe(weight, permissions)).     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(new String[] { "*" }, new String[] {})), DocumentPermissions.allowAll()).     assertTrue(OptOutQueryCache.cachingIsSafe(weight, permissions)).     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(new String[] { "*" }, null)), DocumentPermissions.allowAll()).     assertTrue(OptOutQueryCache.cachingIsSafe(weight, permissions)).     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(new String[] { "*" }, new String[] { "oof" })), DocumentPermissions.allowAll()).     assertTrue(OptOutQueryCache.cachingIsSafe(weight, permissions)).     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(new String[] { "f*", "n*" }, new String[] {})), DocumentPermissions.allowAll()).     assertTrue(OptOutQueryCache.cachingIsSafe(weight, permissions)).     // check we don't cache if a field is not allowed     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(new String[] { "foo" }, null)), DocumentPermissions.allowAll()).     assertFalse(OptOutQueryCache.cachingIsSafe(weight, permissions)).     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(new String[] { "a*" }, new String[] { "aa" })), DocumentPermissions.allowAll()).     assertFalse(OptOutQueryCache.cachingIsSafe(weight, permissions)).     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(null, new String[] { "no" })), DocumentPermissions.allowAll()).     assertFalse(OptOutQueryCache.cachingIsSafe(weight, permissions)).     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(null, new String[] { "*" })), DocumentPermissions.allowAll()).     assertFalse(OptOutQueryCache.cachingIsSafe(weight, permissions)).     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(new String[] { "foo", "no" }, new String[] { "no" })), DocumentPermissions.allowAll()).     assertFalse(OptOutQueryCache.cachingIsSafe(weight, permissions)).     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(new String[] {}, new String[] {})), DocumentPermissions.allowAll()).     assertFalse(OptOutQueryCache.cachingIsSafe(weight, permissions)).     permissions = new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(fieldPermissionDef(new String[] {}, null)), DocumentPermissions.allowAll()).     assertFalse(OptOutQueryCache.cachingIsSafe(weight, permissions)). }
false;public;0;17;;public void testOptOutQueryCacheAuthIsNotAllowed() {     final Settings.Builder settings = Settings.builder().put("index.version.created", Version.CURRENT).put("index.number_of_shards", 1).put("index.number_of_replicas", 0).     final IndexMetaData indexMetaData = IndexMetaData.builder("index").settings(settings).build().     final IndexSettings indexSettings = new IndexSettings(indexMetaData, Settings.EMPTY).     final IndicesQueryCache indicesQueryCache = mock(IndicesQueryCache.class).     final ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     final XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.isAuthAllowed()).thenReturn(false).     final OptOutQueryCache cache = new OptOutQueryCache(indexSettings, indicesQueryCache, threadContext, licenseState).     final Weight weight = mock(Weight.class).     final QueryCachingPolicy policy = mock(QueryCachingPolicy.class).     cache.doCache(weight, policy).     verify(indicesQueryCache).doCache(same(weight), same(policy)). }
false;public;0;18;;public void testOptOutQueryCacheNoIndicesPermissions() {     final Settings.Builder settings = Settings.builder().put("index.version.created", Version.CURRENT).put("index.number_of_shards", 1).put("index.number_of_replicas", 0).     final IndexMetaData indexMetaData = IndexMetaData.builder("index").settings(settings).build().     final IndexSettings indexSettings = new IndexSettings(indexMetaData, Settings.EMPTY).     final IndicesQueryCache indicesQueryCache = mock(IndicesQueryCache.class).     final ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     final XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.isAuthAllowed()).thenReturn(true).     final OptOutQueryCache cache = new OptOutQueryCache(indexSettings, indicesQueryCache, threadContext, licenseState).     final Weight weight = mock(Weight.class).     final QueryCachingPolicy policy = mock(QueryCachingPolicy.class).     final Weight w = cache.doCache(weight, policy).     assertSame(w, weight).     verifyNoMoreInteractions(indicesQueryCache). }
false;public;0;22;;public void testOptOutQueryCacheIndexDoesNotHaveFieldLevelSecurity() {     final Settings.Builder settings = Settings.builder().put("index.version.created", Version.CURRENT).put("index.number_of_shards", 1).put("index.number_of_replicas", 0).     final IndexMetaData indexMetaData = IndexMetaData.builder("index").settings(settings).build().     final IndexSettings indexSettings = new IndexSettings(indexMetaData, Settings.EMPTY).     final IndicesQueryCache indicesQueryCache = mock(IndicesQueryCache.class).     final ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     final IndicesAccessControl.IndexAccessControl indexAccessControl = mock(IndicesAccessControl.IndexAccessControl.class).     when(indexAccessControl.getFieldPermissions()).thenReturn(new FieldPermissions()).     final IndicesAccessControl indicesAccessControl = mock(IndicesAccessControl.class).     when(indicesAccessControl.getIndexPermissions("index")).thenReturn(indexAccessControl).     threadContext.putTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY, indicesAccessControl).     final XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.isAuthAllowed()).thenReturn(true).     final OptOutQueryCache cache = new OptOutQueryCache(indexSettings, indicesQueryCache, threadContext, licenseState).     final Weight weight = mock(Weight.class).     final QueryCachingPolicy policy = mock(QueryCachingPolicy.class).     cache.doCache(weight, policy).     verify(indicesQueryCache).doCache(same(weight), same(policy)). }
false;public;0;15;;public void testOptOutQueryCacheRemovesLicenseStateListenerOnClose() {     final Settings.Builder settings = Settings.builder().put("index.version.created", Version.CURRENT).put("index.number_of_shards", 1).put("index.number_of_replicas", 0).     final IndexMetaData indexMetaData = IndexMetaData.builder("index").settings(settings).build().     final IndexSettings indexSettings = new IndexSettings(indexMetaData, Settings.EMPTY).     final IndicesQueryCache indicesQueryCache = mock(IndicesQueryCache.class).     final ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     final XPackLicenseState licenseState = mock(XPackLicenseState.class).     final OptOutQueryCache cache = new OptOutQueryCache(indexSettings, indicesQueryCache, threadContext, licenseState).     verify(licenseState).addListener(cache).     cache.close().     verify(licenseState).removeListener(cache). }
false;private,static;2;3;;private static FieldPermissionsDefinition fieldPermissionDef(String[] granted, String[] denied) {     return new FieldPermissionsDefinition(granted, denied). }
