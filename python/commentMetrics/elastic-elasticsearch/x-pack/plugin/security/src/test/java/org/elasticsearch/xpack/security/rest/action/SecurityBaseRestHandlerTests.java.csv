commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "test_xpack_security_base_action". }
false;protected;2;8;;@Override protected RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {     return channel -> {         if (consumerCalled.compareAndSet(false, true) == false) {             fail("consumerCalled was not false").         }     }. }
false;public;0;41;;public void testSecurityBaseRestHandlerChecksLicenseState() throws Exception {     final boolean securityDisabledByTrial = randomBoolean().     final AtomicBoolean consumerCalled = new AtomicBoolean(false).     final XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.isSecurityAvailable()).thenReturn(true).     when(licenseState.isSecurityDisabledByTrialLicense()).thenReturn(securityDisabledByTrial).     SecurityBaseRestHandler handler = new SecurityBaseRestHandler(Settings.EMPTY, licenseState) {          @Override         public String getName() {             return "test_xpack_security_base_action".         }          @Override         protected RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {             return channel -> {                 if (consumerCalled.compareAndSet(false, true) == false) {                     fail("consumerCalled was not false").                 }             }.         }     }.     FakeRestRequest fakeRestRequest = new FakeRestRequest().     FakeRestChannel fakeRestChannel = new FakeRestChannel(fakeRestRequest, randomBoolean(), securityDisabledByTrial ? 1 : 0).     NodeClient client = mock(NodeClient.class).     assertFalse(consumerCalled.get()).     verifyZeroInteractions(licenseState).     handler.handleRequest(fakeRestRequest, fakeRestChannel, client).     verify(licenseState).isSecurityAvailable().     if (securityDisabledByTrial == false) {         assertTrue(consumerCalled.get()).         assertEquals(0, fakeRestChannel.responses().get()).         assertEquals(0, fakeRestChannel.errors().get()).     } else {         assertFalse(consumerCalled.get()).         assertEquals(0, fakeRestChannel.responses().get()).         assertEquals(1, fakeRestChannel.errors().get()).     } }
