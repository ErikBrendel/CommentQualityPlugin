# id;timestamp;commentText;codeText;commentWords;codeWords
ScrollHelperIntegTests -> public void testFetchAllByEntityWithBrokenScroll();1524684173;Tests that_{@link ScrollHelper#fetchAllByEntity(Client, SearchRequest, ActionListener, Function)}_defends against scrolls broken in such a way that the remote Elasticsearch returns infinite results. While Elasticsearch_<strong>shouldn't</strong> do this it has in the past and it is <strong>very</strong> when it does. It takes out the whole node. So_this makes sure we defend against it properly.;public void testFetchAllByEntityWithBrokenScroll() {_        Client client = mock(Client.class)__        ThreadPool threadPool = mock(ThreadPool.class)__        when(client.threadPool()).thenReturn(threadPool)__        when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY))__        SearchRequest request = new SearchRequest()___        String scrollId = randomAlphaOfLength(5)__        SearchHit[] hits = new SearchHit[] {new SearchHit(1), new SearchHit(2)}__        InternalSearchResponse internalResponse = new InternalSearchResponse(new SearchHits(hits, 3, 1), null, null, null, false, false, 1)__        SearchResponse response = new SearchResponse(internalResponse, scrollId, 1, 1, 0, 0, ShardSearchFailure.EMPTY_ARRAY,_                SearchResponse.Clusters.EMPTY)___        Answer<?> returnResponse = invocation -> {_            @SuppressWarnings("unchecked")_            ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocation.getArguments()[1]__            listener.onResponse(response)__            return null__        }__        doAnswer(returnResponse).when(client).search(eq(request), anyObject())__        _        doAnswer(returnResponse).when(client).searchScroll(anyObject(), anyObject())___        AtomicReference<Exception> failure = new AtomicReference<>()__        ScrollHelper.fetchAllByEntity(client, request, new ActionListener<Collection<SearchHit>>() {_            @Override_            public void onResponse(Collection<SearchHit> response) {_                fail("This shouldn't succeed.")__            }__            @Override_            public void onFailure(Exception e) {_                failure.set(e)__            }_        }, Function.identity())___        assertNotNull("onFailure wasn't called", failure.get())__        assertEquals("scrolling returned more hits [4] than expected [3] so bailing out to prevent unbounded memory consumption.",_                failure.get().getMessage())__    };tests,that,link,scroll,helper,fetch,all,by,entity,client,search,request,action,listener,function,defends,against,scrolls,broken,in,such,a,way,that,the,remote,elasticsearch,returns,infinite,results,while,elasticsearch,strong,shouldn,t,strong,do,this,it,has,in,the,past,and,it,is,strong,very,strong,when,it,does,it,takes,out,the,whole,node,so,this,makes,sure,we,defend,against,it,properly;public,void,test,fetch,all,by,entity,with,broken,scroll,client,client,mock,client,class,thread,pool,thread,pool,mock,thread,pool,class,when,client,thread,pool,then,return,thread,pool,when,thread,pool,get,thread,context,then,return,new,thread,context,settings,empty,search,request,request,new,search,request,string,scroll,id,random,alpha,of,length,5,search,hit,hits,new,search,hit,new,search,hit,1,new,search,hit,2,internal,search,response,internal,response,new,internal,search,response,new,search,hits,hits,3,1,null,null,null,false,false,1,search,response,response,new,search,response,internal,response,scroll,id,1,1,0,0,shard,search,failure,search,response,clusters,empty,answer,return,response,invocation,suppress,warnings,unchecked,action,listener,search,response,listener,action,listener,search,response,invocation,get,arguments,1,listener,on,response,response,return,null,do,answer,return,response,when,client,search,eq,request,any,object,do,answer,return,response,when,client,search,scroll,any,object,any,object,atomic,reference,exception,failure,new,atomic,reference,scroll,helper,fetch,all,by,entity,client,request,new,action,listener,collection,search,hit,override,public,void,on,response,collection,search,hit,response,fail,this,shouldn,t,succeed,override,public,void,on,failure,exception,e,failure,set,e,function,identity,assert,not,null,on,failure,wasn,t,called,failure,get,assert,equals,scrolling,returned,more,hits,4,than,expected,3,so,bailing,out,to,prevent,unbounded,memory,consumption,failure,get,get,message
ScrollHelperIntegTests -> public void testFetchAllByEntityWithBrokenScroll();1538067637;Tests that_{@link ScrollHelper#fetchAllByEntity(Client, SearchRequest, ActionListener, Function)}_defends against scrolls broken in such a way that the remote Elasticsearch returns infinite results. While Elasticsearch_<strong>shouldn't</strong> do this it has in the past and it is <strong>very</strong> when it does. It takes out the whole node. So_this makes sure we defend against it properly.;public void testFetchAllByEntityWithBrokenScroll() {_        Client client = mock(Client.class)__        ThreadPool threadPool = mock(ThreadPool.class)__        when(client.threadPool()).thenReturn(threadPool)__        when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY))__        SearchRequest request = new SearchRequest()__        request.scroll(TimeValue.timeValueHours(10L))___        String scrollId = randomAlphaOfLength(5)__        SearchHit[] hits = new SearchHit[] {new SearchHit(1), new SearchHit(2)}__        InternalSearchResponse internalResponse = new InternalSearchResponse(new SearchHits(hits, 3, 1), null, null, null, false, false, 1)__        SearchResponse response = new SearchResponse(internalResponse, scrollId, 1, 1, 0, 0, ShardSearchFailure.EMPTY_ARRAY,_                SearchResponse.Clusters.EMPTY)___        Answer<?> returnResponse = invocation -> {_            @SuppressWarnings("unchecked")_            ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocation.getArguments()[1]__            listener.onResponse(response)__            return null__        }__        doAnswer(returnResponse).when(client).search(eq(request), anyObject())__        _        doAnswer(returnResponse).when(client).searchScroll(anyObject(), anyObject())___        AtomicReference<Exception> failure = new AtomicReference<>()__        ScrollHelper.fetchAllByEntity(client, request, new ActionListener<Collection<SearchHit>>() {_            @Override_            public void onResponse(Collection<SearchHit> response) {_                fail("This shouldn't succeed.")__            }__            @Override_            public void onFailure(Exception e) {_                failure.set(e)__            }_        }, Function.identity())___        assertNotNull("onFailure wasn't called", failure.get())__        assertEquals("scrolling returned more hits [4] than expected [3] so bailing out to prevent unbounded memory consumption.",_                failure.get().getMessage())__    };tests,that,link,scroll,helper,fetch,all,by,entity,client,search,request,action,listener,function,defends,against,scrolls,broken,in,such,a,way,that,the,remote,elasticsearch,returns,infinite,results,while,elasticsearch,strong,shouldn,t,strong,do,this,it,has,in,the,past,and,it,is,strong,very,strong,when,it,does,it,takes,out,the,whole,node,so,this,makes,sure,we,defend,against,it,properly;public,void,test,fetch,all,by,entity,with,broken,scroll,client,client,mock,client,class,thread,pool,thread,pool,mock,thread,pool,class,when,client,thread,pool,then,return,thread,pool,when,thread,pool,get,thread,context,then,return,new,thread,context,settings,empty,search,request,request,new,search,request,request,scroll,time,value,time,value,hours,10l,string,scroll,id,random,alpha,of,length,5,search,hit,hits,new,search,hit,new,search,hit,1,new,search,hit,2,internal,search,response,internal,response,new,internal,search,response,new,search,hits,hits,3,1,null,null,null,false,false,1,search,response,response,new,search,response,internal,response,scroll,id,1,1,0,0,shard,search,failure,search,response,clusters,empty,answer,return,response,invocation,suppress,warnings,unchecked,action,listener,search,response,listener,action,listener,search,response,invocation,get,arguments,1,listener,on,response,response,return,null,do,answer,return,response,when,client,search,eq,request,any,object,do,answer,return,response,when,client,search,scroll,any,object,any,object,atomic,reference,exception,failure,new,atomic,reference,scroll,helper,fetch,all,by,entity,client,request,new,action,listener,collection,search,hit,override,public,void,on,response,collection,search,hit,response,fail,this,shouldn,t,succeed,override,public,void,on,failure,exception,e,failure,set,e,function,identity,assert,not,null,on,failure,wasn,t,called,failure,get,assert,equals,scrolling,returned,more,hits,4,than,expected,3,so,bailing,out,to,prevent,unbounded,memory,consumption,failure,get,get,message
ScrollHelperIntegTests -> public void testFetchAllByEntityWithBrokenScroll();1544035746;Tests that_{@link ScrollHelper#fetchAllByEntity(Client, SearchRequest, ActionListener, Function)}_defends against scrolls broken in such a way that the remote Elasticsearch returns infinite results. While Elasticsearch_<strong>shouldn't</strong> do this it has in the past and it is <strong>very</strong> when it does. It takes out the whole node. So_this makes sure we defend against it properly.;public void testFetchAllByEntityWithBrokenScroll() {_        Client client = mock(Client.class)__        ThreadPool threadPool = mock(ThreadPool.class)__        when(client.threadPool()).thenReturn(threadPool)__        when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY))__        SearchRequest request = new SearchRequest()__        request.scroll(TimeValue.timeValueHours(10L))___        String scrollId = randomAlphaOfLength(5)__        SearchHit[] hits = new SearchHit[] {new SearchHit(1), new SearchHit(2)}__        InternalSearchResponse internalResponse = new InternalSearchResponse(new SearchHits(hits,_            new TotalHits(3, TotalHits.Relation.EQUAL_TO), 1),_            null,_            null,_            null, false,_            false,_            1)__        SearchResponse response = new SearchResponse(internalResponse, scrollId, 1, 1, 0, 0, ShardSearchFailure.EMPTY_ARRAY,_                SearchResponse.Clusters.EMPTY)___        Answer<?> returnResponse = invocation -> {_            @SuppressWarnings("unchecked")_            ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocation.getArguments()[1]__            listener.onResponse(response)__            return null__        }__        doAnswer(returnResponse).when(client).search(eq(request), anyObject())__        _        doAnswer(returnResponse).when(client).searchScroll(anyObject(), anyObject())___        AtomicReference<Exception> failure = new AtomicReference<>()__        ScrollHelper.fetchAllByEntity(client, request, new ActionListener<Collection<SearchHit>>() {_            @Override_            public void onResponse(Collection<SearchHit> response) {_                fail("This shouldn't succeed.")__            }__            @Override_            public void onFailure(Exception e) {_                failure.set(e)__            }_        }, Function.identity())___        assertNotNull("onFailure wasn't called", failure.get())__        assertEquals("scrolling returned more hits [4] than expected [3] so bailing out to prevent unbounded memory consumption.",_                failure.get().getMessage())__    };tests,that,link,scroll,helper,fetch,all,by,entity,client,search,request,action,listener,function,defends,against,scrolls,broken,in,such,a,way,that,the,remote,elasticsearch,returns,infinite,results,while,elasticsearch,strong,shouldn,t,strong,do,this,it,has,in,the,past,and,it,is,strong,very,strong,when,it,does,it,takes,out,the,whole,node,so,this,makes,sure,we,defend,against,it,properly;public,void,test,fetch,all,by,entity,with,broken,scroll,client,client,mock,client,class,thread,pool,thread,pool,mock,thread,pool,class,when,client,thread,pool,then,return,thread,pool,when,thread,pool,get,thread,context,then,return,new,thread,context,settings,empty,search,request,request,new,search,request,request,scroll,time,value,time,value,hours,10l,string,scroll,id,random,alpha,of,length,5,search,hit,hits,new,search,hit,new,search,hit,1,new,search,hit,2,internal,search,response,internal,response,new,internal,search,response,new,search,hits,hits,new,total,hits,3,total,hits,relation,1,null,null,null,false,false,1,search,response,response,new,search,response,internal,response,scroll,id,1,1,0,0,shard,search,failure,search,response,clusters,empty,answer,return,response,invocation,suppress,warnings,unchecked,action,listener,search,response,listener,action,listener,search,response,invocation,get,arguments,1,listener,on,response,response,return,null,do,answer,return,response,when,client,search,eq,request,any,object,do,answer,return,response,when,client,search,scroll,any,object,any,object,atomic,reference,exception,failure,new,atomic,reference,scroll,helper,fetch,all,by,entity,client,request,new,action,listener,collection,search,hit,override,public,void,on,response,collection,search,hit,response,fail,this,shouldn,t,succeed,override,public,void,on,failure,exception,e,failure,set,e,function,identity,assert,not,null,on,failure,wasn,t,called,failure,get,assert,equals,scrolling,returned,more,hits,4,than,expected,3,so,bailing,out,to,prevent,unbounded,memory,consumption,failure,get,get,message
