commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;public void testPBKDF2AlgorithmIsAllowed() {     {         final Settings settings = Settings.builder().put(XPackSettings.FIPS_MODE_ENABLED.getKey(), true).put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), "PBKDF2_10000").build().         final BootstrapCheck.BootstrapCheckResult result = new FIPS140PasswordHashingAlgorithmBootstrapCheck().check(createTestContext(settings, null)).         assertFalse(result.isFailure()).     }     {         final Settings settings = Settings.builder().put(XPackSettings.FIPS_MODE_ENABLED.getKey(), true).put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), "PBKDF2").build().         final BootstrapCheck.BootstrapCheckResult result = new FIPS140PasswordHashingAlgorithmBootstrapCheck().check(createTestContext(settings, null)).         assertFalse(result.isFailure()).     } }
false;public;0;7;;public void testBCRYPTAlgorithmDependsOnFipsMode() {     for (final Boolean fipsModeEnabled : Arrays.asList(true, false)) {         for (final String passwordHashingAlgorithm : Arrays.asList(null, "BCRYPT", "BCRYPT11")) {             runBCRYPTTest(fipsModeEnabled, passwordHashingAlgorithm).         }     } }
false;private;2;10;;private void runBCRYPTTest(final boolean fipsModeEnabled, final String passwordHashingAlgorithm) {     final Settings.Builder builder = Settings.builder().put(XPackSettings.FIPS_MODE_ENABLED.getKey(), fipsModeEnabled).     if (passwordHashingAlgorithm != null) {         builder.put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), passwordHashingAlgorithm).     }     final Settings settings = builder.build().     final BootstrapCheck.BootstrapCheckResult result = new FIPS140PasswordHashingAlgorithmBootstrapCheck().check(createTestContext(settings, null)).     assertThat(result.isFailure(), equalTo(fipsModeEnabled)). }
