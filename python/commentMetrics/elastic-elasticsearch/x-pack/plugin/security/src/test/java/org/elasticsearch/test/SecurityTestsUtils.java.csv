commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;6;;public static void assertAuthenticationException(ElasticsearchSecurityException e) {     assertThat(e.status(), is(RestStatus.UNAUTHORIZED)).     // making sure it's not a license expired exception     assertThat(e.getMetadata(LicenseUtils.EXPIRED_FEATURE_METADATA), nullValue()).     assertContainsWWWAuthenticateHeader(e). }
false;public,static;2;4;;public static void assertAuthenticationException(ElasticsearchSecurityException e, Matcher<String> messageMatcher) {     assertAuthenticationException(e).     assertThat(e.getMessage(), messageMatcher). }
false;public,static;3;4;;public static void assertThrowsAuthorizationException(LuceneTestCase.ThrowingRunnable throwingRunnable, String action, String user) {     assertThrowsAuthorizationException(throwingRunnable, containsString("[" + action + "] is unauthorized for user [" + user + "]")). }
false;public,static;4;5;;public static void assertThrowsAuthorizationExceptionRunAs(LuceneTestCase.ThrowingRunnable throwingRunnable, String action, String user, String runAs) {     assertThrowsAuthorizationException(throwingRunnable, containsString("[" + action + "] is unauthorized for user [" + user + "] run as [" + runAs + "]")). }
false;public,static;2;4;;public static void assertThrowsAuthorizationExceptionDefaultUsers(LuceneTestCase.ThrowingRunnable throwingRunnable, String action) {     ElasticsearchSecurityException exception = expectThrows(ElasticsearchSecurityException.class, throwingRunnable).     assertAuthorizationExceptionDefaultUsers(exception, action). }
false;public,static;2;5;;public static void assertAuthorizationExceptionDefaultUsers(Throwable throwable, String action) {     assertAuthorizationException(throwable, either(containsString("[" + action + "] is unauthorized for user [" + SecuritySettingsSource.TEST_USER_NAME + "]")).or(containsString("[" + action + "] is unauthorized for user [" + SecuritySettingsSource.DEFAULT_TRANSPORT_CLIENT_USER_NAME + "]"))). }
false;public,static;2;5;;public static void assertThrowsAuthorizationException(LuceneTestCase.ThrowingRunnable throwingRunnable, Matcher<String> messageMatcher) {     ElasticsearchSecurityException securityException = expectThrows(ElasticsearchSecurityException.class, throwingRunnable).     assertAuthorizationException(securityException, messageMatcher). }
false;private,static;2;6;;private static void assertAuthorizationException(Throwable throwable, Matcher<String> messageMatcher) {     assertThat(throwable, instanceOf(ElasticsearchSecurityException.class)).     ElasticsearchSecurityException securityException = (ElasticsearchSecurityException) throwable.     assertThat(securityException.status(), is(RestStatus.FORBIDDEN)).     assertThat(throwable.getMessage(), messageMatcher). }
