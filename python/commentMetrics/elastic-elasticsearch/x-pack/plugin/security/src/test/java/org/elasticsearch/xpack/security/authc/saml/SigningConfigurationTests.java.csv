commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setupCredential() throws Exception {     credential = (X509Credential) buildOpenSamlCredential(readRandomKeyPair()).get(0). }
false;public,static;0;4;;@AfterClass public static void clearCredential() throws Exception {     credential = null. }
false;public;0;18;;public void testShouldSignObject() throws Exception {     final AuthnRequest authnRequest = SamlUtils.buildObject(AuthnRequest.class, AuthnRequest.DEFAULT_ELEMENT_NAME).     final LogoutRequest logoutRequest = SamlUtils.buildObject(LogoutRequest.class, LogoutRequest.DEFAULT_ELEMENT_NAME).     assertShouldSign(authnRequest, "AuthnRequest").     assertShouldSign(logoutRequest, "LogoutRequest").     assertShouldSign(authnRequest, "*").     assertShouldSign(logoutRequest, "*").     assertShouldSign(authnRequest, "AuthnRequest", "LogoutRequest").     assertShouldSign(logoutRequest, "AuthnRequest", "LogoutRequest").     assertShouldNotSign(authnRequest, "LogoutRequest").     assertShouldNotSign(logoutRequest, "AuthnRequest").     assertShouldNotSign(authnRequest, new String[0]).     assertShouldNotSign(logoutRequest, new String[0]).     assertShouldNotSign(authnRequest, "foo", "bar", "baz").     assertShouldNotSign(logoutRequest, "foo", "bar", "baz"). }
false;private;2;4;;private void assertShouldSign(SAMLObject object, String... types) {     final SigningConfiguration signingConfiguration = getSigningConfiguration(types).     assertTrue("Configuration types " + Arrays.toString(types) + " should sign " + object, signingConfiguration.shouldSign(object)). }
false;private;2;4;;private void assertShouldNotSign(SAMLObject object, String... types) {     final SigningConfiguration signingConfiguration = getSigningConfiguration(types).     assertFalse("Configuration types " + Arrays.toString(types) + " shouldn't sign " + object, signingConfiguration.shouldSign(object)). }
false;private;1;3;;private SigningConfiguration getSigningConfiguration(String[] types) {     return new SigningConfiguration(Sets.newHashSet(types), credential). }
