commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testBoolean() {     Set<String> fields = new HashSet<>().     BooleanQuery.Builder builder = new BooleanQuery.Builder().     builder.add(new TermQuery(new Term("foo", "bar")), BooleanClause.Occur.MUST).     builder.add(new TermQuery(new Term("no", "baz")), BooleanClause.Occur.MUST_NOT).     FieldExtractor.extractFields(builder.build(), fields).     assertEquals(asSet("foo", "no"), fields). }
false;public;0;9;;public void testDisjunctionMax() {     Set<String> fields = new HashSet<>().     DisjunctionMaxQuery query = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term("one", "bar")), new TermQuery(new Term("two", "baz"))), 1.0F).     FieldExtractor.extractFields(query, fields).     assertEquals(asSet("one", "two"), fields). }
false;public;0;5;;public void testSpanTerm() {     Set<String> fields = new HashSet<>().     FieldExtractor.extractFields(new SpanTermQuery(new Term("foo", "bar")), fields).     assertEquals(asSet("foo"), fields). }
false;public;0;5;;public void testTerm() {     Set<String> fields = new HashSet<>().     FieldExtractor.extractFields(new TermQuery(new Term("foo", "bar")), fields).     assertEquals(asSet("foo"), fields). }
false;public;0;6;;public void testSynonym() {     Set<String> fields = new HashSet<>().     SynonymQuery query = new SynonymQuery(new Term("foo", "bar"), new Term("foo", "baz")).     FieldExtractor.extractFields(query, fields).     assertEquals(asSet("foo"), fields). }
false;public;0;8;;public void testPhrase() {     Set<String> fields = new HashSet<>().     PhraseQuery.Builder builder = new PhraseQuery.Builder().     builder.add(new Term("foo", "bar")).     builder.add(new Term("foo", "baz")).     FieldExtractor.extractFields(builder.build(), fields).     assertEquals(asSet("foo"), fields). }
false;public;0;8;;public void testMultiPhrase() {     Set<String> fields = new HashSet<>().     MultiPhraseQuery.Builder builder = new MultiPhraseQuery.Builder().     builder.add(new Term("foo", "bar")).     builder.add(new Term[] { new Term("foo", "baz"), new Term("foo", "baz2") }).     FieldExtractor.extractFields(builder.build(), fields).     assertEquals(asSet("foo"), fields). }
false;public;0;5;;public void testPointRange() {     Set<String> fields = new HashSet<>().     FieldExtractor.extractFields(IntPoint.newRangeQuery("foo", 3, 4), fields).     assertEquals(asSet("foo"), fields). }
false;public;0;5;;public void testPointSet() {     Set<String> fields = new HashSet<>().     FieldExtractor.extractFields(IntPoint.newSetQuery("foo", 3, 4, 5), fields).     assertEquals(asSet("foo"), fields). }
false;public;0;5;;public void testFieldValue() {     Set<String> fields = new HashSet<>().     FieldExtractor.extractFields(new DocValuesFieldExistsQuery("foo"), fields).     assertEquals(asSet("foo"), fields). }
false;public;0;5;;public void testDocValuesNumbers() {     Set<String> fields = new HashSet<>().     FieldExtractor.extractFields(new DocValuesNumbersQuery("foo", 5L), fields).     assertEquals(asSet("foo"), fields). }
false;public;0;5;;public void testTermInSet() {     Set<String> fields = new HashSet<>().     FieldExtractor.extractFields(new TermInSetQuery("foo", new BytesRef("baz"), new BytesRef("baz2")), fields).     assertEquals(asSet("foo"), fields). }
false;public;0;5;;public void testMatchAllDocs() {     Set<String> fields = new HashSet<>().     FieldExtractor.extractFields(new MatchAllDocsQuery(), fields).     assertEquals(Collections.emptySet(), fields). }
false;public;0;5;;public void testMatchNoDocs() {     Set<String> fields = new HashSet<>().     FieldExtractor.extractFields(new MatchNoDocsQuery(), fields).     assertEquals(Collections.emptySet(), fields). }
false;public;0;6;;public void testUnsupported() {     Set<String> fields = new HashSet<>().     expectThrows(UnsupportedOperationException.class, () -> {         FieldExtractor.extractFields(new AssertingQuery(random(), new MatchAllDocsQuery()), fields).     }). }
false;public;0;22;;public void testIndexOrDocValuesQuery() {     Set<String> fields = new HashSet<>().     Query supported = IntPoint.newExactQuery("foo", 42).     Query unsupported = NumericDocValuesField.newSlowExactQuery("bar", 3).     IndexOrDocValuesQuery query = new IndexOrDocValuesQuery(supported, supported).     FieldExtractor.extractFields(query, fields).     assertEquals(asSet("foo"), fields).     IndexOrDocValuesQuery query2 = new IndexOrDocValuesQuery(unsupported, unsupported).     expectThrows(UnsupportedOperationException.class, () -> FieldExtractor.extractFields(query2, new HashSet<>())).     fields = new HashSet<>().     IndexOrDocValuesQuery query3 = new IndexOrDocValuesQuery(supported, unsupported).     FieldExtractor.extractFields(query3, fields).     assertEquals(asSet("foo"), fields).     fields = new HashSet<>().     IndexOrDocValuesQuery query4 = new IndexOrDocValuesQuery(unsupported, supported).     FieldExtractor.extractFields(query4, fields).     assertEquals(asSet("foo"), fields). }
