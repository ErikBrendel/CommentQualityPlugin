commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testLegacySecureSettingsIsNotAllowed() throws Exception {     assumeFalse("Can't run in a FIPS JVM, PBE is not available", inFipsJvm()).     final Settings.Builder builder = Settings.builder().put("path.home", createTempDir()).put("xpack.security.fips_mode.enabled", "true").     Environment env = TestEnvironment.newEnvironment(builder.build()).     generateV2Keystore(env).     assertTrue(new FIPS140SecureSettingsBootstrapCheck(builder.build(), env).check(createTestContext(builder.build(), null)).isFailure()). }
false;public;0;18;;public void testCorrectSecureSettingsVersionIsAllowed() throws Exception {     final Settings.Builder builder = Settings.builder().put("path.home", createTempDir()).put("xpack.security.fips_mode.enabled", "true").     Environment env = TestEnvironment.newEnvironment(builder.build()).     final KeyStoreWrapper keyStoreWrapper = KeyStoreWrapper.create().     try {         keyStoreWrapper.save(env.configFile(), "password".toCharArray()).     } catch (final AccessControlException e) {         if (e.getPermission() instanceof RuntimePermission && e.getPermission().getName().equals("accessUserInformation")) {         // this is expected:but we don't care in tests         } else {             throw e.         }     }     assertFalse(new FIPS140SecureSettingsBootstrapCheck(builder.build(), env).check(createTestContext(builder.build(), null)).isFailure()). }
false;private;1;42;;private void generateV2Keystore(Environment env) throws Exception {     Path configDir = env.configFile().     SimpleFSDirectory directory = new SimpleFSDirectory(configDir).     byte[] fileBytes = new byte[20].     random().nextBytes(fileBytes).     try (IndexOutput output = directory.createOutput("elasticsearch.keystore", IOContext.DEFAULT)) {         CodecUtil.writeHeader(output, "elasticsearch.keystore", 2).         // hasPassword = false         output.writeByte((byte) 0).         output.writeString("PKCS12").         // string algo         output.writeString("PBE").         // file algo         output.writeString("PBE").         // num settings         output.writeVInt(2).         output.writeString("string_setting").         output.writeString("STRING").         output.writeString("file_setting").         output.writeString("FILE").         SecretKeyFactory secretFactory = SecretKeyFactory.getInstance("PBE").         KeyStore keystore = KeyStore.getInstance("PKCS12").         keystore.load(null, null).         SecretKey secretKey = secretFactory.generateSecret(new PBEKeySpec("stringSecretValue".toCharArray())).         KeyStore.ProtectionParameter protectionParameter = new KeyStore.PasswordProtection(new char[0]).         keystore.setEntry("string_setting", new KeyStore.SecretKeyEntry(secretKey), protectionParameter).         byte[] base64Bytes = Base64.getEncoder().encode(fileBytes).         char[] chars = new char[base64Bytes.length].         for (int i = 0. i < chars.length. ++i) {             // PBE only stores the lower 8 bits, so this narrowing is ok             chars[i] = (char) base64Bytes[i].         }         secretKey = secretFactory.generateSecret(new PBEKeySpec(chars)).         keystore.setEntry("file_setting", new KeyStore.SecretKeyEntry(secretKey), protectionParameter).         ByteArrayOutputStream keystoreBytesStream = new ByteArrayOutputStream().         keystore.store(keystoreBytesStream, new char[0]).         byte[] keystoreBytes = keystoreBytesStream.toByteArray().         output.writeInt(keystoreBytes.length).         output.writeBytes(keystoreBytes, keystoreBytes.length).         CodecUtil.writeFooter(output).     } }
