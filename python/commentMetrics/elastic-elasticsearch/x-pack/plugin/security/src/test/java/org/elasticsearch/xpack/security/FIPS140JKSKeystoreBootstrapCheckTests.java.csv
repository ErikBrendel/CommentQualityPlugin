commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testNoKeystoreIsAllowed() {     final Settings.Builder settings = Settings.builder().put("xpack.security.fips_mode.enabled", "true").     assertFalse(new FIPS140JKSKeystoreBootstrapCheck().check(createTestContext(settings.build(), null)).isFailure()). }
false;public;0;7;;public void testTransportSSLKeystoreTypeIsNotAllowed() {     final Settings.Builder settings = Settings.builder().put("xpack.security.fips_mode.enabled", "true").put("xpack.security.transport.ssl.keystore.path", "/this/is/the/path").put("xpack.security.transport.ssl.keystore.type", "JKS").     assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(createTestContext(settings.build(), null)).isFailure()). }
false;public;0;7;;public void testHttpSSLKeystoreTypeIsNotAllowed() {     final Settings.Builder settings = Settings.builder().put("xpack.security.fips_mode.enabled", "true").put("xpack.security.http.ssl.keystore.path", "/this/is/the/path").put("xpack.security.http.ssl.keystore.type", "JKS").     assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(createTestContext(settings.build(), null)).isFailure()). }
false;public;0;7;;public void testRealmKeystoreTypeIsNotAllowed() {     final Settings.Builder settings = Settings.builder().put("xpack.security.fips_mode.enabled", "true").put("xpack.security.authc.realms.ldap.ssl.keystore.path", "/this/is/the/path").put("xpack.security.authc.realms.ldap.ssl.keystore.type", "JKS").     assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(createTestContext(settings.build(), null)).isFailure()). }
false;public;0;6;;public void testImplicitRealmKeystoreTypeIsNotAllowed() {     final Settings.Builder settings = Settings.builder().put("xpack.security.fips_mode.enabled", "true").put("xpack.security.authc.realms.ldap.ssl.keystore.path", "/this/is/the/path").     assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(createTestContext(settings.build(), null)).isFailure()). }
