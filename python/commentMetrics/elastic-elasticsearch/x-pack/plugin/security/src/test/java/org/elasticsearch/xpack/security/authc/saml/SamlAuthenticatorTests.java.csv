# id;timestamp;commentText;codeText;commentWords;codeWords
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1524684173;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1527622193;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1527773340;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1527840262;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1528706846;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1528804324;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1528977744;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1531910483;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1538170812;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1539615817;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1540847035;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception;1549878221;This is testing a test, but the real signing tests are useless if our signing is incorrectly implemented;public void testThatTheTestSignersInteractCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())__        final Response unsigned = toResponse(xml)__        assertThat(unsigned.isSigned(), equalTo(false))__        assertThat(unsigned.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedDoc = toResponse(signDoc(xml, idpSigningCertificatePair))__        assertThat(signedDoc.isSigned(), equalTo(true))__        assertThat(signedDoc.getAssertions().get(0).isSigned(), equalTo(false))___        final Response signedAssertions = toResponse(signAssertions(xml, idpSigningCertificatePair))__        assertThat(signedAssertions.isSigned(), equalTo(false))__        assertThat(signedAssertions.getAssertions().get(0).isSigned(), equalTo(true))__    };this,is,testing,a,test,but,the,real,signing,tests,are,useless,if,our,signing,is,incorrectly,implemented;public,void,test,that,the,test,signers,interact,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unsigned,to,response,xml,assert,that,unsigned,is,signed,equal,to,false,assert,that,unsigned,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,doc,to,response,sign,doc,xml,idp,signing,certificate,pair,assert,that,signed,doc,is,signed,equal,to,true,assert,that,signed,doc,get,assertions,get,0,is,signed,equal,to,false,final,response,signed,assertions,to,response,sign,assertions,xml,idp,signing,certificate,pair,assert,that,signed,assertions,is,signed,equal,to,false,assert,that,signed,assertions,get,assertions,get,0,is,signed,equal,to,true
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1524684173;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = createKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = createKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(createKeyPair("RSA"), createKeyPair("RSA"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,create,key,pair,random,signing,algorithm,sp,signing,certificate,pair,create,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,create,key,pair,rsa,create,key,pair,rsa
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1527622193;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(readKeyPair("RSA_2048"), readKeyPair("RSA_4096"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,read,key,pair,read,key,pair
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1527773340;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(readKeyPair("RSA_2048"), readKeyPair("RSA_4096"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,read,key,pair,read,key,pair
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1527840262;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(readKeyPair("RSA_2048"), readKeyPair("RSA_4096"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,read,key,pair,read,key,pair
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1528706846;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(readKeyPair("RSA_2048"), readKeyPair("RSA_4096"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,read,key,pair,read,key,pair
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1528804324;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(readKeyPair("RSA_2048"), readKeyPair("RSA_4096"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,read,key,pair,read,key,pair
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1528977744;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(readKeyPair("RSA_2048"), readKeyPair("RSA_4096"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,read,key,pair,read,key,pair
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1531910483;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(readKeyPair("RSA_2048"), readKeyPair("RSA_4096"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,read,key,pair,read,key,pair
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1538170812;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(readKeyPair("RSA_2048"), readKeyPair("RSA_4096"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,read,key,pair,read,key,pair
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1539615817;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(readKeyPair("RSA_2048"), readKeyPair("RSA_4096"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,read,key,pair,read,key,pair
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1540847035;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(readKeyPair("RSA_2048"), readKeyPair("RSA_4096"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,read,key,pair,read,key,pair
SamlAuthenticatorTests -> @BeforeClass     public static void initCredentials() throws Exception;1549878221;Generating X.509 credentials can be CPU intensive and slow, so we only want to do it once per class.;@BeforeClass_    public static void initCredentials() throws Exception {_        idpSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spSigningCertificatePair = readRandomKeyPair(randomSigningAlgorithm())__        spEncryptionCertificatePairs = Arrays.asList(readKeyPair("RSA_2048"), readKeyPair("RSA_4096"))__    };generating,x,509,credentials,can,be,cpu,intensive,and,slow,so,we,only,want,to,do,it,once,per,class;before,class,public,static,void,init,credentials,throws,exception,idp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,signing,certificate,pair,read,random,key,pair,random,signing,algorithm,sp,encryption,certificate,pairs,arrays,as,list,read,key,pair,read,key,pair
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1524684173;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1527622193;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1527773340;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1527840262;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1528706846;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1528804324;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1528977744;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1531910483;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1538170812;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1539615817;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1540847035;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> private String getSignatureAlgorithmURI(PrivateKey key);1549878221;Randomly selects digital signature algorithm URI for given private key_algorithm ({@link PrivateKey#getAlgorithm()}).__@param key_{@link PrivateKey}_@return algorithm URI;private String getSignatureAlgorithmURI(PrivateKey key) {_        String algoUri = null__        switch (key.getAlgorithm()) {_        case "RSA":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512")__            break__        case "DSA":_            algoUri = "http://www.w3.org/2009/xmldsig11#dsa-sha256"__            break__        case "EC":_            algoUri = randomFrom("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256",_                    "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512")__            break__        default:_            throw new IllegalArgumentException("Unsupported algorithm : " + key.getAlgorithm()_                    + " for signature, allowed values for private key algorithm are [RSA, DSA, EC]")__        }_        return algoUri__    };randomly,selects,digital,signature,algorithm,uri,for,given,private,key,algorithm,link,private,key,get,algorithm,param,key,link,private,key,return,algorithm,uri;private,string,get,signature,algorithm,uri,private,key,key,string,algo,uri,null,switch,key,get,algorithm,case,rsa,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,rsa,sha256,http,www,w3,org,2001,04,xmldsig,more,rsa,sha512,break,case,dsa,algo,uri,http,www,w3,org,2009,xmldsig11,dsa,sha256,break,case,ec,algo,uri,random,from,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha256,http,www,w3,org,2001,04,xmldsig,more,ecdsa,sha512,break,default,throw,new,illegal,argument,exception,unsupported,algorithm,key,get,algorithm,for,signature,allowed,values,for,private,key,algorithm,are,rsa,dsa,ec,return,algo,uri
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1524684173;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1527622193;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1527773340;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1527840262;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1528706846;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1528804324;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1528977744;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1531910483;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1538170812;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1539615817;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1540847035;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
SamlAuthenticatorTests -> public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception;1549878221;This is testing a test, but the real encryption tests are useless if our encryption routines don't do anything;public void testThatTheTestEncryptionInteractsCorrectlyWithOpenSaml() throws Exception {_        final String xml = getSimpleResponse(clock.instant())___        final Response unencrypted = toResponse(xml)__        _        assertThat(unencrypted.getAssertions(), iterableWithSize(1))__        assertThat(unencrypted.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : unencrypted.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(1))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(0))__            }_        }__        final Tuple<X509Certificate, PrivateKey> spEncryptionCertificatePair = randomFrom(spEncryptionCertificatePairs)__        final Response encryptedAssertion = toResponse(encryptAssertions(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAssertion.getAssertions(), iterableWithSize(0))__        assertThat(encryptedAssertion.getEncryptedAssertions(), iterableWithSize(1))___        final Response encryptedAttributes = toResponse(encryptAttributes(xml, spEncryptionCertificatePair))__        _        assertThat(encryptedAttributes.getAssertions(), iterableWithSize(1))__        assertThat(encryptedAttributes.getEncryptedAssertions(), iterableWithSize(0))__        for (Assertion assertion : encryptedAttributes.getAssertions()) {_            assertThat(assertion.getAttributeStatements(), iterableWithSize(2))__            for (AttributeStatement statement : assertion.getAttributeStatements()) {_                assertThat(statement.getAttributes(), iterableWithSize(0))__                assertThat(statement.getEncryptedAttributes(), iterableWithSize(1))__            }_        }_    };this,is,testing,a,test,but,the,real,encryption,tests,are,useless,if,our,encryption,routines,don,t,do,anything;public,void,test,that,the,test,encryption,interacts,correctly,with,open,saml,throws,exception,final,string,xml,get,simple,response,clock,instant,final,response,unencrypted,to,response,xml,assert,that,unencrypted,get,assertions,iterable,with,size,1,assert,that,unencrypted,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,unencrypted,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,1,assert,that,statement,get,encrypted,attributes,iterable,with,size,0,final,tuple,x509certificate,private,key,sp,encryption,certificate,pair,random,from,sp,encryption,certificate,pairs,final,response,encrypted,assertion,to,response,encrypt,assertions,xml,sp,encryption,certificate,pair,assert,that,encrypted,assertion,get,assertions,iterable,with,size,0,assert,that,encrypted,assertion,get,encrypted,assertions,iterable,with,size,1,final,response,encrypted,attributes,to,response,encrypt,attributes,xml,sp,encryption,certificate,pair,assert,that,encrypted,attributes,get,assertions,iterable,with,size,1,assert,that,encrypted,attributes,get,encrypted,assertions,iterable,with,size,0,for,assertion,assertion,encrypted,attributes,get,assertions,assert,that,assertion,get,attribute,statements,iterable,with,size,2,for,attribute,statement,statement,assertion,get,attribute,statements,assert,that,statement,get,attributes,iterable,with,size,0,assert,that,statement,get,encrypted,attributes,iterable,with,size,1
