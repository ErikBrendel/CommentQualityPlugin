commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testParseSettings() throws Exception {     final RealmConfig.RealmIdentifier realmId = new RealmConfig.RealmIdentifier(LdapRealmSettings.LDAP_TYPE, "my_ldap").     final Settings settings = Settings.builder().put("path.home", createTempDir()).putList(RealmSettings.getFullSettingKey(realmId.getName(), LdapMetaDataResolverSettings.ADDITIONAL_META_DATA_SETTING), "cn", "uid").build().     RealmConfig config = new RealmConfig(realmId, settings, TestEnvironment.newEnvironment(settings), new ThreadContext(settings)).     resolver = new LdapMetaDataResolver(config, false).     assertThat(resolver.attributeNames(), arrayContaining("cn", "uid")). }
false;public;0;13;;public void testResolveSingleValuedAttributeFromCachedAttributes() throws Exception {     resolver = new LdapMetaDataResolver(Arrays.asList("cn", "uid"), true).     final Collection<Attribute> attributes = Arrays.asList(new Attribute("cn", "Clint Barton"), new Attribute("uid", "hawkeye"), new Attribute("email", "clint.barton@shield.gov"), new Attribute("memberOf", "cn=staff,ou=groups,dc=example,dc=com", "cn=admin,ou=groups,dc=example,dc=com")).     final Map<String, Object> map = resolve(attributes).     assertThat(map.size(), equalTo(2)).     assertThat(map.get("cn"), equalTo("Clint Barton")).     assertThat(map.get("uid"), equalTo("hawkeye")). }
false;public;0;12;;public void testResolveMultiValuedAttributeFromCachedAttributes() throws Exception {     resolver = new LdapMetaDataResolver(Arrays.asList("cn", "uid"), true).     final Collection<Attribute> attributes = Arrays.asList(new Attribute("cn", "Clint Barton", "hawkeye"), new Attribute("uid", "hawkeye")).     final Map<String, Object> map = resolve(attributes).     assertThat(map.size(), equalTo(2)).     assertThat(map.get("cn"), instanceOf(List.class)).     assertThat((List<?>) map.get("cn"), contains("Clint Barton", "hawkeye")).     assertThat(map.get("uid"), equalTo("hawkeye")). }
false;public;0;8;;public void testResolveMissingAttributeFromCachedAttributes() throws Exception {     resolver = new LdapMetaDataResolver(Arrays.asList("cn", "uid"), true).     final Collection<Attribute> attributes = Collections.singletonList(new Attribute("uid", "hawkeye")).     final Map<String, Object> map = resolve(attributes).     assertThat(map.size(), equalTo(1)).     assertThat(map.get("cn"), nullValue()).     assertThat(map.get("uid"), equalTo("hawkeye")). }
false;private;1;5;;private Map<String, Object> resolve(Collection<Attribute> attributes) throws Exception {     final PlainActionFuture<Map<String, Object>> future = new PlainActionFuture<>().     resolver.resolve(null, HAWKEYE_DN, TimeValue.timeValueSeconds(1), logger, attributes, future).     return future.get(). }
