commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void init() throws IOException {     settings = Settings.builder().put("resource.reload.interval.high", "100ms").put("path.home", createTempDir()).build().     env = TestEnvironment.newEnvironment(settings).     if (Files.exists(env.configFile()) == false) {         Files.createDirectory(env.configFile()).     }     threadPool = new TestThreadPool("test"). }
false;public;0;4;;@After public void shutdown() throws InterruptedException {     terminate(threadPool). }
false;public;0;9;;public void testMapper_ConfiguredWithUnreadableFile() throws Exception {     Path file = createTempFile("", ".yml").     // writing in utf_16 should cause a parsing error as we try to read the file in utf_8     Files.write(file, Collections.singletonList("aldlfkjldjdflkjd"), StandardCharsets.UTF_16).     ResourceWatcherService watcherService = new ResourceWatcherService(settings, threadPool).     DnRoleMapper mapper = createMapper(file, watcherService).     assertThat(mapper.mappingsCount(), is(0)). }
false;public;0;33;;public void testMapper_AutoReload() throws Exception {     Path roleMappingFile = getDataPath("role_mapping.yml").     Path file = env.configFile().resolve("test_role_mapping.yml").     Files.copy(roleMappingFile, file, StandardCopyOption.REPLACE_EXISTING).     final CountDownLatch latch = new CountDownLatch(1).     ResourceWatcherService watcherService = new ResourceWatcherService(settings, threadPool).     DnRoleMapper mapper = createMapper(file, watcherService).     mapper.addListener(latch::countDown).     Set<String> roles = mapper.resolveRoles("", Collections.singletonList("cn=shield,ou=marvel,o=superheros")).     assertThat(roles, notNullValue()).     assertThat(roles.size(), is(1)).     assertThat(roles, contains("security")).     watcherService.start().     try (BufferedWriter writer = Files.newBufferedWriter(file, StandardCharsets.UTF_8, StandardOpenOption.APPEND)) {         writer.newLine().         writer.append("fantastic_four:\n").append("  - \"cn=fantastic_four,ou=marvel,o=superheros\"").     }     if (!latch.await(5, TimeUnit.SECONDS)) {         fail("Waited too long for the updated file to be picked up").     }     roles = mapper.resolveRoles("", Collections.singletonList("cn=fantastic_four,ou=marvel,o=superheros")).     assertThat(roles, notNullValue()).     assertThat(roles.size(), is(1)).     assertThat(roles, contains("fantastic_four")). }
false;public;0;27;;public void testMapper_AutoReload_WithParseFailures() throws Exception {     Path roleMappingFile = getDataPath("role_mapping.yml").     Path file = env.configFile().resolve("test_role_mapping.yml").     Files.copy(roleMappingFile, file, StandardCopyOption.REPLACE_EXISTING).     final CountDownLatch latch = new CountDownLatch(1).     ResourceWatcherService watcherService = new ResourceWatcherService(settings, threadPool).     DnRoleMapper mapper = createMapper(file, watcherService).     mapper.addListener(latch::countDown).     Set<String> roles = mapper.resolveRoles("", Collections.singletonList("cn=shield,ou=marvel,o=superheros")).     assertThat(roles, notNullValue()).     assertThat(roles.size(), is(1)).     assertThat(roles, contains("security")).     watcherService.start().     // now replacing the content of the users file with something that cannot be read     Files.write(file, Collections.singletonList("aldlfkjldjdflkjd"), StandardCharsets.UTF_16).     if (!latch.await(5, TimeUnit.SECONDS)) {         fail("Waited too long for the updated file to be picked up").     }     assertThat(mapper.mappingsCount(), is(0)). }
false;public;0;28;;public void testMapperAutoReloadWithoutListener() throws Exception {     Path roleMappingFile = getDataPath("role_mapping.yml").     Path file = env.configFile().resolve("test_role_mapping.yml").     Files.copy(roleMappingFile, file, StandardCopyOption.REPLACE_EXISTING).     ResourceWatcherService watcherService = new ResourceWatcherService(settings, threadPool).     DnRoleMapper mapper = createMapper(file, watcherService).     Set<String> roles = mapper.resolveRoles("", Collections.singletonList("cn=shield,ou=marvel,o=superheros")).     assertThat(roles, notNullValue()).     assertThat(roles.size(), is(1)).     assertThat(roles, contains("security")).     watcherService.start().     try (BufferedWriter writer = Files.newBufferedWriter(file, StandardCharsets.UTF_8, StandardOpenOption.APPEND)) {         writer.newLine().         writer.append("fantastic_four:\n").append("  - \"cn=fantastic_four,ou=marvel,o=superheros\"").     }     assertBusy(() -> {         Set<String> resolvedRoles = mapper.resolveRoles("", Collections.singletonList("cn=fantastic_four,ou=marvel,o=superheros")).         assertThat(resolvedRoles, notNullValue()).         assertThat(resolvedRoles.size(), is(1)).         assertThat(resolvedRoles, contains("fantastic_four")).     }, 2L, TimeUnit.SECONDS). }
false;public;0;8;;public void testAddNullListener() throws Exception {     Path file = env.configFile().resolve("test_role_mapping.yml").     Files.write(file, Collections.singleton("")).     ResourceWatcherService watcherService = new ResourceWatcherService(settings, threadPool).     DnRoleMapper mapper = createMapper(file, watcherService).     NullPointerException e = expectThrows(NullPointerException.class, () -> mapper.addListener(null)).     assertEquals("listener cannot be null", e.getMessage()). }
false;public;0;28;;public void testParseFile() throws Exception {     Path file = getDataPath("role_mapping.yml").     Logger logger = CapturingLogger.newCapturingLogger(Level.INFO, null).     Map<String, List<String>> mappings = DnRoleMapper.parseFile(file, logger, "_type", "_name", false).     assertThat(mappings, notNullValue()).     assertThat(mappings.size(), is(3)).     DN dn = new DN("cn=avengers,ou=marvel,o=superheros").     assertThat(mappings, hasKey(dn.toNormalizedString())).     List<String> roles = mappings.get(dn.toNormalizedString()).     assertThat(roles, notNullValue()).     assertThat(roles, hasSize(2)).     assertThat(roles, containsInAnyOrder("security", "avenger")).     dn = new DN("cn=shield,ou=marvel,o=superheros").     assertThat(mappings, hasKey(dn.toNormalizedString())).     roles = mappings.get(dn.toNormalizedString()).     assertThat(roles, notNullValue()).     assertThat(roles, hasSize(1)).     assertThat(roles, contains("security")).     dn = new DN("cn=Horatio Hornblower,ou=people,o=sevenSeas").     assertThat(mappings, hasKey(dn.toNormalizedString())).     roles = mappings.get(dn.toNormalizedString()).     assertThat(roles, notNullValue()).     assertThat(roles, hasSize(1)).     assertThat(roles, contains("avenger")). }
false;public;0;12;;public void testParseFile_Empty() throws Exception {     Path file = createTempDir().resolve("foo.yaml").     Files.createFile(file).     Logger logger = CapturingLogger.newCapturingLogger(Level.DEBUG, null).     Map<String, List<String>> mappings = DnRoleMapper.parseFile(file, logger, "_type", "_name", false).     assertThat(mappings, notNullValue()).     assertThat(mappings.isEmpty(), is(true)).     List<String> events = CapturingLogger.output(logger.getName(), Level.DEBUG).     assertThat(events.size(), is(1)).     assertThat(events.get(0), containsString("[0] role mappings found")).     events.clear(). }
false;public;0;14;;public void testParseFile_WhenFileDoesNotExist() throws Exception {     Path file = createTempDir().resolve(randomAlphaOfLength(10)).     Logger logger = CapturingLogger.newCapturingLogger(Level.INFO, null).     Map<String, List<String>> mappings = DnRoleMapper.parseFile(file, logger, "_type", "_name", false).     assertThat(mappings, notNullValue()).     assertThat(mappings.isEmpty(), is(true)).     final ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> {         DnRoleMapper.parseFile(file, logger, "_type", "_name", true).     }).     assertThat(exception.getMessage(), containsString(file.toString())).     assertThat(exception.getMessage(), containsString("does not exist")).     assertThat(exception.getMessage(), containsString("_name")). }
false;public;0;12;;public void testParseFile_WhenCannotReadFile() throws Exception {     Path file = createTempFile("", ".yml").     // writing in utf_16 should cause a parsing error as we try to read the file in utf_8     Files.write(file, Collections.singletonList("aldlfkjldjdflkjd"), StandardCharsets.UTF_16).     Logger logger = CapturingLogger.newCapturingLogger(Level.INFO, null).     try {         DnRoleMapper.parseFile(file, logger, "_type", "_name", false).         fail("expected a parse failure").     } catch (Exception e) {         this.logger.info("expected", e).     } }
false;public;0;13;;public void testParseFileLenient_WhenCannotReadFile() throws Exception {     Path file = createTempFile("", ".yml").     // writing in utf_16 should cause a parsing error as we try to read the file in utf_8     Files.write(file, Collections.singletonList("aldlfkjldjdflkjd"), StandardCharsets.UTF_16).     Logger logger = CapturingLogger.newCapturingLogger(Level.INFO, null).     Map<String, List<String>> mappings = DnRoleMapper.parseFileLenient(file, logger, "_type", "_name").     assertThat(mappings, notNullValue()).     assertThat(mappings.isEmpty(), is(true)).     List<String> events = CapturingLogger.output(logger.getName(), Level.ERROR).     assertThat(events.size(), is(1)).     assertThat(events.get(0), containsString("failed to parse role mappings file")).     events.clear(). }
false;public;0;17;;public void testYaml() throws Exception {     Path file = getDataPath("role_mapping.yml").     final RealmConfig.RealmIdentifier realmIdentifier = new RealmConfig.RealmIdentifier("ldap", "ldap1").     Settings ldapSettings = Settings.builder().put(settings).put(getFullSettingKey(realmIdentifier, DnRoleMapperSettings.ROLE_MAPPING_FILE_SETTING), file.toAbsolutePath()).build().     RealmConfig config = new RealmConfig(realmIdentifier, ldapSettings, TestEnvironment.newEnvironment(settings), new ThreadContext(Settings.EMPTY)).     DnRoleMapper mapper = new DnRoleMapper(config, new ResourceWatcherService(settings, threadPool)).     Set<String> roles = mapper.resolveRoles("", Arrays.asList(STARK_GROUP_DNS)).     // verify     assertThat(roles, hasItems("security", "avenger")). }
false;public;0;14;;public void testRelativeDN() {     final RealmConfig.RealmIdentifier realmIdentifier = new RealmConfig.RealmIdentifier("ldap", "ldap1").     Settings ldapSettings = Settings.builder().put(settings).put(getFullSettingKey(realmIdentifier, DnRoleMapperSettings.USE_UNMAPPED_GROUPS_AS_ROLES_SETTING), true).build().     RealmConfig config = new RealmConfig(realmIdentifier, ldapSettings, TestEnvironment.newEnvironment(settings), new ThreadContext(Settings.EMPTY)).     DnRoleMapper mapper = new DnRoleMapper(config, new ResourceWatcherService(settings, threadPool)).     Set<String> roles = mapper.resolveRoles("", Arrays.asList(STARK_GROUP_DNS)).     assertThat(roles, hasItems("genius", "billionaire", "playboy", "philanthropist", "shield", "avengers")). }
false;public;0;16;;public void testUserDNMapping() throws Exception {     final RealmConfig.RealmIdentifier realmIdentifier = new RealmConfig.RealmIdentifier("ldap", "ldap-userdn-role").     Path file = getDataPath("role_mapping.yml").     Settings ldapSettings = Settings.builder().put(settings).put(getFullSettingKey(realmIdentifier, DnRoleMapperSettings.ROLE_MAPPING_FILE_SETTING), file.toAbsolutePath()).put(getFullSettingKey(realmIdentifier, DnRoleMapperSettings.USE_UNMAPPED_GROUPS_AS_ROLES_SETTING), false).build().     RealmConfig config = new RealmConfig(realmIdentifier, ldapSettings, TestEnvironment.newEnvironment(settings), new ThreadContext(Settings.EMPTY)).     DnRoleMapper mapper = new DnRoleMapper(config, new ResourceWatcherService(settings, threadPool)).     Set<String> roles = mapper.resolveRoles("cn=Horatio Hornblower,ou=people,o=sevenSeas", Collections.emptyList()).     assertThat(roles, hasItem("avenger")). }
false;protected;2;9;;protected DnRoleMapper createMapper(Path file, ResourceWatcherService watcherService) {     final RealmConfig.RealmIdentifier identifier = new RealmConfig.RealmIdentifier("ldap", "ad-group-mapper-test").     Settings mergedSettings = Settings.builder().put(settings).put(getFullSettingKey(identifier, DnRoleMapperSettings.ROLE_MAPPING_FILE_SETTING), file.toAbsolutePath()).build().     RealmConfig config = new RealmConfig(identifier, mergedSettings, env, new ThreadContext(Settings.EMPTY)).     return new DnRoleMapper(config, watcherService). }
