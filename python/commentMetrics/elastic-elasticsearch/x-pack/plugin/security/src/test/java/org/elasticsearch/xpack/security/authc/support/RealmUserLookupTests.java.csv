commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     globalSettings = Settings.builder().put("path.home", createTempDir()).build().     env = TestEnvironment.newEnvironment(globalSettings).     threadContext = new ThreadContext(globalSettings). }
false;public;0;7;;public void testNoRealms() throws Exception {     final RealmUserLookup lookup = new RealmUserLookup(Collections.emptyList(), threadContext).     final PlainActionFuture<Tuple<User, Realm>> listener = new PlainActionFuture<>().     lookup.lookup(randomAlphaOfLengthBetween(3, 12), listener).     final Tuple<User, Realm> tuple = listener.get().     assertThat(tuple, nullValue()). }
false;public;0;17;;public void testUserFound() throws Exception {     final List<MockLookupRealm> realms = buildRealms(randomIntBetween(5, 9)).     final RealmUserLookup lookup = new RealmUserLookup(realms, threadContext).     final MockLookupRealm matchRealm = randomFrom(realms).     final User user = new User(randomAlphaOfLength(5)).     matchRealm.registerUser(user).     final PlainActionFuture<Tuple<User, Realm>> listener = new PlainActionFuture<>().     lookup.lookup(user.principal(), listener).     final Tuple<User, Realm> tuple = listener.get().     assertThat(tuple, notNullValue()).     assertThat(tuple.v1(), notNullValue()).     assertThat(tuple.v1(), sameInstance(user)).     assertThat(tuple.v2(), notNullValue()).     assertThat(tuple.v2(), sameInstance(matchRealm)). }
false;public;0;11;;public void testUserNotFound() throws Exception {     final List<MockLookupRealm> realms = buildRealms(randomIntBetween(5, 9)).     final RealmUserLookup lookup = new RealmUserLookup(realms, threadContext).     final String username = randomAlphaOfLength(5).     final PlainActionFuture<Tuple<User, Realm>> listener = new PlainActionFuture<>().     lookup.lookup(username, listener).     final Tuple<User, Realm> tuple = listener.get().     assertThat(tuple, nullValue()). }
false;public;1;4;;@Override public boolean supports(AuthenticationToken token) {     return false. }
false;public;1;4;;@Override public AuthenticationToken token(ThreadContext context) {     return null. }
false;public;2;4;;@Override public void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener) {     listener.onResponse(AuthenticationResult.notHandled()). }
false;public;2;4;;@Override public void lookupUser(String username, ActionListener<User> listener) {     listener.onFailure(new RuntimeException("FAILURE")). }
false;public;0;28;;public void testRealmException() {     final Realm realm = new Realm(new RealmConfig(new RealmIdentifier("test", "test"), globalSettings, env, threadContext)) {          @Override         public boolean supports(AuthenticationToken token) {             return false.         }          @Override         public AuthenticationToken token(ThreadContext context) {             return null.         }          @Override         public void authenticate(AuthenticationToken token, ActionListener<AuthenticationResult> listener) {             listener.onResponse(AuthenticationResult.notHandled()).         }          @Override         public void lookupUser(String username, ActionListener<User> listener) {             listener.onFailure(new RuntimeException("FAILURE")).         }     }.     final RealmUserLookup lookup = new RealmUserLookup(Collections.singletonList(realm), threadContext).     final PlainActionFuture<Tuple<User, Realm>> listener = new PlainActionFuture<>().     lookup.lookup("anyone", listener).     final RuntimeException e = expectThrows(RuntimeException.class, listener::actionGet).     assertThat(e.getMessage(), equalTo("FAILURE")). }
false;private;1;13;;private List<MockLookupRealm> buildRealms(int realmCount) {     final List<MockLookupRealm> realms = new ArrayList<>(realmCount).     for (int i = 1. i <= realmCount. i++) {         final RealmConfig config = new RealmConfig(new RealmIdentifier("mock", "lookup-" + i), globalSettings, env, threadContext).         final MockLookupRealm realm = new MockLookupRealm(config).         for (int j = 0. j < 5. j++) {             realm.registerUser(new User(randomAlphaOfLengthBetween(6, 12))).         }         realms.add(realm).     }     Collections.shuffle(realms, random()).     return realms. }
