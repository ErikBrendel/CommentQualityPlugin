# id;timestamp;commentText;codeText;commentWords;codeWords
SslMultiPortTests -> public void testThatProfileTransportClientCanConnectToClientProfile() throws Exception;1524684173;Uses a transport client with a custom keystore_ this keystore testclient-client-profile.jks trusts the testnode_certificate and had its own self signed certificate. This test connects to the client profile, which is only_set to trust the testclient-client-profile certificate so the connection should always succeed;public void testThatProfileTransportClientCanConnectToClientProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForStore(builder,_                "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.jks",_                "testclient-client-profile")__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,a,custom,keystore,this,keystore,testclient,client,profile,jks,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,client,profile,which,is,only,set,to,trust,the,testclient,client,profile,certificate,so,the,connection,should,always,succeed;public,void,test,that,profile,transport,client,can,connect,to,client,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,store,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,jks,testclient,client,profile,try,transport,client,transport,client,create,transport,client,builder,build,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client
SslMultiPortTests -> public void testThatProfileTransportClientCanConnectToClientProfile() throws Exception;1531910483;Uses a transport client with a custom key pair_ TransportClient only trusts the testnode_certificate and had its own self signed certificate. This test connects to the client profile, which is only_set to trust the testclient-client-profile certificate so the connection should always succeed;public void testThatProfileTransportClientCanConnectToClientProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForPEMFiles(_            builder,_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.pem",_            "testclient-client-profile",_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt",_            Arrays.asList("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,a,custom,key,pair,transport,client,only,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,client,profile,which,is,only,set,to,trust,the,testclient,client,profile,certificate,so,the,connection,should,always,succeed;public,void,test,that,profile,transport,client,can,connect,to,client,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,pemfiles,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,pem,testclient,client,profile,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,arrays,as,list,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,try,transport,client,transport,client,create,transport,client,builder,build,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client
SslMultiPortTests -> public void testThatProfileTransportClientCanConnectToClientProfile() throws Exception;1547499982;Uses a transport client with a custom key pair_ TransportClient only trusts the testnode_certificate and had its own self signed certificate. This test connects to the client profile, which is only_set to trust the testclient-client-profile certificate so the connection should always succeed;public void testThatProfileTransportClientCanConnectToClientProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForPEMFiles(_            builder,_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.pem",_            "testclient-client-profile",_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt",_            Arrays.asList("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,a,custom,key,pair,transport,client,only,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,client,profile,which,is,only,set,to,trust,the,testclient,client,profile,certificate,so,the,connection,should,always,succeed;public,void,test,that,profile,transport,client,can,connect,to,client,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,pemfiles,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,pem,testclient,client,profile,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,arrays,as,list,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,try,transport,client,transport,client,create,transport,client,builder,build,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client
SslMultiPortTests -> public void testThatProfileTransportClientCanConnectToClientProfile() throws Exception;1547586201;Uses a transport client with a custom key pair_ TransportClient only trusts the testnode_certificate and had its own self signed certificate. This test connects to the client profile, which is only_set to trust the testclient-client-profile certificate so the connection should always succeed;public void testThatProfileTransportClientCanConnectToClientProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForPEMFiles(_            builder,_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.pem",_            "testclient-client-profile",_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt",_            Arrays.asList("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            transportClient.addTransportAddress(new TransportAddress(localAddress, getProfilePort("client")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,a,custom,key,pair,transport,client,only,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,client,profile,which,is,only,set,to,trust,the,testclient,client,profile,certificate,so,the,connection,should,always,succeed;public,void,test,that,profile,transport,client,can,connect,to,client,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,pemfiles,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,pem,testclient,client,profile,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,arrays,as,list,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,try,transport,client,transport,client,create,transport,client,builder,build,transport,client,add,transport,address,new,transport,address,local,address,get,profile,port,client,assert,green,cluster,state,transport,client
SslMultiPortTests -> public void testThatTransportClientCannotConnectToClientProfile() throws Exception;1524684173;Uses a transport client with SSL disabled. This test connects to the client profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,client,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientCannotConnectToClientProfile() throws Exception;1531910483;Uses a transport client with SSL disabled. This test connects to the client profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,client,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientCannotConnectToClientProfile() throws Exception;1547499982;Uses a transport client with SSL disabled. This test connects to the client profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,client,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientCannotConnectToClientProfile() throws Exception;1547586201;Uses a transport client with SSL disabled. This test connects to the client profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(localAddress, getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,client,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,local,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCanConnectToNoClientAuthProfile() throws Exception;1524684173;Uses a transport client with a custom truststore_ this truststore truststore-testnode-only only trusts the testnode_certificate and contains no other certification. This test connects to the no_client_auth profile, which uses_the testnode certificate and does not require to present a certificate, so this connection should always succeed;public void testThatTransportClientWithOnlyTruststoreCanConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .put("xpack.security.transport.ssl.enabled", true)_                .put("xpack.ssl.truststore.path",_                        getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/truststore-testnode-only.jks"))_                .put("xpack.ssl.truststore.password", "truststore-testnode-only")_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__        }_    };uses,a,transport,client,with,a,custom,truststore,this,truststore,truststore,testnode,only,only,trusts,the,testnode,certificate,and,contains,no,other,certification,this,test,connects,to,the,profile,which,uses,the,testnode,certificate,and,does,not,require,to,present,a,certificate,so,this,connection,should,always,succeed;public,void,test,that,transport,client,with,only,truststore,can,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,ssl,truststore,path,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,truststore,testnode,only,jks,put,xpack,ssl,truststore,password,truststore,testnode,only,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCanConnectToNoClientAuthProfile() throws Exception;1531910483;Uses a transport client that only trusts the testnode certificate. This test connects to the no_client_auth profile,_which uses  the testnode certificate and does not require to present a certificate, so this connection should always succeed;public void testThatTransportClientWithOnlyTruststoreCanConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.enabled", true)_            .put("xpack.ssl.certificate_authorities",_                getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__        }_    };uses,a,transport,client,that,only,trusts,the,testnode,certificate,this,test,connects,to,the,profile,which,uses,the,testnode,certificate,and,does,not,require,to,present,a,certificate,so,this,connection,should,always,succeed;public,void,test,that,transport,client,with,only,truststore,can,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,ssl,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCanConnectToNoClientAuthProfile() throws Exception;1547499982;Uses a transport client that only trusts the testnode certificate. This test connects to the no_client_auth profile,_which uses  the testnode certificate and does not require to present a certificate, so this connection should always succeed;public void testThatTransportClientWithOnlyTruststoreCanConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.enabled", true)_            .put("xpack.security.transport.ssl.certificate_authorities",_                getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__        }_    };uses,a,transport,client,that,only,trusts,the,testnode,certificate,this,test,connects,to,the,profile,which,uses,the,testnode,certificate,and,does,not,require,to,present,a,certificate,so,this,connection,should,always,succeed;public,void,test,that,transport,client,with,only,truststore,can,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,security,transport,ssl,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCanConnectToNoClientAuthProfile() throws Exception;1547586201;Uses a transport client that only trusts the testnode certificate. This test connects to the no_client_auth profile,_which uses  the testnode certificate and does not require to present a certificate, so this connection should always succeed;public void testThatTransportClientWithOnlyTruststoreCanConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.enabled", true)_            .put("xpack.security.transport.ssl.certificate_authorities",_                getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(localAddress,_                    getProfilePort("no_client_auth")))__        }_    };uses,a,transport,client,that,only,trusts,the,testnode,certificate,this,test,connects,to,the,profile,which,uses,the,testnode,certificate,and,does,not,require,to,present,a,certificate,so,this,connection,should,always,succeed;public,void,test,that,transport,client,with,only,truststore,can,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,security,transport,ssl,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,local,address,get,profile,port
SslMultiPortTests -> public void testThatStandardTransportClientCanConnectToNoClientAuthProfile() throws Exception;1524684173;Uses a transport client with the same settings as the internal cluster transport client to test connection to the_no_client_auth profile. The internal transport client is not used here since we are connecting to a different_profile. Since the no_client_auth profile does not require client authentication, the standard transport client_connection should always succeed as the settings are the same as the default profile except for the port and_disabling the client auth requirement;public void testThatStandardTransportClientCanConnectToNoClientAuthProfile() throws Exception {_        try(TransportClient transportClient = new TestXPackTransportClient(Settings.builder()_                .put(transportClientSettings())_                .put("xpack.security.transport.ssl.enabled", true)_                .put("node.name", "programmatic_transport_client")_                .put("cluster.name", internalCluster().getClusterName())_                .build(), LocalStateSecurity.class)) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,the,same,settings,as,the,internal,cluster,transport,client,to,test,connection,to,the,profile,the,internal,transport,client,is,not,used,here,since,we,are,connecting,to,a,different,profile,since,the,profile,does,not,require,client,authentication,the,standard,transport,client,connection,should,always,succeed,as,the,settings,are,the,same,as,the,default,profile,except,for,the,port,and,disabling,the,client,auth,requirement;public,void,test,that,standard,transport,client,can,connect,to,no,client,auth,profile,throws,exception,try,transport,client,transport,client,new,test,xpack,transport,client,settings,builder,put,transport,client,settings,put,xpack,security,transport,ssl,enabled,true,put,node,name,put,cluster,name,internal,cluster,get,cluster,name,build,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client
SslMultiPortTests -> public void testThatStandardTransportClientCanConnectToNoClientAuthProfile() throws Exception;1531910483;Uses a transport client with the same settings as the internal cluster transport client to test connection to the_no_client_auth profile. The internal transport client is not used here since we are connecting to a different_profile. Since the no_client_auth profile does not require client authentication, the standard transport client_connection should always succeed as the settings are the same as the default profile except for the port and_disabling the client auth requirement;public void testThatStandardTransportClientCanConnectToNoClientAuthProfile() throws Exception {_        try(TransportClient transportClient = new TestXPackTransportClient(Settings.builder()_                .put(transportClientSettings())_                .put("xpack.security.transport.ssl.enabled", true)_                .put("node.name", "programmatic_transport_client")_                .put("cluster.name", internalCluster().getClusterName())_                .build(), LocalStateSecurity.class)) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,the,same,settings,as,the,internal,cluster,transport,client,to,test,connection,to,the,profile,the,internal,transport,client,is,not,used,here,since,we,are,connecting,to,a,different,profile,since,the,profile,does,not,require,client,authentication,the,standard,transport,client,connection,should,always,succeed,as,the,settings,are,the,same,as,the,default,profile,except,for,the,port,and,disabling,the,client,auth,requirement;public,void,test,that,standard,transport,client,can,connect,to,no,client,auth,profile,throws,exception,try,transport,client,transport,client,new,test,xpack,transport,client,settings,builder,put,transport,client,settings,put,xpack,security,transport,ssl,enabled,true,put,node,name,put,cluster,name,internal,cluster,get,cluster,name,build,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client
SslMultiPortTests -> public void testThatStandardTransportClientCanConnectToNoClientAuthProfile() throws Exception;1547499982;Uses a transport client with the same settings as the internal cluster transport client to test connection to the_no_client_auth profile. The internal transport client is not used here since we are connecting to a different_profile. Since the no_client_auth profile does not require client authentication, the standard transport client_connection should always succeed as the settings are the same as the default profile except for the port and_disabling the client auth requirement;public void testThatStandardTransportClientCanConnectToNoClientAuthProfile() throws Exception {_        try(TransportClient transportClient = new TestXPackTransportClient(Settings.builder()_                .put(transportClientSettings())_                .put("xpack.security.transport.ssl.enabled", true)_                .put("node.name", "programmatic_transport_client")_                .put("cluster.name", internalCluster().getClusterName())_                .build(), LocalStateSecurity.class)) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,the,same,settings,as,the,internal,cluster,transport,client,to,test,connection,to,the,profile,the,internal,transport,client,is,not,used,here,since,we,are,connecting,to,a,different,profile,since,the,profile,does,not,require,client,authentication,the,standard,transport,client,connection,should,always,succeed,as,the,settings,are,the,same,as,the,default,profile,except,for,the,port,and,disabling,the,client,auth,requirement;public,void,test,that,standard,transport,client,can,connect,to,no,client,auth,profile,throws,exception,try,transport,client,transport,client,new,test,xpack,transport,client,settings,builder,put,transport,client,settings,put,xpack,security,transport,ssl,enabled,true,put,node,name,put,cluster,name,internal,cluster,get,cluster,name,build,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client
SslMultiPortTests -> public void testThatStandardTransportClientCanConnectToNoClientAuthProfile() throws Exception;1547586201;Uses a transport client with the same settings as the internal cluster transport client to test connection to the_no_client_auth profile. The internal transport client is not used here since we are connecting to a different_profile. Since the no_client_auth profile does not require client authentication, the standard transport client_connection should always succeed as the settings are the same as the default profile except for the port and_disabling the client auth requirement;public void testThatStandardTransportClientCanConnectToNoClientAuthProfile() throws Exception {_        try(TransportClient transportClient = new TestXPackTransportClient(Settings.builder()_                .put(transportClientSettings())_                .put("xpack.security.transport.ssl.enabled", true)_                .put("node.name", "programmatic_transport_client")_                .put("cluster.name", internalCluster().getClusterName())_                .build(), LocalStateSecurity.class)) {_            transportClient.addTransportAddress(new TransportAddress(localAddress,_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,the,same,settings,as,the,internal,cluster,transport,client,to,test,connection,to,the,profile,the,internal,transport,client,is,not,used,here,since,we,are,connecting,to,a,different,profile,since,the,profile,does,not,require,client,authentication,the,standard,transport,client,connection,should,always,succeed,as,the,settings,are,the,same,as,the,default,profile,except,for,the,port,and,disabling,the,client,auth,requirement;public,void,test,that,standard,transport,client,can,connect,to,no,client,auth,profile,throws,exception,try,transport,client,transport,client,new,test,xpack,transport,client,settings,builder,put,transport,client,settings,put,xpack,security,transport,ssl,enabled,true,put,node,name,put,cluster,name,internal,cluster,get,cluster,name,build,local,state,security,class,transport,client,add,transport,address,new,transport,address,local,address,get,profile,port,assert,green,cluster,state,transport,client
SslMultiPortTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1524684173;On each node sets up the following profiles:_<ul>_<li>default: testnode keystore. Requires client auth</li>_<li>client: testnode-client-profile keystore that only trusts the testclient cert. Requires client auth</li>_<li>no_client_auth: testnode keystore. Does not require client auth</li>_</ul>;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        String randomClientPortRange = randomClientPort + "-" + (randomClientPort+100)__        String randomNoClientAuthPortRange = randomNoClientAuthPort + "-" + (randomNoClientAuthPort+100)___        Path store__        try {_            store = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode-client-profile.jks")__            assertThat(Files.exists(store), is(true))__        } catch (Exception e) {_            throw new RuntimeException(e)__        }__        Settings settings = Settings.builder()_                .put(super.nodeSettings(nodeOrdinal))_                _                .put("transport.profiles.client.port", randomClientPortRange)_                _                .put("transport.profiles.client.bind_host", "localhost")_                .put("transport.profiles.client.xpack.security.ssl.truststore.path", store.toAbsolutePath())_                .put("transport.profiles.client.xpack.security.ssl.truststore.password", "testnode-client-profile")_                .put("transport.profiles.no_client_auth.port", randomNoClientAuthPortRange)_                .put("transport.profiles.no_client_auth.bind_host", "localhost")_                .put("transport.profiles.no_client_auth.xpack.security.ssl.client_authentication", SSLClientAuth.NONE)_                .build()__        logger.info("node {} settings:\n{}", nodeOrdinal, settings)__        return settings__    };on,each,node,sets,up,the,following,profiles,ul,li,default,testnode,keystore,requires,client,auth,li,li,client,testnode,client,profile,keystore,that,only,trusts,the,testclient,cert,requires,client,auth,li,li,testnode,keystore,does,not,require,client,auth,li,ul;override,protected,settings,node,settings,int,node,ordinal,string,random,client,port,range,random,client,port,random,client,port,100,string,random,no,client,auth,port,range,random,no,client,auth,port,random,no,client,auth,port,100,path,store,try,store,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,client,profile,jks,assert,that,files,exists,store,is,true,catch,exception,e,throw,new,runtime,exception,e,settings,settings,settings,builder,put,super,node,settings,node,ordinal,put,transport,profiles,client,port,random,client,port,range,put,transport,profiles,client,localhost,put,transport,profiles,client,xpack,security,ssl,truststore,path,store,to,absolute,path,put,transport,profiles,client,xpack,security,ssl,truststore,password,testnode,client,profile,put,transport,profiles,port,random,no,client,auth,port,range,put,transport,profiles,localhost,put,transport,profiles,xpack,security,ssl,sslclient,auth,none,build,logger,info,node,settings,n,node,ordinal,settings,return,settings
SslMultiPortTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1531910483;On each node sets up the following profiles:_<ul>_<li>default: testnode keypair. Requires client auth</li>_<li>client: testnode-client-profile profile  that only trusts the testclient cert. Requires client auth</li>_<li>no_client_auth: testnode keypair. Does not require client auth</li>_</ul>;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        String randomClientPortRange = randomClientPort + "-" + (randomClientPort+100)__        String randomNoClientAuthPortRange = randomNoClientAuthPort + "-" + (randomNoClientAuthPort+100)___        Path trustCert__        try {_            trustCert = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt")__            assertThat(Files.exists(trustCert), is(true))__        } catch (Exception e) {_            throw new RuntimeException(e)__        }__        Settings settings = Settings.builder()_            .put(super.nodeSettings(nodeOrdinal))_            _            .put("transport.profiles.client.port", randomClientPortRange)_            _            .put("transport.profiles.client.bind_host", "localhost")_            .put("transport.profiles.client.xpack.security.ssl.certificate_authorities", trustCert.toAbsolutePath())_            .put("transport.profiles.no_client_auth.port", randomNoClientAuthPortRange)_            .put("transport.profiles.no_client_auth.bind_host", "localhost")_            .put("transport.profiles.no_client_auth.xpack.security.ssl.client_authentication", SSLClientAuth.NONE)_            .build()__        logger.info("node {} settings:\n{}", nodeOrdinal, settings)__        return settings__    };on,each,node,sets,up,the,following,profiles,ul,li,default,testnode,keypair,requires,client,auth,li,li,client,testnode,client,profile,profile,that,only,trusts,the,testclient,cert,requires,client,auth,li,li,testnode,keypair,does,not,require,client,auth,li,ul;override,protected,settings,node,settings,int,node,ordinal,string,random,client,port,range,random,client,port,random,client,port,100,string,random,no,client,auth,port,range,random,no,client,auth,port,random,no,client,auth,port,100,path,trust,cert,try,trust,cert,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,assert,that,files,exists,trust,cert,is,true,catch,exception,e,throw,new,runtime,exception,e,settings,settings,settings,builder,put,super,node,settings,node,ordinal,put,transport,profiles,client,port,random,client,port,range,put,transport,profiles,client,localhost,put,transport,profiles,client,xpack,security,ssl,trust,cert,to,absolute,path,put,transport,profiles,port,random,no,client,auth,port,range,put,transport,profiles,localhost,put,transport,profiles,xpack,security,ssl,sslclient,auth,none,build,logger,info,node,settings,n,node,ordinal,settings,return,settings
SslMultiPortTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1547499982;On each node sets up the following profiles:_<ul>_<li>default: testnode keypair. Requires client auth</li>_<li>client: testnode-client-profile profile  that only trusts the testclient cert. Requires client auth</li>_<li>no_client_auth: testnode keypair. Does not require client auth</li>_</ul>;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        String randomClientPortRange = randomClientPort + "-" + (randomClientPort+100)__        String randomNoClientAuthPortRange = randomNoClientAuthPort + "-" + (randomNoClientAuthPort+100)___        Path trustCert__        try {_            trustCert = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt")__            assertThat(Files.exists(trustCert), is(true))__        } catch (Exception e) {_            throw new RuntimeException(e)__        }__        Settings.Builder builder = Settings.builder().put(super.nodeSettings(nodeOrdinal))__        addSSLSettingsForNodePEMFiles(builder, "transport.profiles.client.xpack.security.", true)__        builder.put("transport.profiles.client.port", randomClientPortRange)_            _            .put("transport.profiles.client.bind_host", "localhost")_            .put("transport.profiles.client.xpack.security.ssl.certificate_authorities", trustCert.toAbsolutePath())__        addSSLSettingsForNodePEMFiles(builder, "transport.profiles.no_client_auth.xpack.security.", true)__        builder.put("transport.profiles.no_client_auth.port", randomNoClientAuthPortRange)_            .put("transport.profiles.no_client_auth.bind_host", "localhost")_            .put("transport.profiles.no_client_auth.xpack.security.ssl.client_authentication", SSLClientAuth.NONE)__        final Settings settings = builder.build()__        logger.info("node {} settings:\n{}", nodeOrdinal, settings)__        return settings__    };on,each,node,sets,up,the,following,profiles,ul,li,default,testnode,keypair,requires,client,auth,li,li,client,testnode,client,profile,profile,that,only,trusts,the,testclient,cert,requires,client,auth,li,li,testnode,keypair,does,not,require,client,auth,li,ul;override,protected,settings,node,settings,int,node,ordinal,string,random,client,port,range,random,client,port,random,client,port,100,string,random,no,client,auth,port,range,random,no,client,auth,port,random,no,client,auth,port,100,path,trust,cert,try,trust,cert,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,assert,that,files,exists,trust,cert,is,true,catch,exception,e,throw,new,runtime,exception,e,settings,builder,builder,settings,builder,put,super,node,settings,node,ordinal,add,sslsettings,for,node,pemfiles,builder,transport,profiles,client,xpack,security,true,builder,put,transport,profiles,client,port,random,client,port,range,put,transport,profiles,client,localhost,put,transport,profiles,client,xpack,security,ssl,trust,cert,to,absolute,path,add,sslsettings,for,node,pemfiles,builder,transport,profiles,xpack,security,true,builder,put,transport,profiles,port,random,no,client,auth,port,range,put,transport,profiles,localhost,put,transport,profiles,xpack,security,ssl,sslclient,auth,none,final,settings,settings,builder,build,logger,info,node,settings,n,node,ordinal,settings,return,settings
SslMultiPortTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1547586201;On each node sets up the following profiles:_<ul>_<li>default: testnode keypair. Requires client auth</li>_<li>client: testnode-client-profile profile  that only trusts the testclient cert. Requires client auth</li>_<li>no_client_auth: testnode keypair. Does not require client auth</li>_</ul>;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        String randomClientPortRange = randomClientPort + "-" + (randomClientPort+100)__        String randomNoClientAuthPortRange = randomNoClientAuthPort + "-" + (randomNoClientAuthPort+100)___        Path trustCert__        try {_            trustCert = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt")__            assertThat(Files.exists(trustCert), is(true))__        } catch (Exception e) {_            throw new RuntimeException(e)__        }__        Settings.Builder builder = Settings.builder().put(super.nodeSettings(nodeOrdinal))__        addSSLSettingsForNodePEMFiles(builder, "transport.profiles.client.xpack.security.", true)__        builder.put("transport.profiles.client.port", randomClientPortRange)_            .put("transport.profiles.client.bind_host", NetworkAddress.format(localAddress))_            .put("transport.profiles.client.xpack.security.ssl.certificate_authorities", trustCert.toAbsolutePath())__        addSSLSettingsForNodePEMFiles(builder, "transport.profiles.no_client_auth.xpack.security.", true)__        builder.put("transport.profiles.no_client_auth.port", randomNoClientAuthPortRange)_            .put("transport.profiles.no_client_auth.bind_host", NetworkAddress.format(localAddress))_            .put("transport.profiles.no_client_auth.xpack.security.ssl.client_authentication", SSLClientAuth.NONE)__        final Settings settings = builder.build()__        logger.info("node {} settings:\n{}", nodeOrdinal, settings)__        return settings__    };on,each,node,sets,up,the,following,profiles,ul,li,default,testnode,keypair,requires,client,auth,li,li,client,testnode,client,profile,profile,that,only,trusts,the,testclient,cert,requires,client,auth,li,li,testnode,keypair,does,not,require,client,auth,li,ul;override,protected,settings,node,settings,int,node,ordinal,string,random,client,port,range,random,client,port,random,client,port,100,string,random,no,client,auth,port,range,random,no,client,auth,port,random,no,client,auth,port,100,path,trust,cert,try,trust,cert,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,assert,that,files,exists,trust,cert,is,true,catch,exception,e,throw,new,runtime,exception,e,settings,builder,builder,settings,builder,put,super,node,settings,node,ordinal,add,sslsettings,for,node,pemfiles,builder,transport,profiles,client,xpack,security,true,builder,put,transport,profiles,client,port,random,client,port,range,put,transport,profiles,client,network,address,format,local,address,put,transport,profiles,client,xpack,security,ssl,trust,cert,to,absolute,path,add,sslsettings,for,node,pemfiles,builder,transport,profiles,xpack,security,true,builder,put,transport,profiles,port,random,no,client,auth,port,range,put,transport,profiles,network,address,format,local,address,put,transport,profiles,xpack,security,ssl,sslclient,auth,none,final,settings,settings,builder,build,logger,info,node,settings,n,node,ordinal,settings,return,settings
SslMultiPortTests -> public void testThatTransportClientCannotConnectToDefaultProfile() throws Exception;1524684173;Uses a transport client with SSL disabled. This test connects to the default profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,default,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientCannotConnectToDefaultProfile() throws Exception;1531910483;Uses a transport client with SSL disabled. This test connects to the default profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,default,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientCannotConnectToDefaultProfile() throws Exception;1547499982;Uses a transport client with SSL disabled. This test connects to the default profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,default,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientCannotConnectToDefaultProfile() throws Exception;1547586201;Uses a transport client with SSL disabled. This test connects to the default profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,default,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatStandardTransportClientCannotConnectToClientProfile() throws Exception;1524684173;Uses a transport client with the same settings as the internal cluster transport client to test connection to the_client profile. The internal transport client is not used here since we are connecting to a different_profile. The client profile requires client auth and only trusts the certificate in the testclient-client-profile_keystore so this connection will fail as the certificate presented by the standard transport client is not trusted_by this profile;public void testThatStandardTransportClientCannotConnectToClientProfile() throws Exception {_        try (TransportClient transportClient = createTransportClient(Settings.EMPTY)) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            transportClient.admin().cluster().prepareHealth().get()__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,same,settings,as,the,internal,cluster,transport,client,to,test,connection,to,the,client,profile,the,internal,transport,client,is,not,used,here,since,we,are,connecting,to,a,different,profile,the,client,profile,requires,client,auth,and,only,trusts,the,certificate,in,the,testclient,client,profile,keystore,so,this,connection,will,fail,as,the,certificate,presented,by,the,standard,transport,client,is,not,trusted,by,this,profile;public,void,test,that,standard,transport,client,cannot,connect,to,client,profile,throws,exception,try,transport,client,transport,client,create,transport,client,settings,empty,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,transport,client,admin,cluster,prepare,health,get,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatStandardTransportClientCannotConnectToClientProfile() throws Exception;1531910483;Uses a transport client with the same settings as the internal cluster transport client to test connection to the_client profile. The internal transport client is not used here since we are connecting to a different_profile. The client profile requires client auth and only trusts the certificate in the testclient-client-profile_keystore so this connection will fail as the certificate presented by the standard transport client is not trusted_by this profile;public void testThatStandardTransportClientCannotConnectToClientProfile() throws Exception {_        try (TransportClient transportClient = createTransportClient(Settings.EMPTY)) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            transportClient.admin().cluster().prepareHealth().get()__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,same,settings,as,the,internal,cluster,transport,client,to,test,connection,to,the,client,profile,the,internal,transport,client,is,not,used,here,since,we,are,connecting,to,a,different,profile,the,client,profile,requires,client,auth,and,only,trusts,the,certificate,in,the,testclient,client,profile,keystore,so,this,connection,will,fail,as,the,certificate,presented,by,the,standard,transport,client,is,not,trusted,by,this,profile;public,void,test,that,standard,transport,client,cannot,connect,to,client,profile,throws,exception,try,transport,client,transport,client,create,transport,client,settings,empty,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,transport,client,admin,cluster,prepare,health,get,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatStandardTransportClientCannotConnectToClientProfile() throws Exception;1547499982;Uses a transport client with the same settings as the internal cluster transport client to test connection to the_client profile. The internal transport client is not used here since we are connecting to a different_profile. The client profile requires client auth and only trusts the certificate in the testclient-client-profile_keystore so this connection will fail as the certificate presented by the standard transport client is not trusted_by this profile;public void testThatStandardTransportClientCannotConnectToClientProfile() throws Exception {_        try (TransportClient transportClient = createTransportClient(Settings.EMPTY)) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            transportClient.admin().cluster().prepareHealth().get()__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,same,settings,as,the,internal,cluster,transport,client,to,test,connection,to,the,client,profile,the,internal,transport,client,is,not,used,here,since,we,are,connecting,to,a,different,profile,the,client,profile,requires,client,auth,and,only,trusts,the,certificate,in,the,testclient,client,profile,keystore,so,this,connection,will,fail,as,the,certificate,presented,by,the,standard,transport,client,is,not,trusted,by,this,profile;public,void,test,that,standard,transport,client,cannot,connect,to,client,profile,throws,exception,try,transport,client,transport,client,create,transport,client,settings,empty,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,transport,client,admin,cluster,prepare,health,get,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatStandardTransportClientCannotConnectToClientProfile() throws Exception;1547586201;Uses a transport client with the same settings as the internal cluster transport client to test connection to the_client profile. The internal transport client is not used here since we are connecting to a different_profile. The client profile requires client auth and only trusts the certificate in the testclient-client-profile_keystore so this connection will fail as the certificate presented by the standard transport client is not trusted_by this profile;public void testThatStandardTransportClientCannotConnectToClientProfile() throws Exception {_        try (TransportClient transportClient = createTransportClient(Settings.EMPTY)) {_            transportClient.addTransportAddress(new TransportAddress(localAddress, getProfilePort("client")))__            transportClient.admin().cluster().prepareHealth().get()__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,same,settings,as,the,internal,cluster,transport,client,to,test,connection,to,the,client,profile,the,internal,transport,client,is,not,used,here,since,we,are,connecting,to,a,different,profile,the,client,profile,requires,client,auth,and,only,trusts,the,certificate,in,the,testclient,client,profile,keystore,so,this,connection,will,fail,as,the,certificate,presented,by,the,standard,transport,client,is,not,trusted,by,this,profile;public,void,test,that,standard,transport,client,cannot,connect,to,client,profile,throws,exception,try,transport,client,transport,client,create,transport,client,settings,empty,transport,client,add,transport,address,new,transport,address,local,address,get,profile,port,client,transport,client,admin,cluster,prepare,health,get,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToDefaultProfile() throws Exception;1524684173;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the default profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .put("xpack.ssl.client_authentication", SSLClientAuth.REQUIRED)_                .put("xpack.security.transport.ssl.enabled", true)_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,default,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToDefaultProfile() throws Exception;1531910483;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the default profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.enabled", true)_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,default,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToDefaultProfile() throws Exception;1547499982;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the default profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.enabled", true)_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,default,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToDefaultProfile() throws Exception;1547586201;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the default profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.enabled", true)_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,default,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatStandardTransportClientCanConnectToDefaultProfile() throws Exception;1524684173;Uses the internal cluster's transport client to test connection to the default profile. The internal transport_client uses the same SSL settings as the default profile so a connection should always succeed;public void testThatStandardTransportClientCanConnectToDefaultProfile() throws Exception {_        assertGreenClusterState(internalCluster().transportClient())__    };uses,the,internal,cluster,s,transport,client,to,test,connection,to,the,default,profile,the,internal,transport,client,uses,the,same,ssl,settings,as,the,default,profile,so,a,connection,should,always,succeed;public,void,test,that,standard,transport,client,can,connect,to,default,profile,throws,exception,assert,green,cluster,state,internal,cluster,transport,client
SslMultiPortTests -> public void testThatStandardTransportClientCanConnectToDefaultProfile() throws Exception;1531910483;Uses the internal cluster's transport client to test connection to the default profile. The internal transport_client uses the same SSL settings as the default profile so a connection should always succeed;public void testThatStandardTransportClientCanConnectToDefaultProfile() throws Exception {_        assertGreenClusterState(internalCluster().transportClient())__    };uses,the,internal,cluster,s,transport,client,to,test,connection,to,the,default,profile,the,internal,transport,client,uses,the,same,ssl,settings,as,the,default,profile,so,a,connection,should,always,succeed;public,void,test,that,standard,transport,client,can,connect,to,default,profile,throws,exception,assert,green,cluster,state,internal,cluster,transport,client
SslMultiPortTests -> public void testThatStandardTransportClientCanConnectToDefaultProfile() throws Exception;1547499982;Uses the internal cluster's transport client to test connection to the default profile. The internal transport_client uses the same SSL settings as the default profile so a connection should always succeed;public void testThatStandardTransportClientCanConnectToDefaultProfile() throws Exception {_        assertGreenClusterState(internalCluster().transportClient())__    };uses,the,internal,cluster,s,transport,client,to,test,connection,to,the,default,profile,the,internal,transport,client,uses,the,same,ssl,settings,as,the,default,profile,so,a,connection,should,always,succeed;public,void,test,that,standard,transport,client,can,connect,to,default,profile,throws,exception,assert,green,cluster,state,internal,cluster,transport,client
SslMultiPortTests -> public void testThatStandardTransportClientCanConnectToDefaultProfile() throws Exception;1547586201;Uses the internal cluster's transport client to test connection to the default profile. The internal transport_client uses the same SSL settings as the default profile so a connection should always succeed;public void testThatStandardTransportClientCanConnectToDefaultProfile() throws Exception {_        assertGreenClusterState(internalCluster().transportClient())__    };uses,the,internal,cluster,s,transport,client,to,test,connection,to,the,default,profile,the,internal,transport,client,uses,the,same,ssl,settings,as,the,default,profile,so,a,connection,should,always,succeed;public,void,test,that,standard,transport,client,can,connect,to,default,profile,throws,exception,assert,green,cluster,state,internal,cluster,transport,client
SslMultiPortTests -> public void testThatProfileTransportClientCannotConnectToDefaultProfile() throws Exception;1524684173;Uses a transport client with a custom keystore_ this keystore testclient-client-profile.jks trusts the testnode_certificate and had its own self signed certificate. This test connects to the default profile, which_uses a truststore that does not trust the testclient-client-profile certificate and requires client authentication_so the connection should always fail;public void testThatProfileTransportClientCannotConnectToDefaultProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForStore(builder,_                "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.jks",_                "testclient-client-profile")__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            TransportAddress transportAddress = randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses())__            transportClient.addTransportAddress(transportAddress)__            transportClient.admin().cluster().prepareHealth().get()__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,a,custom,keystore,this,keystore,testclient,client,profile,jks,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,default,profile,which,uses,a,truststore,that,does,not,trust,the,testclient,client,profile,certificate,and,requires,client,authentication,so,the,connection,should,always,fail;public,void,test,that,profile,transport,client,cannot,connect,to,default,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,store,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,jks,testclient,client,profile,try,transport,client,transport,client,create,transport,client,builder,build,transport,address,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,transport,client,add,transport,address,transport,address,transport,client,admin,cluster,prepare,health,get,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatProfileTransportClientCannotConnectToDefaultProfile() throws Exception;1531910483;Uses a transport client with a custom key pair_ TransportClient only trusts the testnode_certificate and had its own self signed certificate. This test connects to the default profile, which_uses a truststore that does not trust the testclient-client-profile certificate and requires client authentication_so the connection should always fail;public void testThatProfileTransportClientCannotConnectToDefaultProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForPEMFiles(_            builder,_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.pem",_            "testclient-client-profile",_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt",_            Arrays.asList("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            TransportAddress transportAddress = randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses())__            transportClient.addTransportAddress(transportAddress)__            transportClient.admin().cluster().prepareHealth().get()__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,a,custom,key,pair,transport,client,only,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,default,profile,which,uses,a,truststore,that,does,not,trust,the,testclient,client,profile,certificate,and,requires,client,authentication,so,the,connection,should,always,fail;public,void,test,that,profile,transport,client,cannot,connect,to,default,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,pemfiles,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,pem,testclient,client,profile,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,arrays,as,list,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,try,transport,client,transport,client,create,transport,client,builder,build,transport,address,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,transport,client,add,transport,address,transport,address,transport,client,admin,cluster,prepare,health,get,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatProfileTransportClientCannotConnectToDefaultProfile() throws Exception;1547499982;Uses a transport client with a custom key pair_ TransportClient only trusts the testnode_certificate and had its own self signed certificate. This test connects to the default profile, which_uses a truststore that does not trust the testclient-client-profile certificate and requires client authentication_so the connection should always fail;public void testThatProfileTransportClientCannotConnectToDefaultProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForPEMFiles(_            builder,_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.pem",_            "testclient-client-profile",_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt",_            Arrays.asList("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            TransportAddress transportAddress = randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses())__            transportClient.addTransportAddress(transportAddress)__            transportClient.admin().cluster().prepareHealth().get()__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,a,custom,key,pair,transport,client,only,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,default,profile,which,uses,a,truststore,that,does,not,trust,the,testclient,client,profile,certificate,and,requires,client,authentication,so,the,connection,should,always,fail;public,void,test,that,profile,transport,client,cannot,connect,to,default,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,pemfiles,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,pem,testclient,client,profile,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,arrays,as,list,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,try,transport,client,transport,client,create,transport,client,builder,build,transport,address,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,transport,client,add,transport,address,transport,address,transport,client,admin,cluster,prepare,health,get,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatProfileTransportClientCannotConnectToDefaultProfile() throws Exception;1547586201;Uses a transport client with a custom key pair_ TransportClient only trusts the testnode_certificate and had its own self signed certificate. This test connects to the default profile, which_uses a truststore that does not trust the testclient-client-profile certificate and requires client authentication_so the connection should always fail;public void testThatProfileTransportClientCannotConnectToDefaultProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForPEMFiles(_            builder,_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.pem",_            "testclient-client-profile",_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt",_            Arrays.asList("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            TransportAddress transportAddress = randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses())__            transportClient.addTransportAddress(transportAddress)__            transportClient.admin().cluster().prepareHealth().get()__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,a,custom,key,pair,transport,client,only,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,default,profile,which,uses,a,truststore,that,does,not,trust,the,testclient,client,profile,certificate,and,requires,client,authentication,so,the,connection,should,always,fail;public,void,test,that,profile,transport,client,cannot,connect,to,default,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,pemfiles,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,pem,testclient,client,profile,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,arrays,as,list,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,try,transport,client,transport,client,create,transport,client,builder,build,transport,address,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,transport,client,add,transport,address,transport,address,transport,client,admin,cluster,prepare,health,get,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatProfileTransportClientCanConnectToNoClientAuthProfile() throws Exception;1524684173;Uses a transport client with a custom keystore_ this keystore testclient-client-profile.jks trusts the testnode_certificate and had its own self signed certificate. This test connects to the no_client_auth profile, which_uses a truststore that does not trust the testclient-client-profile certificate but does not require client_authentication;public void testThatProfileTransportClientCanConnectToNoClientAuthProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForStore(builder,_                "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.jks",_                "testclient-client-profile")__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,a,custom,keystore,this,keystore,testclient,client,profile,jks,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,profile,which,uses,a,truststore,that,does,not,trust,the,testclient,client,profile,certificate,but,does,not,require,client,authentication;public,void,test,that,profile,transport,client,can,connect,to,no,client,auth,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,store,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,jks,testclient,client,profile,try,transport,client,transport,client,create,transport,client,builder,build,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client
SslMultiPortTests -> public void testThatProfileTransportClientCanConnectToNoClientAuthProfile() throws Exception;1531910483;Uses a transport client with a custom key pair_ TransportClient only trusts the testnode_certificate and had its own self signed certificate. This test connects to the no_client_auth profile, which_uses a truststore that does not trust the testclient-client-profile certificate but does not require client_authentication;public void testThatProfileTransportClientCanConnectToNoClientAuthProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForPEMFiles(_            builder,_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.pem",_            "testclient-client-profile",_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt",_            Arrays.asList("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,a,custom,key,pair,transport,client,only,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,profile,which,uses,a,truststore,that,does,not,trust,the,testclient,client,profile,certificate,but,does,not,require,client,authentication;public,void,test,that,profile,transport,client,can,connect,to,no,client,auth,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,pemfiles,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,pem,testclient,client,profile,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,arrays,as,list,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,try,transport,client,transport,client,create,transport,client,builder,build,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client
SslMultiPortTests -> public void testThatProfileTransportClientCanConnectToNoClientAuthProfile() throws Exception;1547499982;Uses a transport client with a custom key pair_ TransportClient only trusts the testnode_certificate and had its own self signed certificate. This test connects to the no_client_auth profile, which_uses a truststore that does not trust the testclient-client-profile certificate but does not require client_authentication;public void testThatProfileTransportClientCanConnectToNoClientAuthProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForPEMFiles(_            builder,_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.pem",_            "testclient-client-profile",_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt",_            Arrays.asList("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,a,custom,key,pair,transport,client,only,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,profile,which,uses,a,truststore,that,does,not,trust,the,testclient,client,profile,certificate,but,does,not,require,client,authentication;public,void,test,that,profile,transport,client,can,connect,to,no,client,auth,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,pemfiles,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,pem,testclient,client,profile,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,arrays,as,list,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,try,transport,client,transport,client,create,transport,client,builder,build,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client
SslMultiPortTests -> public void testThatProfileTransportClientCanConnectToNoClientAuthProfile() throws Exception;1547586201;Uses a transport client with a custom key pair_ TransportClient only trusts the testnode_certificate and had its own self signed certificate. This test connects to the no_client_auth profile, which_uses a truststore that does not trust the testclient-client-profile certificate but does not require client_authentication;public void testThatProfileTransportClientCanConnectToNoClientAuthProfile() throws Exception {_        Settings.Builder builder = Settings.builder()__        addSSLSettingsForPEMFiles(_            builder,_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.pem",_            "testclient-client-profile",_            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient-client-profile.crt",_            Arrays.asList("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))__        try (TransportClient transportClient = createTransportClient(builder.build())) {_            transportClient.addTransportAddress(new TransportAddress(localAddress,_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__        }_    };uses,a,transport,client,with,a,custom,key,pair,transport,client,only,trusts,the,testnode,certificate,and,had,its,own,self,signed,certificate,this,test,connects,to,the,profile,which,uses,a,truststore,that,does,not,trust,the,testclient,client,profile,certificate,but,does,not,require,client,authentication;public,void,test,that,profile,transport,client,can,connect,to,no,client,auth,profile,throws,exception,settings,builder,builder,settings,builder,add,sslsettings,for,pemfiles,builder,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,pem,testclient,client,profile,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testclient,client,profile,crt,arrays,as,list,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,try,transport,client,transport,client,create,transport,client,builder,build,transport,client,add,transport,address,new,transport,address,local,address,get,profile,port,assert,green,cluster,state,transport,client
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToClientProfile() throws Exception;1524684173;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the client profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .put("xpack.ssl.client_authentication", SSLClientAuth.REQUIRED)_                .put("xpack.security.transport.ssl.enabled", true)_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,client,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToClientProfile() throws Exception;1531910483;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the client profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.enabled", true)_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,client,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToClientProfile() throws Exception;1547499982;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the client profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.enabled", true)_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,client,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToClientProfile() throws Exception;1547586201;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the client profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.enabled", true)_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(localAddress, getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,client,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,local,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToNoClientAuthProfile() throws Exception;1524684173;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the no_client_auth profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .put("xpack.ssl.client_authentication", SSLClientAuth.REQUIRED)_                .put("xpack.security.transport.ssl.enabled", true)_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToNoClientAuthProfile() throws Exception;1531910483;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the no_client_auth profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.enabled", true)_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToNoClientAuthProfile() throws Exception;1547499982;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the no_client_auth profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.enabled", true)_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatSSLTransportClientWithNoTruststoreCannotConnectToNoClientAuthProfile() throws Exception;1547586201;Uses a transport client with the default JDK truststore_ this truststore only trusts the known good public_certificate authorities. This test connects to the no_client_auth profile, which uses a self-signed certificate that_will never be trusted by the default truststore so the connection should always fail;public void testThatSSLTransportClientWithNoTruststoreCannotConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.enabled", true)_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(localAddress,_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,the,default,jdk,truststore,this,truststore,only,trusts,the,known,good,public,certificate,authorities,this,test,connects,to,the,profile,which,uses,a,self,signed,certificate,that,will,never,be,trusted,by,the,default,truststore,so,the,connection,should,always,fail;public,void,test,that,ssltransport,client,with,no,truststore,cannot,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,enabled,true,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,local,address,get,profile,port,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientCannotConnectToNoClientAuthProfile() throws Exception;1524684173;Uses a transport client with SSL disabled. This test connects to the no_client_auth profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientCannotConnectToNoClientAuthProfile() throws Exception;1531910483;Uses a transport client with SSL disabled. This test connects to the no_client_auth profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientCannotConnectToNoClientAuthProfile() throws Exception;1547499982;Uses a transport client with SSL disabled. This test connects to the no_client_auth profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(),_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientCannotConnectToNoClientAuthProfile() throws Exception;1547586201;Uses a transport client with SSL disabled. This test connects to the no_client_auth profile, which should always fail_as a non-ssl transport client cannot connect to a ssl profile;public void testThatTransportClientCannotConnectToNoClientAuthProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(localAddress,_                    getProfilePort("no_client_auth")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,ssl,disabled,this,test,connects,to,the,profile,which,should,always,fail,as,a,non,ssl,transport,client,cannot,connect,to,a,ssl,profile;public,void,test,that,transport,client,cannot,connect,to,no,client,auth,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,local,address,get,profile,port,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCannotConnectToClientProfile() throws Exception;1524684173;Uses a transport client with a custom truststore_ this truststore truststore-testnode-only only trusts the testnode_certificate and contains no other certification. This test connects to the client profile, which uses_the testnode certificate and requires the client to present a certificate, so this connection will never work as_the client has no certificate to present;public void testThatTransportClientWithOnlyTruststoreCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .put("xpack.security.transport.ssl.enabled", true)_                .put("xpack.ssl.client_authentication", SSLClientAuth.REQUIRED)_                .put("xpack.ssl.truststore.path",_                        getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/truststore-testnode-only.jks"))_                .put("xpack.ssl.truststore.password", "truststore-testnode-only")_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,a,custom,truststore,this,truststore,truststore,testnode,only,only,trusts,the,testnode,certificate,and,contains,no,other,certification,this,test,connects,to,the,client,profile,which,uses,the,testnode,certificate,and,requires,the,client,to,present,a,certificate,so,this,connection,will,never,work,as,the,client,has,no,certificate,to,present;public,void,test,that,transport,client,with,only,truststore,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,ssl,sslclient,auth,required,put,xpack,ssl,truststore,path,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,truststore,testnode,only,jks,put,xpack,ssl,truststore,password,truststore,testnode,only,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCannotConnectToClientProfile() throws Exception;1531910483;Uses a transport client that only trusts the testnode certificate. This test connects to the client profile, which uses_the testnode certificate and requires the client to present a certificate, so this connection will never work as_the client has no certificate to present;public void testThatTransportClientWithOnlyTruststoreCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.enabled", true)_            .put("xpack.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.ssl.certificate_authorities",_                getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,that,only,trusts,the,testnode,certificate,this,test,connects,to,the,client,profile,which,uses,the,testnode,certificate,and,requires,the,client,to,present,a,certificate,so,this,connection,will,never,work,as,the,client,has,no,certificate,to,present;public,void,test,that,transport,client,with,only,truststore,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,ssl,sslclient,auth,required,put,xpack,ssl,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCannotConnectToClientProfile() throws Exception;1547499982;Uses a transport client that only trusts the testnode certificate. This test connects to the client profile, which uses_the testnode certificate and requires the client to present a certificate, so this connection will never work as_the client has no certificate to present;public void testThatTransportClientWithOnlyTruststoreCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.enabled", true)_            .put("xpack.security.transport.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.certificate_authorities",_                getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(InetAddress.getLoopbackAddress(), getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,that,only,trusts,the,testnode,certificate,this,test,connects,to,the,client,profile,which,uses,the,testnode,certificate,and,requires,the,client,to,present,a,certificate,so,this,connection,will,never,work,as,the,client,has,no,certificate,to,present;public,void,test,that,transport,client,with,only,truststore,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,security,transport,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,inet,address,get,loopback,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCannotConnectToClientProfile() throws Exception;1547586201;Uses a transport client that only trusts the testnode certificate. This test connects to the client profile, which uses_the testnode certificate and requires the client to present a certificate, so this connection will never work as_the client has no certificate to present;public void testThatTransportClientWithOnlyTruststoreCannotConnectToClientProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.enabled", true)_            .put("xpack.security.transport.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.certificate_authorities",_                getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(new TransportAddress(localAddress, getProfilePort("client")))__            assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,that,only,trusts,the,testnode,certificate,this,test,connects,to,the,client,profile,which,uses,the,testnode,certificate,and,requires,the,client,to,present,a,certificate,so,this,connection,will,never,work,as,the,client,has,no,certificate,to,present;public,void,test,that,transport,client,with,only,truststore,cannot,connect,to,client,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,security,transport,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,new,transport,address,local,address,get,profile,port,client,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCannotConnectToDefaultProfile() throws Exception;1524684173;Uses a transport client with a custom truststore_ this truststore truststore-testnode-only only trusts the testnode_certificate and contains no other certification. This test connects to the default profile, which uses_the testnode certificate and requires the client to present a certificate, so this connection will never work as_the client has no certificate to present;public void testThatTransportClientWithOnlyTruststoreCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_                .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_                .put("cluster.name", internalCluster().getClusterName())_                .put("xpack.security.transport.ssl.enabled", true)_                .put("xpack.ssl.client_authentication", SSLClientAuth.REQUIRED)_                .put("xpack.ssl.truststore.path",_                        getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/truststore-testnode-only.jks"))_                .put("xpack.ssl.truststore.password", "truststore-testnode-only")_                .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__                    assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,with,a,custom,truststore,this,truststore,truststore,testnode,only,only,trusts,the,testnode,certificate,and,contains,no,other,certification,this,test,connects,to,the,default,profile,which,uses,the,testnode,certificate,and,requires,the,client,to,present,a,certificate,so,this,connection,will,never,work,as,the,client,has,no,certificate,to,present;public,void,test,that,transport,client,with,only,truststore,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,ssl,sslclient,auth,required,put,xpack,ssl,truststore,path,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,truststore,testnode,only,jks,put,xpack,ssl,truststore,password,truststore,testnode,only,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCannotConnectToDefaultProfile() throws Exception;1531910483;Uses a transport client that only trusts the testnode certificate. This test connects to the default profile, which uses_the testnode certificate and requires the client to present a certificate, so this connection will never work as_the client has no certificate to present;public void testThatTransportClientWithOnlyTruststoreCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.enabled", true)_            .put("xpack.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.ssl.certificate_authorities",_                getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__                    assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,that,only,trusts,the,testnode,certificate,this,test,connects,to,the,default,profile,which,uses,the,testnode,certificate,and,requires,the,client,to,present,a,certificate,so,this,connection,will,never,work,as,the,client,has,no,certificate,to,present;public,void,test,that,transport,client,with,only,truststore,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,ssl,sslclient,auth,required,put,xpack,ssl,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCannotConnectToDefaultProfile() throws Exception;1547499982;Uses a transport client that only trusts the testnode certificate. This test connects to the default profile, which uses_the testnode certificate and requires the client to present a certificate, so this connection will never work as_the client has no certificate to present;public void testThatTransportClientWithOnlyTruststoreCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.enabled", true)_            .put("xpack.security.transport.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.certificate_authorities",_                getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__                    assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,that,only,trusts,the,testnode,certificate,this,test,connects,to,the,default,profile,which,uses,the,testnode,certificate,and,requires,the,client,to,present,a,certificate,so,this,connection,will,never,work,as,the,client,has,no,certificate,to,present;public,void,test,that,transport,client,with,only,truststore,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,security,transport,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
SslMultiPortTests -> public void testThatTransportClientWithOnlyTruststoreCannotConnectToDefaultProfile() throws Exception;1547586201;Uses a transport client that only trusts the testnode certificate. This test connects to the default profile, which uses_the testnode certificate and requires the client to present a certificate, so this connection will never work as_the client has no certificate to present;public void testThatTransportClientWithOnlyTruststoreCannotConnectToDefaultProfile() throws Exception {_        Settings settings = Settings.builder()_            .put(SecurityField.USER_SETTING.getKey(), TEST_USER_NAME + ":" + TEST_PASSWORD)_            .put("cluster.name", internalCluster().getClusterName())_            .put("xpack.security.transport.ssl.enabled", true)_            .put("xpack.security.transport.ssl.client_authentication", SSLClientAuth.REQUIRED)_            .put("xpack.security.transport.ssl.certificate_authorities",_                getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"))_            .build()__        try (TransportClient transportClient = new TestXPackTransportClient(settings,_                                                                            Collections.singletonList(LocalStateSecurity.class))) {_            transportClient.addTransportAddress(randomFrom(internalCluster().getInstance(Transport.class).boundAddress().boundAddresses()))__                    assertGreenClusterState(transportClient)__            fail("Expected NoNodeAvailableException")__        } catch (NoNodeAvailableException e) {_            assertThat(e.getMessage(), containsString("None of the configured nodes are available: [{#transport#-"))__        }_    };uses,a,transport,client,that,only,trusts,the,testnode,certificate,this,test,connects,to,the,default,profile,which,uses,the,testnode,certificate,and,requires,the,client,to,present,a,certificate,so,this,connection,will,never,work,as,the,client,has,no,certificate,to,present;public,void,test,that,transport,client,with,only,truststore,cannot,connect,to,default,profile,throws,exception,settings,settings,settings,builder,put,security,field,get,key,put,cluster,name,internal,cluster,get,cluster,name,put,xpack,security,transport,ssl,enabled,true,put,xpack,security,transport,ssl,sslclient,auth,required,put,xpack,security,transport,ssl,get,data,path,org,elasticsearch,xpack,security,transport,ssl,certs,simple,testnode,crt,build,try,transport,client,transport,client,new,test,xpack,transport,client,settings,collections,singleton,list,local,state,security,class,transport,client,add,transport,address,random,from,internal,cluster,get,instance,transport,class,bound,address,bound,addresses,assert,green,cluster,state,transport,client,fail,expected,no,node,available,exception,catch,no,node,available,exception,e,assert,that,e,get,message,contains,string,none,of,the,configured,nodes,are,available,transport
