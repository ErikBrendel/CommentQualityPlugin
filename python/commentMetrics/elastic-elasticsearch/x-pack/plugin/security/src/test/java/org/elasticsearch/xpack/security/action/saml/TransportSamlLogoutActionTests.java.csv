commented;modifiers;parameterAmount;loc;comment;code
false;public;0;119;;@Before public void setup() throws Exception {     final Path metadata = PathUtils.get(SamlRealm.class.getResource("idp1.xml").toURI()).     final Settings settings = Settings.builder().put(XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey(), true).put("path.home", createTempDir()).put(getFullSettingKey(REALM_NAME, SamlRealmSettings.IDP_METADATA_PATH), metadata.toString()).put(getFullSettingKey(REALM_NAME, SamlRealmSettings.IDP_ENTITY_ID), SamlRealmTests.TEST_IDP_ENTITY_ID).put(getFullSettingKey(REALM_NAME, SamlRealmSettings.SP_ENTITY_ID), SP_URL).put(getFullSettingKey(REALM_NAME, SamlRealmSettings.SP_ACS), SP_URL).put(getFullSettingKey(REALM_NAME, SamlRealmSettings.PRINCIPAL_ATTRIBUTE.getAttribute()), "uid").build().     final ThreadContext threadContext = new ThreadContext(settings).     final ThreadPool threadPool = mock(ThreadPool.class).     when(threadPool.getThreadContext()).thenReturn(threadContext).     new Authentication(new User("kibana"), new Authentication.RealmRef("realm", "type", "node"), null).writeToContext(threadContext).     indexRequests = new ArrayList<>().     bulkRequests = new ArrayList<>().     client = mock(Client.class).     when(client.threadPool()).thenReturn(threadPool).     when(client.settings()).thenReturn(settings).     doAnswer(invocationOnMock -> {         GetRequestBuilder builder = new GetRequestBuilder(client, GetAction.INSTANCE).         builder.setIndex((String) invocationOnMock.getArguments()[0]).setType((String) invocationOnMock.getArguments()[1]).setId((String) invocationOnMock.getArguments()[2]).         return builder.     }).when(client).prepareGet(anyString(), anyString(), anyString()).     doAnswer(invocationOnMock -> {         IndexRequestBuilder builder = new IndexRequestBuilder(client, IndexAction.INSTANCE).         builder.setIndex((String) invocationOnMock.getArguments()[0]).setType((String) invocationOnMock.getArguments()[1]).setId((String) invocationOnMock.getArguments()[2]).         return builder.     }).when(client).prepareIndex(anyString(), anyString(), anyString()).     doAnswer(invocationOnMock -> {         UpdateRequestBuilder builder = new UpdateRequestBuilder(client, UpdateAction.INSTANCE).         builder.setIndex((String) invocationOnMock.getArguments()[0]).setType((String) invocationOnMock.getArguments()[1]).setId((String) invocationOnMock.getArguments()[2]).         return builder.     }).when(client).prepareUpdate(anyString(), anyString(), anyString()).     doAnswer(invocationOnMock -> {         BulkRequestBuilder builder = new BulkRequestBuilder(client, BulkAction.INSTANCE).         return builder.     }).when(client).prepareBulk().     when(client.prepareMultiGet()).thenReturn(new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE)).     doAnswer(invocationOnMock -> {         ActionListener<MultiGetResponse> listener = (ActionListener<MultiGetResponse>) invocationOnMock.getArguments()[1].         MultiGetResponse response = mock(MultiGetResponse.class).         MultiGetItemResponse[] responses = new MultiGetItemResponse[2].         when(response.getResponses()).thenReturn(responses).         GetResponse oldGetResponse = mock(GetResponse.class).         when(oldGetResponse.isExists()).thenReturn(false).         responses[0] = new MultiGetItemResponse(oldGetResponse, null).         GetResponse getResponse = mock(GetResponse.class).         responses[1] = new MultiGetItemResponse(getResponse, null).         when(getResponse.isExists()).thenReturn(false).         listener.onResponse(response).         return Void.TYPE.     }).when(client).multiGet(any(MultiGetRequest.class), any(ActionListener.class)).     doAnswer(invocationOnMock -> {         IndexRequest indexRequest = (IndexRequest) invocationOnMock.getArguments()[0].         ActionListener<IndexResponse> listener = (ActionListener<IndexResponse>) invocationOnMock.getArguments()[1].         indexRequests.add(indexRequest).         final IndexResponse response = new IndexResponse(indexRequest.shardId(), indexRequest.type(), indexRequest.id(), 1, 1, 1, true).         listener.onResponse(response).         return Void.TYPE.     }).when(client).index(any(IndexRequest.class), any(ActionListener.class)).     doAnswer(invocationOnMock -> {         IndexRequest indexRequest = (IndexRequest) invocationOnMock.getArguments()[1].         ActionListener<IndexResponse> listener = (ActionListener<IndexResponse>) invocationOnMock.getArguments()[2].         indexRequests.add(indexRequest).         final IndexResponse response = new IndexResponse(indexRequest.shardId(), indexRequest.type(), indexRequest.id(), 1, 1, 1, true).         listener.onResponse(response).         return Void.TYPE.     }).when(client).execute(eq(IndexAction.INSTANCE), any(IndexRequest.class), any(ActionListener.class)).     doAnswer(invocationOnMock -> {         BulkRequest bulkRequest = (BulkRequest) invocationOnMock.getArguments()[0].         ActionListener<BulkResponse> listener = (ActionListener<BulkResponse>) invocationOnMock.getArguments()[1].         bulkRequests.add(bulkRequest).         final BulkResponse response = new BulkResponse(new BulkItemResponse[0], 1).         listener.onResponse(response).         return Void.TYPE.     }).when(client).bulk(any(BulkRequest.class), any(ActionListener.class)).     final SecurityIndexManager securityIndex = mock(SecurityIndexManager.class).     doAnswer(inv -> {         ((Runnable) inv.getArguments()[1]).run().         return null.     }).when(securityIndex).prepareIndexIfNeededThenExecute(any(Consumer.class), any(Runnable.class)).     doAnswer(inv -> {         ((Runnable) inv.getArguments()[1]).run().         return null.     }).when(securityIndex).checkIndexVersionThenExecute(any(Consumer.class), any(Runnable.class)).     when(securityIndex.isAvailable()).thenReturn(true).     final ClusterService clusterService = ClusterServiceUtils.createClusterService(threadPool).     tokenService = new TokenService(settings, Clock.systemUTC(), client, securityIndex, clusterService).     final TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     final Realms realms = mock(Realms.class).     action = new TransportSamlLogoutAction(transportService, mock(ActionFilters.class), realms, tokenService).     final Environment env = TestEnvironment.newEnvironment(settings).     final RealmIdentifier realmIdentifier = new RealmIdentifier("saml", REALM_NAME).     final RealmConfig realmConfig = new RealmConfig(realmIdentifier, settings, env, threadContext).     samlRealm = SamlRealm.create(realmConfig, mock(SSLService.class), mock(ResourceWatcherService.class), mock(UserRoleMapper.class)).     when(realms.realm(realmConfig.name())).thenReturn(samlRealm). }
false;public;0;4;;@After public void cleanup() {     samlRealm.close(). }
false;public;0;40;;public void testLogoutInvalidatesToken() throws Exception {     final String session = randomAlphaOfLengthBetween(12, 18).     final String nameId = randomAlphaOfLengthBetween(6, 16).     final Map<String, Object> userMetaData = MapBuilder.<String, Object>newMapBuilder().put(SamlRealm.USER_METADATA_NAMEID_FORMAT, NameID.TRANSIENT).put(SamlRealm.USER_METADATA_NAMEID_VALUE, nameId).map().     final User user = new User("punisher", new String[] { "superuser" }, null, null, userMetaData, true).     final Authentication.RealmRef realmRef = new Authentication.RealmRef(samlRealm.name(), SamlRealmSettings.TYPE, "node01").     final Authentication authentication = new Authentication(user, realmRef, null).     final Map<String, Object> tokenMetaData = samlRealm.createTokenMetadata(new SamlNameId(NameID.TRANSIENT, nameId, null, null, null), session).     final PlainActionFuture<Tuple<UserToken, String>> future = new PlainActionFuture<>().     tokenService.createUserToken(authentication, authentication, future, tokenMetaData, true).     final UserToken userToken = future.actionGet().v1().     mockGetTokenFromId(userToken, false, client).     final String tokenString = tokenService.getUserTokenString(userToken).     final SamlLogoutRequest request = new SamlLogoutRequest().     request.setToken(tokenString).     final PlainActionFuture<SamlLogoutResponse> listener = new PlainActionFuture<>().     action.doExecute(mock(Task.class), request, listener).     final SamlLogoutResponse response = listener.get().     assertThat(response, notNullValue()).     assertThat(response.getRedirectUrl(), notNullValue()).     final IndexRequest indexRequest1 = indexRequests.get(0).     assertThat(indexRequest1, notNullValue()).     assertThat(indexRequest1.id(), startsWith("token")).     assertThat(bulkRequests.size(), equalTo(1)).     final BulkRequest bulkRequest = bulkRequests.get(0).     assertThat(bulkRequest.requests().size(), equalTo(1)).     assertThat(bulkRequest.requests().get(0), instanceOf(UpdateRequest.class)).     assertThat(bulkRequest.requests().get(0).id(), startsWith("token_")).     assertThat(bulkRequest.requests().get(0).toString(), containsString("\"access_token\":{\"invalidated\":true")). }
