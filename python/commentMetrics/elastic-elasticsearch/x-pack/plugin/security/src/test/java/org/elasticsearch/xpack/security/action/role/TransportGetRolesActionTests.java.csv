commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(GetRolesResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;44;;public void testReservedRoles() {     NativeRolesStore rolesStore = mock(NativeRolesStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportGetRolesAction action = new TransportGetRolesAction(mock(ActionFilters.class), rolesStore, transportService, new ReservedRolesStore()).     final int size = randomIntBetween(1, ReservedRolesStore.names().size()).     final List<String> names = randomSubsetOf(size, ReservedRolesStore.names()).     final List<String> expectedNames = new ArrayList<>(names).     doAnswer(invocation -> {         Object[] args = invocation.getArguments().         assert args.length == 2.         ActionListener<RoleRetrievalResult> listener = (ActionListener<RoleRetrievalResult>) args[1].         listener.onResponse(RoleRetrievalResult.success(Collections.emptySet())).         return null.     }).when(rolesStore).getRoleDescriptors(eq(new HashSet<>()), any(ActionListener.class)).     GetRolesRequest request = new GetRolesRequest().     request.names(names.toArray(Strings.EMPTY_ARRAY)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<GetRolesResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<GetRolesResponse>() {          @Override         public void onResponse(GetRolesResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(throwableRef.get(), is(nullValue())).     assertThat(responseRef.get(), is(notNullValue())).     List<String> retrievedRoleNames = Arrays.asList(responseRef.get().roles()).stream().map(RoleDescriptor::getName).collect(Collectors.toList()).     assertThat(retrievedRoleNames, containsInAnyOrder(expectedNames.toArray(Strings.EMPTY_ARRAY))).     verifyZeroInteractions(rolesStore). }
false;public;1;4;;@Override public void onResponse(GetRolesResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;39;;public void testStoreRoles() {     final List<RoleDescriptor> storeRoleDescriptors = randomRoleDescriptors().     NativeRolesStore rolesStore = mock(NativeRolesStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportGetRolesAction action = new TransportGetRolesAction(mock(ActionFilters.class), rolesStore, transportService, new ReservedRolesStore()).     GetRolesRequest request = new GetRolesRequest().     request.names(storeRoleDescriptors.stream().map(RoleDescriptor::getName).collect(Collectors.toList()).toArray(Strings.EMPTY_ARRAY)).     doAnswer(invocation -> {         Object[] args = invocation.getArguments().         assert args.length == 2.         ActionListener<RoleRetrievalResult> listener = (ActionListener<RoleRetrievalResult>) args[1].         listener.onResponse(RoleRetrievalResult.success(new HashSet<>(storeRoleDescriptors))).         return null.     }).when(rolesStore).getRoleDescriptors(eq(new HashSet<>(Arrays.asList(request.names()))), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<GetRolesResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<GetRolesResponse>() {          @Override         public void onResponse(GetRolesResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(throwableRef.get(), is(nullValue())).     assertThat(responseRef.get(), is(notNullValue())).     List<String> retrievedRoleNames = Arrays.asList(responseRef.get().roles()).stream().map(RoleDescriptor::getName).collect(Collectors.toList()).     assertThat(retrievedRoleNames, containsInAnyOrder(request.names())). }
false;public;1;4;;@Override public void onResponse(GetRolesResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;73;;public void testGetAllOrMix() {     final boolean all = randomBoolean().     final List<RoleDescriptor> storeRoleDescriptors = randomRoleDescriptors().     final List<String> storeNames = storeRoleDescriptors.stream().map(RoleDescriptor::getName).collect(Collectors.toList()).     final List<String> reservedRoleNames = new ArrayList<>(ReservedRolesStore.names()).     final List<String> requestedNames = new ArrayList<>().     List<String> specificStoreNames = new ArrayList<>().     if (all == false) {         requestedNames.addAll(randomSubsetOf(randomIntBetween(1, ReservedRolesStore.names().size()), ReservedRolesStore.names())).         specificStoreNames.addAll(randomSubsetOf(randomIntBetween(1, storeNames.size()), storeNames)).         requestedNames.addAll(specificStoreNames).     }     NativeRolesStore rolesStore = mock(NativeRolesStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportGetRolesAction action = new TransportGetRolesAction(mock(ActionFilters.class), rolesStore, transportService, new ReservedRolesStore()).     final List<String> expectedNames = new ArrayList<>().     if (all) {         expectedNames.addAll(reservedRoleNames).         expectedNames.addAll(storeNames).     } else {         expectedNames.addAll(requestedNames).     }     GetRolesRequest request = new GetRolesRequest().     request.names(requestedNames.toArray(Strings.EMPTY_ARRAY)).     doAnswer(invocation -> {         Object[] args = invocation.getArguments().         assert args.length == 2.         Set<String> requestedNames1 = (Set<String>) args[0].         ActionListener<RoleRetrievalResult> listener = (ActionListener<RoleRetrievalResult>) args[1].         if (requestedNames1.size() == 0) {             listener.onResponse(RoleRetrievalResult.success(new HashSet<>(storeRoleDescriptors))).         } else {             listener.onResponse(RoleRetrievalResult.success(storeRoleDescriptors.stream().filter(r -> requestedNames1.contains(r.getName())).collect(Collectors.toSet()))).         }         return null.     }).when(rolesStore).getRoleDescriptors(eq(new HashSet<>(specificStoreNames)), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<GetRolesResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<GetRolesResponse>() {          @Override         public void onResponse(GetRolesResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(throwableRef.get(), is(nullValue())).     assertThat(responseRef.get(), is(notNullValue())).     List<String> retrievedRoleNames = Arrays.asList(responseRef.get().roles()).stream().map(RoleDescriptor::getName).collect(Collectors.toList()).     assertThat(retrievedRoleNames, containsInAnyOrder(expectedNames.toArray(Strings.EMPTY_ARRAY))).     if (all) {         verify(rolesStore, times(1)).getRoleDescriptors(eq(new HashSet<>()), any(ActionListener.class)).     } else {         verify(rolesStore, times(1)).getRoleDescriptors(eq(new HashSet<>(specificStoreNames)), any(ActionListener.class)).     } }
false;public;1;4;;@Override public void onResponse(GetRolesResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;38;;public void testException() {     final Exception e = randomFrom(new ElasticsearchSecurityException(""), new IllegalStateException()).     final List<RoleDescriptor> storeRoleDescriptors = randomRoleDescriptors().     NativeRolesStore rolesStore = mock(NativeRolesStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportGetRolesAction action = new TransportGetRolesAction(mock(ActionFilters.class), rolesStore, transportService, new ReservedRolesStore()).     GetRolesRequest request = new GetRolesRequest().     request.names(storeRoleDescriptors.stream().map(RoleDescriptor::getName).collect(Collectors.toList()).toArray(Strings.EMPTY_ARRAY)).     doAnswer(invocation -> {         Object[] args = invocation.getArguments().         assert args.length == 2.         ActionListener<RoleRetrievalResult> listener = (ActionListener<RoleRetrievalResult>) args[1].         listener.onFailure(e).         return null.     }).when(rolesStore).getRoleDescriptors(eq(new HashSet<>(Arrays.asList(request.names()))), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<GetRolesResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<GetRolesResponse>() {          @Override         public void onResponse(GetRolesResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(throwableRef.get(), is(notNullValue())).     assertThat(throwableRef.get(), is(e)).     assertThat(responseRef.get(), is(nullValue())). }
false;private;0;8;;private List<RoleDescriptor> randomRoleDescriptors() {     int size = scaledRandomIntBetween(1, 10).     List<RoleDescriptor> list = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         list.add(new RoleDescriptor("role_" + i, null, null, null)).     }     return list. }
