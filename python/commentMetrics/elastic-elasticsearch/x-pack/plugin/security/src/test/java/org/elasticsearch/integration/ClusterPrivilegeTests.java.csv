commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setupRepositoryPath() {     repositoryLocation = createTempDir(). }
false;public,static;0;4;;@AfterClass public static void cleanupRepositoryPath() {     repositoryLocation = null. }
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;protected;0;6;;@Override protected Settings nodeSettings() {     return Settings.builder().put(super.nodeSettings()).put("path.repo", repositoryLocation).build(). }
false;protected;0;4;;@Override protected String configRoles() {     return super.configRoles() + "\n" + ROLES. }
false;protected;0;10;;@Override protected String configUsers() {     final String usersPasswdHashed = new String(Hasher.resolve(randomFrom("pbkdf2", "pbkdf2_1000", "bcrypt", "bcrypt9")).hash(new SecureString("passwd".toCharArray()))).     return super.configUsers() + "user_a:" + usersPasswdHashed + "\n" + "user_b:" + usersPasswdHashed + "\n" + "user_c:" + usersPasswdHashed + "\n" + "user_d:" + usersPasswdHashed + "\n". }
false;protected;0;4;;@Override protected String configUsersRoles() {     return super.configUsersRoles() + USERS_ROLES. }
false;public;0;51;;public void testThatClusterPrivilegesWorkAsExpectedViaHttp() throws Exception {     // user_a can do all the things     assertAccessIsAllowed("user_a", "GET", "/_cluster/state").     assertAccessIsAllowed("user_a", "GET", "/_cluster/health").     assertAccessIsAllowed("user_a", "GET", "/_cluster/settings").     assertAccessIsAllowed("user_a", "GET", "/_cluster/stats").     assertAccessIsAllowed("user_a", "GET", "/_cluster/pending_tasks").     assertAccessIsAllowed("user_a", "GET", "/_nodes/stats").     assertAccessIsAllowed("user_a", "GET", "/_nodes/hot_threads").     assertAccessIsAllowed("user_a", "GET", "/_nodes/infos").     assertAccessIsAllowed("user_a", "POST", "/_cluster/reroute").     assertAccessIsAllowed("user_a", "PUT", "/_cluster/settings", "{ \"transient\" : { \"search.default_search_timeout\": \"1m\" } }").     assertAccessIsAllowed("user_a", "PUT", "/_cluster/settings", "{ \"transient\" : { \"search.default_search_timeout\": null } }").     // user_b can do monitoring     assertAccessIsAllowed("user_b", "GET", "/_cluster/state").     assertAccessIsAllowed("user_b", "GET", "/_cluster/health").     assertAccessIsAllowed("user_b", "GET", "/_cluster/settings").     assertAccessIsAllowed("user_b", "GET", "/_cluster/stats").     assertAccessIsAllowed("user_b", "GET", "/_cluster/pending_tasks").     assertAccessIsAllowed("user_b", "GET", "/_nodes/stats").     assertAccessIsAllowed("user_b", "GET", "/_nodes/hot_threads").     assertAccessIsAllowed("user_b", "GET", "/_nodes/infos").     // but no admin stuff     assertAccessIsDenied("user_b", "POST", "/_cluster/reroute").     assertAccessIsDenied("user_b", "PUT", "/_cluster/settings", "{ \"transient\" : { \"search.default_search_timeout\": \"1m\" } }").     // sorry user_c, you are not allowed anything     assertAccessIsDenied("user_c", "GET", "/_cluster/state").     assertAccessIsDenied("user_c", "GET", "/_cluster/health").     assertAccessIsDenied("user_c", "GET", "/_cluster/settings").     assertAccessIsDenied("user_c", "GET", "/_cluster/stats").     assertAccessIsDenied("user_c", "GET", "/_cluster/pending_tasks").     assertAccessIsDenied("user_c", "GET", "/_nodes/stats").     assertAccessIsDenied("user_c", "GET", "/_nodes/hot_threads").     assertAccessIsDenied("user_c", "GET", "/_nodes/infos").     assertAccessIsDenied("user_c", "POST", "/_cluster/reroute").     assertAccessIsDenied("user_c", "PUT", "/_cluster/settings", "{ \"transient\" : { \"search.default_search_timeout\": \"1m\" } }").     // user_d can view repos and create and view snapshots on existings repos, everything else is DENIED     assertAccessIsDenied("user_d", "GET", "/_cluster/state").     assertAccessIsDenied("user_d", "GET", "/_cluster/health").     assertAccessIsDenied("user_d", "GET", "/_cluster/settings").     assertAccessIsDenied("user_d", "GET", "/_cluster/stats").     assertAccessIsDenied("user_d", "GET", "/_cluster/pending_tasks").     assertAccessIsDenied("user_d", "GET", "/_nodes/stats").     assertAccessIsDenied("user_d", "GET", "/_nodes/hot_threads").     assertAccessIsDenied("user_d", "GET", "/_nodes/infos").     assertAccessIsDenied("user_d", "POST", "/_cluster/reroute").     assertAccessIsDenied("user_d", "PUT", "/_cluster/settings", "{ \"transient\" : { \"search.default_search_timeout\": \"1m\" } }"). }
false;public;0;58;;public void testThatSnapshotAndRestore() throws Exception {     String repoJson = Strings.toString(jsonBuilder().startObject().field("type", "fs").startObject("settings").field("location", repositoryLocation.toString()).endObject().endObject()).     assertAccessIsDenied("user_b", "PUT", "/_snapshot/my-repo", repoJson).     assertAccessIsDenied("user_c", "PUT", "/_snapshot/my-repo", repoJson).     assertAccessIsDenied("user_d", "PUT", "/_snapshot/my-repo", repoJson).     assertAccessIsAllowed("user_a", "PUT", "/_snapshot/my-repo", repoJson).     Request createBar = new Request("PUT", "/someindex/bar/1").     createBar.setJsonEntity("{ \"name\" : \"elasticsearch\" }").     createBar.addParameter("refresh", "true").     assertAccessIsDenied("user_a", createBar).     assertAccessIsDenied("user_b", createBar).     assertAccessIsDenied("user_d", createBar).     assertAccessIsAllowed("user_c", createBar).     assertAccessIsDenied("user_b", "PUT", "/_snapshot/my-repo/my-snapshot", "{ \"indices\": \"someindex\" }").     assertAccessIsDenied("user_c", "PUT", "/_snapshot/my-repo/my-snapshot", "{ \"indices\": \"someindex\" }").     assertAccessIsAllowed("user_a", "PUT", "/_snapshot/my-repo/my-snapshot", "{ \"indices\": \"someindex\" }").     assertAccessIsDenied("user_b", "GET", "/_snapshot/my-repo/my-snapshot/_status").     assertAccessIsDenied("user_c", "GET", "/_snapshot/my-repo/my-snapshot/_status").     assertAccessIsAllowed("user_a", "GET", "/_snapshot/my-repo/my-snapshot/_status").     assertAccessIsAllowed("user_d", "GET", "/_snapshot/my-repo/my-snapshot/_status").     // This snapshot needs to be finished in order to be restored     waitForSnapshotToFinish("my-repo", "my-snapshot").     // user_d can create snapshots, but not concurrently     assertAccessIsAllowed("user_d", "PUT", "/_snapshot/my-repo/my-snapshot-d", "{ \"indices\": \"someindex\" }").     waitForSnapshotToFinish("my-repo", "my-snapshot-d").     assertAccessIsDenied("user_a", "DELETE", "/someindex").     assertAccessIsDenied("user_b", "DELETE", "/someindex").     assertAccessIsDenied("user_d", "DELETE", "/someindex").     assertAccessIsAllowed("user_c", "DELETE", "/someindex").     Request restoreSnapshotRequest = new Request("POST", "/_snapshot/my-repo/my-snapshot/_restore").     restoreSnapshotRequest.addParameter("wait_for_completion", "true").     assertAccessIsDenied("user_b", restoreSnapshotRequest).     assertAccessIsDenied("user_c", restoreSnapshotRequest).     assertAccessIsDenied("user_d", restoreSnapshotRequest).     assertAccessIsAllowed("user_a", restoreSnapshotRequest).     assertAccessIsDenied("user_a", "GET", "/someindex/bar/1").     assertAccessIsDenied("user_b", "GET", "/someindex/bar/1").     assertAccessIsDenied("user_d", "GET", "/someindex/bar/1").     assertAccessIsAllowed("user_c", "GET", "/someindex/bar/1").     assertAccessIsDenied("user_b", "DELETE", "/_snapshot/my-repo/my-snapshot").     assertAccessIsDenied("user_c", "DELETE", "/_snapshot/my-repo/my-snapshot").     assertAccessIsDenied("user_d", "DELETE", "/_snapshot/my-repo/my-snapshot").     assertAccessIsAllowed("user_a", "DELETE", "/_snapshot/my-repo/my-snapshot").     assertAccessIsDenied("user_b", "DELETE", "/_snapshot/my-repo").     assertAccessIsDenied("user_c", "DELETE", "/_snapshot/my-repo").     assertAccessIsDenied("user_d", "DELETE", "/_snapshot/my-repo").     assertAccessIsAllowed("user_a", "DELETE", "/_snapshot/my-repo"). }
false;private;2;6;;private void waitForSnapshotToFinish(String repo, String snapshot) throws Exception {     assertBusy(() -> {         SnapshotsStatusResponse response = client().admin().cluster().prepareSnapshotStatus(repo).setSnapshots(snapshot).get().         assertThat(response.getSnapshots().get(0).getState(), is(SnapshotsInProgress.State.SUCCESS)).     }). }
