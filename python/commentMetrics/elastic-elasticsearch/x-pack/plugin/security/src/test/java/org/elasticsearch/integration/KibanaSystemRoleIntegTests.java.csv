commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public String configUsers() {     final String usersPasswdHashed = new String(getFastStoredHashAlgoForTests().hash(USERS_PASSWD)).     return super.configUsers() + "kibana_system:" + usersPasswdHashed. }
false;public;0;5;;@Override public String configUsersRoles() {     return super.configUsersRoles() + "kibana_system:kibana_system". }
false;public;0;26;;public void testCreateIndexDeleteInKibanaIndex() throws Exception {     final String index = randomBoolean() ? ".kibana" : ".kibana-" + randomAlphaOfLengthBetween(1, 10).toLowerCase(Locale.ENGLISH).     if (randomBoolean()) {         CreateIndexResponse createIndexResponse = client().filterWithHeader(singletonMap("Authorization", UsernamePasswordToken.basicAuthHeaderValue("kibana_system", USERS_PASSWD))).admin().indices().prepareCreate(index).get().         assertThat(createIndexResponse.isAcknowledged(), is(true)).     }     IndexResponse response = client().filterWithHeader(singletonMap("Authorization", UsernamePasswordToken.basicAuthHeaderValue("kibana_system", USERS_PASSWD))).prepareIndex().setIndex(index).setType("dashboard").setSource("foo", "bar").setRefreshPolicy(IMMEDIATE).get().     assertEquals(DocWriteResponse.Result.CREATED, response.getResult()).     DeleteResponse deleteResponse = client().filterWithHeader(singletonMap("Authorization", UsernamePasswordToken.basicAuthHeaderValue("kibana_system", USERS_PASSWD))).prepareDelete(index, "dashboard", response.getId()).get().     assertEquals(DocWriteResponse.Result.DELETED, deleteResponse.getResult()). }
