commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;public void testToXcontent() throws Exception {     TokensInvalidationResult result = new TokensInvalidationResult(Arrays.asList("token1", "token2"), Arrays.asList("token3", "token4"), Arrays.asList(new ElasticsearchException("foo", new IllegalStateException("bar")), new ElasticsearchException("boo", new IllegalStateException("far"))), randomIntBetween(0, 5)).     try (XContentBuilder builder = JsonXContent.contentBuilder()) {         result.toXContent(builder, ToXContent.EMPTY_PARAMS).         assertThat(Strings.toString(builder), equalTo("{\"invalidated_tokens\":2," + "\"previously_invalidated_tokens\":2," + "\"error_count\":2," + "\"error_details\":[" + "{\"type\":\"exception\"," + "\"reason\":\"foo\"," + "\"caused_by\":{" + "\"type\":\"illegal_state_exception\"," + "\"reason\":\"bar\"" + "}" + "}," + "{\"type\":\"exception\"," + "\"reason\":\"boo\"," + "\"caused_by\":{" + "\"type\":\"illegal_state_exception\"," + "\"reason\":\"far\"" + "}" + "}" + "]" + "}")).     } }
false;public;0;14;;public void testToXcontentWithNoErrors() throws Exception {     TokensInvalidationResult result = new TokensInvalidationResult(Arrays.asList("token1", "token2"), Collections.emptyList(), Collections.emptyList(), randomIntBetween(0, 5)).     try (XContentBuilder builder = JsonXContent.contentBuilder()) {         result.toXContent(builder, ToXContent.EMPTY_PARAMS).         assertThat(Strings.toString(builder), equalTo("{\"invalidated_tokens\":2," + "\"previously_invalidated_tokens\":0," + "\"error_count\":0" + "}")).     } }
