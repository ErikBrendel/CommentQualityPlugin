commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected String configUsers() {     final String usersPasswdHashed = new String(getFastStoredHashAlgoForTests().hash(USERS_PASSWD)).     return super.configUsers() + "user1:" + usersPasswdHashed + "\n". }
false;protected;0;5;;@Override protected String configUsersRoles() {     return super.configUsersRoles() + "role1:user1\n". }
false;protected;0;9;;@Override protected String configRoles() {     return super.configRoles() + "\nrole1:\n" + "  cluster: [ none ]\n" + "  indices:\n" + "    - names: 'datemath-*'\n" + "      privileges: [ ALL ]\n". }
false;public;0;56;;public void testDateMathExpressionsCanBeAuthorized() throws Exception {     final String expression = "<datemath-{now/M}>".     final String expectedIndexName = new IndexNameExpressionResolver().resolveDateMathExpression(expression).     final boolean refeshOnOperation = randomBoolean().     Client client = client().filterWithHeader(Collections.singletonMap("Authorization", basicAuthHeaderValue("user1", USERS_PASSWD))).     if (randomBoolean()) {         CreateIndexResponse response = client.admin().indices().prepareCreate(expression).get().         assertThat(response.isAcknowledged(), is(true)).     }     IndexResponse response = client.prepareIndex(expression, "type").setSource("foo", "bar").setRefreshPolicy(refeshOnOperation ? IMMEDIATE : NONE).get().     assertEquals(DocWriteResponse.Result.CREATED, response.getResult()).     assertThat(response.getIndex(), containsString(expectedIndexName)).     if (refeshOnOperation == false) {         client.admin().indices().prepareRefresh(expression).get().     }     SearchResponse searchResponse = client.prepareSearch(expression).setQuery(QueryBuilders.matchAllQuery()).get().     assertThat(searchResponse.getHits().getTotalHits().value, is(1L)).     MultiSearchResponse multiSearchResponse = client.prepareMultiSearch().add(client.prepareSearch(expression).setQuery(QueryBuilders.matchAllQuery()).request()).get().     assertThat(multiSearchResponse.getResponses()[0].getResponse().getHits().getTotalHits().value, is(1L)).     UpdateResponse updateResponse = client.prepareUpdate(expression, "type", response.getId()).setDoc(Requests.INDEX_CONTENT_TYPE, "new", "field").setRefreshPolicy(refeshOnOperation ? IMMEDIATE : NONE).get().     assertEquals(DocWriteResponse.Result.UPDATED, updateResponse.getResult()).     if (refeshOnOperation == false) {         client.admin().indices().prepareRefresh(expression).get().     }     GetResponse getResponse = client.prepareGet(expression, "type", response.getId()).setFetchSource(true).get().     assertThat(getResponse.isExists(), is(true)).     assertEquals(expectedIndexName, getResponse.getIndex()).     assertThat(getResponse.getSourceAsMap().get("foo").toString(), is("bar")).     assertThat(getResponse.getSourceAsMap().get("new").toString(), is("field")).     // multi get doesn't support expressions - this is probably a bug     MultiGetResponse multiGetResponse = client.prepareMultiGet().add(expression, "type", response.getId()).get().     assertFalse(multiGetResponse.getResponses()[0].isFailed()).     assertTrue(multiGetResponse.getResponses()[0].getResponse().isExists()).     assertEquals(expectedIndexName, multiGetResponse.getResponses()[0].getResponse().getIndex()).     AcknowledgedResponse deleteIndexResponse = client.admin().indices().prepareDelete(expression).get().     assertThat(deleteIndexResponse.isAcknowledged(), is(true)). }
