commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(PutUserResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;30;;public void testAnonymousUser() {     Settings settings = Settings.builder().put(AnonymousUser.ROLES_SETTING.getKey(), "superuser").build().     final AnonymousUser anonymousUser = new AnonymousUser(settings).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportPutUserAction action = new TransportPutUserAction(settings, mock(ActionFilters.class), usersStore, transportService).     PutUserRequest request = new PutUserRequest().     request.username(anonymousUser.principal()).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<PutUserResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<PutUserResponse>() {          @Override         public void onResponse(PutUserResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is anonymous and cannot be modified")).     verifyZeroInteractions(usersStore). }
false;public;1;4;;@Override public void onResponse(PutUserResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;28;;public void testSystemUser() {     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportPutUserAction action = new TransportPutUserAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService).     PutUserRequest request = new PutUserRequest().     request.username(randomFrom(SystemUser.INSTANCE.principal(), XPackUser.INSTANCE.principal())).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<PutUserResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<PutUserResponse>() {          @Override         public void onResponse(PutUserResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is internal")).     verifyZeroInteractions(usersStore). }
false;public;1;4;;@Override public void onResponse(PutUserResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;39;;public void testReservedUser() {     NativeUsersStore usersStore = mock(NativeUsersStore.class).     SecurityIndexManager securityIndex = mock(SecurityIndexManager.class).     when(securityIndex.isAvailable()).thenReturn(true).     ReservedRealmTests.mockGetAllReservedUserInfo(usersStore, Collections.emptyMap()).     Settings settings = Settings.builder().put("path.home", createTempDir()).build().     final ThreadPool threadPool = mock(ThreadPool.class).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(settings)).     ReservedRealm reservedRealm = new ReservedRealm(TestEnvironment.newEnvironment(settings), settings, usersStore, new AnonymousUser(settings), securityIndex, threadPool).     PlainActionFuture<Collection<User>> userFuture = new PlainActionFuture<>().     reservedRealm.users(userFuture).     final User reserved = randomFrom(userFuture.actionGet().toArray(new User[0])).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportPutUserAction action = new TransportPutUserAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService).     PutUserRequest request = new PutUserRequest().     request.username(reserved.principal()).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<PutUserResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<PutUserResponse>() {          @Override         public void onResponse(PutUserResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is reserved and only the password")). }
false;public;1;7;;public Void answer(InvocationOnMock invocation) {     Object[] args = invocation.getArguments().     assert args.length == 2.     ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].     listener.onResponse(created).     return null. }
false;public;1;4;;@Override public void onResponse(PutUserResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;45;;public void testValidUser() {     final User user = new User("joe").     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportPutUserAction action = new TransportPutUserAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService).     final boolean isCreate = randomBoolean().     final PutUserRequest request = new PutUserRequest().     request.username(user.principal()).     if (isCreate) {         request.passwordHash(Hasher.resolve(randomFrom("pbkdf2", "pbkdf2_1000", "bcrypt", "bcrypt9")).hash(SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)).     }     // updates should always return false for create     final boolean created = isCreate ? randomBoolean() : false.     doAnswer(new Answer() {          public Void answer(InvocationOnMock invocation) {             Object[] args = invocation.getArguments().             assert args.length == 2.             ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].             listener.onResponse(created).             return null.         }     }).when(usersStore).putUser(eq(request), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<PutUserResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<PutUserResponse>() {          @Override         public void onResponse(PutUserResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(throwableRef.get(), is(nullValue())).     assertThat(responseRef.get(), is(notNullValue())).     assertThat(responseRef.get().created(), is(created)).     verify(usersStore, times(1)).putUser(eq(request), any(ActionListener.class)). }
false;public;0;19;;public void testInvalidUser() {     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportPutUserAction action = new TransportPutUserAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService).     final PutUserRequest request = new PutUserRequest().     request.username("fóóbár").     request.roles("bar").     ActionRequestValidationException validation = request.validate().     assertNull(validation).     PlainActionFuture<PutUserResponse> responsePlainActionFuture = new PlainActionFuture<>().     action.doExecute(mock(Task.class), request, responsePlainActionFuture).     validation = expectThrows(ActionRequestValidationException.class, responsePlainActionFuture::actionGet).     assertThat(validation.validationErrors(), contains(containsString("must be"))).     assertThat(validation.validationErrors().size(), is(1)). }
false;public;1;7;;public Void answer(InvocationOnMock invocation) {     Object[] args = invocation.getArguments().     assert args.length == 2.     ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].     listener.onFailure(e).     return null. }
false;public;1;4;;@Override public void onResponse(PutUserResponse response) {     responseRef.set(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;40;;public void testException() {     final Exception e = randomFrom(new ElasticsearchSecurityException(""), new IllegalStateException(), new ValidationException()).     final User user = new User("joe").     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportPutUserAction action = new TransportPutUserAction(Settings.EMPTY, mock(ActionFilters.class), usersStore, transportService).     final PutUserRequest request = new PutUserRequest().     request.username(user.principal()).     doAnswer(new Answer() {          public Void answer(InvocationOnMock invocation) {             Object[] args = invocation.getArguments().             assert args.length == 2.             ActionListener<Boolean> listener = (ActionListener<Boolean>) args[1].             listener.onFailure(e).             return null.         }     }).when(usersStore).putUser(eq(request), any(ActionListener.class)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<PutUserResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<PutUserResponse>() {          @Override         public void onResponse(PutUserResponse response) {             responseRef.set(response).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), is(notNullValue())).     assertThat(throwableRef.get(), sameInstance(e)).     verify(usersStore, times(1)).putUser(eq(request), any(ActionListener.class)). }
