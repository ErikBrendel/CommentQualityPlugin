commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setHasher() {     hasher = getFastStoredHashAlgoForTests(). }
false;public;1;8;;@Override public Settings nodeSettings(int nodeOrdinal) {     Settings settings = Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("xpack.security.authc.password_hashing.algorithm", hasher.name()).build().     return settings. }
false;public;0;14;;public void testAuthenticate() {     final List<String> usernames = Arrays.asList(ElasticUser.NAME, KibanaUser.NAME, LogstashSystemUser.NAME, BeatsSystemUser.NAME, APMSystemUser.NAME, RemoteMonitoringUser.NAME).     for (String username : usernames) {         ClusterHealthResponse response = client().filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(username, getReservedPassword()))).admin().cluster().prepareHealth().get().         assertThat(response.getClusterName(), is(cluster().getClusterName())).     } }
true;public;0;16;/**  * Enabling a user forces a doc to be written to the security index, and "user doc with empty password" has a special case code in  * the reserved realm.  */ ;/**  * Enabling a user forces a doc to be written to the security index, and "user doc with empty password" has a special case code in  * the reserved realm.  */ public void testAuthenticateAfterEnablingUser() {     final SecurityClient c = securityClient().     final List<String> usernames = Arrays.asList(ElasticUser.NAME, KibanaUser.NAME, LogstashSystemUser.NAME, BeatsSystemUser.NAME, APMSystemUser.NAME, RemoteMonitoringUser.NAME).     for (String username : usernames) {         c.prepareSetEnabled(username, true).get().         ClusterHealthResponse response = client().filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(username, getReservedPassword()))).admin().cluster().prepareHealth().get().         assertThat(response.getClusterName(), is(cluster().getClusterName())).     } }
false;public;0;36;;public void testChangingPassword() {     String username = randomFrom(ElasticUser.NAME, KibanaUser.NAME, LogstashSystemUser.NAME, BeatsSystemUser.NAME, APMSystemUser.NAME, RemoteMonitoringUser.NAME).     final char[] newPassword = "supersecretvalue".toCharArray().     if (randomBoolean()) {         ClusterHealthResponse response = client().filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(username, getReservedPassword()))).admin().cluster().prepareHealth().get().         assertThat(response.getClusterName(), is(cluster().getClusterName())).     }     ChangePasswordResponse response = securityClient().prepareChangePassword(username, Arrays.copyOf(newPassword, newPassword.length), hasher).get().     assertThat(response, notNullValue()).     ElasticsearchSecurityException elasticsearchSecurityException = expectThrows(ElasticsearchSecurityException.class, () -> client().filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(username, getReservedPassword()))).admin().cluster().prepareHealth().get()).     assertThat(elasticsearchSecurityException.getMessage(), containsString("authenticate")).     ClusterHealthResponse healthResponse = client().filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(username, new SecureString(newPassword)))).admin().cluster().prepareHealth().get().     assertThat(healthResponse.getClusterName(), is(cluster().getClusterName())). }
false;public;0;30;;public void testDisablingUser() throws Exception {     // validate the user works     ClusterHealthResponse response = client().filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(ElasticUser.NAME, getReservedPassword()))).admin().cluster().prepareHealth().get().     assertThat(response.getClusterName(), is(cluster().getClusterName())).     // disable user     securityClient().prepareSetEnabled(ElasticUser.NAME, false).get().     ElasticsearchSecurityException elasticsearchSecurityException = expectThrows(ElasticsearchSecurityException.class, () -> client().filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(ElasticUser.NAME, getReservedPassword()))).admin().cluster().prepareHealth().get()).     assertThat(elasticsearchSecurityException.getMessage(), containsString("authenticate")).     // enable     securityClient().prepareSetEnabled(ElasticUser.NAME, true).get().     response = client().filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(ElasticUser.NAME, getReservedPassword()))).admin().cluster().prepareHealth().get().     assertThat(response.getClusterName(), is(cluster().getClusterName())). }
