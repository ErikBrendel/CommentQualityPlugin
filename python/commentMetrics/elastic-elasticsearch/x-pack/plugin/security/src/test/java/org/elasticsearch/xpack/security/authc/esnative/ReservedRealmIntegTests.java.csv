# id;timestamp;commentText;codeText;commentWords;codeWords
ReservedRealmIntegTests -> public void testAuthenticateAfterEnablingUser();1524684173;Enabling a user forces a doc to be written to the security index, and "user doc with empty password" has a special case code in_the reserved realm.;public void testAuthenticateAfterEnablingUser() {_        final SecurityClient c = securityClient()__        for (String username : Arrays.asList(ElasticUser.NAME, KibanaUser.NAME, LogstashSystemUser.NAME, BeatsSystemUser.NAME)) {_            c.prepareSetEnabled(username, true).get()__            ClusterHealthResponse response = client()_                    .filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(username, getReservedPassword())))_                    .admin()_                    .cluster()_                    .prepareHealth()_                    .get()___            assertThat(response.getClusterName(), is(cluster().getClusterName()))__        }_    };enabling,a,user,forces,a,doc,to,be,written,to,the,security,index,and,user,doc,with,empty,password,has,a,special,case,code,in,the,reserved,realm;public,void,test,authenticate,after,enabling,user,final,security,client,c,security,client,for,string,username,arrays,as,list,elastic,user,name,kibana,user,name,logstash,system,user,name,beats,system,user,name,c,prepare,set,enabled,username,true,get,cluster,health,response,response,client,filter,with,header,singleton,map,authorization,basic,auth,header,value,username,get,reserved,password,admin,cluster,prepare,health,get,assert,that,response,get,cluster,name,is,cluster,get,cluster,name
ReservedRealmIntegTests -> public void testAuthenticateAfterEnablingUser();1531179852;Enabling a user forces a doc to be written to the security index, and "user doc with empty password" has a special case code in_the reserved realm.;public void testAuthenticateAfterEnablingUser() {_        final SecurityClient c = securityClient()__        for (String username : Arrays.asList(ElasticUser.NAME, KibanaUser.NAME, LogstashSystemUser.NAME, BeatsSystemUser.NAME)) {_            c.prepareSetEnabled(username, true).get()__            ClusterHealthResponse response = client()_                    .filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(username, getReservedPassword())))_                    .admin()_                    .cluster()_                    .prepareHealth()_                    .get()___            assertThat(response.getClusterName(), is(cluster().getClusterName()))__        }_    };enabling,a,user,forces,a,doc,to,be,written,to,the,security,index,and,user,doc,with,empty,password,has,a,special,case,code,in,the,reserved,realm;public,void,test,authenticate,after,enabling,user,final,security,client,c,security,client,for,string,username,arrays,as,list,elastic,user,name,kibana,user,name,logstash,system,user,name,beats,system,user,name,c,prepare,set,enabled,username,true,get,cluster,health,response,response,client,filter,with,header,singleton,map,authorization,basic,auth,header,value,username,get,reserved,password,admin,cluster,prepare,health,get,assert,that,response,get,cluster,name,is,cluster,get,cluster,name
ReservedRealmIntegTests -> public void testAuthenticateAfterEnablingUser();1535383145;Enabling a user forces a doc to be written to the security index, and "user doc with empty password" has a special case code in_the reserved realm.;public void testAuthenticateAfterEnablingUser() {_        final SecurityClient c = securityClient()__        final List<String> usernames = Arrays.asList(ElasticUser.NAME, KibanaUser.NAME, LogstashSystemUser.NAME,_            BeatsSystemUser.NAME, APMSystemUser.NAME)__        for (String username : usernames) {_            c.prepareSetEnabled(username, true).get()__            ClusterHealthResponse response = client()_                    .filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(username, getReservedPassword())))_                    .admin()_                    .cluster()_                    .prepareHealth()_                    .get()___            assertThat(response.getClusterName(), is(cluster().getClusterName()))__        }_    };enabling,a,user,forces,a,doc,to,be,written,to,the,security,index,and,user,doc,with,empty,password,has,a,special,case,code,in,the,reserved,realm;public,void,test,authenticate,after,enabling,user,final,security,client,c,security,client,final,list,string,usernames,arrays,as,list,elastic,user,name,kibana,user,name,logstash,system,user,name,beats,system,user,name,apmsystem,user,name,for,string,username,usernames,c,prepare,set,enabled,username,true,get,cluster,health,response,response,client,filter,with,header,singleton,map,authorization,basic,auth,header,value,username,get,reserved,password,admin,cluster,prepare,health,get,assert,that,response,get,cluster,name,is,cluster,get,cluster,name
ReservedRealmIntegTests -> public void testAuthenticateAfterEnablingUser();1540486836;Enabling a user forces a doc to be written to the security index, and "user doc with empty password" has a special case code in_the reserved realm.;public void testAuthenticateAfterEnablingUser() {_        final SecurityClient c = securityClient()__        final List<String> usernames = Arrays.asList(ElasticUser.NAME, KibanaUser.NAME, LogstashSystemUser.NAME,_            BeatsSystemUser.NAME, APMSystemUser.NAME, RemoteMonitoringUser.NAME)__        for (String username : usernames) {_            c.prepareSetEnabled(username, true).get()__            ClusterHealthResponse response = client()_                    .filterWithHeader(singletonMap("Authorization", basicAuthHeaderValue(username, getReservedPassword())))_                    .admin()_                    .cluster()_                    .prepareHealth()_                    .get()___            assertThat(response.getClusterName(), is(cluster().getClusterName()))__        }_    };enabling,a,user,forces,a,doc,to,be,written,to,the,security,index,and,user,doc,with,empty,password,has,a,special,case,code,in,the,reserved,realm;public,void,test,authenticate,after,enabling,user,final,security,client,c,security,client,final,list,string,usernames,arrays,as,list,elastic,user,name,kibana,user,name,logstash,system,user,name,beats,system,user,name,apmsystem,user,name,remote,monitoring,user,name,for,string,username,usernames,c,prepare,set,enabled,username,true,get,cluster,health,response,response,client,filter,with,header,singleton,map,authorization,basic,auth,header,value,username,get,reserved,password,admin,cluster,prepare,health,get,assert,that,response,get,cluster,name,is,cluster,get,cluster,name
