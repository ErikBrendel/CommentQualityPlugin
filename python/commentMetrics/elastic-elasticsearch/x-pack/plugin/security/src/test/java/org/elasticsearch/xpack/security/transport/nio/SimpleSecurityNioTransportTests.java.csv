commented;modifiers;parameterAmount;loc;comment;code
false;public;4;9;;@Override public void executeHandshake(DiscoveryNode node, TcpChannel channel, ConnectionProfile profile, ActionListener<Version> listener) {     if (doHandshake) {         super.executeHandshake(node, channel, profile, listener).     } else {         listener.onResponse(version.minimumCompatibilityVersion()).     } }
false;public;5;27;;public MockTransportService nioFromThreadPool(Settings settings, ThreadPool threadPool, final Version version, ClusterSettings clusterSettings, boolean doHandshake) {     NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(Collections.emptyList()).     NetworkService networkService = new NetworkService(Collections.emptyList()).     Settings settings1 = Settings.builder().put(settings).put("xpack.security.transport.ssl.enabled", true).build().     Transport transport = new SecurityNioTransport(settings1, version, threadPool, networkService, new MockPageCacheRecycler(settings), namedWriteableRegistry, new NoneCircuitBreakerService(), null, createSSLService(settings1), new NioGroupFactory(settings, logger)) {          @Override         public void executeHandshake(DiscoveryNode node, TcpChannel channel, ConnectionProfile profile, ActionListener<Version> listener) {             if (doHandshake) {                 super.executeHandshake(node, channel, profile, listener).             } else {                 listener.onResponse(version.minimumCompatibilityVersion()).             }         }     }.     MockTransportService mockTransportService = MockTransportService.createNewService(settings, transport, version, threadPool, clusterSettings, Collections.emptySet()).     mockTransportService.start().     return mockTransportService. }
false;protected;4;11;;@Override protected MockTransportService build(Settings settings, Version version, ClusterSettings clusterSettings, boolean doHandshake) {     if (TransportSettings.PORT.exists(settings) == false) {         settings = Settings.builder().put(settings).put(TransportSettings.PORT.getKey(), "0").build().     }     MockTransportService transportService = nioFromThreadPool(settings, threadPool, version, clusterSettings, doHandshake).     transportService.start().     return transportService. }
