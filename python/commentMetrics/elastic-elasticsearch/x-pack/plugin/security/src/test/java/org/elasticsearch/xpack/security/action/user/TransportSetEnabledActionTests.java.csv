commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(SetEnabledResponse setEnabledResponse) {     responseRef.set(setEnabledResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;38;;public void testAnonymousUser() {     Settings settings = Settings.builder().put(AnonymousUser.ROLES_SETTING.getKey(), "superuser").build().     final User user = randomFrom(new ElasticUser(true), new KibanaUser(true), new User("joe")).     ThreadPool threadPool = mock(ThreadPool.class).     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     Authentication authentication = mock(Authentication.class).     when(threadPool.getThreadContext()).thenReturn(threadContext).     threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication).     when(authentication.getUser()).thenReturn(user).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportSetEnabledAction action = new TransportSetEnabledAction(settings, threadPool, transportService, mock(ActionFilters.class), usersStore).     SetEnabledRequest request = new SetEnabledRequest().     request.username(new AnonymousUser(settings).principal()).     request.enabled(randomBoolean()).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<SetEnabledResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<SetEnabledResponse>() {          @Override         public void onResponse(SetEnabledResponse setEnabledResponse) {             responseRef.set(setEnabledResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is anonymous")).     verifyZeroInteractions(usersStore). }
false;public;1;4;;@Override public void onResponse(SetEnabledResponse setEnabledResponse) {     responseRef.set(setEnabledResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;37;;public void testInternalUser() {     final User user = randomFrom(new ElasticUser(true), new KibanaUser(true), new User("joe")).     ThreadPool threadPool = mock(ThreadPool.class).     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     Authentication authentication = mock(Authentication.class).     when(threadPool.getThreadContext()).thenReturn(threadContext).     threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication).     when(authentication.getUser()).thenReturn(user).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportSetEnabledAction action = new TransportSetEnabledAction(Settings.EMPTY, threadPool, transportService, mock(ActionFilters.class), usersStore).     SetEnabledRequest request = new SetEnabledRequest().     request.username(randomFrom(SystemUser.INSTANCE.principal(), XPackUser.INSTANCE.principal())).     request.enabled(randomBoolean()).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<SetEnabledResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<SetEnabledResponse>() {          @Override         public void onResponse(SetEnabledResponse setEnabledResponse) {             responseRef.set(setEnabledResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is internal")).     verifyZeroInteractions(usersStore). }
false;public;1;7;;public Void answer(InvocationOnMock invocation) {     Object[] args = invocation.getArguments().     assert args.length == 4.     ActionListener<Void> listener = (ActionListener<Void>) args[3].     listener.onResponse(null).     return null. }
false;public;1;4;;@Override public void onResponse(SetEnabledResponse setEnabledResponse) {     responseRef.set(setEnabledResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;50;;public void testValidUser() {     ThreadPool threadPool = mock(ThreadPool.class).     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     Authentication authentication = mock(Authentication.class).     when(threadPool.getThreadContext()).thenReturn(threadContext).     threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication).     when(authentication.getUser()).thenReturn(new User("the runner")).     final User user = randomFrom(new ElasticUser(true), new KibanaUser(true), new User("joe")).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     SetEnabledRequest request = new SetEnabledRequest().     request.username(user.principal()).     request.enabled(randomBoolean()).     request.setRefreshPolicy(randomFrom(RefreshPolicy.values())).     // mock the setEnabled call on the native users store so that it will invoke the action listener with a response     doAnswer(new Answer() {          public Void answer(InvocationOnMock invocation) {             Object[] args = invocation.getArguments().             assert args.length == 4.             ActionListener<Void> listener = (ActionListener<Void>) args[3].             listener.onResponse(null).             return null.         }     }).when(usersStore).setEnabled(eq(user.principal()), eq(request.enabled()), eq(request.getRefreshPolicy()), any(ActionListener.class)).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportSetEnabledAction action = new TransportSetEnabledAction(Settings.EMPTY, threadPool, transportService, mock(ActionFilters.class), usersStore).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<SetEnabledResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<SetEnabledResponse>() {          @Override         public void onResponse(SetEnabledResponse setEnabledResponse) {             responseRef.set(setEnabledResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(notNullValue())).     assertThat(responseRef.get(), instanceOf(SetEnabledResponse.class)).     assertThat(throwableRef.get(), is(nullValue())).     verify(usersStore, times(1)).setEnabled(eq(user.principal()), eq(request.enabled()), eq(request.getRefreshPolicy()), any(ActionListener.class)). }
false;public;1;7;;public Void answer(InvocationOnMock invocation) {     Object[] args = invocation.getArguments().     assert args.length == 4.     ActionListener<Void> listener = (ActionListener<Void>) args[3].     listener.onFailure(e).     return null. }
false;public;1;4;;@Override public void onResponse(SetEnabledResponse setEnabledResponse) {     responseRef.set(setEnabledResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;51;;public void testException() {     ThreadPool threadPool = mock(ThreadPool.class).     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     Authentication authentication = mock(Authentication.class).     when(threadPool.getThreadContext()).thenReturn(threadContext).     threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication).     when(authentication.getUser()).thenReturn(new User("the runner")).     final User user = randomFrom(new ElasticUser(true), new KibanaUser(true), new User("joe")).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     SetEnabledRequest request = new SetEnabledRequest().     request.username(user.principal()).     request.enabled(randomBoolean()).     request.setRefreshPolicy(randomFrom(RefreshPolicy.values())).     final Exception e = randomFrom(new ElasticsearchSecurityException(""), new IllegalStateException(), new RuntimeException()).     // we're mocking the setEnabled call on the native users store so that it will invoke the action listener with an exception     doAnswer(new Answer() {          public Void answer(InvocationOnMock invocation) {             Object[] args = invocation.getArguments().             assert args.length == 4.             ActionListener<Void> listener = (ActionListener<Void>) args[3].             listener.onFailure(e).             return null.         }     }).when(usersStore).setEnabled(eq(user.principal()), eq(request.enabled()), eq(request.getRefreshPolicy()), any(ActionListener.class)).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportSetEnabledAction action = new TransportSetEnabledAction(Settings.EMPTY, threadPool, transportService, mock(ActionFilters.class), usersStore).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<SetEnabledResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<SetEnabledResponse>() {          @Override         public void onResponse(SetEnabledResponse setEnabledResponse) {             responseRef.set(setEnabledResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), is(notNullValue())).     assertThat(throwableRef.get(), sameInstance(e)).     verify(usersStore, times(1)).setEnabled(eq(user.principal()), eq(request.enabled()), eq(request.getRefreshPolicy()), any(ActionListener.class)). }
false;public;1;4;;@Override public void onResponse(SetEnabledResponse setEnabledResponse) {     responseRef.set(setEnabledResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;38;;public void testUserModifyingThemselves() {     final User user = randomFrom(new ElasticUser(true), new KibanaUser(true), new User("joe")).     ThreadPool threadPool = mock(ThreadPool.class).     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     Authentication authentication = mock(Authentication.class).     when(threadPool.getThreadContext()).thenReturn(threadContext).     threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication).     when(authentication.getUser()).thenReturn(user).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     SetEnabledRequest request = new SetEnabledRequest().     request.username(user.principal()).     request.enabled(randomBoolean()).     request.setRefreshPolicy(randomFrom(RefreshPolicy.values())).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportSetEnabledAction action = new TransportSetEnabledAction(Settings.EMPTY, threadPool, transportService, mock(ActionFilters.class), usersStore).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<SetEnabledResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<SetEnabledResponse>() {          @Override         public void onResponse(SetEnabledResponse setEnabledResponse) {             responseRef.set(setEnabledResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("own account")).     verifyZeroInteractions(usersStore). }
