commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean transportSSLEnabled() {     return true. }
false;protected;1;38;;@Override protected Settings nodeSettings(int nodeOrdinal) {     Settings settings = super.nodeSettings(nodeOrdinal).     Settings.Builder builder = Settings.builder().put(settings.filter((s) -> s.startsWith("xpack.security.transport.ssl.") == false), false).     settings = builder.build().     // The default Unicast test behavior is to use 'localhost' with the port number. For this test we need to use IP     List<String> newUnicastAddresses = new ArrayList<>().     for (String address : settings.getAsList(DISCOVERY_SEED_HOSTS_SETTING.getKey())) {         newUnicastAddresses.add(address.replace("localhost", "127.0.0.1")).     }     Settings.Builder settingsBuilder = Settings.builder().put(settings).putList(DISCOVERY_SEED_HOSTS_SETTING.getKey(), newUnicastAddresses).     try {         // Use a cert with a CN of "Elasticsearch Test Node" and IPv4+IPv6 ip addresses as SubjectAlternativeNames         certPath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode-ip-only.crt").         keyPath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode-ip-only.pem").         assertThat(Files.exists(certPath), is(true)).     } catch (Exception e) {         throw new RuntimeException(e).     }     SecuritySettingsSource.addSecureSettings(settingsBuilder, secureSettings -> {         secureSettings.setString("xpack.security.transport.ssl.secure_key_passphrase", "testnode-ip-only").     }).     return settingsBuilder.put("xpack.security.transport.ssl.key", keyPath.toAbsolutePath()).put("xpack.security.transport.ssl.certificate", certPath.toAbsolutePath()).put("xpack.security.transport.ssl.certificate_authorities", certPath.toAbsolutePath()).put(TransportSettings.BIND_HOST.getKey(), "127.0.0.1").put("network.host", "127.0.0.1").put("xpack.security.transport.ssl.client_authentication", SSLClientAuth.NONE).put("xpack.security.transport.ssl.verification_mode", "full").build(). }
false;protected;0;11;;@Override protected Settings transportClientSettings() {     Settings clientSettings = super.transportClientSettings().     return Settings.builder().put(clientSettings.filter(k -> k.startsWith("xpack.security.transport.ssl.") == false)).put("xpack.security.transport.ssl.verification_mode", "certificate").put("xpack.security.transport.ssl.key", keyPath.toAbsolutePath()).put("xpack.security.transport.ssl.certificate", certPath.toAbsolutePath()).put("xpack.security.transport.ssl.key_passphrase", "testnode-ip-only").put("xpack.security.transport.ssl.certificate_authorities", certPath).build(). }
false;public;0;4;;public void testTransportClientConnectionWorksWithIPOnlyHostnameVerification() throws Exception {     Client client = internalCluster().transportClient().     assertGreenClusterState(client). }
