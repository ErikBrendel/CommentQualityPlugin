commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;public void testParseValidJsonWithClusterAndIndexPrivileges() throws Exception {     String json = "{ " + " \"cluster\":[ \"all\"]," + " \"index\":[ " + " { \"names\": [ \".kibana\", \".reporting\" ], " + "   \"privileges\" : [ \"read\", \"write\" ] }, " + " { \"names\": [ \".security\" ], " + "   \"privileges\" : [ \"manage\" ] } " + " ]" + "}".     final HasPrivilegesRequestBuilder builder = new HasPrivilegesRequestBuilder(mock(Client.class)).     builder.source("elastic", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON).     final HasPrivilegesRequest request = builder.request().     assertThat(request.clusterPrivileges().length, equalTo(1)).     assertThat(request.clusterPrivileges()[0], equalTo("all")).     assertThat(request.indexPrivileges().length, equalTo(2)).     final RoleDescriptor.IndicesPrivileges privileges0 = request.indexPrivileges()[0].     assertThat(privileges0.getIndices(), arrayContaining(".kibana", ".reporting")).     assertThat(privileges0.getPrivileges(), arrayContaining("read", "write")).     final RoleDescriptor.IndicesPrivileges privileges1 = request.indexPrivileges()[1].     assertThat(privileges1.getIndices(), arrayContaining(".security")).     assertThat(privileges1.getPrivileges(), arrayContaining("manage")). }
false;public;0;23;;public void testParseValidJsonWithJustIndexPrivileges() throws Exception {     String json = "{ \"index\":[ " + "{ \"names\": [ \".kibana\", \".reporting\" ], " + " \"privileges\" : [ \"read\", \"write\" ] }, " + "{ \"names\": [ \".security\" ], " + " \"privileges\" : [ \"manage\" ] } " + "] }".     final HasPrivilegesRequestBuilder builder = new HasPrivilegesRequestBuilder(mock(Client.class)).     builder.source("elastic", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON).     final HasPrivilegesRequest request = builder.request().     assertThat(request.clusterPrivileges().length, equalTo(0)).     assertThat(request.indexPrivileges().length, equalTo(2)).     final RoleDescriptor.IndicesPrivileges privileges0 = request.indexPrivileges()[0].     assertThat(privileges0.getIndices(), arrayContaining(".kibana", ".reporting")).     assertThat(privileges0.getPrivileges(), arrayContaining("read", "write")).     final RoleDescriptor.IndicesPrivileges privileges1 = request.indexPrivileges()[1].     assertThat(privileges1.getIndices(), arrayContaining(".security")).     assertThat(privileges1.getPrivileges(), arrayContaining("manage")). }
false;public;0;14;;public void testParseValidJsonWithJustClusterPrivileges() throws Exception {     String json = "{ \"cluster\":[ " + "\"manage\"," + "\"" + ClusterHealthAction.NAME + "\"," + "\"" + ClusterStatsAction.NAME + "\"" + "] }".     final HasPrivilegesRequestBuilder builder = new HasPrivilegesRequestBuilder(mock(Client.class)).     builder.source("elastic", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON).     final HasPrivilegesRequest request = builder.request().     assertThat(request.indexPrivileges().length, equalTo(0)).     assertThat(request.clusterPrivileges(), arrayContaining("manage", ClusterHealthAction.NAME, ClusterStatsAction.NAME)). }
false;public;0;14;;public void testUseOfFieldLevelSecurityThrowsException() throws Exception {     String json = "{ \"index\":[ " + "{" + " \"names\": [ \"employees\" ], " + " \"privileges\" : [ \"read\", \"write\" ] ," + " \"field_security\": { \"grant\": [ \"name\", \"department\", \"title\" ] }" + "} ] }".     final HasPrivilegesRequestBuilder builder = new HasPrivilegesRequestBuilder(mock(Client.class)).     final ElasticsearchParseException parseException = expectThrows(ElasticsearchParseException.class, () -> builder.source("elastic", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON)).     assertThat(parseException.getMessage(), containsString("[field_security]")). }
false;public;0;8;;public void testMissingPrivilegesThrowsException() throws Exception {     String json = "{ }".     final HasPrivilegesRequestBuilder builder = new HasPrivilegesRequestBuilder(mock(Client.class)).     final ElasticsearchParseException parseException = expectThrows(ElasticsearchParseException.class, () -> builder.source("elastic", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON)).     assertThat(parseException.getMessage(), containsString("[cluster,index,applications] are missing")). }
