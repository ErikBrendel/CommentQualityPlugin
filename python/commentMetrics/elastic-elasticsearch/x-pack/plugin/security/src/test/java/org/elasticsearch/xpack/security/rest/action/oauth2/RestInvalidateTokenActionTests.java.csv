commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testParserForUserAndRealm() throws Exception {     final String request = "{" + "\"username\": \"user1\"," + "\"realm_name\": \"realm1\"" + "}".     try (XContentParser parser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, request)) {         InvalidateTokenRequest invalidateTokenRequest = RestInvalidateTokenAction.PARSER.parse(parser, null).         assertEquals("user1", invalidateTokenRequest.getUserName()).         assertEquals("realm1", invalidateTokenRequest.getRealmName()).         assertNull(invalidateTokenRequest.getTokenString()).         assertNull(invalidateTokenRequest.getTokenType()).     } }
false;public;0;13;;public void testParserForToken() throws Exception {     final String request = "{" + "\"refresh_token\": \"refresh_token_string\"" + "}".     try (XContentParser parser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, request)) {         InvalidateTokenRequest invalidateTokenRequest = RestInvalidateTokenAction.PARSER.parse(parser, null).         assertEquals("refresh_token_string", invalidateTokenRequest.getTokenString()).         assertEquals("refresh_token", invalidateTokenRequest.getTokenType().getValue()).         assertNull(invalidateTokenRequest.getRealmName()).         assertNull(invalidateTokenRequest.getUserName()).     } }
false;public;0;13;;public void testParserForIncorrectInput() throws Exception {     final String request = "{" + "\"refresh_token\": \"refresh_token_string\"," + "\"token\": \"access_token_string\"" + "}".     try (XContentParser parser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, request)) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> RestInvalidateTokenAction.PARSER.parse(parser, null)).         assertThat(e.getCause().getMessage(), containsString("only one of [token, refresh_token] may be sent per request")).     } }
