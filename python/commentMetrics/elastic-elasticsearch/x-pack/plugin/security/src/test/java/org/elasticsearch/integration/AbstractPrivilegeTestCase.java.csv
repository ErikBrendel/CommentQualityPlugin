commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;9;;protected void assertAccessIsAllowed(String user, Request request) throws IOException {     setUser(request, user).     Response response = getRestClient().performRequest(request).     StatusLine statusLine = response.getStatusLine().     String message = String.format(Locale.ROOT, "%s %s: Expected no error got %s %s with body %s", request.getMethod(), request.getEndpoint(), statusLine.getStatusCode(), statusLine.getReasonPhrase(), EntityUtils.toString(response.getEntity())).     assertThat(message, statusLine.getStatusCode(), is(not(greaterThanOrEqualTo(400)))). }
false;protected;4;5;;protected void assertAccessIsAllowed(String user, String method, String uri, String body) throws IOException {     Request request = new Request(method, uri).     request.setJsonEntity(body).     assertAccessIsAllowed(user, request). }
false;protected;3;3;;protected void assertAccessIsAllowed(String user, String method, String uri) throws IOException {     assertAccessIsAllowed(user, new Request(method, uri)). }
false;protected;2;11;;protected void assertAccessIsDenied(String user, Request request) throws IOException {     setUser(request, user).     ResponseException responseException = expectThrows(ResponseException.class, () -> getRestClient().performRequest(request)).     StatusLine statusLine = responseException.getResponse().getStatusLine().     String requestBody = request.getEntity() == null ? "" : "with body " + EntityUtils.toString(request.getEntity()).     String message = String.format(Locale.ROOT, "%s %s body %s: Expected 403, got %s %s with body %s", request.getMethod(), request.getEndpoint(), requestBody, statusLine.getStatusCode(), statusLine.getReasonPhrase(), EntityUtils.toString(responseException.getResponse().getEntity())).     assertThat(message, statusLine.getStatusCode(), is(403)). }
false;protected;4;5;;protected void assertAccessIsDenied(String user, String method, String uri, String body) throws IOException {     Request request = new Request(method, uri).     request.setJsonEntity(body).     assertAccessIsDenied(user, request). }
false;protected;3;3;;protected void assertAccessIsDenied(String user, String method, String uri) throws IOException {     assertAccessIsDenied(user, new Request(method, uri)). }
true;protected;2;9;/**  * Like {@code assertAcessIsDenied}, but for _bulk requests since the entire  * request will not be failed, just the individual ones  */ ;/**  * Like {@code assertAcessIsDenied}, but for _bulk requests since the entire  * request will not be failed, just the individual ones  */ protected void assertBodyHasAccessIsDenied(String user, Request request) throws IOException {     setUser(request, user).     Response resp = getRestClient().performRequest(request).     StatusLine statusLine = resp.getStatusLine().     assertThat(statusLine.getStatusCode(), is(200)).     HttpEntity bodyEntity = resp.getEntity().     String bodyStr = EntityUtils.toString(bodyEntity).     assertThat(bodyStr, containsString("unauthorized for user [" + user + "]")). }
false;protected;4;5;;protected void assertBodyHasAccessIsDenied(String user, String method, String uri, String body) throws IOException {     Request request = new Request(method, uri).     request.setJsonEntity(body).     assertBodyHasAccessIsDenied(user, request). }
false;private;2;5;;private void setUser(Request request, String user) {     RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder().     options.addHeader("Authorization", UsernamePasswordToken.basicAuthHeaderValue(user, new SecureString("passwd".toCharArray()))).     request.setOptions(options). }
