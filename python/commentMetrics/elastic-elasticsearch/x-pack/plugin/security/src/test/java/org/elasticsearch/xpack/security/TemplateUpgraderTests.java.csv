commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;public void testTemplatesWorkAsExpected() throws Exception {     ClusterService clusterService = internalCluster().getInstance(ClusterService.class, internalCluster().getMasterName()).     ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, internalCluster().getMasterName()).     Client client = internalCluster().getInstance(Client.class, internalCluster().getMasterName()).     UnaryOperator<Map<String, IndexTemplateMetaData>> indexTemplateMetaDataUpgraders = map -> {         map.remove("removed-template").         map.put("added-template", IndexTemplateMetaData.builder("added-template").order(1).patterns(Collections.singletonList(randomAlphaOfLength(10))).build()).         return map.     }.     AcknowledgedResponse putIndexTemplateResponse = client().admin().indices().preparePutTemplate("removed-template").setOrder(1).setPatterns(Collections.singletonList(randomAlphaOfLength(10))).get().     assertAcked(putIndexTemplateResponse).     assertTemplates("removed-template", "added-template").     TemplateUpgradeService templateUpgradeService = new TemplateUpgradeService(client, clusterService, threadPool, Collections.singleton(indexTemplateMetaDataUpgraders)).     // ensure the cluster listener gets triggered     ClusterChangedEvent event = new ClusterChangedEvent("testing", clusterService.state(), clusterService.state()).     templateUpgradeService.clusterChanged(event).     assertBusy(() -> assertTemplates("added-template", "removed-template")). }
false;private;2;6;;private void assertTemplates(String existingTemplate, String deletedTemplate) {     GetIndexTemplatesResponse response = client().admin().indices().prepareGetTemplates().get().     List<String> templateNames = response.getIndexTemplates().stream().map(IndexTemplateMetaData::name).collect(Collectors.toList()).     assertThat(templateNames, hasItem(existingTemplate)).     assertThat(templateNames, not(hasItem(deletedTemplate))). }
