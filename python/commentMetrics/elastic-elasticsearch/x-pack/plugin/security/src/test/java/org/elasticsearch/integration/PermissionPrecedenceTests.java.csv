commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;13;;@Override protected String configRoles() {     return "admin:\n" + "  cluster: [ all ] \n" + "  indices:\n" + "    - names: '*'\n" + "      privileges: [ all ]" + "\n" + "user:\n" + "  indices:\n" + "    - names: 'test_*'\n" + "      privileges: [ all ]". }
false;protected;0;7;;@Override protected String configUsers() {     final String usersPasswdHashed = new String(getFastStoredHashAlgoForTests().hash(new SecureString("test123".toCharArray()))).     return "admin:" + usersPasswdHashed + "\n" + "client:" + usersPasswdHashed + "\n" + "user:" + usersPasswdHashed + "\n". }
false;protected;0;6;;@Override protected String configUsersRoles() {     return "admin:admin\n" + "transport_client:client\n" + "user:user\n". }
false;protected;0;4;;@Override protected String nodeClientUsername() {     return "admin". }
false;protected;0;4;;@Override protected SecureString nodeClientPassword() {     return new SecureString("test123".toCharArray()). }
false;protected;0;4;;@Override protected String transportClientUsername() {     return "admin". }
false;protected;0;4;;@Override protected SecureString transportClientPassword() {     return new SecureString("test123".toCharArray()). }
false;public;0;30;;public void testDifferentCombinationsOfIndices() throws Exception {     Client client = internalCluster().transportClient().     // first lets try with "admin"... all should work     AcknowledgedResponse putResponse = client.filterWithHeader(Collections.singletonMap(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue(transportClientUsername(), transportClientPassword()))).admin().indices().preparePutTemplate("template1").setPatterns(Collections.singletonList("test_*")).get().     assertAcked(putResponse).     GetIndexTemplatesResponse getResponse = client.admin().indices().prepareGetTemplates("template1").get().     List<IndexTemplateMetaData> templates = getResponse.getIndexTemplates().     assertThat(templates, hasSize(1)).     // now lets try with "user"     Map<String, String> auth = Collections.singletonMap(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue("user", transportClientPassword())).     assertThrowsAuthorizationException(client.filterWithHeader(auth).admin().indices().preparePutTemplate("template1").setPatterns(Collections.singletonList("test_*"))::get, PutIndexTemplateAction.NAME, "user").     Map<String, String> headers = Collections.singletonMap(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue("user", new SecureString("test123"))).     assertThrowsAuthorizationException(client.filterWithHeader(headers).admin().indices().prepareGetTemplates("template1")::get, GetIndexTemplatesAction.NAME, "user"). }
