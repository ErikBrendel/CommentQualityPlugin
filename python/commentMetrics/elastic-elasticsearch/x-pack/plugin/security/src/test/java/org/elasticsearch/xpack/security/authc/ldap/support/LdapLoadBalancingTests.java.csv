commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testBadTypeThrowsException() {     String badType = randomAlphaOfLengthBetween(3, 12).     Settings settings = getSettings(badType).     try {         LdapLoadBalancing.serverSet(null, null, getConfig(settings), null, null).         fail("using type [" + badType + "] should have thrown an exception").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("unknown load balance type")).     } }
false;public;1;6;;public Settings getSettings(String loadBalancerType) {     return Settings.builder().put(getFullSettingKey(REALM_IDENTIFIER, LdapLoadBalancingSettings.LOAD_BALANCE_TYPE_SETTING), loadBalancerType).put("path.home", createTempDir()).build(). }
false;public;0;8;;public void testFailoverServerSet() {     Settings settings = getSettings("failover").     String[] address = new String[] { "localhost" }.     int[] ports = new int[] { 26000 }.     ServerSet serverSet = LdapLoadBalancing.serverSet(address, ports, getConfig(settings), null, null).     assertThat(serverSet, instanceOf(FailoverServerSet.class)).     assertThat(((FailoverServerSet) serverSet).reOrderOnFailover(), is(true)). }
false;public;0;9;;public void testDnsFailover() {     Settings settings = getSettings("dns_failover").     String[] address = new String[] { "foo.bar" }.     int[] ports = new int[] { 26000 }.     ServerSet serverSet = LdapLoadBalancing.serverSet(address, ports, getConfig(settings), null, null).     assertThat(serverSet, instanceOf(RoundRobinDNSServerSet.class)).     assertThat(((RoundRobinDNSServerSet) serverSet).getAddressSelectionMode(), is(RoundRobinDNSServerSet.AddressSelectionMode.FAILOVER)). }
false;public;0;19;;public void testDnsFailoverBadArgs() {     final Settings settings = getSettings("dns_failover").     final RealmConfig config = getConfig(settings).     String[] addresses = new String[] { "foo.bar", "localhost" }.     int[] ports = new int[] { 26000, 389 }.     try {         LdapLoadBalancing.serverSet(addresses, ports, config, null, null).         fail("dns server sets only support a single URL").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("single url")).     }     try {         LdapLoadBalancing.serverSet(new String[] { "127.0.0.1" }, new int[] { 389 }, config, null, null).         fail("dns server sets only support DNS names").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("DNS name")).     } }
false;public;0;7;;public void testRoundRobin() {     Settings settings = getSettings("round_robin").     String[] address = new String[] { "localhost", "foo.bar" }.     int[] ports = new int[] { 389, 389 }.     ServerSet serverSet = LdapLoadBalancing.serverSet(address, ports, getConfig(settings), null, null).     assertThat(serverSet, instanceOf(RoundRobinServerSet.class)). }
false;public;0;9;;public void testDnsRoundRobin() {     Settings settings = getSettings("dns_round_robin").     String[] address = new String[] { "foo.bar" }.     int[] ports = new int[] { 26000 }.     ServerSet serverSet = LdapLoadBalancing.serverSet(address, ports, getConfig(settings), null, null).     assertThat(serverSet, instanceOf(RoundRobinDNSServerSet.class)).     assertThat(((RoundRobinDNSServerSet) serverSet).getAddressSelectionMode(), is(RoundRobinDNSServerSet.AddressSelectionMode.ROUND_ROBIN)). }
false;public;0;19;;public void testDnsRoundRobinBadArgs() {     final Settings settings = getSettings("dns_round_robin").     final RealmConfig config = getConfig(settings).     String[] addresses = new String[] { "foo.bar", "localhost" }.     int[] ports = new int[] { 26000, 389 }.     try {         LdapLoadBalancing.serverSet(addresses, ports, config, null, null).         fail("dns server sets only support a single URL").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("single url")).     }     try {         LdapLoadBalancing.serverSet(new String[] { "127.0.0.1" }, new int[] { 389 }, config, null, null).         fail("dns server sets only support DNS names").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("DNS name")).     } }
false;public;1;3;;public RealmConfig getConfig(Settings settings) {     return new RealmConfig(REALM_IDENTIFIER, settings, TestEnvironment.newEnvironment(settings), new ThreadContext(settings)). }
