commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setupBuilder() {     final ElasticsearchClient client = Mockito.mock(ElasticsearchClient.class).     builder = new PutRoleMappingRequestBuilder(client, PutRoleMappingAction.INSTANCE). }
false;public;0;7;;public void testValidateMissingName() throws Exception {     final PutRoleMappingRequest request = builder.roles("superuser").expression(Mockito.mock(RoleMapperExpression.class)).request().     assertValidationFailure(request, "name"). }
false;public;0;7;;public void testValidateMissingRoles() throws Exception {     final PutRoleMappingRequest request = builder.name("test").expression(Mockito.mock(RoleMapperExpression.class)).request().     assertValidationFailure(request, "roles"). }
false;public;0;7;;public void testValidateMissingRules() throws Exception {     final PutRoleMappingRequest request = builder.name("test").roles("superuser").request().     assertValidationFailure(request, "rules"). }
false;public;0;9;;public void testValidateMetadataKeys() throws Exception {     final PutRoleMappingRequest request = builder.name("test").roles("superuser").expression(Mockito.mock(RoleMapperExpression.class)).metadata(Collections.singletonMap("_secret", false)).request().     assertValidationFailure(request, "metadata key"). }
false;private;2;5;;private void assertValidationFailure(PutRoleMappingRequest request, String expectedMessage) {     final ValidationException ve = request.validate().     assertThat(ve, notNullValue()).     assertThat(ve.getMessage(), containsString(expectedMessage)). }
