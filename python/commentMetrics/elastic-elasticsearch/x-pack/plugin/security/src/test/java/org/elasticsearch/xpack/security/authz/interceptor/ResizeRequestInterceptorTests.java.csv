commented;modifiers;parameterAmount;loc;comment;code
false;public;0;51;;public void testResizeRequestInterceptorThrowsWhenFLSDLSEnabled() {     XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.copyCurrentLicenseState()).thenReturn(licenseState).     when(licenseState.isAuthAllowed()).thenReturn(true).     when(licenseState.isAuditingAllowed()).thenReturn(true).     when(licenseState.isDocumentAndFieldLevelSecurityAllowed()).thenReturn(true).     ThreadPool threadPool = mock(ThreadPool.class).     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     when(threadPool.getThreadContext()).thenReturn(threadContext).     AuditTrailService auditTrailService = new AuditTrailService(Collections.emptyList(), licenseState).     final Authentication authentication = new Authentication(new User("john", "role"), new RealmRef(null, null, null), null).     final FieldPermissions fieldPermissions.     final boolean useFls = randomBoolean().     if (useFls) {         fieldPermissions = new FieldPermissions(new FieldPermissionsDefinition(new String[] { "foo" }, null)).     } else {         fieldPermissions = new FieldPermissions().     }     final boolean useDls = (useFls == false) || randomBoolean().     final Set<BytesReference> queries.     if (useDls) {         queries = Collections.singleton(new BytesArray(randomAlphaOfLengthBetween(2, 8))).     } else {         queries = null.     }     final String action = randomFrom(ShrinkAction.NAME, ResizeAction.NAME).     IndicesAccessControl accessControl = new IndicesAccessControl(true, Collections.singletonMap("foo", new IndicesAccessControl.IndexAccessControl(true, fieldPermissions, (useDls) ? DocumentPermissions.filteredBy(queries) : DocumentPermissions.allowAll()))).     threadContext.putTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY, accessControl).     ResizeRequestInterceptor resizeRequestInterceptor = new ResizeRequestInterceptor(threadPool, licenseState, auditTrailService).     PlainActionFuture<Void> plainActionFuture = new PlainActionFuture<>().     RequestInfo requestInfo = new RequestInfo(authentication, new ResizeRequest("bar", "foo"), action).     AuthorizationEngine mockEngine = mock(AuthorizationEngine.class).     doAnswer(invocationOnMock -> {         ActionListener<AuthorizationResult> listener = (ActionListener<AuthorizationResult>) invocationOnMock.getArguments()[3].         listener.onResponse(AuthorizationResult.deny()).         return null.     }).when(mockEngine).validateIndexPermissionsAreSubset(eq(requestInfo), eq(EmptyAuthorizationInfo.INSTANCE), any(Map.class), any(ActionListener.class)).     ElasticsearchSecurityException securityException = expectThrows(ElasticsearchSecurityException.class, () -> {         resizeRequestInterceptor.intercept(requestInfo, mockEngine, EmptyAuthorizationInfo.INSTANCE, plainActionFuture).         plainActionFuture.actionGet().     }).     assertEquals("Resize requests are not allowed for users when field or document level security is enabled on the source index", securityException.getMessage()). }
false;public;0;54;;public void testResizeRequestInterceptorThrowsWhenTargetHasGreaterPermissions() throws Exception {     XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.copyCurrentLicenseState()).thenReturn(licenseState).     when(licenseState.isAuthAllowed()).thenReturn(true).     when(licenseState.isAuditingAllowed()).thenReturn(true).     when(licenseState.isDocumentAndFieldLevelSecurityAllowed()).thenReturn(true).     ThreadPool threadPool = mock(ThreadPool.class).     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     when(threadPool.getThreadContext()).thenReturn(threadContext).     AuditTrailService auditTrailService = new AuditTrailService(Collections.emptyList(), licenseState).     final Authentication authentication = new Authentication(new User("john", "role"), new RealmRef(null, null, null), null).     Role role = Role.builder().add(IndexPrivilege.ALL, "target").add(IndexPrivilege.READ, "source").build().     final String action = randomFrom(ShrinkAction.NAME, ResizeAction.NAME).     IndicesAccessControl accessControl = new IndicesAccessControl(true, Collections.emptyMap()).     threadContext.putTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY, accessControl).     ResizeRequestInterceptor resizeRequestInterceptor = new ResizeRequestInterceptor(threadPool, licenseState, auditTrailService).     AuthorizationEngine mockEngine = mock(AuthorizationEngine.class).     {         PlainActionFuture<Void> plainActionFuture = new PlainActionFuture<>().         RequestInfo requestInfo = new RequestInfo(authentication, new ResizeRequest("target", "source"), action).         doAnswer(invocationOnMock -> {             ActionListener<AuthorizationResult> listener = (ActionListener<AuthorizationResult>) invocationOnMock.getArguments()[3].             listener.onResponse(AuthorizationResult.deny()).             return null.         }).when(mockEngine).validateIndexPermissionsAreSubset(eq(requestInfo), eq(EmptyAuthorizationInfo.INSTANCE), any(Map.class), any(ActionListener.class)).         ElasticsearchSecurityException securityException = expectThrows(ElasticsearchSecurityException.class, () -> {             resizeRequestInterceptor.intercept(requestInfo, mockEngine, EmptyAuthorizationInfo.INSTANCE, plainActionFuture).             plainActionFuture.actionGet().         }).         assertEquals("Resizing an index is not allowed when the target index has more permissions than the source index", securityException.getMessage()).     }     // swap target and source for success     {         PlainActionFuture<Void> plainActionFuture = new PlainActionFuture<>().         RequestInfo requestInfo = new RequestInfo(authentication, new ResizeRequest("source", "target"), action).         doAnswer(invocationOnMock -> {             ActionListener<AuthorizationResult> listener = (ActionListener<AuthorizationResult>) invocationOnMock.getArguments()[3].             listener.onResponse(AuthorizationResult.granted()).             return null.         }).when(mockEngine).validateIndexPermissionsAreSubset(eq(requestInfo), eq(EmptyAuthorizationInfo.INSTANCE), any(Map.class), any(ActionListener.class)).         resizeRequestInterceptor.intercept(requestInfo, mockEngine, EmptyAuthorizationInfo.INSTANCE, plainActionFuture).         plainActionFuture.actionGet().     } }
