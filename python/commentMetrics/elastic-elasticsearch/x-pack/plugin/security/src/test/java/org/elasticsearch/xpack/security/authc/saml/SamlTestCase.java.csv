commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;11;;@BeforeClass public static void setupSaml() throws Exception {     Logger logger = LogManager.getLogger(SamlTestCase.class).     if (isTurkishLocale()) {         // See: https://github.com/elastic/x-pack-elasticsearch/issues/2815         logger.warn("Attempting to run SAML test on turkish-like locale, but that breaks OpenSAML. Switching to English.").         restoreLocale = Locale.getDefault().         Locale.setDefault(Locale.ENGLISH).     }     SamlUtils.initialize(logger). }
false;private,static;0;4;;private static boolean isTurkishLocale() {     return Locale.getDefault().getLanguage().equals(new Locale("tr").getLanguage()) || Locale.getDefault().getLanguage().equals(new Locale("az").getLanguage()). }
false;public,static;0;7;;@AfterClass public static void restoreLocale() {     if (restoreLocale != null) {         Locale.setDefault(restoreLocale).         restoreLocale = null.     } }
true;protected,static;0;3;/**  * Generates signed certificate and associates with generated key pair.  * @see #readRandomKeyPair(String)  * @return X509Certificate a signed certificate, it's PrivateKey {@link Tuple}  */ ;/**  * Generates signed certificate and associates with generated key pair.  * @see #readRandomKeyPair(String)  * @return X509Certificate a signed certificate, it's PrivateKey {@link Tuple}  */ protected static Tuple<X509Certificate, PrivateKey> readRandomKeyPair() throws Exception {     return readRandomKeyPair("RSA"). }
true;protected,static;1;23;/**  * Reads a key pair and associated certificate for given algorithm and key length  * For testing, for "EC" algorithm 256 key size is used, others use 2048 as default.  * @return X509Certificate a signed certificate, it's PrivateKey  */ ;/**  * Reads a key pair and associated certificate for given algorithm and key length  * For testing, for "EC" algorithm 256 key size is used, others use 2048 as default.  * @return X509Certificate a signed certificate, it's PrivateKey  */ protected static Tuple<X509Certificate, PrivateKey> readRandomKeyPair(String algorithm) throws Exception {     int keySize.     switch(algorithm) {         case "EC":             keySize = randomFrom(256, 384).             break.         case "RSA":             keySize = randomFrom(1024, 2048, 4096).             break.         case "DSA":             keySize = randomFrom(1024, 2048, 3072).             break.         default:             keySize = randomFrom(1024, 2048).     }     Path keyPath = PathUtils.get(SamlTestCase.class.getResource("/org/elasticsearch/xpack/security/authc/saml/saml_" + algorithm + "_" + keySize + ".key").toURI()).     Path certPath = PathUtils.get(SamlTestCase.class.getResource("/org/elasticsearch/xpack/security/authc/saml/saml_" + algorithm + "_" + keySize + ".crt").toURI()).     X509Certificate certificate = CertParsingUtils.readX509Certificates(Collections.singletonList(certPath))[0].     PrivateKey privateKey = PemUtils.readPrivateKey(keyPath, ""::toCharArray).     return new Tuple<>(certificate, privateKey). }
false;protected,static;1;9;;protected static Tuple<X509Certificate, PrivateKey> readKeyPair(String keyName) throws Exception {     Path keyPath = PathUtils.get(SamlTestCase.class.getResource("/org/elasticsearch/xpack/security/authc/saml/saml_" + keyName + ".key").toURI()).     Path certPath = PathUtils.get(SamlTestCase.class.getResource("/org/elasticsearch/xpack/security/authc/saml/saml_" + keyName + ".crt").toURI()).     X509Certificate certificate = CertParsingUtils.readX509Certificates(Collections.singletonList(certPath))[0].     PrivateKey privateKey = PemUtils.readPrivateKey(keyPath, ""::toCharArray).     return new Tuple<>(certificate, privateKey). }
false;protected,static;1;9;;protected static List<Credential> buildOpenSamlCredential(final Tuple<X509Certificate, PrivateKey> keyPair) {     try {         return Arrays.asList(new X509KeyManagerX509CredentialAdapter(CertParsingUtils.keyManager(new Certificate[] { keyPair.v1() }, keyPair.v2(), new char[0]), "key")).     } catch (Exception e) {         throw ExceptionsHelper.convertToRuntime(e).     } }
false;protected,static;1;11;;protected static List<Credential> buildOpenSamlCredential(final List<Tuple<X509Certificate, PrivateKey>> keyPairs) {     final List<Credential> credentials = keyPairs.stream().map((keyPair) -> {         try {             return new X509KeyManagerX509CredentialAdapter(CertParsingUtils.keyManager(new Certificate[] { keyPair.v1() }, keyPair.v2(), new char[0]), "key").         } catch (Exception e) {             throw ExceptionsHelper.convertToRuntime(e).         }     }).collect(Collectors.toList()).     return credentials. }
false;protected;1;5;;protected ElasticsearchSecurityException expectSamlException(ThrowingRunnable runnable) {     final ElasticsearchSecurityException exception = expectThrows(ElasticsearchSecurityException.class, runnable).     assertThat("Exception " + exception + " should be a SAML exception", SamlUtils.isSamlException(exception), is(true)).     return exception. }
