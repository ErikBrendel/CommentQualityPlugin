commented;modifiers;parameterAmount;loc;comment;code
false;public,static;4;26;;public static LDAPConnection openConnection(String url, String bindDN, String bindPassword, Path truststore) throws Exception {     Settings.Builder builder = Settings.builder().put("path.home", LuceneTestCase.createTempDir()).     MockSecureSettings secureSettings = new MockSecureSettings().     builder.setSecureSettings(secureSettings).     // fake realms so ssl will get loaded     builder.put("xpack.security.authc.realms.ldap.foo.ssl.truststore.path", truststore).     builder.put("xpack.security.authc.realms.ldap.foo.ssl.verification_mode", VerificationMode.FULL).     builder.put("xpack.security.authc.realms.ldap.bar.ssl.truststore.path", truststore).     builder.put("xpack.security.authc.realms.ldap.bar.ssl.verification_mode", VerificationMode.CERTIFICATE).     secureSettings.setString("xpack.security.authc.realms.ldap.foo.ssl.truststore.secure_password", "changeit").     secureSettings.setString("xpack.security.authc.realms.ldap.bar.ssl.truststore.secure_password", "changeit").     Settings settings = builder.build().     Environment env = TestEnvironment.newEnvironment(settings).     SSLService sslService = new SSLService(settings, env).     LDAPURL ldapurl = new LDAPURL(url).     LDAPConnectionOptions options = new LDAPConnectionOptions().     options.setFollowReferrals(true).     options.setAllowConcurrentSocketFactoryUse(true).     options.setConnectTimeoutMillis(Math.toIntExact(SessionFactorySettings.TIMEOUT_DEFAULT.millis())).     options.setResponseTimeoutMillis(SessionFactorySettings.TIMEOUT_DEFAULT.millis()).     final SSLConfiguration sslConfiguration = sslService.getSSLConfiguration("xpack.security.authc.realms.ldap.foo.ssl").     return LdapUtils.privilegedConnect(() -> new LDAPConnection(sslService.sslSocketFactory(sslConfiguration), options, ldapurl.getHost(), ldapurl.getPort(), bindDN, bindPassword)). }
