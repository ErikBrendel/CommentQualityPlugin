# id;timestamp;commentText;codeText;commentWords;codeWords
LdapRealmTests -> public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception;1524684173;The contract for {@link Realm} implementations is that they should log-and-return-null (and_not call {@link ActionListener#onFailure(Exception)}) if there is an internal exception that prevented them from performing an_authentication._This method tests that when an LDAP server is unavailable (invalid hostname), there is a <code>null</code> result_rather than an exception.;public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception {_        LDAPURL url = new LDAPURL("ldap", "..", 12345, null, null, null, null)__        String groupSearchBase = "o=sevenSeas"__        String userTemplate = VALID_USER_TEMPLATE__        Settings settings = buildLdapSettings(new String[] { url.toString() }, userTemplate, groupSearchBase, LdapSearchScope.SUB_TREE)__        RealmConfig config = new RealmConfig("test-ldap-realm", settings, globalSettings, TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings))__        LdapSessionFactory ldapFactory = new LdapSessionFactory(config, sslService, threadPool)__        LdapRealm ldap = new LdapRealm(LdapRealmSettings.LDAP_TYPE, config, ldapFactory, buildGroupAsRoleMapper(resourceWatcherService),_                threadPool)___        PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>()__        ldap.authenticate(new UsernamePasswordToken(VALID_USERNAME, new SecureString(PASSWORD)), future)__        final AuthenticationResult result = future.actionGet()__        assertThat(result.getStatus(), is(AuthenticationResult.Status.CONTINUE))__        assertThat(result.getUser(), nullValue())__        assertThat(result.getMessage(), is("authenticate failed"))__        assertThat(result.getException(), notNullValue())__        assertThat(result.getException().getMessage(), containsString("UnknownHostException"))__    };the,contract,for,link,realm,implementations,is,that,they,should,log,and,return,null,and,not,call,link,action,listener,on,failure,exception,if,there,is,an,internal,exception,that,prevented,them,from,performing,an,authentication,this,method,tests,that,when,an,ldap,server,is,unavailable,invalid,hostname,there,is,a,code,null,code,result,rather,than,an,exception;public,void,test,ldap,connection,failure,is,treated,as,authentication,failure,throws,exception,ldapurl,url,new,ldapurl,ldap,12345,null,null,null,null,string,group,search,base,o,seven,seas,string,user,template,settings,settings,build,ldap,settings,new,string,url,to,string,user,template,group,search,base,ldap,search,scope,realm,config,config,new,realm,config,test,ldap,realm,settings,global,settings,test,environment,new,environment,global,settings,new,thread,context,global,settings,ldap,session,factory,ldap,factory,new,ldap,session,factory,config,ssl,service,thread,pool,ldap,realm,ldap,new,ldap,realm,ldap,realm,settings,config,ldap,factory,build,group,as,role,mapper,resource,watcher,service,thread,pool,plain,action,future,authentication,result,future,new,plain,action,future,ldap,authenticate,new,username,password,token,new,secure,string,password,future,final,authentication,result,result,future,action,get,assert,that,result,get,status,is,authentication,result,status,continue,assert,that,result,get,user,null,value,assert,that,result,get,message,is,authenticate,failed,assert,that,result,get,exception,not,null,value,assert,that,result,get,exception,get,message,contains,string,unknown,host,exception
LdapRealmTests -> public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception;1528304883;The contract for {@link Realm} implementations is that they should log-and-return-null (and_not call {@link ActionListener#onFailure(Exception)}) if there is an internal exception that prevented them from performing an_authentication._This method tests that when an LDAP server is unavailable (invalid hostname), there is a <code>null</code> result_rather than an exception.;public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception {_        LDAPURL url = new LDAPURL("ldap", "..", 12345, null, null, null, null)__        String groupSearchBase = "o=sevenSeas"__        String userTemplate = VALID_USER_TEMPLATE__        Settings settings = buildLdapSettings(new String[] { url.toString() }, userTemplate, groupSearchBase, LdapSearchScope.SUB_TREE)__        RealmConfig config = new RealmConfig("test-ldap-realm", settings, globalSettings, TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings))__        LdapSessionFactory ldapFactory = new LdapSessionFactory(config, sslService, threadPool)__        LdapRealm ldap = new LdapRealm(LdapRealmSettings.LDAP_TYPE, config, ldapFactory, buildGroupAsRoleMapper(resourceWatcherService),_                threadPool)___        PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>()__        ldap.authenticate(new UsernamePasswordToken(VALID_USERNAME, new SecureString(PASSWORD)), future)__        final AuthenticationResult result = future.actionGet()__        assertThat(result.getStatus(), is(AuthenticationResult.Status.CONTINUE))__        assertThat(result.getUser(), nullValue())__        assertThat(result.getMessage(), is("authenticate failed"))__        assertThat(result.getException(), notNullValue())__        assertThat(result.getException().getMessage(), containsString("UnknownHostException"))__    };the,contract,for,link,realm,implementations,is,that,they,should,log,and,return,null,and,not,call,link,action,listener,on,failure,exception,if,there,is,an,internal,exception,that,prevented,them,from,performing,an,authentication,this,method,tests,that,when,an,ldap,server,is,unavailable,invalid,hostname,there,is,a,code,null,code,result,rather,than,an,exception;public,void,test,ldap,connection,failure,is,treated,as,authentication,failure,throws,exception,ldapurl,url,new,ldapurl,ldap,12345,null,null,null,null,string,group,search,base,o,seven,seas,string,user,template,settings,settings,build,ldap,settings,new,string,url,to,string,user,template,group,search,base,ldap,search,scope,realm,config,config,new,realm,config,test,ldap,realm,settings,global,settings,test,environment,new,environment,global,settings,new,thread,context,global,settings,ldap,session,factory,ldap,factory,new,ldap,session,factory,config,ssl,service,thread,pool,ldap,realm,ldap,new,ldap,realm,ldap,realm,settings,config,ldap,factory,build,group,as,role,mapper,resource,watcher,service,thread,pool,plain,action,future,authentication,result,future,new,plain,action,future,ldap,authenticate,new,username,password,token,new,secure,string,password,future,final,authentication,result,result,future,action,get,assert,that,result,get,status,is,authentication,result,status,continue,assert,that,result,get,user,null,value,assert,that,result,get,message,is,authenticate,failed,assert,that,result,get,exception,not,null,value,assert,that,result,get,exception,get,message,contains,string,unknown,host,exception
LdapRealmTests -> public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception;1528762805;The contract for {@link Realm} implementations is that they should log-and-return-null (and_not call {@link ActionListener#onFailure(Exception)}) if there is an internal exception that prevented them from performing an_authentication._This method tests that when an LDAP server is unavailable (invalid hostname), there is a <code>null</code> result_rather than an exception.;public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception {_        LDAPURL url = new LDAPURL("ldap", "..", 12345, null, null, null, null)__        String groupSearchBase = "o=sevenSeas"__        String userTemplate = VALID_USER_TEMPLATE__        Settings settings = buildLdapSettings(new String[] { url.toString() }, userTemplate, groupSearchBase, LdapSearchScope.SUB_TREE)__        RealmConfig config = new RealmConfig("test-ldap-realm", settings, globalSettings, TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings))__        LdapSessionFactory ldapFactory = new LdapSessionFactory(config, sslService, threadPool)__        LdapRealm ldap = new LdapRealm(LdapRealmSettings.LDAP_TYPE, config, ldapFactory, buildGroupAsRoleMapper(resourceWatcherService),_                threadPool)___        PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>()__        ldap.authenticate(new UsernamePasswordToken(VALID_USERNAME, new SecureString(PASSWORD)), future)__        final AuthenticationResult result = future.actionGet()__        assertThat(result.getStatus(), is(AuthenticationResult.Status.CONTINUE))__        assertThat(result.getUser(), nullValue())__        assertThat(result.getMessage(), is("authenticate failed"))__        assertThat(result.getException(), notNullValue())__        assertThat(result.getException().getMessage(), containsString("UnknownHostException"))__    };the,contract,for,link,realm,implementations,is,that,they,should,log,and,return,null,and,not,call,link,action,listener,on,failure,exception,if,there,is,an,internal,exception,that,prevented,them,from,performing,an,authentication,this,method,tests,that,when,an,ldap,server,is,unavailable,invalid,hostname,there,is,a,code,null,code,result,rather,than,an,exception;public,void,test,ldap,connection,failure,is,treated,as,authentication,failure,throws,exception,ldapurl,url,new,ldapurl,ldap,12345,null,null,null,null,string,group,search,base,o,seven,seas,string,user,template,settings,settings,build,ldap,settings,new,string,url,to,string,user,template,group,search,base,ldap,search,scope,realm,config,config,new,realm,config,test,ldap,realm,settings,global,settings,test,environment,new,environment,global,settings,new,thread,context,global,settings,ldap,session,factory,ldap,factory,new,ldap,session,factory,config,ssl,service,thread,pool,ldap,realm,ldap,new,ldap,realm,ldap,realm,settings,config,ldap,factory,build,group,as,role,mapper,resource,watcher,service,thread,pool,plain,action,future,authentication,result,future,new,plain,action,future,ldap,authenticate,new,username,password,token,new,secure,string,password,future,final,authentication,result,result,future,action,get,assert,that,result,get,status,is,authentication,result,status,continue,assert,that,result,get,user,null,value,assert,that,result,get,message,is,authenticate,failed,assert,that,result,get,exception,not,null,value,assert,that,result,get,exception,get,message,contains,string,unknown,host,exception
LdapRealmTests -> public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception;1531729807;The contract for {@link Realm} implementations is that they should log-and-return-null (and_not call {@link ActionListener#onFailure(Exception)}) if there is an internal exception that prevented them from performing an_authentication._This method tests that when an LDAP server is unavailable (invalid hostname), there is a <code>null</code> result_rather than an exception.;public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception {_        LDAPURL url = new LDAPURL("ldap", "..", 12345, null, null, null, null)__        String groupSearchBase = "o=sevenSeas"__        String userTemplate = VALID_USER_TEMPLATE__        Settings settings = buildLdapSettings(new String[] { url.toString() }, userTemplate, groupSearchBase, LdapSearchScope.SUB_TREE)__        RealmConfig config = new RealmConfig("test-ldap-realm", settings, defaultGlobalSettings, TestEnvironment.newEnvironment(defaultGlobalSettings), new ThreadContext(defaultGlobalSettings))__        LdapSessionFactory ldapFactory = new LdapSessionFactory(config, sslService, threadPool)__        LdapRealm ldap = new LdapRealm(LdapRealmSettings.LDAP_TYPE, config, ldapFactory, buildGroupAsRoleMapper(resourceWatcherService),_                threadPool)___        PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>()__        ldap.authenticate(new UsernamePasswordToken(VALID_USERNAME, new SecureString(PASSWORD)), future)__        final AuthenticationResult result = future.actionGet()__        assertThat(result.getStatus(), is(AuthenticationResult.Status.CONTINUE))__        assertThat(result.getUser(), nullValue())__        assertThat(result.getMessage(), is("authenticate failed"))__        assertThat(result.getException(), notNullValue())__        assertThat(result.getException().getMessage(), containsString("UnknownHostException"))__    };the,contract,for,link,realm,implementations,is,that,they,should,log,and,return,null,and,not,call,link,action,listener,on,failure,exception,if,there,is,an,internal,exception,that,prevented,them,from,performing,an,authentication,this,method,tests,that,when,an,ldap,server,is,unavailable,invalid,hostname,there,is,a,code,null,code,result,rather,than,an,exception;public,void,test,ldap,connection,failure,is,treated,as,authentication,failure,throws,exception,ldapurl,url,new,ldapurl,ldap,12345,null,null,null,null,string,group,search,base,o,seven,seas,string,user,template,settings,settings,build,ldap,settings,new,string,url,to,string,user,template,group,search,base,ldap,search,scope,realm,config,config,new,realm,config,test,ldap,realm,settings,default,global,settings,test,environment,new,environment,default,global,settings,new,thread,context,default,global,settings,ldap,session,factory,ldap,factory,new,ldap,session,factory,config,ssl,service,thread,pool,ldap,realm,ldap,new,ldap,realm,ldap,realm,settings,config,ldap,factory,build,group,as,role,mapper,resource,watcher,service,thread,pool,plain,action,future,authentication,result,future,new,plain,action,future,ldap,authenticate,new,username,password,token,new,secure,string,password,future,final,authentication,result,result,future,action,get,assert,that,result,get,status,is,authentication,result,status,continue,assert,that,result,get,user,null,value,assert,that,result,get,message,is,authenticate,failed,assert,that,result,get,exception,not,null,value,assert,that,result,get,exception,get,message,contains,string,unknown,host,exception
LdapRealmTests -> public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception;1533295538;The contract for {@link Realm} implementations is that they should log-and-return-null (and_not call {@link ActionListener#onFailure(Exception)}) if there is an internal exception that prevented them from performing an_authentication._This method tests that when an LDAP server is unavailable (invalid hostname), there is a <code>null</code> result_rather than an exception.;public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception {_        LDAPURL url = new LDAPURL("ldap", "..", 12345, null, null, null, null)__        String groupSearchBase = "o=sevenSeas"__        String userTemplate = VALID_USER_TEMPLATE__        Settings settings = buildLdapSettings(new String[] { url.toString() }, userTemplate, groupSearchBase, LdapSearchScope.SUB_TREE)__        RealmConfig config = new RealmConfig("test-ldap-realm", settings, defaultGlobalSettings, TestEnvironment.newEnvironment(defaultGlobalSettings), new ThreadContext(defaultGlobalSettings))__        LdapSessionFactory ldapFactory = new LdapSessionFactory(config, sslService, threadPool)__        LdapRealm ldap = new LdapRealm(LdapRealmSettings.LDAP_TYPE, config, ldapFactory, buildGroupAsRoleMapper(resourceWatcherService),_                threadPool)___        PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>()__        ldap.authenticate(new UsernamePasswordToken(VALID_USERNAME, new SecureString(PASSWORD)), future)__        final AuthenticationResult result = future.actionGet()__        assertThat(result.getStatus(), is(AuthenticationResult.Status.CONTINUE))__        assertThat(result.getUser(), nullValue())__        assertThat(result.getMessage(), is("authenticate failed"))__        assertThat(result.getException(), notNullValue())__        assertThat(result.getException().getMessage(), containsString("UnknownHostException"))__    };the,contract,for,link,realm,implementations,is,that,they,should,log,and,return,null,and,not,call,link,action,listener,on,failure,exception,if,there,is,an,internal,exception,that,prevented,them,from,performing,an,authentication,this,method,tests,that,when,an,ldap,server,is,unavailable,invalid,hostname,there,is,a,code,null,code,result,rather,than,an,exception;public,void,test,ldap,connection,failure,is,treated,as,authentication,failure,throws,exception,ldapurl,url,new,ldapurl,ldap,12345,null,null,null,null,string,group,search,base,o,seven,seas,string,user,template,settings,settings,build,ldap,settings,new,string,url,to,string,user,template,group,search,base,ldap,search,scope,realm,config,config,new,realm,config,test,ldap,realm,settings,default,global,settings,test,environment,new,environment,default,global,settings,new,thread,context,default,global,settings,ldap,session,factory,ldap,factory,new,ldap,session,factory,config,ssl,service,thread,pool,ldap,realm,ldap,new,ldap,realm,ldap,realm,settings,config,ldap,factory,build,group,as,role,mapper,resource,watcher,service,thread,pool,plain,action,future,authentication,result,future,new,plain,action,future,ldap,authenticate,new,username,password,token,new,secure,string,password,future,final,authentication,result,result,future,action,get,assert,that,result,get,status,is,authentication,result,status,continue,assert,that,result,get,user,null,value,assert,that,result,get,message,is,authenticate,failed,assert,that,result,get,exception,not,null,value,assert,that,result,get,exception,get,message,contains,string,unknown,host,exception
LdapRealmTests -> public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception;1535552903;The contract for {@link Realm} implementations is that they should log-and-return-null (and_not call {@link ActionListener#onFailure(Exception)}) if there is an internal exception that prevented them from performing an_authentication._This method tests that when an LDAP server is unavailable (invalid hostname), there is a <code>null</code> result_rather than an exception.;public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception {_        LDAPURL url = new LDAPURL("ldap", "..", 12345, null, null, null, null)__        String groupSearchBase = "o=sevenSeas"__        String userTemplate = VALID_USER_TEMPLATE__        Settings settings = buildLdapSettings(new String[] { url.toString() }, userTemplate, groupSearchBase, LdapSearchScope.SUB_TREE)__        RealmConfig config = new RealmConfig("test-ldap-realm", settings, defaultGlobalSettings, TestEnvironment.newEnvironment(defaultGlobalSettings), new ThreadContext(defaultGlobalSettings))__        LdapSessionFactory ldapFactory = new LdapSessionFactory(config, sslService, threadPool)__        LdapRealm ldap = new LdapRealm(LdapRealmSettings.LDAP_TYPE, config, ldapFactory, buildGroupAsRoleMapper(resourceWatcherService),_                threadPool)___        PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>()__        ldap.authenticate(new UsernamePasswordToken(VALID_USERNAME, new SecureString(PASSWORD)), future)__        final AuthenticationResult result = future.actionGet()__        assertThat(result.getStatus(), is(AuthenticationResult.Status.CONTINUE))__        assertThat(result.getUser(), nullValue())__        assertThat(result.getMessage(), is("authenticate failed"))__        assertThat(result.getException(), notNullValue())__        assertThat(result.getException().getMessage(), containsString("UnknownHostException"))__    };the,contract,for,link,realm,implementations,is,that,they,should,log,and,return,null,and,not,call,link,action,listener,on,failure,exception,if,there,is,an,internal,exception,that,prevented,them,from,performing,an,authentication,this,method,tests,that,when,an,ldap,server,is,unavailable,invalid,hostname,there,is,a,code,null,code,result,rather,than,an,exception;public,void,test,ldap,connection,failure,is,treated,as,authentication,failure,throws,exception,ldapurl,url,new,ldapurl,ldap,12345,null,null,null,null,string,group,search,base,o,seven,seas,string,user,template,settings,settings,build,ldap,settings,new,string,url,to,string,user,template,group,search,base,ldap,search,scope,realm,config,config,new,realm,config,test,ldap,realm,settings,default,global,settings,test,environment,new,environment,default,global,settings,new,thread,context,default,global,settings,ldap,session,factory,ldap,factory,new,ldap,session,factory,config,ssl,service,thread,pool,ldap,realm,ldap,new,ldap,realm,ldap,realm,settings,config,ldap,factory,build,group,as,role,mapper,resource,watcher,service,thread,pool,plain,action,future,authentication,result,future,new,plain,action,future,ldap,authenticate,new,username,password,token,new,secure,string,password,future,final,authentication,result,result,future,action,get,assert,that,result,get,status,is,authentication,result,status,continue,assert,that,result,get,user,null,value,assert,that,result,get,message,is,authenticate,failed,assert,that,result,get,exception,not,null,value,assert,that,result,get,exception,get,message,contains,string,unknown,host,exception
LdapRealmTests -> public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception;1535723122;The contract for {@link Realm} implementations is that they should log-and-return-null (and_not call {@link ActionListener#onFailure(Exception)}) if there is an internal exception that prevented them from performing an_authentication._This method tests that when an LDAP server is unavailable (invalid hostname), there is a <code>null</code> result_rather than an exception.;public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception {_        LDAPURL url = new LDAPURL("ldap", "..", 12345, null, null, null, null)__        String groupSearchBase = "o=sevenSeas"__        String userTemplate = VALID_USER_TEMPLATE__        Settings settings = buildLdapSettings(new String[] { url.toString() }, userTemplate, groupSearchBase, LdapSearchScope.SUB_TREE)__        RealmConfig config = new RealmConfig("test-ldap-realm", settings, defaultGlobalSettings,_            TestEnvironment.newEnvironment(defaultGlobalSettings), new ThreadContext(defaultGlobalSettings))__        LdapSessionFactory ldapFactory = new LdapSessionFactory(config, sslService, threadPool)__        LdapRealm ldap = new LdapRealm(LdapRealmSettings.LDAP_TYPE, config, ldapFactory, buildGroupAsRoleMapper(resourceWatcherService),_                threadPool)__        ldap.initialize(Collections.singleton(ldap), licenseState)___        PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>()__        ldap.authenticate(new UsernamePasswordToken(VALID_USERNAME, new SecureString(PASSWORD)), future)__        final AuthenticationResult result = future.actionGet()__        assertThat(result.getStatus(), is(AuthenticationResult.Status.CONTINUE))__        assertThat(result.getUser(), nullValue())__        assertThat(result.getMessage(), is("authenticate failed"))__        assertThat(result.getException(), notNullValue())__        assertThat(result.getException().getMessage(), containsString("UnknownHostException"))__    };the,contract,for,link,realm,implementations,is,that,they,should,log,and,return,null,and,not,call,link,action,listener,on,failure,exception,if,there,is,an,internal,exception,that,prevented,them,from,performing,an,authentication,this,method,tests,that,when,an,ldap,server,is,unavailable,invalid,hostname,there,is,a,code,null,code,result,rather,than,an,exception;public,void,test,ldap,connection,failure,is,treated,as,authentication,failure,throws,exception,ldapurl,url,new,ldapurl,ldap,12345,null,null,null,null,string,group,search,base,o,seven,seas,string,user,template,settings,settings,build,ldap,settings,new,string,url,to,string,user,template,group,search,base,ldap,search,scope,realm,config,config,new,realm,config,test,ldap,realm,settings,default,global,settings,test,environment,new,environment,default,global,settings,new,thread,context,default,global,settings,ldap,session,factory,ldap,factory,new,ldap,session,factory,config,ssl,service,thread,pool,ldap,realm,ldap,new,ldap,realm,ldap,realm,settings,config,ldap,factory,build,group,as,role,mapper,resource,watcher,service,thread,pool,ldap,initialize,collections,singleton,ldap,license,state,plain,action,future,authentication,result,future,new,plain,action,future,ldap,authenticate,new,username,password,token,new,secure,string,password,future,final,authentication,result,result,future,action,get,assert,that,result,get,status,is,authentication,result,status,continue,assert,that,result,get,user,null,value,assert,that,result,get,message,is,authenticate,failed,assert,that,result,get,exception,not,null,value,assert,that,result,get,exception,get,message,contains,string,unknown,host,exception
LdapRealmTests -> public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception;1541476610;The contract for {@link Realm} implementations is that they should log-and-return-null (and_not call {@link ActionListener#onFailure(Exception)}) if there is an internal exception that prevented them from performing an_authentication._This method tests that when an LDAP server is unavailable (invalid hostname), there is a <code>null</code> result_rather than an exception.;public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception {_        LDAPURL url = new LDAPURL("ldap", "..", 12345, null, null, null, null)__        String groupSearchBase = "o=sevenSeas"__        String userTemplate = VALID_USER_TEMPLATE__        Settings settings = buildLdapSettings(new String[] { url.toString() }, userTemplate, groupSearchBase, LdapSearchScope.SUB_TREE)__        RealmConfig config = getRealmConfig(REALM_IDENTIFIER, settings)__        LdapSessionFactory ldapFactory = new LdapSessionFactory(config, sslService, threadPool)__        LdapRealm ldap = new LdapRealm(config, ldapFactory, buildGroupAsRoleMapper(resourceWatcherService),_                threadPool)__        ldap.initialize(Collections.singleton(ldap), licenseState)___        PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>()__        ldap.authenticate(new UsernamePasswordToken(VALID_USERNAME, new SecureString(PASSWORD)), future)__        final AuthenticationResult result = future.actionGet()__        assertThat(result.getStatus(), is(AuthenticationResult.Status.CONTINUE))__        assertThat(result.getUser(), nullValue())__        assertThat(result.getMessage(), is("authenticate failed"))__        assertThat(result.getException(), notNullValue())__        assertThat(result.getException().getMessage(), containsString("UnknownHostException"))__    };the,contract,for,link,realm,implementations,is,that,they,should,log,and,return,null,and,not,call,link,action,listener,on,failure,exception,if,there,is,an,internal,exception,that,prevented,them,from,performing,an,authentication,this,method,tests,that,when,an,ldap,server,is,unavailable,invalid,hostname,there,is,a,code,null,code,result,rather,than,an,exception;public,void,test,ldap,connection,failure,is,treated,as,authentication,failure,throws,exception,ldapurl,url,new,ldapurl,ldap,12345,null,null,null,null,string,group,search,base,o,seven,seas,string,user,template,settings,settings,build,ldap,settings,new,string,url,to,string,user,template,group,search,base,ldap,search,scope,realm,config,config,get,realm,config,settings,ldap,session,factory,ldap,factory,new,ldap,session,factory,config,ssl,service,thread,pool,ldap,realm,ldap,new,ldap,realm,config,ldap,factory,build,group,as,role,mapper,resource,watcher,service,thread,pool,ldap,initialize,collections,singleton,ldap,license,state,plain,action,future,authentication,result,future,new,plain,action,future,ldap,authenticate,new,username,password,token,new,secure,string,password,future,final,authentication,result,result,future,action,get,assert,that,result,get,status,is,authentication,result,status,continue,assert,that,result,get,user,null,value,assert,that,result,get,message,is,authenticate,failed,assert,that,result,get,exception,not,null,value,assert,that,result,get,exception,get,message,contains,string,unknown,host,exception
LdapRealmTests -> public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception;1541642262;The contract for {@link Realm} implementations is that they should log-and-return-null (and_not call {@link ActionListener#onFailure(Exception)}) if there is an internal exception that prevented them from performing an_authentication._This method tests that when an LDAP server is unavailable (invalid hostname), there is a <code>null</code> result_rather than an exception.;public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception {_        LDAPURL url = new LDAPURL("ldap", "..", 12345, null, null, null, null)__        String groupSearchBase = "o=sevenSeas"__        String userTemplate = VALID_USER_TEMPLATE__        Settings settings = buildLdapSettings(new String[] { url.toString() }, userTemplate, groupSearchBase, LdapSearchScope.SUB_TREE)__        RealmConfig config = getRealmConfig(REALM_IDENTIFIER, settings)__        LdapSessionFactory ldapFactory = new LdapSessionFactory(config, sslService, threadPool)__        LdapRealm ldap = new LdapRealm(config, ldapFactory, buildGroupAsRoleMapper(resourceWatcherService),_                threadPool)__        ldap.initialize(Collections.singleton(ldap), licenseState)___        PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>()__        ldap.authenticate(new UsernamePasswordToken(VALID_USERNAME, new SecureString(PASSWORD)), future)__        final AuthenticationResult result = future.actionGet()__        assertThat(result.getStatus(), is(AuthenticationResult.Status.CONTINUE))__        assertThat(result.getUser(), nullValue())__        assertThat(result.getMessage(), is("authenticate failed"))__        assertThat(result.getException(), notNullValue())__        assertThat(result.getException().getMessage(), containsString("UnknownHostException"))__    };the,contract,for,link,realm,implementations,is,that,they,should,log,and,return,null,and,not,call,link,action,listener,on,failure,exception,if,there,is,an,internal,exception,that,prevented,them,from,performing,an,authentication,this,method,tests,that,when,an,ldap,server,is,unavailable,invalid,hostname,there,is,a,code,null,code,result,rather,than,an,exception;public,void,test,ldap,connection,failure,is,treated,as,authentication,failure,throws,exception,ldapurl,url,new,ldapurl,ldap,12345,null,null,null,null,string,group,search,base,o,seven,seas,string,user,template,settings,settings,build,ldap,settings,new,string,url,to,string,user,template,group,search,base,ldap,search,scope,realm,config,config,get,realm,config,settings,ldap,session,factory,ldap,factory,new,ldap,session,factory,config,ssl,service,thread,pool,ldap,realm,ldap,new,ldap,realm,config,ldap,factory,build,group,as,role,mapper,resource,watcher,service,thread,pool,ldap,initialize,collections,singleton,ldap,license,state,plain,action,future,authentication,result,future,new,plain,action,future,ldap,authenticate,new,username,password,token,new,secure,string,password,future,final,authentication,result,result,future,action,get,assert,that,result,get,status,is,authentication,result,status,continue,assert,that,result,get,user,null,value,assert,that,result,get,message,is,authenticate,failed,assert,that,result,get,exception,not,null,value,assert,that,result,get,exception,get,message,contains,string,unknown,host,exception
LdapRealmTests -> public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception;1541747604;The contract for {@link Realm} implementations is that they should log-and-return-null (and_not call {@link ActionListener#onFailure(Exception)}) if there is an internal exception that prevented them from performing an_authentication._This method tests that when an LDAP server is unavailable (invalid hostname), there is a <code>null</code> result_rather than an exception.;public void testLdapConnectionFailureIsTreatedAsAuthenticationFailure() throws Exception {_        LDAPURL url = new LDAPURL("ldap", "..", 12345, null, null, null, null)__        String groupSearchBase = "o=sevenSeas"__        String userTemplate = VALID_USER_TEMPLATE__        Settings settings = Settings.builder()_            .put(defaultGlobalSettings)_            .put(buildLdapSettings(new String[]{url.toString()}, userTemplate, groupSearchBase, LdapSearchScope.SUB_TREE))_            .build()__        RealmConfig config = getRealmConfig(REALM_IDENTIFIER, settings)__        LdapSessionFactory ldapFactory = new LdapSessionFactory(config, sslService, threadPool)__        LdapRealm ldap = new LdapRealm(config, ldapFactory, buildGroupAsRoleMapper(resourceWatcherService),_                threadPool)__        ldap.initialize(Collections.singleton(ldap), licenseState)___        PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>()__        ldap.authenticate(new UsernamePasswordToken(VALID_USERNAME, new SecureString(PASSWORD)), future)__        final AuthenticationResult result = future.actionGet()__        assertThat(result.getStatus(), is(AuthenticationResult.Status.CONTINUE))__        assertThat(result.getUser(), nullValue())__        assertThat(result.getMessage(), is("authenticate failed"))__        assertThat(result.getException(), notNullValue())__        assertThat(result.getException().getMessage(), containsString("UnknownHostException"))__    };the,contract,for,link,realm,implementations,is,that,they,should,log,and,return,null,and,not,call,link,action,listener,on,failure,exception,if,there,is,an,internal,exception,that,prevented,them,from,performing,an,authentication,this,method,tests,that,when,an,ldap,server,is,unavailable,invalid,hostname,there,is,a,code,null,code,result,rather,than,an,exception;public,void,test,ldap,connection,failure,is,treated,as,authentication,failure,throws,exception,ldapurl,url,new,ldapurl,ldap,12345,null,null,null,null,string,group,search,base,o,seven,seas,string,user,template,settings,settings,settings,builder,put,default,global,settings,put,build,ldap,settings,new,string,url,to,string,user,template,group,search,base,ldap,search,scope,build,realm,config,config,get,realm,config,settings,ldap,session,factory,ldap,factory,new,ldap,session,factory,config,ssl,service,thread,pool,ldap,realm,ldap,new,ldap,realm,config,ldap,factory,build,group,as,role,mapper,resource,watcher,service,thread,pool,ldap,initialize,collections,singleton,ldap,license,state,plain,action,future,authentication,result,future,new,plain,action,future,ldap,authenticate,new,username,password,token,new,secure,string,password,future,final,authentication,result,result,future,action,get,assert,that,result,get,status,is,authentication,result,status,continue,assert,that,result,get,user,null,value,assert,that,result,get,message,is,authenticate,failed,assert,that,result,get,exception,not,null,value,assert,that,result,get,exception,get,message,contains,string,unknown,host,exception
