commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(AuthenticateResponse authenticateResponse) {     responseRef.set(authenticateResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;28;;public void testInternalUser() {     SecurityContext securityContext = mock(SecurityContext.class).     final Authentication authentication = new Authentication(randomFrom(SystemUser.INSTANCE, XPackUser.INSTANCE), new Authentication.RealmRef("native", "default_native", "node1"), null).     when(securityContext.getAuthentication()).thenReturn(authentication).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportAuthenticateAction action = new TransportAuthenticateAction(transportService, mock(ActionFilters.class), securityContext).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<AuthenticateResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), new AuthenticateRequest(), new ActionListener<AuthenticateResponse>() {          @Override         public void onResponse(AuthenticateResponse authenticateResponse) {             responseRef.set(authenticateResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), nullValue()).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is internal")). }
false;public;1;4;;@Override public void onResponse(AuthenticateResponse authenticateResponse) {     responseRef.set(authenticateResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;25;;public void testNullUser() {     SecurityContext securityContext = mock(SecurityContext.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportAuthenticateAction action = new TransportAuthenticateAction(transportService, mock(ActionFilters.class), securityContext).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<AuthenticateResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), new AuthenticateRequest(), new ActionListener<AuthenticateResponse>() {          @Override         public void onResponse(AuthenticateResponse authenticateResponse) {             responseRef.set(authenticateResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), nullValue()).     assertThat(throwableRef.get(), instanceOf(ElasticsearchSecurityException.class)).     assertThat(throwableRef.get().getMessage(), containsString("did not find an authenticated user")). }
false;public;1;4;;@Override public void onResponse(AuthenticateResponse authenticateResponse) {     responseRef.set(authenticateResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;30;;public void testValidAuthentication() {     final User user = randomFrom(new ElasticUser(true), new KibanaUser(true), new User("joe")).     final Authentication authentication = new Authentication(user, new Authentication.RealmRef("native_realm", "native", "node1"), null).     SecurityContext securityContext = mock(SecurityContext.class).     when(securityContext.getAuthentication()).thenReturn(authentication).     when(securityContext.getUser()).thenReturn(user).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportAuthenticateAction action = new TransportAuthenticateAction(transportService, mock(ActionFilters.class), securityContext).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<AuthenticateResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), new AuthenticateRequest(), new ActionListener<AuthenticateResponse>() {          @Override         public void onResponse(AuthenticateResponse authenticateResponse) {             responseRef.set(authenticateResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), notNullValue()).     assertThat(responseRef.get().authentication(), sameInstance(authentication)).     assertThat(throwableRef.get(), nullValue()). }
