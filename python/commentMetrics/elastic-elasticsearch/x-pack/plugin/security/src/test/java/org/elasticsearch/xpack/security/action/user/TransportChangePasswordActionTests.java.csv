commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(ChangePasswordResponse changePasswordResponse) {     responseRef.set(changePasswordResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;34;;public void testAnonymousUser() {     final String hashingAlgorithm = randomFrom("pbkdf2", "pbkdf2_1000", "bcrypt", "bcrypt9").     Settings settings = Settings.builder().put(AnonymousUser.ROLES_SETTING.getKey(), "superuser").put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), hashingAlgorithm).build().     AnonymousUser anonymousUser = new AnonymousUser(settings).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportChangePasswordAction action = new TransportChangePasswordAction(settings, transportService, mock(ActionFilters.class), usersStore).     // Request will fail before the request hashing algorithm is checked, but we use the same algorithm as in settings for consistency     ChangePasswordRequest request = new ChangePasswordRequest().     request.username(anonymousUser.principal()).     request.passwordHash(Hasher.resolve(hashingAlgorithm).hash(SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<ChangePasswordResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<ChangePasswordResponse>() {          @Override         public void onResponse(ChangePasswordResponse changePasswordResponse) {             responseRef.set(changePasswordResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is anonymous and cannot be modified")).     verifyZeroInteractions(usersStore). }
false;public;1;4;;@Override public void onResponse(ChangePasswordResponse changePasswordResponse) {     responseRef.set(changePasswordResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;33;;public void testInternalUsers() {     final String hashingAlgorithm = randomFrom("pbkdf2", "pbkdf2_1000", "bcrypt", "bcrypt9").     NativeUsersStore usersStore = mock(NativeUsersStore.class).     Settings passwordHashingSettings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), hashingAlgorithm).build().     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportChangePasswordAction action = new TransportChangePasswordAction(passwordHashingSettings, transportService, mock(ActionFilters.class), usersStore).     // Request will fail before the request hashing algorithm is checked, but we use the same algorithm as in settings for consistency     ChangePasswordRequest request = new ChangePasswordRequest().     request.username(randomFrom(SystemUser.INSTANCE.principal(), XPackUser.INSTANCE.principal())).     request.passwordHash(Hasher.resolve(hashingAlgorithm).hash(SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<ChangePasswordResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<ChangePasswordResponse>() {          @Override         public void onResponse(ChangePasswordResponse changePasswordResponse) {             responseRef.set(changePasswordResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("is internal")).     verifyZeroInteractions(usersStore). }
false;public;1;4;;@Override public void onResponse(ChangePasswordResponse changePasswordResponse) {     responseRef.set(changePasswordResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;40;;public void testValidUser() {     final String hashingAlgorithm = randomFrom("pbkdf2", "pbkdf2_1000", "bcrypt", "bcrypt9").     final User user = randomFrom(new ElasticUser(true), new KibanaUser(true), new User("joe")).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     final Hasher hasher = Hasher.resolve(hashingAlgorithm).     ChangePasswordRequest request = new ChangePasswordRequest().     request.username(user.principal()).     request.passwordHash(hasher.hash(SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)).     doAnswer(invocation -> {         Object[] args = invocation.getArguments().         assert args.length == 2.         ActionListener<Void> listener = (ActionListener<Void>) args[1].         listener.onResponse(null).         return null.     }).when(usersStore).changePassword(eq(request), any(ActionListener.class)).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     Settings passwordHashingSettings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), hashingAlgorithm).build().     TransportChangePasswordAction action = new TransportChangePasswordAction(passwordHashingSettings, transportService, mock(ActionFilters.class), usersStore).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<ChangePasswordResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<ChangePasswordResponse>() {          @Override         public void onResponse(ChangePasswordResponse changePasswordResponse) {             responseRef.set(changePasswordResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(notNullValue())).     assertThat(responseRef.get(), instanceOf(ChangePasswordResponse.class)).     assertThat(throwableRef.get(), is(nullValue())).     verify(usersStore, times(1)).changePassword(eq(request), any(ActionListener.class)). }
false;public;1;4;;@Override public void onResponse(ChangePasswordResponse changePasswordResponse) {     responseRef.set(changePasswordResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;32;;public void testIncorrectPasswordHashingAlgorithm() {     final User user = randomFrom(new ElasticUser(true), new KibanaUser(true), new User("joe")).     final Hasher hasher = Hasher.resolve(randomFrom("pbkdf2", "pbkdf2_1000", "bcrypt9", "bcrypt5")).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     ChangePasswordRequest request = new ChangePasswordRequest().     request.username(user.principal()).     request.passwordHash(hasher.hash(SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<ChangePasswordResponse> responseRef = new AtomicReference<>().     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     Settings passwordHashingSettings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), randomFrom("pbkdf2_50000", "pbkdf2_100000", "bcrypt11", "bcrypt8", "bcrypt")).build().     TransportChangePasswordAction action = new TransportChangePasswordAction(passwordHashingSettings, transportService, mock(ActionFilters.class), usersStore).     action.doExecute(mock(Task.class), request, new ActionListener<ChangePasswordResponse>() {          @Override         public void onResponse(ChangePasswordResponse changePasswordResponse) {             responseRef.set(changePasswordResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), instanceOf(IllegalArgumentException.class)).     assertThat(throwableRef.get().getMessage(), containsString("incorrect password hashing algorithm")).     verifyZeroInteractions(usersStore). }
false;public;1;7;;public Void answer(InvocationOnMock invocation) {     Object[] args = invocation.getArguments().     assert args.length == 2.     ActionListener<Void> listener = (ActionListener<Void>) args[1].     listener.onFailure(e).     return null. }
false;public;1;4;;@Override public void onResponse(ChangePasswordResponse changePasswordResponse) {     responseRef.set(changePasswordResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwableRef.set(e). }
false;public;0;42;;public void testException() {     final String hashingAlgorithm = randomFrom("pbkdf2", "pbkdf2_1000", "bcrypt", "bcrypt9").     final User user = randomFrom(new ElasticUser(true), new KibanaUser(true), new User("joe")).     NativeUsersStore usersStore = mock(NativeUsersStore.class).     ChangePasswordRequest request = new ChangePasswordRequest().     request.username(user.principal()).     request.passwordHash(Hasher.resolve(hashingAlgorithm).hash(SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)).     final Exception e = randomFrom(new ElasticsearchSecurityException(""), new IllegalStateException(), new RuntimeException()).     doAnswer(new Answer() {          public Void answer(InvocationOnMock invocation) {             Object[] args = invocation.getArguments().             assert args.length == 2.             ActionListener<Void> listener = (ActionListener<Void>) args[1].             listener.onFailure(e).             return null.         }     }).when(usersStore).changePassword(eq(request), any(ActionListener.class)).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     Settings passwordHashingSettings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), hashingAlgorithm).build().     TransportChangePasswordAction action = new TransportChangePasswordAction(passwordHashingSettings, transportService, mock(ActionFilters.class), usersStore).     final AtomicReference<Throwable> throwableRef = new AtomicReference<>().     final AtomicReference<ChangePasswordResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), request, new ActionListener<ChangePasswordResponse>() {          @Override         public void onResponse(ChangePasswordResponse changePasswordResponse) {             responseRef.set(changePasswordResponse).         }          @Override         public void onFailure(Exception e) {             throwableRef.set(e).         }     }).     assertThat(responseRef.get(), is(nullValue())).     assertThat(throwableRef.get(), is(notNullValue())).     assertThat(throwableRef.get(), sameInstance(e)).     verify(usersStore, times(1)).changePassword(eq(request), any(ActionListener.class)). }
