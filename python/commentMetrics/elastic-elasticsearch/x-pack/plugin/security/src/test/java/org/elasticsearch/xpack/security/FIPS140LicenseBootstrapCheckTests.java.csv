commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;public void testBootstrapCheck() throws Exception {     assertTrue(new FIPS140LicenseBootstrapCheck().check(emptyContext).isSuccess()).     assertTrue(new FIPS140LicenseBootstrapCheck().check(createTestContext(Settings.builder().put("xpack.security.fips_mode.enabled", randomBoolean()).build(), MetaData.EMPTY_META_DATA)).isSuccess()).     MetaData.Builder builder = MetaData.builder().     License license = TestUtils.generateSignedLicense(TimeValue.timeValueHours(24)).     TestUtils.putLicense(builder, license).     MetaData metaData = builder.build().     if (FIPS140LicenseBootstrapCheck.ALLOWED_LICENSE_OPERATION_MODES.contains(license.operationMode())) {         assertTrue(new FIPS140LicenseBootstrapCheck().check(createTestContext(Settings.builder().put("xpack.security.fips_mode.enabled", true).build(), metaData)).isSuccess()).         assertTrue(new FIPS140LicenseBootstrapCheck().check(createTestContext(Settings.builder().put("xpack.security.fips_mode.enabled", false).build(), metaData)).isSuccess()).     } else {         assertTrue(new FIPS140LicenseBootstrapCheck().check(createTestContext(Settings.builder().put("xpack.security.fips_mode.enabled", false).build(), metaData)).isSuccess()).         assertTrue(new FIPS140LicenseBootstrapCheck().check(createTestContext(Settings.builder().put("xpack.security.fips_mode.enabled", true).build(), metaData)).isFailure()).         assertEquals("FIPS mode is only allowed with a Platinum or Trial license", new FIPS140LicenseBootstrapCheck().check(createTestContext(Settings.builder().put("xpack.security.fips_mode.enabled", true).build(), metaData)).getMessage()).     } }
