# id;timestamp;commentText;codeText;commentWords;codeWords
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1524684173;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), SecuritySettingsSource.TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1525859433;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), SecuritySettingsSource.TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1526449283;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), SecuritySettingsSource.TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1528304883;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), SecuritySettingsSource.TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1531179852;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), hasher, SecuritySettingsSource_            .TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), hasher, "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,hasher,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,hasher,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1532456624;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), hasher, SecuritySettingsSource_            .TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), hasher, "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,hasher,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,hasher,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1533295538;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), hasher, SecuritySettingsSource_            .TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), hasher, "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,hasher,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,hasher,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1534338685;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), hasher, SecuritySettingsSource_            .TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), hasher, "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,hasher,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,hasher,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1535552903;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), hasher, SecuritySettingsSource_            .TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), hasher, "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,hasher,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,hasher,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1543354542;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), hasher, SecuritySettingsSource_            .TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), hasher, "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,hasher,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,hasher,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1544035746;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), hasher, SecuritySettingsSource_            .TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), hasher, "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,hasher,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,hasher,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
NativeRealmIntegTests -> public void testConcurrentRunAs() throws Exception;1548019180;Tests that multiple concurrent run as requests can be authenticated successfully. There was a bug in the Cache implementation used_for our internal realms that caused some run as requests to fail even when the authentication was valid and the run as user existed.__The issue was that when iterating the realms there would be failed lookups and under heavy concurrency, requests will wait for an_existing load attempt in the cache. The original caller was thrown an ExecutionException with a nested NullPointerException since_the loader returned a null value, while the other caller(s) would get a null value unexpectedly;public void testConcurrentRunAs() throws Exception {_        securityClient().preparePutUser("joe", "s3krit".toCharArray(), hasher, SecuritySettingsSource_            .TEST_ROLE).get()__        securityClient().preparePutUser("executor", "s3krit".toCharArray(), hasher, "superuser").get()__        final String token = basicAuthHeaderValue("executor", new SecureString("s3krit".toCharArray()))__        final Client client = client().filterWithHeader(MapBuilder.<String, String>newMapBuilder()_                .put("Authorization", token)_                .put("es-security-runas-user", "joe")_                .immutableMap())__        final CountDownLatch latch = new CountDownLatch(1)__        final int numberOfProcessors = Runtime.getRuntime().availableProcessors()__        final int numberOfThreads = scaledRandomIntBetween(numberOfProcessors, numberOfProcessors * 3)__        final int numberOfIterations = scaledRandomIntBetween(20, 100)__        List<Thread> threads = new ArrayList<>()__        for (int i = 0_ i < numberOfThreads_ i++) {_            threads.add(new Thread(() -> {_                try {_                    latch.await()__                    for (int j = 0_ j < numberOfIterations_ j++) {_                        ClusterHealthResponse response = client.admin().cluster().prepareHealth().get()__                        assertNoTimeout(response)__                    }_                } catch (InterruptedException e) {_                }_            }))__        }__        for (Thread thread : threads) {_            thread.start()__        }_        latch.countDown()__        for (Thread thread : threads) {_            thread.join()__        }_    };tests,that,multiple,concurrent,run,as,requests,can,be,authenticated,successfully,there,was,a,bug,in,the,cache,implementation,used,for,our,internal,realms,that,caused,some,run,as,requests,to,fail,even,when,the,authentication,was,valid,and,the,run,as,user,existed,the,issue,was,that,when,iterating,the,realms,there,would,be,failed,lookups,and,under,heavy,concurrency,requests,will,wait,for,an,existing,load,attempt,in,the,cache,the,original,caller,was,thrown,an,execution,exception,with,a,nested,null,pointer,exception,since,the,loader,returned,a,null,value,while,the,other,caller,s,would,get,a,null,value,unexpectedly;public,void,test,concurrent,run,as,throws,exception,security,client,prepare,put,user,joe,s3krit,to,char,array,hasher,security,settings,source,get,security,client,prepare,put,user,executor,s3krit,to,char,array,hasher,superuser,get,final,string,token,basic,auth,header,value,executor,new,secure,string,s3krit,to,char,array,final,client,client,client,filter,with,header,map,builder,string,string,new,map,builder,put,authorization,token,put,es,security,runas,user,joe,immutable,map,final,count,down,latch,latch,new,count,down,latch,1,final,int,number,of,processors,runtime,get,runtime,available,processors,final,int,number,of,threads,scaled,random,int,between,number,of,processors,number,of,processors,3,final,int,number,of,iterations,scaled,random,int,between,20,100,list,thread,threads,new,array,list,for,int,i,0,i,number,of,threads,i,threads,add,new,thread,try,latch,await,for,int,j,0,j,number,of,iterations,j,cluster,health,response,response,client,admin,cluster,prepare,health,get,assert,no,timeout,response,catch,interrupted,exception,e,for,thread,thread,threads,thread,start,latch,count,down,for,thread,thread,threads,thread,join
