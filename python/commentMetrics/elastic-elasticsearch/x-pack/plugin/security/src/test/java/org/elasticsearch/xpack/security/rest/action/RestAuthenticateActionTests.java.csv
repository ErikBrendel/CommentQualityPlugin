commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void maybeEnableAnonymous() {     anonymousEnabled = randomBoolean(). }
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;protected;1;11;;@Override protected Settings nodeSettings(int nodeOrdinal) {     Settings.Builder builder = Settings.builder().put(super.nodeSettings(nodeOrdinal)).     if (anonymousEnabled) {         builder.put(AnonymousUser.USERNAME_SETTING.getKey(), "anon").putList(AnonymousUser.ROLES_SETTING.getKey(), SecuritySettingsSource.TEST_ROLE, "foo").put(AuthorizationService.ANONYMOUS_AUTHORIZATION_EXCEPTION_SETTING.getKey(), false).     }     return builder.build(). }
false;public;0;17;;public void testAuthenticateApi() throws Exception {     Request request = new Request("GET", "/_security/_authenticate").     RequestOptions.Builder options = request.getOptions().toBuilder().     options.addHeader("Authorization", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME, new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray()))).     request.setOptions(options).     Response a = getRestClient().performRequest(request).     ObjectPath objectPath = ObjectPath.createFromResponse(a).     assertThat(objectPath.evaluate("username").toString(), equalTo(SecuritySettingsSource.TEST_USER_NAME)).     assertThat(objectPath.evaluate("authentication_realm.name").toString(), equalTo("file")).     assertThat(objectPath.evaluate("authentication_realm.type").toString(), equalTo("file")).     assertThat(objectPath.evaluate("lookup_realm.name").toString(), equalTo("file")).     assertThat(objectPath.evaluate("lookup_realm.type").toString(), equalTo("file")).     List<String> roles = objectPath.evaluate("roles").     assertThat(roles.size(), is(1)).     assertThat(roles, contains(SecuritySettingsSource.TEST_ROLE)). }
false;public;0;22;;public void testAuthenticateApiWithoutAuthentication() throws Exception {     try {         Response response = getRestClient().performRequest(new Request("GET", "/_security/_authenticate")).         if (anonymousEnabled) {             assertThat(response.getStatusLine().getStatusCode(), is(200)).             ObjectPath objectPath = ObjectPath.createFromResponse(response).             assertThat(objectPath.evaluate("username").toString(), equalTo("anon")).             @SuppressWarnings("unchecked")             List<String> roles = (List<String>) objectPath.evaluate("roles").             assertThat(roles.size(), is(2)).             assertThat(roles, contains(SecuritySettingsSource.TEST_ROLE, "foo")).         } else {             fail("request should have failed").         }     } catch (ResponseException e) {         if (anonymousEnabled) {             fail("request should have succeeded").         } else {             assertThat(e.getResponse().getStatusLine().getStatusCode(), is(401)).         }     } }
