commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected boolean openLdapsPort() {     // Support LDAPS, because it's used in some test     return true. }
false;public;0;12;;@Before public void setup() throws Exception {     final Path origCa = getDataPath("/org/elasticsearch/xpack/security/authc/ldap/support/ldap-ca.crt").     ldapCaPath = createTempFile().     Files.copy(origCa, ldapCaPath, StandardCopyOption.REPLACE_EXISTING).     globalSettings = Settings.builder().put("path.home", createTempDir()).putList(RealmSettings.realmSslPrefix(REALM_IDENTIFIER) + "certificate_authorities", ldapCaPath.toString()).build().     sslService = new SSLService(globalSettings, TestEnvironment.newEnvironment(globalSettings)).     threadPool = new TestThreadPool("LdapSessionFactoryTests thread pool"). }
false;public;0;4;;@After public void shutdown() throws InterruptedException {     terminate(threadPool). }
false;public;0;36;;public void testBindWithReadTimeout() throws Exception {     InMemoryDirectoryServer ldapServer = randomFrom(ldapServers).     String protocol = randomFrom("ldap", "ldaps").     InetAddress listenAddress = ldapServer.getListenAddress(protocol).     if (listenAddress == null) {         listenAddress = InetAddress.getLoopbackAddress().     }     String ldapUrl = new LDAPURL(protocol, NetworkAddress.format(listenAddress), ldapServer.getListenPort(protocol), null, null, null, null).toString().     String groupSearchBase = "o=sevenSeas".     String userTemplates = "cn={0},ou=people,o=sevenSeas".     Settings settings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrl, userTemplates, groupSearchBase, LdapSearchScope.SUB_TREE)).put(RealmSettings.getFullSettingKey(REALM_IDENTIFIER, SessionFactorySettings.TIMEOUT_TCP_READ_SETTING), "1ms").put("path.home", createTempDir()).build().     RealmConfig config = new RealmConfig(REALM_IDENTIFIER, settings, TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings)).     LdapSessionFactory sessionFactory = new LdapSessionFactory(config, sslService, threadPool).     String user = "Horatio Hornblower".     SecureString userPass = new SecureString("pass").     ldapServer.setProcessingDelayMillis(500L).     try {         UncategorizedExecutionException e = expectThrows(UncategorizedExecutionException.class, () -> session(sessionFactory, user, userPass)).         assertThat(e.getCause(), instanceOf(ExecutionException.class)).         assertThat(e.getCause().getCause(), instanceOf(LDAPException.class)).         assertThat(e.getCause().getCause().getMessage(), containsString("A client-side timeout was encountered while waiting ")).     } finally {         ldapServer.setProcessingDelayMillis(0L).     } }
false;public;0;26;;public void testBindWithTemplates() throws Exception {     String groupSearchBase = "o=sevenSeas".     String[] userTemplates = new String[] { "cn={0},ou=something,ou=obviously,ou=incorrect,o=sevenSeas", "wrongname={0},ou=people,o=sevenSeas", // this last one should work     "cn={0},ou=people,o=sevenSeas" }.     Settings settings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), userTemplates, groupSearchBase, LdapSearchScope.SUB_TREE)).build().     RealmConfig config = new RealmConfig(REALM_IDENTIFIER, settings, TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings)).     LdapSessionFactory sessionFactory = new LdapSessionFactory(config, sslService, threadPool).     String user = "Horatio Hornblower".     SecureString userPass = new SecureString("pass").     final SimpleBindRequest bindRequest = new SimpleBindRequest("cn=Horatio Hornblower,ou=people,o=sevenSeas", "pass").     try (LdapSession ldap = session(sessionFactory, user, userPass)) {         assertConnectionValid(ldap.getConnection(), bindRequest).         String dn = ldap.userDn().         assertThat(dn, containsString(user)).     } }
false;public;0;25;;public void testBindWithBogusTemplates() throws Exception {     String groupSearchBase = "o=sevenSeas".     String[] userTemplates = new String[] { "cn={0},ou=something,ou=obviously,ou=incorrect,o=sevenSeas", "wrongname={0},ou=people,o=sevenSeas", // none of these should work     "asdf={0},ou=people,o=sevenSeas" }.     Settings settings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), userTemplates, groupSearchBase, LdapSearchScope.SUB_TREE)).build().     RealmConfig config = new RealmConfig(REALM_IDENTIFIER, settings, TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings)).     LdapSessionFactory ldapFac = new LdapSessionFactory(config, sslService, threadPool).     String user = "Horatio Hornblower".     SecureString userPass = new SecureString("pass").     UncategorizedExecutionException e = expectThrows(UncategorizedExecutionException.class, () -> session(ldapFac, user, userPass)).     assertThat(e.getCause(), instanceOf(ExecutionException.class)).     assertThat(e.getCause().getCause(), instanceOf(LDAPException.class)).     assertThat(e.getCause().getCause().getMessage(), containsString("Unable to bind as user")).     Throwable[] suppressed = e.getCause().getCause().getSuppressed().     assertThat(suppressed.length, is(2)). }
false;public;0;22;;public void testGroupLookupSubtree() throws Exception {     String groupSearchBase = "o=sevenSeas".     String userTemplate = "cn={0},ou=people,o=sevenSeas".     Settings settings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), userTemplate, groupSearchBase, LdapSearchScope.SUB_TREE)).build().     RealmConfig config = new RealmConfig(REALM_IDENTIFIER, settings, TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings)).     LdapSessionFactory ldapFac = new LdapSessionFactory(config, sslService, threadPool).     String user = "Horatio Hornblower".     SecureString userPass = new SecureString("pass").     final SimpleBindRequest bindRequest = new SimpleBindRequest("cn=Horatio Hornblower,ou=people,o=sevenSeas", "pass").     try (LdapSession ldap = session(ldapFac, user, userPass)) {         assertConnectionValid(ldap.getConnection(), bindRequest).         List<String> groups = groups(ldap).         assertThat(groups, contains("cn=HMS Lydia,ou=crews,ou=groups,o=sevenSeas")).     } }
false;public;0;21;;public void testGroupLookupOneLevel() throws Exception {     String groupSearchBase = "ou=crews,ou=groups,o=sevenSeas".     String userTemplate = "cn={0},ou=people,o=sevenSeas".     Settings settings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), userTemplate, groupSearchBase, LdapSearchScope.ONE_LEVEL)).build().     RealmConfig config = new RealmConfig(REALM_IDENTIFIER, settings, TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings)).     LdapSessionFactory ldapFac = new LdapSessionFactory(config, sslService, threadPool).     String user = "Horatio Hornblower".     final SimpleBindRequest bindRequest = new SimpleBindRequest("cn=Horatio Hornblower,ou=people,o=sevenSeas", "pass").     try (LdapSession ldap = session(ldapFac, user, new SecureString("pass"))) {         assertConnectionValid(ldap.getConnection(), bindRequest).         List<String> groups = groups(ldap).         assertThat(groups, contains("cn=HMS Lydia,ou=crews,ou=groups,o=sevenSeas")).     } }
false;public;0;23;;public void testGroupLookupBase() throws Exception {     String groupSearchBase = "cn=HMS Lydia,ou=crews,ou=groups,o=sevenSeas".     String userTemplate = "cn={0},ou=people,o=sevenSeas".     Settings settings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrls(), userTemplate, groupSearchBase, LdapSearchScope.BASE)).build().     RealmConfig config = new RealmConfig(REALM_IDENTIFIER, settings, TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings)).     LdapSessionFactory ldapFac = new LdapSessionFactory(config, sslService, threadPool).     String user = "Horatio Hornblower".     SecureString userPass = new SecureString("pass").     final SimpleBindRequest bindRequest = new SimpleBindRequest("cn=Horatio Hornblower,ou=people,o=sevenSeas", "pass").     try (LdapSession ldap = session(ldapFac, user, userPass)) {         assertConnectionValid(ldap.getConnection(), bindRequest).         List<String> groups = groups(ldap).         assertThat(groups.size(), is(1)).         assertThat(groups, contains("cn=HMS Lydia,ou=crews,ou=groups,o=sevenSeas")).     } }
true;public;0;46;/**  * This test connects to the in memory LDAP server over SSL using 2 different CA certificates.  * One certificate is valid, the other is not.  * The path to the certificate never changes, but the contents are copied in place.  * If the realm's CA path is monitored for changes and the underlying SSL context is reloaded, then we will get two different outcomes  * (one failure, one success) depending on which file content is in place.  */ ;/**  * This test connects to the in memory LDAP server over SSL using 2 different CA certificates.  * One certificate is valid, the other is not.  * The path to the certificate never changes, but the contents are copied in place.  * If the realm's CA path is monitored for changes and the underlying SSL context is reloaded, then we will get two different outcomes  * (one failure, one success) depending on which file content is in place.  */ public void testSslTrustIsReloaded() throws Exception {     InMemoryDirectoryServer ldapServer = randomFrom(ldapServers).     InetAddress listenAddress = ldapServer.getListenAddress("ldaps").     if (listenAddress == null) {         listenAddress = InetAddress.getLoopbackAddress().     }     String ldapUrl = new LDAPURL("ldaps", NetworkAddress.format(listenAddress), ldapServer.getListenPort("ldaps"), null, null, null, null).toString().     String groupSearchBase = "o=sevenSeas".     String userTemplates = "cn={0},ou=people,o=sevenSeas".     Settings settings = Settings.builder().put(globalSettings).put(buildLdapSettings(ldapUrl, userTemplates, groupSearchBase, LdapSearchScope.SUB_TREE)).build().     final Path realCa = getDataPath("/org/elasticsearch/xpack/security/authc/ldap/support/ldap-ca.crt").     final Path fakeCa = getDataPath("/org/elasticsearch/xpack/security/authc/ldap/support/smb_ca.crt").     final Environment environment = TestEnvironment.newEnvironment(settings).     RealmConfig config = new RealmConfig(REALM_IDENTIFIER, settings, environment, new ThreadContext(settings)).     LdapSessionFactory sessionFactory = new LdapSessionFactory(config, sslService, threadPool).     String user = "Horatio Hornblower".     SecureString userPass = new SecureString("pass").     final ResourceWatcherService resourceWatcher = new ResourceWatcherService(settings, threadPool).     new SSLConfigurationReloader(environment, sslService, resourceWatcher).     Files.copy(fakeCa, ldapCaPath, StandardCopyOption.REPLACE_EXISTING).     resourceWatcher.notifyNow(ResourceWatcherService.Frequency.HIGH).     UncategorizedExecutionException e = expectThrows(UncategorizedExecutionException.class, () -> session(sessionFactory, user, userPass)).     assertThat(e.getCause(), instanceOf(ExecutionException.class)).     assertThat(e.getCause().getCause(), instanceOf(LDAPException.class)).     assertThat(e.getCause().getCause().getMessage(), containsString("SSLPeerUnverifiedException")).     Files.copy(realCa, ldapCaPath, StandardCopyOption.REPLACE_EXISTING).     resourceWatcher.notifyNow(ResourceWatcherService.Frequency.HIGH).     final LdapSession session = session(sessionFactory, user, userPass).     assertThat(session.userDn(), is("cn=Horatio Hornblower,ou=people,o=sevenSeas")).     session.close(). }
