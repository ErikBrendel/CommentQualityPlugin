commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testRealmWithBlankTypeDoesNotValidate() throws Exception {     final Settings.Builder builder = baseSettings(false).     assertErrorWithMessage("", "empty", "unknown setting [" + realmPrefix("", "empty"), realm("", "empty", builder).build()). }
false;public;0;3;;public void testFileRealmWithAllSettingsValidatesSuccessfully() throws Exception {     assertSuccess(fileRealm("file1")). }
false;public;0;4;;public void testFileRealmWithUnknownConfigurationDoesNotValidate() throws Exception {     final Settings.Builder builder = realm("file", "file2", fileSettings().put("not-valid", randomInt())).     assertErrorWithMessage("file", "file2", "unknown setting [" + realmPrefix("file", "file2") + "not-valid]", builder.build()). }
false;public;0;3;;public void testNativeRealmWithAllSettingsValidatesSuccessfully() throws Exception {     assertSuccess(nativeRealm("native1")). }
false;public;0;4;;public void testNativeRealmWithUnknownConfigurationDoesNotValidate() throws Exception {     final Settings.Builder builder = realm("native", "native2", nativeSettings().put("not-valid", randomAlphaOfLength(10))).     assertErrorWithMessage("native", "native2", "unknown setting [" + realmPrefix("native", "native2") + "not-valid]", builder.build()). }
false;public;0;3;;public void testLdapRealmWithUserTemplatesAndGroupAttributesValidatesSuccessfully() throws Exception {     assertSuccess(ldapRealm("ldap1", false, false)). }
false;public;0;3;;public void testLdapRealmWithUserSearchAndGroupSearchValidatesSuccessfully() throws Exception {     assertSuccess(ldapRealm("ldap2", true, true)). }
false;public;0;3;;public void testActiveDirectoryRealmWithAllSettingsValidatesSuccessfully() throws Exception {     assertSuccess(activeDirectoryRealm("ad1", true)). }
false;public;0;3;;public void testPkiRealmWithCertificateAuthoritiesValidatesSuccessfully() throws Exception {     assertSuccess(pkiRealm("pki1", false)). }
false;public;0;3;;public void testPkiRealmWithTrustStoreValidatesSuccessfully() throws Exception {     assertSuccess(pkiRealm("pki2", true)). }
false;public;0;4;;public void testPkiRealmWithFullSslSettingsDoesNotValidate() throws Exception {     final Settings.Builder realm = realm("pki", "pki3", configureSsl("", pkiSettings(true), true, true)).     assertError("pki", "pki3", realm.build()). }
false;public;0;10;;public void testSettingsWithMultipleRealmsValidatesSuccessfully() throws Exception {     final Settings settings = Settings.builder().put(fileRealm("file1").build()).put(nativeRealm("native2").build()).put(ldapRealm("ldap3", true, false).build()).put(// don't load SSL twice     activeDirectoryRealm("ad4", false).build()).put(pkiRealm("pki5", false).build()).build().     assertSuccess(settings). }
false;private;1;3;;private Settings.Builder nativeRealm(String name) {     return realm("native", name, nativeSettings()). }
false;private;0;3;;private Settings.Builder nativeSettings() {     return baseSettings(true). }
false;private;1;3;;private Settings.Builder fileRealm(String name) {     return realm("file", name, fileSettings()). }
false;private;0;3;;private Settings.Builder fileSettings() {     return baseSettings(true). }
false;private;3;3;;private Settings.Builder ldapRealm(String name, boolean userSearch, boolean groupSearch) {     return realm("ldap", name, ldapSettings(userSearch, groupSearch)). }
false;private;2;35;;private Settings.Builder ldapSettings(boolean userSearch, boolean groupSearch) {     final Settings.Builder builder = commonLdapSettings("ldap", true).put("bind_dn", "elasticsearch").put("follow_referrals", randomBoolean()).     SecuritySettingsSource.addSecureSettings(builder, secureSettings -> {         secureSettings.setString("secure_bind_password", "t0p_s3cr3t").     }).     if (userSearch) {         builder.put("user_search.base_dn", "o=people, dc=example, dc=com").         builder.put("user_search.scope", "sub_tree").         builder.put("user_search.filter", "(" + randomAlphaOfLengthBetween(2, 5) + "={0})").         builder.put("user_search.pool.enabled", randomBoolean()).         builder.put("user_search.pool.size", randomIntBetween(10, 100)).         builder.put("user_search.pool.initial_size", randomIntBetween(1, 10)).         builder.put("user_search.pool.health_check.enabled", randomBoolean()).         builder.put("user_search.pool.health_check.dn", randomAlphaOfLength(32)).         builder.put("user_search.pool.health_check.interval", randomPositiveTimeValue()).     } else {         builder.putList("user_dn_templates", "cn={0}, ou=staff, o=people, dc=example, dc=com", "cn={0}, ou=visitors, o=people, dc=example, dc=com").     }     if (groupSearch) {         builder.put("group_search.base_dn", "o=groups, dc=example, dc=com").         builder.put("group_search.scope", "one_level").         builder.put("group_search.filter", "userGroup").         builder.put("group_search.user_attribute", "uid").     } else {         builder.put("user_group_attribute", randomAlphaOfLength(8)).     }     return builder. }
false;private;2;3;;private Settings.Builder activeDirectoryRealm(String name, boolean configureSSL) {     return realm("active_directory", name, activeDirectorySettings(configureSSL)). }
false;private;1;10;;private Settings.Builder activeDirectorySettings(boolean configureSSL) {     final Settings.Builder builder = commonLdapSettings("active_directory", configureSSL).put("domain_name", "MEGACORP").     builder.put("user_search.base_dn", "o=people, dc.example, dc.com").     builder.put("user_search.scope", "sub_tree").     builder.put("user_search.filter", randomAlphaOfLength(5) + "={0}").     builder.put("group_search.base_dn", "o=groups, dc=example, dc=com").     builder.put("group_search.scope", "one_level").     return builder. }
false;private;2;15;;private Settings.Builder commonLdapSettings(String type, boolean configureSSL) {     final Settings.Builder builder = baseSettings(true).putList("url", "ldap://dir1.internal:9876", "ldap://dir2.internal:9876", "ldap://dir3.internal:9876").put("load_balance.type", "round_robin").put("load_balance.cache_ttl", randomTimeValue()).put("unmapped_groups_as_roles", randomBoolean()).put("files.role_mapping", "x-pack/" + randomAlphaOfLength(8) + ".yml").put("timeout.tcp_connect", randomPositiveTimeValue()).put("timeout.tcp_read", randomPositiveTimeValue()).put("timeout.ldap_search", randomPositiveTimeValue()).     if (configureSSL) {         configureSsl("ssl.", builder, randomBoolean(), randomBoolean()).     }     return builder. }
false;private;2;3;;private Settings.Builder pkiRealm(String name, boolean useTrustStore) {     return realm("pki", name, pkiSettings(useTrustStore)). }
false;private;1;16;;private Settings.Builder pkiSettings(boolean useTrustStore) {     final Settings.Builder builder = baseSettings(false).put("username_pattern", "CN=\\D(\\d+)(?:,\\|$)").put("files.role_mapping", "x-pack/" + randomAlphaOfLength(8) + ".yml").     if (useTrustStore) {         builder.put("truststore.path", randomAlphaOfLengthBetween(8, 32)).         SecuritySettingsSource.addSecureSettings(builder, secureSettings -> {             secureSettings.setString("truststore.secure_password", randomAlphaOfLength(8)).         }).         builder.put("truststore.algorithm", randomAlphaOfLengthBetween(6, 10)).     } else {         builder.putList("certificate_authorities", generateRandomStringArray(5, 32, false, false)).     }     return builder. }
false;private;4;29;;private Settings.Builder configureSsl(String prefix, Settings.Builder builder, boolean useKeyStore, boolean useTrustStore) {     if (useKeyStore) {         builder.put(prefix + "keystore.path", "ssl/" + randomAlphaOfLength(5) + ".jks").         SecuritySettingsSource.addSecureSettings(builder, secureSettings -> {             secureSettings.setString(prefix + "keystore.secure_password", randomAlphaOfLength(8)).             secureSettings.setString(prefix + "keystore.secure_key_password", randomAlphaOfLength(8)).         }).     } else {         builder.put(prefix + "key", "x-pack/ssl/" + randomAlphaOfLength(5) + ".key").         SecuritySettingsSource.addSecureSettings(builder, secureSettings -> secureSettings.setString(prefix + "secure_key_passphrase", randomAlphaOfLength(32))).         builder.put(prefix + "certificate", "ssl/" + randomAlphaOfLength(5) + ".cert").     }     if (useTrustStore) {         builder.put(prefix + "truststore.path", "x-pack/ssl/" + randomAlphaOfLength(5) + ".jts").         SecuritySettingsSource.addSecureSettings(builder, secureSettings -> secureSettings.setString(prefix + "truststore.secure_password", randomAlphaOfLength(8))).     } else {         builder.put(prefix + "certificate_authorities", "ssl/" + randomAlphaOfLength(8) + ".ca").     }     builder.put(prefix + "verification_mode", "full").     builder.putList(prefix + "supported_protocols", randomSubsetOf(XPackSettings.DEFAULT_SUPPORTED_PROTOCOLS)).     builder.putList(prefix + "cipher_suites", randomSubsetOf(XPackSettings.DEFAULT_CIPHERS)).     return builder. }
false;private;1;11;;private Settings.Builder baseSettings(boolean withCacheSettings) {     final Settings.Builder builder = Settings.builder().put("order", randomInt()).put("enabled", true).     if (withCacheSettings) {         builder.put("cache.ttl", randomPositiveTimeValue()).put("cache.max_users", randomIntBetween(1_000, 1_000_000)).put("cache.hash_algo", randomFrom(CACHE_HASHING_ALGOS)).     }     return builder. }
false;private;3;9;;private Settings.Builder realm(String type, String name, Settings.Builder settings) {     final String prefix = realmPrefix(type, name).     final MockSecureSettings secureSettings = normaliseSecureSettingPrefix(prefix, settings.getSecureSettings()).     final Settings.Builder builder = Settings.builder().put(settings.normalizePrefix(prefix).build(), false).     if (secureSettings != null) {         builder.setSecureSettings(secureSettings).     }     return builder. }
false;private;2;15;;private MockSecureSettings normaliseSecureSettingPrefix(String prefix, SecureSettings settings) {     if (settings == null) {         return null.     }     if (settings instanceof MockSecureSettings) {         final MockSecureSettings source = (MockSecureSettings) settings.         final MockSecureSettings target = new MockSecureSettings().         for (String key : settings.getSettingNames()) {             target.setString(prefix + key, source.getString(key).toString()).         }         return target.     } else {         throw new IllegalArgumentException("Source settings " + settings.getClass() + " is not a " + MockSecureSettings.class).     } }
false;private;2;3;;private String realmPrefix(String type, String name) {     return RealmSettings.PREFIX + type + "." + name + ".". }
false;private;1;3;;private void assertSuccess(Settings.Builder builder) {     assertSuccess(builder.build()). }
false;private;1;7;;private void assertSuccess(Settings settings) {     try {         validate(settings).     } catch (RuntimeException e) {         fail("Settings do not validate: " + e).     } }
false;private;4;5;;private void assertErrorWithCause(String realmType, String realmName, String message, Settings settings) {     final IllegalArgumentException exception = assertError(realmType, realmName, settings).     assertThat(exception.getCause(), notNullValue()).     assertThat(exception.getCause().getMessage(), containsString(message)). }
false;private;4;4;;private void assertErrorWithMessage(String realmType, String realmName, String message, Settings settings) {     final IllegalArgumentException exception = assertError(realmType, realmName, settings).     assertThat(exception.getMessage(), containsString(message)). }
false;private;3;7;;private IllegalArgumentException assertError(String realmType, String realmName, Settings settings) {     final IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> validate(settings)).     assertThat(exception.getMessage(), containsString(realmPrefix(realmType, realmName))).     return exception. }
false;private;1;7;;private void validate(Settings settings) {     final Set<Setting<?>> settingsSet = new HashSet<>(InternalRealmsSettings.getSettings()).     final AbstractScopedSettings validator = new AbstractScopedSettings(settings, settingsSet, Collections.emptySet(), Setting.Property.NodeScope) {     }.     validator.validate(settings, false). }
