commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public void setUp() throws Exception {     super.setUp().     settings = Settings.builder().put("path.home", createTempDir().toString()).put("node.name", "test-" + getTestName()).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     threadPool = new ThreadPool(settings).     when(mockLicenseState.isSecurityAvailable()).thenReturn(true). }
false;public;0;5;;@Override public void tearDown() throws Exception {     super.tearDown().     terminate(threadPool). }
false;public;1;4;;@Override public void sendResponse(RestResponse restResponse) {     responseSetOnce.set(restResponse). }
false;public;3;18;;@Override public <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {     InvalidateApiKeyRequest invalidateApiKeyRequest = (InvalidateApiKeyRequest) request.     ActionRequestValidationException validationException = invalidateApiKeyRequest.validate().     if (validationException != null) {         listener.onFailure(validationException).         return.     }     if (invalidateApiKeyRequest.getName() != null && invalidateApiKeyRequest.getName().equals("api-key-name-1") || invalidateApiKeyRequest.getId() != null && invalidateApiKeyRequest.getId().equals("api-key-id-1") || invalidateApiKeyRequest.getRealmName() != null && invalidateApiKeyRequest.getRealmName().equals("realm-1") || invalidateApiKeyRequest.getUserName() != null && invalidateApiKeyRequest.getUserName().equals("user-x")) {         listener.onResponse((Response) invalidateApiKeyResponseExpected).     } else {         listener.onFailure(new ElasticsearchSecurityException("encountered an error while creating API key")).     } }
false;public;0;58;;public void testInvalidateApiKey() throws Exception {     final String json1 = "{ \"realm_name\" : \"realm-1\", \"username\": \"user-x\" }".     final String json2 = "{ \"realm_name\" : \"realm-1\" }".     final String json3 = "{ \"username\": \"user-x\" }".     final String json4 = "{ \"id\" : \"api-key-id-1\" }".     final String json5 = "{ \"name\" : \"api-key-name-1\" }".     final String json = randomFrom(json1, json2, json3, json4, json5).     final FakeRestRequest restRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY).withContent(new BytesArray(json), XContentType.JSON).build().     final SetOnce<RestResponse> responseSetOnce = new SetOnce<>().     final RestChannel restChannel = new AbstractRestChannel(restRequest, randomBoolean()) {          @Override         public void sendResponse(RestResponse restResponse) {             responseSetOnce.set(restResponse).         }     }.     final InvalidateApiKeyResponse invalidateApiKeyResponseExpected = new InvalidateApiKeyResponse(Collections.singletonList("api-key-id-1"), Collections.emptyList(), null).     try (NodeClient client = new NodeClient(Settings.EMPTY, threadPool) {          @Override         public <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {             InvalidateApiKeyRequest invalidateApiKeyRequest = (InvalidateApiKeyRequest) request.             ActionRequestValidationException validationException = invalidateApiKeyRequest.validate().             if (validationException != null) {                 listener.onFailure(validationException).                 return.             }             if (invalidateApiKeyRequest.getName() != null && invalidateApiKeyRequest.getName().equals("api-key-name-1") || invalidateApiKeyRequest.getId() != null && invalidateApiKeyRequest.getId().equals("api-key-id-1") || invalidateApiKeyRequest.getRealmName() != null && invalidateApiKeyRequest.getRealmName().equals("realm-1") || invalidateApiKeyRequest.getUserName() != null && invalidateApiKeyRequest.getUserName().equals("user-x")) {                 listener.onResponse((Response) invalidateApiKeyResponseExpected).             } else {                 listener.onFailure(new ElasticsearchSecurityException("encountered an error while creating API key")).             }         }     }) {         final RestInvalidateApiKeyAction restInvalidateApiKeyAction = new RestInvalidateApiKeyAction(Settings.EMPTY, mockRestController, mockLicenseState).         restInvalidateApiKeyAction.handleRequest(restRequest, restChannel, client).         final RestResponse restResponse = responseSetOnce.get().         assertNotNull(restResponse).         final InvalidateApiKeyResponse actual = InvalidateApiKeyResponse.fromXContent(createParser(XContentType.JSON.xContent(), restResponse.content())).         assertThat(actual.getInvalidatedApiKeys(), equalTo(invalidateApiKeyResponseExpected.getInvalidatedApiKeys())).         assertThat(actual.getPreviouslyInvalidatedApiKeys(), equalTo(invalidateApiKeyResponseExpected.getPreviouslyInvalidatedApiKeys())).         assertThat(actual.getErrors(), equalTo(invalidateApiKeyResponseExpected.getErrors())).     } }
