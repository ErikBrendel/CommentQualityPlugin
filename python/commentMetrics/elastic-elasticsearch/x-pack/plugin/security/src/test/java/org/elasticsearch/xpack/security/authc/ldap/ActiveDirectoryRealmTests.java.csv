commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setNumberOfLdapServers() {     numberOfLdapServers = randomIntBetween(1, 4). }
false;public;0;30;;@Before public void start() throws Exception {     InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig("dc=ad,dc=test,dc=elasticsearch,dc=com").     // Get the default schema and overlay with the AD changes     config.setSchema(Schema.mergeSchemas(Schema.getDefaultStandardSchema(), Schema.getSchema(getDataPath("ad-schema.ldif").toString()))).     // Add the bind users here since AD is not LDAPv3 compliant     config.addAdditionalBindCredentials("CN=ironman@ad.test.elasticsearch.com", PASSWORD).     config.addAdditionalBindCredentials("CN=Thor@ad.test.elasticsearch.com", PASSWORD).     directoryServers = new InMemoryDirectoryServer[numberOfLdapServers].     for (int i = 0. i < numberOfLdapServers. i++) {         InMemoryDirectoryServer directoryServer = new InMemoryDirectoryServer(config).         directoryServer.add("dc=ad,dc=test,dc=elasticsearch,dc=com", new Attribute("dc", "UnboundID"), new Attribute("objectClass", "top", "domain", "extensibleObject")).         directoryServer.importFromLDIF(false, getDataPath("ad.ldif").toString()).         // Must have privileged access because underlying server will accept socket connections         AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {             directoryServer.startListening().             return null.         }).         directoryServers[i] = directoryServer.     }     threadPool = new TestThreadPool("active directory realm tests").     resourceWatcherService = new ResourceWatcherService(Settings.EMPTY, threadPool).     globalSettings = Settings.builder().put("path.home", createTempDir()).build().     sslService = new SSLService(globalSettings, TestEnvironment.newEnvironment(globalSettings)).     licenseState = new TestUtils.UpdatableLicenseState(). }
false;public;0;8;;@After public void stop() throws InterruptedException {     resourceWatcherService.stop().     terminate(threadPool).     for (int i = 0. i < numberOfLdapServers. i++) {         directoryServers[i].shutDown(true).     } }
false;public;0;4;;@Override public boolean enableWarningsCheck() {     return false. }
true;private;2;10;/**  * Creates a realm with the provided settings, rebuilds the SSL Service to be aware of the new realm, and then returns  * the RealmConfig  */ ;/**  * Creates a realm with the provided settings, rebuilds the SSL Service to be aware of the new realm, and then returns  * the RealmConfig  */ private RealmConfig setupRealm(RealmConfig.RealmIdentifier realmIdentifier, Settings localSettings) {     final Settings mergedSettings = Settings.builder().put(globalSettings).put(localSettings).build().     final Environment env = TestEnvironment.newEnvironment(mergedSettings).     this.sslService = new SSLService(mergedSettings, env).     return new RealmConfig(realmIdentifier, mergedSettings, env, new ThreadContext(mergedSettings)). }
false;public;0;17;;public void testAuthenticateUserPrincipleName() throws Exception {     final RealmConfig.RealmIdentifier realmIdentifier = realmId("testAuthenticateUserPrincipleName").     Settings settings = settings(realmIdentifier).     RealmConfig config = setupRealm(realmIdentifier, settings).     ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, sslService, threadPool).     DnRoleMapper roleMapper = new DnRoleMapper(config, resourceWatcherService).     LdapRealm realm = new LdapRealm(config, sessionFactory, roleMapper, threadPool).     realm.initialize(Collections.singleton(realm), licenseState).     PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>().     realm.authenticate(new UsernamePasswordToken("CN=ironman", new SecureString(PASSWORD)), future).     final AuthenticationResult result = future.actionGet().     assertThat(result.getStatus(), is(AuthenticationResult.Status.SUCCESS)).     final User user = result.getUser().     assertThat(user, is(notNullValue())).     assertThat(user.roles(), arrayContaining(containsString("Avengers"))). }
false;public;0;16;;public void testAuthenticateSAMAccountName() throws Exception {     final RealmConfig.RealmIdentifier realmIdentifier = realmId("testAuthenticateSAMAccountName").     Settings settings = settings(realmIdentifier).     RealmConfig config = setupRealm(realmIdentifier, settings).     ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, sslService, threadPool).     DnRoleMapper roleMapper = new DnRoleMapper(config, resourceWatcherService).     LdapRealm realm = new LdapRealm(config, sessionFactory, roleMapper, threadPool).     realm.initialize(Collections.singleton(realm), licenseState).     // Thor does not have a UPN of form CN=Thor@ad.test.elasticsearch.com     PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>().     realm.authenticate(new UsernamePasswordToken("CN=Thor", new SecureString(PASSWORD)), future).     User user = future.actionGet().getUser().     assertThat(user, is(notNullValue())).     assertThat(user.roles(), arrayContaining(containsString("Avengers"))). }
false;protected;0;8;;protected String[] ldapUrls() throws LDAPException {     List<String> urls = new ArrayList<>(numberOfLdapServers).     for (int i = 0. i < numberOfLdapServers. i++) {         LDAPURL url = new LDAPURL("ldap", "localhost", directoryServers[i].getListenPort(), null, null, null, null).         urls.add(url.toString()).     }     return urls.toArray(Strings.EMPTY_ARRAY). }
false;public;0;19;;public void testAuthenticateCachesSuccessfulAuthentications() throws Exception {     final RealmConfig.RealmIdentifier realmIdentifier = realmId("testAuthenticateCachesSuccesfulAuthentications").     Settings settings = settings(realmIdentifier).     RealmConfig config = setupRealm(realmIdentifier, settings).     ActiveDirectorySessionFactory sessionFactory = spy(new ActiveDirectorySessionFactory(config, sslService, threadPool)).     DnRoleMapper roleMapper = new DnRoleMapper(config, resourceWatcherService).     LdapRealm realm = new LdapRealm(config, sessionFactory, roleMapper, threadPool).     realm.initialize(Collections.singleton(realm), licenseState).     int count = randomIntBetween(2, 10).     for (int i = 0. i < count. i++) {         PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>().         realm.authenticate(new UsernamePasswordToken("CN=ironman", new SecureString(PASSWORD)), future).         future.actionGet().     }     // verify one and only one session as further attempts should be returned from cache     verify(sessionFactory, times(1)).session(eq("CN=ironman"), any(SecureString.class), any(ActionListener.class)). }
false;public;0;21;;public void testAuthenticateCachingCanBeDisabled() throws Exception {     final RealmConfig.RealmIdentifier realmIdentifier = realmId("testAuthenticateCachingCanBeDisabled").     final Settings settings = settings(realmIdentifier, Settings.builder().put(getFullSettingKey(realmIdentifier, CachingUsernamePasswordRealmSettings.CACHE_TTL_SETTING), -1).build()).     RealmConfig config = setupRealm(realmIdentifier, settings).     ActiveDirectorySessionFactory sessionFactory = spy(new ActiveDirectorySessionFactory(config, sslService, threadPool)).     DnRoleMapper roleMapper = new DnRoleMapper(config, resourceWatcherService).     LdapRealm realm = new LdapRealm(config, sessionFactory, roleMapper, threadPool).     realm.initialize(Collections.singleton(realm), licenseState).     int count = randomIntBetween(2, 10).     for (int i = 0. i < count. i++) {         PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>().         realm.authenticate(new UsernamePasswordToken("CN=ironman", new SecureString(PASSWORD)), future).         future.actionGet().     }     // verify one and only one session as second attempt should be returned from cache     verify(sessionFactory, times(count)).session(eq("CN=ironman"), any(SecureString.class), any(ActionListener.class)). }
false;public;0;30;;public void testAuthenticateCachingClearsCacheOnRoleMapperRefresh() throws Exception {     final RealmConfig.RealmIdentifier realmIdentifier = realmId("testAuthenticateCachingClearsCacheOnRoleMapperRefresh").     Settings settings = settings(realmIdentifier).     RealmConfig config = setupRealm(realmIdentifier, settings).     ActiveDirectorySessionFactory sessionFactory = spy(new ActiveDirectorySessionFactory(config, sslService, threadPool)).     DnRoleMapper roleMapper = new DnRoleMapper(config, resourceWatcherService).     LdapRealm realm = new LdapRealm(config, sessionFactory, roleMapper, threadPool).     realm.initialize(Collections.singleton(realm), licenseState).     int count = randomIntBetween(2, 10).     for (int i = 0. i < count. i++) {         PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>().         realm.authenticate(new UsernamePasswordToken("CN=ironman", new SecureString(PASSWORD)), future).         future.actionGet().     }     // verify one and only one session as further attempts should be returned from cache     verify(sessionFactory, times(1)).session(eq("CN=ironman"), any(SecureString.class), any(ActionListener.class)).     // Refresh the role mappings     roleMapper.notifyRefresh().     for (int i = 0. i < count. i++) {         PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>().         realm.authenticate(new UsernamePasswordToken("CN=ironman", new SecureString(PASSWORD)), future).         future.actionGet().     }     verify(sessionFactory, times(2)).session(eq("CN=ironman"), any(SecureString.class), any(ActionListener.class)). }
false;public;0;3;;public void testUnauthenticatedLookupWithConnectionPool() throws Exception {     doUnauthenticatedLookup(true). }
false;public;0;3;;public void testUnauthenticatedLookupWithoutConnectionPool() throws Exception {     doUnauthenticatedLookup(false). }
false;private;1;28;;private void doUnauthenticatedLookup(boolean pooled) throws Exception {     final RealmConfig.RealmIdentifier realmIdentifier = realmId("testUnauthenticatedLookupWithConnectionPool").     final Settings.Builder builder = Settings.builder().put(getFullSettingKey(realmIdentifier.getName(), ActiveDirectorySessionFactorySettings.POOL_ENABLED), pooled).put(getFullSettingKey(realmIdentifier, PoolingSessionFactorySettings.BIND_DN), "CN=ironman@ad.test.elasticsearch.com").     final boolean useLegacyBindPassword = randomBoolean().     if (useLegacyBindPassword) {         builder.put(getFullSettingKey(realmIdentifier, PoolingSessionFactorySettings.LEGACY_BIND_PASSWORD), PASSWORD).     } else {         final MockSecureSettings secureSettings = new MockSecureSettings().         secureSettings.setString(getFullSettingKey(realmIdentifier, PoolingSessionFactorySettings.SECURE_BIND_PASSWORD), PASSWORD).         builder.setSecureSettings(secureSettings).     }     Settings settings = settings(realmIdentifier, builder.build()).     RealmConfig config = setupRealm(realmIdentifier, settings).     try (ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, sslService, threadPool)) {         DnRoleMapper roleMapper = new DnRoleMapper(config, resourceWatcherService).         LdapRealm realm = new LdapRealm(config, sessionFactory, roleMapper, threadPool).         realm.initialize(Collections.singleton(realm), licenseState).         PlainActionFuture<User> future = new PlainActionFuture<>().         realm.lookupUser("CN=Thor", future).         final User user = future.actionGet().         assertThat(user, notNullValue()).         assertThat(user.principal(), equalTo("CN=Thor")).     } }
false;public;0;17;;public void testRealmMapsGroupsToRoles() throws Exception {     final RealmConfig.RealmIdentifier realmId = realmId("testRealmMapsGroupsToRoles").     Settings settings = settings(realmId, Settings.builder().put(getFullSettingKey(realmId, DnRoleMapperSettings.ROLE_MAPPING_FILE_SETTING), getDataPath("role_mapping.yml")).build()).     RealmConfig config = setupRealm(realmId, settings).     ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, sslService, threadPool).     DnRoleMapper roleMapper = new DnRoleMapper(config, resourceWatcherService).     LdapRealm realm = new LdapRealm(config, sessionFactory, roleMapper, threadPool).     realm.initialize(Collections.singleton(realm), licenseState).     PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>().     realm.authenticate(new UsernamePasswordToken("CN=ironman", new SecureString(PASSWORD)), future).     User user = future.actionGet().getUser().     assertThat(user, is(notNullValue())).     assertThat(user.roles(), arrayContaining(equalTo("group_role"))). }
false;public;0;17;;public void testRealmMapsUsersToRoles() throws Exception {     final RealmConfig.RealmIdentifier realmId = realmId("testRealmMapsGroupsToRoles").     Settings settings = settings(realmId, Settings.builder().put(getFullSettingKey(realmId, DnRoleMapperSettings.ROLE_MAPPING_FILE_SETTING), getDataPath("role_mapping.yml")).build()).     RealmConfig config = setupRealm(realmId, settings).     ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, sslService, threadPool).     DnRoleMapper roleMapper = new DnRoleMapper(config, resourceWatcherService).     LdapRealm realm = new LdapRealm(config, sessionFactory, roleMapper, threadPool).     realm.initialize(Collections.singleton(realm), licenseState).     PlainActionFuture<AuthenticationResult> future = new PlainActionFuture<>().     realm.authenticate(new UsernamePasswordToken("CN=Thor", new SecureString(PASSWORD)), future).     User user = future.actionGet().getUser().     assertThat(user, is(notNullValue())).     assertThat(user.roles(), arrayContainingInAnyOrder(equalTo("group_role"), equalTo("user_role"))). }
false;public;0;23;;public void testRealmUsageStats() throws Exception {     final RealmConfig.RealmIdentifier realmId = realmId("testRealmUsageStats").     String loadBalanceType = randomFrom("failover", "round_robin").     Settings settings = settings(realmId, Settings.builder().put(getFullSettingKey(realmId, DnRoleMapperSettings.ROLE_MAPPING_FILE_SETTING), getDataPath("role_mapping.yml")).put(getFullSettingKey(realmId, LdapLoadBalancingSettings.LOAD_BALANCE_TYPE_SETTING), loadBalanceType).build()).     RealmConfig config = setupRealm(realmId, settings).     ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, sslService, threadPool).     DnRoleMapper roleMapper = new DnRoleMapper(config, resourceWatcherService).     LdapRealm realm = new LdapRealm(config, sessionFactory, roleMapper, threadPool).     realm.initialize(Collections.singleton(realm), licenseState).     PlainActionFuture<Map<String, Object>> future = new PlainActionFuture<>().     realm.usageStats(future).     Map<String, Object> stats = future.get().     assertThat(stats, is(notNullValue())).     assertThat(stats, hasEntry("name", realm.name())).     assertThat(stats, hasEntry("order", realm.order())).     assertThat(stats, hasEntry("size", 0)).     assertThat(stats, hasEntry("ssl", false)).     assertThat(stats, hasEntry("load_balance_type", loadBalanceType)). }
false;public;0;10;;public void testDefaultSearchFilters() throws Exception {     final RealmConfig.RealmIdentifier realmIdentifier = realmId("testDefaultSearchFilters").     Settings settings = settings(realmIdentifier).     RealmConfig config = setupRealm(realmIdentifier, settings).     ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, sslService, threadPool).     assertEquals("(&(objectClass=user)(|(sAMAccountName={0})(userPrincipalName={0}@ad.test.elasticsearch.com)))", sessionFactory.defaultADAuthenticator.getUserSearchFilter()).     assertEquals(UpnADAuthenticator.UPN_USER_FILTER, sessionFactory.upnADAuthenticator.getUserSearchFilter()).     assertEquals(DownLevelADAuthenticator.DOWN_LEVEL_FILTER, sessionFactory.downLevelADAuthenticator.getUserSearchFilter()). }
false;public;0;16;;public void testCustomSearchFilters() throws Exception {     final RealmConfig.RealmIdentifier realmId = realmId("testDefaultSearchFilters").     Settings settings = settings(realmId, Settings.builder().put(getFullSettingKey(realmId.getName(), ActiveDirectorySessionFactorySettings.AD_USER_SEARCH_FILTER_SETTING), "(objectClass=default)").put(getFullSettingKey(realmId.getName(), ActiveDirectorySessionFactorySettings.AD_UPN_USER_SEARCH_FILTER_SETTING), "(objectClass=upn)").put(getFullSettingKey(realmId.getName(), ActiveDirectorySessionFactorySettings.AD_DOWN_LEVEL_USER_SEARCH_FILTER_SETTING), "(objectClass=down level)").build()).     RealmConfig config = setupRealm(realmId, settings).     ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, sslService, threadPool).     assertEquals("(objectClass=default)", sessionFactory.defaultADAuthenticator.getUserSearchFilter()).     assertEquals("(objectClass=upn)", sessionFactory.upnADAuthenticator.getUserSearchFilter()).     assertEquals("(objectClass=down level)", sessionFactory.downLevelADAuthenticator.getUserSearchFilter()). }
false;public;1;3;;public RealmConfig.RealmIdentifier realmId(String realmName) {     return new RealmConfig.RealmIdentifier(LdapRealmSettings.AD_TYPE, realmName.toLowerCase(Locale.ROOT)). }
false;private;1;3;;private Settings settings(RealmConfig.RealmIdentifier realmIdentifier) throws Exception {     return settings(realmIdentifier, Settings.EMPTY). }
false;public;0;10;;public void testBuildUrlFromDomainNameAndDefaultPort() throws Exception {     final RealmConfig.RealmIdentifier realmId = realmId("testBuildUrlFromDomainNameAndDefaultPort").     Settings settings = Settings.builder().put(getFullSettingKey(realmId.getName(), ActiveDirectorySessionFactorySettings.AD_DOMAIN_NAME_SETTING), "ad.test.elasticsearch.com").build().     RealmConfig config = setupRealm(realmId, settings).     ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, sslService, threadPool).     assertSingleLdapServer(sessionFactory, "ad.test.elasticsearch.com", 389). }
false;public;0;11;;public void testBuildUrlFromDomainNameAndCustomPort() throws Exception {     final RealmConfig.RealmIdentifier realmId = realmId("testBuildUrlFromDomainNameAndCustomPort").     Settings settings = Settings.builder().put(getFullSettingKey(realmId.getName(), ActiveDirectorySessionFactorySettings.AD_DOMAIN_NAME_SETTING), "ad.test.elasticsearch.com").put(getFullSettingKey(realmId.getName(), ActiveDirectorySessionFactorySettings.AD_LDAP_PORT_SETTING), 10389).build().     RealmConfig config = setupRealm(realmId, settings).     ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, sslService, threadPool).     assertSingleLdapServer(sessionFactory, "ad.test.elasticsearch.com", 10389). }
false;public;0;11;;public void testUrlConfiguredInSettings() throws Exception {     final RealmConfig.RealmIdentifier realmId = realmId("testBuildUrlFromDomainNameAndCustomPort").     Settings settings = Settings.builder().put(getFullSettingKey(realmId.getName(), ActiveDirectorySessionFactorySettings.AD_DOMAIN_NAME_SETTING), "ad.test.elasticsearch.com").put(getFullSettingKey(realmId, SessionFactorySettings.URLS_SETTING), "ldap://ad01.testing.elastic.co:20389/").build().     RealmConfig config = setupRealm(realmId, settings).     ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, sslService, threadPool).     assertSingleLdapServer(sessionFactory, "ad01.testing.elastic.co", 20389). }
false;private;3;9;;private void assertSingleLdapServer(ActiveDirectorySessionFactory sessionFactory, String hostname, int port) {     assertThat(sessionFactory.getServerSet(), instanceOf(FailoverServerSet.class)).     FailoverServerSet fss = (FailoverServerSet) sessionFactory.getServerSet().     assertThat(fss.getServerSets(), arrayWithSize(1)).     assertThat(fss.getServerSets()[0], instanceOf(SingleServerSet.class)).     SingleServerSet sss = (SingleServerSet) fss.getServerSets()[0].     assertThat(sss.getAddress(), equalTo(hostname)).     assertThat(sss.getPort(), equalTo(port)). }
false;private;2;14;;private Settings settings(RealmConfig.RealmIdentifier realmIdentifier, Settings extraSettings) throws Exception {     Settings.Builder builder = Settings.builder().putList(getFullSettingKey(realmIdentifier, URLS_SETTING), ldapUrls()).put(getFullSettingKey(realmIdentifier.getName(), ActiveDirectorySessionFactorySettings.AD_DOMAIN_NAME_SETTING), "ad.test.elasticsearch.com").put(getFullSettingKey(realmIdentifier, DnRoleMapperSettings.USE_UNMAPPED_GROUPS_AS_ROLES_SETTING), true).     if (randomBoolean()) {         builder.put(getFullSettingKey(realmIdentifier, SSLConfigurationSettings.VERIFICATION_MODE_SETTING_REALM), VerificationMode.CERTIFICATE).     } else {         builder.put(getFullSettingKey(realmIdentifier, HOSTNAME_VERIFICATION_SETTING), false).     }     return builder.put(extraSettings).build(). }
