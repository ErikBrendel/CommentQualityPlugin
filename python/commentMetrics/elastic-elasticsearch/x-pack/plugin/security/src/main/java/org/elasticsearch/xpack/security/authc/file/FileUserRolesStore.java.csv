# id;timestamp;commentText;codeText;commentWords;codeWords
FileUserRolesStore -> public static void writeFile(Map<String, String[]> userToRoles, Path path);1524684173;Accepts a mapping of user -&gt_ list of roles;public static void writeFile(Map<String, String[]> userToRoles, Path path) {_        HashMap<String, List<String>> roleToUsers = new HashMap<>()__        for (Map.Entry<String, String[]> entry : userToRoles.entrySet()) {_            for (String role : entry.getValue()) {_                List<String> users = roleToUsers.get(role)__                if (users == null) {_                    users = new ArrayList<>()__                    roleToUsers.put(role, users)__                }_                users.add(entry.getKey())__            }_        }__        SecurityFiles.writeFileAtomically(_                path,_                roleToUsers,_                e -> String.format(Locale.ROOT, "%s:%s", e.getKey(), collectionToCommaDelimitedString(e.getValue())))__    };accepts,a,mapping,of,user,gt,list,of,roles;public,static,void,write,file,map,string,string,user,to,roles,path,path,hash,map,string,list,string,role,to,users,new,hash,map,for,map,entry,string,string,entry,user,to,roles,entry,set,for,string,role,entry,get,value,list,string,users,role,to,users,get,role,if,users,null,users,new,array,list,role,to,users,put,role,users,users,add,entry,get,key,security,files,write,file,atomically,path,role,to,users,e,string,format,locale,root,s,s,e,get,key,collection,to,comma,delimited,string,e,get,value
FileUserRolesStore -> public static void writeFile(Map<String, String[]> userToRoles, Path path);1526029249;Accepts a mapping of user -&gt_ list of roles;public static void writeFile(Map<String, String[]> userToRoles, Path path) {_        HashMap<String, List<String>> roleToUsers = new HashMap<>()__        for (Map.Entry<String, String[]> entry : userToRoles.entrySet()) {_            for (String role : entry.getValue()) {_                List<String> users = roleToUsers.computeIfAbsent(role, k -> new ArrayList<>())__                users.add(entry.getKey())__            }_        }__        SecurityFiles.writeFileAtomically(_                path,_                roleToUsers,_                e -> String.format(Locale.ROOT, "%s:%s", e.getKey(), collectionToCommaDelimitedString(e.getValue())))__    };accepts,a,mapping,of,user,gt,list,of,roles;public,static,void,write,file,map,string,string,user,to,roles,path,path,hash,map,string,list,string,role,to,users,new,hash,map,for,map,entry,string,string,entry,user,to,roles,entry,set,for,string,role,entry,get,value,list,string,users,role,to,users,compute,if,absent,role,k,new,array,list,users,add,entry,get,key,security,files,write,file,atomically,path,role,to,users,e,string,format,locale,root,s,s,e,get,key,collection,to,comma,delimited,string,e,get,value
FileUserRolesStore -> public static void writeFile(Map<String, String[]> userToRoles, Path path);1538170812;Accepts a mapping of user -&gt_ list of roles;public static void writeFile(Map<String, String[]> userToRoles, Path path) {_        HashMap<String, List<String>> roleToUsers = new HashMap<>()__        for (Map.Entry<String, String[]> entry : userToRoles.entrySet()) {_            for (String role : entry.getValue()) {_                List<String> users = roleToUsers.computeIfAbsent(role, k -> new ArrayList<>())__                users.add(entry.getKey())__            }_        }__        SecurityFiles.writeFileAtomically(_                path,_                roleToUsers,_                e -> String.format(Locale.ROOT, "%s:%s", e.getKey(), collectionToCommaDelimitedString(e.getValue())))__    };accepts,a,mapping,of,user,gt,list,of,roles;public,static,void,write,file,map,string,string,user,to,roles,path,path,hash,map,string,list,string,role,to,users,new,hash,map,for,map,entry,string,string,entry,user,to,roles,entry,set,for,string,role,entry,get,value,list,string,users,role,to,users,compute,if,absent,role,k,new,array,list,users,add,entry,get,key,security,files,write,file,atomically,path,role,to,users,e,string,format,locale,root,s,s,e,get,key,collection,to,comma,delimited,string,e,get,value
FileUserRolesStore -> static Map<String, String[]> parseFileLenient(Path path, Logger logger);1524684173;Internally in this class, we try to load the file, but if for some reason we can't, we're being more lenient by_logging the error and skipping all enries. This is aligned with how we handle other auto-loaded files in security.;static Map<String, String[]> parseFileLenient(Path path, Logger logger) {_        try {_            Map<String, String[]> map = parseFile(path, logger)__            return map == null ? emptyMap() : map__        } catch (Exception e) {_            logger.error(_                    (Supplier<?>) () -> new ParameterizedMessage("failed to parse users_roles file [{}]. skipping/removing all entries...",_                            path.toAbsolutePath()),_                    e)__            return emptyMap()__        }_    };internally,in,this,class,we,try,to,load,the,file,but,if,for,some,reason,we,can,t,we,re,being,more,lenient,by,logging,the,error,and,skipping,all,enries,this,is,aligned,with,how,we,handle,other,auto,loaded,files,in,security;static,map,string,string,parse,file,lenient,path,path,logger,logger,try,map,string,string,map,parse,file,path,logger,return,map,null,empty,map,map,catch,exception,e,logger,error,supplier,new,parameterized,message,failed,to,parse,file,skipping,removing,all,entries,path,to,absolute,path,e,return,empty,map
FileUserRolesStore -> static Map<String, String[]> parseFileLenient(Path path, Logger logger);1526029249;Internally in this class, we try to load the file, but if for some reason we can't, we're being more lenient by_logging the error and skipping all enries. This is aligned with how we handle other auto-loaded files in security.;static Map<String, String[]> parseFileLenient(Path path, Logger logger) {_        try {_            Map<String, String[]> map = parseFile(path, logger)__            return map == null ? emptyMap() : map__        } catch (Exception e) {_            logger.error(_                    (Supplier<?>) () -> new ParameterizedMessage("failed to parse users_roles file [{}]. skipping/removing all entries...",_                            path.toAbsolutePath()),_                    e)__            return emptyMap()__        }_    };internally,in,this,class,we,try,to,load,the,file,but,if,for,some,reason,we,can,t,we,re,being,more,lenient,by,logging,the,error,and,skipping,all,enries,this,is,aligned,with,how,we,handle,other,auto,loaded,files,in,security;static,map,string,string,parse,file,lenient,path,path,logger,logger,try,map,string,string,map,parse,file,path,logger,return,map,null,empty,map,map,catch,exception,e,logger,error,supplier,new,parameterized,message,failed,to,parse,file,skipping,removing,all,entries,path,to,absolute,path,e,return,empty,map
FileUserRolesStore -> static Map<String, String[]> parseFileLenient(Path path, Logger logger);1538170812;Internally in this class, we try to load the file, but if for some reason we can't, we're being more lenient by_logging the error and skipping all enries. This is aligned with how we handle other auto-loaded files in security.;static Map<String, String[]> parseFileLenient(Path path, Logger logger) {_        try {_            Map<String, String[]> map = parseFile(path, logger)__            return map == null ? emptyMap() : map__        } catch (Exception e) {_            logger.error(_                    (Supplier<?>) () -> new ParameterizedMessage("failed to parse users_roles file [{}]. skipping/removing all entries...",_                            path.toAbsolutePath()),_                    e)__            return emptyMap()__        }_    };internally,in,this,class,we,try,to,load,the,file,but,if,for,some,reason,we,can,t,we,re,being,more,lenient,by,logging,the,error,and,skipping,all,enries,this,is,aligned,with,how,we,handle,other,auto,loaded,files,in,security;static,map,string,string,parse,file,lenient,path,path,logger,logger,try,map,string,string,map,parse,file,path,logger,return,map,null,empty,map,map,catch,exception,e,logger,error,supplier,new,parameterized,message,failed,to,parse,file,skipping,removing,all,entries,path,to,absolute,path,e,return,empty,map
FileUserRolesStore -> public static Map<String, String[]> parseFile(Path path, @Nullable Logger logger);1524684173;Parses the users_roles file.__Returns @{code null} if the {@code users_roles} file does not exist. The read file holds a mapping per_line of the form "role -&gt_ users" while the returned map holds entries of the form  "user -&gt_ roles".;public static Map<String, String[]> parseFile(Path path, @Nullable Logger logger) {_        if (logger == null) {_            logger = NoOpLogger.INSTANCE__        }_        logger.trace("reading users_roles file [{}]...", path.toAbsolutePath())___        if (Files.exists(path) == false) {_            return null__        }__        List<String> lines__        try {_            lines = Files.readAllLines(path, StandardCharsets.UTF_8)__        } catch (IOException ioe) {_            throw new ElasticsearchException("could not read users file [" + path.toAbsolutePath() + "]", ioe)__        }__        Map<String, List<String>> userToRoles = new HashMap<>()___        int lineNr = 0__        for (String line : lines) {_            lineNr++__            if (line.startsWith("#")) {  _                continue__            }_            int i = line.indexOf(":")__            if (i <= 0 || i == line.length() - 1) {_                logger.error("invalid entry in users_roles file [{}], line [{}]. skipping...", path.toAbsolutePath(), lineNr)__                continue__            }_            String role = line.substring(0, i).trim()__            Validation.Error validationError = Validation.Roles.validateRoleName(role, true)__            if (validationError != null) {_                logger.error("invalid role entry in users_roles file [{}], line [{}] - {}. skipping...", path.toAbsolutePath(), lineNr,_                        validationError)__                continue__            }_            String usersStr = line.substring(i + 1).trim()__            if (Strings.isEmpty(usersStr)) {_                logger.error("invalid entry for role [{}] in users_roles file [{}], line [{}]. no users found. skipping...", role,_                        path.toAbsolutePath(), lineNr)__                continue__            }_            String[] roleUsers = USERS_DELIM.split(usersStr)__            if (roleUsers.length == 0) {_                logger.error("invalid entry for role [{}] in users_roles file [{}], line [{}]. no users found. skipping...", role,_                        path.toAbsolutePath(), lineNr)__                continue__            }__            for (String user : roleUsers) {_                List<String> roles = userToRoles.get(user)__                if (roles == null) {_                    roles = new ArrayList<>()__                    userToRoles.put(user, roles)__                }_                roles.add(role)__            }_        }__        Map<String, String[]> usersRoles = new HashMap<>()__        for (Map.Entry<String, List<String>> entry : userToRoles.entrySet()) {_            usersRoles.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]))__        }__        logger.debug("parsed [{}] user to role mappings from file [{}]", usersRoles.size(), path.toAbsolutePath())__        return unmodifiableMap(usersRoles)__    };parses,the,file,returns,code,null,if,the,code,file,does,not,exist,the,read,file,holds,a,mapping,per,line,of,the,form,role,gt,users,while,the,returned,map,holds,entries,of,the,form,user,gt,roles;public,static,map,string,string,parse,file,path,path,nullable,logger,logger,if,logger,null,logger,no,op,logger,instance,logger,trace,reading,file,path,to,absolute,path,if,files,exists,path,false,return,null,list,string,lines,try,lines,files,read,all,lines,path,standard,charsets,catch,ioexception,ioe,throw,new,elasticsearch,exception,could,not,read,users,file,path,to,absolute,path,ioe,map,string,list,string,user,to,roles,new,hash,map,int,line,nr,0,for,string,line,lines,line,nr,if,line,starts,with,continue,int,i,line,index,of,if,i,0,i,line,length,1,logger,error,invalid,entry,in,file,line,skipping,path,to,absolute,path,line,nr,continue,string,role,line,substring,0,i,trim,validation,error,validation,error,validation,roles,validate,role,name,role,true,if,validation,error,null,logger,error,invalid,role,entry,in,file,line,skipping,path,to,absolute,path,line,nr,validation,error,continue,string,users,str,line,substring,i,1,trim,if,strings,is,empty,users,str,logger,error,invalid,entry,for,role,in,file,line,no,users,found,skipping,role,path,to,absolute,path,line,nr,continue,string,role,users,split,users,str,if,role,users,length,0,logger,error,invalid,entry,for,role,in,file,line,no,users,found,skipping,role,path,to,absolute,path,line,nr,continue,for,string,user,role,users,list,string,roles,user,to,roles,get,user,if,roles,null,roles,new,array,list,user,to,roles,put,user,roles,roles,add,role,map,string,string,users,roles,new,hash,map,for,map,entry,string,list,string,entry,user,to,roles,entry,set,users,roles,put,entry,get,key,entry,get,value,to,array,new,string,entry,get,value,size,logger,debug,parsed,user,to,role,mappings,from,file,users,roles,size,path,to,absolute,path,return,unmodifiable,map,users,roles
FileUserRolesStore -> public static Map<String, String[]> parseFile(Path path, @Nullable Logger logger);1526029249;Parses the users_roles file.__Returns @{code null} if the {@code users_roles} file does not exist. The read file holds a mapping per_line of the form "role -&gt_ users" while the returned map holds entries of the form  "user -&gt_ roles".;public static Map<String, String[]> parseFile(Path path, @Nullable Logger logger) {_        if (logger == null) {_            logger = NoOpLogger.INSTANCE__        }_        logger.trace("reading users_roles file [{}]...", path.toAbsolutePath())___        if (Files.exists(path) == false) {_            return null__        }__        List<String> lines__        try {_            lines = Files.readAllLines(path, StandardCharsets.UTF_8)__        } catch (IOException ioe) {_            throw new ElasticsearchException("could not read users file [" + path.toAbsolutePath() + "]", ioe)__        }__        Map<String, List<String>> userToRoles = new HashMap<>()___        int lineNr = 0__        for (String line : lines) {_            lineNr++__            if (line.startsWith("#")) {  _                continue__            }_            int i = line.indexOf(":")__            if (i <= 0 || i == line.length() - 1) {_                logger.error("invalid entry in users_roles file [{}], line [{}]. skipping...", path.toAbsolutePath(), lineNr)__                continue__            }_            String role = line.substring(0, i).trim()__            Validation.Error validationError = Validation.Roles.validateRoleName(role, true)__            if (validationError != null) {_                logger.error("invalid role entry in users_roles file [{}], line [{}] - {}. skipping...", path.toAbsolutePath(), lineNr,_                        validationError)__                continue__            }_            String usersStr = line.substring(i + 1).trim()__            if (Strings.isEmpty(usersStr)) {_                logger.error("invalid entry for role [{}] in users_roles file [{}], line [{}]. no users found. skipping...", role,_                        path.toAbsolutePath(), lineNr)__                continue__            }_            String[] roleUsers = USERS_DELIM.split(usersStr)__            if (roleUsers.length == 0) {_                logger.error("invalid entry for role [{}] in users_roles file [{}], line [{}]. no users found. skipping...", role,_                        path.toAbsolutePath(), lineNr)__                continue__            }__            for (String user : roleUsers) {_                List<String> roles = userToRoles.computeIfAbsent(user, k -> new ArrayList<>())__                roles.add(role)__            }_        }__        Map<String, String[]> usersRoles = new HashMap<>()__        for (Map.Entry<String, List<String>> entry : userToRoles.entrySet()) {_            usersRoles.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]))__        }__        logger.debug("parsed [{}] user to role mappings from file [{}]", usersRoles.size(), path.toAbsolutePath())__        return unmodifiableMap(usersRoles)__    };parses,the,file,returns,code,null,if,the,code,file,does,not,exist,the,read,file,holds,a,mapping,per,line,of,the,form,role,gt,users,while,the,returned,map,holds,entries,of,the,form,user,gt,roles;public,static,map,string,string,parse,file,path,path,nullable,logger,logger,if,logger,null,logger,no,op,logger,instance,logger,trace,reading,file,path,to,absolute,path,if,files,exists,path,false,return,null,list,string,lines,try,lines,files,read,all,lines,path,standard,charsets,catch,ioexception,ioe,throw,new,elasticsearch,exception,could,not,read,users,file,path,to,absolute,path,ioe,map,string,list,string,user,to,roles,new,hash,map,int,line,nr,0,for,string,line,lines,line,nr,if,line,starts,with,continue,int,i,line,index,of,if,i,0,i,line,length,1,logger,error,invalid,entry,in,file,line,skipping,path,to,absolute,path,line,nr,continue,string,role,line,substring,0,i,trim,validation,error,validation,error,validation,roles,validate,role,name,role,true,if,validation,error,null,logger,error,invalid,role,entry,in,file,line,skipping,path,to,absolute,path,line,nr,validation,error,continue,string,users,str,line,substring,i,1,trim,if,strings,is,empty,users,str,logger,error,invalid,entry,for,role,in,file,line,no,users,found,skipping,role,path,to,absolute,path,line,nr,continue,string,role,users,split,users,str,if,role,users,length,0,logger,error,invalid,entry,for,role,in,file,line,no,users,found,skipping,role,path,to,absolute,path,line,nr,continue,for,string,user,role,users,list,string,roles,user,to,roles,compute,if,absent,user,k,new,array,list,roles,add,role,map,string,string,users,roles,new,hash,map,for,map,entry,string,list,string,entry,user,to,roles,entry,set,users,roles,put,entry,get,key,entry,get,value,to,array,new,string,entry,get,value,size,logger,debug,parsed,user,to,role,mappings,from,file,users,roles,size,path,to,absolute,path,return,unmodifiable,map,users,roles
FileUserRolesStore -> public static Map<String, String[]> parseFile(Path path, @Nullable Logger logger);1538170812;Parses the users_roles file.__Returns @{code null} if the {@code users_roles} file does not exist. The read file holds a mapping per_line of the form "role -&gt_ users" while the returned map holds entries of the form  "user -&gt_ roles".;public static Map<String, String[]> parseFile(Path path, @Nullable Logger logger) {_        if (logger == null) {_            logger = NoOpLogger.INSTANCE__        }_        logger.trace("reading users_roles file [{}]...", path.toAbsolutePath())___        if (Files.exists(path) == false) {_            return null__        }__        List<String> lines__        try {_            lines = Files.readAllLines(path, StandardCharsets.UTF_8)__        } catch (IOException ioe) {_            throw new ElasticsearchException("could not read users file [" + path.toAbsolutePath() + "]", ioe)__        }__        Map<String, List<String>> userToRoles = new HashMap<>()___        int lineNr = 0__        for (String line : lines) {_            lineNr++__            if (line.startsWith("#")) {  _                continue__            }_            int i = line.indexOf(":")__            if (i <= 0 || i == line.length() - 1) {_                logger.error("invalid entry in users_roles file [{}], line [{}]. skipping...", path.toAbsolutePath(), lineNr)__                continue__            }_            String role = line.substring(0, i).trim()__            Validation.Error validationError = Validation.Roles.validateRoleName(role, true)__            if (validationError != null) {_                logger.error("invalid role entry in users_roles file [{}], line [{}] - {}. skipping...", path.toAbsolutePath(), lineNr,_                        validationError)__                continue__            }_            String usersStr = line.substring(i + 1).trim()__            if (Strings.isEmpty(usersStr)) {_                logger.error("invalid entry for role [{}] in users_roles file [{}], line [{}]. no users found. skipping...", role,_                        path.toAbsolutePath(), lineNr)__                continue__            }_            String[] roleUsers = USERS_DELIM.split(usersStr)__            if (roleUsers.length == 0) {_                logger.error("invalid entry for role [{}] in users_roles file [{}], line [{}]. no users found. skipping...", role,_                        path.toAbsolutePath(), lineNr)__                continue__            }__            for (String user : roleUsers) {_                List<String> roles = userToRoles.computeIfAbsent(user, k -> new ArrayList<>())__                roles.add(role)__            }_        }__        Map<String, String[]> usersRoles = new HashMap<>()__        for (Map.Entry<String, List<String>> entry : userToRoles.entrySet()) {_            usersRoles.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]))__        }__        logger.debug("parsed [{}] user to role mappings from file [{}]", usersRoles.size(), path.toAbsolutePath())__        return unmodifiableMap(usersRoles)__    };parses,the,file,returns,code,null,if,the,code,file,does,not,exist,the,read,file,holds,a,mapping,per,line,of,the,form,role,gt,users,while,the,returned,map,holds,entries,of,the,form,user,gt,roles;public,static,map,string,string,parse,file,path,path,nullable,logger,logger,if,logger,null,logger,no,op,logger,instance,logger,trace,reading,file,path,to,absolute,path,if,files,exists,path,false,return,null,list,string,lines,try,lines,files,read,all,lines,path,standard,charsets,catch,ioexception,ioe,throw,new,elasticsearch,exception,could,not,read,users,file,path,to,absolute,path,ioe,map,string,list,string,user,to,roles,new,hash,map,int,line,nr,0,for,string,line,lines,line,nr,if,line,starts,with,continue,int,i,line,index,of,if,i,0,i,line,length,1,logger,error,invalid,entry,in,file,line,skipping,path,to,absolute,path,line,nr,continue,string,role,line,substring,0,i,trim,validation,error,validation,error,validation,roles,validate,role,name,role,true,if,validation,error,null,logger,error,invalid,role,entry,in,file,line,skipping,path,to,absolute,path,line,nr,validation,error,continue,string,users,str,line,substring,i,1,trim,if,strings,is,empty,users,str,logger,error,invalid,entry,for,role,in,file,line,no,users,found,skipping,role,path,to,absolute,path,line,nr,continue,string,role,users,split,users,str,if,role,users,length,0,logger,error,invalid,entry,for,role,in,file,line,no,users,found,skipping,role,path,to,absolute,path,line,nr,continue,for,string,user,role,users,list,string,roles,user,to,roles,compute,if,absent,user,k,new,array,list,roles,add,role,map,string,string,users,roles,new,hash,map,for,map,entry,string,list,string,entry,user,to,roles,entry,set,users,roles,put,entry,get,key,entry,get,value,to,array,new,string,entry,get,value,size,logger,debug,parsed,user,to,role,mappings,from,file,users,roles,size,path,to,absolute,path,return,unmodifiable,map,users,roles
