commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "security_get_token_action". }
false;protected;2;12;;@Override protected RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {     try (XContentParser parser = request.contentParser()) {         final CreateTokenRequest tokenRequest = PARSER.parse(parser, null).         final Action<CreateTokenResponse> action = "refresh_token".equals(tokenRequest.getGrantType()) ? RefreshTokenAction.INSTANCE : CreateTokenAction.INSTANCE.         return channel -> client.execute(action, tokenRequest, // handling of failures in some cases.         new CreateTokenResponseActionListener(channel, request, logger)).     } }
false;public;1;8;;@Override public void onResponse(CreateTokenResponse createTokenResponse) {     try (XContentBuilder builder = channel.newBuilder()) {         channel.sendResponse(new BytesRestResponse(RestStatus.OK, createTokenResponse.toXContent(builder, request))).     } catch (IOException e) {         onFailure(e).     } }
false;public;1;21;;@Override public void onFailure(Exception e) {     logger.debug("Failed to create token", e).     if (e instanceof ActionRequestValidationException) {         ActionRequestValidationException validationException = (ActionRequestValidationException) e.         final TokenRequestError error.         if (validationException.validationErrors().stream().anyMatch(s -> s.contains("grant_type"))) {             error = TokenRequestError.UNSUPPORTED_GRANT_TYPE.         } else {             error = TokenRequestError.INVALID_REQUEST.         }         sendTokenErrorResponse(error, validationException.getMessage(), e).     } else if (e instanceof ElasticsearchSecurityException && "invalid_grant".equals(e.getMessage()) && ((ElasticsearchSecurityException) e).getHeader("error_description").size() == 1) {         sendTokenErrorResponse(TokenRequestError.INVALID_GRANT, ((ElasticsearchSecurityException) e).getHeader("error_description").get(0), e).     } else {         sendFailure(e).     } }
false;;3;13;;void sendTokenErrorResponse(TokenRequestError error, String description, Exception e) {     try (XContentBuilder builder = channel.newErrorBuilder()) {         // defined by https://tools.ietf.org/html/rfc6749#section-5.2         builder.startObject().field("error", error.toString().toLowerCase(Locale.ROOT)).field("error_description", description).endObject().         channel.sendResponse(new BytesRestResponse(RestStatus.BAD_REQUEST, builder)).     } catch (IOException ioe) {         ioe.addSuppressed(e).         sendFailure(e).     } }
false;;1;8;;void sendFailure(Exception e) {     try {         channel.sendResponse(new BytesRestResponse(channel, e)).     } catch (Exception inner) {         inner.addSuppressed(e).         logger.error("failed to send failure response", inner).     } }
