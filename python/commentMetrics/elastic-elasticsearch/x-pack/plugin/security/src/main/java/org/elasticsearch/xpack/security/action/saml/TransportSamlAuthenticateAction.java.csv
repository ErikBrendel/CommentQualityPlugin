commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;28;;@Override protected void doExecute(Task task, SamlAuthenticateRequest request, ActionListener<SamlAuthenticateResponse> listener) {     final SamlToken saml = new SamlToken(request.getSaml(), request.getValidRequestIds()).     logger.trace("Attempting to authenticate SamlToken [{}]", saml).     final ThreadContext threadContext = threadPool.getThreadContext().     Authentication originatingAuthentication = Authentication.getAuthentication(threadContext).     try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {         authenticationService.authenticate(SamlAuthenticateAction.NAME, request, saml, ActionListener.wrap(authentication -> {             AuthenticationResult result = threadContext.getTransient(AuthenticationResult.THREAD_CONTEXT_KEY).             if (result == null) {                 listener.onFailure(new IllegalStateException("Cannot find AuthenticationResult on thread context")).                 return.             }             assert authentication != null : "authentication should never be null at this point".             final Map<String, Object> tokenMeta = (Map<String, Object>) result.getMetadata().get(SamlRealm.CONTEXT_TOKEN_DATA).             tokenService.createUserToken(authentication, originatingAuthentication, ActionListener.wrap(tuple -> {                 final String tokenString = tokenService.getUserTokenString(tuple.v1()).                 final TimeValue expiresIn = tokenService.getExpirationDelay().                 listener.onResponse(new SamlAuthenticateResponse(authentication.getUser().principal(), tokenString, tuple.v2(), expiresIn)).             }, listener::onFailure), tokenMeta, true).         }, e -> {             logger.debug(() -> new ParameterizedMessage("SamlToken [{}] could not be authenticated", saml), e).             listener.onFailure(e).         })).     } }
