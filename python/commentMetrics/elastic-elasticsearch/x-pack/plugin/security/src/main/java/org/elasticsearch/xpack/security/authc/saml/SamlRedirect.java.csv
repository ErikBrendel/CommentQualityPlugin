commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getRedirectUrl() throws ElasticsearchException {     return getRedirectUrl(null). }
false;public;1;18;;public String getRedirectUrl(String relayState) throws ElasticsearchException {     try {         final String request = deflateAndBase64Encode(this.samlObject).         String queryParam = parameterName + "=" + urlEncode(request).         if (relayState != null) {             queryParam += "&RelayState=" + urlEncode(relayState).         }         if (signing.shouldSign(this.samlObject)) {             final String algo = SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256.             queryParam += "&SigAlg=" + urlEncode(algo).             final byte[] sig = signing.sign(queryParam, algo).             queryParam += "&Signature=" + urlEncode(base64Encode(sig)).         }         return withParameters(queryParam).     } catch (Exception e) {         throw new ElasticsearchException("Cannot construct SAML redirect", e).     } }
false;private;1;9;;private String withParameters(String queryParam) {     if (destination.indexOf('?') == -1) {         return destination + "?" + queryParam.     } else if (destination.endsWith("?")) {         return destination + queryParam.     } else {         return destination + "&" + queryParam.     } }
false;private;1;3;;private String base64Encode(byte[] bytes) {     return Base64.getEncoder().encodeToString(bytes). }
false;private;1;3;;private String urlEncode(String param) throws UnsupportedEncodingException {     return URLEncoder.encode(param, StandardCharsets.US_ASCII.name()). }
false;protected;1;11;;protected String deflateAndBase64Encode(SAMLObject message) throws Exception {     Deflater deflater = new Deflater(Deflater.DEFLATED, true).     try (ByteArrayOutputStream bytesOut = new ByteArrayOutputStream().         DeflaterOutputStream deflaterStream = new DeflaterOutputStream(bytesOut, deflater)) {         String messageStr = SamlUtils.toString(XMLObjectSupport.marshall(message)).         deflaterStream.write(messageStr.getBytes(StandardCharsets.UTF_8)).         deflaterStream.finish().         return base64Encode(bytesOut.toByteArray()).     } }
