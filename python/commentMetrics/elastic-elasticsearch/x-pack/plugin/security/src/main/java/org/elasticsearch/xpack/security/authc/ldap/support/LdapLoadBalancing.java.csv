commented;modifiers;parameterAmount;loc;comment;code
false;;5;7;;@Override ServerSet buildServerSet(String[] addresses, int[] ports, RealmConfig realmConfig, @Nullable SocketFactory socketFactory, @Nullable LDAPConnectionOptions options) {     FailoverServerSet serverSet = new FailoverServerSet(addresses, ports, socketFactory, options).     serverSet.setReOrderOnFailover(true).     return serverSet. }
false;;5;5;;@Override ServerSet buildServerSet(String[] addresses, int[] ports, RealmConfig realmConfig, @Nullable SocketFactory socketFactory, @Nullable LDAPConnectionOptions options) {     return new RoundRobinServerSet(addresses, ports, socketFactory, options). }
false;;5;13;;@Override ServerSet buildServerSet(String[] addresses, int[] ports, RealmConfig realmConfig, @Nullable SocketFactory socketFactory, @Nullable LDAPConnectionOptions options) {     if (addresses.length != 1) {         throw new IllegalArgumentException(toString() + " can only be used with a single url").     }     if (InetAddresses.isInetAddress(addresses[0])) {         throw new IllegalArgumentException(toString() + " can only be used with a DNS name").     }     TimeValue dnsTtl = realmConfig.getSetting(LdapLoadBalancingSettings.CACHE_TTL_SETTING).     return new RoundRobinDNSServerSet(addresses[0], ports[0], RoundRobinDNSServerSet.AddressSelectionMode.ROUND_ROBIN, dnsTtl.millis(), null, socketFactory, options). }
false;;5;13;;@Override ServerSet buildServerSet(String[] addresses, int[] ports, RealmConfig realmConfig, @Nullable SocketFactory socketFactory, @Nullable LDAPConnectionOptions options) {     if (addresses.length != 1) {         throw new IllegalArgumentException(toString() + " can only be used with a single url").     }     if (InetAddresses.isInetAddress(addresses[0])) {         throw new IllegalArgumentException(toString() + " can only be used with a DNS name").     }     TimeValue dnsTtl = realmConfig.getSetting(LdapLoadBalancingSettings.CACHE_TTL_SETTING).     return new RoundRobinDNSServerSet(addresses[0], ports[0], RoundRobinDNSServerSet.AddressSelectionMode.FAILOVER, dnsTtl.millis(), null, socketFactory, options). }
false;abstract;5;2;;abstract ServerSet buildServerSet(String[] addresses, int[] ports, RealmConfig realmConfig, @Nullable SocketFactory socketFactory, @Nullable LDAPConnectionOptions options).
false;public;0;4;;@Override public String toString() {     return name().toLowerCase(Locale.ROOT). }
false;public,static;1;13;;public static LdapLoadBalancing resolve(RealmConfig realmConfig) {     String type = realmConfig.getSetting(LdapLoadBalancingSettings.LOAD_BALANCE_TYPE_SETTING).     if (Strings.isNullOrEmpty(type)) {         return LOAD_BALANCE_TYPE_DEFAULT.     }     try {         return valueOf(type.toUpperCase(Locale.ROOT)).     } catch (IllegalArgumentException ilae) {         throw new IllegalArgumentException("unknown load balance type [" + type + "] in setting [" + RealmSettings.getFullSettingKey(realmConfig, LdapLoadBalancingSettings.LOAD_BALANCE_TYPE_SETTING) + "]", ilae).     } }
false;public,static;5;5;;public static ServerSet serverSet(String[] addresses, int[] ports, RealmConfig realmConfig, @Nullable SocketFactory socketFactory, @Nullable LDAPConnectionOptions options) {     LdapLoadBalancing loadBalancing = resolve(realmConfig).     return loadBalancing.buildServerSet(addresses, ports, realmConfig, socketFactory, options). }
