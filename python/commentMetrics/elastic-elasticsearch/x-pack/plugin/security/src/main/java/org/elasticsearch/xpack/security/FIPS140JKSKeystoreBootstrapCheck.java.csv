# id;timestamp;commentText;codeText;commentWords;codeWords
FIPS140JKSKeystoreBootstrapCheck -> @Override     public BootstrapCheckResult check(BootstrapContext context);1532511554;Test if the node fails the check.__@param context the bootstrap context_@return the result of the bootstrap check;@Override_    public BootstrapCheckResult check(BootstrapContext context) {__        if (fipsModeEnabled) {_            final Settings settings = context.settings__            Settings keystoreTypeSettings = settings.filter(k -> k.endsWith("keystore.type"))_                .filter(k -> settings.get(k).equalsIgnoreCase("jks"))__            if (keystoreTypeSettings.isEmpty() == false) {_                return BootstrapCheckResult.failure("JKS Keystores cannot be used in a FIPS 140 compliant JVM. Please " +_                    "revisit [" + keystoreTypeSettings.toDelimitedString(',') + "] settings")__            }_            _            Settings keystorePathSettings = settings.filter(k -> k.endsWith("keystore.path"))_                .filter(k -> settings.hasValue(k.replace(".path", ".type")) == false)__            if (keystorePathSettings.isEmpty() == false) {_                return BootstrapCheckResult.failure("JKS Keystores cannot be used in a FIPS 140 compliant JVM. Please " +_                    "revisit [" + keystorePathSettings.toDelimitedString(',') + "] settings")__            }__        }_        return BootstrapCheckResult.success()__    };test,if,the,node,fails,the,check,param,context,the,bootstrap,context,return,the,result,of,the,bootstrap,check;override,public,bootstrap,check,result,check,bootstrap,context,context,if,fips,mode,enabled,final,settings,settings,context,settings,settings,keystore,type,settings,settings,filter,k,k,ends,with,keystore,type,filter,k,settings,get,k,equals,ignore,case,jks,if,keystore,type,settings,is,empty,false,return,bootstrap,check,result,failure,jks,keystores,cannot,be,used,in,a,fips,140,compliant,jvm,please,revisit,keystore,type,settings,to,delimited,string,settings,settings,keystore,path,settings,settings,filter,k,k,ends,with,keystore,path,filter,k,settings,has,value,k,replace,path,type,false,if,keystore,path,settings,is,empty,false,return,bootstrap,check,result,failure,jks,keystores,cannot,be,used,in,a,fips,140,compliant,jvm,please,revisit,keystore,path,settings,to,delimited,string,settings,return,bootstrap,check,result,success
FIPS140JKSKeystoreBootstrapCheck -> @Override     public BootstrapCheckResult check(BootstrapContext context);1533063033;Test if the node fails the check.__@param context the bootstrap context_@return the result of the bootstrap check;@Override_    public BootstrapCheckResult check(BootstrapContext context) {__        if (fipsModeEnabled) {_            final Settings settings = context.settings__            Settings keystoreTypeSettings = settings.filter(k -> k.endsWith("keystore.type"))_                .filter(k -> settings.get(k).equalsIgnoreCase("jks"))__            if (keystoreTypeSettings.isEmpty() == false) {_                return BootstrapCheckResult.failure("JKS Keystores cannot be used in a FIPS 140 compliant JVM. Please " +_                    "revisit [" + keystoreTypeSettings.toDelimitedString(',') + "] settings")__            }_            _            Settings keystorePathSettings = settings.filter(k -> k.endsWith("keystore.path"))_                .filter(k -> settings.hasValue(k.replace(".path", ".type")) == false)__            if (keystorePathSettings.isEmpty() == false) {_                return BootstrapCheckResult.failure("JKS Keystores cannot be used in a FIPS 140 compliant JVM. Please " +_                    "revisit [" + keystorePathSettings.toDelimitedString(',') + "] settings")__            }__        }_        return BootstrapCheckResult.success()__    };test,if,the,node,fails,the,check,param,context,the,bootstrap,context,return,the,result,of,the,bootstrap,check;override,public,bootstrap,check,result,check,bootstrap,context,context,if,fips,mode,enabled,final,settings,settings,context,settings,settings,keystore,type,settings,settings,filter,k,k,ends,with,keystore,type,filter,k,settings,get,k,equals,ignore,case,jks,if,keystore,type,settings,is,empty,false,return,bootstrap,check,result,failure,jks,keystores,cannot,be,used,in,a,fips,140,compliant,jvm,please,revisit,keystore,type,settings,to,delimited,string,settings,settings,keystore,path,settings,settings,filter,k,k,ends,with,keystore,path,filter,k,settings,has,value,k,replace,path,type,false,if,keystore,path,settings,is,empty,false,return,bootstrap,check,result,failure,jks,keystores,cannot,be,used,in,a,fips,140,compliant,jvm,please,revisit,keystore,path,settings,to,delimited,string,settings,return,bootstrap,check,result,success
FIPS140JKSKeystoreBootstrapCheck -> @Override     public BootstrapCheckResult check(BootstrapContext context);1534848846;Test if the node fails the check.__@param context the bootstrap context_@return the result of the bootstrap check;@Override_    public BootstrapCheckResult check(BootstrapContext context) {__        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {_            final Settings settings = context.settings__            Settings keystoreTypeSettings = settings.filter(k -> k.endsWith("keystore.type"))_                .filter(k -> settings.get(k).equalsIgnoreCase("jks"))__            if (keystoreTypeSettings.isEmpty() == false) {_                return BootstrapCheckResult.failure("JKS Keystores cannot be used in a FIPS 140 compliant JVM. Please " +_                    "revisit [" + keystoreTypeSettings.toDelimitedString(',') + "] settings")__            }_            _            Settings keystorePathSettings = settings.filter(k -> k.endsWith("keystore.path"))_                .filter(k -> settings.hasValue(k.replace(".path", ".type")) == false)__            if (keystorePathSettings.isEmpty() == false) {_                return BootstrapCheckResult.failure("JKS Keystores cannot be used in a FIPS 140 compliant JVM. Please " +_                    "revisit [" + keystorePathSettings.toDelimitedString(',') + "] settings")__            }__        }_        return BootstrapCheckResult.success()__    };test,if,the,node,fails,the,check,param,context,the,bootstrap,context,return,the,result,of,the,bootstrap,check;override,public,bootstrap,check,result,check,bootstrap,context,context,if,xpack,settings,get,context,settings,final,settings,settings,context,settings,settings,keystore,type,settings,settings,filter,k,k,ends,with,keystore,type,filter,k,settings,get,k,equals,ignore,case,jks,if,keystore,type,settings,is,empty,false,return,bootstrap,check,result,failure,jks,keystores,cannot,be,used,in,a,fips,140,compliant,jvm,please,revisit,keystore,type,settings,to,delimited,string,settings,settings,keystore,path,settings,settings,filter,k,k,ends,with,keystore,path,filter,k,settings,has,value,k,replace,path,type,false,if,keystore,path,settings,is,empty,false,return,bootstrap,check,result,failure,jks,keystores,cannot,be,used,in,a,fips,140,compliant,jvm,please,revisit,keystore,path,settings,to,delimited,string,settings,return,bootstrap,check,result,success
FIPS140JKSKeystoreBootstrapCheck -> @Override     public BootstrapCheckResult check(BootstrapContext context);1544677641;Test if the node fails the check.__@param context the bootstrap context_@return the result of the bootstrap check;@Override_    public BootstrapCheckResult check(BootstrapContext context) {__        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings())) {_            final Settings settings = context.settings()__            Settings keystoreTypeSettings = settings.filter(k -> k.endsWith("keystore.type"))_                .filter(k -> settings.get(k).equalsIgnoreCase("jks"))__            if (keystoreTypeSettings.isEmpty() == false) {_                return BootstrapCheckResult.failure("JKS Keystores cannot be used in a FIPS 140 compliant JVM. Please " +_                    "revisit [" + keystoreTypeSettings.toDelimitedString(',') + "] settings")__            }_            _            Settings keystorePathSettings = settings.filter(k -> k.endsWith("keystore.path"))_                .filter(k -> settings.hasValue(k.replace(".path", ".type")) == false)__            if (keystorePathSettings.isEmpty() == false) {_                return BootstrapCheckResult.failure("JKS Keystores cannot be used in a FIPS 140 compliant JVM. Please " +_                    "revisit [" + keystorePathSettings.toDelimitedString(',') + "] settings")__            }__        }_        return BootstrapCheckResult.success()__    };test,if,the,node,fails,the,check,param,context,the,bootstrap,context,return,the,result,of,the,bootstrap,check;override,public,bootstrap,check,result,check,bootstrap,context,context,if,xpack,settings,get,context,settings,final,settings,settings,context,settings,settings,keystore,type,settings,settings,filter,k,k,ends,with,keystore,type,filter,k,settings,get,k,equals,ignore,case,jks,if,keystore,type,settings,is,empty,false,return,bootstrap,check,result,failure,jks,keystores,cannot,be,used,in,a,fips,140,compliant,jvm,please,revisit,keystore,type,settings,to,delimited,string,settings,settings,keystore,path,settings,settings,filter,k,k,ends,with,keystore,path,filter,k,settings,has,value,k,replace,path,type,false,if,keystore,path,settings,is,empty,false,return,bootstrap,check,result,failure,jks,keystores,cannot,be,used,in,a,fips,140,compliant,jvm,please,revisit,keystore,path,settings,to,delimited,string,settings,return,bootstrap,check,result,success
