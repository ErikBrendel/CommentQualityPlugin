commented;modifiers;parameterAmount;loc;comment;code
false;;1;3;;void setContent(String content) {     this.content = content. }
false;;1;3;;void setIds(List<String> ids) {     this.ids = ids. }
false;public;0;4;;@Override public String getName() {     return "security_saml_authenticate_action". }
false;public;2;10;;@Override public RestResponse buildResponse(SamlAuthenticateResponse response, XContentBuilder builder) throws Exception {     builder.startObject().field("username", response.getPrincipal()).field("access_token", response.getTokenString()).field("refresh_token", response.getRefreshToken()).field("expires_in", response.getExpiresIn().seconds()).endObject().     return new BytesRestResponse(RestStatus.OK, builder). }
false;public;2;23;;@Override public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {     try (XContentParser parser = request.contentParser()) {         final Input input = PARSER.parse(parser, null).         logger.trace("SAML Authenticate: [{}...] [{}]", Strings.cleanTruncate(input.content, 128), input.ids).         return channel -> {             final byte[] bytes = decodeBase64(input.content).             final SamlAuthenticateRequestBuilder requestBuilder = new SecurityClient(client).prepareSamlAuthenticate(bytes, input.ids).             requestBuilder.execute(new RestBuilderListener<SamlAuthenticateResponse>(channel) {                  @Override                 public RestResponse buildResponse(SamlAuthenticateResponse response, XContentBuilder builder) throws Exception {                     builder.startObject().field("username", response.getPrincipal()).field("access_token", response.getTokenString()).field("refresh_token", response.getRefreshToken()).field("expires_in", response.getExpiresIn().seconds()).endObject().                     return new BytesRestResponse(RestStatus.OK, builder).                 }             }).         }.     } }
false;private;1;9;;private byte[] decodeBase64(String content) {     content = content.replaceAll("\\s+", "").     try {         return Base64.getDecoder().decode(content).     } catch (IllegalArgumentException e) {         logger.info("Failed to decode base64 string [{}] - {}", content, e.toString()).         throw e.     } }
