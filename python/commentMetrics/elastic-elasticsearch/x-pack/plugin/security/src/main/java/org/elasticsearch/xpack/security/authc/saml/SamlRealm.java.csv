# id;timestamp;commentText;codeText;commentWords;codeWords
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1524684173;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1527622193;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1528804324;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1531729807;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1533295538;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1535552903;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1535723122;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1538170812;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1539615817;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1541476610;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1541642262;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public LogoutResponse buildLogoutResponse(String inResponseTo);1548342301;Creates a SAML {@link org.opensaml.saml.saml2.core.LogoutResponse} to the provided requestID;public LogoutResponse buildLogoutResponse(String inResponseTo) {_        final LogoutResponse logoutResponse = new SamlLogoutResponseBuilder(_                Clock.systemUTC(), serviceProvider, idpDescriptor.get(), inResponseTo, StatusCode.SUCCESS).build()__        if (logoutResponse != null && logger.isTraceEnabled()) {_            logger.trace("Constructed SAML Logout Response: {}", SamlUtils.samlObjectToString(logoutResponse))__        }_        return logoutResponse__    };creates,a,saml,link,org,opensaml,saml,saml2,core,logout,response,to,the,provided,request,id;public,logout,response,build,logout,response,string,in,response,to,final,logout,response,logout,response,new,saml,logout,response,builder,clock,system,utc,service,provider,idp,descriptor,get,in,response,to,status,code,success,build,if,logout,response,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,response,saml,utils,saml,object,to,string,logout,response,return,logout,response
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1524684173;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        final Logger logger = config.logger(SamlRealm.class)__        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.globalSettings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = CLOCK_SKEW.get(config.settings())__        final SamlAuthenticator authenticator = new SamlAuthenticator(config, clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(config, clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,final,logger,logger,config,logger,saml,realm,class,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,global,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,get,config,settings,final,saml,authenticator,authenticator,new,saml,authenticator,config,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,config,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1527622193;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        final Logger logger = config.logger(SamlRealm.class)__        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.globalSettings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = CLOCK_SKEW.get(config.settings())__        final SamlAuthenticator authenticator = new SamlAuthenticator(config, clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(config, clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,final,logger,logger,config,logger,saml,realm,class,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,global,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,get,config,settings,final,saml,authenticator,authenticator,new,saml,authenticator,config,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,config,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1528804324;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        final Logger logger = config.logger(SamlRealm.class)__        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.globalSettings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = CLOCK_SKEW.get(config.settings())__        final SamlAuthenticator authenticator = new SamlAuthenticator(config, clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(config, clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,final,logger,logger,config,logger,saml,realm,class,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,global,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,get,config,settings,final,saml,authenticator,authenticator,new,saml,authenticator,config,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,config,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1531729807;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        final Logger logger = config.logger(SamlRealm.class)__        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.globalSettings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = CLOCK_SKEW.get(config.settings())__        final SamlAuthenticator authenticator = new SamlAuthenticator(config, clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(config, clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,final,logger,logger,config,logger,saml,realm,class,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,global,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,get,config,settings,final,saml,authenticator,authenticator,new,saml,authenticator,config,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,config,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1533295538;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        final Logger logger = config.logger(SamlRealm.class)__        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.globalSettings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = CLOCK_SKEW.get(config.settings())__        final SamlAuthenticator authenticator = new SamlAuthenticator(config, clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(config, clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,final,logger,logger,config,logger,saml,realm,class,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,global,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,get,config,settings,final,saml,authenticator,authenticator,new,saml,authenticator,config,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,config,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1535552903;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        final Logger logger = config.logger(SamlRealm.class)__        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.globalSettings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = CLOCK_SKEW.get(config.settings())__        final SamlAuthenticator authenticator = new SamlAuthenticator(config, clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(config, clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,final,logger,logger,config,logger,saml,realm,class,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,global,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,get,config,settings,final,saml,authenticator,authenticator,new,saml,authenticator,config,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,config,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1535723122;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        final Logger logger = config.logger(SamlRealm.class)__        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.globalSettings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = CLOCK_SKEW.get(config.settings())__        final SamlAuthenticator authenticator = new SamlAuthenticator(config, clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(config, clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,final,logger,logger,config,logger,saml,realm,class,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,global,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,get,config,settings,final,saml,authenticator,authenticator,new,saml,authenticator,config,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,config,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1538170812;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.globalSettings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = CLOCK_SKEW.get(config.settings())__        final SamlAuthenticator authenticator = new SamlAuthenticator(clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,global,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,get,config,settings,final,saml,authenticator,authenticator,new,saml,authenticator,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1539615817;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.globalSettings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = CLOCK_SKEW.get(config.settings())__        final SamlAuthenticator authenticator = new SamlAuthenticator(clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,global,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,get,config,settings,final,saml,authenticator,authenticator,new,saml,authenticator,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1541476610;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.globalSettings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = config.getSetting(CLOCK_SKEW)__        final SamlAuthenticator authenticator = new SamlAuthenticator(clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,global,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,config,get,setting,final,saml,authenticator,authenticator,new,saml,authenticator,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1541642262;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.settings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = config.getSetting(CLOCK_SKEW)__        final SamlAuthenticator authenticator = new SamlAuthenticator(clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,config,get,setting,final,saml,authenticator,authenticator,new,saml,authenticator,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,                                    UserRoleMapper roleMapper) throws Exception;1548342301;Factory for SAML realm._This is not a constructor as it needs to initialise a number of components before delegating to_{@link #SamlRealm};public static SamlRealm create(RealmConfig config, SSLService sslService, ResourceWatcherService watcherService,_                                   UserRoleMapper roleMapper) throws Exception {_        SamlUtils.initialize(logger)___        if (TokenService.isTokenServiceEnabled(config.settings()) == false) {_            throw new IllegalStateException("SAML requires that the token service be enabled ("_                    + XPackSettings.TOKEN_SERVICE_ENABLED_SETTING.getKey() + ")")__        }__        final Tuple<AbstractReloadingMetadataResolver, Supplier<EntityDescriptor>> tuple_                = initializeResolver(logger, config, sslService, watcherService)__        final AbstractReloadingMetadataResolver metadataResolver = tuple.v1()__        final Supplier<EntityDescriptor> idpDescriptor = tuple.v2()___        final SpConfiguration serviceProvider = getSpConfiguration(config)___        final Clock clock = Clock.systemUTC()__        final IdpConfiguration idpConfiguration = getIdpConfiguration(config, metadataResolver, idpDescriptor)__        final TimeValue maxSkew = config.getSetting(CLOCK_SKEW)__        final SamlAuthenticator authenticator = new SamlAuthenticator(clock, idpConfiguration, serviceProvider, maxSkew)__        final SamlLogoutRequestHandler logoutHandler =_                new SamlLogoutRequestHandler(clock, idpConfiguration, serviceProvider, maxSkew)___        final SamlRealm realm = new SamlRealm(config, roleMapper, authenticator, logoutHandler, idpDescriptor, serviceProvider)___        _        realm.releasables.add(() -> metadataResolver.destroy())___        return realm__    };factory,for,saml,realm,this,is,not,a,constructor,as,it,needs,to,initialise,a,number,of,components,before,delegating,to,link,saml,realm;public,static,saml,realm,create,realm,config,config,sslservice,ssl,service,resource,watcher,service,watcher,service,user,role,mapper,role,mapper,throws,exception,saml,utils,initialize,logger,if,token,service,is,token,service,enabled,config,settings,false,throw,new,illegal,state,exception,saml,requires,that,the,token,service,be,enabled,xpack,settings,get,key,final,tuple,abstract,reloading,metadata,resolver,supplier,entity,descriptor,tuple,initialize,resolver,logger,config,ssl,service,watcher,service,final,abstract,reloading,metadata,resolver,metadata,resolver,tuple,v1,final,supplier,entity,descriptor,idp,descriptor,tuple,v2,final,sp,configuration,service,provider,get,sp,configuration,config,final,clock,clock,clock,system,utc,final,idp,configuration,idp,configuration,get,idp,configuration,config,metadata,resolver,idp,descriptor,final,time,value,max,skew,config,get,setting,final,saml,authenticator,authenticator,new,saml,authenticator,clock,idp,configuration,service,provider,max,skew,final,saml,logout,request,handler,logout,handler,new,saml,logout,request,handler,clock,idp,configuration,service,provider,max,skew,final,saml,realm,realm,new,saml,realm,config,role,mapper,authenticator,logout,handler,idp,descriptor,service,provider,realm,releasables,add,metadata,resolver,destroy,return,realm
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1524684173;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1527622193;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1528804324;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1531729807;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1533295538;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1535552903;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1535723122;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1538170812;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1539615817;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1541476610;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1541642262;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> public LogoutRequest buildLogoutRequest(NameID nameId, String session);1548342301;Creates a SAML {@link LogoutRequest Single LogOut request} for the provided session, if the_realm and IdP configuration support SLO. Otherwise returns {@code null}__@see SamlRealmSettings#IDP_SINGLE_LOGOUT;public LogoutRequest buildLogoutRequest(NameID nameId, String session) {_        if (useSingleLogout) {_            final LogoutRequest logoutRequest = new SamlLogoutRequestMessageBuilder(_                    Clock.systemUTC(), serviceProvider, idpDescriptor.get(), nameId, session).build()__            if (logoutRequest != null && logger.isTraceEnabled()) {_                logger.trace("Constructed SAML Logout Request: {}", SamlUtils.samlObjectToString(logoutRequest))__            }_            return logoutRequest__        } else {_            return null__        }__    };creates,a,saml,link,logout,request,single,log,out,request,for,the,provided,session,if,the,realm,and,id,p,configuration,support,slo,otherwise,returns,code,null,see,saml,realm,settings;public,logout,request,build,logout,request,name,id,name,id,string,session,if,use,single,logout,final,logout,request,logout,request,new,saml,logout,request,message,builder,clock,system,utc,service,provider,idp,descriptor,get,name,id,session,build,if,logout,request,null,logger,is,trace,enabled,logger,trace,constructed,saml,logout,request,saml,utils,saml,object,to,string,logout,request,return,logout,request,else,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1524684173;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1527622193;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1528804324;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1531729807;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1533295538;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1535552903;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1535723122;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1538170812;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1539615817;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1541476610;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1541642262;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
SamlRealm -> @Override     public AuthenticationToken token(ThreadContext threadContext);1548342301;Always returns {@code null} as there is no support for reading a SAML token out of a request__@see org.elasticsearch.xpack.security.action.saml.TransportSamlAuthenticateAction;@Override_    public AuthenticationToken token(ThreadContext threadContext) {_        return null__    };always,returns,code,null,as,there,is,no,support,for,reading,a,saml,token,out,of,a,request,see,org,elasticsearch,xpack,security,action,saml,transport,saml,authenticate,action;override,public,authentication,token,token,thread,context,thread,context,return,null
