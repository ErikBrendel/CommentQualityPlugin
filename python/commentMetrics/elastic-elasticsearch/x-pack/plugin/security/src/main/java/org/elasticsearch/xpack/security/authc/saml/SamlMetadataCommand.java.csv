# id;timestamp;commentText;codeText;commentWords;codeWords
SamlMetadataCommand -> private RealmConfig findRealm(Terminal terminal, OptionSet options, Environment env) throws UserException, IOException, Exception;1541476610;@TODO REALM-SETTINGS[TIM] This can be redone a lot now the realm settings are keyed by type;private RealmConfig findRealm(Terminal terminal, OptionSet options, Environment env) throws UserException, IOException, Exception {__        keyStoreWrapper = keyStoreFunction.apply(env)__        final Settings settings__        if (keyStoreWrapper != null) {_            _            keyStoreWrapper.decrypt(new char[0])___            final Settings.Builder settingsBuilder = Settings.builder()__            settingsBuilder.put(env.settings(), true)__            if (settingsBuilder.getSecureSettings() == null) {_                settingsBuilder.setSecureSettings(keyStoreWrapper)__            }_            settings = settingsBuilder.build()__        } else {_            settings = env.settings()__        }__        final Map<RealmConfig.RealmIdentifier, Settings> realms = RealmSettings.getRealmSettings(settings)__        if (options.has(realmSpec)) {_            final String name = realmSpec.value(options)__            final RealmConfig.RealmIdentifier identifier = new RealmConfig.RealmIdentifier(SamlRealmSettings.TYPE, name)__            final Settings realmSettings = realms.get(identifier)__            if (realmSettings == null) {_                throw new UserException(ExitCodes.CONFIG, "No such realm '" + name + "' defined in " + env.configFile())__            }_            if (isSamlRealm(identifier)) {_                return buildRealm(identifier, env, settings)__            } else {_                throw new UserException(ExitCodes.CONFIG, "Realm '" + name + "' is not a SAML realm (is '" + identifier.getType() + "')")__            }_        } else {_            final List<Map.Entry<RealmConfig.RealmIdentifier, Settings>> saml = realms.entrySet().stream()_                    .filter(entry -> isSamlRealm(entry.getKey()))_                    .collect(Collectors.toList())__            if (saml.isEmpty()) {_                throw new UserException(ExitCodes.CONFIG, "There is no SAML realm configured in " + env.configFile())__            }_            if (saml.size() > 1) {_                terminal.println("Using configuration in " + env.configFile())__                terminal.println("Found multiple SAML realms: "_                        + saml.stream().map(Map.Entry::getKey).map(Object::toString).collect(Collectors.joining(", ")))__                terminal.println("Use the -" + optionName(realmSpec) + " option to specify an explicit realm")__                throw new UserException(ExitCodes.CONFIG,_                        "Found multiple SAML realms, please specify one with '-" + optionName(realmSpec) + "'")__            }_            final Map.Entry<RealmConfig.RealmIdentifier, Settings> entry = saml.get(0)__            terminal.println("Building metadata for SAML realm " + entry.getKey())__            return buildRealm(entry.getKey(), env, settings)__        }_    };todo,realm,settings,tim,this,can,be,redone,a,lot,now,the,realm,settings,are,keyed,by,type;private,realm,config,find,realm,terminal,terminal,option,set,options,environment,env,throws,user,exception,ioexception,exception,key,store,wrapper,key,store,function,apply,env,final,settings,settings,if,key,store,wrapper,null,key,store,wrapper,decrypt,new,char,0,final,settings,builder,settings,builder,settings,builder,settings,builder,put,env,settings,true,if,settings,builder,get,secure,settings,null,settings,builder,set,secure,settings,key,store,wrapper,settings,settings,builder,build,else,settings,env,settings,final,map,realm,config,realm,identifier,settings,realms,realm,settings,get,realm,settings,settings,if,options,has,realm,spec,final,string,name,realm,spec,value,options,final,realm,config,realm,identifier,identifier,new,realm,config,realm,identifier,saml,realm,settings,type,name,final,settings,realm,settings,realms,get,identifier,if,realm,settings,null,throw,new,user,exception,exit,codes,config,no,such,realm,name,defined,in,env,config,file,if,is,saml,realm,identifier,return,build,realm,identifier,env,settings,else,throw,new,user,exception,exit,codes,config,realm,name,is,not,a,saml,realm,is,identifier,get,type,else,final,list,map,entry,realm,config,realm,identifier,settings,saml,realms,entry,set,stream,filter,entry,is,saml,realm,entry,get,key,collect,collectors,to,list,if,saml,is,empty,throw,new,user,exception,exit,codes,config,there,is,no,saml,realm,configured,in,env,config,file,if,saml,size,1,terminal,println,using,configuration,in,env,config,file,terminal,println,found,multiple,saml,realms,saml,stream,map,map,entry,get,key,map,object,to,string,collect,collectors,joining,terminal,println,use,the,option,name,realm,spec,option,to,specify,an,explicit,realm,throw,new,user,exception,exit,codes,config,found,multiple,saml,realms,please,specify,one,with,option,name,realm,spec,final,map,entry,realm,config,realm,identifier,settings,entry,saml,get,0,terminal,println,building,metadata,for,saml,realm,entry,get,key,return,build,realm,entry,get,key,env,settings
SamlMetadataCommand -> private RealmConfig findRealm(Terminal terminal, OptionSet options, Environment env) throws UserException, IOException, Exception;1541642262;@TODO REALM-SETTINGS[TIM] This can be redone a lot now the realm settings are keyed by type;private RealmConfig findRealm(Terminal terminal, OptionSet options, Environment env) throws UserException, IOException, Exception {__        keyStoreWrapper = keyStoreFunction.apply(env)__        final Settings settings__        if (keyStoreWrapper != null) {_            _            keyStoreWrapper.decrypt(new char[0])___            final Settings.Builder settingsBuilder = Settings.builder()__            settingsBuilder.put(env.settings(), true)__            if (settingsBuilder.getSecureSettings() == null) {_                settingsBuilder.setSecureSettings(keyStoreWrapper)__            }_            settings = settingsBuilder.build()__        } else {_            settings = env.settings()__        }__        final Map<RealmConfig.RealmIdentifier, Settings> realms = RealmSettings.getRealmSettings(settings)__        if (options.has(realmSpec)) {_            final String name = realmSpec.value(options)__            final RealmConfig.RealmIdentifier identifier = new RealmConfig.RealmIdentifier(SamlRealmSettings.TYPE, name)__            final Settings realmSettings = realms.get(identifier)__            if (realmSettings == null) {_                throw new UserException(ExitCodes.CONFIG, "No such realm '" + name + "' defined in " + env.configFile())__            }_            if (isSamlRealm(identifier)) {_                return buildRealm(identifier, env, settings)__            } else {_                throw new UserException(ExitCodes.CONFIG, "Realm '" + name + "' is not a SAML realm (is '" + identifier.getType() + "')")__            }_        } else {_            final List<Map.Entry<RealmConfig.RealmIdentifier, Settings>> saml = realms.entrySet().stream()_                    .filter(entry -> isSamlRealm(entry.getKey()))_                    .collect(Collectors.toList())__            if (saml.isEmpty()) {_                throw new UserException(ExitCodes.CONFIG, "There is no SAML realm configured in " + env.configFile())__            }_            if (saml.size() > 1) {_                terminal.println("Using configuration in " + env.configFile())__                terminal.println("Found multiple SAML realms: "_                        + saml.stream().map(Map.Entry::getKey).map(Object::toString).collect(Collectors.joining(", ")))__                terminal.println("Use the -" + optionName(realmSpec) + " option to specify an explicit realm")__                throw new UserException(ExitCodes.CONFIG,_                        "Found multiple SAML realms, please specify one with '-" + optionName(realmSpec) + "'")__            }_            final Map.Entry<RealmConfig.RealmIdentifier, Settings> entry = saml.get(0)__            terminal.println("Building metadata for SAML realm " + entry.getKey())__            return buildRealm(entry.getKey(), env, settings)__        }_    };todo,realm,settings,tim,this,can,be,redone,a,lot,now,the,realm,settings,are,keyed,by,type;private,realm,config,find,realm,terminal,terminal,option,set,options,environment,env,throws,user,exception,ioexception,exception,key,store,wrapper,key,store,function,apply,env,final,settings,settings,if,key,store,wrapper,null,key,store,wrapper,decrypt,new,char,0,final,settings,builder,settings,builder,settings,builder,settings,builder,put,env,settings,true,if,settings,builder,get,secure,settings,null,settings,builder,set,secure,settings,key,store,wrapper,settings,settings,builder,build,else,settings,env,settings,final,map,realm,config,realm,identifier,settings,realms,realm,settings,get,realm,settings,settings,if,options,has,realm,spec,final,string,name,realm,spec,value,options,final,realm,config,realm,identifier,identifier,new,realm,config,realm,identifier,saml,realm,settings,type,name,final,settings,realm,settings,realms,get,identifier,if,realm,settings,null,throw,new,user,exception,exit,codes,config,no,such,realm,name,defined,in,env,config,file,if,is,saml,realm,identifier,return,build,realm,identifier,env,settings,else,throw,new,user,exception,exit,codes,config,realm,name,is,not,a,saml,realm,is,identifier,get,type,else,final,list,map,entry,realm,config,realm,identifier,settings,saml,realms,entry,set,stream,filter,entry,is,saml,realm,entry,get,key,collect,collectors,to,list,if,saml,is,empty,throw,new,user,exception,exit,codes,config,there,is,no,saml,realm,configured,in,env,config,file,if,saml,size,1,terminal,println,using,configuration,in,env,config,file,terminal,println,found,multiple,saml,realms,saml,stream,map,map,entry,get,key,map,object,to,string,collect,collectors,joining,terminal,println,use,the,option,name,realm,spec,option,to,specify,an,explicit,realm,throw,new,user,exception,exit,codes,config,found,multiple,saml,realms,please,specify,one,with,option,name,realm,spec,final,map,entry,realm,config,realm,identifier,settings,entry,saml,get,0,terminal,println,building,metadata,for,saml,realm,entry,get,key,return,build,realm,entry,get,key,env,settings
SamlMetadataCommand -> private RealmConfig findRealm(Terminal terminal, OptionSet options, Environment env) throws UserException, IOException, Exception;1548831071;@TODO REALM-SETTINGS[TIM] This can be redone a lot now the realm settings are keyed by type;private RealmConfig findRealm(Terminal terminal, OptionSet options, Environment env) throws UserException, IOException, Exception {__        keyStoreWrapper = keyStoreFunction.apply(env)__        final Settings settings__        if (keyStoreWrapper != null) {_            _            keyStoreWrapper.decrypt(new char[0])___            final Settings.Builder settingsBuilder = Settings.builder()__            settingsBuilder.put(env.settings(), true)__            if (settingsBuilder.getSecureSettings() == null) {_                settingsBuilder.setSecureSettings(keyStoreWrapper)__            }_            settings = settingsBuilder.build()__        } else {_            settings = env.settings()__        }__        final Map<RealmConfig.RealmIdentifier, Settings> realms = RealmSettings.getRealmSettings(settings)__        if (options.has(realmSpec)) {_            final String name = realmSpec.value(options)__            final RealmConfig.RealmIdentifier identifier = new RealmConfig.RealmIdentifier(SamlRealmSettings.TYPE, name)__            final Settings realmSettings = realms.get(identifier)__            if (realmSettings == null) {_                throw new UserException(ExitCodes.CONFIG, "No such realm '" + name + "' defined in " + env.configFile())__            }_            if (isSamlRealm(identifier)) {_                return buildRealm(identifier, env, settings)__            } else {_                throw new UserException(ExitCodes.CONFIG, "Realm '" + name + "' is not a SAML realm (is '" + identifier.getType() + "')")__            }_        } else {_            final List<Map.Entry<RealmConfig.RealmIdentifier, Settings>> saml = realms.entrySet().stream()_                    .filter(entry -> isSamlRealm(entry.getKey()))_                    .collect(Collectors.toList())__            if (saml.isEmpty()) {_                throw new UserException(ExitCodes.CONFIG, "There is no SAML realm configured in " + env.configFile())__            }_            if (saml.size() > 1) {_                terminal.println("Using configuration in " + env.configFile())__                terminal.println("Found multiple SAML realms: "_                        + saml.stream().map(Map.Entry::getKey).map(Object::toString).collect(Collectors.joining(", ")))__                terminal.println("Use the -" + optionName(realmSpec) + " option to specify an explicit realm")__                throw new UserException(ExitCodes.CONFIG,_                        "Found multiple SAML realms, please specify one with '-" + optionName(realmSpec) + "'")__            }_            final Map.Entry<RealmConfig.RealmIdentifier, Settings> entry = saml.get(0)__            terminal.println("Building metadata for SAML realm " + entry.getKey())__            return buildRealm(entry.getKey(), env, settings)__        }_    };todo,realm,settings,tim,this,can,be,redone,a,lot,now,the,realm,settings,are,keyed,by,type;private,realm,config,find,realm,terminal,terminal,option,set,options,environment,env,throws,user,exception,ioexception,exception,key,store,wrapper,key,store,function,apply,env,final,settings,settings,if,key,store,wrapper,null,key,store,wrapper,decrypt,new,char,0,final,settings,builder,settings,builder,settings,builder,settings,builder,put,env,settings,true,if,settings,builder,get,secure,settings,null,settings,builder,set,secure,settings,key,store,wrapper,settings,settings,builder,build,else,settings,env,settings,final,map,realm,config,realm,identifier,settings,realms,realm,settings,get,realm,settings,settings,if,options,has,realm,spec,final,string,name,realm,spec,value,options,final,realm,config,realm,identifier,identifier,new,realm,config,realm,identifier,saml,realm,settings,type,name,final,settings,realm,settings,realms,get,identifier,if,realm,settings,null,throw,new,user,exception,exit,codes,config,no,such,realm,name,defined,in,env,config,file,if,is,saml,realm,identifier,return,build,realm,identifier,env,settings,else,throw,new,user,exception,exit,codes,config,realm,name,is,not,a,saml,realm,is,identifier,get,type,else,final,list,map,entry,realm,config,realm,identifier,settings,saml,realms,entry,set,stream,filter,entry,is,saml,realm,entry,get,key,collect,collectors,to,list,if,saml,is,empty,throw,new,user,exception,exit,codes,config,there,is,no,saml,realm,configured,in,env,config,file,if,saml,size,1,terminal,println,using,configuration,in,env,config,file,terminal,println,found,multiple,saml,realms,saml,stream,map,map,entry,get,key,map,object,to,string,collect,collectors,joining,terminal,println,use,the,option,name,realm,spec,option,to,specify,an,explicit,realm,throw,new,user,exception,exit,codes,config,found,multiple,saml,realms,please,specify,one,with,option,name,realm,spec,final,map,entry,realm,config,realm,identifier,settings,entry,saml,get,0,terminal,println,building,metadata,for,saml,realm,entry,get,key,return,build,realm,entry,get,key,env,settings
SamlMetadataCommand -> private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm);1524684173;Map of saml-attribute name to configuration-setting name;private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm) {_        Map<String, String> attributes = new LinkedHashMap<>()__        for (String a : attributeSpec.values(options)) {_            attributes.put(a, null)__        }_        final Settings attributeSettings = realm.settings().getByPrefix(SamlRealmSettings.AttributeSetting.ATTRIBUTES_PREFIX)__        for (String key : sorted(attributeSettings.keySet())) {_            final String attr = attributeSettings.get(key)__            attributes.put(attr, key)__        }_        return attributes__    };map,of,saml,attribute,name,to,configuration,setting,name;private,map,string,string,get,attribute,names,option,set,options,realm,config,realm,map,string,string,attributes,new,linked,hash,map,for,string,a,attribute,spec,values,options,attributes,put,a,null,final,settings,attribute,settings,realm,settings,get,by,prefix,saml,realm,settings,attribute,setting,for,string,key,sorted,attribute,settings,key,set,final,string,attr,attribute,settings,get,key,attributes,put,attr,key,return,attributes
SamlMetadataCommand -> private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm);1527622193;Map of saml-attribute name to configuration-setting name;private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm) {_        Map<String, String> attributes = new LinkedHashMap<>()__        for (String a : attributeSpec.values(options)) {_            attributes.put(a, null)__        }_        final Settings attributeSettings = realm.settings().getByPrefix(SamlRealmSettings.AttributeSetting.ATTRIBUTES_PREFIX)__        for (String key : sorted(attributeSettings.keySet())) {_            final String attr = attributeSettings.get(key)__            attributes.put(attr, key)__        }_        return attributes__    };map,of,saml,attribute,name,to,configuration,setting,name;private,map,string,string,get,attribute,names,option,set,options,realm,config,realm,map,string,string,attributes,new,linked,hash,map,for,string,a,attribute,spec,values,options,attributes,put,a,null,final,settings,attribute,settings,realm,settings,get,by,prefix,saml,realm,settings,attribute,setting,for,string,key,sorted,attribute,settings,key,set,final,string,attr,attribute,settings,get,key,attributes,put,attr,key,return,attributes
SamlMetadataCommand -> private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm);1540847035;Map of saml-attribute name to configuration-setting name;private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm) {_        Map<String, String> attributes = new LinkedHashMap<>()__        for (String a : attributeSpec.values(options)) {_            attributes.put(a, null)__        }_        final Settings attributeSettings = realm.settings().getByPrefix(SamlRealmSettings.AttributeSetting.ATTRIBUTES_PREFIX)__        for (String key : sorted(attributeSettings.keySet())) {_            final String attr = attributeSettings.get(key)__            attributes.put(attr, key)__        }_        return attributes__    };map,of,saml,attribute,name,to,configuration,setting,name;private,map,string,string,get,attribute,names,option,set,options,realm,config,realm,map,string,string,attributes,new,linked,hash,map,for,string,a,attribute,spec,values,options,attributes,put,a,null,final,settings,attribute,settings,realm,settings,get,by,prefix,saml,realm,settings,attribute,setting,for,string,key,sorted,attribute,settings,key,set,final,string,attr,attribute,settings,get,key,attributes,put,attr,key,return,attributes
SamlMetadataCommand -> private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm);1541476610;Map of saml-attribute name to configuration-setting name;private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm) {_        Map<String, String> attributes = new LinkedHashMap<>()__        for (String a : attributeSpec.values(options)) {_            attributes.put(a, null)__        }_        final String prefix = RealmSettings.realmSettingPrefix(realm.identifier()) + SamlRealmSettings.AttributeSetting.ATTRIBUTES_PREFIX__        final Settings attributeSettings = realm.globalSettings().getByPrefix(prefix)__        for (String key : sorted(attributeSettings.keySet())) {_            final String attr = attributeSettings.get(key)__            attributes.put(attr, key)__        }_        return attributes__    };map,of,saml,attribute,name,to,configuration,setting,name;private,map,string,string,get,attribute,names,option,set,options,realm,config,realm,map,string,string,attributes,new,linked,hash,map,for,string,a,attribute,spec,values,options,attributes,put,a,null,final,string,prefix,realm,settings,realm,setting,prefix,realm,identifier,saml,realm,settings,attribute,setting,final,settings,attribute,settings,realm,global,settings,get,by,prefix,prefix,for,string,key,sorted,attribute,settings,key,set,final,string,attr,attribute,settings,get,key,attributes,put,attr,key,return,attributes
SamlMetadataCommand -> private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm);1541642262;Map of saml-attribute name to configuration-setting name;private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm) {_        Map<String, String> attributes = new LinkedHashMap<>()__        for (String a : attributeSpec.values(options)) {_            attributes.put(a, null)__        }_        final String prefix = RealmSettings.realmSettingPrefix(realm.identifier()) + SamlRealmSettings.AttributeSetting.ATTRIBUTES_PREFIX__        final Settings attributeSettings = realm.settings().getByPrefix(prefix)__        for (String key : sorted(attributeSettings.keySet())) {_            final String attr = attributeSettings.get(key)__            attributes.put(attr, key)__        }_        return attributes__    };map,of,saml,attribute,name,to,configuration,setting,name;private,map,string,string,get,attribute,names,option,set,options,realm,config,realm,map,string,string,attributes,new,linked,hash,map,for,string,a,attribute,spec,values,options,attributes,put,a,null,final,string,prefix,realm,settings,realm,setting,prefix,realm,identifier,saml,realm,settings,attribute,setting,final,settings,attribute,settings,realm,settings,get,by,prefix,prefix,for,string,key,sorted,attribute,settings,key,set,final,string,attr,attribute,settings,get,key,attributes,put,attr,key,return,attributes
SamlMetadataCommand -> private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm);1548831071;Map of saml-attribute name to configuration-setting name;private Map<String, String> getAttributeNames(OptionSet options, RealmConfig realm) {_        Map<String, String> attributes = new LinkedHashMap<>()__        for (String a : attributeSpec.values(options)) {_            attributes.put(a, null)__        }_        final String prefix = RealmSettings.realmSettingPrefix(realm.identifier()) + SamlRealmSettings.AttributeSetting.ATTRIBUTES_PREFIX__        final Settings attributeSettings = realm.settings().getByPrefix(prefix)__        for (String key : sorted(attributeSettings.keySet())) {_            final String attr = attributeSettings.get(key)__            attributes.put(attr, key)__        }_        return attributes__    };map,of,saml,attribute,name,to,configuration,setting,name;private,map,string,string,get,attribute,names,option,set,options,realm,config,realm,map,string,string,attributes,new,linked,hash,map,for,string,a,attribute,spec,values,options,attributes,put,a,null,final,string,prefix,realm,settings,realm,setting,prefix,realm,identifier,saml,realm,settings,attribute,setting,final,settings,attribute,settings,realm,settings,get,by,prefix,prefix,for,string,key,sorted,attribute,settings,key,set,final,string,attr,attribute,settings,get,key,attributes,put,attr,key,return,attributes
