# id;timestamp;commentText;codeText;commentWords;codeWords
SamlRequestHandler -> protected void checkIdpSignature(CheckedFunction<Credential, Boolean, Exception> check, String signatureText);1524684173;Tests whether the provided function returns {@code true} for any of the IdP's signing credentials._@throws ElasticsearchSecurityException - A SAML exception if not matching credential is found.;protected void checkIdpSignature(CheckedFunction<Credential, Boolean, Exception> check, String signatureText) {_        final Predicate<Credential> predicate = credential -> {_            try {_                return check.apply(credential)__            } catch (SignatureException | SecurityException e) {_                logger.debug(() -> new ParameterizedMessage("SAML Signature [{}] does not match credentials [{}] [{}] -- {}",_                        signatureText, credential.getEntityId(), credential.getPublicKey(), e))__                logger.trace("SAML Signature failure caused by", e)__                return false__            } catch (Exception e) {_                logger.warn("Exception while attempting to validate SAML Signature", e)__                return false__            }_        }__        final List<Credential> credentials = idp.getSigningCredentials()__        if (credentials.stream().anyMatch(predicate) == false) {_            throw samlSignatureException(credentials, signatureText)__        }_    };tests,whether,the,provided,function,returns,code,true,for,any,of,the,id,p,s,signing,credentials,throws,elasticsearch,security,exception,a,saml,exception,if,not,matching,credential,is,found;protected,void,check,idp,signature,checked,function,credential,boolean,exception,check,string,signature,text,final,predicate,credential,predicate,credential,try,return,check,apply,credential,catch,signature,exception,security,exception,e,logger,debug,new,parameterized,message,saml,signature,does,not,match,credentials,signature,text,credential,get,entity,id,credential,get,public,key,e,logger,trace,saml,signature,failure,caused,by,e,return,false,catch,exception,e,logger,warn,exception,while,attempting,to,validate,saml,signature,e,return,false,final,list,credential,credentials,idp,get,signing,credentials,if,credentials,stream,any,match,predicate,false,throw,saml,signature,exception,credentials,signature,text
SamlRequestHandler -> protected void checkIdpSignature(CheckedFunction<Credential, Boolean, Exception> check, String signatureText);1528762805;Tests whether the provided function returns {@code true} for any of the IdP's signing credentials._@throws ElasticsearchSecurityException - A SAML exception if not matching credential is found.;protected void checkIdpSignature(CheckedFunction<Credential, Boolean, Exception> check, String signatureText) {_        final Predicate<Credential> predicate = credential -> {_            try {_                return check.apply(credential)__            } catch (SignatureException | SecurityException e) {_                logger.debug(() -> new ParameterizedMessage("SAML Signature [{}] does not match credentials [{}] [{}] -- {}",_                        signatureText, credential.getEntityId(), credential.getPublicKey(), e))__                logger.trace("SAML Signature failure caused by", e)__                return false__            } catch (Exception e) {_                logger.warn("Exception while attempting to validate SAML Signature", e)__                return false__            }_        }__        final List<Credential> credentials = idp.getSigningCredentials()__        if (credentials.stream().anyMatch(predicate) == false) {_            throw samlSignatureException(credentials, signatureText)__        }_    };tests,whether,the,provided,function,returns,code,true,for,any,of,the,id,p,s,signing,credentials,throws,elasticsearch,security,exception,a,saml,exception,if,not,matching,credential,is,found;protected,void,check,idp,signature,checked,function,credential,boolean,exception,check,string,signature,text,final,predicate,credential,predicate,credential,try,return,check,apply,credential,catch,signature,exception,security,exception,e,logger,debug,new,parameterized,message,saml,signature,does,not,match,credentials,signature,text,credential,get,entity,id,credential,get,public,key,e,logger,trace,saml,signature,failure,caused,by,e,return,false,catch,exception,e,logger,warn,exception,while,attempting,to,validate,saml,signature,e,return,false,final,list,credential,credentials,idp,get,signing,credentials,if,credentials,stream,any,match,predicate,false,throw,saml,signature,exception,credentials,signature,text
SamlRequestHandler -> protected void checkIdpSignature(CheckedFunction<Credential, Boolean, Exception> check, String signatureText);1538170812;Tests whether the provided function returns {@code true} for any of the IdP's signing credentials._@throws ElasticsearchSecurityException - A SAML exception if not matching credential is found.;protected void checkIdpSignature(CheckedFunction<Credential, Boolean, Exception> check, String signatureText) {_        final Predicate<Credential> predicate = credential -> {_            try {_                return check.apply(credential)__            } catch (SignatureException | SecurityException e) {_                logger.debug(() -> new ParameterizedMessage("SAML Signature [{}] does not match credentials [{}] [{}] -- {}",_                        signatureText, credential.getEntityId(), credential.getPublicKey(), e))__                logger.trace("SAML Signature failure caused by", e)__                return false__            } catch (Exception e) {_                logger.warn("Exception while attempting to validate SAML Signature", e)__                return false__            }_        }__        final List<Credential> credentials = idp.getSigningCredentials()__        if (credentials.stream().anyMatch(predicate) == false) {_            throw samlSignatureException(credentials, signatureText)__        }_    };tests,whether,the,provided,function,returns,code,true,for,any,of,the,id,p,s,signing,credentials,throws,elasticsearch,security,exception,a,saml,exception,if,not,matching,credential,is,found;protected,void,check,idp,signature,checked,function,credential,boolean,exception,check,string,signature,text,final,predicate,credential,predicate,credential,try,return,check,apply,credential,catch,signature,exception,security,exception,e,logger,debug,new,parameterized,message,saml,signature,does,not,match,credentials,signature,text,credential,get,entity,id,credential,get,public,key,e,logger,trace,saml,signature,failure,caused,by,e,return,false,catch,exception,e,logger,warn,exception,while,attempting,to,validate,saml,signature,e,return,false,final,list,credential,credentials,idp,get,signing,credentials,if,credentials,stream,any,match,predicate,false,throw,saml,signature,exception,credentials,signature,text
SamlRequestHandler -> protected Instant toInstant(DateTime dateTime);1524684173;Converts a Joda DateTime into a Java Instant;protected Instant toInstant(DateTime dateTime) {_        if (dateTime == null) {_            return null__        }_        return Instant.ofEpochMilli(dateTime.getMillis())__    };converts,a,joda,date,time,into,a,java,instant;protected,instant,to,instant,date,time,date,time,if,date,time,null,return,null,return,instant,of,epoch,milli,date,time,get,millis
SamlRequestHandler -> protected Instant toInstant(DateTime dateTime);1528762805;Converts a Joda DateTime into a Java Instant;protected Instant toInstant(DateTime dateTime) {_        if (dateTime == null) {_            return null__        }_        return Instant.ofEpochMilli(dateTime.getMillis())__    };converts,a,joda,date,time,into,a,java,instant;protected,instant,to,instant,date,time,date,time,if,date,time,null,return,null,return,instant,of,epoch,milli,date,time,get,millis
SamlRequestHandler -> protected Instant toInstant(DateTime dateTime);1538170812;Converts a Joda DateTime into a Java Instant;protected Instant toInstant(DateTime dateTime) {_        if (dateTime == null) {_            return null__        }_        return Instant.ofEpochMilli(dateTime.getMillis())__    };converts,a,joda,date,time,into,a,java,instant;protected,instant,to,instant,date,time,date,time,if,date,time,null,return,null,return,instant,of,epoch,milli,date,time,get,millis
SamlRequestHandler -> private ElasticsearchSecurityException samlSignatureException(List<Credential> credentials, String signature, Exception cause);1524684173;Constructs a SAML specific exception with a consistent message regarding SAML Signature validation failures;private ElasticsearchSecurityException samlSignatureException(List<Credential> credentials, String signature, Exception cause) {_        logger.warn("The XML Signature of this SAML message cannot be validated. Please verify that the saml realm uses the correct SAML" +_                "metadata file/URL for this Identity Provider")__        final String msg = "SAML Signature [{}] could not be validated against [{}]"__        return samlException(msg, cause, signature, describeCredentials(credentials))__    };constructs,a,saml,specific,exception,with,a,consistent,message,regarding,saml,signature,validation,failures;private,elasticsearch,security,exception,saml,signature,exception,list,credential,credentials,string,signature,exception,cause,logger,warn,the,xml,signature,of,this,saml,message,cannot,be,validated,please,verify,that,the,saml,realm,uses,the,correct,saml,metadata,file,url,for,this,identity,provider,final,string,msg,saml,signature,could,not,be,validated,against,return,saml,exception,msg,cause,signature,describe,credentials,credentials
SamlRequestHandler -> private ElasticsearchSecurityException samlSignatureException(List<Credential> credentials, String signature, Exception cause);1528762805;Constructs a SAML specific exception with a consistent message regarding SAML Signature validation failures;private ElasticsearchSecurityException samlSignatureException(List<Credential> credentials, String signature, Exception cause) {_        logger.warn("The XML Signature of this SAML message cannot be validated. Please verify that the saml realm uses the correct SAML" +_                "metadata file/URL for this Identity Provider")__        final String msg = "SAML Signature [{}] could not be validated against [{}]"__        return samlException(msg, cause, signature, describeCredentials(credentials))__    };constructs,a,saml,specific,exception,with,a,consistent,message,regarding,saml,signature,validation,failures;private,elasticsearch,security,exception,saml,signature,exception,list,credential,credentials,string,signature,exception,cause,logger,warn,the,xml,signature,of,this,saml,message,cannot,be,validated,please,verify,that,the,saml,realm,uses,the,correct,saml,metadata,file,url,for,this,identity,provider,final,string,msg,saml,signature,could,not,be,validated,against,return,saml,exception,msg,cause,signature,describe,credentials,credentials
SamlRequestHandler -> private ElasticsearchSecurityException samlSignatureException(List<Credential> credentials, String signature, Exception cause);1538170812;Constructs a SAML specific exception with a consistent message regarding SAML Signature validation failures;private ElasticsearchSecurityException samlSignatureException(List<Credential> credentials, String signature, Exception cause) {_        logger.warn("The XML Signature of this SAML message cannot be validated. Please verify that the saml realm uses the correct SAML" +_                "metadata file/URL for this Identity Provider")__        final String msg = "SAML Signature [{}] could not be validated against [{}]"__        return samlException(msg, cause, signature, describeCredentials(credentials))__    };constructs,a,saml,specific,exception,with,a,consistent,message,regarding,saml,signature,validation,failures;private,elasticsearch,security,exception,saml,signature,exception,list,credential,credentials,string,signature,exception,cause,logger,warn,the,xml,signature,of,this,saml,message,cannot,be,validated,please,verify,that,the,saml,realm,uses,the,correct,saml,metadata,file,url,for,this,identity,provider,final,string,msg,saml,signature,could,not,be,validated,against,return,saml,exception,msg,cause,signature,describe,credentials,credentials
