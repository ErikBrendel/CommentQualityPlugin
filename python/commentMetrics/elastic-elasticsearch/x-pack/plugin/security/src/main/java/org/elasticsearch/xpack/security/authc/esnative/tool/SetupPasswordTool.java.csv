# id;timestamp;commentText;codeText;commentWords;codeWords
SetupPasswordTool -> SetupCommand -> void changePasswords(CheckedFunction<String, SecureString, UserException> passwordFn,                              CheckedBiConsumer<String, SecureString, Exception> successCallback, Terminal terminal) throws Exception;1524684173;Collects passwords for all the users, then issues set requests. Fails on the_first failed request. In this case rerun the tool to redo all the operations.__@param passwordFn      Function to generate or prompt for each user's password._@param successCallback Callback for each successful operation;void changePasswords(CheckedFunction<String, SecureString, UserException> passwordFn,_                             CheckedBiConsumer<String, SecureString, Exception> successCallback, Terminal terminal) throws Exception {_            Map<String, SecureString> passwordsMap = new HashMap<>(USERS.size())__            try {_                for (String user : USERS) {_                    passwordsMap.put(user, passwordFn.apply(user))__                }_                _                Map.Entry<String, SecureString> superUserEntry = null__                for (Map.Entry<String, SecureString> entry : passwordsMap.entrySet()) {_                    if (entry.getKey().equals(elasticUser)) {_                        superUserEntry = entry__                        continue__                    }_                    changeUserPassword(entry.getKey(), entry.getValue(), terminal)__                    successCallback.accept(entry.getKey(), entry.getValue())__                }_                _                if (superUserEntry != null) {_                    changeUserPassword(superUserEntry.getKey(), superUserEntry.getValue(), terminal)__                    successCallback.accept(superUserEntry.getKey(), superUserEntry.getValue())__                }_            } finally {_                passwordsMap.forEach((user, pass) -> pass.close())__            }_        };collects,passwords,for,all,the,users,then,issues,set,requests,fails,on,the,first,failed,request,in,this,case,rerun,the,tool,to,redo,all,the,operations,param,password,fn,function,to,generate,or,prompt,for,each,user,s,password,param,success,callback,callback,for,each,successful,operation;void,change,passwords,checked,function,string,secure,string,user,exception,password,fn,checked,bi,consumer,string,secure,string,exception,success,callback,terminal,terminal,throws,exception,map,string,secure,string,passwords,map,new,hash,map,users,size,try,for,string,user,users,passwords,map,put,user,password,fn,apply,user,map,entry,string,secure,string,super,user,entry,null,for,map,entry,string,secure,string,entry,passwords,map,entry,set,if,entry,get,key,equals,elastic,user,super,user,entry,entry,continue,change,user,password,entry,get,key,entry,get,value,terminal,success,callback,accept,entry,get,key,entry,get,value,if,super,user,entry,null,change,user,password,super,user,entry,get,key,super,user,entry,get,value,terminal,success,callback,accept,super,user,entry,get,key,super,user,entry,get,value,finally,passwords,map,for,each,user,pass,pass,close
SetupPasswordTool -> SetupCommand -> void changePasswords(CheckedFunction<String, SecureString, UserException> passwordFn,                              CheckedBiConsumer<String, SecureString, Exception> successCallback, Terminal terminal) throws Exception;1527622193;Collects passwords for all the users, then issues set requests. Fails on the_first failed request. In this case rerun the tool to redo all the operations.__@param passwordFn      Function to generate or prompt for each user's password._@param successCallback Callback for each successful operation;void changePasswords(CheckedFunction<String, SecureString, UserException> passwordFn,_                             CheckedBiConsumer<String, SecureString, Exception> successCallback, Terminal terminal) throws Exception {_            Map<String, SecureString> passwordsMap = new HashMap<>(USERS.size())__            try {_                for (String user : USERS) {_                    passwordsMap.put(user, passwordFn.apply(user))__                }_                _                Map.Entry<String, SecureString> superUserEntry = null__                for (Map.Entry<String, SecureString> entry : passwordsMap.entrySet()) {_                    if (entry.getKey().equals(elasticUser)) {_                        superUserEntry = entry__                        continue__                    }_                    changeUserPassword(entry.getKey(), entry.getValue(), terminal)__                    successCallback.accept(entry.getKey(), entry.getValue())__                }_                _                if (superUserEntry != null) {_                    changeUserPassword(superUserEntry.getKey(), superUserEntry.getValue(), terminal)__                    successCallback.accept(superUserEntry.getKey(), superUserEntry.getValue())__                }_            } finally {_                passwordsMap.forEach((user, pass) -> pass.close())__            }_        };collects,passwords,for,all,the,users,then,issues,set,requests,fails,on,the,first,failed,request,in,this,case,rerun,the,tool,to,redo,all,the,operations,param,password,fn,function,to,generate,or,prompt,for,each,user,s,password,param,success,callback,callback,for,each,successful,operation;void,change,passwords,checked,function,string,secure,string,user,exception,password,fn,checked,bi,consumer,string,secure,string,exception,success,callback,terminal,terminal,throws,exception,map,string,secure,string,passwords,map,new,hash,map,users,size,try,for,string,user,users,passwords,map,put,user,password,fn,apply,user,map,entry,string,secure,string,super,user,entry,null,for,map,entry,string,secure,string,entry,passwords,map,entry,set,if,entry,get,key,equals,elastic,user,super,user,entry,entry,continue,change,user,password,entry,get,key,entry,get,value,terminal,success,callback,accept,entry,get,key,entry,get,value,if,super,user,entry,null,change,user,password,super,user,entry,get,key,super,user,entry,get,value,terminal,success,callback,accept,super,user,entry,get,key,super,user,entry,get,value,finally,passwords,map,for,each,user,pass,pass,close
SetupPasswordTool -> SetupCommand -> void changePasswords(CheckedFunction<String, SecureString, UserException> passwordFn,                              CheckedBiConsumer<String, SecureString, Exception> successCallback, Terminal terminal) throws Exception;1535383145;Collects passwords for all the users, then issues set requests. Fails on the_first failed request. In this case rerun the tool to redo all the operations.__@param passwordFn      Function to generate or prompt for each user's password._@param successCallback Callback for each successful operation;void changePasswords(CheckedFunction<String, SecureString, UserException> passwordFn,_                             CheckedBiConsumer<String, SecureString, Exception> successCallback, Terminal terminal) throws Exception {_            Map<String, SecureString> passwordsMap = new HashMap<>(USERS.size())__            try {_                for (String user : USERS) {_                    passwordsMap.put(user, passwordFn.apply(user))__                }_                _                Map.Entry<String, SecureString> superUserEntry = null__                for (Map.Entry<String, SecureString> entry : passwordsMap.entrySet()) {_                    if (entry.getKey().equals(elasticUser)) {_                        superUserEntry = entry__                        continue__                    }_                    changeUserPassword(entry.getKey(), entry.getValue(), terminal)__                    successCallback.accept(entry.getKey(), entry.getValue())__                }_                _                if (superUserEntry != null) {_                    changeUserPassword(superUserEntry.getKey(), superUserEntry.getValue(), terminal)__                    successCallback.accept(superUserEntry.getKey(), superUserEntry.getValue())__                }_            } finally {_                passwordsMap.forEach((user, pass) -> pass.close())__            }_        };collects,passwords,for,all,the,users,then,issues,set,requests,fails,on,the,first,failed,request,in,this,case,rerun,the,tool,to,redo,all,the,operations,param,password,fn,function,to,generate,or,prompt,for,each,user,s,password,param,success,callback,callback,for,each,successful,operation;void,change,passwords,checked,function,string,secure,string,user,exception,password,fn,checked,bi,consumer,string,secure,string,exception,success,callback,terminal,terminal,throws,exception,map,string,secure,string,passwords,map,new,hash,map,users,size,try,for,string,user,users,passwords,map,put,user,password,fn,apply,user,map,entry,string,secure,string,super,user,entry,null,for,map,entry,string,secure,string,entry,passwords,map,entry,set,if,entry,get,key,equals,elastic,user,super,user,entry,entry,continue,change,user,password,entry,get,key,entry,get,value,terminal,success,callback,accept,entry,get,key,entry,get,value,if,super,user,entry,null,change,user,password,super,user,entry,get,key,super,user,entry,get,value,terminal,success,callback,accept,super,user,entry,get,key,super,user,entry,get,value,finally,passwords,map,for,each,user,pass,pass,close
SetupPasswordTool -> SetupCommand -> void changePasswords(CheckedFunction<String, SecureString, UserException> passwordFn,                              CheckedBiConsumer<String, SecureString, Exception> successCallback, Terminal terminal) throws Exception;1540486836;Collects passwords for all the users, then issues set requests. Fails on the_first failed request. In this case rerun the tool to redo all the operations.__@param passwordFn      Function to generate or prompt for each user's password._@param successCallback Callback for each successful operation;void changePasswords(CheckedFunction<String, SecureString, UserException> passwordFn,_                             CheckedBiConsumer<String, SecureString, Exception> successCallback, Terminal terminal) throws Exception {_            Map<String, SecureString> passwordsMap = new HashMap<>(USERS.size())__            try {_                for (String user : USERS) {_                    passwordsMap.put(user, passwordFn.apply(user))__                }_                _                Map.Entry<String, SecureString> superUserEntry = null__                for (Map.Entry<String, SecureString> entry : passwordsMap.entrySet()) {_                    if (entry.getKey().equals(elasticUser)) {_                        superUserEntry = entry__                        continue__                    }_                    changeUserPassword(entry.getKey(), entry.getValue(), terminal)__                    successCallback.accept(entry.getKey(), entry.getValue())__                }_                _                if (superUserEntry != null) {_                    changeUserPassword(superUserEntry.getKey(), superUserEntry.getValue(), terminal)__                    successCallback.accept(superUserEntry.getKey(), superUserEntry.getValue())__                }_            } finally {_                passwordsMap.forEach((user, pass) -> pass.close())__            }_        };collects,passwords,for,all,the,users,then,issues,set,requests,fails,on,the,first,failed,request,in,this,case,rerun,the,tool,to,redo,all,the,operations,param,password,fn,function,to,generate,or,prompt,for,each,user,s,password,param,success,callback,callback,for,each,successful,operation;void,change,passwords,checked,function,string,secure,string,user,exception,password,fn,checked,bi,consumer,string,secure,string,exception,success,callback,terminal,terminal,throws,exception,map,string,secure,string,passwords,map,new,hash,map,users,size,try,for,string,user,users,passwords,map,put,user,password,fn,apply,user,map,entry,string,secure,string,super,user,entry,null,for,map,entry,string,secure,string,entry,passwords,map,entry,set,if,entry,get,key,equals,elastic,user,super,user,entry,entry,continue,change,user,password,entry,get,key,entry,get,value,terminal,success,callback,accept,entry,get,key,entry,get,value,if,super,user,entry,null,change,user,password,super,user,entry,get,key,super,user,entry,get,value,terminal,success,callback,accept,super,user,entry,get,key,super,user,entry,get,value,finally,passwords,map,for,each,user,pass,pass,close
SetupPasswordTool -> SetupCommand -> void changePasswords(CheckedFunction<String, SecureString, UserException> passwordFn,                              CheckedBiConsumer<String, SecureString, Exception> successCallback, Terminal terminal) throws Exception;1544519590;Collects passwords for all the users, then issues set requests. Fails on the_first failed request. In this case rerun the tool to redo all the operations.__@param passwordFn      Function to generate or prompt for each user's password._@param successCallback Callback for each successful operation;void changePasswords(CheckedFunction<String, SecureString, UserException> passwordFn,_                             CheckedBiConsumer<String, SecureString, Exception> successCallback, Terminal terminal) throws Exception {_            Map<String, SecureString> passwordsMap = new HashMap<>(USERS.size())__            try {_                for (String user : USERS) {_                    passwordsMap.put(user, passwordFn.apply(user))__                }_                _                Map.Entry<String, SecureString> superUserEntry = null__                for (Map.Entry<String, SecureString> entry : passwordsMap.entrySet()) {_                    if (entry.getKey().equals(elasticUser)) {_                        superUserEntry = entry__                        continue__                    }_                    changeUserPassword(entry.getKey(), entry.getValue(), terminal)__                    successCallback.accept(entry.getKey(), entry.getValue())__                }_                _                if (superUserEntry != null) {_                    changeUserPassword(superUserEntry.getKey(), superUserEntry.getValue(), terminal)__                    successCallback.accept(superUserEntry.getKey(), superUserEntry.getValue())__                }_            } finally {_                passwordsMap.forEach((user, pass) -> pass.close())__            }_        };collects,passwords,for,all,the,users,then,issues,set,requests,fails,on,the,first,failed,request,in,this,case,rerun,the,tool,to,redo,all,the,operations,param,password,fn,function,to,generate,or,prompt,for,each,user,s,password,param,success,callback,callback,for,each,successful,operation;void,change,passwords,checked,function,string,secure,string,user,exception,password,fn,checked,bi,consumer,string,secure,string,exception,success,callback,terminal,terminal,throws,exception,map,string,secure,string,passwords,map,new,hash,map,users,size,try,for,string,user,users,passwords,map,put,user,password,fn,apply,user,map,entry,string,secure,string,super,user,entry,null,for,map,entry,string,secure,string,entry,passwords,map,entry,set,if,entry,get,key,equals,elastic,user,super,user,entry,entry,continue,change,user,password,entry,get,key,entry,get,value,terminal,success,callback,accept,entry,get,key,entry,get,value,if,super,user,entry,null,change,user,password,super,user,entry,get,key,super,user,entry,get,value,terminal,success,callback,accept,super,user,entry,get,key,super,user,entry,get,value,finally,passwords,map,for,each,user,pass,pass,close
SetupPasswordTool -> SetupCommand -> void checkElasticKeystorePasswordValid(Terminal terminal, Environment env) throws Exception;1524684173;Validates the bootstrap password from the local keystore by making an_'_authenticate' call. Returns silently if server is reachable and password is_valid. Throws {@link UserException} otherwise.__@param terminal where to write verbose info.;void checkElasticKeystorePasswordValid(Terminal terminal, Environment env) throws Exception {_            URL route = createURL(url, "/_xpack/security/_authenticate", "?pretty")__            terminal.println(Verbosity.VERBOSE, "")__            terminal.println(Verbosity.VERBOSE, "Testing if bootstrap password is valid for " + route.toString())__            try {_                final HttpResponse httpResponse = client.execute("GET", route, elasticUser, elasticUserPassword, () -> null,_                        is -> responseBuilder(is, terminal))__                final int httpCode = httpResponse.getHttpStatus()___                _                if (httpCode == HttpURLConnection.HTTP_UNAUTHORIZED) {_                    terminal.println("")__                    terminal.println("Failed to authenticate user '" + elasticUser + "' against " + route.toString())__                    terminal.println("Possible causes include:")__                    terminal.println(" * The password for the '" + elasticUser + "' user has already been changed on this cluster")__                    terminal.println(" * Your elasticsearch node is running against a different keystore")__                    terminal.println("   This tool used the keystore at " + KeyStoreWrapper.keystorePath(env.configFile()))__                    terminal.println("")__                    throw new UserException(ExitCodes.CONFIG, "Failed to verify bootstrap password")__                } else if (httpCode != HttpURLConnection.HTTP_OK) {_                    terminal.println("")__                    terminal.println("Unexpected response code [" + httpCode + "] from calling GET " + route.toString())__                    XPackSecurityFeatureConfig xPackSecurityFeatureConfig = getXPackSecurityConfig(terminal)__                    if (xPackSecurityFeatureConfig.isAvailable == false) {_                        terminal.println("It doesn't look like the X-Pack security feature is available on this Elasticsearch node.")__                        terminal.println("Please check if you have installed a license that allows access to X-Pack Security feature.")__                        terminal.println("")__                        throw new UserException(ExitCodes.CONFIG, "X-Pack Security is not available.")__                    }_                    if (xPackSecurityFeatureConfig.isEnabled == false) {_                        terminal.println("It doesn't look like the X-Pack security feature is enabled on this Elasticsearch node.")__                        terminal.println("Please check if you have enabled X-Pack security in your elasticsearch.yml configuration file.")__                        terminal.println("")__                        throw new UserException(ExitCodes.CONFIG, "X-Pack Security is disabled by configuration.")__                    }_                    terminal.println("X-Pack security feature is available and enabled on this Elasticsearch node.")__                    terminal.println("Possible causes include:")__                    terminal.println(" * The relative path of the URL is incorrect. Is there a proxy in-between?")__                    terminal.println(" * The protocol (http/https) does not match the port.")__                    terminal.println(" * Is this really an Elasticsearch server?")__                    terminal.println("")__                    throw new UserException(ExitCodes.CONFIG, "Unknown error")__                }_            } catch (SSLException e) {_                terminal.println("")__                terminal.println("SSL connection to " + route.toString() + " failed: " + e.getMessage())__                terminal.println("Please check the elasticsearch SSL settings under " + XPackSettings.HTTP_SSL_PREFIX)__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.CONFIG,_                        "Failed to establish SSL connection to elasticsearch at " + route.toString() + ". ", e)__            } catch (IOException e) {_                terminal.println("")__                terminal.println("Connection failure to: " + route.toString() + " failed: " + e.getMessage())__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.CONFIG,_                        "Failed to connect to elasticsearch at " + route.toString() + ". Is the URL correct and elasticsearch running?", e)__            }_        };validates,the,bootstrap,password,from,the,local,keystore,by,making,an,call,returns,silently,if,server,is,reachable,and,password,is,valid,throws,link,user,exception,otherwise,param,terminal,where,to,write,verbose,info;void,check,elastic,keystore,password,valid,terminal,terminal,environment,env,throws,exception,url,route,create,url,url,security,pretty,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,testing,if,bootstrap,password,is,valid,for,route,to,string,try,final,http,response,http,response,client,execute,get,route,elastic,user,elastic,user,password,null,is,response,builder,is,terminal,final,int,http,code,http,response,get,http,status,if,http,code,http,urlconnection,terminal,println,terminal,println,failed,to,authenticate,user,elastic,user,against,route,to,string,terminal,println,possible,causes,include,terminal,println,the,password,for,the,elastic,user,user,has,already,been,changed,on,this,cluster,terminal,println,your,elasticsearch,node,is,running,against,a,different,keystore,terminal,println,this,tool,used,the,keystore,at,key,store,wrapper,keystore,path,env,config,file,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,verify,bootstrap,password,else,if,http,code,http,urlconnection,terminal,println,terminal,println,unexpected,response,code,http,code,from,calling,get,route,to,string,xpack,security,feature,config,x,pack,security,feature,config,get,xpack,security,config,terminal,if,x,pack,security,feature,config,is,available,false,terminal,println,it,doesn,t,look,like,the,x,pack,security,feature,is,available,on,this,elasticsearch,node,terminal,println,please,check,if,you,have,installed,a,license,that,allows,access,to,x,pack,security,feature,terminal,println,throw,new,user,exception,exit,codes,config,x,pack,security,is,not,available,if,x,pack,security,feature,config,is,enabled,false,terminal,println,it,doesn,t,look,like,the,x,pack,security,feature,is,enabled,on,this,elasticsearch,node,terminal,println,please,check,if,you,have,enabled,x,pack,security,in,your,elasticsearch,yml,configuration,file,terminal,println,throw,new,user,exception,exit,codes,config,x,pack,security,is,disabled,by,configuration,terminal,println,x,pack,security,feature,is,available,and,enabled,on,this,elasticsearch,node,terminal,println,possible,causes,include,terminal,println,the,relative,path,of,the,url,is,incorrect,is,there,a,proxy,in,between,terminal,println,the,protocol,http,https,does,not,match,the,port,terminal,println,is,this,really,an,elasticsearch,server,terminal,println,throw,new,user,exception,exit,codes,config,unknown,error,catch,sslexception,e,terminal,println,terminal,println,ssl,connection,to,route,to,string,failed,e,get,message,terminal,println,please,check,the,elasticsearch,ssl,settings,under,xpack,settings,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,establish,ssl,connection,to,elasticsearch,at,route,to,string,e,catch,ioexception,e,terminal,println,terminal,println,connection,failure,to,route,to,string,failed,e,get,message,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,connect,to,elasticsearch,at,route,to,string,is,the,url,correct,and,elasticsearch,running,e
SetupPasswordTool -> SetupCommand -> void checkElasticKeystorePasswordValid(Terminal terminal, Environment env) throws Exception;1527622193;Validates the bootstrap password from the local keystore by making an_'_authenticate' call. Returns silently if server is reachable and password is_valid. Throws {@link UserException} otherwise.__@param terminal where to write verbose info.;void checkElasticKeystorePasswordValid(Terminal terminal, Environment env) throws Exception {_            URL route = createURL(url, "/_xpack/security/_authenticate", "?pretty")__            terminal.println(Verbosity.VERBOSE, "")__            terminal.println(Verbosity.VERBOSE, "Testing if bootstrap password is valid for " + route.toString())__            try {_                final HttpResponse httpResponse = client.execute("GET", route, elasticUser, elasticUserPassword, () -> null,_                        is -> responseBuilder(is, terminal))__                final int httpCode = httpResponse.getHttpStatus()___                _                if (httpCode == HttpURLConnection.HTTP_UNAUTHORIZED) {_                    terminal.println("")__                    terminal.println("Failed to authenticate user '" + elasticUser + "' against " + route.toString())__                    terminal.println("Possible causes include:")__                    terminal.println(" * The password for the '" + elasticUser + "' user has already been changed on this cluster")__                    terminal.println(" * Your elasticsearch node is running against a different keystore")__                    terminal.println("   This tool used the keystore at " + KeyStoreWrapper.keystorePath(env.configFile()))__                    terminal.println("")__                    throw new UserException(ExitCodes.CONFIG, "Failed to verify bootstrap password")__                } else if (httpCode != HttpURLConnection.HTTP_OK) {_                    terminal.println("")__                    terminal.println("Unexpected response code [" + httpCode + "] from calling GET " + route.toString())__                    XPackSecurityFeatureConfig xPackSecurityFeatureConfig = getXPackSecurityConfig(terminal)__                    if (xPackSecurityFeatureConfig.isAvailable == false) {_                        terminal.println("It doesn't look like the X-Pack security feature is available on this Elasticsearch node.")__                        terminal.println("Please check if you have installed a license that allows access to X-Pack Security feature.")__                        terminal.println("")__                        throw new UserException(ExitCodes.CONFIG, "X-Pack Security is not available.")__                    }_                    if (xPackSecurityFeatureConfig.isEnabled == false) {_                        terminal.println("It doesn't look like the X-Pack security feature is enabled on this Elasticsearch node.")__                        terminal.println("Please check if you have enabled X-Pack security in your elasticsearch.yml configuration file.")__                        terminal.println("")__                        throw new UserException(ExitCodes.CONFIG, "X-Pack Security is disabled by configuration.")__                    }_                    terminal.println("X-Pack security feature is available and enabled on this Elasticsearch node.")__                    terminal.println("Possible causes include:")__                    terminal.println(" * The relative path of the URL is incorrect. Is there a proxy in-between?")__                    terminal.println(" * The protocol (http/https) does not match the port.")__                    terminal.println(" * Is this really an Elasticsearch server?")__                    terminal.println("")__                    throw new UserException(ExitCodes.CONFIG, "Unknown error")__                }_            } catch (SSLException e) {_                terminal.println("")__                terminal.println("SSL connection to " + route.toString() + " failed: " + e.getMessage())__                terminal.println("Please check the elasticsearch SSL settings under " + XPackSettings.HTTP_SSL_PREFIX)__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.CONFIG,_                        "Failed to establish SSL connection to elasticsearch at " + route.toString() + ". ", e)__            } catch (IOException e) {_                terminal.println("")__                terminal.println("Connection failure to: " + route.toString() + " failed: " + e.getMessage())__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.CONFIG,_                        "Failed to connect to elasticsearch at " + route.toString() + ". Is the URL correct and elasticsearch running?", e)__            }_        };validates,the,bootstrap,password,from,the,local,keystore,by,making,an,call,returns,silently,if,server,is,reachable,and,password,is,valid,throws,link,user,exception,otherwise,param,terminal,where,to,write,verbose,info;void,check,elastic,keystore,password,valid,terminal,terminal,environment,env,throws,exception,url,route,create,url,url,security,pretty,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,testing,if,bootstrap,password,is,valid,for,route,to,string,try,final,http,response,http,response,client,execute,get,route,elastic,user,elastic,user,password,null,is,response,builder,is,terminal,final,int,http,code,http,response,get,http,status,if,http,code,http,urlconnection,terminal,println,terminal,println,failed,to,authenticate,user,elastic,user,against,route,to,string,terminal,println,possible,causes,include,terminal,println,the,password,for,the,elastic,user,user,has,already,been,changed,on,this,cluster,terminal,println,your,elasticsearch,node,is,running,against,a,different,keystore,terminal,println,this,tool,used,the,keystore,at,key,store,wrapper,keystore,path,env,config,file,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,verify,bootstrap,password,else,if,http,code,http,urlconnection,terminal,println,terminal,println,unexpected,response,code,http,code,from,calling,get,route,to,string,xpack,security,feature,config,x,pack,security,feature,config,get,xpack,security,config,terminal,if,x,pack,security,feature,config,is,available,false,terminal,println,it,doesn,t,look,like,the,x,pack,security,feature,is,available,on,this,elasticsearch,node,terminal,println,please,check,if,you,have,installed,a,license,that,allows,access,to,x,pack,security,feature,terminal,println,throw,new,user,exception,exit,codes,config,x,pack,security,is,not,available,if,x,pack,security,feature,config,is,enabled,false,terminal,println,it,doesn,t,look,like,the,x,pack,security,feature,is,enabled,on,this,elasticsearch,node,terminal,println,please,check,if,you,have,enabled,x,pack,security,in,your,elasticsearch,yml,configuration,file,terminal,println,throw,new,user,exception,exit,codes,config,x,pack,security,is,disabled,by,configuration,terminal,println,x,pack,security,feature,is,available,and,enabled,on,this,elasticsearch,node,terminal,println,possible,causes,include,terminal,println,the,relative,path,of,the,url,is,incorrect,is,there,a,proxy,in,between,terminal,println,the,protocol,http,https,does,not,match,the,port,terminal,println,is,this,really,an,elasticsearch,server,terminal,println,throw,new,user,exception,exit,codes,config,unknown,error,catch,sslexception,e,terminal,println,terminal,println,ssl,connection,to,route,to,string,failed,e,get,message,terminal,println,please,check,the,elasticsearch,ssl,settings,under,xpack,settings,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,establish,ssl,connection,to,elasticsearch,at,route,to,string,e,catch,ioexception,e,terminal,println,terminal,println,connection,failure,to,route,to,string,failed,e,get,message,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,connect,to,elasticsearch,at,route,to,string,is,the,url,correct,and,elasticsearch,running,e
SetupPasswordTool -> SetupCommand -> void checkElasticKeystorePasswordValid(Terminal terminal, Environment env) throws Exception;1535383145;Validates the bootstrap password from the local keystore by making an_'_authenticate' call. Returns silently if server is reachable and password is_valid. Throws {@link UserException} otherwise.__@param terminal where to write verbose info.;void checkElasticKeystorePasswordValid(Terminal terminal, Environment env) throws Exception {_            URL route = createURL(url, "/_xpack/security/_authenticate", "?pretty")__            terminal.println(Verbosity.VERBOSE, "")__            terminal.println(Verbosity.VERBOSE, "Testing if bootstrap password is valid for " + route.toString())__            try {_                final HttpResponse httpResponse = client.execute("GET", route, elasticUser, elasticUserPassword, () -> null,_                        is -> responseBuilder(is, terminal))__                final int httpCode = httpResponse.getHttpStatus()___                _                if (httpCode == HttpURLConnection.HTTP_UNAUTHORIZED) {_                    terminal.println("")__                    terminal.println("Failed to authenticate user '" + elasticUser + "' against " + route.toString())__                    terminal.println("Possible causes include:")__                    terminal.println(" * The password for the '" + elasticUser + "' user has already been changed on this cluster")__                    terminal.println(" * Your elasticsearch node is running against a different keystore")__                    terminal.println("   This tool used the keystore at " + KeyStoreWrapper.keystorePath(env.configFile()))__                    terminal.println("")__                    throw new UserException(ExitCodes.CONFIG, "Failed to verify bootstrap password")__                } else if (httpCode != HttpURLConnection.HTTP_OK) {_                    terminal.println("")__                    terminal.println("Unexpected response code [" + httpCode + "] from calling GET " + route.toString())__                    XPackSecurityFeatureConfig xPackSecurityFeatureConfig = getXPackSecurityConfig(terminal)__                    if (xPackSecurityFeatureConfig.isAvailable == false) {_                        terminal.println("It doesn't look like the X-Pack security feature is available on this Elasticsearch node.")__                        terminal.println("Please check if you have installed a license that allows access to X-Pack Security feature.")__                        terminal.println("")__                        throw new UserException(ExitCodes.CONFIG, "X-Pack Security is not available.")__                    }_                    if (xPackSecurityFeatureConfig.isEnabled == false) {_                        terminal.println("It doesn't look like the X-Pack security feature is enabled on this Elasticsearch node.")__                        terminal.println("Please check if you have enabled X-Pack security in your elasticsearch.yml configuration file.")__                        terminal.println("")__                        throw new UserException(ExitCodes.CONFIG, "X-Pack Security is disabled by configuration.")__                    }_                    terminal.println("X-Pack security feature is available and enabled on this Elasticsearch node.")__                    terminal.println("Possible causes include:")__                    terminal.println(" * The relative path of the URL is incorrect. Is there a proxy in-between?")__                    terminal.println(" * The protocol (http/https) does not match the port.")__                    terminal.println(" * Is this really an Elasticsearch server?")__                    terminal.println("")__                    throw new UserException(ExitCodes.CONFIG, "Unknown error")__                }_            } catch (SSLException e) {_                terminal.println("")__                terminal.println("SSL connection to " + route.toString() + " failed: " + e.getMessage())__                terminal.println("Please check the elasticsearch SSL settings under " + XPackSettings.HTTP_SSL_PREFIX)__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.CONFIG,_                        "Failed to establish SSL connection to elasticsearch at " + route.toString() + ". ", e)__            } catch (IOException e) {_                terminal.println("")__                terminal.println("Connection failure to: " + route.toString() + " failed: " + e.getMessage())__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.CONFIG,_                        "Failed to connect to elasticsearch at " + route.toString() + ". Is the URL correct and elasticsearch running?", e)__            }_        };validates,the,bootstrap,password,from,the,local,keystore,by,making,an,call,returns,silently,if,server,is,reachable,and,password,is,valid,throws,link,user,exception,otherwise,param,terminal,where,to,write,verbose,info;void,check,elastic,keystore,password,valid,terminal,terminal,environment,env,throws,exception,url,route,create,url,url,security,pretty,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,testing,if,bootstrap,password,is,valid,for,route,to,string,try,final,http,response,http,response,client,execute,get,route,elastic,user,elastic,user,password,null,is,response,builder,is,terminal,final,int,http,code,http,response,get,http,status,if,http,code,http,urlconnection,terminal,println,terminal,println,failed,to,authenticate,user,elastic,user,against,route,to,string,terminal,println,possible,causes,include,terminal,println,the,password,for,the,elastic,user,user,has,already,been,changed,on,this,cluster,terminal,println,your,elasticsearch,node,is,running,against,a,different,keystore,terminal,println,this,tool,used,the,keystore,at,key,store,wrapper,keystore,path,env,config,file,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,verify,bootstrap,password,else,if,http,code,http,urlconnection,terminal,println,terminal,println,unexpected,response,code,http,code,from,calling,get,route,to,string,xpack,security,feature,config,x,pack,security,feature,config,get,xpack,security,config,terminal,if,x,pack,security,feature,config,is,available,false,terminal,println,it,doesn,t,look,like,the,x,pack,security,feature,is,available,on,this,elasticsearch,node,terminal,println,please,check,if,you,have,installed,a,license,that,allows,access,to,x,pack,security,feature,terminal,println,throw,new,user,exception,exit,codes,config,x,pack,security,is,not,available,if,x,pack,security,feature,config,is,enabled,false,terminal,println,it,doesn,t,look,like,the,x,pack,security,feature,is,enabled,on,this,elasticsearch,node,terminal,println,please,check,if,you,have,enabled,x,pack,security,in,your,elasticsearch,yml,configuration,file,terminal,println,throw,new,user,exception,exit,codes,config,x,pack,security,is,disabled,by,configuration,terminal,println,x,pack,security,feature,is,available,and,enabled,on,this,elasticsearch,node,terminal,println,possible,causes,include,terminal,println,the,relative,path,of,the,url,is,incorrect,is,there,a,proxy,in,between,terminal,println,the,protocol,http,https,does,not,match,the,port,terminal,println,is,this,really,an,elasticsearch,server,terminal,println,throw,new,user,exception,exit,codes,config,unknown,error,catch,sslexception,e,terminal,println,terminal,println,ssl,connection,to,route,to,string,failed,e,get,message,terminal,println,please,check,the,elasticsearch,ssl,settings,under,xpack,settings,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,establish,ssl,connection,to,elasticsearch,at,route,to,string,e,catch,ioexception,e,terminal,println,terminal,println,connection,failure,to,route,to,string,failed,e,get,message,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,connect,to,elasticsearch,at,route,to,string,is,the,url,correct,and,elasticsearch,running,e
SetupPasswordTool -> SetupCommand -> void checkElasticKeystorePasswordValid(Terminal terminal, Environment env) throws Exception;1540486836;Validates the bootstrap password from the local keystore by making an_'_authenticate' call. Returns silently if server is reachable and password is_valid. Throws {@link UserException} otherwise.__@param terminal where to write verbose info.;void checkElasticKeystorePasswordValid(Terminal terminal, Environment env) throws Exception {_            URL route = createURL(url, "/_xpack/security/_authenticate", "?pretty")__            terminal.println(Verbosity.VERBOSE, "")__            terminal.println(Verbosity.VERBOSE, "Testing if bootstrap password is valid for " + route.toString())__            try {_                final HttpResponse httpResponse = client.execute("GET", route, elasticUser, elasticUserPassword, () -> null,_                        is -> responseBuilder(is, terminal))__                final int httpCode = httpResponse.getHttpStatus()___                _                if (httpCode == HttpURLConnection.HTTP_UNAUTHORIZED) {_                    terminal.println("")__                    terminal.println("Failed to authenticate user '" + elasticUser + "' against " + route.toString())__                    terminal.println("Possible causes include:")__                    terminal.println(" * The password for the '" + elasticUser + "' user has already been changed on this cluster")__                    terminal.println(" * Your elasticsearch node is running against a different keystore")__                    terminal.println("   This tool used the keystore at " + KeyStoreWrapper.keystorePath(env.configFile()))__                    terminal.println("")__                    throw new UserException(ExitCodes.CONFIG, "Failed to verify bootstrap password")__                } else if (httpCode != HttpURLConnection.HTTP_OK) {_                    terminal.println("")__                    terminal.println("Unexpected response code [" + httpCode + "] from calling GET " + route.toString())__                    XPackSecurityFeatureConfig xPackSecurityFeatureConfig = getXPackSecurityConfig(terminal)__                    if (xPackSecurityFeatureConfig.isAvailable == false) {_                        terminal.println("It doesn't look like the X-Pack security feature is available on this Elasticsearch node.")__                        terminal.println("Please check if you have installed a license that allows access to X-Pack Security feature.")__                        terminal.println("")__                        throw new UserException(ExitCodes.CONFIG, "X-Pack Security is not available.")__                    }_                    if (xPackSecurityFeatureConfig.isEnabled == false) {_                        terminal.println("It doesn't look like the X-Pack security feature is enabled on this Elasticsearch node.")__                        terminal.println("Please check if you have enabled X-Pack security in your elasticsearch.yml configuration file.")__                        terminal.println("")__                        throw new UserException(ExitCodes.CONFIG, "X-Pack Security is disabled by configuration.")__                    }_                    terminal.println("X-Pack security feature is available and enabled on this Elasticsearch node.")__                    terminal.println("Possible causes include:")__                    terminal.println(" * The relative path of the URL is incorrect. Is there a proxy in-between?")__                    terminal.println(" * The protocol (http/https) does not match the port.")__                    terminal.println(" * Is this really an Elasticsearch server?")__                    terminal.println("")__                    throw new UserException(ExitCodes.CONFIG, "Unknown error")__                }_            } catch (SSLException e) {_                terminal.println("")__                terminal.println("SSL connection to " + route.toString() + " failed: " + e.getMessage())__                terminal.println("Please check the elasticsearch SSL settings under " + XPackSettings.HTTP_SSL_PREFIX)__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.CONFIG,_                        "Failed to establish SSL connection to elasticsearch at " + route.toString() + ". ", e)__            } catch (IOException e) {_                terminal.println("")__                terminal.println("Connection failure to: " + route.toString() + " failed: " + e.getMessage())__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.CONFIG,_                        "Failed to connect to elasticsearch at " + route.toString() + ". Is the URL correct and elasticsearch running?", e)__            }_        };validates,the,bootstrap,password,from,the,local,keystore,by,making,an,call,returns,silently,if,server,is,reachable,and,password,is,valid,throws,link,user,exception,otherwise,param,terminal,where,to,write,verbose,info;void,check,elastic,keystore,password,valid,terminal,terminal,environment,env,throws,exception,url,route,create,url,url,security,pretty,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,testing,if,bootstrap,password,is,valid,for,route,to,string,try,final,http,response,http,response,client,execute,get,route,elastic,user,elastic,user,password,null,is,response,builder,is,terminal,final,int,http,code,http,response,get,http,status,if,http,code,http,urlconnection,terminal,println,terminal,println,failed,to,authenticate,user,elastic,user,against,route,to,string,terminal,println,possible,causes,include,terminal,println,the,password,for,the,elastic,user,user,has,already,been,changed,on,this,cluster,terminal,println,your,elasticsearch,node,is,running,against,a,different,keystore,terminal,println,this,tool,used,the,keystore,at,key,store,wrapper,keystore,path,env,config,file,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,verify,bootstrap,password,else,if,http,code,http,urlconnection,terminal,println,terminal,println,unexpected,response,code,http,code,from,calling,get,route,to,string,xpack,security,feature,config,x,pack,security,feature,config,get,xpack,security,config,terminal,if,x,pack,security,feature,config,is,available,false,terminal,println,it,doesn,t,look,like,the,x,pack,security,feature,is,available,on,this,elasticsearch,node,terminal,println,please,check,if,you,have,installed,a,license,that,allows,access,to,x,pack,security,feature,terminal,println,throw,new,user,exception,exit,codes,config,x,pack,security,is,not,available,if,x,pack,security,feature,config,is,enabled,false,terminal,println,it,doesn,t,look,like,the,x,pack,security,feature,is,enabled,on,this,elasticsearch,node,terminal,println,please,check,if,you,have,enabled,x,pack,security,in,your,elasticsearch,yml,configuration,file,terminal,println,throw,new,user,exception,exit,codes,config,x,pack,security,is,disabled,by,configuration,terminal,println,x,pack,security,feature,is,available,and,enabled,on,this,elasticsearch,node,terminal,println,possible,causes,include,terminal,println,the,relative,path,of,the,url,is,incorrect,is,there,a,proxy,in,between,terminal,println,the,protocol,http,https,does,not,match,the,port,terminal,println,is,this,really,an,elasticsearch,server,terminal,println,throw,new,user,exception,exit,codes,config,unknown,error,catch,sslexception,e,terminal,println,terminal,println,ssl,connection,to,route,to,string,failed,e,get,message,terminal,println,please,check,the,elasticsearch,ssl,settings,under,xpack,settings,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,establish,ssl,connection,to,elasticsearch,at,route,to,string,e,catch,ioexception,e,terminal,println,terminal,println,connection,failure,to,route,to,string,failed,e,get,message,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,connect,to,elasticsearch,at,route,to,string,is,the,url,correct,and,elasticsearch,running,e
SetupPasswordTool -> SetupCommand -> void checkElasticKeystorePasswordValid(Terminal terminal, Environment env) throws Exception;1544519590;Validates the bootstrap password from the local keystore by making an_'_authenticate' call. Returns silently if server is reachable and password is_valid. Throws {@link UserException} otherwise.__@param terminal where to write verbose info.;void checkElasticKeystorePasswordValid(Terminal terminal, Environment env) throws Exception {_            URL route = createURL(url, "/_security/_authenticate", "?pretty")__            terminal.println(Verbosity.VERBOSE, "")__            terminal.println(Verbosity.VERBOSE, "Testing if bootstrap password is valid for " + route.toString())__            try {_                final HttpResponse httpResponse = client.execute("GET", route, elasticUser, elasticUserPassword, () -> null,_                        is -> responseBuilder(is, terminal))__                final int httpCode = httpResponse.getHttpStatus()___                _                if (httpCode == HttpURLConnection.HTTP_UNAUTHORIZED) {_                    terminal.println("")__                    terminal.println("Failed to authenticate user '" + elasticUser + "' against " + route.toString())__                    terminal.println("Possible causes include:")__                    terminal.println(" * The password for the '" + elasticUser + "' user has already been changed on this cluster")__                    terminal.println(" * Your elasticsearch node is running against a different keystore")__                    terminal.println("   This tool used the keystore at " + KeyStoreWrapper.keystorePath(env.configFile()))__                    terminal.println("")__                    throw new UserException(ExitCodes.CONFIG, "Failed to verify bootstrap password")__                } else if (httpCode != HttpURLConnection.HTTP_OK) {_                    terminal.println("")__                    terminal.println("Unexpected response code [" + httpCode + "] from calling GET " + route.toString())__                    XPackSecurityFeatureConfig xPackSecurityFeatureConfig = getXPackSecurityConfig(terminal)__                    if (xPackSecurityFeatureConfig.isAvailable == false) {_                        terminal.println("It doesn't look like the X-Pack security feature is available on this Elasticsearch node.")__                        terminal.println("Please check if you have installed a license that allows access to X-Pack Security feature.")__                        terminal.println("")__                        throw new UserException(ExitCodes.CONFIG, "X-Pack Security is not available.")__                    }_                    if (xPackSecurityFeatureConfig.isEnabled == false) {_                        terminal.println("It doesn't look like the X-Pack security feature is enabled on this Elasticsearch node.")__                        terminal.println("Please check if you have enabled X-Pack security in your elasticsearch.yml configuration file.")__                        terminal.println("")__                        throw new UserException(ExitCodes.CONFIG, "X-Pack Security is disabled by configuration.")__                    }_                    terminal.println("X-Pack security feature is available and enabled on this Elasticsearch node.")__                    terminal.println("Possible causes include:")__                    terminal.println(" * The relative path of the URL is incorrect. Is there a proxy in-between?")__                    terminal.println(" * The protocol (http/https) does not match the port.")__                    terminal.println(" * Is this really an Elasticsearch server?")__                    terminal.println("")__                    throw new UserException(ExitCodes.CONFIG, "Unknown error")__                }_            } catch (SSLException e) {_                terminal.println("")__                terminal.println("SSL connection to " + route.toString() + " failed: " + e.getMessage())__                terminal.println("Please check the elasticsearch SSL settings under " + XPackSettings.HTTP_SSL_PREFIX)__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.CONFIG,_                        "Failed to establish SSL connection to elasticsearch at " + route.toString() + ". ", e)__            } catch (IOException e) {_                terminal.println("")__                terminal.println("Connection failure to: " + route.toString() + " failed: " + e.getMessage())__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.CONFIG,_                        "Failed to connect to elasticsearch at " + route.toString() + ". Is the URL correct and elasticsearch running?", e)__            }_        };validates,the,bootstrap,password,from,the,local,keystore,by,making,an,call,returns,silently,if,server,is,reachable,and,password,is,valid,throws,link,user,exception,otherwise,param,terminal,where,to,write,verbose,info;void,check,elastic,keystore,password,valid,terminal,terminal,environment,env,throws,exception,url,route,create,url,url,pretty,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,testing,if,bootstrap,password,is,valid,for,route,to,string,try,final,http,response,http,response,client,execute,get,route,elastic,user,elastic,user,password,null,is,response,builder,is,terminal,final,int,http,code,http,response,get,http,status,if,http,code,http,urlconnection,terminal,println,terminal,println,failed,to,authenticate,user,elastic,user,against,route,to,string,terminal,println,possible,causes,include,terminal,println,the,password,for,the,elastic,user,user,has,already,been,changed,on,this,cluster,terminal,println,your,elasticsearch,node,is,running,against,a,different,keystore,terminal,println,this,tool,used,the,keystore,at,key,store,wrapper,keystore,path,env,config,file,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,verify,bootstrap,password,else,if,http,code,http,urlconnection,terminal,println,terminal,println,unexpected,response,code,http,code,from,calling,get,route,to,string,xpack,security,feature,config,x,pack,security,feature,config,get,xpack,security,config,terminal,if,x,pack,security,feature,config,is,available,false,terminal,println,it,doesn,t,look,like,the,x,pack,security,feature,is,available,on,this,elasticsearch,node,terminal,println,please,check,if,you,have,installed,a,license,that,allows,access,to,x,pack,security,feature,terminal,println,throw,new,user,exception,exit,codes,config,x,pack,security,is,not,available,if,x,pack,security,feature,config,is,enabled,false,terminal,println,it,doesn,t,look,like,the,x,pack,security,feature,is,enabled,on,this,elasticsearch,node,terminal,println,please,check,if,you,have,enabled,x,pack,security,in,your,elasticsearch,yml,configuration,file,terminal,println,throw,new,user,exception,exit,codes,config,x,pack,security,is,disabled,by,configuration,terminal,println,x,pack,security,feature,is,available,and,enabled,on,this,elasticsearch,node,terminal,println,possible,causes,include,terminal,println,the,relative,path,of,the,url,is,incorrect,is,there,a,proxy,in,between,terminal,println,the,protocol,http,https,does,not,match,the,port,terminal,println,is,this,really,an,elasticsearch,server,terminal,println,throw,new,user,exception,exit,codes,config,unknown,error,catch,sslexception,e,terminal,println,terminal,println,ssl,connection,to,route,to,string,failed,e,get,message,terminal,println,please,check,the,elasticsearch,ssl,settings,under,xpack,settings,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,establish,ssl,connection,to,elasticsearch,at,route,to,string,e,catch,ioexception,e,terminal,println,terminal,println,connection,failure,to,route,to,string,failed,e,get,message,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,config,failed,to,connect,to,elasticsearch,at,route,to,string,is,the,url,correct,and,elasticsearch,running,e
SetupPasswordTool -> SetupCommand -> private void changeUserPassword(String user, SecureString password, Terminal terminal) throws Exception;1524684173;Sets one user's password using the elastic superUser credentials.__@param user     The user who's password will change._@param password the new password of the user.;private void changeUserPassword(String user, SecureString password, Terminal terminal) throws Exception {_            URL route = createURL(url, "/_xpack/security/user/" + user + "/_password", "?pretty")__            terminal.println(Verbosity.VERBOSE, "")__            terminal.println(Verbosity.VERBOSE, "Trying user password change call " + route.toString())__            try {_                _                SecureString supplierPassword = password.clone()__                final HttpResponse httpResponse = client.execute("PUT", route, elasticUser, elasticUserPassword, () -> {_                    try {_                        XContentBuilder xContentBuilder = JsonXContent.contentBuilder()__                        xContentBuilder.startObject().field("password", supplierPassword.toString()).endObject()__                        return Strings.toString(xContentBuilder)__                    } finally {_                        supplierPassword.close()__                    }_                }, is -> responseBuilder(is, terminal))__                if (httpResponse.getHttpStatus() != HttpURLConnection.HTTP_OK) {_                    terminal.println("")__                    terminal.println(_                            "Unexpected response code [" + httpResponse.getHttpStatus() + "] from calling PUT " + route.toString())__                    String cause = getErrorCause(httpResponse)__                    if (cause != null) {_                        terminal.println("Cause: " + cause)__                        terminal.println("")__                    }_                    terminal.println("Possible next steps:")__                    terminal.println("* Try running this tool again.")__                    terminal.println("* Try running with the --verbose parameter for additional messages.")__                    terminal.println("* Check the elasticsearch logs for additional error details.")__                    terminal.println("* Use the change password API manually. ")__                    terminal.println("")__                    throw new UserException(ExitCodes.TEMP_FAILURE, "Failed to set password for user [" + user + "].")__                }_            } catch (IOException e) {_                terminal.println("")__                terminal.println("Connection failure to: " + route.toString() + " failed: " + e.getMessage())__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.TEMP_FAILURE, "Failed to set password for user [" + user + "].", e)__            }_        };sets,one,user,s,password,using,the,elastic,super,user,credentials,param,user,the,user,who,s,password,will,change,param,password,the,new,password,of,the,user;private,void,change,user,password,string,user,secure,string,password,terminal,terminal,throws,exception,url,route,create,url,url,security,user,user,pretty,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,trying,user,password,change,call,route,to,string,try,secure,string,supplier,password,password,clone,final,http,response,http,response,client,execute,put,route,elastic,user,elastic,user,password,try,xcontent,builder,x,content,builder,json,xcontent,content,builder,x,content,builder,start,object,field,password,supplier,password,to,string,end,object,return,strings,to,string,x,content,builder,finally,supplier,password,close,is,response,builder,is,terminal,if,http,response,get,http,status,http,urlconnection,terminal,println,terminal,println,unexpected,response,code,http,response,get,http,status,from,calling,put,route,to,string,string,cause,get,error,cause,http,response,if,cause,null,terminal,println,cause,cause,terminal,println,terminal,println,possible,next,steps,terminal,println,try,running,this,tool,again,terminal,println,try,running,with,the,verbose,parameter,for,additional,messages,terminal,println,check,the,elasticsearch,logs,for,additional,error,details,terminal,println,use,the,change,password,api,manually,terminal,println,throw,new,user,exception,exit,codes,failed,to,set,password,for,user,user,catch,ioexception,e,terminal,println,terminal,println,connection,failure,to,route,to,string,failed,e,get,message,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,failed,to,set,password,for,user,user,e
SetupPasswordTool -> SetupCommand -> private void changeUserPassword(String user, SecureString password, Terminal terminal) throws Exception;1527622193;Sets one user's password using the elastic superUser credentials.__@param user     The user who's password will change._@param password the new password of the user.;private void changeUserPassword(String user, SecureString password, Terminal terminal) throws Exception {_            URL route = createURL(url, "/_xpack/security/user/" + user + "/_password", "?pretty")__            terminal.println(Verbosity.VERBOSE, "")__            terminal.println(Verbosity.VERBOSE, "Trying user password change call " + route.toString())__            try {_                _                SecureString supplierPassword = password.clone()__                final HttpResponse httpResponse = client.execute("PUT", route, elasticUser, elasticUserPassword, () -> {_                    try {_                        XContentBuilder xContentBuilder = JsonXContent.contentBuilder()__                        xContentBuilder.startObject().field("password", supplierPassword.toString()).endObject()__                        return Strings.toString(xContentBuilder)__                    } finally {_                        supplierPassword.close()__                    }_                }, is -> responseBuilder(is, terminal))__                if (httpResponse.getHttpStatus() != HttpURLConnection.HTTP_OK) {_                    terminal.println("")__                    terminal.println(_                            "Unexpected response code [" + httpResponse.getHttpStatus() + "] from calling PUT " + route.toString())__                    String cause = getErrorCause(httpResponse)__                    if (cause != null) {_                        terminal.println("Cause: " + cause)__                        terminal.println("")__                    }_                    terminal.println("Possible next steps:")__                    terminal.println("* Try running this tool again.")__                    terminal.println("* Try running with the --verbose parameter for additional messages.")__                    terminal.println("* Check the elasticsearch logs for additional error details.")__                    terminal.println("* Use the change password API manually. ")__                    terminal.println("")__                    throw new UserException(ExitCodes.TEMP_FAILURE, "Failed to set password for user [" + user + "].")__                }_            } catch (IOException e) {_                terminal.println("")__                terminal.println("Connection failure to: " + route.toString() + " failed: " + e.getMessage())__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.TEMP_FAILURE, "Failed to set password for user [" + user + "].", e)__            }_        };sets,one,user,s,password,using,the,elastic,super,user,credentials,param,user,the,user,who,s,password,will,change,param,password,the,new,password,of,the,user;private,void,change,user,password,string,user,secure,string,password,terminal,terminal,throws,exception,url,route,create,url,url,security,user,user,pretty,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,trying,user,password,change,call,route,to,string,try,secure,string,supplier,password,password,clone,final,http,response,http,response,client,execute,put,route,elastic,user,elastic,user,password,try,xcontent,builder,x,content,builder,json,xcontent,content,builder,x,content,builder,start,object,field,password,supplier,password,to,string,end,object,return,strings,to,string,x,content,builder,finally,supplier,password,close,is,response,builder,is,terminal,if,http,response,get,http,status,http,urlconnection,terminal,println,terminal,println,unexpected,response,code,http,response,get,http,status,from,calling,put,route,to,string,string,cause,get,error,cause,http,response,if,cause,null,terminal,println,cause,cause,terminal,println,terminal,println,possible,next,steps,terminal,println,try,running,this,tool,again,terminal,println,try,running,with,the,verbose,parameter,for,additional,messages,terminal,println,check,the,elasticsearch,logs,for,additional,error,details,terminal,println,use,the,change,password,api,manually,terminal,println,throw,new,user,exception,exit,codes,failed,to,set,password,for,user,user,catch,ioexception,e,terminal,println,terminal,println,connection,failure,to,route,to,string,failed,e,get,message,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,failed,to,set,password,for,user,user,e
SetupPasswordTool -> SetupCommand -> private void changeUserPassword(String user, SecureString password, Terminal terminal) throws Exception;1535383145;Sets one user's password using the elastic superUser credentials.__@param user     The user who's password will change._@param password the new password of the user.;private void changeUserPassword(String user, SecureString password, Terminal terminal) throws Exception {_            URL route = createURL(url, "/_xpack/security/user/" + user + "/_password", "?pretty")__            terminal.println(Verbosity.VERBOSE, "")__            terminal.println(Verbosity.VERBOSE, "Trying user password change call " + route.toString())__            try {_                _                SecureString supplierPassword = password.clone()__                final HttpResponse httpResponse = client.execute("PUT", route, elasticUser, elasticUserPassword, () -> {_                    try {_                        XContentBuilder xContentBuilder = JsonXContent.contentBuilder()__                        xContentBuilder.startObject().field("password", supplierPassword.toString()).endObject()__                        return Strings.toString(xContentBuilder)__                    } finally {_                        supplierPassword.close()__                    }_                }, is -> responseBuilder(is, terminal))__                if (httpResponse.getHttpStatus() != HttpURLConnection.HTTP_OK) {_                    terminal.println("")__                    terminal.println(_                            "Unexpected response code [" + httpResponse.getHttpStatus() + "] from calling PUT " + route.toString())__                    String cause = getErrorCause(httpResponse)__                    if (cause != null) {_                        terminal.println("Cause: " + cause)__                        terminal.println("")__                    }_                    terminal.println("Possible next steps:")__                    terminal.println("* Try running this tool again.")__                    terminal.println("* Try running with the --verbose parameter for additional messages.")__                    terminal.println("* Check the elasticsearch logs for additional error details.")__                    terminal.println("* Use the change password API manually. ")__                    terminal.println("")__                    throw new UserException(ExitCodes.TEMP_FAILURE, "Failed to set password for user [" + user + "].")__                }_            } catch (IOException e) {_                terminal.println("")__                terminal.println("Connection failure to: " + route.toString() + " failed: " + e.getMessage())__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.TEMP_FAILURE, "Failed to set password for user [" + user + "].", e)__            }_        };sets,one,user,s,password,using,the,elastic,super,user,credentials,param,user,the,user,who,s,password,will,change,param,password,the,new,password,of,the,user;private,void,change,user,password,string,user,secure,string,password,terminal,terminal,throws,exception,url,route,create,url,url,security,user,user,pretty,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,trying,user,password,change,call,route,to,string,try,secure,string,supplier,password,password,clone,final,http,response,http,response,client,execute,put,route,elastic,user,elastic,user,password,try,xcontent,builder,x,content,builder,json,xcontent,content,builder,x,content,builder,start,object,field,password,supplier,password,to,string,end,object,return,strings,to,string,x,content,builder,finally,supplier,password,close,is,response,builder,is,terminal,if,http,response,get,http,status,http,urlconnection,terminal,println,terminal,println,unexpected,response,code,http,response,get,http,status,from,calling,put,route,to,string,string,cause,get,error,cause,http,response,if,cause,null,terminal,println,cause,cause,terminal,println,terminal,println,possible,next,steps,terminal,println,try,running,this,tool,again,terminal,println,try,running,with,the,verbose,parameter,for,additional,messages,terminal,println,check,the,elasticsearch,logs,for,additional,error,details,terminal,println,use,the,change,password,api,manually,terminal,println,throw,new,user,exception,exit,codes,failed,to,set,password,for,user,user,catch,ioexception,e,terminal,println,terminal,println,connection,failure,to,route,to,string,failed,e,get,message,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,failed,to,set,password,for,user,user,e
SetupPasswordTool -> SetupCommand -> private void changeUserPassword(String user, SecureString password, Terminal terminal) throws Exception;1540486836;Sets one user's password using the elastic superUser credentials.__@param user     The user who's password will change._@param password the new password of the user.;private void changeUserPassword(String user, SecureString password, Terminal terminal) throws Exception {_            URL route = createURL(url, "/_xpack/security/user/" + user + "/_password", "?pretty")__            terminal.println(Verbosity.VERBOSE, "")__            terminal.println(Verbosity.VERBOSE, "Trying user password change call " + route.toString())__            try {_                _                SecureString supplierPassword = password.clone()__                final HttpResponse httpResponse = client.execute("PUT", route, elasticUser, elasticUserPassword, () -> {_                    try {_                        XContentBuilder xContentBuilder = JsonXContent.contentBuilder()__                        xContentBuilder.startObject().field("password", supplierPassword.toString()).endObject()__                        return Strings.toString(xContentBuilder)__                    } finally {_                        supplierPassword.close()__                    }_                }, is -> responseBuilder(is, terminal))__                if (httpResponse.getHttpStatus() != HttpURLConnection.HTTP_OK) {_                    terminal.println("")__                    terminal.println(_                            "Unexpected response code [" + httpResponse.getHttpStatus() + "] from calling PUT " + route.toString())__                    String cause = getErrorCause(httpResponse)__                    if (cause != null) {_                        terminal.println("Cause: " + cause)__                        terminal.println("")__                    }_                    terminal.println("Possible next steps:")__                    terminal.println("* Try running this tool again.")__                    terminal.println("* Try running with the --verbose parameter for additional messages.")__                    terminal.println("* Check the elasticsearch logs for additional error details.")__                    terminal.println("* Use the change password API manually. ")__                    terminal.println("")__                    throw new UserException(ExitCodes.TEMP_FAILURE, "Failed to set password for user [" + user + "].")__                }_            } catch (IOException e) {_                terminal.println("")__                terminal.println("Connection failure to: " + route.toString() + " failed: " + e.getMessage())__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.TEMP_FAILURE, "Failed to set password for user [" + user + "].", e)__            }_        };sets,one,user,s,password,using,the,elastic,super,user,credentials,param,user,the,user,who,s,password,will,change,param,password,the,new,password,of,the,user;private,void,change,user,password,string,user,secure,string,password,terminal,terminal,throws,exception,url,route,create,url,url,security,user,user,pretty,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,trying,user,password,change,call,route,to,string,try,secure,string,supplier,password,password,clone,final,http,response,http,response,client,execute,put,route,elastic,user,elastic,user,password,try,xcontent,builder,x,content,builder,json,xcontent,content,builder,x,content,builder,start,object,field,password,supplier,password,to,string,end,object,return,strings,to,string,x,content,builder,finally,supplier,password,close,is,response,builder,is,terminal,if,http,response,get,http,status,http,urlconnection,terminal,println,terminal,println,unexpected,response,code,http,response,get,http,status,from,calling,put,route,to,string,string,cause,get,error,cause,http,response,if,cause,null,terminal,println,cause,cause,terminal,println,terminal,println,possible,next,steps,terminal,println,try,running,this,tool,again,terminal,println,try,running,with,the,verbose,parameter,for,additional,messages,terminal,println,check,the,elasticsearch,logs,for,additional,error,details,terminal,println,use,the,change,password,api,manually,terminal,println,throw,new,user,exception,exit,codes,failed,to,set,password,for,user,user,catch,ioexception,e,terminal,println,terminal,println,connection,failure,to,route,to,string,failed,e,get,message,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,failed,to,set,password,for,user,user,e
SetupPasswordTool -> SetupCommand -> private void changeUserPassword(String user, SecureString password, Terminal terminal) throws Exception;1544519590;Sets one user's password using the elastic superUser credentials.__@param user     The user who's password will change._@param password the new password of the user.;private void changeUserPassword(String user, SecureString password, Terminal terminal) throws Exception {_            URL route = createURL(url, "/_security/user/" + user + "/_password", "?pretty")__            terminal.println(Verbosity.VERBOSE, "")__            terminal.println(Verbosity.VERBOSE, "Trying user password change call " + route.toString())__            try {_                _                SecureString supplierPassword = password.clone()__                final HttpResponse httpResponse = client.execute("PUT", route, elasticUser, elasticUserPassword, () -> {_                    try {_                        XContentBuilder xContentBuilder = JsonXContent.contentBuilder()__                        xContentBuilder.startObject().field("password", supplierPassword.toString()).endObject()__                        return Strings.toString(xContentBuilder)__                    } finally {_                        supplierPassword.close()__                    }_                }, is -> responseBuilder(is, terminal))__                if (httpResponse.getHttpStatus() != HttpURLConnection.HTTP_OK) {_                    terminal.println("")__                    terminal.println(_                            "Unexpected response code [" + httpResponse.getHttpStatus() + "] from calling PUT " + route.toString())__                    String cause = getErrorCause(httpResponse)__                    if (cause != null) {_                        terminal.println("Cause: " + cause)__                        terminal.println("")__                    }_                    terminal.println("Possible next steps:")__                    terminal.println("* Try running this tool again.")__                    terminal.println("* Try running with the --verbose parameter for additional messages.")__                    terminal.println("* Check the elasticsearch logs for additional error details.")__                    terminal.println("* Use the change password API manually. ")__                    terminal.println("")__                    throw new UserException(ExitCodes.TEMP_FAILURE, "Failed to set password for user [" + user + "].")__                }_            } catch (IOException e) {_                terminal.println("")__                terminal.println("Connection failure to: " + route.toString() + " failed: " + e.getMessage())__                terminal.println(Verbosity.VERBOSE, "")__                terminal.println(Verbosity.VERBOSE, ExceptionsHelper.stackTrace(e))__                terminal.println("")__                throw new UserException(ExitCodes.TEMP_FAILURE, "Failed to set password for user [" + user + "].", e)__            }_        };sets,one,user,s,password,using,the,elastic,super,user,credentials,param,user,the,user,who,s,password,will,change,param,password,the,new,password,of,the,user;private,void,change,user,password,string,user,secure,string,password,terminal,terminal,throws,exception,url,route,create,url,url,user,user,pretty,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,trying,user,password,change,call,route,to,string,try,secure,string,supplier,password,password,clone,final,http,response,http,response,client,execute,put,route,elastic,user,elastic,user,password,try,xcontent,builder,x,content,builder,json,xcontent,content,builder,x,content,builder,start,object,field,password,supplier,password,to,string,end,object,return,strings,to,string,x,content,builder,finally,supplier,password,close,is,response,builder,is,terminal,if,http,response,get,http,status,http,urlconnection,terminal,println,terminal,println,unexpected,response,code,http,response,get,http,status,from,calling,put,route,to,string,string,cause,get,error,cause,http,response,if,cause,null,terminal,println,cause,cause,terminal,println,terminal,println,possible,next,steps,terminal,println,try,running,this,tool,again,terminal,println,try,running,with,the,verbose,parameter,for,additional,messages,terminal,println,check,the,elasticsearch,logs,for,additional,error,details,terminal,println,use,the,change,password,api,manually,terminal,println,throw,new,user,exception,exit,codes,failed,to,set,password,for,user,user,catch,ioexception,e,terminal,println,terminal,println,connection,failure,to,route,to,string,failed,e,get,message,terminal,println,verbosity,verbose,terminal,println,verbosity,verbose,exceptions,helper,stack,trace,e,terminal,println,throw,new,user,exception,exit,codes,failed,to,set,password,for,user,user,e
