commented;modifiers;parameterAmount;loc;comment;code
false;public;1;46;;@Override public IngestDocument execute(IngestDocument ingestDocument) throws Exception {     Authentication authentication = Authentication.getAuthentication(threadContext).     if (authentication == null) {         throw new IllegalStateException("No user authenticated, only use this processor via authenticated user").     }     User user = authentication.getUser().     if (user == null) {         throw new IllegalStateException("No user for authentication").     }     Map<String, Object> userObject = new HashMap<>().     for (Property property : properties) {         switch(property) {             case USERNAME:                 if (user.principal() != null) {                     userObject.put("username", user.principal()).                 }                 break.             case FULL_NAME:                 if (user.fullName() != null) {                     userObject.put("full_name", user.fullName()).                 }                 break.             case EMAIL:                 if (user.email() != null) {                     userObject.put("email", user.email()).                 }                 break.             case ROLES:                 if (user.roles() != null && user.roles().length != 0) {                     userObject.put("roles", Arrays.asList(user.roles())).                 }                 break.             case METADATA:                 if (user.metadata() != null && user.metadata().isEmpty() == false) {                     userObject.put("metadata", user.metadata()).                 }                 break.             default:                 throw new UnsupportedOperationException("unsupported property [" + property + "]").         }     }     ingestDocument.setFieldValue(field, userObject).     return ingestDocument. }
false;public;0;4;;@Override public String getType() {     return TYPE. }
false;;0;3;;String getField() {     return field. }
false;;0;3;;Set<Property> getProperties() {     return properties. }
false;public;3;16;;@Override public SetSecurityUserProcessor create(Map<String, Processor.Factory> processorFactories, String tag, Map<String, Object> config) throws Exception {     String field = readStringProperty(TYPE, tag, config, "field").     List<String> propertyNames = readOptionalList(TYPE, tag, config, "properties").     Set<Property> properties.     if (propertyNames != null) {         properties = EnumSet.noneOf(Property.class).         for (String propertyName : propertyNames) {             properties.add(Property.parse(tag, propertyName)).         }     } else {         properties = EnumSet.allOf(Property.class).     }     return new SetSecurityUserProcessor(tag, threadContext, field, properties). }
false;static;2;9;;static Property parse(String tag, String value) {     try {         return valueOf(value.toUpperCase(Locale.ROOT)).     } catch (IllegalArgumentException e) {         // (e.g. 'No enum constant SetSecurityUserProcessor.Property.INVALID')         throw newConfigurationException(TYPE, tag, "properties", "Property value [" + value + "] is in valid").     } }
