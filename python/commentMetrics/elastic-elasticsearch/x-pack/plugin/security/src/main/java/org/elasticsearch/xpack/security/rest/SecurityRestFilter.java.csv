commented;modifiers;parameterAmount;loc;comment;code
false;public;3;25;;@Override public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {     if (licenseState.isAuthAllowed() && request.method() != Method.OPTIONS) {         // CORS - allow for preflight unauthenticated OPTIONS request         if (extractClientCertificate) {             HttpChannel httpChannel = request.getHttpChannel().             SSLEngineUtils.extractClientCertificates(logger, threadContext, httpChannel).         }         service.authenticate(maybeWrapRestRequest(request), ActionListener.wrap(authentication -> {             RemoteHostHeader.process(request, threadContext).             restHandler.handleRequest(request, channel, client).         }, e -> {             try {                 channel.sendResponse(new BytesRestResponse(channel, e)).             } catch (Exception inner) {                 inner.addSuppressed(e).                 logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to send failure response for uri [{}]", request.uri()), inner).             }         })).     } else {         restHandler.handleRequest(request, channel, client).     } }
false;;1;6;;RestRequest maybeWrapRestRequest(RestRequest restRequest) throws IOException {     if (restHandler instanceof RestRequestFilter) {         return ((RestRequestFilter) restHandler).getFilteredRequest(restRequest).     }     return restRequest. }
