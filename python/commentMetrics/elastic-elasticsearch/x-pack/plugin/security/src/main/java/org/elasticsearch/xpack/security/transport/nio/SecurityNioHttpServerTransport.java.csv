commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected void doStart() {     super.doStart().     ipFilter.setBoundHttpTransportAddress(this.boundAddress()). }
false;protected;0;3;;protected SecurityHttpChannelFactory channelFactory() {     return new SecurityHttpChannelFactory(). }
false;public;2;32;;@Override public NioHttpChannel createChannel(NioSelector selector, SocketChannel channel) throws IOException {     NioHttpChannel httpChannel = new NioHttpChannel(channel).     Supplier<InboundChannelBuffer.Page> pageSupplier = () -> {         Recycler.V<byte[]> bytes = pageCacheRecycler.bytePage(false).         return new InboundChannelBuffer.Page(ByteBuffer.wrap(bytes.v()), bytes::close).     }.     HttpReadWriteHandler httpHandler = new HttpReadWriteHandler(httpChannel, SecurityNioHttpServerTransport.this, handlingSettings, corsConfig).     InboundChannelBuffer buffer = new InboundChannelBuffer(pageSupplier).     Consumer<Exception> exceptionHandler = (e) -> securityExceptionHandler.accept(httpChannel, e).     SocketChannelContext context.     if (sslEnabled) {         SSLEngine sslEngine.         boolean hostnameVerificationEnabled = sslConfiguration.verificationMode().isHostnameVerificationEnabled().         if (hostnameVerificationEnabled) {             InetSocketAddress address = (InetSocketAddress) channel.getRemoteAddress().             // we create the socket based on the name given. don't reverse DNS             sslEngine = sslService.createSSLEngine(sslConfiguration, address.getHostString(), address.getPort()).         } else {             sslEngine = sslService.createSSLEngine(sslConfiguration, null, -1).         }         SSLDriver sslDriver = new SSLDriver(sslEngine, false).         context = new SSLChannelContext(httpChannel, selector, exceptionHandler, sslDriver, httpHandler, buffer, nioIpFilter).     } else {         context = new BytesChannelContext(httpChannel, selector, exceptionHandler, httpHandler, buffer, nioIpFilter).     }     httpChannel.setContext(context).     return httpChannel. }
false;public;2;10;;@Override public NioHttpServerChannel createServerChannel(NioSelector selector, ServerSocketChannel channel) {     NioHttpServerChannel httpServerChannel = new NioHttpServerChannel(channel).     Consumer<Exception> exceptionHandler = (e) -> onServerException(httpServerChannel, e).     Consumer<NioSocketChannel> acceptor = SecurityNioHttpServerTransport.this::acceptChannel.     ServerChannelContext context = new ServerChannelContext(httpServerChannel, this, selector, acceptor, exceptionHandler).     httpServerChannel.setContext(context).     return httpServerChannel. }
