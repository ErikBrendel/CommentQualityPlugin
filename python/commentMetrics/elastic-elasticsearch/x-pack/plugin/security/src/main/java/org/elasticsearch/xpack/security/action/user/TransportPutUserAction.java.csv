commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void onResponse(Boolean created) {     if (created) {         logger.info("added user [{}]", request.username()).     } else {         logger.info("updated user [{}]", request.username()).     }     listener.onResponse(new PutUserResponse(created)). }
false;public;1;5;;@Override public void onFailure(Exception e) {     logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to put user [{}]", request.username()), e).     listener.onFailure(e). }
false;protected;3;25;;@Override protected void doExecute(Task task, final PutUserRequest request, final ActionListener<PutUserResponse> listener) {     final ActionRequestValidationException validationException = validateRequest(request).     if (validationException != null) {         listener.onFailure(validationException).     } else {         usersStore.putUser(request, new ActionListener<Boolean>() {              @Override             public void onResponse(Boolean created) {                 if (created) {                     logger.info("added user [{}]", request.username()).                 } else {                     logger.info("updated user [{}]", request.username()).                 }                 listener.onResponse(new PutUserResponse(created)).             }              @Override             public void onFailure(Exception e) {                 logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to put user [{}]", request.username()), e).                 listener.onFailure(e).             }         }).     } }
false;private;1;30;;private ActionRequestValidationException validateRequest(PutUserRequest request) {     ActionRequestValidationException validationException = null.     final String username = request.username().     if (ClientReservedRealm.isReserved(username, settings)) {         if (AnonymousUser.isAnonymousUsername(username, settings)) {             validationException = addValidationError("user [" + username + "] is anonymous and cannot be modified via the API", validationException).         } else {             validationException = addValidationError("user [" + username + "] is reserved and only the " + "password can be changed", validationException).         }     } else if (SystemUser.NAME.equals(username) || XPackUser.NAME.equals(username) || XPackSecurityUser.NAME.equals(username)) {         validationException = addValidationError("user [" + username + "] is internal", validationException).     } else {         Validation.Error usernameError = Validation.Users.validateUsername(username, true, settings).         if (usernameError != null) {             validationException = addValidationError(usernameError.toString(), validationException).         }     }     if (request.roles() != null) {         for (String role : request.roles()) {             Validation.Error roleNameError = Validation.Roles.validateRoleName(role, true).             if (roleNameError != null) {                 validationException = addValidationError(roleNameError.toString(), validationException).             }         }     }     return validationException. }
