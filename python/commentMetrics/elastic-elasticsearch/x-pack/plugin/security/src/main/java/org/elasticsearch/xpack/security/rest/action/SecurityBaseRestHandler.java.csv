# id;timestamp;commentText;codeText;commentWords;codeWords
SecurityBaseRestHandler -> protected SecurityBaseRestHandler(Settings settings, XPackLicenseState licenseState);1524684173;@param settings the node's settings_@param licenseState the license state that will be used to determine if security is licensed;protected SecurityBaseRestHandler(Settings settings, XPackLicenseState licenseState) {_        super(settings)__        this.licenseState = licenseState__    };param,settings,the,node,s,settings,param,license,state,the,license,state,that,will,be,used,to,determine,if,security,is,licensed;protected,security,base,rest,handler,settings,settings,xpack,license,state,license,state,super,settings,this,license,state,license,state
SecurityBaseRestHandler -> protected SecurityBaseRestHandler(Settings settings, XPackLicenseState licenseState);1532456624;@param settings the node's settings_@param licenseState the license state that will be used to determine if security is licensed;protected SecurityBaseRestHandler(Settings settings, XPackLicenseState licenseState) {_        super(settings)__        this.licenseState = licenseState__    };param,settings,the,node,s,settings,param,license,state,the,license,state,that,will,be,used,to,determine,if,security,is,licensed;protected,security,base,rest,handler,settings,settings,xpack,license,state,license,state,super,settings,this,license,state,license,state
SecurityBaseRestHandler -> protected SecurityBaseRestHandler(Settings settings, XPackLicenseState licenseState);1536828374;@param settings the node's settings_@param licenseState the license state that will be used to determine if security is licensed;protected SecurityBaseRestHandler(Settings settings, XPackLicenseState licenseState) {_        super(settings)__        this.licenseState = licenseState__    };param,settings,the,node,s,settings,param,license,state,the,license,state,that,will,be,used,to,determine,if,security,is,licensed;protected,security,base,rest,handler,settings,settings,xpack,license,state,license,state,super,settings,this,license,state,license,state
SecurityBaseRestHandler -> protected SecurityBaseRestHandler(Settings settings, XPackLicenseState licenseState);1541008027;@param settings the node's settings_@param licenseState the license state that will be used to determine if security is licensed;protected SecurityBaseRestHandler(Settings settings, XPackLicenseState licenseState) {_        super(settings)__        this.settings = settings__        this.licenseState = licenseState__    };param,settings,the,node,s,settings,param,license,state,the,license,state,that,will,be,used,to,determine,if,security,is,licensed;protected,security,base,rest,handler,settings,settings,xpack,license,state,license,state,super,settings,this,settings,settings,this,license,state,license,state
SecurityBaseRestHandler -> protected final RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException;1524684173;Calls the {@link #innerPrepareRequest(RestRequest, NodeClient)} method and then checks the_license state. If the license state allows auth, the result from_{@link #innerPrepareRequest(RestRequest, NodeClient)} is returned, otherwise a default error_response will be returned indicating that security is not licensed.__Note: the implementing rest handler is called before the license is checked so that we do not_trip the unused parameters check;protected final RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {_        RestChannelConsumer consumer = innerPrepareRequest(request, client)__        final Exception failedFeature = checkFeatureAvailable(request)__        if (failedFeature == null) {_            return consumer__        } else {_            return channel -> channel.sendResponse(new BytesRestResponse(channel, failedFeature))__        }_    };calls,the,link,inner,prepare,request,rest,request,node,client,method,and,then,checks,the,license,state,if,the,license,state,allows,auth,the,result,from,link,inner,prepare,request,rest,request,node,client,is,returned,otherwise,a,default,error,response,will,be,returned,indicating,that,security,is,not,licensed,note,the,implementing,rest,handler,is,called,before,the,license,is,checked,so,that,we,do,not,trip,the,unused,parameters,check;protected,final,rest,channel,consumer,prepare,request,rest,request,request,node,client,client,throws,ioexception,rest,channel,consumer,consumer,inner,prepare,request,request,client,final,exception,failed,feature,check,feature,available,request,if,failed,feature,null,return,consumer,else,return,channel,channel,send,response,new,bytes,rest,response,channel,failed,feature
SecurityBaseRestHandler -> protected final RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException;1532456624;Calls the {@link #innerPrepareRequest(RestRequest, NodeClient)} method and then checks the_license state. If the license state allows auth, the result from_{@link #innerPrepareRequest(RestRequest, NodeClient)} is returned, otherwise a default error_response will be returned indicating that security is not licensed.__Note: the implementing rest handler is called before the license is checked so that we do not_trip the unused parameters check;protected final RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {_        RestChannelConsumer consumer = innerPrepareRequest(request, client)__        final Exception failedFeature = checkFeatureAvailable(request)__        if (failedFeature == null) {_            return consumer__        } else {_            return channel -> channel.sendResponse(new BytesRestResponse(channel, failedFeature))__        }_    };calls,the,link,inner,prepare,request,rest,request,node,client,method,and,then,checks,the,license,state,if,the,license,state,allows,auth,the,result,from,link,inner,prepare,request,rest,request,node,client,is,returned,otherwise,a,default,error,response,will,be,returned,indicating,that,security,is,not,licensed,note,the,implementing,rest,handler,is,called,before,the,license,is,checked,so,that,we,do,not,trip,the,unused,parameters,check;protected,final,rest,channel,consumer,prepare,request,rest,request,request,node,client,client,throws,ioexception,rest,channel,consumer,consumer,inner,prepare,request,request,client,final,exception,failed,feature,check,feature,available,request,if,failed,feature,null,return,consumer,else,return,channel,channel,send,response,new,bytes,rest,response,channel,failed,feature
SecurityBaseRestHandler -> protected final RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException;1536828374;Calls the {@link #innerPrepareRequest(RestRequest, NodeClient)} method and then checks the_license state. If the license state allows auth, the result from_{@link #innerPrepareRequest(RestRequest, NodeClient)} is returned, otherwise a default error_response will be returned indicating that security is not licensed.__Note: the implementing rest handler is called before the license is checked so that we do not_trip the unused parameters check;protected final RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {_        RestChannelConsumer consumer = innerPrepareRequest(request, client)__        final Exception failedFeature = checkFeatureAvailable(request)__        if (failedFeature == null) {_            return consumer__        } else {_            return channel -> channel.sendResponse(new BytesRestResponse(channel, failedFeature))__        }_    };calls,the,link,inner,prepare,request,rest,request,node,client,method,and,then,checks,the,license,state,if,the,license,state,allows,auth,the,result,from,link,inner,prepare,request,rest,request,node,client,is,returned,otherwise,a,default,error,response,will,be,returned,indicating,that,security,is,not,licensed,note,the,implementing,rest,handler,is,called,before,the,license,is,checked,so,that,we,do,not,trip,the,unused,parameters,check;protected,final,rest,channel,consumer,prepare,request,rest,request,request,node,client,client,throws,ioexception,rest,channel,consumer,consumer,inner,prepare,request,request,client,final,exception,failed,feature,check,feature,available,request,if,failed,feature,null,return,consumer,else,return,channel,channel,send,response,new,bytes,rest,response,channel,failed,feature
SecurityBaseRestHandler -> protected final RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException;1541008027;Calls the {@link #innerPrepareRequest(RestRequest, NodeClient)} method and then checks the_license state. If the license state allows auth, the result from_{@link #innerPrepareRequest(RestRequest, NodeClient)} is returned, otherwise a default error_response will be returned indicating that security is not licensed.__Note: the implementing rest handler is called before the license is checked so that we do not_trip the unused parameters check;protected final RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {_        RestChannelConsumer consumer = innerPrepareRequest(request, client)__        final Exception failedFeature = checkFeatureAvailable(request)__        if (failedFeature == null) {_            return consumer__        } else {_            return channel -> channel.sendResponse(new BytesRestResponse(channel, failedFeature))__        }_    };calls,the,link,inner,prepare,request,rest,request,node,client,method,and,then,checks,the,license,state,if,the,license,state,allows,auth,the,result,from,link,inner,prepare,request,rest,request,node,client,is,returned,otherwise,a,default,error,response,will,be,returned,indicating,that,security,is,not,licensed,note,the,implementing,rest,handler,is,called,before,the,license,is,checked,so,that,we,do,not,trip,the,unused,parameters,check;protected,final,rest,channel,consumer,prepare,request,rest,request,request,node,client,client,throws,ioexception,rest,channel,consumer,consumer,inner,prepare,request,request,client,final,exception,failed,feature,check,feature,available,request,if,failed,feature,null,return,consumer,else,return,channel,channel,send,response,new,bytes,rest,response,channel,failed,feature
SecurityBaseRestHandler -> protected abstract RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException_;1524684173;Implementers should implement this method as they normally would for_{@link BaseRestHandler#prepareRequest(RestRequest, NodeClient)} and ensure that all request_parameters are consumed prior to returning a value. The returned value is not guaranteed to_be executed unless security is licensed and all request parameters are known;protected abstract RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException_;implementers,should,implement,this,method,as,they,normally,would,for,link,base,rest,handler,prepare,request,rest,request,node,client,and,ensure,that,all,request,parameters,are,consumed,prior,to,returning,a,value,the,returned,value,is,not,guaranteed,to,be,executed,unless,security,is,licensed,and,all,request,parameters,are,known;protected,abstract,rest,channel,consumer,inner,prepare,request,rest,request,request,node,client,client,throws,ioexception
SecurityBaseRestHandler -> protected abstract RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException_;1532456624;Implementers should implement this method as they normally would for_{@link BaseRestHandler#prepareRequest(RestRequest, NodeClient)} and ensure that all request_parameters are consumed prior to returning a value. The returned value is not guaranteed to_be executed unless security is licensed and all request parameters are known;protected abstract RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException_;implementers,should,implement,this,method,as,they,normally,would,for,link,base,rest,handler,prepare,request,rest,request,node,client,and,ensure,that,all,request,parameters,are,consumed,prior,to,returning,a,value,the,returned,value,is,not,guaranteed,to,be,executed,unless,security,is,licensed,and,all,request,parameters,are,known;protected,abstract,rest,channel,consumer,inner,prepare,request,rest,request,request,node,client,client,throws,ioexception
SecurityBaseRestHandler -> protected abstract RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException_;1536828374;Implementers should implement this method as they normally would for_{@link BaseRestHandler#prepareRequest(RestRequest, NodeClient)} and ensure that all request_parameters are consumed prior to returning a value. The returned value is not guaranteed to_be executed unless security is licensed and all request parameters are known;protected abstract RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException_;implementers,should,implement,this,method,as,they,normally,would,for,link,base,rest,handler,prepare,request,rest,request,node,client,and,ensure,that,all,request,parameters,are,consumed,prior,to,returning,a,value,the,returned,value,is,not,guaranteed,to,be,executed,unless,security,is,licensed,and,all,request,parameters,are,known;protected,abstract,rest,channel,consumer,inner,prepare,request,rest,request,request,node,client,client,throws,ioexception
SecurityBaseRestHandler -> protected abstract RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException_;1541008027;Implementers should implement this method as they normally would for_{@link BaseRestHandler#prepareRequest(RestRequest, NodeClient)} and ensure that all request_parameters are consumed prior to returning a value. The returned value is not guaranteed to_be executed unless security is licensed and all request parameters are known;protected abstract RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException_;implementers,should,implement,this,method,as,they,normally,would,for,link,base,rest,handler,prepare,request,rest,request,node,client,and,ensure,that,all,request,parameters,are,consumed,prior,to,returning,a,value,the,returned,value,is,not,guaranteed,to,be,executed,unless,security,is,licensed,and,all,request,parameters,are,known;protected,abstract,rest,channel,consumer,inner,prepare,request,rest,request,request,node,client,client,throws,ioexception
SecurityBaseRestHandler -> protected Exception checkFeatureAvailable(RestRequest request);1524684173;Check whether the given request is allowed within the current license state and setup,_and return the name of any unlicensed feature._By default this returns an exception is security is not available by the current license or_security is not enabled._Sub-classes can override this method if they have additional requirements.__@return {@code null} if all required features are available, otherwise an exception to be_sent to the requestor;protected Exception checkFeatureAvailable(RestRequest request) {_        if (licenseState.isSecurityAvailable() == false) {_            return LicenseUtils.newComplianceException(XPackField.SECURITY)__        } else if (licenseState.isSecurityEnabled() == false) {_            if (licenseState.isTrialLicense()) {_                return new ElasticsearchException("Security must be explicitly enabled when using a trial license. " +_                        "Enable security by setting [xpack.security.enabled] to [true] in the elasticsearch.yml file " +_                        "and restart the node.")__            } else {_                return new IllegalStateException("Security is not enabled but a security rest handler is registered")__            }_        } else {_            return null__        }_    };check,whether,the,given,request,is,allowed,within,the,current,license,state,and,setup,and,return,the,name,of,any,unlicensed,feature,by,default,this,returns,an,exception,is,security,is,not,available,by,the,current,license,or,security,is,not,enabled,sub,classes,can,override,this,method,if,they,have,additional,requirements,return,code,null,if,all,required,features,are,available,otherwise,an,exception,to,be,sent,to,the,requestor;protected,exception,check,feature,available,rest,request,request,if,license,state,is,security,available,false,return,license,utils,new,compliance,exception,xpack,field,security,else,if,license,state,is,security,enabled,false,if,license,state,is,trial,license,return,new,elasticsearch,exception,security,must,be,explicitly,enabled,when,using,a,trial,license,enable,security,by,setting,xpack,security,enabled,to,true,in,the,elasticsearch,yml,file,and,restart,the,node,else,return,new,illegal,state,exception,security,is,not,enabled,but,a,security,rest,handler,is,registered,else,return,null
SecurityBaseRestHandler -> protected Exception checkFeatureAvailable(RestRequest request);1532456624;Check whether the given request is allowed within the current license state and setup,_and return the name of any unlicensed feature._By default this returns an exception if security is not available by the current license or_security is not enabled._Sub-classes can override this method if they have additional requirements.__@return {@code null} if all required features are available, otherwise an exception to be_sent to the requestor;protected Exception checkFeatureAvailable(RestRequest request) {_        if (licenseState.isSecurityAvailable() == false) {_            return LicenseUtils.newComplianceException(XPackField.SECURITY)__        } else if (licenseState.isSecurityEnabled() == false) {_            if (licenseState.isTrialLicense()) {_                return new ElasticsearchException("Security must be explicitly enabled when using a trial license. " +_                        "Enable security by setting [xpack.security.enabled] to [true] in the elasticsearch.yml file " +_                        "and restart the node.")__            } else {_                return new IllegalStateException("Security is not enabled but a security rest handler is registered")__            }_        } else {_            return null__        }_    };check,whether,the,given,request,is,allowed,within,the,current,license,state,and,setup,and,return,the,name,of,any,unlicensed,feature,by,default,this,returns,an,exception,if,security,is,not,available,by,the,current,license,or,security,is,not,enabled,sub,classes,can,override,this,method,if,they,have,additional,requirements,return,code,null,if,all,required,features,are,available,otherwise,an,exception,to,be,sent,to,the,requestor;protected,exception,check,feature,available,rest,request,request,if,license,state,is,security,available,false,return,license,utils,new,compliance,exception,xpack,field,security,else,if,license,state,is,security,enabled,false,if,license,state,is,trial,license,return,new,elasticsearch,exception,security,must,be,explicitly,enabled,when,using,a,trial,license,enable,security,by,setting,xpack,security,enabled,to,true,in,the,elasticsearch,yml,file,and,restart,the,node,else,return,new,illegal,state,exception,security,is,not,enabled,but,a,security,rest,handler,is,registered,else,return,null
SecurityBaseRestHandler -> protected Exception checkFeatureAvailable(RestRequest request);1536828374;Check whether the given request is allowed within the current license state and setup,_and return the name of any unlicensed feature._By default this returns an exception if security is not available by the current license or_security is not enabled._Sub-classes can override this method if they have additional requirements.__@return {@code null} if all required features are available, otherwise an exception to be_sent to the requestor;protected Exception checkFeatureAvailable(RestRequest request) {_        if (XPackSettings.SECURITY_ENABLED.get(settings) == false) {_            return new IllegalStateException("Security is not enabled but a security rest handler is registered")__        } else if (licenseState.isSecurityAvailable() == false) {_            return LicenseUtils.newComplianceException(XPackField.SECURITY)__        } else if (licenseState.isSecurityDisabledByTrialLicense()) {_            return new ElasticsearchException("Security must be explicitly enabled when using a trial license. " +_                    "Enable security by setting [xpack.security.enabled] to [true] in the elasticsearch.yml file " +_                    "and restart the node.")__        } else {_            return null__        }_    };check,whether,the,given,request,is,allowed,within,the,current,license,state,and,setup,and,return,the,name,of,any,unlicensed,feature,by,default,this,returns,an,exception,if,security,is,not,available,by,the,current,license,or,security,is,not,enabled,sub,classes,can,override,this,method,if,they,have,additional,requirements,return,code,null,if,all,required,features,are,available,otherwise,an,exception,to,be,sent,to,the,requestor;protected,exception,check,feature,available,rest,request,request,if,xpack,settings,get,settings,false,return,new,illegal,state,exception,security,is,not,enabled,but,a,security,rest,handler,is,registered,else,if,license,state,is,security,available,false,return,license,utils,new,compliance,exception,xpack,field,security,else,if,license,state,is,security,disabled,by,trial,license,return,new,elasticsearch,exception,security,must,be,explicitly,enabled,when,using,a,trial,license,enable,security,by,setting,xpack,security,enabled,to,true,in,the,elasticsearch,yml,file,and,restart,the,node,else,return,null
SecurityBaseRestHandler -> protected Exception checkFeatureAvailable(RestRequest request);1541008027;Check whether the given request is allowed within the current license state and setup,_and return the name of any unlicensed feature._By default this returns an exception if security is not available by the current license or_security is not enabled._Sub-classes can override this method if they have additional requirements.__@return {@code null} if all required features are available, otherwise an exception to be_sent to the requestor;protected Exception checkFeatureAvailable(RestRequest request) {_        if (XPackSettings.SECURITY_ENABLED.get(settings) == false) {_            return new IllegalStateException("Security is not enabled but a security rest handler is registered")__        } else if (licenseState.isSecurityAvailable() == false) {_            return LicenseUtils.newComplianceException(XPackField.SECURITY)__        } else if (licenseState.isSecurityDisabledByTrialLicense()) {_            return new ElasticsearchException("Security must be explicitly enabled when using a trial license. " +_                    "Enable security by setting [xpack.security.enabled] to [true] in the elasticsearch.yml file " +_                    "and restart the node.")__        } else {_            return null__        }_    };check,whether,the,given,request,is,allowed,within,the,current,license,state,and,setup,and,return,the,name,of,any,unlicensed,feature,by,default,this,returns,an,exception,if,security,is,not,available,by,the,current,license,or,security,is,not,enabled,sub,classes,can,override,this,method,if,they,have,additional,requirements,return,code,null,if,all,required,features,are,available,otherwise,an,exception,to,be,sent,to,the,requestor;protected,exception,check,feature,available,rest,request,request,if,xpack,settings,get,settings,false,return,new,illegal,state,exception,security,is,not,enabled,but,a,security,rest,handler,is,registered,else,if,license,state,is,security,available,false,return,license,utils,new,compliance,exception,xpack,field,security,else,if,license,state,is,security,disabled,by,trial,license,return,new,elasticsearch,exception,security,must,be,explicitly,enabled,when,using,a,trial,license,enable,security,by,setting,xpack,security,enabled,to,true,in,the,elasticsearch,yml,file,and,restart,the,node,else,return,null
