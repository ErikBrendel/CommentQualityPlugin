commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(id).     authentication.writeTo(out).     out.writeLong(expirationTime.getEpochSecond()).     out.writeInt(expirationTime.getNano()).     if (out.getVersion().onOrAfter(Version.V_6_2_0)) {         out.writeMap(metadata).     } }
true;;0;3;/**  * Get the authentication  */ ;/**  * Get the authentication  */ Authentication getAuthentication() {     return authentication. }
true;;0;3;/**  * Get the expiration time  */ ;/**  * Get the expiration time  */ Instant getExpirationTime() {     return expirationTime. }
true;public;0;3;/**  * The ID of this token  */ ;/**  * The ID of this token  */ public String getId() {     return id. }
true;;0;3;/**  * The version of the node this token was created on  */ ;/**  * The version of the node this token was created on  */ Version getVersion() {     return version. }
true;public;0;3;/**  * The metadata associated with this token  */ ;/**  * The metadata associated with this token  */ public Map<String, Object> getMetadata() {     return metadata. }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("id", id).     builder.field("expiration_time", expirationTime.toEpochMilli()).     builder.field("version", version.id).     builder.field("metadata", metadata).     try (BytesStreamOutput output = new BytesStreamOutput()) {         output.setVersion(version).         authentication.writeTo(output).         builder.field("authentication", output.bytes().toBytesRef().bytes).     }     return builder.endObject(). }
false;static;1;13;;static UserToken fromSourceMap(Map<String, Object> source) throws IOException {     final String id = (String) source.get("id").     final Long expirationEpochMilli = (Long) source.get("expiration_time").     final Integer versionId = (Integer) source.get("version").     final Map<String, Object> metadata = (Map<String, Object>) source.get("metadata").     final String authString = (String) source.get("authentication").     final Version version = Version.fromId(versionId).     try (StreamInput in = StreamInput.wrap(Base64.getDecoder().decode(authString))) {         in.setVersion(version).         Authentication authentication = new Authentication(in).         return new UserToken(id, version, authentication, Instant.ofEpochMilli(expirationEpochMilli), metadata).     } }
