commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "security_put_privileges_action". }
false;public;2;8;;@Override public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {     PutPrivilegesRequestBuilder requestBuilder = new SecurityClient(client).preparePutPrivileges(request.requiredContent(), request.getXContentType()).setRefreshPolicy(request.param("refresh")).     return execute(requestBuilder). }
false;public;2;16;;@Override public RestResponse buildResponse(PutPrivilegesResponse response, XContentBuilder builder) throws Exception {     final List<ApplicationPrivilegeDescriptor> privileges = requestBuilder.request().getPrivileges().     Map<String, Map<String, Map<String, Boolean>>> result = new HashMap<>().     privileges.stream().map(ApplicationPrivilegeDescriptor::getApplication).distinct().forEach(a -> result.put(a, new HashMap<>())).     privileges.forEach(privilege -> {         String name = privilege.getName().         boolean created = response.created().getOrDefault(privilege.getApplication(), Collections.emptyList()).contains(name).         result.get(privilege.getApplication()).put(name, Collections.singletonMap("created", created)).     }).     builder.map(result).     return new BytesRestResponse(RestStatus.OK, builder). }
false;static;1;20;;static RestChannelConsumer execute(PutPrivilegesRequestBuilder requestBuilder) {     return channel -> requestBuilder.execute(new RestBuilderListener<PutPrivilegesResponse>(channel) {          @Override         public RestResponse buildResponse(PutPrivilegesResponse response, XContentBuilder builder) throws Exception {             final List<ApplicationPrivilegeDescriptor> privileges = requestBuilder.request().getPrivileges().             Map<String, Map<String, Map<String, Boolean>>> result = new HashMap<>().             privileges.stream().map(ApplicationPrivilegeDescriptor::getApplication).distinct().forEach(a -> result.put(a, new HashMap<>())).             privileges.forEach(privilege -> {                 String name = privilege.getName().                 boolean created = response.created().getOrDefault(privilege.getApplication(), Collections.emptyList()).contains(name).                 result.get(privilege.getApplication()).put(name, Collections.singletonMap("created", created)).             }).             builder.map(result).             return new BytesRestResponse(RestStatus.OK, builder).         }     }). }
