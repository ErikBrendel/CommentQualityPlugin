commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "security_delete_privilege_action". }
false;public;2;11;;@Override public RestResponse buildResponse(DeletePrivilegesResponse response, XContentBuilder builder) throws Exception {     builder.startObject().     builder.startObject(application).     for (String privilege : new HashSet<>(Arrays.asList(privileges))) {         builder.field(privilege, Collections.singletonMap("found", response.found().contains(privilege))).     }     builder.endObject().     builder.endObject().     return new BytesRestResponse(response.found().isEmpty() ? RestStatus.NOT_FOUND : RestStatus.OK, builder). }
false;public;2;21;;@Override public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {     final String application = request.param("application").     final String[] privileges = request.paramAsStringArray("privilege", null).     final String refresh = request.param("refresh").     return channel -> new SecurityClient(client).prepareDeletePrivileges(application, privileges).setRefreshPolicy(refresh).execute(new RestBuilderListener<DeletePrivilegesResponse>(channel) {          @Override         public RestResponse buildResponse(DeletePrivilegesResponse response, XContentBuilder builder) throws Exception {             builder.startObject().             builder.startObject(application).             for (String privilege : new HashSet<>(Arrays.asList(privileges))) {                 builder.field(privilege, Collections.singletonMap("found", response.found().contains(privilege))).             }             builder.endObject().             builder.endObject().             return new BytesRestResponse(response.found().isEmpty() ? RestStatus.NOT_FOUND : RestStatus.OK, builder).         }     }). }
