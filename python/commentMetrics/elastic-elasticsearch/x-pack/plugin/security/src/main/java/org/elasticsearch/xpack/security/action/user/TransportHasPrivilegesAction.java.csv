commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;15;;@Override protected void doExecute(Task task, HasPrivilegesRequest request, ActionListener<HasPrivilegesResponse> listener) {     final String username = request.username().     final Authentication authentication = Authentication.getAuthentication(threadPool.getThreadContext()).     final User user = authentication.getUser().     if (user.principal().equals(username) == false) {         listener.onFailure(new IllegalArgumentException("users may only check the privileges of their own account")).         return.     }     resolveApplicationPrivileges(request, ActionListener.wrap(applicationPrivilegeDescriptors -> authorizationService.checkPrivileges(authentication, request, applicationPrivilegeDescriptors, listener), listener::onFailure)). }
false;private;2;5;;private void resolveApplicationPrivileges(HasPrivilegesRequest request, ActionListener<Collection<ApplicationPrivilegeDescriptor>> listener) {     final Set<String> applications = getApplicationNames(request).     privilegeStore.getPrivileges(applications, null, listener). }
false;public,static;1;5;;public static Set<String> getApplicationNames(HasPrivilegesRequest request) {     return Arrays.stream(request.applicationPrivileges()).map(RoleDescriptor.ApplicationResourcePrivileges::getApplication).collect(Collectors.toSet()). }
