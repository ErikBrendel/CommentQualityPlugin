commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean matches(InetSocketAddress remoteAddress) {     return true. }
false;public;0;4;;@Override public IpFilterRuleType ruleType() {     return IpFilterRuleType.ACCEPT. }
false;public;1;4;;@Override public boolean matches(InetSocketAddress remoteAddress) {     return true. }
false;public;0;4;;@Override public IpFilterRuleType ruleType() {     return IpFilterRuleType.REJECT. }
false;public;0;12;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     if (ruleType() == IpFilterRuleType.ACCEPT) {         builder.append("allow ").     } else {         builder.append("deny ").     }     builder.append(ruleSpec).     return builder.toString(). }
false;static;1;25;;static Tuple<InetAddress, Integer> parseSubnetMask(String address) throws UnknownHostException {     int p = address.indexOf('/').     if (p < 0) {         throw new UnknownHostException("Invalid CIDR notation used: " + address).     }     if (p == address.length() - 1) {         throw new IllegalArgumentException("address must not end with a '/").     }     String addrString = address.substring(0, p).     String maskString = address.substring(p + 1).     InetAddress addr = InetAddress.getByName(addrString).     int mask.     if (maskString.indexOf('.') < 0) {         mask = parseInt(maskString, -1).     } else {         mask = getNetMask(maskString).         if (addr instanceof Inet6Address) {             mask += 96.         }     }     if (mask < 0) {         throw new UnknownHostException("Invalid mask length used: " + maskString).     }     return new Tuple<>(addr, mask). }
true;private,static;1;14;/**  * Get the Subnet's Netmask in Decimal format.<BR>  * i.e.: getNetMask("255.255.255.0") returns the integer CIDR mask  *  * @param netMask a network mask  * @return the integer CIDR mask  */ ;/**  * Get the Subnet's Netmask in Decimal format.<BR>  * i.e.: getNetMask("255.255.255.0") returns the integer CIDR mask  *  * @param netMask a network mask  * @return the integer CIDR mask  */ private static int getNetMask(String netMask) {     StringTokenizer nm = new StringTokenizer(netMask, ".").     int i = 0.     int[] netmask = new int[4].     while (nm.hasMoreTokens()) {         netmask[i] = Integer.parseInt(nm.nextToken()).         i++.     }     int mask1 = 0.     for (i = 0. i < 4. i++) {         mask1 += Integer.bitCount(netmask[i]).     }     return mask1. }
true;private,static;2;12;/**  * @param intstr a string containing an integer.  * @param def    the default if the string does not contain a valid  *               integer.  * @return the inetAddress from the integer  */ ;/**  * @param intstr a string containing an integer.  * @param def    the default if the string does not contain a valid  *               integer.  * @return the inetAddress from the integer  */ private static int parseInt(String intstr, int def) {     Integer res.     if (intstr == null) {         return def.     }     try {         res = Integer.decode(intstr).     } catch (Exception e) {         res = def.     }     return res.intValue(). }
false;static;2;41;;static IpFilterRule getRule(boolean isAllowRule, String value) {     IpFilterRuleType filterRuleType = isAllowRule ? IpFilterRuleType.ACCEPT : IpFilterRuleType.REJECT.     String[] values = value.split(",").     if (Arrays.stream(values).anyMatch("_all"::equals)) {         // all rule was found. It should be the only rule!         if (values.length != 1) {             throw new IllegalArgumentException("rules that specify _all may not have other values!").         }         return isAllowRule ? ACCEPT_ALL : DENY_ALL.     }     if (value.contains("/")) {         // subnet rule...         if (values.length != 1) {             throw new IllegalArgumentException("multiple subnet filters cannot be specified in a single rule!").         }         try {             Tuple<InetAddress, Integer> inetAddressIntegerTuple = parseSubnetMask(value).             return new IpSubnetFilterRule(inetAddressIntegerTuple.v1(), inetAddressIntegerTuple.v2(), filterRuleType).         } catch (UnknownHostException e) {             String ruleType = (isAllowRule ? "allow " : "deny ").             throw new ElasticsearchException("unable to create ip filter for rule [" + ruleType + " " + value + "]", e).         }     } else {         // pattern rule - not netmask         StringJoiner rules = new StringJoiner(",").         for (String pattern : values) {             if (InetAddresses.isInetAddress(pattern)) {                 // we want the inet addresses to be normalized especially in the IPv6 case where :0:0: is equivalent to ::                 // that's why we convert the address here and then format since PatternRule also uses the formatting to normalize                 // the value we are matching against                 InetAddress inetAddress = InetAddresses.forString(pattern).                 pattern = "i:" + NetworkAddress.format(inetAddress).             } else {                 pattern = "n:" + pattern.             }             rules.add(pattern).         }         return new PatternRule(filterRuleType, rules.toString()).     } }
false;static;1;14;;static String getRuleSpec(TransportAddress... addresses) {     StringBuilder ruleSpec = new StringBuilder().     boolean firstAdded = false.     for (TransportAddress transportAddress : addresses) {         if (firstAdded) {             ruleSpec.append(",").         } else {             firstAdded = true.         }         ruleSpec.append(NetworkAddress.format(transportAddress.address().getAddress())).     }     return ruleSpec.toString(). }
false;public;1;4;;@Override public boolean matches(InetSocketAddress remoteAddress) {     return ipFilterRule.matches(remoteAddress). }
false;public;0;4;;@Override public IpFilterRuleType ruleType() {     return ipFilterRule.ruleType(). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.value(toString()). }
