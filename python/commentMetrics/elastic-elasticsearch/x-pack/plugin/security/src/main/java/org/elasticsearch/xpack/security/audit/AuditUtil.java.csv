commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;10;;public static String restRequestContent(RestRequest request) {     if (request.hasContent()) {         try {             return XContentHelper.convertToJson(request.content(), false, false, request.getXContentType()).         } catch (IOException ioe) {             return "Invalid Format: " + request.content().utf8ToString().         }     }     return "". }
false;public,static;1;6;;public static Set<String> indices(TransportMessage message) {     if (message instanceof IndicesRequest) {         return arrayToSetOrNull(((IndicesRequest) message).indices()).     }     return null. }
false;private,static;1;3;;private static Set<String> arrayToSetOrNull(String[] indices) {     return indices == null ? null : new HashSet<>(Arrays.asList(indices)). }
false;public,static;1;3;;public static String generateRequestId(ThreadContext threadContext) {     return generateRequestId(threadContext, true). }
false;public,static;1;7;;public static String getOrGenerateRequestId(ThreadContext threadContext) {     final String requestId = extractRequestId(threadContext).     if (Strings.isEmpty(requestId)) {         return generateRequestId(threadContext, false).     }     return requestId. }
false;private,static;2;13;;private static String generateRequestId(ThreadContext threadContext, boolean checkExisting) {     if (checkExisting) {         final String existing = extractRequestId(threadContext).         if (existing != null) {             throw new IllegalStateException("Cannot generate a new audit request id - existing id [" + existing + "] already registered").         }     }     final String requestId = UUIDs.randomBase64UUID().     // Store as a header (not transient) so that it is passed over the network if this request requires execution on other nodes     threadContext.putHeader(AUDIT_REQUEST_ID, requestId).     return requestId. }
false;public,static;1;3;;public static String extractRequestId(ThreadContext threadContext) {     return threadContext.getHeader(AUDIT_REQUEST_ID). }
