commented;modifiers;parameterAmount;loc;comment;code
false;static;1;9;;static boolean hasUserSearchSettings(RealmConfig config) {     return Stream.of(LdapUserSearchSessionFactorySettings.SEARCH_BASE_DN, LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE, LdapUserSearchSessionFactorySettings.SEARCH_SCOPE, LdapUserSearchSessionFactorySettings.SEARCH_FILTER, LdapUserSearchSessionFactorySettings.POOL_ENABLED).anyMatch(config::hasSetting). }
false;protected;0;5;;@Override protected void doRun() throws Exception {     listener.onResponse(new LdapSession(logger, config, connectionPool, dn, groupResolver, metaDataResolver, timeout, entry.getAttributes())). }
true;;4;19;/**  * Sets up a LDAPSession using the connection pool that potentially holds existing connections to the server  */ ;/**  * Sets up a LDAPSession using the connection pool that potentially holds existing connections to the server  */ @Override void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password, ActionListener<LdapSession> listener) {     findUser(user, connectionPool, ActionListener.wrap((entry) -> {         if (entry == null) {             listener.onResponse(null).         } else {             final String dn = entry.getDN().             final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars()).             final SimpleBindRequest bind = new SimpleBindRequest(dn, passwordBytes).             LdapUtils.maybeForkThenBindAndRevert(connectionPool, bind, threadPool, new ActionRunnable<LdapSession>(listener) {                  @Override                 protected void doRun() throws Exception {                     listener.onResponse(new LdapSession(logger, config, connectionPool, dn, groupResolver, metaDataResolver, timeout, entry.getAttributes())).                 }             }).         }     }, listener::onFailure)). }
false;protected;0;5;;@Override protected void doRun() throws Exception {     listener.onResponse(new LdapSession(logger, config, connection, dn, groupResolver, metaDataResolver, timeout, entry.getAttributes())). }
false;public;1;5;;@Override public void onFailure(Exception e) {     IOUtils.closeWhileHandlingException(connection).     listener.onFailure(e). }
false;protected;0;17;;@Override protected void doRun() throws Exception {     LdapUtils.maybeForkThenBind(connection, bindCredentials, threadPool, new AbstractRunnable() {          @Override         protected void doRun() throws Exception {             listener.onResponse(new LdapSession(logger, config, connection, dn, groupResolver, metaDataResolver, timeout, entry.getAttributes())).         }          @Override         public void onFailure(Exception e) {             IOUtils.closeWhileHandlingException(connection).             listener.onFailure(e).         }     }). }
false;public;1;5;;@Override public void onFailure(Exception e) {     IOUtils.closeWhileHandlingException(connection).     listener.onFailure(e). }
false;protected;0;41;;@Override protected void doRun() throws Exception {     findUser(user, connection, ActionListener.wrap((entry) -> {         if (entry == null) {             IOUtils.close(connection).             listener.onResponse(null).         } else {             final String dn = entry.getDN().             final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars()).             final SimpleBindRequest userBind = new SimpleBindRequest(dn, passwordBytes).             LdapUtils.maybeForkThenBind(connection, userBind, threadPool, new AbstractRunnable() {                  @Override                 protected void doRun() throws Exception {                     LdapUtils.maybeForkThenBind(connection, bindCredentials, threadPool, new AbstractRunnable() {                          @Override                         protected void doRun() throws Exception {                             listener.onResponse(new LdapSession(logger, config, connection, dn, groupResolver, metaDataResolver, timeout, entry.getAttributes())).                         }                          @Override                         public void onFailure(Exception e) {                             IOUtils.closeWhileHandlingException(connection).                             listener.onFailure(e).                         }                     }).                 }                  @Override                 public void onFailure(Exception e) {                     IOUtils.closeWhileHandlingException(connection).                     listener.onFailure(e).                 }             }).         }     }, e -> {         IOUtils.closeWhileHandlingException(connection).         listener.onFailure(e).     })). }
false;public;1;5;;@Override public void onFailure(Exception e) {     IOUtils.closeWhileHandlingException(connection).     listener.onFailure(e). }
true;;3;57;/**  * Sets up a LDAPSession using the following process:  * <ol>  * <li>Opening a new connection to the LDAP server</li>  * <li>Executes a bind request using the bind user</li>  * <li>Executes a search to find the DN of the user</li>  * <li>Closes the opened connection</li>  * <li>Opens a new connection to the LDAP server</li>  * <li>Executes a bind request using the found DN and provided password</li>  * <li>Creates a new LDAPSession with the bound connection</li>  * </ol>  */ ;/**  * Sets up a LDAPSession using the following process:  * <ol>  * <li>Opening a new connection to the LDAP server</li>  * <li>Executes a bind request using the bind user</li>  * <li>Executes a search to find the DN of the user</li>  * <li>Closes the opened connection</li>  * <li>Opens a new connection to the LDAP server</li>  * <li>Executes a bind request using the found DN and provided password</li>  * <li>Creates a new LDAPSession with the bound connection</li>  * </ol>  */ @Override void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener) {     try {         final LDAPConnection connection = LdapUtils.privilegedConnect(serverSet::getConnection).         LdapUtils.maybeForkThenBind(connection, bindCredentials, threadPool, new AbstractRunnable() {              @Override             protected void doRun() throws Exception {                 findUser(user, connection, ActionListener.wrap((entry) -> {                     if (entry == null) {                         IOUtils.close(connection).                         listener.onResponse(null).                     } else {                         final String dn = entry.getDN().                         final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars()).                         final SimpleBindRequest userBind = new SimpleBindRequest(dn, passwordBytes).                         LdapUtils.maybeForkThenBind(connection, userBind, threadPool, new AbstractRunnable() {                              @Override                             protected void doRun() throws Exception {                                 LdapUtils.maybeForkThenBind(connection, bindCredentials, threadPool, new AbstractRunnable() {                                      @Override                                     protected void doRun() throws Exception {                                         listener.onResponse(new LdapSession(logger, config, connection, dn, groupResolver, metaDataResolver, timeout, entry.getAttributes())).                                     }                                      @Override                                     public void onFailure(Exception e) {                                         IOUtils.closeWhileHandlingException(connection).                                         listener.onFailure(e).                                     }                                 }).                             }                              @Override                             public void onFailure(Exception e) {                                 IOUtils.closeWhileHandlingException(connection).                                 listener.onFailure(e).                             }                         }).                     }                 }, e -> {                     IOUtils.closeWhileHandlingException(connection).                     listener.onFailure(e).                 })).             }              @Override             public void onFailure(Exception e) {                 IOUtils.closeWhileHandlingException(connection).                 listener.onFailure(e).             }         }).     } catch (LDAPException e) {         listener.onFailure(e).     } }
false;public;0;4;;@Override public boolean supportsUnauthenticatedSession() {     return true. }
false;;3;13;;@Override void getUnauthenticatedSessionWithPool(LDAPConnectionPool connectionPool, String user, ActionListener<LdapSession> listener) {     findUser(user, connectionPool, ActionListener.wrap((entry) -> {         if (entry == null) {             listener.onResponse(null).         } else {             final String dn = entry.getDN().             LdapSession session = new LdapSession(logger, config, connectionPool, dn, groupResolver, metaDataResolver, timeout, entry.getAttributes()).             listener.onResponse(session).         }     }, listener::onFailure)). }
false;protected;0;15;;@Override protected void doRun() throws Exception {     findUser(user, connection, ActionListener.wrap((entry) -> {         if (entry == null) {             IOUtils.close(connection).             listener.onResponse(null).         } else {             listener.onResponse(new LdapSession(logger, config, connection, entry.getDN(), groupResolver, metaDataResolver, timeout, entry.getAttributes())).         }     }, e -> {         IOUtils.closeWhileHandlingException(connection).         listener.onFailure(e).     })). }
false;public;1;5;;@Override public void onFailure(Exception e) {     IOUtils.closeWhileHandlingException(connection).     listener.onFailure(e). }
false;;2;31;;@Override void getUnauthenticatedSessionWithoutPool(String user, ActionListener<LdapSession> listener) {     try {         final LDAPConnection connection = LdapUtils.privilegedConnect(serverSet::getConnection).         LdapUtils.maybeForkThenBind(connection, bindCredentials, threadPool, new AbstractRunnable() {              @Override             protected void doRun() throws Exception {                 findUser(user, connection, ActionListener.wrap((entry) -> {                     if (entry == null) {                         IOUtils.close(connection).                         listener.onResponse(null).                     } else {                         listener.onResponse(new LdapSession(logger, config, connection, entry.getDN(), groupResolver, metaDataResolver, timeout, entry.getAttributes())).                     }                 }, e -> {                     IOUtils.closeWhileHandlingException(connection).                     listener.onFailure(e).                 })).             }              @Override             public void onFailure(Exception e) {                 IOUtils.closeWhileHandlingException(connection).                 listener.onFailure(e).             }         }).     } catch (LDAPException e) {         listener.onFailure(e).     } }
false;private;3;13;;private void findUser(String user, LDAPInterface ldapInterface, ActionListener<SearchResultEntry> listener) {     final Filter filter.     try {         filter = createFilter(searchFilter, user).     } catch (LDAPException e) {         listener.onFailure(e).         return.     }     searchForEntry(ldapInterface, userSearchBaseDn, scope.scope(), filter, Math.toIntExact(timeout.seconds()), ignoreReferralErrors, listener, attributesToSearchFor(groupResolver.attributes(), metaDataResolver.attributeNames())). }
false;private,static;1;6;;private static GroupsResolver groupResolver(RealmConfig realmConfig) {     if (realmConfig.hasSetting(SearchGroupsResolverSettings.BASE_DN)) {         return new SearchGroupsResolver(realmConfig).     }     return new UserAttributeGroupsResolver(realmConfig). }
false;static;1;17;;static String getSearchFilter(RealmConfig config) {     final boolean hasAttribute = config.hasSetting(LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE).     final boolean hasFilter = config.hasSetting(LdapUserSearchSessionFactorySettings.SEARCH_FILTER).     if (hasAttribute && hasFilter) {         throw new IllegalArgumentException("search attribute setting [" + RealmSettings.getFullSettingKey(config, LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE) + "] and filter setting [" + RealmSettings.getFullSettingKey(config, LdapUserSearchSessionFactorySettings.SEARCH_FILTER) + "] cannot be combined!").     } else if (hasFilter) {         return config.getSetting(LdapUserSearchSessionFactorySettings.SEARCH_FILTER).     } else if (hasAttribute) {         return "(" + config.getSetting(LdapUserSearchSessionFactorySettings.SEARCH_ATTRIBUTE) + "={0})".     } else {         return "(uid={0})".     } }
