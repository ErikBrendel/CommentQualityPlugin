# id;timestamp;commentText;codeText;commentWords;codeWords
LdapUserSearchSessionFactory -> @Override     void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener);1524684173;Sets up a LDAPSession using the following process:_<ol>_<li>Opening a new connection to the LDAP server</li>_<li>Executes a bind request using the bind user</li>_<li>Executes a search to find the DN of the user</li>_<li>Closes the opened connection</li>_<li>Opens a new connection to the LDAP server</li>_<li>Executes a bind request using the found DN and provided password</li>_<li>Creates a new LDAPSession with the bound connection</li>_</ol>;@Override_    void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener) {_        try {_            final LDAPConnection connection = LdapUtils.privilegedConnect(serverSet::getConnection)__            LdapUtils.maybeForkThenBind(connection, bindCredentials, threadPool, new AbstractRunnable() {_                @Override_                protected void doRun() throws Exception {_                    findUser(user, connection, ActionListener.wrap((entry) -> {_                        if (entry == null) {_                            IOUtils.close(connection)__                            listener.onResponse(null)__                        } else {_                            final String dn = entry.getDN()__                            final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars())__                            final SimpleBindRequest userBind = new SimpleBindRequest(dn, passwordBytes)__                            LdapUtils.maybeForkThenBind(connection, userBind, threadPool, new AbstractRunnable() {_                                @Override_                                protected void doRun() throws Exception {_                                    LdapUtils.maybeForkThenBind(connection, bindCredentials, threadPool, new AbstractRunnable() {__                                        @Override_                                        protected void doRun() throws Exception {_                                            listener.onResponse(new LdapSession(logger, config, connection, dn, groupResolver,_                                                    metaDataResolver, timeout, entry.getAttributes()))__                                        }__                                        @Override_                                        public void onFailure(Exception e) {_                                            IOUtils.closeWhileHandlingException(connection)__                                            listener.onFailure(e)__                                        }_                                    })__                                }__                                @Override_                                public void onFailure(Exception e) {_                                    IOUtils.closeWhileHandlingException(connection)__                                    listener.onFailure(e)__                                }_                            })__                        }_                    }, e -> {_                        IOUtils.closeWhileHandlingException(connection)__                        listener.onFailure(e)__                    }))__                }_                @Override_                public void onFailure(Exception e) {_                    IOUtils.closeWhileHandlingException(connection)__                    listener.onFailure(e)__                }_            })__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };sets,up,a,ldapsession,using,the,following,process,ol,li,opening,a,new,connection,to,the,ldap,server,li,li,executes,a,bind,request,using,the,bind,user,li,li,executes,a,search,to,find,the,dn,of,the,user,li,li,closes,the,opened,connection,li,li,opens,a,new,connection,to,the,ldap,server,li,li,executes,a,bind,request,using,the,found,dn,and,provided,password,li,li,creates,a,new,ldapsession,with,the,bound,connection,li,ol;override,void,get,session,without,pool,string,user,secure,string,password,action,listener,ldap,session,listener,try,final,ldapconnection,connection,ldap,utils,privileged,connect,server,set,get,connection,ldap,utils,maybe,fork,then,bind,connection,bind,credentials,thread,pool,new,abstract,runnable,override,protected,void,do,run,throws,exception,find,user,user,connection,action,listener,wrap,entry,if,entry,null,ioutils,close,connection,listener,on,response,null,else,final,string,dn,entry,get,dn,final,byte,password,bytes,char,arrays,to,utf8bytes,password,get,chars,final,simple,bind,request,user,bind,new,simple,bind,request,dn,password,bytes,ldap,utils,maybe,fork,then,bind,connection,user,bind,thread,pool,new,abstract,runnable,override,protected,void,do,run,throws,exception,ldap,utils,maybe,fork,then,bind,connection,bind,credentials,thread,pool,new,abstract,runnable,override,protected,void,do,run,throws,exception,listener,on,response,new,ldap,session,logger,config,connection,dn,group,resolver,meta,data,resolver,timeout,entry,get,attributes,override,public,void,on,failure,exception,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,override,public,void,on,failure,exception,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,override,public,void,on,failure,exception,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,catch,ldapexception,e,listener,on,failure,e
LdapUserSearchSessionFactory -> @Override     void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener);1534434117;Sets up a LDAPSession using the following process:_<ol>_<li>Opening a new connection to the LDAP server</li>_<li>Executes a bind request using the bind user</li>_<li>Executes a search to find the DN of the user</li>_<li>Closes the opened connection</li>_<li>Opens a new connection to the LDAP server</li>_<li>Executes a bind request using the found DN and provided password</li>_<li>Creates a new LDAPSession with the bound connection</li>_</ol>;@Override_    void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener) {_        try {_            final LDAPConnection connection = LdapUtils.privilegedConnect(serverSet::getConnection)__            LdapUtils.maybeForkThenBind(connection, bindCredentials, threadPool, new AbstractRunnable() {_                @Override_                protected void doRun() throws Exception {_                    findUser(user, connection, ActionListener.wrap((entry) -> {_                        if (entry == null) {_                            IOUtils.close(connection)__                            listener.onResponse(null)__                        } else {_                            final String dn = entry.getDN()__                            final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars())__                            final SimpleBindRequest userBind = new SimpleBindRequest(dn, passwordBytes)__                            LdapUtils.maybeForkThenBind(connection, userBind, threadPool, new AbstractRunnable() {_                                @Override_                                protected void doRun() throws Exception {_                                    LdapUtils.maybeForkThenBind(connection, bindCredentials, threadPool, new AbstractRunnable() {__                                        @Override_                                        protected void doRun() throws Exception {_                                            listener.onResponse(new LdapSession(logger, config, connection, dn, groupResolver,_                                                    metaDataResolver, timeout, entry.getAttributes()))__                                        }__                                        @Override_                                        public void onFailure(Exception e) {_                                            IOUtils.closeWhileHandlingException(connection)__                                            listener.onFailure(e)__                                        }_                                    })__                                }__                                @Override_                                public void onFailure(Exception e) {_                                    IOUtils.closeWhileHandlingException(connection)__                                    listener.onFailure(e)__                                }_                            })__                        }_                    }, e -> {_                        IOUtils.closeWhileHandlingException(connection)__                        listener.onFailure(e)__                    }))__                }_                @Override_                public void onFailure(Exception e) {_                    IOUtils.closeWhileHandlingException(connection)__                    listener.onFailure(e)__                }_            })__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };sets,up,a,ldapsession,using,the,following,process,ol,li,opening,a,new,connection,to,the,ldap,server,li,li,executes,a,bind,request,using,the,bind,user,li,li,executes,a,search,to,find,the,dn,of,the,user,li,li,closes,the,opened,connection,li,li,opens,a,new,connection,to,the,ldap,server,li,li,executes,a,bind,request,using,the,found,dn,and,provided,password,li,li,creates,a,new,ldapsession,with,the,bound,connection,li,ol;override,void,get,session,without,pool,string,user,secure,string,password,action,listener,ldap,session,listener,try,final,ldapconnection,connection,ldap,utils,privileged,connect,server,set,get,connection,ldap,utils,maybe,fork,then,bind,connection,bind,credentials,thread,pool,new,abstract,runnable,override,protected,void,do,run,throws,exception,find,user,user,connection,action,listener,wrap,entry,if,entry,null,ioutils,close,connection,listener,on,response,null,else,final,string,dn,entry,get,dn,final,byte,password,bytes,char,arrays,to,utf8bytes,password,get,chars,final,simple,bind,request,user,bind,new,simple,bind,request,dn,password,bytes,ldap,utils,maybe,fork,then,bind,connection,user,bind,thread,pool,new,abstract,runnable,override,protected,void,do,run,throws,exception,ldap,utils,maybe,fork,then,bind,connection,bind,credentials,thread,pool,new,abstract,runnable,override,protected,void,do,run,throws,exception,listener,on,response,new,ldap,session,logger,config,connection,dn,group,resolver,meta,data,resolver,timeout,entry,get,attributes,override,public,void,on,failure,exception,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,override,public,void,on,failure,exception,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,override,public,void,on,failure,exception,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,catch,ldapexception,e,listener,on,failure,e
LdapUserSearchSessionFactory -> @Override     void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener);1541476610;Sets up a LDAPSession using the following process:_<ol>_<li>Opening a new connection to the LDAP server</li>_<li>Executes a bind request using the bind user</li>_<li>Executes a search to find the DN of the user</li>_<li>Closes the opened connection</li>_<li>Opens a new connection to the LDAP server</li>_<li>Executes a bind request using the found DN and provided password</li>_<li>Creates a new LDAPSession with the bound connection</li>_</ol>;@Override_    void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener) {_        try {_            final LDAPConnection connection = LdapUtils.privilegedConnect(serverSet::getConnection)__            LdapUtils.maybeForkThenBind(connection, bindCredentials, threadPool, new AbstractRunnable() {_                @Override_                protected void doRun() throws Exception {_                    findUser(user, connection, ActionListener.wrap((entry) -> {_                        if (entry == null) {_                            IOUtils.close(connection)__                            listener.onResponse(null)__                        } else {_                            final String dn = entry.getDN()__                            final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars())__                            final SimpleBindRequest userBind = new SimpleBindRequest(dn, passwordBytes)__                            LdapUtils.maybeForkThenBind(connection, userBind, threadPool, new AbstractRunnable() {_                                @Override_                                protected void doRun() throws Exception {_                                    LdapUtils.maybeForkThenBind(connection, bindCredentials, threadPool, new AbstractRunnable() {__                                        @Override_                                        protected void doRun() throws Exception {_                                            listener.onResponse(new LdapSession(logger, config, connection, dn, groupResolver,_                                                    metaDataResolver, timeout, entry.getAttributes()))__                                        }__                                        @Override_                                        public void onFailure(Exception e) {_                                            IOUtils.closeWhileHandlingException(connection)__                                            listener.onFailure(e)__                                        }_                                    })__                                }__                                @Override_                                public void onFailure(Exception e) {_                                    IOUtils.closeWhileHandlingException(connection)__                                    listener.onFailure(e)__                                }_                            })__                        }_                    }, e -> {_                        IOUtils.closeWhileHandlingException(connection)__                        listener.onFailure(e)__                    }))__                }__                @Override_                public void onFailure(Exception e) {_                    IOUtils.closeWhileHandlingException(connection)__                    listener.onFailure(e)__                }_            })__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };sets,up,a,ldapsession,using,the,following,process,ol,li,opening,a,new,connection,to,the,ldap,server,li,li,executes,a,bind,request,using,the,bind,user,li,li,executes,a,search,to,find,the,dn,of,the,user,li,li,closes,the,opened,connection,li,li,opens,a,new,connection,to,the,ldap,server,li,li,executes,a,bind,request,using,the,found,dn,and,provided,password,li,li,creates,a,new,ldapsession,with,the,bound,connection,li,ol;override,void,get,session,without,pool,string,user,secure,string,password,action,listener,ldap,session,listener,try,final,ldapconnection,connection,ldap,utils,privileged,connect,server,set,get,connection,ldap,utils,maybe,fork,then,bind,connection,bind,credentials,thread,pool,new,abstract,runnable,override,protected,void,do,run,throws,exception,find,user,user,connection,action,listener,wrap,entry,if,entry,null,ioutils,close,connection,listener,on,response,null,else,final,string,dn,entry,get,dn,final,byte,password,bytes,char,arrays,to,utf8bytes,password,get,chars,final,simple,bind,request,user,bind,new,simple,bind,request,dn,password,bytes,ldap,utils,maybe,fork,then,bind,connection,user,bind,thread,pool,new,abstract,runnable,override,protected,void,do,run,throws,exception,ldap,utils,maybe,fork,then,bind,connection,bind,credentials,thread,pool,new,abstract,runnable,override,protected,void,do,run,throws,exception,listener,on,response,new,ldap,session,logger,config,connection,dn,group,resolver,meta,data,resolver,timeout,entry,get,attributes,override,public,void,on,failure,exception,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,override,public,void,on,failure,exception,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,override,public,void,on,failure,exception,e,ioutils,close,while,handling,exception,connection,listener,on,failure,e,catch,ldapexception,e,listener,on,failure,e
LdapUserSearchSessionFactory -> @Override     void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password, ActionListener<LdapSession> listener);1524684173;Sets up a LDAPSession using the connection pool that potentially holds existing connections to the server;@Override_    void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password, ActionListener<LdapSession> listener) {_        findUser(user, connectionPool, ActionListener.wrap((entry) -> {_            if (entry == null) {_                listener.onResponse(null)__            } else {_                final String dn = entry.getDN()__                final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars())__                final SimpleBindRequest bind = new SimpleBindRequest(dn, passwordBytes)__                LdapUtils.maybeForkThenBindAndRevert(connectionPool, bind, threadPool, new ActionRunnable<LdapSession>(listener) {_                    @Override_                    protected void doRun() throws Exception {_                        listener.onResponse(new LdapSession(logger, config, connectionPool, dn, groupResolver, metaDataResolver, timeout,_                                entry.getAttributes()))__                    }_                })__            }_        }, listener::onFailure))__    };sets,up,a,ldapsession,using,the,connection,pool,that,potentially,holds,existing,connections,to,the,server;override,void,get,session,with,pool,ldapconnection,pool,connection,pool,string,user,secure,string,password,action,listener,ldap,session,listener,find,user,user,connection,pool,action,listener,wrap,entry,if,entry,null,listener,on,response,null,else,final,string,dn,entry,get,dn,final,byte,password,bytes,char,arrays,to,utf8bytes,password,get,chars,final,simple,bind,request,bind,new,simple,bind,request,dn,password,bytes,ldap,utils,maybe,fork,then,bind,and,revert,connection,pool,bind,thread,pool,new,action,runnable,ldap,session,listener,override,protected,void,do,run,throws,exception,listener,on,response,new,ldap,session,logger,config,connection,pool,dn,group,resolver,meta,data,resolver,timeout,entry,get,attributes,listener,on,failure
LdapUserSearchSessionFactory -> @Override     void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password, ActionListener<LdapSession> listener);1534434117;Sets up a LDAPSession using the connection pool that potentially holds existing connections to the server;@Override_    void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password, ActionListener<LdapSession> listener) {_        findUser(user, connectionPool, ActionListener.wrap((entry) -> {_            if (entry == null) {_                listener.onResponse(null)__            } else {_                final String dn = entry.getDN()__                final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars())__                final SimpleBindRequest bind = new SimpleBindRequest(dn, passwordBytes)__                LdapUtils.maybeForkThenBindAndRevert(connectionPool, bind, threadPool, new ActionRunnable<LdapSession>(listener) {_                    @Override_                    protected void doRun() throws Exception {_                        listener.onResponse(new LdapSession(logger, config, connectionPool, dn, groupResolver, metaDataResolver, timeout,_                                entry.getAttributes()))__                    }_                })__            }_        }, listener::onFailure))__    };sets,up,a,ldapsession,using,the,connection,pool,that,potentially,holds,existing,connections,to,the,server;override,void,get,session,with,pool,ldapconnection,pool,connection,pool,string,user,secure,string,password,action,listener,ldap,session,listener,find,user,user,connection,pool,action,listener,wrap,entry,if,entry,null,listener,on,response,null,else,final,string,dn,entry,get,dn,final,byte,password,bytes,char,arrays,to,utf8bytes,password,get,chars,final,simple,bind,request,bind,new,simple,bind,request,dn,password,bytes,ldap,utils,maybe,fork,then,bind,and,revert,connection,pool,bind,thread,pool,new,action,runnable,ldap,session,listener,override,protected,void,do,run,throws,exception,listener,on,response,new,ldap,session,logger,config,connection,pool,dn,group,resolver,meta,data,resolver,timeout,entry,get,attributes,listener,on,failure
LdapUserSearchSessionFactory -> @Override     void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password, ActionListener<LdapSession> listener);1541476610;Sets up a LDAPSession using the connection pool that potentially holds existing connections to the server;@Override_    void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password, ActionListener<LdapSession> listener) {_        findUser(user, connectionPool, ActionListener.wrap((entry) -> {_            if (entry == null) {_                listener.onResponse(null)__            } else {_                final String dn = entry.getDN()__                final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars())__                final SimpleBindRequest bind = new SimpleBindRequest(dn, passwordBytes)__                LdapUtils.maybeForkThenBindAndRevert(connectionPool, bind, threadPool, new ActionRunnable<LdapSession>(listener) {_                    @Override_                    protected void doRun() throws Exception {_                        listener.onResponse(new LdapSession(logger, config, connectionPool, dn, groupResolver, metaDataResolver, timeout,_                                entry.getAttributes()))__                    }_                })__            }_        }, listener::onFailure))__    };sets,up,a,ldapsession,using,the,connection,pool,that,potentially,holds,existing,connections,to,the,server;override,void,get,session,with,pool,ldapconnection,pool,connection,pool,string,user,secure,string,password,action,listener,ldap,session,listener,find,user,user,connection,pool,action,listener,wrap,entry,if,entry,null,listener,on,response,null,else,final,string,dn,entry,get,dn,final,byte,password,bytes,char,arrays,to,utf8bytes,password,get,chars,final,simple,bind,request,bind,new,simple,bind,request,dn,password,bytes,ldap,utils,maybe,fork,then,bind,and,revert,connection,pool,bind,thread,pool,new,action,runnable,ldap,session,listener,override,protected,void,do,run,throws,exception,listener,on,response,new,ldap,session,logger,config,connection,pool,dn,group,resolver,meta,data,resolver,timeout,entry,get,attributes,listener,on,failure
