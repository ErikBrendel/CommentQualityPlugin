commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;31;;@Override protected void doExecute(Task task, SamlLogoutRequest request, ActionListener<SamlLogoutResponse> listener) {     invalidateRefreshToken(request.getRefreshToken(), ActionListener.wrap(ignore -> {         try {             final String token = request.getToken().             tokenService.getAuthenticationAndMetaData(token, ActionListener.wrap(tuple -> {                 Authentication authentication = tuple.v1().                 final Map<String, Object> tokenMetadata = tuple.v2().                 SamlLogoutResponse response = buildResponse(authentication, tokenMetadata).                 tokenService.invalidateAccessToken(token, ActionListener.wrap(created -> {                     if (logger.isTraceEnabled()) {                         logger.trace("SAML Logout User [{}], Token [{}...{}]", authentication.getUser().principal(), token.substring(0, 8), token.substring(token.length() - 8)).                     }                     listener.onResponse(response).                 }, listener::onFailure)).             }, listener::onFailure)).         } catch (IOException | ElasticsearchException e) {             logger.debug("Internal exception during SAML logout", e).             listener.onFailure(e).         }     }, listener::onFailure)). }
false;private;2;7;;private void invalidateRefreshToken(String refreshToken, ActionListener<TokensInvalidationResult> listener) {     if (refreshToken == null) {         listener.onResponse(null).     } else {         tokenService.invalidateRefreshToken(refreshToken, listener).     } }
false;private;2;30;;private SamlLogoutResponse buildResponse(Authentication authentication, Map<String, Object> tokenMetadata) {     if (authentication == null) {         throw SamlUtils.samlException("No active authentication").     }     final User user = authentication.getUser().     if (user == null) {         throw SamlUtils.samlException("No active user").     }     final SamlRealm realm = findRealm(authentication).     final String tokenRealm = getMetadataString(tokenMetadata, SamlRealm.TOKEN_METADATA_REALM).     if (realm.name().equals(tokenRealm) == false) {         throw SamlUtils.samlException("Authenticating realm [{}] does not match token realm [{}]", realm, tokenRealm).     }     final SamlNameId nameId = new SamlNameId(getMetadataString(tokenMetadata, SamlRealm.TOKEN_METADATA_NAMEID_FORMAT), getMetadataString(tokenMetadata, SamlRealm.TOKEN_METADATA_NAMEID_VALUE), getMetadataString(tokenMetadata, SamlRealm.TOKEN_METADATA_NAMEID_QUALIFIER), getMetadataString(tokenMetadata, SamlRealm.TOKEN_METADATA_NAMEID_SP_QUALIFIER), getMetadataString(tokenMetadata, SamlRealm.TOKEN_METADATA_NAMEID_SP_PROVIDED_ID)).     final String session = getMetadataString(tokenMetadata, SamlRealm.TOKEN_METADATA_SESSION).     final LogoutRequest logout = realm.buildLogoutRequest(nameId.asXml(), session).     if (logout == null) {         return new SamlLogoutResponse(null).     }     final String uri = new SamlRedirect(logout, realm.getSigningConfiguration()).getRedirectUrl().     return new SamlLogoutResponse(uri). }
false;private;2;14;;private String getMetadataString(Map<String, Object> metadata, String key) {     final Object value = metadata.get(key).     if (value == null) {         if (metadata.containsKey(key)) {             return null.         }         throw SamlUtils.samlException("Access token does not have SAML metadata [{}]", key).     }     if (value instanceof String) {         return (String) value.     } else {         throw SamlUtils.samlException("In access token, SAML metadata [{}] is [{}] rather than String", key, value.getClass()).     } }
false;private;1;15;;private SamlRealm findRealm(Authentication authentication) {     final Authentication.RealmRef ref = authentication.getAuthenticatedBy().     if (ref == null || Strings.isNullOrEmpty(ref.getName())) {         throw SamlUtils.samlException("Authentication {} has no authenticating realm", authentication).     }     final Realm realm = realms.realm(ref.getName()).     if (realm == null) {         throw SamlUtils.samlException("Authenticating realm {} does not exist", ref.getName()).     }     if (realm instanceof SamlRealm) {         return (SamlRealm) realm.     } else {         throw SamlUtils.samlException("Authenticating realm {} is not a SAML realm", realm).     } }
