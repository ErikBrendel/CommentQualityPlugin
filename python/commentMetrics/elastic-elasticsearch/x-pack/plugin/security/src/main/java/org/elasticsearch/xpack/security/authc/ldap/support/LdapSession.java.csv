commented;modifiers;parameterAmount;loc;comment;code
true;public;0;8;/**  * LDAP connections should be closed to clean up resources.  */ ;/**  * LDAP connections should be closed to clean up resources.  */ @Override public void close() {     // connections in the pool     if (connection instanceof LDAPConnection) {         ((LDAPConnection) connection).close().     } }
true;public;0;3;/**  * @return the fully distinguished name of the user bound to this connection  */ ;/**  * @return the fully distinguished name of the user bound to this connection  */ public String userDn() {     return userDn. }
true;public;0;3;/**  * @return the realm for which this session was created  */ ;/**  * @return the realm for which this session was created  */ public RealmConfig realm() {     return realm. }
true;public;0;3;/**  * @return the connection to the LDAP/AD server of this session  */ ;/**  * @return the connection to the LDAP/AD server of this session  */ public LDAPInterface getConnection() {     return connection. }
true;public;1;3;/**  * Asynchronously retrieves a list of group distinguished names  */ ;/**  * Asynchronously retrieves a list of group distinguished names  */ public void groups(ActionListener<List<String>> listener) {     groupsResolver.resolve(connection, userDn, timeout, logger, attributes, listener). }
false;public;1;3;;public void metaData(ActionListener<Map<String, Object>> listener) {     metaDataResolver.resolve(connection, userDn, timeout, logger, attributes, listener). }
false;public;1;14;;public void resolve(ActionListener<LdapUserData> listener) {     logger.debug("Resolving LDAP groups + meta-data for user [{}]", userDn).     groups(ActionListener.wrap(groups -> {         logger.debug("Resolved {} LDAP groups [{}] for user [{}]", groups.size(), groups, userDn).         metaData(ActionListener.wrap(meta -> {             logger.debug("Resolved {} meta-data fields [{}] for user [{}]", meta.size(), meta, userDn).             listener.onResponse(new LdapUserData(groups, meta)).         }, listener::onFailure)).     }, listener::onFailure)). }
true;;6;2;/**  * Asynchronously resolve the group name for the given ldap user  * @param ldapConnection an authenticated {@link LDAPConnection} to be used for LDAP queries  * @param userDn the distinguished name of the ldap user  * @param timeout the timeout for any ldap operation  * @param logger the logger to use if necessary  * @param attributes a collection of attributes that were previously retrieved for the user such as during a user search.  *          {@code null} indicates that the attributes have not been attempted to be retrieved  * @param listener the listener to call on a result or on failure  */ ;/**  * Asynchronously resolve the group name for the given ldap user  * @param ldapConnection an authenticated {@link LDAPConnection} to be used for LDAP queries  * @param userDn the distinguished name of the ldap user  * @param timeout the timeout for any ldap operation  * @param logger the logger to use if necessary  * @param attributes a collection of attributes that were previously retrieved for the user such as during a user search.  *          {@code null} indicates that the attributes have not been attempted to be retrieved  * @param listener the listener to call on a result or on failure  */ void resolve(LDAPInterface ldapConnection, String userDn, TimeValue timeout, Logger logger, Collection<Attribute> attributes, ActionListener<List<String>> listener).
true;;0;1;/**  * Returns the attributes that this resolvers uses. If no attributes are required, return {@code null}.  */ ;/**  * Returns the attributes that this resolvers uses. If no attributes are required, return {@code null}.  */ String[] attributes().
