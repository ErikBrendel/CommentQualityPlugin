commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected void doLookupUser(String username, ActionListener<User> listener) {     userStore.getUser(username, listener). }
false;protected;2;4;;@Override protected void doAuthenticate(UsernamePasswordToken token, ActionListener<AuthenticationResult> listener) {     userStore.verifyPassword(token.principal(), token.credentials(), listener). }
false;public;2;5;;public void onSecurityIndexStateChange(SecurityIndexManager.State previousState, SecurityIndexManager.State currentState) {     if (isMoveFromRedToNonRed(previousState, currentState) || isIndexDeleted(previousState, currentState)) {         clearCache().     } }
false;public;1;9;;@Override public void usageStats(ActionListener<Map<String, Object>> listener) {     super.usageStats(ActionListener.wrap(stats -> userStore.getUserCount(ActionListener.wrap(size -> {         stats.put("size", size).         listener.onResponse(stats).     }, listener::onFailure)), listener::onFailure)). }
true;;0;3;// method is used for testing to verify cache expiration since expireAll is final ;// method is used for testing to verify cache expiration since expireAll is final void clearCache() {     expireAll(). }
