commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "security_change_password_action". }
false;public;2;5;;@Override public RestResponse buildResponse(ChangePasswordResponse changePasswordResponse, XContentBuilder builder) throws Exception {     return new BytesRestResponse(RestStatus.OK, builder.startObject().endObject()). }
false;public;2;23;;@Override public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {     final User user = securityContext.getUser().     final String username.     if (request.param("username") == null) {         username = user.principal().     } else {         username = request.param("username").     }     final String refresh = request.param("refresh").     return channel -> new SecurityClient(client).prepareChangePassword(username, request.requiredContent(), request.getXContentType(), passwordHasher).setRefreshPolicy(refresh).execute(new RestBuilderListener<ChangePasswordResponse>(channel) {          @Override         public RestResponse buildResponse(ChangePasswordResponse changePasswordResponse, XContentBuilder builder) throws Exception {             return new BytesRestResponse(RestStatus.OK, builder.startObject().endObject()).         }     }). }
false;public;0;4;;@Override public Set<String> getFilteredFields() {     return FILTERED_FIELDS. }
