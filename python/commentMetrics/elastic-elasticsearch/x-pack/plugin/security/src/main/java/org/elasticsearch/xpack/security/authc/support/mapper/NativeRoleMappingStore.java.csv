# id;timestamp;commentText;codeText;commentWords;codeWords
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingUsernamePasswordRealm realm);1524684173;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingUsernamePasswordRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,username,password,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingUsernamePasswordRealm realm);1525859433;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingUsernamePasswordRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,username,password,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingUsernamePasswordRealm realm);1526029249;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingUsernamePasswordRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,username,password,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingUsernamePasswordRealm realm);1526449283;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingUsernamePasswordRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,username,password,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1524684173;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1525859433;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1526029249;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1526449283;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1529658035;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1538067637;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1539723533;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1539796943;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1540238977;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1541008027;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1541092382;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener);1541169206;Deletes a named mapping from the index;public void deleteRoleMapping(DeleteRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerDeleteMapping, request, listener)__    };deletes,a,named,mapping,from,the,index;public,void,delete,role,mapping,delete,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,delete,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1524684173;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1525859433;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1526029249;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1526449283;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1529658035;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1538067637;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1539723533;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1539796943;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1540238977;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1541008027;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1541092382;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener);1541169206;Stores (create or update) a single mapping in the index;public void putRoleMapping(PutRoleMappingRequest request, ActionListener<Boolean> listener) {_        modifyMapping(request.getName(), this::innerPutMapping, request, listener)__    };stores,create,or,update,a,single,mapping,in,the,index;public,void,put,role,mapping,put,role,mapping,request,request,action,listener,boolean,listener,modify,mapping,request,get,name,this,inner,put,mapping,request,listener
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingRealm realm);1529658035;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingRealm realm);1538067637;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingRealm realm);1539723533;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingRealm realm);1539796943;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingRealm realm);1540238977;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingRealm realm);1541008027;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingRealm realm);1541092382;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> @Override     public void refreshRealmOnChange(CachingRealm realm);1541169206;Indicates that the provided realm should have its cache cleared if this store is updated_(that is, {@link #putRoleMapping(PutRoleMappingRequest, ActionListener)} or_{@link #deleteRoleMapping(DeleteRoleMappingRequest, ActionListener)} are called)._@see ClearRealmCacheAction;@Override_    public void refreshRealmOnChange(CachingRealm realm) {_        realmsToRefresh.add(realm.name())__    };indicates,that,the,provided,realm,should,have,its,cache,cleared,if,this,store,is,updated,that,is,link,put,role,mapping,put,role,mapping,request,action,listener,or,link,delete,role,mapping,delete,role,mapping,request,action,listener,are,called,see,clear,realm,cache,action;override,public,void,refresh,realm,on,change,caching,realm,realm,realms,to,refresh,add,realm,name
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1524684173;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityLifecycleService.isSecurityIndexExisting() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,lifecycle,service,is,security,index,existing,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1525859433;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityLifecycleService.securityIndex().indexExists() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,lifecycle,service,security,index,index,exists,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1526029249;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityLifecycleService.securityIndex().indexExists() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,lifecycle,service,security,index,index,exists,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1526449283;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityIndex.indexExists() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,index,index,exists,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1529658035;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityIndex.indexExists() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,index,index,exists,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1538067637;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityIndex.indexExists() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,index,index,exists,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1539723533;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityIndex.isAvailable() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,index,is,available,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1539796943;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityIndex.indexExists() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,index,index,exists,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1540238977;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityIndex.isAvailable() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,index,is,available,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1541008027;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityIndex.isAvailable() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,index,is,available,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1541092382;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityIndex.isAvailable() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,index,is,available,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> public void usageStats(ActionListener<Map<String, Object>> listener);1541169206;Provides usage statistics for this store._The resulting map contains the keys_<ul>_<li><code>size</code> - The total number of mappings stored in the index</li>_<li><code>enabled</code> - The number of mappings that are_{@link ExpressionRoleMapping#isEnabled() enabled}</li>_</ul>;public void usageStats(ActionListener<Map<String, Object>> listener) {_        if (securityIndex.isAvailable() == false) {_            reportStats(listener, Collections.emptyList())__        } else {_            getMappings(ActionListener.wrap(mappings -> reportStats(listener, mappings), listener::onFailure))__        }_    };provides,usage,statistics,for,this,store,the,resulting,map,contains,the,keys,ul,li,code,size,code,the,total,number,of,mappings,stored,in,the,index,li,li,code,enabled,code,the,number,of,mappings,that,are,link,expression,role,mapping,is,enabled,enabled,li,ul;public,void,usage,stats,action,listener,map,string,object,listener,if,security,index,is,available,false,report,stats,listener,collections,empty,list,else,get,mappings,action,listener,wrap,mappings,report,stats,listener,mappings,listener,on,failure
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1524684173;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityLifecycleService.isSecurityIndexOutOfDate()) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(TimeValue.timeValueSeconds(10L))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,lifecycle,service,is,security,index,out,of,date,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,time,value,time,value,seconds,10l,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1525859433;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityLifecycleService.securityIndex().isIndexUpToDate() == false) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(TimeValue.timeValueSeconds(10L))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,lifecycle,service,security,index,is,index,up,to,date,false,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,time,value,time,value,seconds,10l,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1526029249;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityLifecycleService.securityIndex().isIndexUpToDate() == false) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(TimeValue.timeValueSeconds(10L))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,lifecycle,service,security,index,is,index,up,to,date,false,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,time,value,time,value,seconds,10l,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1526449283;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityIndex.isIndexUpToDate() == false) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(TimeValue.timeValueSeconds(10L))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,index,is,index,up,to,date,false,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,time,value,time,value,seconds,10l,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1529658035;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityIndex.isIndexUpToDate() == false) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(TimeValue.timeValueSeconds(10L))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,index,is,index,up,to,date,false,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,time,value,time,value,seconds,10l,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1538067637;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityIndex.isIndexUpToDate() == false) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,index,is,index,up,to,date,false,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,get,settings,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1539723533;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityIndex.isIndexUpToDate() == false) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,index,is,index,up,to,date,false,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,get,settings,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1539796943;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityIndex.isIndexUpToDate() == false) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,index,is,index,up,to,date,false,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,get,settings,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1540238977;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityIndex.isIndexUpToDate() == false) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,index,is,index,up,to,date,false,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,get,settings,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1541008027;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityIndex.isIndexUpToDate() == false) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,index,is,index,up,to,date,false,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,get,settings,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1541092382;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityIndex.isIndexUpToDate() == false) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,index,is,index,up,to,date,false,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,get,settings,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener);1541169206;Loads all mappings from the index._<em>package private</em> for unit testing;void loadMappings(ActionListener<List<ExpressionRoleMapping>> listener) {_        if (securityIndex.isIndexUpToDate() == false) {_            listener.onFailure(new IllegalStateException(_                "Security index is not on the current version - the native realm will not be operational until " +_                "the upgrade API is run on the security index"))__            return__        }_        final QueryBuilder query = QueryBuilders.termQuery(DOC_TYPE_FIELD, DOC_TYPE_ROLE_MAPPING)__        final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_            SearchRequest request = client.prepareSearch(SECURITY_INDEX_NAME)_                    .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                    .setTypes(SECURITY_GENERIC_TYPE)_                    .setQuery(query)_                    .setSize(1000)_                    .setFetchSource(true)_                    .request()__            request.indicesOptions().ignoreUnavailable()__            ScrollHelper.fetchAllByEntity(client, request,_                    new ContextPreservingActionListener<>(supplier, ActionListener.wrap((Collection<ExpressionRoleMapping> mappings) ->_                            listener.onResponse(mappings.stream().filter(Objects::nonNull).collect(Collectors.toList())),_                    ex -> {_                        logger.error(new ParameterizedMessage("failed to load role mappings from index [{}] skipping all mappings.",_                                SECURITY_INDEX_NAME), ex)__                        listener.onResponse(Collections.emptyList())__                    })),_                    doc -> buildMapping(getNameFromId(doc.getId()), doc.getSourceRef()))__        }_    };loads,all,mappings,from,the,index,em,package,private,em,for,unit,testing;void,load,mappings,action,listener,list,expression,role,mapping,listener,if,security,index,is,index,up,to,date,false,listener,on,failure,new,illegal,state,exception,security,index,is,not,on,the,current,version,the,native,realm,will,not,be,operational,until,the,upgrade,api,is,run,on,the,security,index,return,final,query,builder,query,query,builders,term,query,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,set,scroll,get,settings,set,types,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,collection,expression,role,mapping,mappings,listener,on,response,mappings,stream,filter,objects,non,null,collect,collectors,to,list,ex,logger,error,new,parameterized,message,failed,to,load,role,mappings,from,index,skipping,all,mappings,ex,listener,on,response,collections,empty,list,doc,build,mapping,get,name,from,id,doc,get,id,doc,get,source,ref
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1524684173;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1525859433;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1526029249;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1526449283;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1529658035;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1538067637;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1539723533;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1539796943;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1540238977;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1541008027;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1541092382;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
NativeRoleMappingStore -> public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener);1541169206;Retrieves one or more mappings from the index._If <code>names</code> is <code>null</code> or {@link Set#isEmpty empty}, then this retrieves all mappings._Otherwise it retrieves the specified mappings by name.;public void getRoleMappings(Set<String> names, ActionListener<List<ExpressionRoleMapping>> listener) {_        if (names == null || names.isEmpty()) {_            getMappings(listener)__        } else {_            getMappings(new ActionListener<List<ExpressionRoleMapping>>() {_                @Override_                public void onResponse(List<ExpressionRoleMapping> mappings) {_                    final List<ExpressionRoleMapping> filtered = mappings.stream()_                            .filter(m -> names.contains(m.getName()))_                            .collect(Collectors.toList())__                    listener.onResponse(filtered)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        }_    };retrieves,one,or,more,mappings,from,the,index,if,code,names,code,is,code,null,code,or,link,set,is,empty,empty,then,this,retrieves,all,mappings,otherwise,it,retrieves,the,specified,mappings,by,name;public,void,get,role,mappings,set,string,names,action,listener,list,expression,role,mapping,listener,if,names,null,names,is,empty,get,mappings,listener,else,get,mappings,new,action,listener,list,expression,role,mapping,override,public,void,on,response,list,expression,role,mapping,mappings,final,list,expression,role,mapping,filtered,mappings,stream,filter,m,names,contains,m,get,name,collect,collectors,to,list,listener,on,response,filtered,override,public,void,on,failure,exception,e,listener,on,failure,e
