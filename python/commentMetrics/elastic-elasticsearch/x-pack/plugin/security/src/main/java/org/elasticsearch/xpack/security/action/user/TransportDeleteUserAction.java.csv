commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(Boolean found) {     listener.onResponse(new DeleteUserResponse(found)). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;protected;3;28;;@Override protected void doExecute(Task task, DeleteUserRequest request, final ActionListener<DeleteUserResponse> listener) {     final String username = request.username().     if (ClientReservedRealm.isReserved(username, settings)) {         if (AnonymousUser.isAnonymousUsername(username, settings)) {             listener.onFailure(new IllegalArgumentException("user [" + username + "] is anonymous and cannot be deleted")).             return.         } else {             listener.onFailure(new IllegalArgumentException("user [" + username + "] is reserved and cannot be deleted")).             return.         }     } else if (SystemUser.NAME.equals(username) || XPackUser.NAME.equals(username)) {         listener.onFailure(new IllegalArgumentException("user [" + username + "] is internal")).         return.     }     usersStore.deleteUser(request, new ActionListener<Boolean>() {          @Override         public void onResponse(Boolean found) {             listener.onResponse(new DeleteUserResponse(found)).         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }). }
