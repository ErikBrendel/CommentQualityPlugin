commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(Boolean found) {     listener.onResponse(new DeleteRoleResponse(found)). }
false;public;1;4;;@Override public void onFailure(Exception t) {     listener.onFailure(t). }
false;protected;3;24;;@Override protected void doExecute(Task task, DeleteRoleRequest request, ActionListener<DeleteRoleResponse> listener) {     if (ReservedRolesStore.isReserved(request.name())) {         listener.onFailure(new IllegalArgumentException("role [" + request.name() + "] is reserved and cannot be deleted")).         return.     }     try {         rolesStore.deleteRole(request, new ActionListener<Boolean>() {              @Override             public void onResponse(Boolean found) {                 listener.onResponse(new DeleteRoleResponse(found)).             }              @Override             public void onFailure(Exception t) {                 listener.onFailure(t).             }         }).     } catch (Exception e) {         logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to delete role [{}]", request.name()), e).         listener.onFailure(e).     } }
