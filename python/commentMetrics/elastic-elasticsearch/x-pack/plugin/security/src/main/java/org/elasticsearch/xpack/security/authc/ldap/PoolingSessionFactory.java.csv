# id;timestamp;commentText;codeText;commentWords;codeWords
PoolingSessionFactory -> abstract void getUnauthenticatedSessionWithPool(LDAPConnectionPool connectionPool, String user, ActionListener<LdapSession> listener)_;1524684173;Attempts to search using a pooled connection for the user and provides an unauthenticated {@link LdapSession} to the listener if the_user is found;abstract void getUnauthenticatedSessionWithPool(LDAPConnectionPool connectionPool, String user, ActionListener<LdapSession> listener)_;attempts,to,search,using,a,pooled,connection,for,the,user,and,provides,an,unauthenticated,link,ldap,session,to,the,listener,if,the,user,is,found;abstract,void,get,unauthenticated,session,with,pool,ldapconnection,pool,connection,pool,string,user,action,listener,ldap,session,listener
PoolingSessionFactory -> abstract void getUnauthenticatedSessionWithPool(LDAPConnectionPool connectionPool, String user, ActionListener<LdapSession> listener)_;1534434117;Attempts to search using a pooled connection for the user and provides an unauthenticated {@link LdapSession} to the listener if the_user is found;abstract void getUnauthenticatedSessionWithPool(LDAPConnectionPool connectionPool, String user, ActionListener<LdapSession> listener)_;attempts,to,search,using,a,pooled,connection,for,the,user,and,provides,an,unauthenticated,link,ldap,session,to,the,listener,if,the,user,is,found;abstract,void,get,unauthenticated,session,with,pool,ldapconnection,pool,connection,pool,string,user,action,listener,ldap,session,listener
PoolingSessionFactory -> abstract void getUnauthenticatedSessionWithPool(LDAPConnectionPool connectionPool, String user, ActionListener<LdapSession> listener)_;1541476610;Attempts to search using a pooled connection for the user and provides an unauthenticated {@link LdapSession} to the listener if the_user is found;abstract void getUnauthenticatedSessionWithPool(LDAPConnectionPool connectionPool, String user, ActionListener<LdapSession> listener)_;attempts,to,search,using,a,pooled,connection,for,the,user,and,provides,an,unauthenticated,link,ldap,session,to,the,listener,if,the,user,is,found;abstract,void,get,unauthenticated,session,with,pool,ldapconnection,pool,connection,pool,string,user,action,listener,ldap,session,listener
PoolingSessionFactory -> abstract void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password,                                      ActionListener<LdapSession> listener)_;1524684173;Attempts to get a {@link LdapSession} using the provided credentials and makes use of the provided connection pool;abstract void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password,_                                     ActionListener<LdapSession> listener)_;attempts,to,get,a,link,ldap,session,using,the,provided,credentials,and,makes,use,of,the,provided,connection,pool;abstract,void,get,session,with,pool,ldapconnection,pool,connection,pool,string,user,secure,string,password,action,listener,ldap,session,listener
PoolingSessionFactory -> abstract void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password,                                      ActionListener<LdapSession> listener)_;1534434117;Attempts to get a {@link LdapSession} using the provided credentials and makes use of the provided connection pool;abstract void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password,_                                     ActionListener<LdapSession> listener)_;attempts,to,get,a,link,ldap,session,using,the,provided,credentials,and,makes,use,of,the,provided,connection,pool;abstract,void,get,session,with,pool,ldapconnection,pool,connection,pool,string,user,secure,string,password,action,listener,ldap,session,listener
PoolingSessionFactory -> abstract void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password,                                      ActionListener<LdapSession> listener)_;1541476610;Attempts to get a {@link LdapSession} using the provided credentials and makes use of the provided connection pool;abstract void getSessionWithPool(LDAPConnectionPool connectionPool, String user, SecureString password,_                                     ActionListener<LdapSession> listener)_;attempts,to,get,a,link,ldap,session,using,the,provided,credentials,and,makes,use,of,the,provided,connection,pool;abstract,void,get,session,with,pool,ldapconnection,pool,connection,pool,string,user,secure,string,password,action,listener,ldap,session,listener
PoolingSessionFactory -> abstract void getUnauthenticatedSessionWithoutPool(String user, ActionListener<LdapSession> listener)_;1524684173;Attempts to search using a new connection for the user and provides an unauthenticated {@link LdapSession} to the listener if the_user is found;abstract void getUnauthenticatedSessionWithoutPool(String user, ActionListener<LdapSession> listener)_;attempts,to,search,using,a,new,connection,for,the,user,and,provides,an,unauthenticated,link,ldap,session,to,the,listener,if,the,user,is,found;abstract,void,get,unauthenticated,session,without,pool,string,user,action,listener,ldap,session,listener
PoolingSessionFactory -> abstract void getUnauthenticatedSessionWithoutPool(String user, ActionListener<LdapSession> listener)_;1534434117;Attempts to search using a new connection for the user and provides an unauthenticated {@link LdapSession} to the listener if the_user is found;abstract void getUnauthenticatedSessionWithoutPool(String user, ActionListener<LdapSession> listener)_;attempts,to,search,using,a,new,connection,for,the,user,and,provides,an,unauthenticated,link,ldap,session,to,the,listener,if,the,user,is,found;abstract,void,get,unauthenticated,session,without,pool,string,user,action,listener,ldap,session,listener
PoolingSessionFactory -> abstract void getUnauthenticatedSessionWithoutPool(String user, ActionListener<LdapSession> listener)_;1541476610;Attempts to search using a new connection for the user and provides an unauthenticated {@link LdapSession} to the listener if the_user is found;abstract void getUnauthenticatedSessionWithoutPool(String user, ActionListener<LdapSession> listener)_;attempts,to,search,using,a,new,connection,for,the,user,and,provides,an,unauthenticated,link,ldap,session,to,the,listener,if,the,user,is,found;abstract,void,get,unauthenticated,session,without,pool,string,user,action,listener,ldap,session,listener
PoolingSessionFactory -> @Override     public final void close();1524684173;This method is used to cleanup the connection pool if one is being used;@Override_    public final void close() {_        if (connectionPool != null) {_            connectionPool.close()__        }_    };this,method,is,used,to,cleanup,the,connection,pool,if,one,is,being,used;override,public,final,void,close,if,connection,pool,null,connection,pool,close
PoolingSessionFactory -> @Override     public final void close();1534434117;This method is used to cleanup the connection pool if one is being used;@Override_    public final void close() {_        if (connectionPool != null) {_            connectionPool.close()__        }_    };this,method,is,used,to,cleanup,the,connection,pool,if,one,is,being,used;override,public,final,void,close,if,connection,pool,null,connection,pool,close
PoolingSessionFactory -> @Override     public final void close();1541476610;This method is used to cleanup the connection pool if one is being used;@Override_    public final void close() {_        if (connectionPool != null) {_            connectionPool.close()__        }_    };this,method,is,used,to,cleanup,the,connection,pool,if,one,is,being,used;override,public,final,void,close,if,connection,pool,null,connection,pool,close
PoolingSessionFactory -> PoolingSessionFactory(RealmConfig config, SSLService sslService, LdapSession.GroupsResolver groupResolver,                           Setting<Boolean> poolingEnabled, @Nullable String bindDn, Supplier<String> healthCheckDNSupplier,                           ThreadPool threadPool) throws LDAPException;1524684173;@param config the configuration for the realm_@param sslService the ssl service to get a socket factory or context from_@param groupResolver the resolver to use to find groups belonging to a user_@param poolingEnabled the setting that should be used to determine if connection pooling is enabled_@param bindDn the DN of the user to be used for pooled connections (or null to perform anonymous bind)_@param healthCheckDNSupplier a supplier for the dn to query for health checks_@param threadPool a thread pool used for async queries execution;PoolingSessionFactory(RealmConfig config, SSLService sslService, LdapSession.GroupsResolver groupResolver,_                          Setting<Boolean> poolingEnabled, @Nullable String bindDn, Supplier<String> healthCheckDNSupplier,_                          ThreadPool threadPool) throws LDAPException {_        super(config, sslService, threadPool)__        this.groupResolver = groupResolver__        this.metaDataResolver = new LdapMetaDataResolver(config.settings(), ignoreReferralErrors)___        final byte[] bindPassword__        if (LEGACY_BIND_PASSWORD.exists(config.settings())) {_            if (SECURE_BIND_PASSWORD.exists(config.settings())) {_                throw new IllegalArgumentException("You cannot specify both ["_                        + RealmSettings.getFullSettingKey(config, LEGACY_BIND_PASSWORD) + "] and ["_                        + RealmSettings.getFullSettingKey(config, SECURE_BIND_PASSWORD) + "]")__            } else {_                bindPassword = CharArrays.toUtf8Bytes(LEGACY_BIND_PASSWORD.get(config.settings()).getChars())__            }_        } else if (SECURE_BIND_PASSWORD.exists(config.settings())) {_            bindPassword = CharArrays.toUtf8Bytes(SECURE_BIND_PASSWORD.get(config.settings()).getChars())__        } else {_            bindPassword = null__        }__        if (bindDn == null) {_            bindCredentials = new SimpleBindRequest()__        } else {_            bindCredentials = new SimpleBindRequest(bindDn, bindPassword)__        }__        this.useConnectionPool = poolingEnabled.get(config.settings())__        if (useConnectionPool) {_            this.connectionPool = createConnectionPool(config, serverSet, timeout, logger, bindCredentials, healthCheckDNSupplier)__        } else {_            this.connectionPool = null__        }_    };param,config,the,configuration,for,the,realm,param,ssl,service,the,ssl,service,to,get,a,socket,factory,or,context,from,param,group,resolver,the,resolver,to,use,to,find,groups,belonging,to,a,user,param,pooling,enabled,the,setting,that,should,be,used,to,determine,if,connection,pooling,is,enabled,param,bind,dn,the,dn,of,the,user,to,be,used,for,pooled,connections,or,null,to,perform,anonymous,bind,param,health,check,dnsupplier,a,supplier,for,the,dn,to,query,for,health,checks,param,thread,pool,a,thread,pool,used,for,async,queries,execution;pooling,session,factory,realm,config,config,sslservice,ssl,service,ldap,session,groups,resolver,group,resolver,setting,boolean,pooling,enabled,nullable,string,bind,dn,supplier,string,health,check,dnsupplier,thread,pool,thread,pool,throws,ldapexception,super,config,ssl,service,thread,pool,this,group,resolver,group,resolver,this,meta,data,resolver,new,ldap,meta,data,resolver,config,settings,ignore,referral,errors,final,byte,bind,password,if,exists,config,settings,if,exists,config,settings,throw,new,illegal,argument,exception,you,cannot,specify,both,realm,settings,get,full,setting,key,config,and,realm,settings,get,full,setting,key,config,else,bind,password,char,arrays,to,utf8bytes,get,config,settings,get,chars,else,if,exists,config,settings,bind,password,char,arrays,to,utf8bytes,get,config,settings,get,chars,else,bind,password,null,if,bind,dn,null,bind,credentials,new,simple,bind,request,else,bind,credentials,new,simple,bind,request,bind,dn,bind,password,this,use,connection,pool,pooling,enabled,get,config,settings,if,use,connection,pool,this,connection,pool,create,connection,pool,config,server,set,timeout,logger,bind,credentials,health,check,dnsupplier,else,this,connection,pool,null
PoolingSessionFactory -> PoolingSessionFactory(RealmConfig config, SSLService sslService, LdapSession.GroupsResolver groupResolver,                           Setting<Boolean> poolingEnabled, @Nullable String bindDn, Supplier<String> healthCheckDNSupplier,                           ThreadPool threadPool) throws LDAPException;1534434117;@param config the configuration for the realm_@param sslService the ssl service to get a socket factory or context from_@param groupResolver the resolver to use to find groups belonging to a user_@param poolingEnabled the setting that should be used to determine if connection pooling is enabled_@param bindDn the DN of the user to be used for pooled connections (or null to perform anonymous bind)_@param healthCheckDNSupplier a supplier for the dn to query for health checks_@param threadPool a thread pool used for async queries execution;PoolingSessionFactory(RealmConfig config, SSLService sslService, LdapSession.GroupsResolver groupResolver,_                          Setting<Boolean> poolingEnabled, @Nullable String bindDn, Supplier<String> healthCheckDNSupplier,_                          ThreadPool threadPool) throws LDAPException {_        super(config, sslService, threadPool)__        this.groupResolver = groupResolver__        this.metaDataResolver = new LdapMetaDataResolver(config.settings(), ignoreReferralErrors)___        final byte[] bindPassword__        if (LEGACY_BIND_PASSWORD.exists(config.settings())) {_            if (SECURE_BIND_PASSWORD.exists(config.settings())) {_                throw new IllegalArgumentException("You cannot specify both ["_                        + RealmSettings.getFullSettingKey(config, LEGACY_BIND_PASSWORD) + "] and ["_                        + RealmSettings.getFullSettingKey(config, SECURE_BIND_PASSWORD) + "]")__            } else {_                bindPassword = CharArrays.toUtf8Bytes(LEGACY_BIND_PASSWORD.get(config.settings()).getChars())__            }_        } else if (SECURE_BIND_PASSWORD.exists(config.settings())) {_            bindPassword = CharArrays.toUtf8Bytes(SECURE_BIND_PASSWORD.get(config.settings()).getChars())__        } else {_            bindPassword = null__        }__        if (bindDn == null) {_            bindCredentials = new SimpleBindRequest()__        } else {_            bindCredentials = new SimpleBindRequest(bindDn, bindPassword)__        }__        this.useConnectionPool = poolingEnabled.get(config.settings())__        if (useConnectionPool) {_            this.connectionPool = createConnectionPool(config, serverSet, timeout, logger, bindCredentials, healthCheckDNSupplier)__        } else {_            this.connectionPool = null__        }_    };param,config,the,configuration,for,the,realm,param,ssl,service,the,ssl,service,to,get,a,socket,factory,or,context,from,param,group,resolver,the,resolver,to,use,to,find,groups,belonging,to,a,user,param,pooling,enabled,the,setting,that,should,be,used,to,determine,if,connection,pooling,is,enabled,param,bind,dn,the,dn,of,the,user,to,be,used,for,pooled,connections,or,null,to,perform,anonymous,bind,param,health,check,dnsupplier,a,supplier,for,the,dn,to,query,for,health,checks,param,thread,pool,a,thread,pool,used,for,async,queries,execution;pooling,session,factory,realm,config,config,sslservice,ssl,service,ldap,session,groups,resolver,group,resolver,setting,boolean,pooling,enabled,nullable,string,bind,dn,supplier,string,health,check,dnsupplier,thread,pool,thread,pool,throws,ldapexception,super,config,ssl,service,thread,pool,this,group,resolver,group,resolver,this,meta,data,resolver,new,ldap,meta,data,resolver,config,settings,ignore,referral,errors,final,byte,bind,password,if,exists,config,settings,if,exists,config,settings,throw,new,illegal,argument,exception,you,cannot,specify,both,realm,settings,get,full,setting,key,config,and,realm,settings,get,full,setting,key,config,else,bind,password,char,arrays,to,utf8bytes,get,config,settings,get,chars,else,if,exists,config,settings,bind,password,char,arrays,to,utf8bytes,get,config,settings,get,chars,else,bind,password,null,if,bind,dn,null,bind,credentials,new,simple,bind,request,else,bind,credentials,new,simple,bind,request,bind,dn,bind,password,this,use,connection,pool,pooling,enabled,get,config,settings,if,use,connection,pool,this,connection,pool,create,connection,pool,config,server,set,timeout,logger,bind,credentials,health,check,dnsupplier,else,this,connection,pool,null
PoolingSessionFactory -> LDAPConnectionPool getConnectionPool();1524684173;For tests use only__@return the connection pool for LDAP queries;LDAPConnectionPool getConnectionPool() {_        return connectionPool__    };for,tests,use,only,return,the,connection,pool,for,ldap,queries;ldapconnection,pool,get,connection,pool,return,connection,pool
PoolingSessionFactory -> LDAPConnectionPool getConnectionPool();1534434117;For tests use only__@return the connection pool for LDAP queries;LDAPConnectionPool getConnectionPool() {_        return connectionPool__    };for,tests,use,only,return,the,connection,pool,for,ldap,queries;ldapconnection,pool,get,connection,pool,return,connection,pool
PoolingSessionFactory -> LDAPConnectionPool getConnectionPool();1541476610;For tests use only__@return the connection pool for LDAP queries;LDAPConnectionPool getConnectionPool() {_        return connectionPool__    };for,tests,use,only,return,the,connection,pool,for,ldap,queries;ldapconnection,pool,get,connection,pool,return,connection,pool
PoolingSessionFactory -> static LDAPConnectionPool createConnectionPool(RealmConfig config, ServerSet serverSet, TimeValue timeout, Logger logger,                                                    BindRequest bindRequest,                                                    Supplier<String> healthCheckDnSupplier) throws LDAPException;1524684173;Creates the connection pool that will be used by the session factory and initializes the health check support;static LDAPConnectionPool createConnectionPool(RealmConfig config, ServerSet serverSet, TimeValue timeout, Logger logger,_                                                   BindRequest bindRequest,_                                                   Supplier<String> healthCheckDnSupplier) throws LDAPException {_        Settings settings = config.settings()__        final int initialSize = PoolingSessionFactorySettings.POOL_INITIAL_SIZE.get(settings)__        final int size = PoolingSessionFactorySettings.POOL_SIZE.get(settings)__        LDAPConnectionPool pool = null__        boolean success = false__        try {_            pool = LdapUtils.privilegedConnect(() -> new LDAPConnectionPool(serverSet, bindRequest, initialSize, size))__            pool.setRetryFailedOperationsDueToInvalidConnections(true)__            if (PoolingSessionFactorySettings.HEALTH_CHECK_ENABLED.get(settings)) {_                String entryDn = PoolingSessionFactorySettings.HEALTH_CHECK_DN.get(settings).orElseGet(healthCheckDnSupplier)__                final long healthCheckInterval = PoolingSessionFactorySettings.HEALTH_CHECK_INTERVAL.get(settings).millis()__                if (entryDn != null) {_                    _                    _                    _                    _                    LDAPConnectionPoolHealthCheck healthCheck = new GetEntryLDAPConnectionPoolHealthCheck(entryDn, timeout.millis(),_                            false, false, false, true, false)__                    pool.setHealthCheck(healthCheck)__                    pool.setHealthCheckIntervalMillis(healthCheckInterval)__                } else {_                    logger.warn(new ParameterizedMessage("[{}] and [{}} have not been specified or are not valid distinguished names," +_                            "so connection health checking is disabled", RealmSettings.getFullSettingKey(config,_                            PoolingSessionFactorySettings.BIND_DN),_                            RealmSettings.getFullSettingKey(config, PoolingSessionFactorySettings.HEALTH_CHECK_DN)))__                }_            }__            success = true__            return pool__        } finally {_            if (success == false && pool != null) {_                pool.close()__            }_        }_    };creates,the,connection,pool,that,will,be,used,by,the,session,factory,and,initializes,the,health,check,support;static,ldapconnection,pool,create,connection,pool,realm,config,config,server,set,server,set,time,value,timeout,logger,logger,bind,request,bind,request,supplier,string,health,check,dn,supplier,throws,ldapexception,settings,settings,config,settings,final,int,initial,size,pooling,session,factory,settings,get,settings,final,int,size,pooling,session,factory,settings,get,settings,ldapconnection,pool,pool,null,boolean,success,false,try,pool,ldap,utils,privileged,connect,new,ldapconnection,pool,server,set,bind,request,initial,size,size,pool,set,retry,failed,operations,due,to,invalid,connections,true,if,pooling,session,factory,settings,get,settings,string,entry,dn,pooling,session,factory,settings,get,settings,or,else,get,health,check,dn,supplier,final,long,health,check,interval,pooling,session,factory,settings,get,settings,millis,if,entry,dn,null,ldapconnection,pool,health,check,health,check,new,get,entry,ldapconnection,pool,health,check,entry,dn,timeout,millis,false,false,false,true,false,pool,set,health,check,health,check,pool,set,health,check,interval,millis,health,check,interval,else,logger,warn,new,parameterized,message,and,have,not,been,specified,or,are,not,valid,distinguished,names,so,connection,health,checking,is,disabled,realm,settings,get,full,setting,key,config,pooling,session,factory,settings,realm,settings,get,full,setting,key,config,pooling,session,factory,settings,success,true,return,pool,finally,if,success,false,pool,null,pool,close
PoolingSessionFactory -> static LDAPConnectionPool createConnectionPool(RealmConfig config, ServerSet serverSet, TimeValue timeout, Logger logger,                                                    BindRequest bindRequest,                                                    Supplier<String> healthCheckDnSupplier) throws LDAPException;1534434117;Creates the connection pool that will be used by the session factory and initializes the health check support;static LDAPConnectionPool createConnectionPool(RealmConfig config, ServerSet serverSet, TimeValue timeout, Logger logger,_                                                   BindRequest bindRequest,_                                                   Supplier<String> healthCheckDnSupplier) throws LDAPException {_        Settings settings = config.settings()__        final int initialSize = PoolingSessionFactorySettings.POOL_INITIAL_SIZE.get(settings)__        final int size = PoolingSessionFactorySettings.POOL_SIZE.get(settings)__        LDAPConnectionPool pool = null__        boolean success = false__        try {_            pool = LdapUtils.privilegedConnect(() -> new LDAPConnectionPool(serverSet, bindRequest, initialSize, size))__            pool.setRetryFailedOperationsDueToInvalidConnections(true)__            if (PoolingSessionFactorySettings.HEALTH_CHECK_ENABLED.get(settings)) {_                String entryDn = PoolingSessionFactorySettings.HEALTH_CHECK_DN.get(settings).orElseGet(healthCheckDnSupplier)__                final long healthCheckInterval = PoolingSessionFactorySettings.HEALTH_CHECK_INTERVAL.get(settings).millis()__                if (entryDn != null) {_                    _                    _                    _                    _                    LDAPConnectionPoolHealthCheck healthCheck = new GetEntryLDAPConnectionPoolHealthCheck(entryDn, timeout.millis(),_                            false, false, false, true, false)__                    pool.setHealthCheck(healthCheck)__                    pool.setHealthCheckIntervalMillis(healthCheckInterval)__                } else {_                    logger.warn(new ParameterizedMessage("[{}] and [{}} have not been specified or are not valid distinguished names," +_                            "so connection health checking is disabled", RealmSettings.getFullSettingKey(config,_                            PoolingSessionFactorySettings.BIND_DN),_                            RealmSettings.getFullSettingKey(config, PoolingSessionFactorySettings.HEALTH_CHECK_DN)))__                }_            }__            success = true__            return pool__        } finally {_            if (success == false && pool != null) {_                pool.close()__            }_        }_    };creates,the,connection,pool,that,will,be,used,by,the,session,factory,and,initializes,the,health,check,support;static,ldapconnection,pool,create,connection,pool,realm,config,config,server,set,server,set,time,value,timeout,logger,logger,bind,request,bind,request,supplier,string,health,check,dn,supplier,throws,ldapexception,settings,settings,config,settings,final,int,initial,size,pooling,session,factory,settings,get,settings,final,int,size,pooling,session,factory,settings,get,settings,ldapconnection,pool,pool,null,boolean,success,false,try,pool,ldap,utils,privileged,connect,new,ldapconnection,pool,server,set,bind,request,initial,size,size,pool,set,retry,failed,operations,due,to,invalid,connections,true,if,pooling,session,factory,settings,get,settings,string,entry,dn,pooling,session,factory,settings,get,settings,or,else,get,health,check,dn,supplier,final,long,health,check,interval,pooling,session,factory,settings,get,settings,millis,if,entry,dn,null,ldapconnection,pool,health,check,health,check,new,get,entry,ldapconnection,pool,health,check,entry,dn,timeout,millis,false,false,false,true,false,pool,set,health,check,health,check,pool,set,health,check,interval,millis,health,check,interval,else,logger,warn,new,parameterized,message,and,have,not,been,specified,or,are,not,valid,distinguished,names,so,connection,health,checking,is,disabled,realm,settings,get,full,setting,key,config,pooling,session,factory,settings,realm,settings,get,full,setting,key,config,pooling,session,factory,settings,success,true,return,pool,finally,if,success,false,pool,null,pool,close
PoolingSessionFactory -> static LDAPConnectionPool createConnectionPool(RealmConfig config, ServerSet serverSet, TimeValue timeout, Logger logger,                                                    BindRequest bindRequest,                                                    Supplier<String> healthCheckDnSupplier) throws LDAPException;1541476610;Creates the connection pool that will be used by the session factory and initializes the health check support;static LDAPConnectionPool createConnectionPool(RealmConfig config, ServerSet serverSet, TimeValue timeout, Logger logger,_                                                   BindRequest bindRequest,_                                                   Supplier<String> healthCheckDnSupplier) throws LDAPException {_        final int initialSize = config.getSetting(PoolingSessionFactorySettings.POOL_INITIAL_SIZE)__        final int size = config.getSetting(PoolingSessionFactorySettings.POOL_SIZE)__        LDAPConnectionPool pool = null__        boolean success = false__        try {_            pool = LdapUtils.privilegedConnect(() -> new LDAPConnectionPool(serverSet, bindRequest, initialSize, size))__            pool.setRetryFailedOperationsDueToInvalidConnections(true)__            if (config.getSetting(PoolingSessionFactorySettings.HEALTH_CHECK_ENABLED)) {_                String entryDn = config.getSetting(PoolingSessionFactorySettings.HEALTH_CHECK_DN).orElseGet(healthCheckDnSupplier)__                final long healthCheckInterval = config.getSetting(PoolingSessionFactorySettings.HEALTH_CHECK_INTERVAL).millis()__                if (entryDn != null) {_                    _                    _                    _                    _                    LDAPConnectionPoolHealthCheck healthCheck = new GetEntryLDAPConnectionPoolHealthCheck(entryDn, timeout.millis(),_                            false, false, false, true, false)__                    pool.setHealthCheck(healthCheck)__                    pool.setHealthCheckIntervalMillis(healthCheckInterval)__                } else {_                    logger.warn(new ParameterizedMessage("[{}] and [{}} have not been specified or are not valid distinguished names," +_                            "so connection health checking is disabled", RealmSettings.getFullSettingKey(config,_                            PoolingSessionFactorySettings.BIND_DN),_                            RealmSettings.getFullSettingKey(config, PoolingSessionFactorySettings.HEALTH_CHECK_DN)))__                }_            }__            success = true__            return pool__        } finally {_            if (success == false && pool != null) {_                pool.close()__            }_        }_    };creates,the,connection,pool,that,will,be,used,by,the,session,factory,and,initializes,the,health,check,support;static,ldapconnection,pool,create,connection,pool,realm,config,config,server,set,server,set,time,value,timeout,logger,logger,bind,request,bind,request,supplier,string,health,check,dn,supplier,throws,ldapexception,final,int,initial,size,config,get,setting,pooling,session,factory,settings,final,int,size,config,get,setting,pooling,session,factory,settings,ldapconnection,pool,pool,null,boolean,success,false,try,pool,ldap,utils,privileged,connect,new,ldapconnection,pool,server,set,bind,request,initial,size,size,pool,set,retry,failed,operations,due,to,invalid,connections,true,if,config,get,setting,pooling,session,factory,settings,string,entry,dn,config,get,setting,pooling,session,factory,settings,or,else,get,health,check,dn,supplier,final,long,health,check,interval,config,get,setting,pooling,session,factory,settings,millis,if,entry,dn,null,ldapconnection,pool,health,check,health,check,new,get,entry,ldapconnection,pool,health,check,entry,dn,timeout,millis,false,false,false,true,false,pool,set,health,check,health,check,pool,set,health,check,interval,millis,health,check,interval,else,logger,warn,new,parameterized,message,and,have,not,been,specified,or,are,not,valid,distinguished,names,so,connection,health,checking,is,disabled,realm,settings,get,full,setting,key,config,pooling,session,factory,settings,realm,settings,get,full,setting,key,config,pooling,session,factory,settings,success,true,return,pool,finally,if,success,false,pool,null,pool,close
PoolingSessionFactory -> abstract void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener)_;1524684173;Attempts to get a {@link LdapSession} using the provided credentials and opens a new connection to the ldap server;abstract void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener)_;attempts,to,get,a,link,ldap,session,using,the,provided,credentials,and,opens,a,new,connection,to,the,ldap,server;abstract,void,get,session,without,pool,string,user,secure,string,password,action,listener,ldap,session,listener
PoolingSessionFactory -> abstract void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener)_;1534434117;Attempts to get a {@link LdapSession} using the provided credentials and opens a new connection to the ldap server;abstract void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener)_;attempts,to,get,a,link,ldap,session,using,the,provided,credentials,and,opens,a,new,connection,to,the,ldap,server;abstract,void,get,session,without,pool,string,user,secure,string,password,action,listener,ldap,session,listener
PoolingSessionFactory -> abstract void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener)_;1541476610;Attempts to get a {@link LdapSession} using the provided credentials and opens a new connection to the ldap server;abstract void getSessionWithoutPool(String user, SecureString password, ActionListener<LdapSession> listener)_;attempts,to,get,a,link,ldap,session,using,the,provided,credentials,and,opens,a,new,connection,to,the,ldap,server;abstract,void,get,session,without,pool,string,user,secure,string,password,action,listener,ldap,session,listener
