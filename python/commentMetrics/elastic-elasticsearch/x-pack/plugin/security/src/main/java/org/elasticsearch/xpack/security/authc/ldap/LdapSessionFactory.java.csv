commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected void doRun() throws Exception {     listener.onResponse((new LdapSession(logger, config, connection, ((SimpleBindRequest) connection.getLastBindRequest()).getBindDN(), groupResolver, metaDataResolver, timeout, null))). }
false;public;1;19;;@Override public void onFailure(Exception e) {     // record failure     if (containerException == null) {         containerException = e.     } else {         containerException.addSuppressed(e).     }     if (loopIndex > userDnTemplates.length) {         listener.onFailure(new IllegalStateException("User DN template iteration index out of bounds.")).     } else if (loopIndex == userDnTemplates.length) {         // loop break         IOUtils.closeWhileHandlingException(connection).         listener.onFailure(containerException).     } else {         loop().     } }
true;;0;5;// loop body ;// loop body void loop() {     final String template = userDnTemplates[loopIndex++].     final SimpleBindRequest bind = new SimpleBindRequest(buildDnFromTemplate(username, template), passwordBytes).     LdapUtils.maybeForkThenBind(connection, bind, threadPool, this). }
true;public;3;47;/**  * This iterates through the configured user templates attempting to open.  If all attempts fail, the last exception  * is kept as the cause of the thrown exception  *  * @param username a relative name, Not a distinguished name, that will be inserted into the template.  */ ;/**  * This iterates through the configured user templates attempting to open.  If all attempts fail, the last exception  * is kept as the cause of the thrown exception  *  * @param username a relative name, Not a distinguished name, that will be inserted into the template.  */ @Override public void session(String username, SecureString password, ActionListener<LdapSession> listener) {     try {         new AbstractRunnable() {              final LDAPConnection connection = LdapUtils.privilegedConnect(serverSet::getConnection).              final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars()).              Exception containerException = null.              int loopIndex = 0.              @Override             protected void doRun() throws Exception {                 listener.onResponse((new LdapSession(logger, config, connection, ((SimpleBindRequest) connection.getLastBindRequest()).getBindDN(), groupResolver, metaDataResolver, timeout, null))).             }              @Override             public void onFailure(Exception e) {                 // record failure                 if (containerException == null) {                     containerException = e.                 } else {                     containerException.addSuppressed(e).                 }                 if (loopIndex > userDnTemplates.length) {                     listener.onFailure(new IllegalStateException("User DN template iteration index out of bounds.")).                 } else if (loopIndex == userDnTemplates.length) {                     // loop break                     IOUtils.closeWhileHandlingException(connection).                     listener.onFailure(containerException).                 } else {                     loop().                 }             }              // loop body             void loop() {                 final String template = userDnTemplates[loopIndex++].                 final SimpleBindRequest bind = new SimpleBindRequest(buildDnFromTemplate(username, template), passwordBytes).                 LdapUtils.maybeForkThenBind(connection, bind, threadPool, this).             }         }.loop().     } catch (LDAPException e) {         listener.onFailure(e).     } }
true;;2;5;/**  * Securely escapes the username and inserts it into the template using MessageFormat  *  * @param username username to insert into the DN template.  Any commas, equals or plus will be escaped.  * @return DN (distinguished name) build from the template.  */ ;/**  * Securely escapes the username and inserts it into the template using MessageFormat  *  * @param username username to insert into the DN template.  Any commas, equals or plus will be escaped.  * @return DN (distinguished name) build from the template.  */ String buildDnFromTemplate(String username, String template) {     // this value must be escaped to avoid manipulation of the template DN.     String escapedUsername = escapedRDNValue(username).     return new MessageFormat(template, Locale.ROOT).format(new Object[] { escapedUsername }, new StringBuffer(), null).toString(). }
false;static;1;6;;static GroupsResolver groupResolver(RealmConfig realmConfig) {     if (realmConfig.hasSetting(SearchGroupsResolverSettings.BASE_DN)) {         return new SearchGroupsResolver(realmConfig).     }     return new UserAttributeGroupsResolver(realmConfig). }
