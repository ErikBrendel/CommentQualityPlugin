# id;timestamp;commentText;codeText;commentWords;codeWords
LdapSessionFactory -> @Override     public void session(String username, SecureString password, ActionListener<LdapSession> listener);1524684173;This iterates through the configured user templates attempting to open.  If all attempts fail, the last exception_is kept as the cause of the thrown exception__@param username a relative name, Not a distinguished name, that will be inserted into the template.;@Override_    public void session(String username, SecureString password, ActionListener<LdapSession> listener) {_        try {_            new AbstractRunnable() {_                final LDAPConnection connection = LdapUtils.privilegedConnect(serverSet::getConnection)__                final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars())__                Exception containerException = null__                int loopIndex = 0___                @Override_                protected void doRun() throws Exception {_                    listener.onResponse(_                            (new LdapSession(logger, config, connection, ((SimpleBindRequest) connection.getLastBindRequest()).getBindDN(),_                                    groupResolver, metaDataResolver, timeout, null)))__                }__                @Override_                public void onFailure(Exception e) {_                    _                    if (containerException == null) {_                        containerException = e__                    } else {_                        containerException.addSuppressed(e)__                    }__                    if (loopIndex > userDnTemplates.length) {_                        listener.onFailure(new IllegalStateException("User DN template iteration index out of bounds."))__                    } else if (loopIndex == userDnTemplates.length) {_                        _                        IOUtils.closeWhileHandlingException(connection)__                        listener.onFailure(containerException)__                    } else {_                        loop()__                    }_                }__                _                void loop() {_                    final String template = userDnTemplates[loopIndex++]__                    final SimpleBindRequest bind = new SimpleBindRequest(buildDnFromTemplate(username, template), passwordBytes)__                    LdapUtils.maybeForkThenBind(connection, bind, threadPool, this)__                }_            }.loop()__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,iterates,through,the,configured,user,templates,attempting,to,open,if,all,attempts,fail,the,last,exception,is,kept,as,the,cause,of,the,thrown,exception,param,username,a,relative,name,not,a,distinguished,name,that,will,be,inserted,into,the,template;override,public,void,session,string,username,secure,string,password,action,listener,ldap,session,listener,try,new,abstract,runnable,final,ldapconnection,connection,ldap,utils,privileged,connect,server,set,get,connection,final,byte,password,bytes,char,arrays,to,utf8bytes,password,get,chars,exception,container,exception,null,int,loop,index,0,override,protected,void,do,run,throws,exception,listener,on,response,new,ldap,session,logger,config,connection,simple,bind,request,connection,get,last,bind,request,get,bind,dn,group,resolver,meta,data,resolver,timeout,null,override,public,void,on,failure,exception,e,if,container,exception,null,container,exception,e,else,container,exception,add,suppressed,e,if,loop,index,user,dn,templates,length,listener,on,failure,new,illegal,state,exception,user,dn,template,iteration,index,out,of,bounds,else,if,loop,index,user,dn,templates,length,ioutils,close,while,handling,exception,connection,listener,on,failure,container,exception,else,loop,void,loop,final,string,template,user,dn,templates,loop,index,final,simple,bind,request,bind,new,simple,bind,request,build,dn,from,template,username,template,password,bytes,ldap,utils,maybe,fork,then,bind,connection,bind,thread,pool,this,loop,catch,ldapexception,e,listener,on,failure,e
LdapSessionFactory -> @Override     public void session(String username, SecureString password, ActionListener<LdapSession> listener);1534434117;This iterates through the configured user templates attempting to open.  If all attempts fail, the last exception_is kept as the cause of the thrown exception__@param username a relative name, Not a distinguished name, that will be inserted into the template.;@Override_    public void session(String username, SecureString password, ActionListener<LdapSession> listener) {_        try {_            new AbstractRunnable() {_                final LDAPConnection connection = LdapUtils.privilegedConnect(serverSet::getConnection)__                final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars())__                Exception containerException = null__                int loopIndex = 0___                @Override_                protected void doRun() throws Exception {_                    listener.onResponse(_                            (new LdapSession(logger, config, connection, ((SimpleBindRequest) connection.getLastBindRequest()).getBindDN(),_                                    groupResolver, metaDataResolver, timeout, null)))__                }__                @Override_                public void onFailure(Exception e) {_                    _                    if (containerException == null) {_                        containerException = e__                    } else {_                        containerException.addSuppressed(e)__                    }__                    if (loopIndex > userDnTemplates.length) {_                        listener.onFailure(new IllegalStateException("User DN template iteration index out of bounds."))__                    } else if (loopIndex == userDnTemplates.length) {_                        _                        IOUtils.closeWhileHandlingException(connection)__                        listener.onFailure(containerException)__                    } else {_                        loop()__                    }_                }__                _                void loop() {_                    final String template = userDnTemplates[loopIndex++]__                    final SimpleBindRequest bind = new SimpleBindRequest(buildDnFromTemplate(username, template), passwordBytes)__                    LdapUtils.maybeForkThenBind(connection, bind, threadPool, this)__                }_            }.loop()__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,iterates,through,the,configured,user,templates,attempting,to,open,if,all,attempts,fail,the,last,exception,is,kept,as,the,cause,of,the,thrown,exception,param,username,a,relative,name,not,a,distinguished,name,that,will,be,inserted,into,the,template;override,public,void,session,string,username,secure,string,password,action,listener,ldap,session,listener,try,new,abstract,runnable,final,ldapconnection,connection,ldap,utils,privileged,connect,server,set,get,connection,final,byte,password,bytes,char,arrays,to,utf8bytes,password,get,chars,exception,container,exception,null,int,loop,index,0,override,protected,void,do,run,throws,exception,listener,on,response,new,ldap,session,logger,config,connection,simple,bind,request,connection,get,last,bind,request,get,bind,dn,group,resolver,meta,data,resolver,timeout,null,override,public,void,on,failure,exception,e,if,container,exception,null,container,exception,e,else,container,exception,add,suppressed,e,if,loop,index,user,dn,templates,length,listener,on,failure,new,illegal,state,exception,user,dn,template,iteration,index,out,of,bounds,else,if,loop,index,user,dn,templates,length,ioutils,close,while,handling,exception,connection,listener,on,failure,container,exception,else,loop,void,loop,final,string,template,user,dn,templates,loop,index,final,simple,bind,request,bind,new,simple,bind,request,build,dn,from,template,username,template,password,bytes,ldap,utils,maybe,fork,then,bind,connection,bind,thread,pool,this,loop,catch,ldapexception,e,listener,on,failure,e
LdapSessionFactory -> @Override     public void session(String username, SecureString password, ActionListener<LdapSession> listener);1539615817;This iterates through the configured user templates attempting to open.  If all attempts fail, the last exception_is kept as the cause of the thrown exception__@param username a relative name, Not a distinguished name, that will be inserted into the template.;@Override_    public void session(String username, SecureString password, ActionListener<LdapSession> listener) {_        try {_            new AbstractRunnable() {_                final LDAPConnection connection = LdapUtils.privilegedConnect(serverSet::getConnection)__                final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars())__                Exception containerException = null__                int loopIndex = 0___                @Override_                protected void doRun() throws Exception {_                    listener.onResponse(_                            (new LdapSession(logger, config, connection, ((SimpleBindRequest) connection.getLastBindRequest()).getBindDN(),_                                    groupResolver, metaDataResolver, timeout, null)))__                }__                @Override_                public void onFailure(Exception e) {_                    _                    if (containerException == null) {_                        containerException = e__                    } else {_                        containerException.addSuppressed(e)__                    }__                    if (loopIndex > userDnTemplates.length) {_                        listener.onFailure(new IllegalStateException("User DN template iteration index out of bounds."))__                    } else if (loopIndex == userDnTemplates.length) {_                        _                        IOUtils.closeWhileHandlingException(connection)__                        listener.onFailure(containerException)__                    } else {_                        loop()__                    }_                }__                _                void loop() {_                    final String template = userDnTemplates[loopIndex++]__                    final SimpleBindRequest bind = new SimpleBindRequest(buildDnFromTemplate(username, template), passwordBytes)__                    LdapUtils.maybeForkThenBind(connection, bind, threadPool, this)__                }_            }.loop()__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,iterates,through,the,configured,user,templates,attempting,to,open,if,all,attempts,fail,the,last,exception,is,kept,as,the,cause,of,the,thrown,exception,param,username,a,relative,name,not,a,distinguished,name,that,will,be,inserted,into,the,template;override,public,void,session,string,username,secure,string,password,action,listener,ldap,session,listener,try,new,abstract,runnable,final,ldapconnection,connection,ldap,utils,privileged,connect,server,set,get,connection,final,byte,password,bytes,char,arrays,to,utf8bytes,password,get,chars,exception,container,exception,null,int,loop,index,0,override,protected,void,do,run,throws,exception,listener,on,response,new,ldap,session,logger,config,connection,simple,bind,request,connection,get,last,bind,request,get,bind,dn,group,resolver,meta,data,resolver,timeout,null,override,public,void,on,failure,exception,e,if,container,exception,null,container,exception,e,else,container,exception,add,suppressed,e,if,loop,index,user,dn,templates,length,listener,on,failure,new,illegal,state,exception,user,dn,template,iteration,index,out,of,bounds,else,if,loop,index,user,dn,templates,length,ioutils,close,while,handling,exception,connection,listener,on,failure,container,exception,else,loop,void,loop,final,string,template,user,dn,templates,loop,index,final,simple,bind,request,bind,new,simple,bind,request,build,dn,from,template,username,template,password,bytes,ldap,utils,maybe,fork,then,bind,connection,bind,thread,pool,this,loop,catch,ldapexception,e,listener,on,failure,e
LdapSessionFactory -> @Override     public void session(String username, SecureString password, ActionListener<LdapSession> listener);1541476610;This iterates through the configured user templates attempting to open.  If all attempts fail, the last exception_is kept as the cause of the thrown exception__@param username a relative name, Not a distinguished name, that will be inserted into the template.;@Override_    public void session(String username, SecureString password, ActionListener<LdapSession> listener) {_        try {_            new AbstractRunnable() {_                final LDAPConnection connection = LdapUtils.privilegedConnect(serverSet::getConnection)__                final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars())__                Exception containerException = null__                int loopIndex = 0___                @Override_                protected void doRun() throws Exception {_                    listener.onResponse(_                            (new LdapSession(logger, config, connection, ((SimpleBindRequest) connection.getLastBindRequest()).getBindDN(),_                                    groupResolver, metaDataResolver, timeout, null)))__                }__                @Override_                public void onFailure(Exception e) {_                    _                    if (containerException == null) {_                        containerException = e__                    } else {_                        containerException.addSuppressed(e)__                    }__                    if (loopIndex > userDnTemplates.length) {_                        listener.onFailure(new IllegalStateException("User DN template iteration index out of bounds."))__                    } else if (loopIndex == userDnTemplates.length) {_                        _                        IOUtils.closeWhileHandlingException(connection)__                        listener.onFailure(containerException)__                    } else {_                        loop()__                    }_                }__                _                void loop() {_                    final String template = userDnTemplates[loopIndex++]__                    final SimpleBindRequest bind = new SimpleBindRequest(buildDnFromTemplate(username, template), passwordBytes)__                    LdapUtils.maybeForkThenBind(connection, bind, threadPool, this)__                }_            }.loop()__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,iterates,through,the,configured,user,templates,attempting,to,open,if,all,attempts,fail,the,last,exception,is,kept,as,the,cause,of,the,thrown,exception,param,username,a,relative,name,not,a,distinguished,name,that,will,be,inserted,into,the,template;override,public,void,session,string,username,secure,string,password,action,listener,ldap,session,listener,try,new,abstract,runnable,final,ldapconnection,connection,ldap,utils,privileged,connect,server,set,get,connection,final,byte,password,bytes,char,arrays,to,utf8bytes,password,get,chars,exception,container,exception,null,int,loop,index,0,override,protected,void,do,run,throws,exception,listener,on,response,new,ldap,session,logger,config,connection,simple,bind,request,connection,get,last,bind,request,get,bind,dn,group,resolver,meta,data,resolver,timeout,null,override,public,void,on,failure,exception,e,if,container,exception,null,container,exception,e,else,container,exception,add,suppressed,e,if,loop,index,user,dn,templates,length,listener,on,failure,new,illegal,state,exception,user,dn,template,iteration,index,out,of,bounds,else,if,loop,index,user,dn,templates,length,ioutils,close,while,handling,exception,connection,listener,on,failure,container,exception,else,loop,void,loop,final,string,template,user,dn,templates,loop,index,final,simple,bind,request,bind,new,simple,bind,request,build,dn,from,template,username,template,password,bytes,ldap,utils,maybe,fork,then,bind,connection,bind,thread,pool,this,loop,catch,ldapexception,e,listener,on,failure,e
LdapSessionFactory -> String buildDnFromTemplate(String username, String template);1524684173;Securely escapes the username and inserts it into the template using MessageFormat__@param username username to insert into the DN template.  Any commas, equals or plus will be escaped._@return DN (distinquished name) build from the template.;String buildDnFromTemplate(String username, String template) {_        _        String escapedUsername = escapedRDNValue(username)__        return new MessageFormat(template, Locale.ROOT).format(new Object[] { escapedUsername }, new StringBuffer(), null).toString()__    };securely,escapes,the,username,and,inserts,it,into,the,template,using,message,format,param,username,username,to,insert,into,the,dn,template,any,commas,equals,or,plus,will,be,escaped,return,dn,distinquished,name,build,from,the,template;string,build,dn,from,template,string,username,string,template,string,escaped,username,escaped,rdnvalue,username,return,new,message,format,template,locale,root,format,new,object,escaped,username,new,string,buffer,null,to,string
LdapSessionFactory -> String buildDnFromTemplate(String username, String template);1534434117;Securely escapes the username and inserts it into the template using MessageFormat__@param username username to insert into the DN template.  Any commas, equals or plus will be escaped._@return DN (distinquished name) build from the template.;String buildDnFromTemplate(String username, String template) {_        _        String escapedUsername = escapedRDNValue(username)__        return new MessageFormat(template, Locale.ROOT).format(new Object[] { escapedUsername }, new StringBuffer(), null).toString()__    };securely,escapes,the,username,and,inserts,it,into,the,template,using,message,format,param,username,username,to,insert,into,the,dn,template,any,commas,equals,or,plus,will,be,escaped,return,dn,distinquished,name,build,from,the,template;string,build,dn,from,template,string,username,string,template,string,escaped,username,escaped,rdnvalue,username,return,new,message,format,template,locale,root,format,new,object,escaped,username,new,string,buffer,null,to,string
LdapSessionFactory -> String buildDnFromTemplate(String username, String template);1539615817;Securely escapes the username and inserts it into the template using MessageFormat__@param username username to insert into the DN template.  Any commas, equals or plus will be escaped._@return DN (distinguished name) build from the template.;String buildDnFromTemplate(String username, String template) {_        _        String escapedUsername = escapedRDNValue(username)__        return new MessageFormat(template, Locale.ROOT).format(new Object[] { escapedUsername }, new StringBuffer(), null).toString()__    };securely,escapes,the,username,and,inserts,it,into,the,template,using,message,format,param,username,username,to,insert,into,the,dn,template,any,commas,equals,or,plus,will,be,escaped,return,dn,distinguished,name,build,from,the,template;string,build,dn,from,template,string,username,string,template,string,escaped,username,escaped,rdnvalue,username,return,new,message,format,template,locale,root,format,new,object,escaped,username,new,string,buffer,null,to,string
LdapSessionFactory -> String buildDnFromTemplate(String username, String template);1541476610;Securely escapes the username and inserts it into the template using MessageFormat__@param username username to insert into the DN template.  Any commas, equals or plus will be escaped._@return DN (distinguished name) build from the template.;String buildDnFromTemplate(String username, String template) {_        _        String escapedUsername = escapedRDNValue(username)__        return new MessageFormat(template, Locale.ROOT).format(new Object[] { escapedUsername }, new StringBuffer(), null).toString()__    };securely,escapes,the,username,and,inserts,it,into,the,template,using,message,format,param,username,username,to,insert,into,the,dn,template,any,commas,equals,or,plus,will,be,escaped,return,dn,distinguished,name,build,from,the,template;string,build,dn,from,template,string,username,string,template,string,escaped,username,escaped,rdnvalue,username,return,new,message,format,template,locale,root,format,new,object,escaped,username,new,string,buffer,null,to,string
