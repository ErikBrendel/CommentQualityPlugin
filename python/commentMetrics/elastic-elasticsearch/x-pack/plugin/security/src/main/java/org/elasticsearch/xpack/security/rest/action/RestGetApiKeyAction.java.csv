commented;modifiers;parameterAmount;loc;comment;code
false;public;2;10;;@Override public RestResponse buildResponse(GetApiKeyResponse getApiKeyResponse, XContentBuilder builder) throws Exception {     getApiKeyResponse.toXContent(builder, channel.request()).     // return HTTP status 404 if no API key found for API key id     if (Strings.hasText(apiKeyId) && getApiKeyResponse.getApiKeyInfos().length == 0) {         return new BytesRestResponse(RestStatus.NOT_FOUND, builder).     }     return new BytesRestResponse(RestStatus.OK, builder). }
false;protected;2;21;;@Override protected RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {     final String apiKeyId = request.param("id").     final String apiKeyName = request.param("name").     final String userName = request.param("username").     final String realmName = request.param("realm_name").     final GetApiKeyRequest getApiKeyRequest = new GetApiKeyRequest(realmName, userName, apiKeyId, apiKeyName).     return channel -> client.execute(GetApiKeyAction.INSTANCE, getApiKeyRequest, new RestBuilderListener<GetApiKeyResponse>(channel) {          @Override         public RestResponse buildResponse(GetApiKeyResponse getApiKeyResponse, XContentBuilder builder) throws Exception {             getApiKeyResponse.toXContent(builder, channel.request()).             // return HTTP status 404 if no API key found for API key id             if (Strings.hasText(apiKeyId) && getApiKeyResponse.getApiKeyInfos().length == 0) {                 return new BytesRestResponse(RestStatus.NOT_FOUND, builder).             }             return new BytesRestResponse(RestStatus.OK, builder).         }     }). }
false;public;0;4;;@Override public String getName() {     return "xpack_security_get_api_key". }
