# id;timestamp;commentText;codeText;commentWords;codeWords
UserRoleMapper -> void resolveRoles(UserData user, ActionListener<Set<String>> listener)_;1524684173;Determines the set of roles that should be applied to <code>user</code>.;void resolveRoles(UserData user, ActionListener<Set<String>> listener)_;determines,the,set,of,roles,that,should,be,applied,to,code,user,code;void,resolve,roles,user,data,user,action,listener,set,string,listener
UserRoleMapper -> void resolveRoles(UserData user, ActionListener<Set<String>> listener)_;1529658035;Determines the set of roles that should be applied to <code>user</code>.;void resolveRoles(UserData user, ActionListener<Set<String>> listener)_;determines,the,set,of,roles,that,should,be,applied,to,code,user,code;void,resolve,roles,user,data,user,action,listener,set,string,listener
UserRoleMapper -> void resolveRoles(UserData user, ActionListener<Set<String>> listener)_;1539615817;Determines the set of roles that should be applied to <code>user</code>.;void resolveRoles(UserData user, ActionListener<Set<String>> listener)_;determines,the,set,of,roles,that,should,be,applied,to,code,user,code;void,resolve,roles,user,data,user,action,listener,set,string,listener
UserRoleMapper -> void resolveRoles(UserData user, ActionListener<Set<String>> listener)_;1540847035;Determines the set of roles that should be applied to <code>user</code>.;void resolveRoles(UserData user, ActionListener<Set<String>> listener)_;determines,the,set,of,roles,that,should,be,applied,to,code,user,code;void,resolve,roles,user,data,user,action,listener,set,string,listener
UserRoleMapper -> UserData -> @Nullable         public String getDn();1524684173;The <em>distinguished name</em> of the authenticated user, if applicable to the_authentication method used. Otherwise, <code>null</code>.;@Nullable_        public String getDn() {_            return dn__        };the,em,distinguished,name,em,of,the,authenticated,user,if,applicable,to,the,authentication,method,used,otherwise,code,null,code;nullable,public,string,get,dn,return,dn
UserRoleMapper -> UserData -> @Nullable         public String getDn();1529658035;The <em>distinguished name</em> of the authenticated user, if applicable to the_authentication method used. Otherwise, <code>null</code>.;@Nullable_        public String getDn() {_            return dn__        };the,em,distinguished,name,em,of,the,authenticated,user,if,applicable,to,the,authentication,method,used,otherwise,code,null,code;nullable,public,string,get,dn,return,dn
UserRoleMapper -> UserData -> @Nullable         public String getDn();1539615817;The <em>distinguished name</em> of the authenticated user, if applicable to the_authentication method used. Otherwise, <code>null</code>.;@Nullable_        public String getDn() {_            return dn__        };the,em,distinguished,name,em,of,the,authenticated,user,if,applicable,to,the,authentication,method,used,otherwise,code,null,code;nullable,public,string,get,dn,return,dn
UserRoleMapper -> UserData -> @Nullable         public String getDn();1540847035;The <em>distinguished name</em> of the authenticated user, if applicable to the_authentication method used. Otherwise, <code>null</code>.;@Nullable_        public String getDn() {_            return dn__        };the,em,distinguished,name,em,of,the,authenticated,user,if,applicable,to,the,authentication,method,used,otherwise,code,null,code;nullable,public,string,get,dn,return,dn
UserRoleMapper -> UserData -> public ExpressionModel asModel();1524684173;Formats the user data as a {@link ExpressionModel}._The model does <em>not</em> have nested values - all values are simple Java values, but keys may_contain <code>.</code>._For example, the {@link #metadata} values will be stored in the model with a key of_<code>"metadata.KEY"</code> where <code>KEY</code> is the key from the metadata object.;public ExpressionModel asModel() {_            final ExpressionModel model = new ExpressionModel()__            model.defineField("username", username)__            model.defineField("dn", dn, new DistinguishedNamePredicate(dn))__            model.defineField("groups", groups, groups.stream()_                    .<Predicate<FieldExpression.FieldValue>>map(DistinguishedNamePredicate::new)_                    .reduce(Predicate::or)_                    .orElse(fieldValue -> false)_            )__            metadata.keySet().forEach(k -> model.defineField("metadata." + k, metadata.get(k)))__            model.defineField("realm.name", realm.name())__            return model__        };formats,the,user,data,as,a,link,expression,model,the,model,does,em,not,em,have,nested,values,all,values,are,simple,java,values,but,keys,may,contain,code,code,for,example,the,link,metadata,values,will,be,stored,in,the,model,with,a,key,of,code,metadata,key,code,where,code,key,code,is,the,key,from,the,metadata,object;public,expression,model,as,model,final,expression,model,model,new,expression,model,model,define,field,username,username,model,define,field,dn,dn,new,distinguished,name,predicate,dn,model,define,field,groups,groups,groups,stream,predicate,field,expression,field,value,map,distinguished,name,predicate,new,reduce,predicate,or,or,else,field,value,false,metadata,key,set,for,each,k,model,define,field,metadata,k,metadata,get,k,model,define,field,realm,name,realm,name,return,model
UserRoleMapper -> UserData -> public ExpressionModel asModel();1529658035;Formats the user data as a {@link ExpressionModel}._The model does <em>not</em> have nested values - all values are simple Java values, but keys may_contain <code>.</code>._For example, the {@link #metadata} values will be stored in the model with a key of_<code>"metadata.KEY"</code> where <code>KEY</code> is the key from the metadata object.;public ExpressionModel asModel() {_            final ExpressionModel model = new ExpressionModel()__            model.defineField("username", username)__            model.defineField("dn", dn, new DistinguishedNamePredicate(dn))__            model.defineField("groups", groups, groups.stream()_                    .<Predicate<FieldExpression.FieldValue>>map(DistinguishedNamePredicate::new)_                    .reduce(Predicate::or)_                    .orElse(fieldValue -> false)_            )__            metadata.keySet().forEach(k -> model.defineField("metadata." + k, metadata.get(k)))__            model.defineField("realm.name", realm.name())__            return model__        };formats,the,user,data,as,a,link,expression,model,the,model,does,em,not,em,have,nested,values,all,values,are,simple,java,values,but,keys,may,contain,code,code,for,example,the,link,metadata,values,will,be,stored,in,the,model,with,a,key,of,code,metadata,key,code,where,code,key,code,is,the,key,from,the,metadata,object;public,expression,model,as,model,final,expression,model,model,new,expression,model,model,define,field,username,username,model,define,field,dn,dn,new,distinguished,name,predicate,dn,model,define,field,groups,groups,groups,stream,predicate,field,expression,field,value,map,distinguished,name,predicate,new,reduce,predicate,or,or,else,field,value,false,metadata,key,set,for,each,k,model,define,field,metadata,k,metadata,get,k,model,define,field,realm,name,realm,name,return,model
UserRoleMapper -> UserData -> public ExpressionModel asModel();1539615817;Formats the user data as a {@link ExpressionModel}._The model does <em>not</em> have nested values - all values are simple Java values, but keys may_contain <code>.</code>._For example, the {@link #metadata} values will be stored in the model with a key of_<code>"metadata.KEY"</code> where <code>KEY</code> is the key from the metadata object.;public ExpressionModel asModel() {_            final ExpressionModel model = new ExpressionModel()__            model.defineField("username", username)__            model.defineField("dn", dn, new DistinguishedNamePredicate(dn))__            model.defineField("groups", groups, groups.stream()_                    .<Predicate<FieldExpression.FieldValue>>map(DistinguishedNamePredicate::new)_                    .reduce(Predicate::or)_                    .orElse(fieldValue -> false)_            )__            metadata.keySet().forEach(k -> model.defineField("metadata." + k, metadata.get(k)))__            model.defineField("realm.name", realm.name())__            return model__        };formats,the,user,data,as,a,link,expression,model,the,model,does,em,not,em,have,nested,values,all,values,are,simple,java,values,but,keys,may,contain,code,code,for,example,the,link,metadata,values,will,be,stored,in,the,model,with,a,key,of,code,metadata,key,code,where,code,key,code,is,the,key,from,the,metadata,object;public,expression,model,as,model,final,expression,model,model,new,expression,model,model,define,field,username,username,model,define,field,dn,dn,new,distinguished,name,predicate,dn,model,define,field,groups,groups,groups,stream,predicate,field,expression,field,value,map,distinguished,name,predicate,new,reduce,predicate,or,or,else,field,value,false,metadata,key,set,for,each,k,model,define,field,metadata,k,metadata,get,k,model,define,field,realm,name,realm,name,return,model
UserRoleMapper -> UserData -> public ExpressionModel asModel();1540847035;Formats the user data as a {@link ExpressionModel}._The model does <em>not</em> have nested values - all values are simple Java values, but keys may_contain <code>.</code>._For example, the {@link #metadata} values will be stored in the model with a key of_<code>"metadata.KEY"</code> where <code>KEY</code> is the key from the metadata object.;public ExpressionModel asModel() {_            final ExpressionModel model = new ExpressionModel()__            model.defineField("username", username)__            model.defineField("dn", dn, new DistinguishedNamePredicate(dn))__            model.defineField("groups", groups, groups.stream()_                    .<Predicate<FieldExpression.FieldValue>>map(DistinguishedNamePredicate::new)_                    .reduce(Predicate::or)_                    .orElse(fieldValue -> false)_            )__            metadata.keySet().forEach(k -> model.defineField("metadata." + k, metadata.get(k)))__            model.defineField("realm.name", realm.name())__            return model__        };formats,the,user,data,as,a,link,expression,model,the,model,does,em,not,em,have,nested,values,all,values,are,simple,java,values,but,keys,may,contain,code,code,for,example,the,link,metadata,values,will,be,stored,in,the,model,with,a,key,of,code,metadata,key,code,where,code,key,code,is,the,key,from,the,metadata,object;public,expression,model,as,model,final,expression,model,model,new,expression,model,model,define,field,username,username,model,define,field,dn,dn,new,distinguished,name,predicate,dn,model,define,field,groups,groups,groups,stream,predicate,field,expression,field,value,map,distinguished,name,predicate,new,reduce,predicate,or,or,else,field,value,false,metadata,key,set,for,each,k,model,define,field,metadata,k,metadata,get,k,model,define,field,realm,name,realm,name,return,model
UserRoleMapper -> UserData -> public Map<String, Object> getMetadata();1524684173;Any additional metadata that was provided at authentication time. The set of keys will_vary according to the authenticating realm.;public Map<String, Object> getMetadata() {_            return metadata__        };any,additional,metadata,that,was,provided,at,authentication,time,the,set,of,keys,will,vary,according,to,the,authenticating,realm;public,map,string,object,get,metadata,return,metadata
UserRoleMapper -> UserData -> public Map<String, Object> getMetadata();1529658035;Any additional metadata that was provided at authentication time. The set of keys will_vary according to the authenticating realm.;public Map<String, Object> getMetadata() {_            return metadata__        };any,additional,metadata,that,was,provided,at,authentication,time,the,set,of,keys,will,vary,according,to,the,authenticating,realm;public,map,string,object,get,metadata,return,metadata
UserRoleMapper -> UserData -> public Map<String, Object> getMetadata();1539615817;Any additional metadata that was provided at authentication time. The set of keys will_vary according to the authenticating realm.;public Map<String, Object> getMetadata() {_            return metadata__        };any,additional,metadata,that,was,provided,at,authentication,time,the,set,of,keys,will,vary,according,to,the,authenticating,realm;public,map,string,object,get,metadata,return,metadata
UserRoleMapper -> UserData -> public Map<String, Object> getMetadata();1540847035;Any additional metadata that was provided at authentication time. The set of keys will_vary according to the authenticating realm.;public Map<String, Object> getMetadata() {_            return metadata__        };any,additional,metadata,that,was,provided,at,authentication,time,the,set,of,keys,will,vary,according,to,the,authenticating,realm;public,map,string,object,get,metadata,return,metadata
UserRoleMapper -> UserData -> public RealmConfig getRealm();1524684173;The realm that authenticated the user.;public RealmConfig getRealm() {_            return realm__        };the,realm,that,authenticated,the,user;public,realm,config,get,realm,return,realm
UserRoleMapper -> UserData -> public RealmConfig getRealm();1529658035;The realm that authenticated the user.;public RealmConfig getRealm() {_            return realm__        };the,realm,that,authenticated,the,user;public,realm,config,get,realm,return,realm
UserRoleMapper -> UserData -> public RealmConfig getRealm();1539615817;The realm that authenticated the user.;public RealmConfig getRealm() {_            return realm__        };the,realm,that,authenticated,the,user;public,realm,config,get,realm,return,realm
UserRoleMapper -> UserData -> public RealmConfig getRealm();1540847035;The realm that authenticated the user.;public RealmConfig getRealm() {_            return realm__        };the,realm,that,authenticated,the,user;public,realm,config,get,realm,return,realm
UserRoleMapper -> UserData -> public String getUsername();1524684173;The username for the authenticated user.;public String getUsername() {_            return username__        };the,username,for,the,authenticated,user;public,string,get,username,return,username
UserRoleMapper -> UserData -> public String getUsername();1529658035;The username for the authenticated user.;public String getUsername() {_            return username__        };the,username,for,the,authenticated,user;public,string,get,username,return,username
UserRoleMapper -> UserData -> public String getUsername();1539615817;The username for the authenticated user.;public String getUsername() {_            return username__        };the,username,for,the,authenticated,user;public,string,get,username,return,username
UserRoleMapper -> UserData -> public String getUsername();1540847035;The username for the authenticated user.;public String getUsername() {_            return username__        };the,username,for,the,authenticated,user;public,string,get,username,return,username
UserRoleMapper -> void refreshRealmOnChange(CachingRealm realm)_;1529658035;Informs the mapper that the provided <code>realm</code> should be refreshed when_the set of role-mappings change. The realm may be updated for the local node only, or across_the whole cluster depending on whether this role-mapper has node-local data or cluster-wide_data.;void refreshRealmOnChange(CachingRealm realm)_;informs,the,mapper,that,the,provided,code,realm,code,should,be,refreshed,when,the,set,of,role,mappings,change,the,realm,may,be,updated,for,the,local,node,only,or,across,the,whole,cluster,depending,on,whether,this,role,mapper,has,node,local,data,or,cluster,wide,data;void,refresh,realm,on,change,caching,realm,realm
UserRoleMapper -> void refreshRealmOnChange(CachingRealm realm)_;1539615817;Informs the mapper that the provided <code>realm</code> should be refreshed when_the set of role-mappings change. The realm may be updated for the local node only, or across_the whole cluster depending on whether this role-mapper has node-local data or cluster-wide_data.;void refreshRealmOnChange(CachingRealm realm)_;informs,the,mapper,that,the,provided,code,realm,code,should,be,refreshed,when,the,set,of,role,mappings,change,the,realm,may,be,updated,for,the,local,node,only,or,across,the,whole,cluster,depending,on,whether,this,role,mapper,has,node,local,data,or,cluster,wide,data;void,refresh,realm,on,change,caching,realm,realm
UserRoleMapper -> void refreshRealmOnChange(CachingRealm realm)_;1540847035;Informs the mapper that the provided <code>realm</code> should be refreshed when_the set of role-mappings change. The realm may be updated for the local node only, or across_the whole cluster depending on whether this role-mapper has node-local data or cluster-wide_data.;void refreshRealmOnChange(CachingRealm realm)_;informs,the,mapper,that,the,provided,code,realm,code,should,be,refreshed,when,the,set,of,role,mappings,change,the,realm,may,be,updated,for,the,local,node,only,or,across,the,whole,cluster,depending,on,whether,this,role,mapper,has,node,local,data,or,cluster,wide,data;void,refresh,realm,on,change,caching,realm,realm
UserRoleMapper -> UserData -> public Set<String> getGroups();1524684173;The groups to which the user belongs in the originating user store. Should be empty_if the user store or authentication method does not support groups.;public Set<String> getGroups() {_            return groups__        };the,groups,to,which,the,user,belongs,in,the,originating,user,store,should,be,empty,if,the,user,store,or,authentication,method,does,not,support,groups;public,set,string,get,groups,return,groups
UserRoleMapper -> UserData -> public Set<String> getGroups();1529658035;The groups to which the user belongs in the originating user store. Should be empty_if the user store or authentication method does not support groups.;public Set<String> getGroups() {_            return groups__        };the,groups,to,which,the,user,belongs,in,the,originating,user,store,should,be,empty,if,the,user,store,or,authentication,method,does,not,support,groups;public,set,string,get,groups,return,groups
UserRoleMapper -> UserData -> public Set<String> getGroups();1539615817;The groups to which the user belongs in the originating user store. Should be empty_if the user store or authentication method does not support groups.;public Set<String> getGroups() {_            return groups__        };the,groups,to,which,the,user,belongs,in,the,originating,user,store,should,be,empty,if,the,user,store,or,authentication,method,does,not,support,groups;public,set,string,get,groups,return,groups
UserRoleMapper -> UserData -> public Set<String> getGroups();1540847035;The groups to which the user belongs in the originating user store. Should be empty_if the user store or authentication method does not support groups.;public Set<String> getGroups() {_            return groups__        };the,groups,to,which,the,user,belongs,in,the,originating,user,store,should,be,empty,if,the,user,store,or,authentication,method,does,not,support,groups;public,set,string,get,groups,return,groups
