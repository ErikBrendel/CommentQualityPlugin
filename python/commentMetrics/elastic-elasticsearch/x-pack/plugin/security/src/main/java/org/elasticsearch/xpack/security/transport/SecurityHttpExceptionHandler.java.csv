commented;modifiers;parameterAmount;loc;comment;code
false;public;2;32;;public void accept(HttpChannel channel, Exception e) {     if (!lifecycle.started()) {         return.     }     if (isNotSslRecordException(e)) {         if (logger.isTraceEnabled()) {             logger.trace(new ParameterizedMessage("received plaintext http traffic on an https channel, closing connection {}", channel), e).         } else {             logger.warn("received plaintext http traffic on an https channel, closing connection {}", channel).         }         CloseableChannel.closeChannel(channel).     } else if (isCloseDuringHandshakeException(e)) {         if (logger.isTraceEnabled()) {             logger.trace(new ParameterizedMessage("connection {} closed during ssl handshake", channel), e).         } else {             logger.warn("connection {} closed during ssl handshake", channel).         }         CloseableChannel.closeChannel(channel).     } else if (isReceivedCertificateUnknownException(e)) {         if (logger.isTraceEnabled()) {             logger.trace(new ParameterizedMessage("http client did not trust server's certificate, closing connection {}", channel), e).         } else {             logger.warn("http client did not trust this server's certificate, closing connection {}", channel).         }         CloseableChannel.closeChannel(channel).     } else {         fallback.accept(channel, e).     } }
