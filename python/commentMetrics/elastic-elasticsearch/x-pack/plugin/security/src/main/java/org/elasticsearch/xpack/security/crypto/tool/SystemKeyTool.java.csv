commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static void main(String[] args) throws Exception {     final SystemKeyTool tool = new SystemKeyTool().     int status = main(tool, args, Terminal.DEFAULT).     if (status != ExitCodes.OK) {         exit(status).     } }
false;static;3;3;;static int main(SystemKeyTool tool, String[] args, Terminal terminal) throws Exception {     return tool.main(args, terminal). }
false;protected;3;28;;@Override protected void execute(Terminal terminal, OptionSet options, Environment env) throws Exception {     final Path keyPath.     if (options.hasArgument(arguments)) {         List<String> args = arguments.values(options).         if (args.size() > 1) {             throw new UserException(ExitCodes.USAGE, "No more than one key path can be supplied").         }         keyPath = parsePath(args.get(0)).     } else {         keyPath = XPackPlugin.resolveConfigFile(env, "system_key").     }     // write the key     terminal.println(Terminal.Verbosity.VERBOSE, "generating...").     byte[] key = generateKey().     terminal.println(String.format(Locale.ROOT, "Storing generated key in [%s]...", keyPath.toAbsolutePath())).     Files.write(keyPath, key, StandardOpenOption.CREATE_NEW).     // set permissions to 600     PosixFileAttributeView view = Files.getFileAttributeView(keyPath, PosixFileAttributeView.class).     if (view != null) {         view.setPermissions(PERMISSION_OWNER_READ_WRITE).         terminal.println("Ensure the generated key can be read by the user that Elasticsearch runs as, " + "permissions are set to owner read/write only").     } }
false;static;0;3;;static byte[] generateKey() {     return generateSecretKey(KEY_SIZE).getEncoded(). }
false;static;1;9;;static SecretKey generateSecretKey(int keyLength) {     try {         KeyGenerator generator = KeyGenerator.getInstance(KEY_ALGO).         generator.init(keyLength).         return generator.generateKey().     } catch (NoSuchAlgorithmException e) {         throw new ElasticsearchException("failed to generate key", e).     } }
false;private,static;1;4;;@SuppressForbidden(reason = "Parsing command line path") private static Path parsePath(String path) {     return PathUtils.get(path). }
