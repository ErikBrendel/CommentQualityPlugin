# id;timestamp;commentText;codeText;commentWords;codeWords
ApiKeyService -> public void createApiKey(Authentication authentication, CreateApiKeyRequest request, Set<RoleDescriptor> roleDescriptorSet,                              ActionListener<CreateApiKeyResponse> listener);1549399169;Asynchronously creates a new API key based off of the request and authentication_@param authentication the authentication that this api key should be based off of_@param request the request to create the api key included any permission restrictions_@param roleDescriptorSet the user's actual roles that we always enforce_@param listener the listener that will be used to notify of completion;public void createApiKey(Authentication authentication, CreateApiKeyRequest request, Set<RoleDescriptor> roleDescriptorSet,_                             ActionListener<CreateApiKeyResponse> listener) {_        ensureEnabled()__        if (authentication == null) {_            listener.onFailure(new IllegalArgumentException("authentication must be provided"))__        } else {_            _            findApiKeyForApiKeyName(request.getName(), true, true, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    final Instant created = clock.instant()__                    final Instant expiration = getApiKeyExpiration(created, request)__                    final SecureString apiKey = UUIDs.randomBase64UUIDSecureString()__                    final Version version = clusterService.state().nodes().getMinNodeVersion()__                    if (version.before(Version.V_7_0_0)) { _                        logger.warn(_                                "nodes prior to the minimum supported version for api keys {} exist in the cluster_"_                                        + " these nodes will not be able to use api keys",_                                Version.V_7_0_0)__                    }__                    final char[] keyHash = hasher.hash(apiKey)__                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                        builder.startObject()_                            .field("doc_type", "api_key")_                            .field("creation_time", created.toEpochMilli())_                            .field("expiration_time", expiration == null ? null : expiration.toEpochMilli())_                            .field("api_key_invalidated", false)___                        byte[] utf8Bytes = null__                        try {_                            utf8Bytes = CharArrays.toUtf8Bytes(keyHash)__                            builder.field("api_key_hash").utf8Value(utf8Bytes, 0, utf8Bytes.length)__                        } finally {_                            if (utf8Bytes != null) {_                                Arrays.fill(utf8Bytes, (byte) 0)__                            }_                        }__                        _                        builder.startObject("role_descriptors")__                        if (request.getRoleDescriptors() != null && request.getRoleDescriptors().isEmpty() == false) {_                            for (RoleDescriptor descriptor : request.getRoleDescriptors()) {_                                builder.field(descriptor.getName(),_                                        (contentBuilder, params) -> descriptor.toXContent(contentBuilder, params, true))__                            }_                        }_                        builder.endObject()___                        _                        builder.startObject("limited_by_role_descriptors")__                        for (RoleDescriptor descriptor : roleDescriptorSet) {_                            builder.field(descriptor.getName(),_                                    (contentBuilder, params) -> descriptor.toXContent(contentBuilder, params, true))__                        }_                        builder.endObject()___                        builder.field("name", request.getName())_                            .field("version", version.id)_                            .startObject("creator")_                            .field("principal", authentication.getUser().principal())_                            .field("metadata", authentication.getUser().metadata())_                            .field("realm", authentication.getLookedUpBy() == null ?_                                authentication.getAuthenticatedBy().getName() : authentication.getLookedUpBy().getName())_                            .endObject()_                            .endObject()__                        final IndexRequest indexRequest =_                            client.prepareIndex(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE)_                                .setSource(builder)_                                .setRefreshPolicy(request.getRefreshPolicy())_                                .request()__                        securityIndex.prepareIndexIfNeededThenExecute(listener::onFailure, () ->_                        executeAsyncWithOrigin(client, SECURITY_ORIGIN, IndexAction.INSTANCE, indexRequest,_                                ActionListener.wrap(_                                        indexResponse -> listener.onResponse(_                                                new CreateApiKeyResponse(request.getName(), indexResponse.getId(), apiKey, expiration)),_                                        listener::onFailure)))__                    } catch (IOException e) {_                        listener.onFailure(e)__                    } finally {_                        Arrays.fill(keyHash, (char) 0)__                    }_                } else {_                    listener.onFailure(traceLog("create api key", new ElasticsearchSecurityException(_                            "Error creating api key as api key with name [{}] already exists", request.getName())))__                }_            }, listener::onFailure))__        }_    };asynchronously,creates,a,new,api,key,based,off,of,the,request,and,authentication,param,authentication,the,authentication,that,this,api,key,should,be,based,off,of,param,request,the,request,to,create,the,api,key,included,any,permission,restrictions,param,role,descriptor,set,the,user,s,actual,roles,that,we,always,enforce,param,listener,the,listener,that,will,be,used,to,notify,of,completion;public,void,create,api,key,authentication,authentication,create,api,key,request,request,set,role,descriptor,role,descriptor,set,action,listener,create,api,key,response,listener,ensure,enabled,if,authentication,null,listener,on,failure,new,illegal,argument,exception,authentication,must,be,provided,else,find,api,key,for,api,key,name,request,get,name,true,true,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,final,instant,created,clock,instant,final,instant,expiration,get,api,key,expiration,created,request,final,secure,string,api,key,uuids,random,base64uuidsecure,string,final,version,version,cluster,service,state,nodes,get,min,node,version,if,version,before,version,logger,warn,nodes,prior,to,the,minimum,supported,version,for,api,keys,exist,in,the,cluster,these,nodes,will,not,be,able,to,use,api,keys,version,final,char,key,hash,hasher,hash,api,key,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,field,field,created,to,epoch,milli,field,expiration,null,null,expiration,to,epoch,milli,field,false,byte,utf8bytes,null,try,utf8bytes,char,arrays,to,utf8bytes,key,hash,builder,field,utf8value,utf8bytes,0,utf8bytes,length,finally,if,utf8bytes,null,arrays,fill,utf8bytes,byte,0,builder,start,object,if,request,get,role,descriptors,null,request,get,role,descriptors,is,empty,false,for,role,descriptor,descriptor,request,get,role,descriptors,builder,field,descriptor,get,name,content,builder,params,descriptor,to,xcontent,content,builder,params,true,builder,end,object,builder,start,object,for,role,descriptor,descriptor,role,descriptor,set,builder,field,descriptor,get,name,content,builder,params,descriptor,to,xcontent,content,builder,params,true,builder,end,object,builder,field,name,request,get,name,field,version,version,id,start,object,creator,field,principal,authentication,get,user,principal,field,metadata,authentication,get,user,metadata,field,realm,authentication,get,looked,up,by,null,authentication,get,authenticated,by,get,name,authentication,get,looked,up,by,get,name,end,object,end,object,final,index,request,index,request,client,prepare,index,security,index,manager,type,set,source,builder,set,refresh,policy,request,get,refresh,policy,request,security,index,prepare,index,if,needed,then,execute,listener,on,failure,execute,async,with,origin,client,index,action,instance,index,request,action,listener,wrap,index,response,listener,on,response,new,create,api,key,response,request,get,name,index,response,get,id,api,key,expiration,listener,on,failure,catch,ioexception,e,listener,on,failure,e,finally,arrays,fill,key,hash,char,0,else,listener,on,failure,trace,log,create,api,key,new,elasticsearch,security,exception,error,creating,api,key,as,api,key,with,name,already,exists,request,get,name,listener,on,failure
ApiKeyService -> public void createApiKey(Authentication authentication, CreateApiKeyRequest request, Set<RoleDescriptor> roleDescriptorSet,                              ActionListener<CreateApiKeyResponse> listener);1549415786;Asynchronously creates a new API key based off of the request and authentication_@param authentication the authentication that this api key should be based off of_@param request the request to create the api key included any permission restrictions_@param roleDescriptorSet the user's actual roles that we always enforce_@param listener the listener that will be used to notify of completion;public void createApiKey(Authentication authentication, CreateApiKeyRequest request, Set<RoleDescriptor> roleDescriptorSet,_                             ActionListener<CreateApiKeyResponse> listener) {_        ensureEnabled()__        if (authentication == null) {_            listener.onFailure(new IllegalArgumentException("authentication must be provided"))__        } else {_            _            findApiKeyForApiKeyName(request.getName(), true, true, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    final Instant created = clock.instant()__                    final Instant expiration = getApiKeyExpiration(created, request)__                    final SecureString apiKey = UUIDs.randomBase64UUIDSecureString()__                    final Version version = clusterService.state().nodes().getMinNodeVersion()__                    if (version.before(Version.V_7_0_0)) { _                        logger.warn(_                                "nodes prior to the minimum supported version for api keys {} exist in the cluster_"_                                        + " these nodes will not be able to use api keys",_                                Version.V_7_0_0)__                    }__                    final char[] keyHash = hasher.hash(apiKey)__                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                        builder.startObject()_                            .field("doc_type", "api_key")_                            .field("creation_time", created.toEpochMilli())_                            .field("expiration_time", expiration == null ? null : expiration.toEpochMilli())_                            .field("api_key_invalidated", false)___                        byte[] utf8Bytes = null__                        try {_                            utf8Bytes = CharArrays.toUtf8Bytes(keyHash)__                            builder.field("api_key_hash").utf8Value(utf8Bytes, 0, utf8Bytes.length)__                        } finally {_                            if (utf8Bytes != null) {_                                Arrays.fill(utf8Bytes, (byte) 0)__                            }_                        }__                        _                        builder.startObject("role_descriptors")__                        if (request.getRoleDescriptors() != null && request.getRoleDescriptors().isEmpty() == false) {_                            for (RoleDescriptor descriptor : request.getRoleDescriptors()) {_                                builder.field(descriptor.getName(),_                                        (contentBuilder, params) -> descriptor.toXContent(contentBuilder, params, true))__                            }_                        }_                        builder.endObject()___                        _                        builder.startObject("limited_by_role_descriptors")__                        for (RoleDescriptor descriptor : roleDescriptorSet) {_                            builder.field(descriptor.getName(),_                                    (contentBuilder, params) -> descriptor.toXContent(contentBuilder, params, true))__                        }_                        builder.endObject()___                        builder.field("name", request.getName())_                            .field("version", version.id)_                            .startObject("creator")_                            .field("principal", authentication.getUser().principal())_                            .field("metadata", authentication.getUser().metadata())_                            .field("realm", authentication.getLookedUpBy() == null ?_                                authentication.getAuthenticatedBy().getName() : authentication.getLookedUpBy().getName())_                            .endObject()_                            .endObject()__                        final IndexRequest indexRequest =_                            client.prepareIndex(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE)_                                .setSource(builder)_                                .setRefreshPolicy(request.getRefreshPolicy())_                                .request()__                        securityIndex.prepareIndexIfNeededThenExecute(listener::onFailure, () ->_                        executeAsyncWithOrigin(client, SECURITY_ORIGIN, IndexAction.INSTANCE, indexRequest,_                                ActionListener.wrap(_                                        indexResponse -> listener.onResponse(_                                                new CreateApiKeyResponse(request.getName(), indexResponse.getId(), apiKey, expiration)),_                                        listener::onFailure)))__                    } catch (IOException e) {_                        listener.onFailure(e)__                    } finally {_                        Arrays.fill(keyHash, (char) 0)__                    }_                } else {_                    listener.onFailure(traceLog("create api key", new ElasticsearchSecurityException(_                            "Error creating api key as api key with name [{}] already exists", request.getName())))__                }_            }, listener::onFailure))__        }_    };asynchronously,creates,a,new,api,key,based,off,of,the,request,and,authentication,param,authentication,the,authentication,that,this,api,key,should,be,based,off,of,param,request,the,request,to,create,the,api,key,included,any,permission,restrictions,param,role,descriptor,set,the,user,s,actual,roles,that,we,always,enforce,param,listener,the,listener,that,will,be,used,to,notify,of,completion;public,void,create,api,key,authentication,authentication,create,api,key,request,request,set,role,descriptor,role,descriptor,set,action,listener,create,api,key,response,listener,ensure,enabled,if,authentication,null,listener,on,failure,new,illegal,argument,exception,authentication,must,be,provided,else,find,api,key,for,api,key,name,request,get,name,true,true,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,final,instant,created,clock,instant,final,instant,expiration,get,api,key,expiration,created,request,final,secure,string,api,key,uuids,random,base64uuidsecure,string,final,version,version,cluster,service,state,nodes,get,min,node,version,if,version,before,version,logger,warn,nodes,prior,to,the,minimum,supported,version,for,api,keys,exist,in,the,cluster,these,nodes,will,not,be,able,to,use,api,keys,version,final,char,key,hash,hasher,hash,api,key,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,field,field,created,to,epoch,milli,field,expiration,null,null,expiration,to,epoch,milli,field,false,byte,utf8bytes,null,try,utf8bytes,char,arrays,to,utf8bytes,key,hash,builder,field,utf8value,utf8bytes,0,utf8bytes,length,finally,if,utf8bytes,null,arrays,fill,utf8bytes,byte,0,builder,start,object,if,request,get,role,descriptors,null,request,get,role,descriptors,is,empty,false,for,role,descriptor,descriptor,request,get,role,descriptors,builder,field,descriptor,get,name,content,builder,params,descriptor,to,xcontent,content,builder,params,true,builder,end,object,builder,start,object,for,role,descriptor,descriptor,role,descriptor,set,builder,field,descriptor,get,name,content,builder,params,descriptor,to,xcontent,content,builder,params,true,builder,end,object,builder,field,name,request,get,name,field,version,version,id,start,object,creator,field,principal,authentication,get,user,principal,field,metadata,authentication,get,user,metadata,field,realm,authentication,get,looked,up,by,null,authentication,get,authenticated,by,get,name,authentication,get,looked,up,by,get,name,end,object,end,object,final,index,request,index,request,client,prepare,index,security,index,manager,type,set,source,builder,set,refresh,policy,request,get,refresh,policy,request,security,index,prepare,index,if,needed,then,execute,listener,on,failure,execute,async,with,origin,client,index,action,instance,index,request,action,listener,wrap,index,response,listener,on,response,new,create,api,key,response,request,get,name,index,response,get,id,api,key,expiration,listener,on,failure,catch,ioexception,e,listener,on,failure,e,finally,arrays,fill,key,hash,char,0,else,listener,on,failure,trace,log,create,api,key,new,elasticsearch,security,exception,error,creating,api,key,as,api,key,with,name,already,exists,request,get,name,listener,on,failure
ApiKeyService -> public void createApiKey(Authentication authentication, CreateApiKeyRequest request, Set<RoleDescriptor> roleDescriptorSet,                              ActionListener<CreateApiKeyResponse> listener);1549429429;Asynchronously creates a new API key based off of the request and authentication_@param authentication the authentication that this api key should be based off of_@param request the request to create the api key included any permission restrictions_@param roleDescriptorSet the user's actual roles that we always enforce_@param listener the listener that will be used to notify of completion;public void createApiKey(Authentication authentication, CreateApiKeyRequest request, Set<RoleDescriptor> roleDescriptorSet,_                             ActionListener<CreateApiKeyResponse> listener) {_        ensureEnabled()__        if (authentication == null) {_            listener.onFailure(new IllegalArgumentException("authentication must be provided"))__        } else {_            _            findApiKeyForApiKeyName(request.getName(), true, true, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    final Instant created = clock.instant()__                    final Instant expiration = getApiKeyExpiration(created, request)__                    final SecureString apiKey = UUIDs.randomBase64UUIDSecureString()__                    final Version version = clusterService.state().nodes().getMinNodeVersion()__                    if (version.before(Version.V_6_7_0)) {_                        logger.warn(_                                "nodes prior to the minimum supported version for api keys {} exist in the cluster_"_                                        + " these nodes will not be able to use api keys",_                                Version.V_6_7_0)__                    }__                    final char[] keyHash = hasher.hash(apiKey)__                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                        builder.startObject()_                            .field("doc_type", "api_key")_                            .field("creation_time", created.toEpochMilli())_                            .field("expiration_time", expiration == null ? null : expiration.toEpochMilli())_                            .field("api_key_invalidated", false)___                        byte[] utf8Bytes = null__                        try {_                            utf8Bytes = CharArrays.toUtf8Bytes(keyHash)__                            builder.field("api_key_hash").utf8Value(utf8Bytes, 0, utf8Bytes.length)__                        } finally {_                            if (utf8Bytes != null) {_                                Arrays.fill(utf8Bytes, (byte) 0)__                            }_                        }__                        _                        builder.startObject("role_descriptors")__                        if (request.getRoleDescriptors() != null && request.getRoleDescriptors().isEmpty() == false) {_                            for (RoleDescriptor descriptor : request.getRoleDescriptors()) {_                                builder.field(descriptor.getName(),_                                        (contentBuilder, params) -> descriptor.toXContent(contentBuilder, params, true))__                            }_                        }_                        builder.endObject()___                        _                        builder.startObject("limited_by_role_descriptors")__                        for (RoleDescriptor descriptor : roleDescriptorSet) {_                            builder.field(descriptor.getName(),_                                    (contentBuilder, params) -> descriptor.toXContent(contentBuilder, params, true))__                        }_                        builder.endObject()___                        builder.field("name", request.getName())_                            .field("version", version.id)_                            .startObject("creator")_                            .field("principal", authentication.getUser().principal())_                            .field("metadata", authentication.getUser().metadata())_                            .field("realm", authentication.getLookedUpBy() == null ?_                                authentication.getAuthenticatedBy().getName() : authentication.getLookedUpBy().getName())_                            .endObject()_                            .endObject()__                        final IndexRequest indexRequest =_                            client.prepareIndex(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE)_                                .setSource(builder)_                                .setRefreshPolicy(request.getRefreshPolicy())_                                .request()__                        securityIndex.prepareIndexIfNeededThenExecute(listener::onFailure, () ->_                        executeAsyncWithOrigin(client, SECURITY_ORIGIN, IndexAction.INSTANCE, indexRequest,_                                ActionListener.wrap(_                                        indexResponse -> listener.onResponse(_                                                new CreateApiKeyResponse(request.getName(), indexResponse.getId(), apiKey, expiration)),_                                        listener::onFailure)))__                    } catch (IOException e) {_                        listener.onFailure(e)__                    } finally {_                        Arrays.fill(keyHash, (char) 0)__                    }_                } else {_                    listener.onFailure(traceLog("create api key", new ElasticsearchSecurityException(_                            "Error creating api key as api key with name [{}] already exists", request.getName())))__                }_            }, listener::onFailure))__        }_    };asynchronously,creates,a,new,api,key,based,off,of,the,request,and,authentication,param,authentication,the,authentication,that,this,api,key,should,be,based,off,of,param,request,the,request,to,create,the,api,key,included,any,permission,restrictions,param,role,descriptor,set,the,user,s,actual,roles,that,we,always,enforce,param,listener,the,listener,that,will,be,used,to,notify,of,completion;public,void,create,api,key,authentication,authentication,create,api,key,request,request,set,role,descriptor,role,descriptor,set,action,listener,create,api,key,response,listener,ensure,enabled,if,authentication,null,listener,on,failure,new,illegal,argument,exception,authentication,must,be,provided,else,find,api,key,for,api,key,name,request,get,name,true,true,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,final,instant,created,clock,instant,final,instant,expiration,get,api,key,expiration,created,request,final,secure,string,api,key,uuids,random,base64uuidsecure,string,final,version,version,cluster,service,state,nodes,get,min,node,version,if,version,before,version,logger,warn,nodes,prior,to,the,minimum,supported,version,for,api,keys,exist,in,the,cluster,these,nodes,will,not,be,able,to,use,api,keys,version,final,char,key,hash,hasher,hash,api,key,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,field,field,created,to,epoch,milli,field,expiration,null,null,expiration,to,epoch,milli,field,false,byte,utf8bytes,null,try,utf8bytes,char,arrays,to,utf8bytes,key,hash,builder,field,utf8value,utf8bytes,0,utf8bytes,length,finally,if,utf8bytes,null,arrays,fill,utf8bytes,byte,0,builder,start,object,if,request,get,role,descriptors,null,request,get,role,descriptors,is,empty,false,for,role,descriptor,descriptor,request,get,role,descriptors,builder,field,descriptor,get,name,content,builder,params,descriptor,to,xcontent,content,builder,params,true,builder,end,object,builder,start,object,for,role,descriptor,descriptor,role,descriptor,set,builder,field,descriptor,get,name,content,builder,params,descriptor,to,xcontent,content,builder,params,true,builder,end,object,builder,field,name,request,get,name,field,version,version,id,start,object,creator,field,principal,authentication,get,user,principal,field,metadata,authentication,get,user,metadata,field,realm,authentication,get,looked,up,by,null,authentication,get,authenticated,by,get,name,authentication,get,looked,up,by,get,name,end,object,end,object,final,index,request,index,request,client,prepare,index,security,index,manager,type,set,source,builder,set,refresh,policy,request,get,refresh,policy,request,security,index,prepare,index,if,needed,then,execute,listener,on,failure,execute,async,with,origin,client,index,action,instance,index,request,action,listener,wrap,index,response,listener,on,response,new,create,api,key,response,request,get,name,index,response,get,id,api,key,expiration,listener,on,failure,catch,ioexception,e,listener,on,failure,e,finally,arrays,fill,key,hash,char,0,else,listener,on,failure,trace,log,create,api,key,new,elasticsearch,security,exception,error,creating,api,key,as,api,key,with,name,already,exists,request,get,name,listener,on,failure
ApiKeyService -> public void createApiKey(Authentication authentication, CreateApiKeyRequest request, Set<RoleDescriptor> roleDescriptorSet,                              ActionListener<CreateApiKeyResponse> listener);1549447102;Asynchronously creates a new API key based off of the request and authentication_@param authentication the authentication that this api key should be based off of_@param request the request to create the api key included any permission restrictions_@param roleDescriptorSet the user's actual roles that we always enforce_@param listener the listener that will be used to notify of completion;public void createApiKey(Authentication authentication, CreateApiKeyRequest request, Set<RoleDescriptor> roleDescriptorSet,_                             ActionListener<CreateApiKeyResponse> listener) {_        ensureEnabled()__        if (authentication == null) {_            listener.onFailure(new IllegalArgumentException("authentication must be provided"))__        } else {_            _            findApiKeyForApiKeyName(request.getName(), true, true, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    final Instant created = clock.instant()__                    final Instant expiration = getApiKeyExpiration(created, request)__                    final SecureString apiKey = UUIDs.randomBase64UUIDSecureString()__                    final Version version = clusterService.state().nodes().getMinNodeVersion()__                    if (version.before(Version.V_6_7_0)) {_                        logger.warn(_                                "nodes prior to the minimum supported version for api keys {} exist in the cluster_"_                                        + " these nodes will not be able to use api keys",_                                Version.V_6_7_0)__                    }__                    final char[] keyHash = hasher.hash(apiKey)__                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                        builder.startObject()_                            .field("doc_type", "api_key")_                            .field("creation_time", created.toEpochMilli())_                            .field("expiration_time", expiration == null ? null : expiration.toEpochMilli())_                            .field("api_key_invalidated", false)___                        byte[] utf8Bytes = null__                        try {_                            utf8Bytes = CharArrays.toUtf8Bytes(keyHash)__                            builder.field("api_key_hash").utf8Value(utf8Bytes, 0, utf8Bytes.length)__                        } finally {_                            if (utf8Bytes != null) {_                                Arrays.fill(utf8Bytes, (byte) 0)__                            }_                        }__                        _                        builder.startObject("role_descriptors")__                        if (request.getRoleDescriptors() != null && request.getRoleDescriptors().isEmpty() == false) {_                            for (RoleDescriptor descriptor : request.getRoleDescriptors()) {_                                builder.field(descriptor.getName(),_                                        (contentBuilder, params) -> descriptor.toXContent(contentBuilder, params, true))__                            }_                        }_                        builder.endObject()___                        _                        builder.startObject("limited_by_role_descriptors")__                        for (RoleDescriptor descriptor : roleDescriptorSet) {_                            builder.field(descriptor.getName(),_                                    (contentBuilder, params) -> descriptor.toXContent(contentBuilder, params, true))__                        }_                        builder.endObject()___                        builder.field("name", request.getName())_                            .field("version", version.id)_                            .startObject("creator")_                            .field("principal", authentication.getUser().principal())_                            .field("metadata", authentication.getUser().metadata())_                            .field("realm", authentication.getLookedUpBy() == null ?_                                authentication.getAuthenticatedBy().getName() : authentication.getLookedUpBy().getName())_                            .endObject()_                            .endObject()__                        final IndexRequest indexRequest =_                            client.prepareIndex(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE)_                                .setSource(builder)_                                .setRefreshPolicy(request.getRefreshPolicy())_                                .request()__                        securityIndex.prepareIndexIfNeededThenExecute(listener::onFailure, () ->_                        executeAsyncWithOrigin(client, SECURITY_ORIGIN, IndexAction.INSTANCE, indexRequest,_                                ActionListener.wrap(_                                        indexResponse -> listener.onResponse(_                                                new CreateApiKeyResponse(request.getName(), indexResponse.getId(), apiKey, expiration)),_                                        listener::onFailure)))__                    } catch (IOException e) {_                        listener.onFailure(e)__                    } finally {_                        Arrays.fill(keyHash, (char) 0)__                    }_                } else {_                    listener.onFailure(traceLog("create api key", new ElasticsearchSecurityException(_                            "Error creating api key as api key with name [{}] already exists", request.getName())))__                }_            }, listener::onFailure))__        }_    };asynchronously,creates,a,new,api,key,based,off,of,the,request,and,authentication,param,authentication,the,authentication,that,this,api,key,should,be,based,off,of,param,request,the,request,to,create,the,api,key,included,any,permission,restrictions,param,role,descriptor,set,the,user,s,actual,roles,that,we,always,enforce,param,listener,the,listener,that,will,be,used,to,notify,of,completion;public,void,create,api,key,authentication,authentication,create,api,key,request,request,set,role,descriptor,role,descriptor,set,action,listener,create,api,key,response,listener,ensure,enabled,if,authentication,null,listener,on,failure,new,illegal,argument,exception,authentication,must,be,provided,else,find,api,key,for,api,key,name,request,get,name,true,true,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,final,instant,created,clock,instant,final,instant,expiration,get,api,key,expiration,created,request,final,secure,string,api,key,uuids,random,base64uuidsecure,string,final,version,version,cluster,service,state,nodes,get,min,node,version,if,version,before,version,logger,warn,nodes,prior,to,the,minimum,supported,version,for,api,keys,exist,in,the,cluster,these,nodes,will,not,be,able,to,use,api,keys,version,final,char,key,hash,hasher,hash,api,key,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,field,field,created,to,epoch,milli,field,expiration,null,null,expiration,to,epoch,milli,field,false,byte,utf8bytes,null,try,utf8bytes,char,arrays,to,utf8bytes,key,hash,builder,field,utf8value,utf8bytes,0,utf8bytes,length,finally,if,utf8bytes,null,arrays,fill,utf8bytes,byte,0,builder,start,object,if,request,get,role,descriptors,null,request,get,role,descriptors,is,empty,false,for,role,descriptor,descriptor,request,get,role,descriptors,builder,field,descriptor,get,name,content,builder,params,descriptor,to,xcontent,content,builder,params,true,builder,end,object,builder,start,object,for,role,descriptor,descriptor,role,descriptor,set,builder,field,descriptor,get,name,content,builder,params,descriptor,to,xcontent,content,builder,params,true,builder,end,object,builder,field,name,request,get,name,field,version,version,id,start,object,creator,field,principal,authentication,get,user,principal,field,metadata,authentication,get,user,metadata,field,realm,authentication,get,looked,up,by,null,authentication,get,authenticated,by,get,name,authentication,get,looked,up,by,get,name,end,object,end,object,final,index,request,index,request,client,prepare,index,security,index,manager,type,set,source,builder,set,refresh,policy,request,get,refresh,policy,request,security,index,prepare,index,if,needed,then,execute,listener,on,failure,execute,async,with,origin,client,index,action,instance,index,request,action,listener,wrap,index,response,listener,on,response,new,create,api,key,response,request,get,name,index,response,get,id,api,key,expiration,listener,on,failure,catch,ioexception,e,listener,on,failure,e,finally,arrays,fill,key,hash,char,0,else,listener,on,failure,trace,log,create,api,key,new,elasticsearch,security,exception,error,creating,api,key,as,api,key,with,name,already,exists,request,get,name,listener,on,failure
ApiKeyService -> public void createApiKey(Authentication authentication, CreateApiKeyRequest request, Set<RoleDescriptor> roleDescriptorSet,                              ActionListener<CreateApiKeyResponse> listener);1550209662;Asynchronously creates a new API key based off of the request and authentication_@param authentication the authentication that this api key should be based off of_@param request the request to create the api key included any permission restrictions_@param roleDescriptorSet the user's actual roles that we always enforce_@param listener the listener that will be used to notify of completion;public void createApiKey(Authentication authentication, CreateApiKeyRequest request, Set<RoleDescriptor> roleDescriptorSet,_                             ActionListener<CreateApiKeyResponse> listener) {_        ensureEnabled()__        if (authentication == null) {_            listener.onFailure(new IllegalArgumentException("authentication must be provided"))__        } else {_            _            findApiKeyForApiKeyName(request.getName(), true, true, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    final Instant created = clock.instant()__                    final Instant expiration = getApiKeyExpiration(created, request)__                    final SecureString apiKey = UUIDs.randomBase64UUIDSecureString()__                    final Version version = clusterService.state().nodes().getMinNodeVersion()__                    if (version.before(Version.V_6_7_0)) {_                        logger.warn(_                                "nodes prior to the minimum supported version for api keys {} exist in the cluster_"_                                        + " these nodes will not be able to use api keys",_                                Version.V_6_7_0)__                    }__                    final char[] keyHash = hasher.hash(apiKey)__                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_                        builder.startObject()_                            .field("doc_type", "api_key")_                            .field("creation_time", created.toEpochMilli())_                            .field("expiration_time", expiration == null ? null : expiration.toEpochMilli())_                            .field("api_key_invalidated", false)___                        byte[] utf8Bytes = null__                        try {_                            utf8Bytes = CharArrays.toUtf8Bytes(keyHash)__                            builder.field("api_key_hash").utf8Value(utf8Bytes, 0, utf8Bytes.length)__                        } finally {_                            if (utf8Bytes != null) {_                                Arrays.fill(utf8Bytes, (byte) 0)__                            }_                        }__                        _                        builder.startObject("role_descriptors")__                        if (request.getRoleDescriptors() != null && request.getRoleDescriptors().isEmpty() == false) {_                            for (RoleDescriptor descriptor : request.getRoleDescriptors()) {_                                builder.field(descriptor.getName(),_                                        (contentBuilder, params) -> descriptor.toXContent(contentBuilder, params, true))__                            }_                        }_                        builder.endObject()___                        _                        builder.startObject("limited_by_role_descriptors")__                        for (RoleDescriptor descriptor : roleDescriptorSet) {_                            builder.field(descriptor.getName(),_                                    (contentBuilder, params) -> descriptor.toXContent(contentBuilder, params, true))__                        }_                        builder.endObject()___                        builder.field("name", request.getName())_                            .field("version", version.id)_                            .startObject("creator")_                            .field("principal", authentication.getUser().principal())_                            .field("metadata", authentication.getUser().metadata())_                            .field("realm", authentication.getLookedUpBy() == null ?_                                authentication.getAuthenticatedBy().getName() : authentication.getLookedUpBy().getName())_                            .endObject()_                            .endObject()__                        final IndexRequest indexRequest =_                            client.prepareIndex(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE)_                                .setSource(builder)_                                .setRefreshPolicy(request.getRefreshPolicy())_                                .request()__                        securityIndex.prepareIndexIfNeededThenExecute(listener::onFailure, () ->_                        executeAsyncWithOrigin(client, SECURITY_ORIGIN, IndexAction.INSTANCE, indexRequest,_                                ActionListener.wrap(_                                        indexResponse -> listener.onResponse(_                                                new CreateApiKeyResponse(request.getName(), indexResponse.getId(), apiKey, expiration)),_                                        listener::onFailure)))__                    } catch (IOException e) {_                        listener.onFailure(e)__                    } finally {_                        Arrays.fill(keyHash, (char) 0)__                    }_                } else {_                    listener.onFailure(traceLog("create api key", new ElasticsearchSecurityException(_                            "Error creating api key as api key with name [{}] already exists", request.getName())))__                }_            }, listener::onFailure))__        }_    };asynchronously,creates,a,new,api,key,based,off,of,the,request,and,authentication,param,authentication,the,authentication,that,this,api,key,should,be,based,off,of,param,request,the,request,to,create,the,api,key,included,any,permission,restrictions,param,role,descriptor,set,the,user,s,actual,roles,that,we,always,enforce,param,listener,the,listener,that,will,be,used,to,notify,of,completion;public,void,create,api,key,authentication,authentication,create,api,key,request,request,set,role,descriptor,role,descriptor,set,action,listener,create,api,key,response,listener,ensure,enabled,if,authentication,null,listener,on,failure,new,illegal,argument,exception,authentication,must,be,provided,else,find,api,key,for,api,key,name,request,get,name,true,true,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,final,instant,created,clock,instant,final,instant,expiration,get,api,key,expiration,created,request,final,secure,string,api,key,uuids,random,base64uuidsecure,string,final,version,version,cluster,service,state,nodes,get,min,node,version,if,version,before,version,logger,warn,nodes,prior,to,the,minimum,supported,version,for,api,keys,exist,in,the,cluster,these,nodes,will,not,be,able,to,use,api,keys,version,final,char,key,hash,hasher,hash,api,key,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,field,field,created,to,epoch,milli,field,expiration,null,null,expiration,to,epoch,milli,field,false,byte,utf8bytes,null,try,utf8bytes,char,arrays,to,utf8bytes,key,hash,builder,field,utf8value,utf8bytes,0,utf8bytes,length,finally,if,utf8bytes,null,arrays,fill,utf8bytes,byte,0,builder,start,object,if,request,get,role,descriptors,null,request,get,role,descriptors,is,empty,false,for,role,descriptor,descriptor,request,get,role,descriptors,builder,field,descriptor,get,name,content,builder,params,descriptor,to,xcontent,content,builder,params,true,builder,end,object,builder,start,object,for,role,descriptor,descriptor,role,descriptor,set,builder,field,descriptor,get,name,content,builder,params,descriptor,to,xcontent,content,builder,params,true,builder,end,object,builder,field,name,request,get,name,field,version,version,id,start,object,creator,field,principal,authentication,get,user,principal,field,metadata,authentication,get,user,metadata,field,realm,authentication,get,looked,up,by,null,authentication,get,authenticated,by,get,name,authentication,get,looked,up,by,get,name,end,object,end,object,final,index,request,index,request,client,prepare,index,security,index,manager,type,set,source,builder,set,refresh,policy,request,get,refresh,policy,request,security,index,prepare,index,if,needed,then,execute,listener,on,failure,execute,async,with,origin,client,index,action,instance,index,request,action,listener,wrap,index,response,listener,on,response,new,create,api,key,response,request,get,name,index,response,get,id,api,key,expiration,listener,on,failure,catch,ioexception,e,listener,on,failure,e,finally,arrays,fill,key,hash,char,0,else,listener,on,failure,trace,log,create,api,key,new,elasticsearch,security,exception,error,creating,api,key,as,api,key,with,name,already,exists,request,get,name,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener);1549336917;Get API key for given API key id_@param apiKeyId API key id_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            listener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key id [{}]", apiKeyId)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,id,string,api,key,id,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,id,api,key,id,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener);1549399169;Get API key for given API key id_@param apiKeyId API key id_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            listener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key id [{}]", apiKeyId)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,id,string,api,key,id,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,id,api,key,id,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener);1549415786;Get API key for given API key id_@param apiKeyId API key id_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            listener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key id [{}]", apiKeyId)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,id,string,api,key,id,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,id,api,key,id,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener);1549429429;Get API key for given API key id_@param apiKeyId API key id_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            listener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key id [{}]", apiKeyId)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,id,string,api,key,id,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,id,api,key,id,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener);1549447102;Get API key for given API key id_@param apiKeyId API key id_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            listener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key id [{}]", apiKeyId)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,id,string,api,key,id,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,id,api,key,id,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener);1550209662;Get API key for given API key id_@param apiKeyId API key id_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyId(String apiKeyId, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            listener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key id [{}]", apiKeyId)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,id,string,api,key,id,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,id,api,key,id,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener);1549336917;Get API key for given API key name_@param apiKeyName API key name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            listener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key name [{}]", apiKeyName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,name,string,api,key,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,name,api,key,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener);1549399169;Get API key for given API key name_@param apiKeyName API key name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            listener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key name [{}]", apiKeyName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,name,string,api,key,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,name,api,key,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener);1549415786;Get API key for given API key name_@param apiKeyName API key name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            listener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key name [{}]", apiKeyName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,name,string,api,key,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,name,api,key,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener);1549429429;Get API key for given API key name_@param apiKeyName API key name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            listener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key name [{}]", apiKeyName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,name,string,api,key,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,name,api,key,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener);1549447102;Get API key for given API key name_@param apiKeyName API key name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            listener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key name [{}]", apiKeyName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,name,string,api,key,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,name,api,key,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener);1550209662;Get API key for given API key name_@param apiKeyName API key name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeyForApiKeyName(String apiKeyName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            listener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No api key found for api key name [{}]", apiKeyName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,key,for,api,key,name,string,api,key,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,api,key,found,for,api,key,name,api,key,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,                                    ActionListener<AuthenticationResult> listener);1549415786;Validates the ApiKey using the source map_@param source the source map from a get of the ApiKey document_@param credentials the credentials provided by the user_@param listener the listener to notify after verification;void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,_                                   ActionListener<AuthenticationResult> listener) {_        final Boolean invalidated = (Boolean) source.get("api_key_invalidated")__        if (invalidated == null) {_            listener.onResponse(AuthenticationResult.terminate("api key document is missing invalidated field", null))__        } else if (invalidated) {_            listener.onResponse(AuthenticationResult.terminate("api key has been invalidated", null))__        } else {_            final String apiKeyHash = (String) source.get("api_key_hash")__            if (apiKeyHash == null) {_                throw new IllegalStateException("api key hash is missing")__            }__            if (apiKeyAuthCache != null) {_                final AtomicBoolean valueAlreadyInCache = new AtomicBoolean(true)__                final ListenableFuture<CachedApiKeyHashResult> listenableCacheEntry__                try {_                    listenableCacheEntry = apiKeyAuthCache.computeIfAbsent(credentials.getId(),_                        k -> {_                            valueAlreadyInCache.set(false)__                            return new ListenableFuture<>()__                        })__                } catch (ExecutionException e) {_                    listener.onFailure(e)__                    return__                }__                if (valueAlreadyInCache.get()) {_                    listenableCacheEntry.addListener(ActionListener.wrap(result -> {_                            if (result.success) {_                                if (result.verify(credentials.getKey())) {_                                    _                                    validateApiKeyExpiration(source, credentials, clock, listener)__                                } else {_                                    listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                                }_                            } else if (result.verify(credentials.getKey())) { _                                listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                            } else {_                                apiKeyAuthCache.invalidate(credentials.getId(), listenableCacheEntry)__                                validateApiKeyCredentials(source, credentials, clock, listener)__                            }_                        }, listener::onFailure),_                        threadPool.generic(), threadPool.getThreadContext())__                } else {_                    final boolean verified = verifyKeyAgainstHash(apiKeyHash, credentials)__                    listenableCacheEntry.onResponse(new CachedApiKeyHashResult(verified, credentials.getKey()))__                    if (verified) {_                        _                        validateApiKeyExpiration(source, credentials, clock, listener)__                    } else {_                        listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                    }_                }_            } else {_                final boolean verified = verifyKeyAgainstHash(apiKeyHash, credentials)__                if (verified) {_                    _                    validateApiKeyExpiration(source, credentials, clock, listener)__                } else {_                    listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                }_            }_        }_    };validates,the,api,key,using,the,source,map,param,source,the,source,map,from,a,get,of,the,api,key,document,param,credentials,the,credentials,provided,by,the,user,param,listener,the,listener,to,notify,after,verification;void,validate,api,key,credentials,map,string,object,source,api,key,credentials,credentials,clock,clock,action,listener,authentication,result,listener,final,boolean,invalidated,boolean,source,get,if,invalidated,null,listener,on,response,authentication,result,terminate,api,key,document,is,missing,invalidated,field,null,else,if,invalidated,listener,on,response,authentication,result,terminate,api,key,has,been,invalidated,null,else,final,string,api,key,hash,string,source,get,if,api,key,hash,null,throw,new,illegal,state,exception,api,key,hash,is,missing,if,api,key,auth,cache,null,final,atomic,boolean,value,already,in,cache,new,atomic,boolean,true,final,listenable,future,cached,api,key,hash,result,listenable,cache,entry,try,listenable,cache,entry,api,key,auth,cache,compute,if,absent,credentials,get,id,k,value,already,in,cache,set,false,return,new,listenable,future,catch,execution,exception,e,listener,on,failure,e,return,if,value,already,in,cache,get,listenable,cache,entry,add,listener,action,listener,wrap,result,if,result,success,if,result,verify,credentials,get,key,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,if,result,verify,credentials,get,key,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,api,key,auth,cache,invalidate,credentials,get,id,listenable,cache,entry,validate,api,key,credentials,source,credentials,clock,listener,listener,on,failure,thread,pool,generic,thread,pool,get,thread,context,else,final,boolean,verified,verify,key,against,hash,api,key,hash,credentials,listenable,cache,entry,on,response,new,cached,api,key,hash,result,verified,credentials,get,key,if,verified,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,final,boolean,verified,verify,key,against,hash,api,key,hash,credentials,if,verified,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null
ApiKeyService -> void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,                                    ActionListener<AuthenticationResult> listener);1549429429;Validates the ApiKey using the source map_@param source the source map from a get of the ApiKey document_@param credentials the credentials provided by the user_@param listener the listener to notify after verification;void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,_                                   ActionListener<AuthenticationResult> listener) {_        final Boolean invalidated = (Boolean) source.get("api_key_invalidated")__        if (invalidated == null) {_            listener.onResponse(AuthenticationResult.terminate("api key document is missing invalidated field", null))__        } else if (invalidated) {_            listener.onResponse(AuthenticationResult.terminate("api key has been invalidated", null))__        } else {_            final String apiKeyHash = (String) source.get("api_key_hash")__            if (apiKeyHash == null) {_                throw new IllegalStateException("api key hash is missing")__            }__            if (apiKeyAuthCache != null) {_                final AtomicBoolean valueAlreadyInCache = new AtomicBoolean(true)__                final ListenableFuture<CachedApiKeyHashResult> listenableCacheEntry__                try {_                    listenableCacheEntry = apiKeyAuthCache.computeIfAbsent(credentials.getId(),_                        k -> {_                            valueAlreadyInCache.set(false)__                            return new ListenableFuture<>()__                        })__                } catch (ExecutionException e) {_                    listener.onFailure(e)__                    return__                }__                if (valueAlreadyInCache.get()) {_                    listenableCacheEntry.addListener(ActionListener.wrap(result -> {_                            if (result.success) {_                                if (result.verify(credentials.getKey())) {_                                    _                                    validateApiKeyExpiration(source, credentials, clock, listener)__                                } else {_                                    listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                                }_                            } else if (result.verify(credentials.getKey())) { _                                listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                            } else {_                                apiKeyAuthCache.invalidate(credentials.getId(), listenableCacheEntry)__                                validateApiKeyCredentials(source, credentials, clock, listener)__                            }_                        }, listener::onFailure),_                        threadPool.generic(), threadPool.getThreadContext())__                } else {_                    final boolean verified = verifyKeyAgainstHash(apiKeyHash, credentials)__                    listenableCacheEntry.onResponse(new CachedApiKeyHashResult(verified, credentials.getKey()))__                    if (verified) {_                        _                        validateApiKeyExpiration(source, credentials, clock, listener)__                    } else {_                        listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                    }_                }_            } else {_                final boolean verified = verifyKeyAgainstHash(apiKeyHash, credentials)__                if (verified) {_                    _                    validateApiKeyExpiration(source, credentials, clock, listener)__                } else {_                    listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                }_            }_        }_    };validates,the,api,key,using,the,source,map,param,source,the,source,map,from,a,get,of,the,api,key,document,param,credentials,the,credentials,provided,by,the,user,param,listener,the,listener,to,notify,after,verification;void,validate,api,key,credentials,map,string,object,source,api,key,credentials,credentials,clock,clock,action,listener,authentication,result,listener,final,boolean,invalidated,boolean,source,get,if,invalidated,null,listener,on,response,authentication,result,terminate,api,key,document,is,missing,invalidated,field,null,else,if,invalidated,listener,on,response,authentication,result,terminate,api,key,has,been,invalidated,null,else,final,string,api,key,hash,string,source,get,if,api,key,hash,null,throw,new,illegal,state,exception,api,key,hash,is,missing,if,api,key,auth,cache,null,final,atomic,boolean,value,already,in,cache,new,atomic,boolean,true,final,listenable,future,cached,api,key,hash,result,listenable,cache,entry,try,listenable,cache,entry,api,key,auth,cache,compute,if,absent,credentials,get,id,k,value,already,in,cache,set,false,return,new,listenable,future,catch,execution,exception,e,listener,on,failure,e,return,if,value,already,in,cache,get,listenable,cache,entry,add,listener,action,listener,wrap,result,if,result,success,if,result,verify,credentials,get,key,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,if,result,verify,credentials,get,key,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,api,key,auth,cache,invalidate,credentials,get,id,listenable,cache,entry,validate,api,key,credentials,source,credentials,clock,listener,listener,on,failure,thread,pool,generic,thread,pool,get,thread,context,else,final,boolean,verified,verify,key,against,hash,api,key,hash,credentials,listenable,cache,entry,on,response,new,cached,api,key,hash,result,verified,credentials,get,key,if,verified,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,final,boolean,verified,verify,key,against,hash,api,key,hash,credentials,if,verified,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null
ApiKeyService -> void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,                                    ActionListener<AuthenticationResult> listener);1549447102;Validates the ApiKey using the source map_@param source the source map from a get of the ApiKey document_@param credentials the credentials provided by the user_@param listener the listener to notify after verification;void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,_                                   ActionListener<AuthenticationResult> listener) {_        final Boolean invalidated = (Boolean) source.get("api_key_invalidated")__        if (invalidated == null) {_            listener.onResponse(AuthenticationResult.terminate("api key document is missing invalidated field", null))__        } else if (invalidated) {_            listener.onResponse(AuthenticationResult.terminate("api key has been invalidated", null))__        } else {_            final String apiKeyHash = (String) source.get("api_key_hash")__            if (apiKeyHash == null) {_                throw new IllegalStateException("api key hash is missing")__            }__            if (apiKeyAuthCache != null) {_                final AtomicBoolean valueAlreadyInCache = new AtomicBoolean(true)__                final ListenableFuture<CachedApiKeyHashResult> listenableCacheEntry__                try {_                    listenableCacheEntry = apiKeyAuthCache.computeIfAbsent(credentials.getId(),_                        k -> {_                            valueAlreadyInCache.set(false)__                            return new ListenableFuture<>()__                        })__                } catch (ExecutionException e) {_                    listener.onFailure(e)__                    return__                }__                if (valueAlreadyInCache.get()) {_                    listenableCacheEntry.addListener(ActionListener.wrap(result -> {_                            if (result.success) {_                                if (result.verify(credentials.getKey())) {_                                    _                                    validateApiKeyExpiration(source, credentials, clock, listener)__                                } else {_                                    listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                                }_                            } else if (result.verify(credentials.getKey())) { _                                listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                            } else {_                                apiKeyAuthCache.invalidate(credentials.getId(), listenableCacheEntry)__                                validateApiKeyCredentials(source, credentials, clock, listener)__                            }_                        }, listener::onFailure),_                        threadPool.generic(), threadPool.getThreadContext())__                } else {_                    final boolean verified = verifyKeyAgainstHash(apiKeyHash, credentials)__                    listenableCacheEntry.onResponse(new CachedApiKeyHashResult(verified, credentials.getKey()))__                    if (verified) {_                        _                        validateApiKeyExpiration(source, credentials, clock, listener)__                    } else {_                        listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                    }_                }_            } else {_                final boolean verified = verifyKeyAgainstHash(apiKeyHash, credentials)__                if (verified) {_                    _                    validateApiKeyExpiration(source, credentials, clock, listener)__                } else {_                    listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                }_            }_        }_    };validates,the,api,key,using,the,source,map,param,source,the,source,map,from,a,get,of,the,api,key,document,param,credentials,the,credentials,provided,by,the,user,param,listener,the,listener,to,notify,after,verification;void,validate,api,key,credentials,map,string,object,source,api,key,credentials,credentials,clock,clock,action,listener,authentication,result,listener,final,boolean,invalidated,boolean,source,get,if,invalidated,null,listener,on,response,authentication,result,terminate,api,key,document,is,missing,invalidated,field,null,else,if,invalidated,listener,on,response,authentication,result,terminate,api,key,has,been,invalidated,null,else,final,string,api,key,hash,string,source,get,if,api,key,hash,null,throw,new,illegal,state,exception,api,key,hash,is,missing,if,api,key,auth,cache,null,final,atomic,boolean,value,already,in,cache,new,atomic,boolean,true,final,listenable,future,cached,api,key,hash,result,listenable,cache,entry,try,listenable,cache,entry,api,key,auth,cache,compute,if,absent,credentials,get,id,k,value,already,in,cache,set,false,return,new,listenable,future,catch,execution,exception,e,listener,on,failure,e,return,if,value,already,in,cache,get,listenable,cache,entry,add,listener,action,listener,wrap,result,if,result,success,if,result,verify,credentials,get,key,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,if,result,verify,credentials,get,key,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,api,key,auth,cache,invalidate,credentials,get,id,listenable,cache,entry,validate,api,key,credentials,source,credentials,clock,listener,listener,on,failure,thread,pool,generic,thread,pool,get,thread,context,else,final,boolean,verified,verify,key,against,hash,api,key,hash,credentials,listenable,cache,entry,on,response,new,cached,api,key,hash,result,verified,credentials,get,key,if,verified,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,final,boolean,verified,verify,key,against,hash,api,key,hash,credentials,if,verified,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null
ApiKeyService -> void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,                                    ActionListener<AuthenticationResult> listener);1550209662;Validates the ApiKey using the source map_@param source the source map from a get of the ApiKey document_@param credentials the credentials provided by the user_@param listener the listener to notify after verification;void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,_                                   ActionListener<AuthenticationResult> listener) {_        final Boolean invalidated = (Boolean) source.get("api_key_invalidated")__        if (invalidated == null) {_            listener.onResponse(AuthenticationResult.terminate("api key document is missing invalidated field", null))__        } else if (invalidated) {_            listener.onResponse(AuthenticationResult.terminate("api key has been invalidated", null))__        } else {_            final String apiKeyHash = (String) source.get("api_key_hash")__            if (apiKeyHash == null) {_                throw new IllegalStateException("api key hash is missing")__            }__            if (apiKeyAuthCache != null) {_                final AtomicBoolean valueAlreadyInCache = new AtomicBoolean(true)__                final ListenableFuture<CachedApiKeyHashResult> listenableCacheEntry__                try {_                    listenableCacheEntry = apiKeyAuthCache.computeIfAbsent(credentials.getId(),_                        k -> {_                            valueAlreadyInCache.set(false)__                            return new ListenableFuture<>()__                        })__                } catch (ExecutionException e) {_                    listener.onFailure(e)__                    return__                }__                if (valueAlreadyInCache.get()) {_                    listenableCacheEntry.addListener(ActionListener.wrap(result -> {_                            if (result.success) {_                                if (result.verify(credentials.getKey())) {_                                    _                                    validateApiKeyExpiration(source, credentials, clock, listener)__                                } else {_                                    listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                                }_                            } else if (result.verify(credentials.getKey())) { _                                listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                            } else {_                                apiKeyAuthCache.invalidate(credentials.getId(), listenableCacheEntry)__                                validateApiKeyCredentials(source, credentials, clock, listener)__                            }_                        }, listener::onFailure),_                        threadPool.generic(), threadPool.getThreadContext())__                } else {_                    final boolean verified = verifyKeyAgainstHash(apiKeyHash, credentials)__                    listenableCacheEntry.onResponse(new CachedApiKeyHashResult(verified, credentials.getKey()))__                    if (verified) {_                        _                        validateApiKeyExpiration(source, credentials, clock, listener)__                    } else {_                        listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                    }_                }_            } else {_                final boolean verified = verifyKeyAgainstHash(apiKeyHash, credentials)__                if (verified) {_                    _                    validateApiKeyExpiration(source, credentials, clock, listener)__                } else {_                    listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__                }_            }_        }_    };validates,the,api,key,using,the,source,map,param,source,the,source,map,from,a,get,of,the,api,key,document,param,credentials,the,credentials,provided,by,the,user,param,listener,the,listener,to,notify,after,verification;void,validate,api,key,credentials,map,string,object,source,api,key,credentials,credentials,clock,clock,action,listener,authentication,result,listener,final,boolean,invalidated,boolean,source,get,if,invalidated,null,listener,on,response,authentication,result,terminate,api,key,document,is,missing,invalidated,field,null,else,if,invalidated,listener,on,response,authentication,result,terminate,api,key,has,been,invalidated,null,else,final,string,api,key,hash,string,source,get,if,api,key,hash,null,throw,new,illegal,state,exception,api,key,hash,is,missing,if,api,key,auth,cache,null,final,atomic,boolean,value,already,in,cache,new,atomic,boolean,true,final,listenable,future,cached,api,key,hash,result,listenable,cache,entry,try,listenable,cache,entry,api,key,auth,cache,compute,if,absent,credentials,get,id,k,value,already,in,cache,set,false,return,new,listenable,future,catch,execution,exception,e,listener,on,failure,e,return,if,value,already,in,cache,get,listenable,cache,entry,add,listener,action,listener,wrap,result,if,result,success,if,result,verify,credentials,get,key,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,if,result,verify,credentials,get,key,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,api,key,auth,cache,invalidate,credentials,get,id,listenable,cache,entry,validate,api,key,credentials,source,credentials,clock,listener,listener,on,failure,thread,pool,generic,thread,pool,get,thread,context,else,final,boolean,verified,verify,key,against,hash,api,key,hash,credentials,listenable,cache,entry,on,response,new,cached,api,key,hash,result,verified,credentials,get,key,if,verified,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null,else,final,boolean,verified,verify,key,against,hash,api,key,hash,credentials,if,verified,validate,api,key,expiration,source,credentials,clock,listener,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null
ApiKeyService -> public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener);1549336917;Invalidate API key for given API key id_@param apiKeyId API key id_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key id [{}]", apiKeyId)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,id,string,api,key,id,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,id,api,key,id,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener);1549399169;Invalidate API key for given API key id_@param apiKeyId API key id_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key id [{}]", apiKeyId)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,id,string,api,key,id,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,id,api,key,id,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener);1549415786;Invalidate API key for given API key id_@param apiKeyId API key id_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key id [{}]", apiKeyId)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,id,string,api,key,id,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,id,api,key,id,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener);1549429429;Invalidate API key for given API key id_@param apiKeyId API key id_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key id [{}]", apiKeyId)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,id,string,api,key,id,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,id,api,key,id,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener);1549447102;Invalidate API key for given API key id_@param apiKeyId API key id_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key id [{}]", apiKeyId)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,id,string,api,key,id,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,id,api,key,id,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener);1550209662;Invalidate API key for given API key id_@param apiKeyId API key id_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyId(String apiKeyId, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyId) == false) {_            logger.trace("No api key id provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key id must be provided"))__        } else {_            findApiKeysForApiKeyId(apiKeyId, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key id [{}]", apiKeyId)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,id,param,api,key,id,api,key,id,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,id,string,api,key,id,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,id,false,logger,trace,no,api,key,id,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,id,must,be,provided,else,find,api,keys,for,api,key,id,api,key,id,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,id,api,key,id,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> private <E extends Throwable> E traceLog(String action, String identifier, E exception);1549336917;Logs an exception concerning a specific api key at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, String identifier, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}] - [{}]", action, identifier, detail),_                        esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier),_                        esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier), exception)__            }_        }_        return exception__    };logs,an,exception,concerning,a,specific,api,key,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,string,identifier,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,exception,return,exception
ApiKeyService -> private <E extends Throwable> E traceLog(String action, String identifier, E exception);1549399169;Logs an exception concerning a specific api key at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, String identifier, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}] - [{}]", action, identifier, detail),_                        esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier),_                        esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier), exception)__            }_        }_        return exception__    };logs,an,exception,concerning,a,specific,api,key,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,string,identifier,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,exception,return,exception
ApiKeyService -> private <E extends Throwable> E traceLog(String action, String identifier, E exception);1549415786;Logs an exception concerning a specific api key at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, String identifier, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}] - [{}]", action, identifier, detail),_                        esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier),_                        esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier), exception)__            }_        }_        return exception__    };logs,an,exception,concerning,a,specific,api,key,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,string,identifier,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,exception,return,exception
ApiKeyService -> private <E extends Throwable> E traceLog(String action, String identifier, E exception);1549429429;Logs an exception concerning a specific api key at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, String identifier, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}] - [{}]", action, identifier, detail),_                        esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier),_                        esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier), exception)__            }_        }_        return exception__    };logs,an,exception,concerning,a,specific,api,key,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,string,identifier,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,exception,return,exception
ApiKeyService -> private <E extends Throwable> E traceLog(String action, String identifier, E exception);1549447102;Logs an exception concerning a specific api key at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, String identifier, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}] - [{}]", action, identifier, detail),_                        esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier),_                        esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier), exception)__            }_        }_        return exception__    };logs,an,exception,concerning,a,specific,api,key,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,string,identifier,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,exception,return,exception
ApiKeyService -> private <E extends Throwable> E traceLog(String action, String identifier, E exception);1550209662;Logs an exception concerning a specific api key at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, String identifier, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}] - [{}]", action, identifier, detail),_                        esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier),_                        esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}] for id [{}]", action, identifier), exception)__            }_        }_        return exception__    };logs,an,exception,concerning,a,specific,api,key,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,string,identifier,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,es,ex,else,logger,trace,new,parameterized,message,failure,in,for,id,action,identifier,exception,return,exception
ApiKeyService -> private <E extends Throwable> E traceLog(String action, E exception);1549336917;Logs an exception at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] - [{}]", action, detail), esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), exception)__            }_        }_        return exception__    };logs,an,exception,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,action,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,exception,return,exception
ApiKeyService -> private <E extends Throwable> E traceLog(String action, E exception);1549399169;Logs an exception at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] - [{}]", action, detail), esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), exception)__            }_        }_        return exception__    };logs,an,exception,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,action,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,exception,return,exception
ApiKeyService -> private <E extends Throwable> E traceLog(String action, E exception);1549415786;Logs an exception at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] - [{}]", action, detail), esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), exception)__            }_        }_        return exception__    };logs,an,exception,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,action,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,exception,return,exception
ApiKeyService -> private <E extends Throwable> E traceLog(String action, E exception);1549429429;Logs an exception at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] - [{}]", action, detail), esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), exception)__            }_        }_        return exception__    };logs,an,exception,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,action,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,exception,return,exception
ApiKeyService -> private <E extends Throwable> E traceLog(String action, E exception);1549447102;Logs an exception at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] - [{}]", action, detail), esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), exception)__            }_        }_        return exception__    };logs,an,exception,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,action,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,exception,return,exception
ApiKeyService -> private <E extends Throwable> E traceLog(String action, E exception);1550209662;Logs an exception at TRACE level (if enabled);private <E extends Throwable> E traceLog(String action, E exception) {_        if (logger.isTraceEnabled()) {_            if (exception instanceof ElasticsearchException) {_                final ElasticsearchException esEx = (ElasticsearchException) exception__                final Object detail = esEx.getHeader("error_description")__                if (detail != null) {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}] - [{}]", action, detail), esEx)__                } else {_                    logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), esEx)__                }_            } else {_                logger.trace(() -> new ParameterizedMessage("Failure in [{}]", action), exception)__            }_        }_        return exception__    };logs,an,exception,at,trace,level,if,enabled;private,e,extends,throwable,e,trace,log,string,action,e,exception,if,logger,is,trace,enabled,if,exception,instanceof,elasticsearch,exception,final,elasticsearch,exception,es,ex,elasticsearch,exception,exception,final,object,detail,es,ex,get,header,if,detail,null,logger,trace,new,parameterized,message,failure,in,action,detail,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,es,ex,else,logger,trace,new,parameterized,message,failure,in,action,exception,return,exception
ApiKeyService -> void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener);1549336917;Checks for the presence of a {@code Authorization} header with a value that starts with_{@code ApiKey }. If found this will attempt to authenticate the key.;void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener) {_        if (enabled) {_            final ApiKeyCredentials credentials__            try {_                credentials = getCredentialsFromHeader(ctx)__            } catch (IllegalArgumentException iae) {_                listener.onResponse(AuthenticationResult.unsuccessful(iae.getMessage(), iae))__                return__            }__            if (credentials != null) {_                final GetRequest getRequest = client.prepareGet(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, credentials.getId())_                    .setFetchSource(true).request()__                executeAsyncWithOrigin(ctx, SECURITY_ORIGIN, getRequest, ActionListener.<GetResponse>wrap(response -> {_                    if (response.isExists()) {_                        try (ApiKeyCredentials ignore = credentials) {_                            final Map<String, Object> source = response.getSource()__                            validateApiKeyCredentials(source, credentials, clock, listener)__                        }_                    } else {_                        credentials.close()__                        listener.onResponse(_                            AuthenticationResult.unsuccessful("unable to find apikey with id " + credentials.getId(), null))__                    }_                }, e -> {_                    credentials.close()__                    listener.onResponse(AuthenticationResult.unsuccessful("apikey authentication for id " + credentials.getId() +_                        " encountered a failure", e))__                }), client::get)__            } else {_                listener.onResponse(AuthenticationResult.notHandled())__            }_        } else {_            listener.onResponse(AuthenticationResult.notHandled())__        }_    };checks,for,the,presence,of,a,code,authorization,header,with,a,value,that,starts,with,code,api,key,if,found,this,will,attempt,to,authenticate,the,key;void,authenticate,with,api,key,if,present,thread,context,ctx,action,listener,authentication,result,listener,if,enabled,final,api,key,credentials,credentials,try,credentials,get,credentials,from,header,ctx,catch,illegal,argument,exception,iae,listener,on,response,authentication,result,unsuccessful,iae,get,message,iae,return,if,credentials,null,final,get,request,get,request,client,prepare,get,security,index,manager,type,credentials,get,id,set,fetch,source,true,request,execute,async,with,origin,ctx,get,request,action,listener,get,response,wrap,response,if,response,is,exists,try,api,key,credentials,ignore,credentials,final,map,string,object,source,response,get,source,validate,api,key,credentials,source,credentials,clock,listener,else,credentials,close,listener,on,response,authentication,result,unsuccessful,unable,to,find,apikey,with,id,credentials,get,id,null,e,credentials,close,listener,on,response,authentication,result,unsuccessful,apikey,authentication,for,id,credentials,get,id,encountered,a,failure,e,client,get,else,listener,on,response,authentication,result,not,handled,else,listener,on,response,authentication,result,not,handled
ApiKeyService -> void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener);1549399169;Checks for the presence of a {@code Authorization} header with a value that starts with_{@code ApiKey }. If found this will attempt to authenticate the key.;void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener) {_        if (enabled) {_            final ApiKeyCredentials credentials__            try {_                credentials = getCredentialsFromHeader(ctx)__            } catch (IllegalArgumentException iae) {_                listener.onResponse(AuthenticationResult.unsuccessful(iae.getMessage(), iae))__                return__            }__            if (credentials != null) {_                final GetRequest getRequest = client.prepareGet(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, credentials.getId())_                    .setFetchSource(true).request()__                executeAsyncWithOrigin(ctx, SECURITY_ORIGIN, getRequest, ActionListener.<GetResponse>wrap(response -> {_                    if (response.isExists()) {_                        try (ApiKeyCredentials ignore = credentials) {_                            final Map<String, Object> source = response.getSource()__                            validateApiKeyCredentials(source, credentials, clock, listener)__                        }_                    } else {_                        credentials.close()__                        listener.onResponse(_                            AuthenticationResult.unsuccessful("unable to find apikey with id " + credentials.getId(), null))__                    }_                }, e -> {_                    credentials.close()__                    listener.onResponse(AuthenticationResult.unsuccessful("apikey authentication for id " + credentials.getId() +_                        " encountered a failure", e))__                }), client::get)__            } else {_                listener.onResponse(AuthenticationResult.notHandled())__            }_        } else {_            listener.onResponse(AuthenticationResult.notHandled())__        }_    };checks,for,the,presence,of,a,code,authorization,header,with,a,value,that,starts,with,code,api,key,if,found,this,will,attempt,to,authenticate,the,key;void,authenticate,with,api,key,if,present,thread,context,ctx,action,listener,authentication,result,listener,if,enabled,final,api,key,credentials,credentials,try,credentials,get,credentials,from,header,ctx,catch,illegal,argument,exception,iae,listener,on,response,authentication,result,unsuccessful,iae,get,message,iae,return,if,credentials,null,final,get,request,get,request,client,prepare,get,security,index,manager,type,credentials,get,id,set,fetch,source,true,request,execute,async,with,origin,ctx,get,request,action,listener,get,response,wrap,response,if,response,is,exists,try,api,key,credentials,ignore,credentials,final,map,string,object,source,response,get,source,validate,api,key,credentials,source,credentials,clock,listener,else,credentials,close,listener,on,response,authentication,result,unsuccessful,unable,to,find,apikey,with,id,credentials,get,id,null,e,credentials,close,listener,on,response,authentication,result,unsuccessful,apikey,authentication,for,id,credentials,get,id,encountered,a,failure,e,client,get,else,listener,on,response,authentication,result,not,handled,else,listener,on,response,authentication,result,not,handled
ApiKeyService -> void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener);1549415786;Checks for the presence of a {@code Authorization} header with a value that starts with_{@code ApiKey }. If found this will attempt to authenticate the key.;void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener) {_        if (enabled) {_            final ApiKeyCredentials credentials__            try {_                credentials = getCredentialsFromHeader(ctx)__            } catch (IllegalArgumentException iae) {_                listener.onResponse(AuthenticationResult.unsuccessful(iae.getMessage(), iae))__                return__            }__            if (credentials != null) {_                final GetRequest getRequest = client.prepareGet(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, credentials.getId())_                    .setFetchSource(true).request()__                executeAsyncWithOrigin(ctx, SECURITY_ORIGIN, getRequest, ActionListener.<GetResponse>wrap(response -> {_                    if (response.isExists()) {_                        try (ApiKeyCredentials ignore = credentials) {_                            final Map<String, Object> source = response.getSource()__                            validateApiKeyCredentials(source, credentials, clock, listener)__                        }_                    } else {_                        credentials.close()__                        listener.onResponse(_                            AuthenticationResult.unsuccessful("unable to find apikey with id " + credentials.getId(), null))__                    }_                }, e -> {_                    credentials.close()__                    listener.onResponse(AuthenticationResult.unsuccessful("apikey authentication for id " + credentials.getId() +_                        " encountered a failure", e))__                }), client::get)__            } else {_                listener.onResponse(AuthenticationResult.notHandled())__            }_        } else {_            listener.onResponse(AuthenticationResult.notHandled())__        }_    };checks,for,the,presence,of,a,code,authorization,header,with,a,value,that,starts,with,code,api,key,if,found,this,will,attempt,to,authenticate,the,key;void,authenticate,with,api,key,if,present,thread,context,ctx,action,listener,authentication,result,listener,if,enabled,final,api,key,credentials,credentials,try,credentials,get,credentials,from,header,ctx,catch,illegal,argument,exception,iae,listener,on,response,authentication,result,unsuccessful,iae,get,message,iae,return,if,credentials,null,final,get,request,get,request,client,prepare,get,security,index,manager,type,credentials,get,id,set,fetch,source,true,request,execute,async,with,origin,ctx,get,request,action,listener,get,response,wrap,response,if,response,is,exists,try,api,key,credentials,ignore,credentials,final,map,string,object,source,response,get,source,validate,api,key,credentials,source,credentials,clock,listener,else,credentials,close,listener,on,response,authentication,result,unsuccessful,unable,to,find,apikey,with,id,credentials,get,id,null,e,credentials,close,listener,on,response,authentication,result,unsuccessful,apikey,authentication,for,id,credentials,get,id,encountered,a,failure,e,client,get,else,listener,on,response,authentication,result,not,handled,else,listener,on,response,authentication,result,not,handled
ApiKeyService -> void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener);1549429429;Checks for the presence of a {@code Authorization} header with a value that starts with_{@code ApiKey }. If found this will attempt to authenticate the key.;void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener) {_        if (enabled) {_            final ApiKeyCredentials credentials__            try {_                credentials = getCredentialsFromHeader(ctx)__            } catch (IllegalArgumentException iae) {_                listener.onResponse(AuthenticationResult.unsuccessful(iae.getMessage(), iae))__                return__            }__            if (credentials != null) {_                final GetRequest getRequest = client.prepareGet(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, credentials.getId())_                    .setFetchSource(true).request()__                executeAsyncWithOrigin(ctx, SECURITY_ORIGIN, getRequest, ActionListener.<GetResponse>wrap(response -> {_                    if (response.isExists()) {_                        try (ApiKeyCredentials ignore = credentials) {_                            final Map<String, Object> source = response.getSource()__                            validateApiKeyCredentials(source, credentials, clock, listener)__                        }_                    } else {_                        credentials.close()__                        listener.onResponse(_                            AuthenticationResult.unsuccessful("unable to find apikey with id " + credentials.getId(), null))__                    }_                }, e -> {_                    credentials.close()__                    listener.onResponse(AuthenticationResult.unsuccessful("apikey authentication for id " + credentials.getId() +_                        " encountered a failure", e))__                }), client::get)__            } else {_                listener.onResponse(AuthenticationResult.notHandled())__            }_        } else {_            listener.onResponse(AuthenticationResult.notHandled())__        }_    };checks,for,the,presence,of,a,code,authorization,header,with,a,value,that,starts,with,code,api,key,if,found,this,will,attempt,to,authenticate,the,key;void,authenticate,with,api,key,if,present,thread,context,ctx,action,listener,authentication,result,listener,if,enabled,final,api,key,credentials,credentials,try,credentials,get,credentials,from,header,ctx,catch,illegal,argument,exception,iae,listener,on,response,authentication,result,unsuccessful,iae,get,message,iae,return,if,credentials,null,final,get,request,get,request,client,prepare,get,security,index,manager,type,credentials,get,id,set,fetch,source,true,request,execute,async,with,origin,ctx,get,request,action,listener,get,response,wrap,response,if,response,is,exists,try,api,key,credentials,ignore,credentials,final,map,string,object,source,response,get,source,validate,api,key,credentials,source,credentials,clock,listener,else,credentials,close,listener,on,response,authentication,result,unsuccessful,unable,to,find,apikey,with,id,credentials,get,id,null,e,credentials,close,listener,on,response,authentication,result,unsuccessful,apikey,authentication,for,id,credentials,get,id,encountered,a,failure,e,client,get,else,listener,on,response,authentication,result,not,handled,else,listener,on,response,authentication,result,not,handled
ApiKeyService -> void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener);1549447102;Checks for the presence of a {@code Authorization} header with a value that starts with_{@code ApiKey }. If found this will attempt to authenticate the key.;void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener) {_        if (enabled) {_            final ApiKeyCredentials credentials__            try {_                credentials = getCredentialsFromHeader(ctx)__            } catch (IllegalArgumentException iae) {_                listener.onResponse(AuthenticationResult.unsuccessful(iae.getMessage(), iae))__                return__            }__            if (credentials != null) {_                final GetRequest getRequest = client.prepareGet(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, credentials.getId())_                    .setFetchSource(true).request()__                executeAsyncWithOrigin(ctx, SECURITY_ORIGIN, getRequest, ActionListener.<GetResponse>wrap(response -> {_                    if (response.isExists()) {_                        try (ApiKeyCredentials ignore = credentials) {_                            final Map<String, Object> source = response.getSource()__                            validateApiKeyCredentials(source, credentials, clock, listener)__                        }_                    } else {_                        credentials.close()__                        listener.onResponse(_                            AuthenticationResult.unsuccessful("unable to find apikey with id " + credentials.getId(), null))__                    }_                }, e -> {_                    credentials.close()__                    listener.onResponse(AuthenticationResult.unsuccessful("apikey authentication for id " + credentials.getId() +_                        " encountered a failure", e))__                }), client::get)__            } else {_                listener.onResponse(AuthenticationResult.notHandled())__            }_        } else {_            listener.onResponse(AuthenticationResult.notHandled())__        }_    };checks,for,the,presence,of,a,code,authorization,header,with,a,value,that,starts,with,code,api,key,if,found,this,will,attempt,to,authenticate,the,key;void,authenticate,with,api,key,if,present,thread,context,ctx,action,listener,authentication,result,listener,if,enabled,final,api,key,credentials,credentials,try,credentials,get,credentials,from,header,ctx,catch,illegal,argument,exception,iae,listener,on,response,authentication,result,unsuccessful,iae,get,message,iae,return,if,credentials,null,final,get,request,get,request,client,prepare,get,security,index,manager,type,credentials,get,id,set,fetch,source,true,request,execute,async,with,origin,ctx,get,request,action,listener,get,response,wrap,response,if,response,is,exists,try,api,key,credentials,ignore,credentials,final,map,string,object,source,response,get,source,validate,api,key,credentials,source,credentials,clock,listener,else,credentials,close,listener,on,response,authentication,result,unsuccessful,unable,to,find,apikey,with,id,credentials,get,id,null,e,credentials,close,listener,on,response,authentication,result,unsuccessful,apikey,authentication,for,id,credentials,get,id,encountered,a,failure,e,client,get,else,listener,on,response,authentication,result,not,handled,else,listener,on,response,authentication,result,not,handled
ApiKeyService -> void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener);1550209662;Checks for the presence of a {@code Authorization} header with a value that starts with_{@code ApiKey }. If found this will attempt to authenticate the key.;void authenticateWithApiKeyIfPresent(ThreadContext ctx, ActionListener<AuthenticationResult> listener) {_        if (enabled) {_            final ApiKeyCredentials credentials__            try {_                credentials = getCredentialsFromHeader(ctx)__            } catch (IllegalArgumentException iae) {_                listener.onResponse(AuthenticationResult.unsuccessful(iae.getMessage(), iae))__                return__            }__            if (credentials != null) {_                final GetRequest getRequest = client.prepareGet(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, credentials.getId())_                    .setFetchSource(true).request()__                executeAsyncWithOrigin(ctx, SECURITY_ORIGIN, getRequest, ActionListener.<GetResponse>wrap(response -> {_                    if (response.isExists()) {_                        try (ApiKeyCredentials ignore = credentials) {_                            final Map<String, Object> source = response.getSource()__                            validateApiKeyCredentials(source, credentials, clock, listener)__                        }_                    } else {_                        credentials.close()__                        listener.onResponse(_                            AuthenticationResult.unsuccessful("unable to find apikey with id " + credentials.getId(), null))__                    }_                }, e -> {_                    credentials.close()__                    listener.onResponse(AuthenticationResult.unsuccessful("apikey authentication for id " + credentials.getId() +_                        " encountered a failure", e))__                }), client::get)__            } else {_                listener.onResponse(AuthenticationResult.notHandled())__            }_        } else {_            listener.onResponse(AuthenticationResult.notHandled())__        }_    };checks,for,the,presence,of,a,code,authorization,header,with,a,value,that,starts,with,code,api,key,if,found,this,will,attempt,to,authenticate,the,key;void,authenticate,with,api,key,if,present,thread,context,ctx,action,listener,authentication,result,listener,if,enabled,final,api,key,credentials,credentials,try,credentials,get,credentials,from,header,ctx,catch,illegal,argument,exception,iae,listener,on,response,authentication,result,unsuccessful,iae,get,message,iae,return,if,credentials,null,final,get,request,get,request,client,prepare,get,security,index,manager,type,credentials,get,id,set,fetch,source,true,request,execute,async,with,origin,ctx,get,request,action,listener,get,response,wrap,response,if,response,is,exists,try,api,key,credentials,ignore,credentials,final,map,string,object,source,response,get,source,validate,api,key,credentials,source,credentials,clock,listener,else,credentials,close,listener,on,response,authentication,result,unsuccessful,unable,to,find,apikey,with,id,credentials,get,id,null,e,credentials,close,listener,on,response,authentication,result,unsuccessful,apikey,authentication,for,id,credentials,get,id,encountered,a,failure,e,client,get,else,listener,on,response,authentication,result,not,handled,else,listener,on,response,authentication,result,not,handled
ApiKeyService -> static void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,                                           ActionListener<AuthenticationResult> listener);1549336917;Validates the ApiKey using the source map_@param source the source map from a get of the ApiKey document_@param credentials the credentials provided by the user_@param listener the listener to notify after verification;static void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,_                                          ActionListener<AuthenticationResult> listener) {_        final Boolean invalidated = (Boolean) source.get("api_key_invalidated")__        if (invalidated == null) {_            listener.onResponse(AuthenticationResult.terminate("api key document is missing invalidated field", null))__        } else if (invalidated) {_            listener.onResponse(AuthenticationResult.terminate("api key has been invalidated", null))__        } else {_            final String apiKeyHash = (String) source.get("api_key_hash")__            if (apiKeyHash == null) {_                throw new IllegalStateException("api key hash is missing")__            }_            final boolean verified = verifyKeyAgainstHash(apiKeyHash, credentials)___            if (verified) {_                final Long expirationEpochMilli = (Long) source.get("expiration_time")__                if (expirationEpochMilli == null || Instant.ofEpochMilli(expirationEpochMilli).isAfter(clock.instant())) {_                    final Map<String, Object> creator = Objects.requireNonNull((Map<String, Object>) source.get("creator"))__                    final String principal = Objects.requireNonNull((String) creator.get("principal"))__                    final Map<String, Object> metadata = (Map<String, Object>) creator.get("metadata")__                    final Map<String, Object> roleDescriptors = (Map<String, Object>) source.get("role_descriptors")__                    final Map<String, Object> limitedByRoleDescriptors = (Map<String, Object>) source.get("limited_by_role_descriptors")__                    final String[] roleNames = (roleDescriptors != null) ? roleDescriptors.keySet().toArray(Strings.EMPTY_ARRAY)_                            : limitedByRoleDescriptors.keySet().toArray(Strings.EMPTY_ARRAY)__                    final User apiKeyUser = new User(principal, roleNames, null, null, metadata, true)__                    final Map<String, Object> authResultMetadata = new HashMap<>()__                    authResultMetadata.put(API_KEY_ROLE_DESCRIPTORS_KEY, roleDescriptors)__                    authResultMetadata.put(API_KEY_LIMITED_ROLE_DESCRIPTORS_KEY, limitedByRoleDescriptors)__                    authResultMetadata.put(API_KEY_ID_KEY, credentials.getId())__                    listener.onResponse(AuthenticationResult.success(apiKeyUser, authResultMetadata))__                } else {_                    listener.onResponse(AuthenticationResult.terminate("api key is expired", null))__                }_            } else {_                listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__            }_        }_    };validates,the,api,key,using,the,source,map,param,source,the,source,map,from,a,get,of,the,api,key,document,param,credentials,the,credentials,provided,by,the,user,param,listener,the,listener,to,notify,after,verification;static,void,validate,api,key,credentials,map,string,object,source,api,key,credentials,credentials,clock,clock,action,listener,authentication,result,listener,final,boolean,invalidated,boolean,source,get,if,invalidated,null,listener,on,response,authentication,result,terminate,api,key,document,is,missing,invalidated,field,null,else,if,invalidated,listener,on,response,authentication,result,terminate,api,key,has,been,invalidated,null,else,final,string,api,key,hash,string,source,get,if,api,key,hash,null,throw,new,illegal,state,exception,api,key,hash,is,missing,final,boolean,verified,verify,key,against,hash,api,key,hash,credentials,if,verified,final,long,expiration,epoch,milli,long,source,get,if,expiration,epoch,milli,null,instant,of,epoch,milli,expiration,epoch,milli,is,after,clock,instant,final,map,string,object,creator,objects,require,non,null,map,string,object,source,get,creator,final,string,principal,objects,require,non,null,string,creator,get,principal,final,map,string,object,metadata,map,string,object,creator,get,metadata,final,map,string,object,role,descriptors,map,string,object,source,get,final,map,string,object,limited,by,role,descriptors,map,string,object,source,get,final,string,role,names,role,descriptors,null,role,descriptors,key,set,to,array,strings,limited,by,role,descriptors,key,set,to,array,strings,final,user,api,key,user,new,user,principal,role,names,null,null,metadata,true,final,map,string,object,auth,result,metadata,new,hash,map,auth,result,metadata,put,role,descriptors,auth,result,metadata,put,limited,by,role,descriptors,auth,result,metadata,put,credentials,get,id,listener,on,response,authentication,result,success,api,key,user,auth,result,metadata,else,listener,on,response,authentication,result,terminate,api,key,is,expired,null,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null
ApiKeyService -> static void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,                                           ActionListener<AuthenticationResult> listener);1549399169;Validates the ApiKey using the source map_@param source the source map from a get of the ApiKey document_@param credentials the credentials provided by the user_@param listener the listener to notify after verification;static void validateApiKeyCredentials(Map<String, Object> source, ApiKeyCredentials credentials, Clock clock,_                                          ActionListener<AuthenticationResult> listener) {_        final Boolean invalidated = (Boolean) source.get("api_key_invalidated")__        if (invalidated == null) {_            listener.onResponse(AuthenticationResult.terminate("api key document is missing invalidated field", null))__        } else if (invalidated) {_            listener.onResponse(AuthenticationResult.terminate("api key has been invalidated", null))__        } else {_            final String apiKeyHash = (String) source.get("api_key_hash")__            if (apiKeyHash == null) {_                throw new IllegalStateException("api key hash is missing")__            }_            final boolean verified = verifyKeyAgainstHash(apiKeyHash, credentials)___            if (verified) {_                final Long expirationEpochMilli = (Long) source.get("expiration_time")__                if (expirationEpochMilli == null || Instant.ofEpochMilli(expirationEpochMilli).isAfter(clock.instant())) {_                    final Map<String, Object> creator = Objects.requireNonNull((Map<String, Object>) source.get("creator"))__                    final String principal = Objects.requireNonNull((String) creator.get("principal"))__                    final Map<String, Object> metadata = (Map<String, Object>) creator.get("metadata")__                    final Map<String, Object> roleDescriptors = (Map<String, Object>) source.get("role_descriptors")__                    final Map<String, Object> limitedByRoleDescriptors = (Map<String, Object>) source.get("limited_by_role_descriptors")__                    final String[] roleNames = (roleDescriptors != null) ? roleDescriptors.keySet().toArray(Strings.EMPTY_ARRAY)_                            : limitedByRoleDescriptors.keySet().toArray(Strings.EMPTY_ARRAY)__                    final User apiKeyUser = new User(principal, roleNames, null, null, metadata, true)__                    final Map<String, Object> authResultMetadata = new HashMap<>()__                    authResultMetadata.put(API_KEY_ROLE_DESCRIPTORS_KEY, roleDescriptors)__                    authResultMetadata.put(API_KEY_LIMITED_ROLE_DESCRIPTORS_KEY, limitedByRoleDescriptors)__                    authResultMetadata.put(API_KEY_ID_KEY, credentials.getId())__                    listener.onResponse(AuthenticationResult.success(apiKeyUser, authResultMetadata))__                } else {_                    listener.onResponse(AuthenticationResult.terminate("api key is expired", null))__                }_            } else {_                listener.onResponse(AuthenticationResult.unsuccessful("invalid credentials", null))__            }_        }_    };validates,the,api,key,using,the,source,map,param,source,the,source,map,from,a,get,of,the,api,key,document,param,credentials,the,credentials,provided,by,the,user,param,listener,the,listener,to,notify,after,verification;static,void,validate,api,key,credentials,map,string,object,source,api,key,credentials,credentials,clock,clock,action,listener,authentication,result,listener,final,boolean,invalidated,boolean,source,get,if,invalidated,null,listener,on,response,authentication,result,terminate,api,key,document,is,missing,invalidated,field,null,else,if,invalidated,listener,on,response,authentication,result,terminate,api,key,has,been,invalidated,null,else,final,string,api,key,hash,string,source,get,if,api,key,hash,null,throw,new,illegal,state,exception,api,key,hash,is,missing,final,boolean,verified,verify,key,against,hash,api,key,hash,credentials,if,verified,final,long,expiration,epoch,milli,long,source,get,if,expiration,epoch,milli,null,instant,of,epoch,milli,expiration,epoch,milli,is,after,clock,instant,final,map,string,object,creator,objects,require,non,null,map,string,object,source,get,creator,final,string,principal,objects,require,non,null,string,creator,get,principal,final,map,string,object,metadata,map,string,object,creator,get,metadata,final,map,string,object,role,descriptors,map,string,object,source,get,final,map,string,object,limited,by,role,descriptors,map,string,object,source,get,final,string,role,names,role,descriptors,null,role,descriptors,key,set,to,array,strings,limited,by,role,descriptors,key,set,to,array,strings,final,user,api,key,user,new,user,principal,role,names,null,null,metadata,true,final,map,string,object,auth,result,metadata,new,hash,map,auth,result,metadata,put,role,descriptors,auth,result,metadata,put,limited,by,role,descriptors,auth,result,metadata,put,credentials,get,id,listener,on,response,authentication,result,success,api,key,user,auth,result,metadata,else,listener,on,response,authentication,result,terminate,api,key,is,expired,null,else,listener,on,response,authentication,result,unsuccessful,invalid,credentials,null
ApiKeyService -> public void invalidateApiKeysForRealmAndUser(String realmName, String userName,                                                  ActionListener<InvalidateApiKeyResponse> invalidateListener);1549336917;Invalidate API keys for given realm and user name._@param realmName realm name_@param userName user name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeysForRealmAndUser(String realmName, String userName,_                                                 ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            invalidateListener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No active api keys to invalidate for realm [{}] and username [{}]", realmName, userName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,invalidate,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,active,api,keys,to,invalidate,for,realm,and,username,realm,name,user,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeysForRealmAndUser(String realmName, String userName,                                                  ActionListener<InvalidateApiKeyResponse> invalidateListener);1549399169;Invalidate API keys for given realm and user name._@param realmName realm name_@param userName user name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeysForRealmAndUser(String realmName, String userName,_                                                 ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            invalidateListener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No active api keys to invalidate for realm [{}] and username [{}]", realmName, userName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,invalidate,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,active,api,keys,to,invalidate,for,realm,and,username,realm,name,user,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeysForRealmAndUser(String realmName, String userName,                                                  ActionListener<InvalidateApiKeyResponse> invalidateListener);1549415786;Invalidate API keys for given realm and user name._@param realmName realm name_@param userName user name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeysForRealmAndUser(String realmName, String userName,_                                                 ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            invalidateListener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No active api keys to invalidate for realm [{}] and username [{}]", realmName, userName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,invalidate,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,active,api,keys,to,invalidate,for,realm,and,username,realm,name,user,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeysForRealmAndUser(String realmName, String userName,                                                  ActionListener<InvalidateApiKeyResponse> invalidateListener);1549429429;Invalidate API keys for given realm and user name._@param realmName realm name_@param userName user name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeysForRealmAndUser(String realmName, String userName,_                                                 ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            invalidateListener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No active api keys to invalidate for realm [{}] and username [{}]", realmName, userName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,invalidate,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,active,api,keys,to,invalidate,for,realm,and,username,realm,name,user,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeysForRealmAndUser(String realmName, String userName,                                                  ActionListener<InvalidateApiKeyResponse> invalidateListener);1549447102;Invalidate API keys for given realm and user name._@param realmName realm name_@param userName user name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeysForRealmAndUser(String realmName, String userName,_                                                 ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            invalidateListener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No active api keys to invalidate for realm [{}] and username [{}]", realmName, userName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,invalidate,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,active,api,keys,to,invalidate,for,realm,and,username,realm,name,user,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeysForRealmAndUser(String realmName, String userName,                                                  ActionListener<InvalidateApiKeyResponse> invalidateListener);1550209662;Invalidate API keys for given realm and user name._@param realmName realm name_@param userName user name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeysForRealmAndUser(String realmName, String userName,_                                                 ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            invalidateListener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No active api keys to invalidate for realm [{}] and username [{}]", realmName, userName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,invalidate,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,active,api,keys,to,invalidate,for,realm,and,username,realm,name,user,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext);1549336917;Gets the API Key from the <code>Authorization</code> header if the header begins with_<code>ApiKey </code>;static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext) {_        String header = threadContext.getHeader("Authorization")__        if (Strings.hasText(header) && header.regionMatches(true, 0, "ApiKey ", 0, "ApiKey ".length())_            && header.length() > "ApiKey ".length()) {_            final byte[] decodedApiKeyCredBytes = Base64.getDecoder().decode(header.substring("ApiKey ".length()))__            char[] apiKeyCredChars = null__            try {_                apiKeyCredChars = CharArrays.utf8BytesToChars(decodedApiKeyCredBytes)__                int colonIndex = -1__                for (int i = 0_ i < apiKeyCredChars.length_ i++) {_                    if (apiKeyCredChars[i] == ':') {_                        colonIndex = i__                        break__                    }_                }__                if (colonIndex < 1) {_                    throw new IllegalArgumentException("invalid ApiKey value")__                }_                return new ApiKeyCredentials(new String(Arrays.copyOfRange(apiKeyCredChars, 0, colonIndex)),_                    new SecureString(Arrays.copyOfRange(apiKeyCredChars, colonIndex + 1, apiKeyCredChars.length)))__            } finally {_                if (apiKeyCredChars != null) {_                    Arrays.fill(apiKeyCredChars, (char) 0)__                }_            }_        }_        return null__    };gets,the,api,key,from,the,code,authorization,code,header,if,the,header,begins,with,code,api,key,code;static,api,key,credentials,get,credentials,from,header,thread,context,thread,context,string,header,thread,context,get,header,authorization,if,strings,has,text,header,header,region,matches,true,0,api,key,0,api,key,length,header,length,api,key,length,final,byte,decoded,api,key,cred,bytes,base64,get,decoder,decode,header,substring,api,key,length,char,api,key,cred,chars,null,try,api,key,cred,chars,char,arrays,utf8bytes,to,chars,decoded,api,key,cred,bytes,int,colon,index,1,for,int,i,0,i,api,key,cred,chars,length,i,if,api,key,cred,chars,i,colon,index,i,break,if,colon,index,1,throw,new,illegal,argument,exception,invalid,api,key,value,return,new,api,key,credentials,new,string,arrays,copy,of,range,api,key,cred,chars,0,colon,index,new,secure,string,arrays,copy,of,range,api,key,cred,chars,colon,index,1,api,key,cred,chars,length,finally,if,api,key,cred,chars,null,arrays,fill,api,key,cred,chars,char,0,return,null
ApiKeyService -> static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext);1549399169;Gets the API Key from the <code>Authorization</code> header if the header begins with_<code>ApiKey </code>;static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext) {_        String header = threadContext.getHeader("Authorization")__        if (Strings.hasText(header) && header.regionMatches(true, 0, "ApiKey ", 0, "ApiKey ".length())_            && header.length() > "ApiKey ".length()) {_            final byte[] decodedApiKeyCredBytes = Base64.getDecoder().decode(header.substring("ApiKey ".length()))__            char[] apiKeyCredChars = null__            try {_                apiKeyCredChars = CharArrays.utf8BytesToChars(decodedApiKeyCredBytes)__                int colonIndex = -1__                for (int i = 0_ i < apiKeyCredChars.length_ i++) {_                    if (apiKeyCredChars[i] == ':') {_                        colonIndex = i__                        break__                    }_                }__                if (colonIndex < 1) {_                    throw new IllegalArgumentException("invalid ApiKey value")__                }_                return new ApiKeyCredentials(new String(Arrays.copyOfRange(apiKeyCredChars, 0, colonIndex)),_                    new SecureString(Arrays.copyOfRange(apiKeyCredChars, colonIndex + 1, apiKeyCredChars.length)))__            } finally {_                if (apiKeyCredChars != null) {_                    Arrays.fill(apiKeyCredChars, (char) 0)__                }_            }_        }_        return null__    };gets,the,api,key,from,the,code,authorization,code,header,if,the,header,begins,with,code,api,key,code;static,api,key,credentials,get,credentials,from,header,thread,context,thread,context,string,header,thread,context,get,header,authorization,if,strings,has,text,header,header,region,matches,true,0,api,key,0,api,key,length,header,length,api,key,length,final,byte,decoded,api,key,cred,bytes,base64,get,decoder,decode,header,substring,api,key,length,char,api,key,cred,chars,null,try,api,key,cred,chars,char,arrays,utf8bytes,to,chars,decoded,api,key,cred,bytes,int,colon,index,1,for,int,i,0,i,api,key,cred,chars,length,i,if,api,key,cred,chars,i,colon,index,i,break,if,colon,index,1,throw,new,illegal,argument,exception,invalid,api,key,value,return,new,api,key,credentials,new,string,arrays,copy,of,range,api,key,cred,chars,0,colon,index,new,secure,string,arrays,copy,of,range,api,key,cred,chars,colon,index,1,api,key,cred,chars,length,finally,if,api,key,cred,chars,null,arrays,fill,api,key,cred,chars,char,0,return,null
ApiKeyService -> static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext);1549415786;Gets the API Key from the <code>Authorization</code> header if the header begins with_<code>ApiKey </code>;static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext) {_        String header = threadContext.getHeader("Authorization")__        if (Strings.hasText(header) && header.regionMatches(true, 0, "ApiKey ", 0, "ApiKey ".length())_            && header.length() > "ApiKey ".length()) {_            final byte[] decodedApiKeyCredBytes = Base64.getDecoder().decode(header.substring("ApiKey ".length()))__            char[] apiKeyCredChars = null__            try {_                apiKeyCredChars = CharArrays.utf8BytesToChars(decodedApiKeyCredBytes)__                int colonIndex = -1__                for (int i = 0_ i < apiKeyCredChars.length_ i++) {_                    if (apiKeyCredChars[i] == ':') {_                        colonIndex = i__                        break__                    }_                }__                if (colonIndex < 1) {_                    throw new IllegalArgumentException("invalid ApiKey value")__                }_                return new ApiKeyCredentials(new String(Arrays.copyOfRange(apiKeyCredChars, 0, colonIndex)),_                    new SecureString(Arrays.copyOfRange(apiKeyCredChars, colonIndex + 1, apiKeyCredChars.length)))__            } finally {_                if (apiKeyCredChars != null) {_                    Arrays.fill(apiKeyCredChars, (char) 0)__                }_            }_        }_        return null__    };gets,the,api,key,from,the,code,authorization,code,header,if,the,header,begins,with,code,api,key,code;static,api,key,credentials,get,credentials,from,header,thread,context,thread,context,string,header,thread,context,get,header,authorization,if,strings,has,text,header,header,region,matches,true,0,api,key,0,api,key,length,header,length,api,key,length,final,byte,decoded,api,key,cred,bytes,base64,get,decoder,decode,header,substring,api,key,length,char,api,key,cred,chars,null,try,api,key,cred,chars,char,arrays,utf8bytes,to,chars,decoded,api,key,cred,bytes,int,colon,index,1,for,int,i,0,i,api,key,cred,chars,length,i,if,api,key,cred,chars,i,colon,index,i,break,if,colon,index,1,throw,new,illegal,argument,exception,invalid,api,key,value,return,new,api,key,credentials,new,string,arrays,copy,of,range,api,key,cred,chars,0,colon,index,new,secure,string,arrays,copy,of,range,api,key,cred,chars,colon,index,1,api,key,cred,chars,length,finally,if,api,key,cred,chars,null,arrays,fill,api,key,cred,chars,char,0,return,null
ApiKeyService -> static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext);1549429429;Gets the API Key from the <code>Authorization</code> header if the header begins with_<code>ApiKey </code>;static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext) {_        String header = threadContext.getHeader("Authorization")__        if (Strings.hasText(header) && header.regionMatches(true, 0, "ApiKey ", 0, "ApiKey ".length())_            && header.length() > "ApiKey ".length()) {_            final byte[] decodedApiKeyCredBytes = Base64.getDecoder().decode(header.substring("ApiKey ".length()))__            char[] apiKeyCredChars = null__            try {_                apiKeyCredChars = CharArrays.utf8BytesToChars(decodedApiKeyCredBytes)__                int colonIndex = -1__                for (int i = 0_ i < apiKeyCredChars.length_ i++) {_                    if (apiKeyCredChars[i] == ':') {_                        colonIndex = i__                        break__                    }_                }__                if (colonIndex < 1) {_                    throw new IllegalArgumentException("invalid ApiKey value")__                }_                return new ApiKeyCredentials(new String(Arrays.copyOfRange(apiKeyCredChars, 0, colonIndex)),_                    new SecureString(Arrays.copyOfRange(apiKeyCredChars, colonIndex + 1, apiKeyCredChars.length)))__            } finally {_                if (apiKeyCredChars != null) {_                    Arrays.fill(apiKeyCredChars, (char) 0)__                }_            }_        }_        return null__    };gets,the,api,key,from,the,code,authorization,code,header,if,the,header,begins,with,code,api,key,code;static,api,key,credentials,get,credentials,from,header,thread,context,thread,context,string,header,thread,context,get,header,authorization,if,strings,has,text,header,header,region,matches,true,0,api,key,0,api,key,length,header,length,api,key,length,final,byte,decoded,api,key,cred,bytes,base64,get,decoder,decode,header,substring,api,key,length,char,api,key,cred,chars,null,try,api,key,cred,chars,char,arrays,utf8bytes,to,chars,decoded,api,key,cred,bytes,int,colon,index,1,for,int,i,0,i,api,key,cred,chars,length,i,if,api,key,cred,chars,i,colon,index,i,break,if,colon,index,1,throw,new,illegal,argument,exception,invalid,api,key,value,return,new,api,key,credentials,new,string,arrays,copy,of,range,api,key,cred,chars,0,colon,index,new,secure,string,arrays,copy,of,range,api,key,cred,chars,colon,index,1,api,key,cred,chars,length,finally,if,api,key,cred,chars,null,arrays,fill,api,key,cred,chars,char,0,return,null
ApiKeyService -> static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext);1549447102;Gets the API Key from the <code>Authorization</code> header if the header begins with_<code>ApiKey </code>;static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext) {_        String header = threadContext.getHeader("Authorization")__        if (Strings.hasText(header) && header.regionMatches(true, 0, "ApiKey ", 0, "ApiKey ".length())_            && header.length() > "ApiKey ".length()) {_            final byte[] decodedApiKeyCredBytes = Base64.getDecoder().decode(header.substring("ApiKey ".length()))__            char[] apiKeyCredChars = null__            try {_                apiKeyCredChars = CharArrays.utf8BytesToChars(decodedApiKeyCredBytes)__                int colonIndex = -1__                for (int i = 0_ i < apiKeyCredChars.length_ i++) {_                    if (apiKeyCredChars[i] == ':') {_                        colonIndex = i__                        break__                    }_                }__                if (colonIndex < 1) {_                    throw new IllegalArgumentException("invalid ApiKey value")__                }_                return new ApiKeyCredentials(new String(Arrays.copyOfRange(apiKeyCredChars, 0, colonIndex)),_                    new SecureString(Arrays.copyOfRange(apiKeyCredChars, colonIndex + 1, apiKeyCredChars.length)))__            } finally {_                if (apiKeyCredChars != null) {_                    Arrays.fill(apiKeyCredChars, (char) 0)__                }_            }_        }_        return null__    };gets,the,api,key,from,the,code,authorization,code,header,if,the,header,begins,with,code,api,key,code;static,api,key,credentials,get,credentials,from,header,thread,context,thread,context,string,header,thread,context,get,header,authorization,if,strings,has,text,header,header,region,matches,true,0,api,key,0,api,key,length,header,length,api,key,length,final,byte,decoded,api,key,cred,bytes,base64,get,decoder,decode,header,substring,api,key,length,char,api,key,cred,chars,null,try,api,key,cred,chars,char,arrays,utf8bytes,to,chars,decoded,api,key,cred,bytes,int,colon,index,1,for,int,i,0,i,api,key,cred,chars,length,i,if,api,key,cred,chars,i,colon,index,i,break,if,colon,index,1,throw,new,illegal,argument,exception,invalid,api,key,value,return,new,api,key,credentials,new,string,arrays,copy,of,range,api,key,cred,chars,0,colon,index,new,secure,string,arrays,copy,of,range,api,key,cred,chars,colon,index,1,api,key,cred,chars,length,finally,if,api,key,cred,chars,null,arrays,fill,api,key,cred,chars,char,0,return,null
ApiKeyService -> static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext);1550209662;Gets the API Key from the <code>Authorization</code> header if the header begins with_<code>ApiKey </code>;static ApiKeyCredentials getCredentialsFromHeader(ThreadContext threadContext) {_        String header = threadContext.getHeader("Authorization")__        if (Strings.hasText(header) && header.regionMatches(true, 0, "ApiKey ", 0, "ApiKey ".length())_            && header.length() > "ApiKey ".length()) {_            final byte[] decodedApiKeyCredBytes = Base64.getDecoder().decode(header.substring("ApiKey ".length()))__            char[] apiKeyCredChars = null__            try {_                apiKeyCredChars = CharArrays.utf8BytesToChars(decodedApiKeyCredBytes)__                int colonIndex = -1__                for (int i = 0_ i < apiKeyCredChars.length_ i++) {_                    if (apiKeyCredChars[i] == ':') {_                        colonIndex = i__                        break__                    }_                }__                if (colonIndex < 1) {_                    throw new IllegalArgumentException("invalid ApiKey value")__                }_                return new ApiKeyCredentials(new String(Arrays.copyOfRange(apiKeyCredChars, 0, colonIndex)),_                    new SecureString(Arrays.copyOfRange(apiKeyCredChars, colonIndex + 1, apiKeyCredChars.length)))__            } finally {_                if (apiKeyCredChars != null) {_                    Arrays.fill(apiKeyCredChars, (char) 0)__                }_            }_        }_        return null__    };gets,the,api,key,from,the,code,authorization,code,header,if,the,header,begins,with,code,api,key,code;static,api,key,credentials,get,credentials,from,header,thread,context,thread,context,string,header,thread,context,get,header,authorization,if,strings,has,text,header,header,region,matches,true,0,api,key,0,api,key,length,header,length,api,key,length,final,byte,decoded,api,key,cred,bytes,base64,get,decoder,decode,header,substring,api,key,length,char,api,key,cred,chars,null,try,api,key,cred,chars,char,arrays,utf8bytes,to,chars,decoded,api,key,cred,bytes,int,colon,index,1,for,int,i,0,i,api,key,cred,chars,length,i,if,api,key,cred,chars,i,colon,index,i,break,if,colon,index,1,throw,new,illegal,argument,exception,invalid,api,key,value,return,new,api,key,credentials,new,string,arrays,copy,of,range,api,key,cred,chars,0,colon,index,new,secure,string,arrays,copy,of,range,api,key,cred,chars,colon,index,1,api,key,cred,chars,length,finally,if,api,key,cred,chars,null,arrays,fill,api,key,cred,chars,char,0,return,null
ApiKeyService -> public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener);1549336917;Get API keys for given realm and user name._@param realmName realm name_@param userName user name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            listener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No active api keys found for realm [{}] and username [{}]", realmName, userName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,active,api,keys,found,for,realm,and,username,realm,name,user,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener);1549399169;Get API keys for given realm and user name._@param realmName realm name_@param userName user name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            listener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No active api keys found for realm [{}] and username [{}]", realmName, userName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,active,api,keys,found,for,realm,and,username,realm,name,user,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener);1549415786;Get API keys for given realm and user name._@param realmName realm name_@param userName user name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            listener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No active api keys found for realm [{}] and username [{}]", realmName, userName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,active,api,keys,found,for,realm,and,username,realm,name,user,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener);1549429429;Get API keys for given realm and user name._@param realmName realm name_@param userName user name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            listener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No active api keys found for realm [{}] and username [{}]", realmName, userName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,active,api,keys,found,for,realm,and,username,realm,name,user,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener);1549447102;Get API keys for given realm and user name._@param realmName realm name_@param userName user name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            listener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No active api keys found for realm [{}] and username [{}]", realmName, userName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,active,api,keys,found,for,realm,and,username,realm,name,user,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener);1550209662;Get API keys for given realm and user name._@param realmName realm name_@param userName user name_@param listener listener for {@link GetApiKeyResponse};public void getApiKeysForRealmAndUser(String realmName, String userName, ActionListener<GetApiKeyResponse> listener) {_        ensureEnabled()__        if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false) {_            logger.trace("No realm name or username provided")__            listener.onFailure(new IllegalArgumentException("realm name or username must be provided"))__        } else {_            findApiKeysForUserAndRealm(userName, realmName, false, false, ActionListener.wrap(apiKeyInfos -> {_                    if (apiKeyInfos.isEmpty()) {_                        logger.warn("No active api keys found for realm [{}] and username [{}]", realmName, userName)__                        listener.onResponse(GetApiKeyResponse.emptyResponse())__                    } else {_                        listener.onResponse(new GetApiKeyResponse(apiKeyInfos))__                    }_                }, listener::onFailure))__        }_    };get,api,keys,for,given,realm,and,user,name,param,realm,name,realm,name,param,user,name,user,name,param,listener,listener,for,link,get,api,key,response;public,void,get,api,keys,for,realm,and,user,string,realm,name,string,user,name,action,listener,get,api,key,response,listener,ensure,enabled,if,strings,has,text,realm,name,false,strings,has,text,user,name,false,logger,trace,no,realm,name,or,username,provided,listener,on,failure,new,illegal,argument,exception,realm,name,or,username,must,be,provided,else,find,api,keys,for,user,and,realm,user,name,realm,name,false,false,action,listener,wrap,api,key,infos,if,api,key,infos,is,empty,logger,warn,no,active,api,keys,found,for,realm,and,username,realm,name,user,name,listener,on,response,get,api,key,response,empty,response,else,listener,on,response,new,get,api,key,response,api,key,infos,listener,on,failure
ApiKeyService -> private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,                                    @Nullable InvalidateApiKeyResponse previousResult);1549336917;Performs the actual invalidation of a collection of api keys__@param apiKeyIds       the api keys to invalidate_@param listener        the listener to notify upon completion_@param previousResult  if this not the initial attempt for invalidation, it contains the result of invalidating_api keys up to the point of the retry. This result is added to the result of the current attempt;private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,_                                   @Nullable InvalidateApiKeyResponse previousResult) {_        maybeStartApiKeyRemover()__        if (apiKeyIds.isEmpty()) {_            listener.onFailure(new ElasticsearchSecurityException("No api key ids provided for invalidation"))__        } else {_            BulkRequestBuilder bulkRequestBuilder = client.prepareBulk()__            for (String apiKeyId : apiKeyIds) {_                UpdateRequest request = client.prepareUpdate(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, apiKeyId)_                    .setDoc(Collections.singletonMap("api_key_invalidated", true))_                    .request()__                bulkRequestBuilder.add(request)__            }_            bulkRequestBuilder.setRefreshPolicy(RefreshPolicy.WAIT_UNTIL)__            securityIndex.prepareIndexIfNeededThenExecute(ex -> listener.onFailure(traceLog("prepare security index", ex)),_                () -> executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, bulkRequestBuilder.request(),_                    ActionListener.<BulkResponse>wrap(bulkResponse -> {_                        ArrayList<ElasticsearchException> failedRequestResponses = new ArrayList<>()__                        ArrayList<String> previouslyInvalidated = new ArrayList<>()__                        ArrayList<String> invalidated = new ArrayList<>()__                        if (null != previousResult) {_                            failedRequestResponses.addAll((previousResult.getErrors()))__                            previouslyInvalidated.addAll(previousResult.getPreviouslyInvalidatedApiKeys())__                            invalidated.addAll(previousResult.getInvalidatedApiKeys())__                        }_                        for (BulkItemResponse bulkItemResponse : bulkResponse.getItems()) {_                            if (bulkItemResponse.isFailed()) {_                                Throwable cause = bulkItemResponse.getFailure().getCause()__                                final String failedApiKeyId = bulkItemResponse.getFailure().getId()__                                traceLog("invalidate api key", failedApiKeyId, cause)__                                failedRequestResponses.add(new ElasticsearchException("Error invalidating api key", cause))__                            } else {_                                UpdateResponse updateResponse = bulkItemResponse.getResponse()__                                if (updateResponse.getResult() == DocWriteResponse.Result.UPDATED) {_                                    logger.debug("Invalidated api key for doc [{}]", updateResponse.getId())__                                    invalidated.add(updateResponse.getId())__                                } else if (updateResponse.getResult() == DocWriteResponse.Result.NOOP) {_                                    previouslyInvalidated.add(updateResponse.getId())__                                }_                            }_                        }_                        InvalidateApiKeyResponse result = new InvalidateApiKeyResponse(invalidated, previouslyInvalidated,_                            failedRequestResponses)__                        listener.onResponse(result)__                    }, e -> {_                        Throwable cause = ExceptionsHelper.unwrapCause(e)__                        traceLog("invalidate api keys", cause)__                        listener.onFailure(e)__                    }), client::bulk))__        }_    };performs,the,actual,invalidation,of,a,collection,of,api,keys,param,api,key,ids,the,api,keys,to,invalidate,param,listener,the,listener,to,notify,upon,completion,param,previous,result,if,this,not,the,initial,attempt,for,invalidation,it,contains,the,result,of,invalidating,api,keys,up,to,the,point,of,the,retry,this,result,is,added,to,the,result,of,the,current,attempt;private,void,index,invalidation,collection,string,api,key,ids,action,listener,invalidate,api,key,response,listener,nullable,invalidate,api,key,response,previous,result,maybe,start,api,key,remover,if,api,key,ids,is,empty,listener,on,failure,new,elasticsearch,security,exception,no,api,key,ids,provided,for,invalidation,else,bulk,request,builder,bulk,request,builder,client,prepare,bulk,for,string,api,key,id,api,key,ids,update,request,request,client,prepare,update,security,index,manager,type,api,key,id,set,doc,collections,singleton,map,true,request,bulk,request,builder,add,request,bulk,request,builder,set,refresh,policy,refresh,policy,security,index,prepare,index,if,needed,then,execute,ex,listener,on,failure,trace,log,prepare,security,index,ex,execute,async,with,origin,client,thread,pool,get,thread,context,bulk,request,builder,request,action,listener,bulk,response,wrap,bulk,response,array,list,elasticsearch,exception,failed,request,responses,new,array,list,array,list,string,previously,invalidated,new,array,list,array,list,string,invalidated,new,array,list,if,null,previous,result,failed,request,responses,add,all,previous,result,get,errors,previously,invalidated,add,all,previous,result,get,previously,invalidated,api,keys,invalidated,add,all,previous,result,get,invalidated,api,keys,for,bulk,item,response,bulk,item,response,bulk,response,get,items,if,bulk,item,response,is,failed,throwable,cause,bulk,item,response,get,failure,get,cause,final,string,failed,api,key,id,bulk,item,response,get,failure,get,id,trace,log,invalidate,api,key,failed,api,key,id,cause,failed,request,responses,add,new,elasticsearch,exception,error,invalidating,api,key,cause,else,update,response,update,response,bulk,item,response,get,response,if,update,response,get,result,doc,write,response,result,updated,logger,debug,invalidated,api,key,for,doc,update,response,get,id,invalidated,add,update,response,get,id,else,if,update,response,get,result,doc,write,response,result,noop,previously,invalidated,add,update,response,get,id,invalidate,api,key,response,result,new,invalidate,api,key,response,invalidated,previously,invalidated,failed,request,responses,listener,on,response,result,e,throwable,cause,exceptions,helper,unwrap,cause,e,trace,log,invalidate,api,keys,cause,listener,on,failure,e,client,bulk
ApiKeyService -> private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,                                    @Nullable InvalidateApiKeyResponse previousResult);1549399169;Performs the actual invalidation of a collection of api keys__@param apiKeyIds       the api keys to invalidate_@param listener        the listener to notify upon completion_@param previousResult  if this not the initial attempt for invalidation, it contains the result of invalidating_api keys up to the point of the retry. This result is added to the result of the current attempt;private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,_                                   @Nullable InvalidateApiKeyResponse previousResult) {_        maybeStartApiKeyRemover()__        if (apiKeyIds.isEmpty()) {_            listener.onFailure(new ElasticsearchSecurityException("No api key ids provided for invalidation"))__        } else {_            BulkRequestBuilder bulkRequestBuilder = client.prepareBulk()__            for (String apiKeyId : apiKeyIds) {_                UpdateRequest request = client.prepareUpdate(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, apiKeyId)_                    .setDoc(Collections.singletonMap("api_key_invalidated", true))_                    .request()__                bulkRequestBuilder.add(request)__            }_            bulkRequestBuilder.setRefreshPolicy(RefreshPolicy.WAIT_UNTIL)__            securityIndex.prepareIndexIfNeededThenExecute(ex -> listener.onFailure(traceLog("prepare security index", ex)),_                () -> executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, bulkRequestBuilder.request(),_                    ActionListener.<BulkResponse>wrap(bulkResponse -> {_                        ArrayList<ElasticsearchException> failedRequestResponses = new ArrayList<>()__                        ArrayList<String> previouslyInvalidated = new ArrayList<>()__                        ArrayList<String> invalidated = new ArrayList<>()__                        if (null != previousResult) {_                            failedRequestResponses.addAll((previousResult.getErrors()))__                            previouslyInvalidated.addAll(previousResult.getPreviouslyInvalidatedApiKeys())__                            invalidated.addAll(previousResult.getInvalidatedApiKeys())__                        }_                        for (BulkItemResponse bulkItemResponse : bulkResponse.getItems()) {_                            if (bulkItemResponse.isFailed()) {_                                Throwable cause = bulkItemResponse.getFailure().getCause()__                                final String failedApiKeyId = bulkItemResponse.getFailure().getId()__                                traceLog("invalidate api key", failedApiKeyId, cause)__                                failedRequestResponses.add(new ElasticsearchException("Error invalidating api key", cause))__                            } else {_                                UpdateResponse updateResponse = bulkItemResponse.getResponse()__                                if (updateResponse.getResult() == DocWriteResponse.Result.UPDATED) {_                                    logger.debug("Invalidated api key for doc [{}]", updateResponse.getId())__                                    invalidated.add(updateResponse.getId())__                                } else if (updateResponse.getResult() == DocWriteResponse.Result.NOOP) {_                                    previouslyInvalidated.add(updateResponse.getId())__                                }_                            }_                        }_                        InvalidateApiKeyResponse result = new InvalidateApiKeyResponse(invalidated, previouslyInvalidated,_                            failedRequestResponses)__                        listener.onResponse(result)__                    }, e -> {_                        Throwable cause = ExceptionsHelper.unwrapCause(e)__                        traceLog("invalidate api keys", cause)__                        listener.onFailure(e)__                    }), client::bulk))__        }_    };performs,the,actual,invalidation,of,a,collection,of,api,keys,param,api,key,ids,the,api,keys,to,invalidate,param,listener,the,listener,to,notify,upon,completion,param,previous,result,if,this,not,the,initial,attempt,for,invalidation,it,contains,the,result,of,invalidating,api,keys,up,to,the,point,of,the,retry,this,result,is,added,to,the,result,of,the,current,attempt;private,void,index,invalidation,collection,string,api,key,ids,action,listener,invalidate,api,key,response,listener,nullable,invalidate,api,key,response,previous,result,maybe,start,api,key,remover,if,api,key,ids,is,empty,listener,on,failure,new,elasticsearch,security,exception,no,api,key,ids,provided,for,invalidation,else,bulk,request,builder,bulk,request,builder,client,prepare,bulk,for,string,api,key,id,api,key,ids,update,request,request,client,prepare,update,security,index,manager,type,api,key,id,set,doc,collections,singleton,map,true,request,bulk,request,builder,add,request,bulk,request,builder,set,refresh,policy,refresh,policy,security,index,prepare,index,if,needed,then,execute,ex,listener,on,failure,trace,log,prepare,security,index,ex,execute,async,with,origin,client,thread,pool,get,thread,context,bulk,request,builder,request,action,listener,bulk,response,wrap,bulk,response,array,list,elasticsearch,exception,failed,request,responses,new,array,list,array,list,string,previously,invalidated,new,array,list,array,list,string,invalidated,new,array,list,if,null,previous,result,failed,request,responses,add,all,previous,result,get,errors,previously,invalidated,add,all,previous,result,get,previously,invalidated,api,keys,invalidated,add,all,previous,result,get,invalidated,api,keys,for,bulk,item,response,bulk,item,response,bulk,response,get,items,if,bulk,item,response,is,failed,throwable,cause,bulk,item,response,get,failure,get,cause,final,string,failed,api,key,id,bulk,item,response,get,failure,get,id,trace,log,invalidate,api,key,failed,api,key,id,cause,failed,request,responses,add,new,elasticsearch,exception,error,invalidating,api,key,cause,else,update,response,update,response,bulk,item,response,get,response,if,update,response,get,result,doc,write,response,result,updated,logger,debug,invalidated,api,key,for,doc,update,response,get,id,invalidated,add,update,response,get,id,else,if,update,response,get,result,doc,write,response,result,noop,previously,invalidated,add,update,response,get,id,invalidate,api,key,response,result,new,invalidate,api,key,response,invalidated,previously,invalidated,failed,request,responses,listener,on,response,result,e,throwable,cause,exceptions,helper,unwrap,cause,e,trace,log,invalidate,api,keys,cause,listener,on,failure,e,client,bulk
ApiKeyService -> private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,                                    @Nullable InvalidateApiKeyResponse previousResult);1549415786;Performs the actual invalidation of a collection of api keys__@param apiKeyIds       the api keys to invalidate_@param listener        the listener to notify upon completion_@param previousResult  if this not the initial attempt for invalidation, it contains the result of invalidating_api keys up to the point of the retry. This result is added to the result of the current attempt;private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,_                                   @Nullable InvalidateApiKeyResponse previousResult) {_        maybeStartApiKeyRemover()__        if (apiKeyIds.isEmpty()) {_            listener.onFailure(new ElasticsearchSecurityException("No api key ids provided for invalidation"))__        } else {_            BulkRequestBuilder bulkRequestBuilder = client.prepareBulk()__            for (String apiKeyId : apiKeyIds) {_                UpdateRequest request = client.prepareUpdate(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, apiKeyId)_                    .setDoc(Collections.singletonMap("api_key_invalidated", true))_                    .request()__                bulkRequestBuilder.add(request)__            }_            bulkRequestBuilder.setRefreshPolicy(RefreshPolicy.WAIT_UNTIL)__            securityIndex.prepareIndexIfNeededThenExecute(ex -> listener.onFailure(traceLog("prepare security index", ex)),_                () -> executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, bulkRequestBuilder.request(),_                    ActionListener.<BulkResponse>wrap(bulkResponse -> {_                        ArrayList<ElasticsearchException> failedRequestResponses = new ArrayList<>()__                        ArrayList<String> previouslyInvalidated = new ArrayList<>()__                        ArrayList<String> invalidated = new ArrayList<>()__                        if (null != previousResult) {_                            failedRequestResponses.addAll((previousResult.getErrors()))__                            previouslyInvalidated.addAll(previousResult.getPreviouslyInvalidatedApiKeys())__                            invalidated.addAll(previousResult.getInvalidatedApiKeys())__                        }_                        for (BulkItemResponse bulkItemResponse : bulkResponse.getItems()) {_                            if (bulkItemResponse.isFailed()) {_                                Throwable cause = bulkItemResponse.getFailure().getCause()__                                final String failedApiKeyId = bulkItemResponse.getFailure().getId()__                                traceLog("invalidate api key", failedApiKeyId, cause)__                                failedRequestResponses.add(new ElasticsearchException("Error invalidating api key", cause))__                            } else {_                                UpdateResponse updateResponse = bulkItemResponse.getResponse()__                                if (updateResponse.getResult() == DocWriteResponse.Result.UPDATED) {_                                    logger.debug("Invalidated api key for doc [{}]", updateResponse.getId())__                                    invalidated.add(updateResponse.getId())__                                } else if (updateResponse.getResult() == DocWriteResponse.Result.NOOP) {_                                    previouslyInvalidated.add(updateResponse.getId())__                                }_                            }_                        }_                        InvalidateApiKeyResponse result = new InvalidateApiKeyResponse(invalidated, previouslyInvalidated,_                            failedRequestResponses)__                        listener.onResponse(result)__                    }, e -> {_                        Throwable cause = ExceptionsHelper.unwrapCause(e)__                        traceLog("invalidate api keys", cause)__                        listener.onFailure(e)__                    }), client::bulk))__        }_    };performs,the,actual,invalidation,of,a,collection,of,api,keys,param,api,key,ids,the,api,keys,to,invalidate,param,listener,the,listener,to,notify,upon,completion,param,previous,result,if,this,not,the,initial,attempt,for,invalidation,it,contains,the,result,of,invalidating,api,keys,up,to,the,point,of,the,retry,this,result,is,added,to,the,result,of,the,current,attempt;private,void,index,invalidation,collection,string,api,key,ids,action,listener,invalidate,api,key,response,listener,nullable,invalidate,api,key,response,previous,result,maybe,start,api,key,remover,if,api,key,ids,is,empty,listener,on,failure,new,elasticsearch,security,exception,no,api,key,ids,provided,for,invalidation,else,bulk,request,builder,bulk,request,builder,client,prepare,bulk,for,string,api,key,id,api,key,ids,update,request,request,client,prepare,update,security,index,manager,type,api,key,id,set,doc,collections,singleton,map,true,request,bulk,request,builder,add,request,bulk,request,builder,set,refresh,policy,refresh,policy,security,index,prepare,index,if,needed,then,execute,ex,listener,on,failure,trace,log,prepare,security,index,ex,execute,async,with,origin,client,thread,pool,get,thread,context,bulk,request,builder,request,action,listener,bulk,response,wrap,bulk,response,array,list,elasticsearch,exception,failed,request,responses,new,array,list,array,list,string,previously,invalidated,new,array,list,array,list,string,invalidated,new,array,list,if,null,previous,result,failed,request,responses,add,all,previous,result,get,errors,previously,invalidated,add,all,previous,result,get,previously,invalidated,api,keys,invalidated,add,all,previous,result,get,invalidated,api,keys,for,bulk,item,response,bulk,item,response,bulk,response,get,items,if,bulk,item,response,is,failed,throwable,cause,bulk,item,response,get,failure,get,cause,final,string,failed,api,key,id,bulk,item,response,get,failure,get,id,trace,log,invalidate,api,key,failed,api,key,id,cause,failed,request,responses,add,new,elasticsearch,exception,error,invalidating,api,key,cause,else,update,response,update,response,bulk,item,response,get,response,if,update,response,get,result,doc,write,response,result,updated,logger,debug,invalidated,api,key,for,doc,update,response,get,id,invalidated,add,update,response,get,id,else,if,update,response,get,result,doc,write,response,result,noop,previously,invalidated,add,update,response,get,id,invalidate,api,key,response,result,new,invalidate,api,key,response,invalidated,previously,invalidated,failed,request,responses,listener,on,response,result,e,throwable,cause,exceptions,helper,unwrap,cause,e,trace,log,invalidate,api,keys,cause,listener,on,failure,e,client,bulk
ApiKeyService -> private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,                                    @Nullable InvalidateApiKeyResponse previousResult);1549429429;Performs the actual invalidation of a collection of api keys__@param apiKeyIds       the api keys to invalidate_@param listener        the listener to notify upon completion_@param previousResult  if this not the initial attempt for invalidation, it contains the result of invalidating_api keys up to the point of the retry. This result is added to the result of the current attempt;private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,_                                   @Nullable InvalidateApiKeyResponse previousResult) {_        maybeStartApiKeyRemover()__        if (apiKeyIds.isEmpty()) {_            listener.onFailure(new ElasticsearchSecurityException("No api key ids provided for invalidation"))__        } else {_            BulkRequestBuilder bulkRequestBuilder = client.prepareBulk()__            for (String apiKeyId : apiKeyIds) {_                UpdateRequest request = client.prepareUpdate(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, apiKeyId)_                    .setDoc(Collections.singletonMap("api_key_invalidated", true))_                    .request()__                bulkRequestBuilder.add(request)__            }_            bulkRequestBuilder.setRefreshPolicy(RefreshPolicy.WAIT_UNTIL)__            securityIndex.prepareIndexIfNeededThenExecute(ex -> listener.onFailure(traceLog("prepare security index", ex)),_                () -> executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, bulkRequestBuilder.request(),_                    ActionListener.<BulkResponse>wrap(bulkResponse -> {_                        ArrayList<ElasticsearchException> failedRequestResponses = new ArrayList<>()__                        ArrayList<String> previouslyInvalidated = new ArrayList<>()__                        ArrayList<String> invalidated = new ArrayList<>()__                        if (null != previousResult) {_                            failedRequestResponses.addAll((previousResult.getErrors()))__                            previouslyInvalidated.addAll(previousResult.getPreviouslyInvalidatedApiKeys())__                            invalidated.addAll(previousResult.getInvalidatedApiKeys())__                        }_                        for (BulkItemResponse bulkItemResponse : bulkResponse.getItems()) {_                            if (bulkItemResponse.isFailed()) {_                                Throwable cause = bulkItemResponse.getFailure().getCause()__                                final String failedApiKeyId = bulkItemResponse.getFailure().getId()__                                traceLog("invalidate api key", failedApiKeyId, cause)__                                failedRequestResponses.add(new ElasticsearchException("Error invalidating api key", cause))__                            } else {_                                UpdateResponse updateResponse = bulkItemResponse.getResponse()__                                if (updateResponse.getResult() == DocWriteResponse.Result.UPDATED) {_                                    logger.debug("Invalidated api key for doc [{}]", updateResponse.getId())__                                    invalidated.add(updateResponse.getId())__                                } else if (updateResponse.getResult() == DocWriteResponse.Result.NOOP) {_                                    previouslyInvalidated.add(updateResponse.getId())__                                }_                            }_                        }_                        InvalidateApiKeyResponse result = new InvalidateApiKeyResponse(invalidated, previouslyInvalidated,_                            failedRequestResponses)__                        listener.onResponse(result)__                    }, e -> {_                        Throwable cause = ExceptionsHelper.unwrapCause(e)__                        traceLog("invalidate api keys", cause)__                        listener.onFailure(e)__                    }), client::bulk))__        }_    };performs,the,actual,invalidation,of,a,collection,of,api,keys,param,api,key,ids,the,api,keys,to,invalidate,param,listener,the,listener,to,notify,upon,completion,param,previous,result,if,this,not,the,initial,attempt,for,invalidation,it,contains,the,result,of,invalidating,api,keys,up,to,the,point,of,the,retry,this,result,is,added,to,the,result,of,the,current,attempt;private,void,index,invalidation,collection,string,api,key,ids,action,listener,invalidate,api,key,response,listener,nullable,invalidate,api,key,response,previous,result,maybe,start,api,key,remover,if,api,key,ids,is,empty,listener,on,failure,new,elasticsearch,security,exception,no,api,key,ids,provided,for,invalidation,else,bulk,request,builder,bulk,request,builder,client,prepare,bulk,for,string,api,key,id,api,key,ids,update,request,request,client,prepare,update,security,index,manager,type,api,key,id,set,doc,collections,singleton,map,true,request,bulk,request,builder,add,request,bulk,request,builder,set,refresh,policy,refresh,policy,security,index,prepare,index,if,needed,then,execute,ex,listener,on,failure,trace,log,prepare,security,index,ex,execute,async,with,origin,client,thread,pool,get,thread,context,bulk,request,builder,request,action,listener,bulk,response,wrap,bulk,response,array,list,elasticsearch,exception,failed,request,responses,new,array,list,array,list,string,previously,invalidated,new,array,list,array,list,string,invalidated,new,array,list,if,null,previous,result,failed,request,responses,add,all,previous,result,get,errors,previously,invalidated,add,all,previous,result,get,previously,invalidated,api,keys,invalidated,add,all,previous,result,get,invalidated,api,keys,for,bulk,item,response,bulk,item,response,bulk,response,get,items,if,bulk,item,response,is,failed,throwable,cause,bulk,item,response,get,failure,get,cause,final,string,failed,api,key,id,bulk,item,response,get,failure,get,id,trace,log,invalidate,api,key,failed,api,key,id,cause,failed,request,responses,add,new,elasticsearch,exception,error,invalidating,api,key,cause,else,update,response,update,response,bulk,item,response,get,response,if,update,response,get,result,doc,write,response,result,updated,logger,debug,invalidated,api,key,for,doc,update,response,get,id,invalidated,add,update,response,get,id,else,if,update,response,get,result,doc,write,response,result,noop,previously,invalidated,add,update,response,get,id,invalidate,api,key,response,result,new,invalidate,api,key,response,invalidated,previously,invalidated,failed,request,responses,listener,on,response,result,e,throwable,cause,exceptions,helper,unwrap,cause,e,trace,log,invalidate,api,keys,cause,listener,on,failure,e,client,bulk
ApiKeyService -> private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,                                    @Nullable InvalidateApiKeyResponse previousResult);1549447102;Performs the actual invalidation of a collection of api keys__@param apiKeyIds       the api keys to invalidate_@param listener        the listener to notify upon completion_@param previousResult  if this not the initial attempt for invalidation, it contains the result of invalidating_api keys up to the point of the retry. This result is added to the result of the current attempt;private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,_                                   @Nullable InvalidateApiKeyResponse previousResult) {_        maybeStartApiKeyRemover()__        if (apiKeyIds.isEmpty()) {_            listener.onFailure(new ElasticsearchSecurityException("No api key ids provided for invalidation"))__        } else {_            BulkRequestBuilder bulkRequestBuilder = client.prepareBulk()__            for (String apiKeyId : apiKeyIds) {_                UpdateRequest request = client.prepareUpdate(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, apiKeyId)_                    .setDoc(Collections.singletonMap("api_key_invalidated", true))_                    .request()__                bulkRequestBuilder.add(request)__            }_            bulkRequestBuilder.setRefreshPolicy(RefreshPolicy.WAIT_UNTIL)__            securityIndex.prepareIndexIfNeededThenExecute(ex -> listener.onFailure(traceLog("prepare security index", ex)),_                () -> executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, bulkRequestBuilder.request(),_                    ActionListener.<BulkResponse>wrap(bulkResponse -> {_                        ArrayList<ElasticsearchException> failedRequestResponses = new ArrayList<>()__                        ArrayList<String> previouslyInvalidated = new ArrayList<>()__                        ArrayList<String> invalidated = new ArrayList<>()__                        if (null != previousResult) {_                            failedRequestResponses.addAll((previousResult.getErrors()))__                            previouslyInvalidated.addAll(previousResult.getPreviouslyInvalidatedApiKeys())__                            invalidated.addAll(previousResult.getInvalidatedApiKeys())__                        }_                        for (BulkItemResponse bulkItemResponse : bulkResponse.getItems()) {_                            if (bulkItemResponse.isFailed()) {_                                Throwable cause = bulkItemResponse.getFailure().getCause()__                                final String failedApiKeyId = bulkItemResponse.getFailure().getId()__                                traceLog("invalidate api key", failedApiKeyId, cause)__                                failedRequestResponses.add(new ElasticsearchException("Error invalidating api key", cause))__                            } else {_                                UpdateResponse updateResponse = bulkItemResponse.getResponse()__                                if (updateResponse.getResult() == DocWriteResponse.Result.UPDATED) {_                                    logger.debug("Invalidated api key for doc [{}]", updateResponse.getId())__                                    invalidated.add(updateResponse.getId())__                                } else if (updateResponse.getResult() == DocWriteResponse.Result.NOOP) {_                                    previouslyInvalidated.add(updateResponse.getId())__                                }_                            }_                        }_                        InvalidateApiKeyResponse result = new InvalidateApiKeyResponse(invalidated, previouslyInvalidated,_                            failedRequestResponses)__                        listener.onResponse(result)__                    }, e -> {_                        Throwable cause = ExceptionsHelper.unwrapCause(e)__                        traceLog("invalidate api keys", cause)__                        listener.onFailure(e)__                    }), client::bulk))__        }_    };performs,the,actual,invalidation,of,a,collection,of,api,keys,param,api,key,ids,the,api,keys,to,invalidate,param,listener,the,listener,to,notify,upon,completion,param,previous,result,if,this,not,the,initial,attempt,for,invalidation,it,contains,the,result,of,invalidating,api,keys,up,to,the,point,of,the,retry,this,result,is,added,to,the,result,of,the,current,attempt;private,void,index,invalidation,collection,string,api,key,ids,action,listener,invalidate,api,key,response,listener,nullable,invalidate,api,key,response,previous,result,maybe,start,api,key,remover,if,api,key,ids,is,empty,listener,on,failure,new,elasticsearch,security,exception,no,api,key,ids,provided,for,invalidation,else,bulk,request,builder,bulk,request,builder,client,prepare,bulk,for,string,api,key,id,api,key,ids,update,request,request,client,prepare,update,security,index,manager,type,api,key,id,set,doc,collections,singleton,map,true,request,bulk,request,builder,add,request,bulk,request,builder,set,refresh,policy,refresh,policy,security,index,prepare,index,if,needed,then,execute,ex,listener,on,failure,trace,log,prepare,security,index,ex,execute,async,with,origin,client,thread,pool,get,thread,context,bulk,request,builder,request,action,listener,bulk,response,wrap,bulk,response,array,list,elasticsearch,exception,failed,request,responses,new,array,list,array,list,string,previously,invalidated,new,array,list,array,list,string,invalidated,new,array,list,if,null,previous,result,failed,request,responses,add,all,previous,result,get,errors,previously,invalidated,add,all,previous,result,get,previously,invalidated,api,keys,invalidated,add,all,previous,result,get,invalidated,api,keys,for,bulk,item,response,bulk,item,response,bulk,response,get,items,if,bulk,item,response,is,failed,throwable,cause,bulk,item,response,get,failure,get,cause,final,string,failed,api,key,id,bulk,item,response,get,failure,get,id,trace,log,invalidate,api,key,failed,api,key,id,cause,failed,request,responses,add,new,elasticsearch,exception,error,invalidating,api,key,cause,else,update,response,update,response,bulk,item,response,get,response,if,update,response,get,result,doc,write,response,result,updated,logger,debug,invalidated,api,key,for,doc,update,response,get,id,invalidated,add,update,response,get,id,else,if,update,response,get,result,doc,write,response,result,noop,previously,invalidated,add,update,response,get,id,invalidate,api,key,response,result,new,invalidate,api,key,response,invalidated,previously,invalidated,failed,request,responses,listener,on,response,result,e,throwable,cause,exceptions,helper,unwrap,cause,e,trace,log,invalidate,api,keys,cause,listener,on,failure,e,client,bulk
ApiKeyService -> private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,                                    @Nullable InvalidateApiKeyResponse previousResult);1550209662;Performs the actual invalidation of a collection of api keys__@param apiKeyIds       the api keys to invalidate_@param listener        the listener to notify upon completion_@param previousResult  if this not the initial attempt for invalidation, it contains the result of invalidating_api keys up to the point of the retry. This result is added to the result of the current attempt;private void indexInvalidation(Collection<String> apiKeyIds, ActionListener<InvalidateApiKeyResponse> listener,_                                   @Nullable InvalidateApiKeyResponse previousResult) {_        maybeStartApiKeyRemover()__        if (apiKeyIds.isEmpty()) {_            listener.onFailure(new ElasticsearchSecurityException("No api key ids provided for invalidation"))__        } else {_            BulkRequestBuilder bulkRequestBuilder = client.prepareBulk()__            for (String apiKeyId : apiKeyIds) {_                UpdateRequest request = client.prepareUpdate(SecurityIndexManager.SECURITY_INDEX_NAME, TYPE, apiKeyId)_                    .setDoc(Collections.singletonMap("api_key_invalidated", true))_                    .request()__                bulkRequestBuilder.add(request)__            }_            bulkRequestBuilder.setRefreshPolicy(RefreshPolicy.WAIT_UNTIL)__            securityIndex.prepareIndexIfNeededThenExecute(ex -> listener.onFailure(traceLog("prepare security index", ex)),_                () -> executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, bulkRequestBuilder.request(),_                    ActionListener.<BulkResponse>wrap(bulkResponse -> {_                        ArrayList<ElasticsearchException> failedRequestResponses = new ArrayList<>()__                        ArrayList<String> previouslyInvalidated = new ArrayList<>()__                        ArrayList<String> invalidated = new ArrayList<>()__                        if (null != previousResult) {_                            failedRequestResponses.addAll((previousResult.getErrors()))__                            previouslyInvalidated.addAll(previousResult.getPreviouslyInvalidatedApiKeys())__                            invalidated.addAll(previousResult.getInvalidatedApiKeys())__                        }_                        for (BulkItemResponse bulkItemResponse : bulkResponse.getItems()) {_                            if (bulkItemResponse.isFailed()) {_                                Throwable cause = bulkItemResponse.getFailure().getCause()__                                final String failedApiKeyId = bulkItemResponse.getFailure().getId()__                                traceLog("invalidate api key", failedApiKeyId, cause)__                                failedRequestResponses.add(new ElasticsearchException("Error invalidating api key", cause))__                            } else {_                                UpdateResponse updateResponse = bulkItemResponse.getResponse()__                                if (updateResponse.getResult() == DocWriteResponse.Result.UPDATED) {_                                    logger.debug("Invalidated api key for doc [{}]", updateResponse.getId())__                                    invalidated.add(updateResponse.getId())__                                } else if (updateResponse.getResult() == DocWriteResponse.Result.NOOP) {_                                    previouslyInvalidated.add(updateResponse.getId())__                                }_                            }_                        }_                        InvalidateApiKeyResponse result = new InvalidateApiKeyResponse(invalidated, previouslyInvalidated,_                            failedRequestResponses)__                        listener.onResponse(result)__                    }, e -> {_                        Throwable cause = ExceptionsHelper.unwrapCause(e)__                        traceLog("invalidate api keys", cause)__                        listener.onFailure(e)__                    }), client::bulk))__        }_    };performs,the,actual,invalidation,of,a,collection,of,api,keys,param,api,key,ids,the,api,keys,to,invalidate,param,listener,the,listener,to,notify,upon,completion,param,previous,result,if,this,not,the,initial,attempt,for,invalidation,it,contains,the,result,of,invalidating,api,keys,up,to,the,point,of,the,retry,this,result,is,added,to,the,result,of,the,current,attempt;private,void,index,invalidation,collection,string,api,key,ids,action,listener,invalidate,api,key,response,listener,nullable,invalidate,api,key,response,previous,result,maybe,start,api,key,remover,if,api,key,ids,is,empty,listener,on,failure,new,elasticsearch,security,exception,no,api,key,ids,provided,for,invalidation,else,bulk,request,builder,bulk,request,builder,client,prepare,bulk,for,string,api,key,id,api,key,ids,update,request,request,client,prepare,update,security,index,manager,type,api,key,id,set,doc,collections,singleton,map,true,request,bulk,request,builder,add,request,bulk,request,builder,set,refresh,policy,refresh,policy,security,index,prepare,index,if,needed,then,execute,ex,listener,on,failure,trace,log,prepare,security,index,ex,execute,async,with,origin,client,thread,pool,get,thread,context,bulk,request,builder,request,action,listener,bulk,response,wrap,bulk,response,array,list,elasticsearch,exception,failed,request,responses,new,array,list,array,list,string,previously,invalidated,new,array,list,array,list,string,invalidated,new,array,list,if,null,previous,result,failed,request,responses,add,all,previous,result,get,errors,previously,invalidated,add,all,previous,result,get,previously,invalidated,api,keys,invalidated,add,all,previous,result,get,invalidated,api,keys,for,bulk,item,response,bulk,item,response,bulk,response,get,items,if,bulk,item,response,is,failed,throwable,cause,bulk,item,response,get,failure,get,cause,final,string,failed,api,key,id,bulk,item,response,get,failure,get,id,trace,log,invalidate,api,key,failed,api,key,id,cause,failed,request,responses,add,new,elasticsearch,exception,error,invalidating,api,key,cause,else,update,response,update,response,bulk,item,response,get,response,if,update,response,get,result,doc,write,response,result,updated,logger,debug,invalidated,api,key,for,doc,update,response,get,id,invalidated,add,update,response,get,id,else,if,update,response,get,result,doc,write,response,result,noop,previously,invalidated,add,update,response,get,id,invalidate,api,key,response,result,new,invalidate,api,key,response,invalidated,previously,invalidated,failed,request,responses,listener,on,response,result,e,throwable,cause,exceptions,helper,unwrap,cause,e,trace,log,invalidate,api,keys,cause,listener,on,failure,e,client,bulk
ApiKeyService -> public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener);1549336917;Invalidate API key for given API key name_@param apiKeyName API key name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key name [{}]", apiKeyName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,name,string,api,key,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,name,api,key,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener);1549399169;Invalidate API key for given API key name_@param apiKeyName API key name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key name [{}]", apiKeyName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,name,string,api,key,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,name,api,key,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener);1549415786;Invalidate API key for given API key name_@param apiKeyName API key name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key name [{}]", apiKeyName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,name,string,api,key,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,name,api,key,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener);1549429429;Invalidate API key for given API key name_@param apiKeyName API key name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key name [{}]", apiKeyName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,name,string,api,key,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,name,api,key,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener);1549447102;Invalidate API key for given API key name_@param apiKeyName API key name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key name [{}]", apiKeyName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,name,string,api,key,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,name,api,key,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener);1550209662;Invalidate API key for given API key name_@param apiKeyName API key name_@param invalidateListener listener for {@link InvalidateApiKeyResponse};public void invalidateApiKeyForApiKeyName(String apiKeyName, ActionListener<InvalidateApiKeyResponse> invalidateListener) {_        ensureEnabled()__        if (Strings.hasText(apiKeyName) == false) {_            logger.trace("No api key name provided")__            invalidateListener.onFailure(new IllegalArgumentException("api key name must be provided"))__        } else {_            findApiKeyForApiKeyName(apiKeyName, true, false, ActionListener.wrap(apiKeyIds -> {_                if (apiKeyIds.isEmpty()) {_                    logger.warn("No api key to invalidate for api key name [{}]", apiKeyName)__                    invalidateListener.onResponse(InvalidateApiKeyResponse.emptyResponse())__                } else {_                    invalidateAllApiKeys(apiKeyIds.stream().map(apiKey -> apiKey.getId()).collect(Collectors.toSet()), invalidateListener)__                }_            }, invalidateListener::onFailure))__        }_    };invalidate,api,key,for,given,api,key,name,param,api,key,name,api,key,name,param,invalidate,listener,listener,for,link,invalidate,api,key,response;public,void,invalidate,api,key,for,api,key,name,string,api,key,name,action,listener,invalidate,api,key,response,invalidate,listener,ensure,enabled,if,strings,has,text,api,key,name,false,logger,trace,no,api,key,name,provided,invalidate,listener,on,failure,new,illegal,argument,exception,api,key,name,must,be,provided,else,find,api,key,for,api,key,name,api,key,name,true,false,action,listener,wrap,api,key,ids,if,api,key,ids,is,empty,logger,warn,no,api,key,to,invalidate,for,api,key,name,api,key,name,invalidate,listener,on,response,invalidate,api,key,response,empty,response,else,invalidate,all,api,keys,api,key,ids,stream,map,api,key,api,key,get,id,collect,collectors,to,set,invalidate,listener,invalidate,listener,on,failure
ApiKeyService -> public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKeyRoleDescriptors> listener);1549399169;The current request has been authenticated by an API key and this method enables the_retrieval of role descriptors that are associated with the api key;public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKeyRoleDescriptors> listener) {_        if (authentication.getAuthenticationType() != Authentication.AuthenticationType.API_KEY) {_            throw new IllegalStateException("authentication type must be api key but is " + authentication.getAuthenticationType())__        }__        final Map<String, Object> metadata = authentication.getMetadata()__        final String apiKeyId = (String) metadata.get(API_KEY_ID_KEY)___        final Map<String, Object> roleDescriptors = (Map<String, Object>) metadata.get(API_KEY_ROLE_DESCRIPTORS_KEY)__        final Map<String, Object> authnRoleDescriptors = (Map<String, Object>) metadata.get(API_KEY_LIMITED_ROLE_DESCRIPTORS_KEY)___        if (roleDescriptors == null && authnRoleDescriptors == null) {_            listener.onFailure(new ElasticsearchSecurityException("no role descriptors found for API key"))__        } else if (roleDescriptors == null || roleDescriptors.isEmpty()) {_            final List<RoleDescriptor> authnRoleDescriptorsList = parseRoleDescriptors(apiKeyId, authnRoleDescriptors)__            listener.onResponse(new ApiKeyRoleDescriptors(apiKeyId, authnRoleDescriptorsList, null))__        } else {_            final List<RoleDescriptor> roleDescriptorList = parseRoleDescriptors(apiKeyId, roleDescriptors)__            final List<RoleDescriptor> authnRoleDescriptorsList = parseRoleDescriptors(apiKeyId, authnRoleDescriptors)__            listener.onResponse(new ApiKeyRoleDescriptors(apiKeyId, roleDescriptorList, authnRoleDescriptorsList))__        }_    };the,current,request,has,been,authenticated,by,an,api,key,and,this,method,enables,the,retrieval,of,role,descriptors,that,are,associated,with,the,api,key;public,void,get,role,for,api,key,authentication,authentication,action,listener,api,key,role,descriptors,listener,if,authentication,get,authentication,type,authentication,authentication,type,throw,new,illegal,state,exception,authentication,type,must,be,api,key,but,is,authentication,get,authentication,type,final,map,string,object,metadata,authentication,get,metadata,final,string,api,key,id,string,metadata,get,final,map,string,object,role,descriptors,map,string,object,metadata,get,final,map,string,object,authn,role,descriptors,map,string,object,metadata,get,if,role,descriptors,null,authn,role,descriptors,null,listener,on,failure,new,elasticsearch,security,exception,no,role,descriptors,found,for,api,key,else,if,role,descriptors,null,role,descriptors,is,empty,final,list,role,descriptor,authn,role,descriptors,list,parse,role,descriptors,api,key,id,authn,role,descriptors,listener,on,response,new,api,key,role,descriptors,api,key,id,authn,role,descriptors,list,null,else,final,list,role,descriptor,role,descriptor,list,parse,role,descriptors,api,key,id,role,descriptors,final,list,role,descriptor,authn,role,descriptors,list,parse,role,descriptors,api,key,id,authn,role,descriptors,listener,on,response,new,api,key,role,descriptors,api,key,id,role,descriptor,list,authn,role,descriptors,list
ApiKeyService -> public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKeyRoleDescriptors> listener);1549415786;The current request has been authenticated by an API key and this method enables the_retrieval of role descriptors that are associated with the api key;public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKeyRoleDescriptors> listener) {_        if (authentication.getAuthenticationType() != Authentication.AuthenticationType.API_KEY) {_            throw new IllegalStateException("authentication type must be api key but is " + authentication.getAuthenticationType())__        }__        final Map<String, Object> metadata = authentication.getMetadata()__        final String apiKeyId = (String) metadata.get(API_KEY_ID_KEY)___        final Map<String, Object> roleDescriptors = (Map<String, Object>) metadata.get(API_KEY_ROLE_DESCRIPTORS_KEY)__        final Map<String, Object> authnRoleDescriptors = (Map<String, Object>) metadata.get(API_KEY_LIMITED_ROLE_DESCRIPTORS_KEY)___        if (roleDescriptors == null && authnRoleDescriptors == null) {_            listener.onFailure(new ElasticsearchSecurityException("no role descriptors found for API key"))__        } else if (roleDescriptors == null || roleDescriptors.isEmpty()) {_            final List<RoleDescriptor> authnRoleDescriptorsList = parseRoleDescriptors(apiKeyId, authnRoleDescriptors)__            listener.onResponse(new ApiKeyRoleDescriptors(apiKeyId, authnRoleDescriptorsList, null))__        } else {_            final List<RoleDescriptor> roleDescriptorList = parseRoleDescriptors(apiKeyId, roleDescriptors)__            final List<RoleDescriptor> authnRoleDescriptorsList = parseRoleDescriptors(apiKeyId, authnRoleDescriptors)__            listener.onResponse(new ApiKeyRoleDescriptors(apiKeyId, roleDescriptorList, authnRoleDescriptorsList))__        }_    };the,current,request,has,been,authenticated,by,an,api,key,and,this,method,enables,the,retrieval,of,role,descriptors,that,are,associated,with,the,api,key;public,void,get,role,for,api,key,authentication,authentication,action,listener,api,key,role,descriptors,listener,if,authentication,get,authentication,type,authentication,authentication,type,throw,new,illegal,state,exception,authentication,type,must,be,api,key,but,is,authentication,get,authentication,type,final,map,string,object,metadata,authentication,get,metadata,final,string,api,key,id,string,metadata,get,final,map,string,object,role,descriptors,map,string,object,metadata,get,final,map,string,object,authn,role,descriptors,map,string,object,metadata,get,if,role,descriptors,null,authn,role,descriptors,null,listener,on,failure,new,elasticsearch,security,exception,no,role,descriptors,found,for,api,key,else,if,role,descriptors,null,role,descriptors,is,empty,final,list,role,descriptor,authn,role,descriptors,list,parse,role,descriptors,api,key,id,authn,role,descriptors,listener,on,response,new,api,key,role,descriptors,api,key,id,authn,role,descriptors,list,null,else,final,list,role,descriptor,role,descriptor,list,parse,role,descriptors,api,key,id,role,descriptors,final,list,role,descriptor,authn,role,descriptors,list,parse,role,descriptors,api,key,id,authn,role,descriptors,listener,on,response,new,api,key,role,descriptors,api,key,id,role,descriptor,list,authn,role,descriptors,list
ApiKeyService -> public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKeyRoleDescriptors> listener);1549429429;The current request has been authenticated by an API key and this method enables the_retrieval of role descriptors that are associated with the api key;public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKeyRoleDescriptors> listener) {_        if (authentication.getAuthenticationType() != Authentication.AuthenticationType.API_KEY) {_            throw new IllegalStateException("authentication type must be api key but is " + authentication.getAuthenticationType())__        }__        final Map<String, Object> metadata = authentication.getMetadata()__        final String apiKeyId = (String) metadata.get(API_KEY_ID_KEY)___        final Map<String, Object> roleDescriptors = (Map<String, Object>) metadata.get(API_KEY_ROLE_DESCRIPTORS_KEY)__        final Map<String, Object> authnRoleDescriptors = (Map<String, Object>) metadata.get(API_KEY_LIMITED_ROLE_DESCRIPTORS_KEY)___        if (roleDescriptors == null && authnRoleDescriptors == null) {_            listener.onFailure(new ElasticsearchSecurityException("no role descriptors found for API key"))__        } else if (roleDescriptors == null || roleDescriptors.isEmpty()) {_            final List<RoleDescriptor> authnRoleDescriptorsList = parseRoleDescriptors(apiKeyId, authnRoleDescriptors)__            listener.onResponse(new ApiKeyRoleDescriptors(apiKeyId, authnRoleDescriptorsList, null))__        } else {_            final List<RoleDescriptor> roleDescriptorList = parseRoleDescriptors(apiKeyId, roleDescriptors)__            final List<RoleDescriptor> authnRoleDescriptorsList = parseRoleDescriptors(apiKeyId, authnRoleDescriptors)__            listener.onResponse(new ApiKeyRoleDescriptors(apiKeyId, roleDescriptorList, authnRoleDescriptorsList))__        }_    };the,current,request,has,been,authenticated,by,an,api,key,and,this,method,enables,the,retrieval,of,role,descriptors,that,are,associated,with,the,api,key;public,void,get,role,for,api,key,authentication,authentication,action,listener,api,key,role,descriptors,listener,if,authentication,get,authentication,type,authentication,authentication,type,throw,new,illegal,state,exception,authentication,type,must,be,api,key,but,is,authentication,get,authentication,type,final,map,string,object,metadata,authentication,get,metadata,final,string,api,key,id,string,metadata,get,final,map,string,object,role,descriptors,map,string,object,metadata,get,final,map,string,object,authn,role,descriptors,map,string,object,metadata,get,if,role,descriptors,null,authn,role,descriptors,null,listener,on,failure,new,elasticsearch,security,exception,no,role,descriptors,found,for,api,key,else,if,role,descriptors,null,role,descriptors,is,empty,final,list,role,descriptor,authn,role,descriptors,list,parse,role,descriptors,api,key,id,authn,role,descriptors,listener,on,response,new,api,key,role,descriptors,api,key,id,authn,role,descriptors,list,null,else,final,list,role,descriptor,role,descriptor,list,parse,role,descriptors,api,key,id,role,descriptors,final,list,role,descriptor,authn,role,descriptors,list,parse,role,descriptors,api,key,id,authn,role,descriptors,listener,on,response,new,api,key,role,descriptors,api,key,id,role,descriptor,list,authn,role,descriptors,list
ApiKeyService -> public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKeyRoleDescriptors> listener);1549447102;The current request has been authenticated by an API key and this method enables the_retrieval of role descriptors that are associated with the api key;public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKeyRoleDescriptors> listener) {_        if (authentication.getAuthenticationType() != Authentication.AuthenticationType.API_KEY) {_            throw new IllegalStateException("authentication type must be api key but is " + authentication.getAuthenticationType())__        }__        final Map<String, Object> metadata = authentication.getMetadata()__        final String apiKeyId = (String) metadata.get(API_KEY_ID_KEY)___        final Map<String, Object> roleDescriptors = (Map<String, Object>) metadata.get(API_KEY_ROLE_DESCRIPTORS_KEY)__        final Map<String, Object> authnRoleDescriptors = (Map<String, Object>) metadata.get(API_KEY_LIMITED_ROLE_DESCRIPTORS_KEY)___        if (roleDescriptors == null && authnRoleDescriptors == null) {_            listener.onFailure(new ElasticsearchSecurityException("no role descriptors found for API key"))__        } else if (roleDescriptors == null || roleDescriptors.isEmpty()) {_            final List<RoleDescriptor> authnRoleDescriptorsList = parseRoleDescriptors(apiKeyId, authnRoleDescriptors)__            listener.onResponse(new ApiKeyRoleDescriptors(apiKeyId, authnRoleDescriptorsList, null))__        } else {_            final List<RoleDescriptor> roleDescriptorList = parseRoleDescriptors(apiKeyId, roleDescriptors)__            final List<RoleDescriptor> authnRoleDescriptorsList = parseRoleDescriptors(apiKeyId, authnRoleDescriptors)__            listener.onResponse(new ApiKeyRoleDescriptors(apiKeyId, roleDescriptorList, authnRoleDescriptorsList))__        }_    };the,current,request,has,been,authenticated,by,an,api,key,and,this,method,enables,the,retrieval,of,role,descriptors,that,are,associated,with,the,api,key;public,void,get,role,for,api,key,authentication,authentication,action,listener,api,key,role,descriptors,listener,if,authentication,get,authentication,type,authentication,authentication,type,throw,new,illegal,state,exception,authentication,type,must,be,api,key,but,is,authentication,get,authentication,type,final,map,string,object,metadata,authentication,get,metadata,final,string,api,key,id,string,metadata,get,final,map,string,object,role,descriptors,map,string,object,metadata,get,final,map,string,object,authn,role,descriptors,map,string,object,metadata,get,if,role,descriptors,null,authn,role,descriptors,null,listener,on,failure,new,elasticsearch,security,exception,no,role,descriptors,found,for,api,key,else,if,role,descriptors,null,role,descriptors,is,empty,final,list,role,descriptor,authn,role,descriptors,list,parse,role,descriptors,api,key,id,authn,role,descriptors,listener,on,response,new,api,key,role,descriptors,api,key,id,authn,role,descriptors,list,null,else,final,list,role,descriptor,role,descriptor,list,parse,role,descriptors,api,key,id,role,descriptors,final,list,role,descriptor,authn,role,descriptors,list,parse,role,descriptors,api,key,id,authn,role,descriptors,listener,on,response,new,api,key,role,descriptors,api,key,id,role,descriptor,list,authn,role,descriptors,list
ApiKeyService -> public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKeyRoleDescriptors> listener);1550209662;The current request has been authenticated by an API key and this method enables the_retrieval of role descriptors that are associated with the api key;public void getRoleForApiKey(Authentication authentication, ActionListener<ApiKeyRoleDescriptors> listener) {_        if (authentication.getAuthenticationType() != Authentication.AuthenticationType.API_KEY) {_            throw new IllegalStateException("authentication type must be api key but is " + authentication.getAuthenticationType())__        }__        final Map<String, Object> metadata = authentication.getMetadata()__        final String apiKeyId = (String) metadata.get(API_KEY_ID_KEY)___        final Map<String, Object> roleDescriptors = (Map<String, Object>) metadata.get(API_KEY_ROLE_DESCRIPTORS_KEY)__        final Map<String, Object> authnRoleDescriptors = (Map<String, Object>) metadata.get(API_KEY_LIMITED_ROLE_DESCRIPTORS_KEY)___        if (roleDescriptors == null && authnRoleDescriptors == null) {_            listener.onFailure(new ElasticsearchSecurityException("no role descriptors found for API key"))__        } else if (roleDescriptors == null || roleDescriptors.isEmpty()) {_            final List<RoleDescriptor> authnRoleDescriptorsList = parseRoleDescriptors(apiKeyId, authnRoleDescriptors)__            listener.onResponse(new ApiKeyRoleDescriptors(apiKeyId, authnRoleDescriptorsList, null))__        } else {_            final List<RoleDescriptor> roleDescriptorList = parseRoleDescriptors(apiKeyId, roleDescriptors)__            final List<RoleDescriptor> authnRoleDescriptorsList = parseRoleDescriptors(apiKeyId, authnRoleDescriptors)__            listener.onResponse(new ApiKeyRoleDescriptors(apiKeyId, roleDescriptorList, authnRoleDescriptorsList))__        }_    };the,current,request,has,been,authenticated,by,an,api,key,and,this,method,enables,the,retrieval,of,role,descriptors,that,are,associated,with,the,api,key;public,void,get,role,for,api,key,authentication,authentication,action,listener,api,key,role,descriptors,listener,if,authentication,get,authentication,type,authentication,authentication,type,throw,new,illegal,state,exception,authentication,type,must,be,api,key,but,is,authentication,get,authentication,type,final,map,string,object,metadata,authentication,get,metadata,final,string,api,key,id,string,metadata,get,final,map,string,object,role,descriptors,map,string,object,metadata,get,final,map,string,object,authn,role,descriptors,map,string,object,metadata,get,if,role,descriptors,null,authn,role,descriptors,null,listener,on,failure,new,elasticsearch,security,exception,no,role,descriptors,found,for,api,key,else,if,role,descriptors,null,role,descriptors,is,empty,final,list,role,descriptor,authn,role,descriptors,list,parse,role,descriptors,api,key,id,authn,role,descriptors,listener,on,response,new,api,key,role,descriptors,api,key,id,authn,role,descriptors,list,null,else,final,list,role,descriptor,role,descriptor,list,parse,role,descriptors,api,key,id,role,descriptors,final,list,role,descriptor,authn,role,descriptors,list,parse,role,descriptors,api,key,id,authn,role,descriptors,listener,on,response,new,api,key,role,descriptors,api,key,id,role,descriptor,list,authn,role,descriptors,list
