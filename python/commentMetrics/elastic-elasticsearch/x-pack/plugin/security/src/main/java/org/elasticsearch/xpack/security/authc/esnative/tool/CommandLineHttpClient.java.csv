# id;timestamp;commentText;codeText;commentWords;codeWords
CommandLineHttpClient -> @SuppressForbidden(reason = "We call connect in doPrivileged and provide SocketPermission")     public HttpResponse execute(String method, URL url, String user, SecureString password,             CheckedSupplier<String, Exception> requestBodySupplier,             CheckedFunction<InputStream, HttpResponseBuilder, Exception> responseHandler) throws Exception;1524684173;General purpose HTTP(S) call with JSON Content-Type and Authorization Header._SSL settings are read from the settings file, if any.__@param user_user in the authorization header._@param password_password in the authorization header._@param requestBodySupplier_supplier for the JSON string body of the request._@param responseHandler_handler of the response Input Stream._@return HTTP protocol response code.;@SuppressForbidden(reason = "We call connect in doPrivileged and provide SocketPermission")_    public HttpResponse execute(String method, URL url, String user, SecureString password,_            CheckedSupplier<String, Exception> requestBodySupplier,_            CheckedFunction<InputStream, HttpResponseBuilder, Exception> responseHandler) throws Exception {_        final HttpURLConnection conn__        _        if ("https".equalsIgnoreCase(url.getProtocol())) {_            final SSLService sslService = new SSLService(settings, env)__            final HttpsURLConnection httpsConn = (HttpsURLConnection) url.openConnection()__            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {_                final Settings sslSettings = SSLService.getHttpTransportSSLSettings(settings)__                _                httpsConn.setSSLSocketFactory(sslService.sslSocketFactory(sslSettings))__                final boolean isHostnameVerificationEnabled =_                        sslService.getVerificationMode(sslSettings, Settings.EMPTY).isHostnameVerificationEnabled()__                if (isHostnameVerificationEnabled == false) {_                    httpsConn.setHostnameVerifier((hostname, session) -> true)__                }_                return null__            })__            conn = httpsConn__        } else {_            conn = (HttpURLConnection) url.openConnection()__        }_        conn.setRequestMethod(method)__        conn.setReadTimeout(READ_TIMEOUT)__        _        String token = UsernamePasswordToken.basicAuthHeaderValue(user, password)__        conn.setRequestProperty("Authorization", token)__        conn.setRequestProperty("Content-Type", XContentType.JSON.mediaType())__        String bodyString = requestBodySupplier.get()__        conn.setDoOutput(bodyString != null)_ _        SocketAccess.doPrivileged(conn::connect)__        if (bodyString != null) {_            try (OutputStream out = conn.getOutputStream()) {_                out.write(bodyString.getBytes(StandardCharsets.UTF_8))__            } catch (Exception e) {_                Releasables.closeWhileHandlingException(conn::disconnect)__                throw e__            }_        }_        _        final int responseCode = conn.getResponseCode()__        HttpResponseBuilder responseBuilder = null__        try (InputStream inputStream = conn.getInputStream()) {_            responseBuilder = responseHandler.apply(inputStream)__        } catch (IOException e) {_            _            try (InputStream errorStream = conn.getErrorStream()) {_                responseBuilder = responseHandler.apply(errorStream)__            }_        } finally {_            Releasables.closeWhileHandlingException(conn::disconnect)__        }_        responseBuilder.withHttpStatus(responseCode)__        return responseBuilder.build()__    };general,purpose,http,s,call,with,json,content,type,and,authorization,header,ssl,settings,are,read,from,the,settings,file,if,any,param,user,user,in,the,authorization,header,param,password,password,in,the,authorization,header,param,request,body,supplier,supplier,for,the,json,string,body,of,the,request,param,response,handler,handler,of,the,response,input,stream,return,http,protocol,response,code;suppress,forbidden,reason,we,call,connect,in,do,privileged,and,provide,socket,permission,public,http,response,execute,string,method,url,url,string,user,secure,string,password,checked,supplier,string,exception,request,body,supplier,checked,function,input,stream,http,response,builder,exception,response,handler,throws,exception,final,http,urlconnection,conn,if,https,equals,ignore,case,url,get,protocol,final,sslservice,ssl,service,new,sslservice,settings,env,final,https,urlconnection,https,conn,https,urlconnection,url,open,connection,access,controller,do,privileged,privileged,action,void,final,settings,ssl,settings,sslservice,get,http,transport,sslsettings,settings,https,conn,set,sslsocket,factory,ssl,service,ssl,socket,factory,ssl,settings,final,boolean,is,hostname,verification,enabled,ssl,service,get,verification,mode,ssl,settings,settings,empty,is,hostname,verification,enabled,if,is,hostname,verification,enabled,false,https,conn,set,hostname,verifier,hostname,session,true,return,null,conn,https,conn,else,conn,http,urlconnection,url,open,connection,conn,set,request,method,method,conn,set,read,timeout,string,token,username,password,token,basic,auth,header,value,user,password,conn,set,request,property,authorization,token,conn,set,request,property,content,type,xcontent,type,json,media,type,string,body,string,request,body,supplier,get,conn,set,do,output,body,string,null,socket,access,do,privileged,conn,connect,if,body,string,null,try,output,stream,out,conn,get,output,stream,out,write,body,string,get,bytes,standard,charsets,catch,exception,e,releasables,close,while,handling,exception,conn,disconnect,throw,e,final,int,response,code,conn,get,response,code,http,response,builder,response,builder,null,try,input,stream,input,stream,conn,get,input,stream,response,builder,response,handler,apply,input,stream,catch,ioexception,e,try,input,stream,error,stream,conn,get,error,stream,response,builder,response,handler,apply,error,stream,finally,releasables,close,while,handling,exception,conn,disconnect,response,builder,with,http,status,response,code,return,response,builder,build
CommandLineHttpClient -> @SuppressForbidden(reason = "We call connect in doPrivileged and provide SocketPermission")     public HttpResponse execute(String method, URL url, String user, SecureString password,             CheckedSupplier<String, Exception> requestBodySupplier,             CheckedFunction<InputStream, HttpResponseBuilder, Exception> responseHandler) throws Exception;1531729807;General purpose HTTP(S) call with JSON Content-Type and Authorization Header._SSL settings are read from the settings file, if any.__@param user_user in the authorization header._@param password_password in the authorization header._@param requestBodySupplier_supplier for the JSON string body of the request._@param responseHandler_handler of the response Input Stream._@return HTTP protocol response code.;@SuppressForbidden(reason = "We call connect in doPrivileged and provide SocketPermission")_    public HttpResponse execute(String method, URL url, String user, SecureString password,_            CheckedSupplier<String, Exception> requestBodySupplier,_            CheckedFunction<InputStream, HttpResponseBuilder, Exception> responseHandler) throws Exception {_        final HttpURLConnection conn__        _        if ("https".equalsIgnoreCase(url.getProtocol())) {_            final SSLService sslService = new SSLService(settings, env)__            final HttpsURLConnection httpsConn = (HttpsURLConnection) url.openConnection()__            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {_                final SSLConfiguration sslConfiguration = sslService.getHttpTransportSSLConfiguration()__                _                httpsConn.setSSLSocketFactory(sslService.sslSocketFactory(sslConfiguration))__                final boolean isHostnameVerificationEnabled = sslConfiguration.verificationMode().isHostnameVerificationEnabled()__                if (isHostnameVerificationEnabled == false) {_                    httpsConn.setHostnameVerifier((hostname, session) -> true)__                }_                return null__            })__            conn = httpsConn__        } else {_            conn = (HttpURLConnection) url.openConnection()__        }_        conn.setRequestMethod(method)__        conn.setReadTimeout(READ_TIMEOUT)__        _        String token = UsernamePasswordToken.basicAuthHeaderValue(user, password)__        conn.setRequestProperty("Authorization", token)__        conn.setRequestProperty("Content-Type", XContentType.JSON.mediaType())__        String bodyString = requestBodySupplier.get()__        conn.setDoOutput(bodyString != null)_ _        SocketAccess.doPrivileged(conn::connect)__        if (bodyString != null) {_            try (OutputStream out = conn.getOutputStream()) {_                out.write(bodyString.getBytes(StandardCharsets.UTF_8))__            } catch (Exception e) {_                Releasables.closeWhileHandlingException(conn::disconnect)__                throw e__            }_        }_        _        final int responseCode = conn.getResponseCode()__        HttpResponseBuilder responseBuilder = null__        try (InputStream inputStream = conn.getInputStream()) {_            responseBuilder = responseHandler.apply(inputStream)__        } catch (IOException e) {_            _            try (InputStream errorStream = conn.getErrorStream()) {_                responseBuilder = responseHandler.apply(errorStream)__            }_        } finally {_            Releasables.closeWhileHandlingException(conn::disconnect)__        }_        responseBuilder.withHttpStatus(responseCode)__        return responseBuilder.build()__    };general,purpose,http,s,call,with,json,content,type,and,authorization,header,ssl,settings,are,read,from,the,settings,file,if,any,param,user,user,in,the,authorization,header,param,password,password,in,the,authorization,header,param,request,body,supplier,supplier,for,the,json,string,body,of,the,request,param,response,handler,handler,of,the,response,input,stream,return,http,protocol,response,code;suppress,forbidden,reason,we,call,connect,in,do,privileged,and,provide,socket,permission,public,http,response,execute,string,method,url,url,string,user,secure,string,password,checked,supplier,string,exception,request,body,supplier,checked,function,input,stream,http,response,builder,exception,response,handler,throws,exception,final,http,urlconnection,conn,if,https,equals,ignore,case,url,get,protocol,final,sslservice,ssl,service,new,sslservice,settings,env,final,https,urlconnection,https,conn,https,urlconnection,url,open,connection,access,controller,do,privileged,privileged,action,void,final,sslconfiguration,ssl,configuration,ssl,service,get,http,transport,sslconfiguration,https,conn,set,sslsocket,factory,ssl,service,ssl,socket,factory,ssl,configuration,final,boolean,is,hostname,verification,enabled,ssl,configuration,verification,mode,is,hostname,verification,enabled,if,is,hostname,verification,enabled,false,https,conn,set,hostname,verifier,hostname,session,true,return,null,conn,https,conn,else,conn,http,urlconnection,url,open,connection,conn,set,request,method,method,conn,set,read,timeout,string,token,username,password,token,basic,auth,header,value,user,password,conn,set,request,property,authorization,token,conn,set,request,property,content,type,xcontent,type,json,media,type,string,body,string,request,body,supplier,get,conn,set,do,output,body,string,null,socket,access,do,privileged,conn,connect,if,body,string,null,try,output,stream,out,conn,get,output,stream,out,write,body,string,get,bytes,standard,charsets,catch,exception,e,releasables,close,while,handling,exception,conn,disconnect,throw,e,final,int,response,code,conn,get,response,code,http,response,builder,response,builder,null,try,input,stream,input,stream,conn,get,input,stream,response,builder,response,handler,apply,input,stream,catch,ioexception,e,try,input,stream,error,stream,conn,get,error,stream,response,builder,response,handler,apply,error,stream,finally,releasables,close,while,handling,exception,conn,disconnect,response,builder,with,http,status,response,code,return,response,builder,build
CommandLineHttpClient -> @SuppressForbidden(reason = "We call connect in doPrivileged and provide SocketPermission")     public HttpResponse execute(String method, URL url, String user, SecureString password,             CheckedSupplier<String, Exception> requestBodySupplier,             CheckedFunction<InputStream, HttpResponseBuilder, Exception> responseHandler) throws Exception;1544823664;General purpose HTTP(S) call with JSON Content-Type and Authorization Header._SSL settings are read from the settings file, if any.__@param user_user in the authorization header._@param password_password in the authorization header._@param requestBodySupplier_supplier for the JSON string body of the request._@param responseHandler_handler of the response Input Stream._@return HTTP protocol response code.;@SuppressForbidden(reason = "We call connect in doPrivileged and provide SocketPermission")_    public HttpResponse execute(String method, URL url, String user, SecureString password,_            CheckedSupplier<String, Exception> requestBodySupplier,_            CheckedFunction<InputStream, HttpResponseBuilder, Exception> responseHandler) throws Exception {_        final HttpURLConnection conn__        _        if ("https".equalsIgnoreCase(url.getProtocol())) {_            final SSLService sslService = new SSLService(settings, env)__            final HttpsURLConnection httpsConn = (HttpsURLConnection) url.openConnection()__            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {_                final SSLConfiguration sslConfiguration = sslService.getHttpTransportSSLConfiguration()__                _                httpsConn.setSSLSocketFactory(sslService.sslSocketFactory(sslConfiguration))__                final boolean isHostnameVerificationEnabled = sslConfiguration.verificationMode().isHostnameVerificationEnabled()__                if (isHostnameVerificationEnabled == false) {_                    httpsConn.setHostnameVerifier((hostname, session) -> true)__                }_                return null__            })__            conn = httpsConn__        } else {_            conn = (HttpURLConnection) url.openConnection()__        }_        conn.setRequestMethod(method)__        conn.setReadTimeout(READ_TIMEOUT)__        _        String token = UsernamePasswordToken.basicAuthHeaderValue(user, password)__        conn.setRequestProperty("Authorization", token)__        conn.setRequestProperty("Content-Type", XContentType.JSON.mediaType())__        String bodyString = requestBodySupplier.get()__        conn.setDoOutput(bodyString != null)_ _        SocketAccess.doPrivileged(conn::connect)__        if (bodyString != null) {_            try (OutputStream out = conn.getOutputStream()) {_                out.write(bodyString.getBytes(StandardCharsets.UTF_8))__            } catch (Exception e) {_                Releasables.closeWhileHandlingException(conn::disconnect)__                throw e__            }_        }_        _        final int responseCode = conn.getResponseCode()__        HttpResponseBuilder responseBuilder = null__        try (InputStream inputStream = conn.getInputStream()) {_            responseBuilder = responseHandler.apply(inputStream)__        } catch (IOException e) {_            _            try (InputStream errorStream = conn.getErrorStream()) {_                responseBuilder = responseHandler.apply(errorStream)__            }_        } finally {_            Releasables.closeWhileHandlingException(conn::disconnect)__        }_        responseBuilder.withHttpStatus(responseCode)__        return responseBuilder.build()__    };general,purpose,http,s,call,with,json,content,type,and,authorization,header,ssl,settings,are,read,from,the,settings,file,if,any,param,user,user,in,the,authorization,header,param,password,password,in,the,authorization,header,param,request,body,supplier,supplier,for,the,json,string,body,of,the,request,param,response,handler,handler,of,the,response,input,stream,return,http,protocol,response,code;suppress,forbidden,reason,we,call,connect,in,do,privileged,and,provide,socket,permission,public,http,response,execute,string,method,url,url,string,user,secure,string,password,checked,supplier,string,exception,request,body,supplier,checked,function,input,stream,http,response,builder,exception,response,handler,throws,exception,final,http,urlconnection,conn,if,https,equals,ignore,case,url,get,protocol,final,sslservice,ssl,service,new,sslservice,settings,env,final,https,urlconnection,https,conn,https,urlconnection,url,open,connection,access,controller,do,privileged,privileged,action,void,final,sslconfiguration,ssl,configuration,ssl,service,get,http,transport,sslconfiguration,https,conn,set,sslsocket,factory,ssl,service,ssl,socket,factory,ssl,configuration,final,boolean,is,hostname,verification,enabled,ssl,configuration,verification,mode,is,hostname,verification,enabled,if,is,hostname,verification,enabled,false,https,conn,set,hostname,verifier,hostname,session,true,return,null,conn,https,conn,else,conn,http,urlconnection,url,open,connection,conn,set,request,method,method,conn,set,read,timeout,string,token,username,password,token,basic,auth,header,value,user,password,conn,set,request,property,authorization,token,conn,set,request,property,content,type,xcontent,type,json,media,type,string,body,string,request,body,supplier,get,conn,set,do,output,body,string,null,socket,access,do,privileged,conn,connect,if,body,string,null,try,output,stream,out,conn,get,output,stream,out,write,body,string,get,bytes,standard,charsets,catch,exception,e,releasables,close,while,handling,exception,conn,disconnect,throw,e,final,int,response,code,conn,get,response,code,http,response,builder,response,builder,null,try,input,stream,input,stream,conn,get,input,stream,response,builder,response,handler,apply,input,stream,catch,ioexception,e,try,input,stream,error,stream,conn,get,error,stream,response,builder,response,handler,apply,error,stream,finally,releasables,close,while,handling,exception,conn,disconnect,response,builder,with,http,status,response,code,return,response,builder,build
