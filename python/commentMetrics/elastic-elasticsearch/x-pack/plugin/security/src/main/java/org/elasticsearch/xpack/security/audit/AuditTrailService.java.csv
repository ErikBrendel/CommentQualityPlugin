commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String name() {     return "service". }
true;public;0;3;/**  * Returns the audit trail implementations that this service delegates to.  */ ;/**  * Returns the audit trail implementations that this service delegates to.  */ public List<AuditTrail> getAuditTrails() {     return auditTrails. }
false;public;4;8;;@Override public void authenticationSuccess(String requestId, String realm, User user, RestRequest request) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.authenticationSuccess(requestId, realm, user, request).         }     } }
false;public;5;8;;@Override public void authenticationSuccess(String requestId, String realm, User user, String action, TransportMessage message) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.authenticationSuccess(requestId, realm, user, action, message).         }     } }
false;public;3;8;;@Override public void anonymousAccessDenied(String requestId, String action, TransportMessage message) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.anonymousAccessDenied(requestId, action, message).         }     } }
false;public;2;8;;@Override public void anonymousAccessDenied(String requestId, RestRequest request) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.anonymousAccessDenied(requestId, request).         }     } }
false;public;2;8;;@Override public void authenticationFailed(String requestId, RestRequest request) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.authenticationFailed(requestId, request).         }     } }
false;public;3;8;;@Override public void authenticationFailed(String requestId, String action, TransportMessage message) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.authenticationFailed(requestId, action, message).         }     } }
false;public;4;8;;@Override public void authenticationFailed(String requestId, AuthenticationToken token, String action, TransportMessage message) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.authenticationFailed(requestId, token, action, message).         }     } }
false;public;5;8;;@Override public void authenticationFailed(String requestId, String realm, AuthenticationToken token, String action, TransportMessage message) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.authenticationFailed(requestId, realm, token, action, message).         }     } }
false;public;3;8;;@Override public void authenticationFailed(String requestId, AuthenticationToken token, RestRequest request) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.authenticationFailed(requestId, token, request).         }     } }
false;public;4;8;;@Override public void authenticationFailed(String requestId, String realm, AuthenticationToken token, RestRequest request) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.authenticationFailed(requestId, realm, token, request).         }     } }
false;public;5;9;;@Override public void accessGranted(String requestId, Authentication authentication, String action, TransportMessage msg, AuthorizationInfo authorizationInfo) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.accessGranted(requestId, authentication, action, msg, authorizationInfo).         }     } }
false;public;5;9;;@Override public void accessDenied(String requestId, Authentication authentication, String action, TransportMessage message, AuthorizationInfo authorizationInfo) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.accessDenied(requestId, authentication, action, message, authorizationInfo).         }     } }
false;public;2;8;;@Override public void tamperedRequest(String requestId, RestRequest request) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.tamperedRequest(requestId, request).         }     } }
false;public;3;8;;@Override public void tamperedRequest(String requestId, String action, TransportMessage message) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.tamperedRequest(requestId, action, message).         }     } }
false;public;4;8;;@Override public void tamperedRequest(String requestId, User user, String action, TransportMessage request) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.tamperedRequest(requestId, user, action, request).         }     } }
false;public;3;8;;@Override public void connectionGranted(InetAddress inetAddress, String profile, SecurityIpFilterRule rule) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.connectionGranted(inetAddress, profile, rule).         }     } }
false;public;3;8;;@Override public void connectionDenied(InetAddress inetAddress, String profile, SecurityIpFilterRule rule) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.connectionDenied(inetAddress, profile, rule).         }     } }
false;public;5;9;;@Override public void runAsGranted(String requestId, Authentication authentication, String action, TransportMessage message, AuthorizationInfo authorizationInfo) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.runAsGranted(requestId, authentication, action, message, authorizationInfo).         }     } }
false;public;5;9;;@Override public void runAsDenied(String requestId, Authentication authentication, String action, TransportMessage message, AuthorizationInfo authorizationInfo) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.runAsDenied(requestId, authentication, action, message, authorizationInfo).         }     } }
false;public;4;9;;@Override public void runAsDenied(String requestId, Authentication authentication, RestRequest request, AuthorizationInfo authorizationInfo) {     if (licenseState.isAuditingAllowed()) {         for (AuditTrail auditTrail : auditTrails) {             auditTrail.runAsDenied(requestId, authentication, request, authorizationInfo).         }     } }
