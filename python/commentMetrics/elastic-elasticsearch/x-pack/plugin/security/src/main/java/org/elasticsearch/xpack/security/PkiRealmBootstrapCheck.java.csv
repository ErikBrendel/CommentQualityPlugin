# id;timestamp;commentText;codeText;commentWords;codeWords
PkiRealmBootstrapCheck -> private List<SSLConfiguration> loadSslConfigurations(Settings settings);1524684173;{@link SSLConfiguration} may depend on {@link org.elasticsearch.common.settings.SecureSettings} that can only be read during startup._We need to preload these during component configuration.;private List<SSLConfiguration> loadSslConfigurations(Settings settings) {_        final List<SSLConfiguration> list = new ArrayList<>()__        if (HTTP_SSL_ENABLED.get(settings)) {_            list.add(sslService.sslConfiguration(SSLService.getHttpTransportSSLSettings(settings), Settings.EMPTY))__        }__        if (XPackSettings.TRANSPORT_SSL_ENABLED.get(settings)) {_            final Settings transportSslSettings = settings.getByPrefix(setting("transport.ssl."))__            list.add(sslService.sslConfiguration(transportSslSettings, Settings.EMPTY))___            settings.getGroups("transport.profiles.").values().stream()_                    .map(SecurityNetty4Transport::profileSslSettings)_                    .map(s -> sslService.sslConfiguration(s, transportSslSettings))_                    .forEach(list::add)__        }__        return list__    };link,sslconfiguration,may,depend,on,link,org,elasticsearch,common,settings,secure,settings,that,can,only,be,read,during,startup,we,need,to,preload,these,during,component,configuration;private,list,sslconfiguration,load,ssl,configurations,settings,settings,final,list,sslconfiguration,list,new,array,list,if,get,settings,list,add,ssl,service,ssl,configuration,sslservice,get,http,transport,sslsettings,settings,settings,empty,if,xpack,settings,get,settings,final,settings,transport,ssl,settings,settings,get,by,prefix,setting,transport,ssl,list,add,ssl,service,ssl,configuration,transport,ssl,settings,settings,empty,settings,get,groups,transport,profiles,values,stream,map,security,netty4transport,profile,ssl,settings,map,s,ssl,service,ssl,configuration,s,transport,ssl,settings,for,each,list,add,return,list
PkiRealmBootstrapCheck -> private List<SSLConfiguration> loadSslConfigurations(Settings settings);1528762805;{@link SSLConfiguration} may depend on {@link org.elasticsearch.common.settings.SecureSettings} that can only be read during startup._We need to preload these during component configuration.;private List<SSLConfiguration> loadSslConfigurations(Settings settings) {_        final List<SSLConfiguration> list = new ArrayList<>()__        if (HTTP_SSL_ENABLED.get(settings)) {_            list.add(sslService.sslConfiguration(SSLService.getHttpTransportSSLSettings(settings), Settings.EMPTY))__        }__        if (XPackSettings.TRANSPORT_SSL_ENABLED.get(settings)) {_            final Settings transportSslSettings = settings.getByPrefix(setting("transport.ssl."))__            list.add(sslService.sslConfiguration(transportSslSettings, Settings.EMPTY))___            settings.getGroups("transport.profiles.").values().stream()_                    .map(SecurityNetty4Transport::profileSslSettings)_                    .map(s -> sslService.sslConfiguration(s, transportSslSettings))_                    .forEach(list::add)__        }__        return list__    };link,sslconfiguration,may,depend,on,link,org,elasticsearch,common,settings,secure,settings,that,can,only,be,read,during,startup,we,need,to,preload,these,during,component,configuration;private,list,sslconfiguration,load,ssl,configurations,settings,settings,final,list,sslconfiguration,list,new,array,list,if,get,settings,list,add,ssl,service,ssl,configuration,sslservice,get,http,transport,sslsettings,settings,settings,empty,if,xpack,settings,get,settings,final,settings,transport,ssl,settings,settings,get,by,prefix,setting,transport,ssl,list,add,ssl,service,ssl,configuration,transport,ssl,settings,settings,empty,settings,get,groups,transport,profiles,values,stream,map,security,netty4transport,profile,ssl,settings,map,s,ssl,service,ssl,configuration,s,transport,ssl,settings,for,each,list,add,return,list
PkiRealmBootstrapCheck -> @Override     public BootstrapCheckResult check(BootstrapContext context);1524684173;If a PKI realm is enabled, checks to see if SSL and Client authentication are enabled on at_least one network communication layer.;@Override_    public BootstrapCheckResult check(BootstrapContext context) {_        final Settings settings = context.settings__        final boolean pkiRealmEnabled = settings.getGroups(RealmSettings.PREFIX).values().stream()_                .filter(s -> PkiRealmSettings.TYPE.equals(s.get("type")))_                .anyMatch(s -> s.getAsBoolean("enabled", true))__        if (pkiRealmEnabled) {_            for (SSLConfiguration configuration : this.sslConfigurations) {_                if (sslService.isSSLClientAuthEnabled(configuration)) {_                    return BootstrapCheckResult.success()__                }_            }_            return BootstrapCheckResult.failure(_                    "a PKI realm is enabled but cannot be used as neither HTTP or Transport have SSL and client authentication enabled")__        } else {_            return BootstrapCheckResult.success()__        }_    };if,a,pki,realm,is,enabled,checks,to,see,if,ssl,and,client,authentication,are,enabled,on,at,least,one,network,communication,layer;override,public,bootstrap,check,result,check,bootstrap,context,context,final,settings,settings,context,settings,final,boolean,pki,realm,enabled,settings,get,groups,realm,settings,prefix,values,stream,filter,s,pki,realm,settings,type,equals,s,get,type,any,match,s,s,get,as,boolean,enabled,true,if,pki,realm,enabled,for,sslconfiguration,configuration,this,ssl,configurations,if,ssl,service,is,sslclient,auth,enabled,configuration,return,bootstrap,check,result,success,return,bootstrap,check,result,failure,a,pki,realm,is,enabled,but,cannot,be,used,as,neither,http,or,transport,have,ssl,and,client,authentication,enabled,else,return,bootstrap,check,result,success
PkiRealmBootstrapCheck -> @Override     public BootstrapCheckResult check(BootstrapContext context);1528762805;If a PKI realm is enabled, checks to see if SSL and Client authentication are enabled on at_least one network communication layer.;@Override_    public BootstrapCheckResult check(BootstrapContext context) {_        final Settings settings = context.settings__        final boolean pkiRealmEnabled = settings.getGroups(RealmSettings.PREFIX).values().stream()_                .filter(s -> PkiRealmSettings.TYPE.equals(s.get("type")))_                .anyMatch(s -> s.getAsBoolean("enabled", true))__        if (pkiRealmEnabled) {_            for (SSLConfiguration configuration : this.sslConfigurations) {_                if (sslService.isSSLClientAuthEnabled(configuration)) {_                    return BootstrapCheckResult.success()__                }_            }_            return BootstrapCheckResult.failure(_                    "a PKI realm is enabled but cannot be used as neither HTTP or Transport have SSL and client authentication enabled")__        } else {_            return BootstrapCheckResult.success()__        }_    };if,a,pki,realm,is,enabled,checks,to,see,if,ssl,and,client,authentication,are,enabled,on,at,least,one,network,communication,layer;override,public,bootstrap,check,result,check,bootstrap,context,context,final,settings,settings,context,settings,final,boolean,pki,realm,enabled,settings,get,groups,realm,settings,prefix,values,stream,filter,s,pki,realm,settings,type,equals,s,get,type,any,match,s,s,get,as,boolean,enabled,true,if,pki,realm,enabled,for,sslconfiguration,configuration,this,ssl,configurations,if,ssl,service,is,sslclient,auth,enabled,configuration,return,bootstrap,check,result,success,return,bootstrap,check,result,failure,a,pki,realm,is,enabled,but,cannot,be,used,as,neither,http,or,transport,have,ssl,and,client,authentication,enabled,else,return,bootstrap,check,result,success
PkiRealmBootstrapCheck -> @Override     public BootstrapCheckResult check(BootstrapContext context);1531729807;If a PKI realm is enabled, checks to see if SSL and Client authentication are enabled on at_least one network communication layer.;@Override_    public BootstrapCheckResult check(BootstrapContext context) {_        final Settings settings = context.settings__        final boolean pkiRealmEnabled = settings.getGroups(RealmSettings.PREFIX).values().stream()_                .filter(s -> PkiRealmSettings.TYPE.equals(s.get("type")))_                .anyMatch(s -> s.getAsBoolean("enabled", true))__        if (pkiRealmEnabled) {_            for (String contextName : getSslContextNames(settings)) {_                final SSLConfiguration configuration = sslService.getSSLConfiguration(contextName)__                if (sslService.isSSLClientAuthEnabled(configuration)) {_                    return BootstrapCheckResult.success()__                }_            }_            return BootstrapCheckResult.failure(_                    "a PKI realm is enabled but cannot be used as neither HTTP or Transport have SSL and client authentication enabled")__        } else {_            return BootstrapCheckResult.success()__        }_    };if,a,pki,realm,is,enabled,checks,to,see,if,ssl,and,client,authentication,are,enabled,on,at,least,one,network,communication,layer;override,public,bootstrap,check,result,check,bootstrap,context,context,final,settings,settings,context,settings,final,boolean,pki,realm,enabled,settings,get,groups,realm,settings,prefix,values,stream,filter,s,pki,realm,settings,type,equals,s,get,type,any,match,s,s,get,as,boolean,enabled,true,if,pki,realm,enabled,for,string,context,name,get,ssl,context,names,settings,final,sslconfiguration,configuration,ssl,service,get,sslconfiguration,context,name,if,ssl,service,is,sslclient,auth,enabled,configuration,return,bootstrap,check,result,success,return,bootstrap,check,result,failure,a,pki,realm,is,enabled,but,cannot,be,used,as,neither,http,or,transport,have,ssl,and,client,authentication,enabled,else,return,bootstrap,check,result,success
PkiRealmBootstrapCheck -> @Override     public BootstrapCheckResult check(BootstrapContext context);1541476610;If a PKI realm is enabled, checks to see if SSL and Client authentication are enabled on at_least one network communication layer.;@Override_    public BootstrapCheckResult check(BootstrapContext context) {_        final Settings settings = context.settings__        final Map<RealmConfig.RealmIdentifier, Settings> realms = RealmSettings.getRealmSettings(settings)__        final boolean pkiRealmEnabled = realms.entrySet().stream()_                .filter(e -> PkiRealmSettings.TYPE.equals(e.getKey().getType()))_                .map(Map.Entry::getValue)_                .anyMatch(s -> s.getAsBoolean("enabled", true))__        if (pkiRealmEnabled) {_            for (String contextName : getSslContextNames(settings)) {_                final SSLConfiguration configuration = sslService.getSSLConfiguration(contextName)__                if (sslService.isSSLClientAuthEnabled(configuration)) {_                    return BootstrapCheckResult.success()__                }_            }_            return BootstrapCheckResult.failure(_                    "a PKI realm is enabled but cannot be used as neither HTTP or Transport have SSL and client authentication enabled")__        } else {_            return BootstrapCheckResult.success()__        }_    };if,a,pki,realm,is,enabled,checks,to,see,if,ssl,and,client,authentication,are,enabled,on,at,least,one,network,communication,layer;override,public,bootstrap,check,result,check,bootstrap,context,context,final,settings,settings,context,settings,final,map,realm,config,realm,identifier,settings,realms,realm,settings,get,realm,settings,settings,final,boolean,pki,realm,enabled,realms,entry,set,stream,filter,e,pki,realm,settings,type,equals,e,get,key,get,type,map,map,entry,get,value,any,match,s,s,get,as,boolean,enabled,true,if,pki,realm,enabled,for,string,context,name,get,ssl,context,names,settings,final,sslconfiguration,configuration,ssl,service,get,sslconfiguration,context,name,if,ssl,service,is,sslclient,auth,enabled,configuration,return,bootstrap,check,result,success,return,bootstrap,check,result,failure,a,pki,realm,is,enabled,but,cannot,be,used,as,neither,http,or,transport,have,ssl,and,client,authentication,enabled,else,return,bootstrap,check,result,success
PkiRealmBootstrapCheck -> @Override     public BootstrapCheckResult check(BootstrapContext context);1544677641;If a PKI realm is enabled, checks to see if SSL and Client authentication are enabled on at_least one network communication layer.;@Override_    public BootstrapCheckResult check(BootstrapContext context) {_        final Settings settings = context.settings()__        final Map<RealmConfig.RealmIdentifier, Settings> realms = RealmSettings.getRealmSettings(settings)__        final boolean pkiRealmEnabled = realms.entrySet().stream()_                .filter(e -> PkiRealmSettings.TYPE.equals(e.getKey().getType()))_                .map(Map.Entry::getValue)_                .anyMatch(s -> s.getAsBoolean("enabled", true))__        if (pkiRealmEnabled) {_            for (String contextName : getSslContextNames(settings)) {_                final SSLConfiguration configuration = sslService.getSSLConfiguration(contextName)__                if (sslService.isSSLClientAuthEnabled(configuration)) {_                    return BootstrapCheckResult.success()__                }_            }_            return BootstrapCheckResult.failure(_                    "a PKI realm is enabled but cannot be used as neither HTTP or Transport have SSL and client authentication enabled")__        } else {_            return BootstrapCheckResult.success()__        }_    };if,a,pki,realm,is,enabled,checks,to,see,if,ssl,and,client,authentication,are,enabled,on,at,least,one,network,communication,layer;override,public,bootstrap,check,result,check,bootstrap,context,context,final,settings,settings,context,settings,final,map,realm,config,realm,identifier,settings,realms,realm,settings,get,realm,settings,settings,final,boolean,pki,realm,enabled,realms,entry,set,stream,filter,e,pki,realm,settings,type,equals,e,get,key,get,type,map,map,entry,get,value,any,match,s,s,get,as,boolean,enabled,true,if,pki,realm,enabled,for,string,context,name,get,ssl,context,names,settings,final,sslconfiguration,configuration,ssl,service,get,sslconfiguration,context,name,if,ssl,service,is,sslclient,auth,enabled,configuration,return,bootstrap,check,result,success,return,bootstrap,check,result,failure,a,pki,realm,is,enabled,but,cannot,be,used,as,neither,http,or,transport,have,ssl,and,client,authentication,enabled,else,return,bootstrap,check,result,success
PkiRealmBootstrapCheck -> @Override     public BootstrapCheckResult check(BootstrapContext context);1547499982;If a PKI realm is enabled, checks to see if SSL and Client authentication are enabled on at_least one network communication layer.;@Override_    public BootstrapCheckResult check(BootstrapContext context) {_        final Settings settings = context.settings()__        final Map<RealmIdentifier, Settings> realms = RealmSettings.getRealmSettings(settings)__        final boolean pkiRealmEnabled = realms.entrySet().stream()_                .filter(e -> PkiRealmSettings.TYPE.equals(e.getKey().getType()))_                .map(Map.Entry::getValue)_                .anyMatch(s -> s.getAsBoolean("enabled", true))__        if (pkiRealmEnabled) {_            for (String contextName : getSslContextNames(settings)) {_                final SSLConfiguration configuration = sslService.getSSLConfiguration(contextName)__                if (sslService.isSSLClientAuthEnabled(configuration)) {_                    return BootstrapCheckResult.success()__                }_            }_            return BootstrapCheckResult.failure(_                    "a PKI realm is enabled but cannot be used as neither HTTP or Transport have SSL and client authentication enabled")__        } else {_            return BootstrapCheckResult.success()__        }_    };if,a,pki,realm,is,enabled,checks,to,see,if,ssl,and,client,authentication,are,enabled,on,at,least,one,network,communication,layer;override,public,bootstrap,check,result,check,bootstrap,context,context,final,settings,settings,context,settings,final,map,realm,identifier,settings,realms,realm,settings,get,realm,settings,settings,final,boolean,pki,realm,enabled,realms,entry,set,stream,filter,e,pki,realm,settings,type,equals,e,get,key,get,type,map,map,entry,get,value,any,match,s,s,get,as,boolean,enabled,true,if,pki,realm,enabled,for,string,context,name,get,ssl,context,names,settings,final,sslconfiguration,configuration,ssl,service,get,sslconfiguration,context,name,if,ssl,service,is,sslclient,auth,enabled,configuration,return,bootstrap,check,result,success,return,bootstrap,check,result,failure,a,pki,realm,is,enabled,but,cannot,be,used,as,neither,http,or,transport,have,ssl,and,client,authentication,enabled,else,return,bootstrap,check,result,success
