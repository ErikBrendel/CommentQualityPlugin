commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(Void v) {     listener.onResponse(new SetEnabledResponse()). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;protected;3;27;;@Override protected void doExecute(Task task, SetEnabledRequest request, ActionListener<SetEnabledResponse> listener) {     final String username = request.username().     // make sure the user is not disabling themselves     if (Authentication.getAuthentication(threadPool.getThreadContext()).getUser().principal().equals(request.username())) {         listener.onFailure(new IllegalArgumentException("users may not update the enabled status of their own account")).         return.     } else if (SystemUser.NAME.equals(username) || XPackUser.NAME.equals(username)) {         listener.onFailure(new IllegalArgumentException("user [" + username + "] is internal")).         return.     } else if (AnonymousUser.isAnonymousUsername(username, settings)) {         listener.onFailure(new IllegalArgumentException("user [" + username + "] is anonymous and cannot be modified using the api")).         return.     }     usersStore.setEnabled(username, request.enabled(), request.getRefreshPolicy(), new ActionListener<Void>() {          @Override         public void onResponse(Void v) {             listener.onResponse(new SetEnabledResponse()).         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }). }
