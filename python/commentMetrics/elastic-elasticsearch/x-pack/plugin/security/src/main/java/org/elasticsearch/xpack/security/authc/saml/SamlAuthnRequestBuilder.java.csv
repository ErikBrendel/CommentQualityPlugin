commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;SamlAuthnRequestBuilder forceAuthn(Boolean forceAuthn) {     this.forceAuthn = forceAuthn.     return this. }
false;;1;4;;SamlAuthnRequestBuilder nameIDPolicy(NameIDPolicySettings settings) {     this.nameIdSettings = settings.     return this. }
false;;0;19;;AuthnRequest build() {     final String destination = getIdpLocation().     final AuthnRequest request = SamlUtils.buildObject(AuthnRequest.class, AuthnRequest.DEFAULT_ELEMENT_NAME).     request.setID(buildId()).     request.setIssueInstant(now()).     request.setDestination(destination).     request.setProtocolBinding(spBinding).     request.setAssertionConsumerServiceURL(serviceProvider.getAscUrl()).     request.setIssuer(buildIssuer()).     if (nameIdSettings != null) {         request.setNameIDPolicy(buildNameIDPolicy()).     }     if (super.serviceProvider.getReqAuthnCtxClassRef().isEmpty() == false) {         request.setRequestedAuthnContext(buildRequestedAuthnContext()).     }     request.setForceAuthn(forceAuthn).     return request. }
false;private;0;13;;private RequestedAuthnContext buildRequestedAuthnContext() {     RequestedAuthnContext requestedAuthnContext = SamlUtils.buildObject(RequestedAuthnContext.class, RequestedAuthnContext.DEFAULT_ELEMENT_NAME).     for (String authnCtxClass : super.serviceProvider.getReqAuthnCtxClassRef()) {         AuthnContextClassRef authnContextClassRef = SamlUtils.buildObject(AuthnContextClassRef.class, AuthnContextClassRef.DEFAULT_ELEMENT_NAME).         authnContextClassRef.setAuthnContextClassRef(authnCtxClass).         requestedAuthnContext.getAuthnContextClassRefs().add(authnContextClassRef).     }     // We handle only EXACT comparison     requestedAuthnContext.setComparison(AuthnContextComparisonTypeEnumeration.EXACT).     return requestedAuthnContext. }
false;private;0;7;;private NameIDPolicy buildNameIDPolicy() {     NameIDPolicy nameIDPolicy = SamlUtils.buildObject(NameIDPolicy.class, NameIDPolicy.DEFAULT_ELEMENT_NAME).     nameIDPolicy.setFormat(nameIdSettings.format).     nameIDPolicy.setAllowCreate(nameIdSettings.allowCreate).     nameIDPolicy.setSPNameQualifier(Strings.isNullOrEmpty(nameIdSettings.spNameQualifier) ? null : nameIdSettings.spNameQualifier).     return nameIDPolicy. }
false;private;0;8;;private String getIdpLocation() {     final String location = getIdentityProviderEndpoint(idpBinding, IDPSSODescriptor::getSingleSignOnServices).     if (location == null) {         throw new ElasticsearchException("Cannot find [{}]/[{}] in descriptor [{}]", IDPSSODescriptor.DEFAULT_ELEMENT_NAME, idpBinding, identityProvider.getID()).     }     return location. }
