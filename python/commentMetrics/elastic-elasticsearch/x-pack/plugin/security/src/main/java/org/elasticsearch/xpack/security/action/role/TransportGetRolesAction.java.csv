commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;39;;@Override protected void doExecute(Task task, final GetRolesRequest request, final ActionListener<GetRolesResponse> listener) {     final String[] requestedRoles = request.names().     final boolean specificRolesRequested = requestedRoles != null && requestedRoles.length > 0.     final Set<String> rolesToSearchFor = new HashSet<>().     final List<RoleDescriptor> roles = new ArrayList<>().     if (specificRolesRequested) {         for (String role : requestedRoles) {             if (ReservedRolesStore.isReserved(role)) {                 RoleDescriptor rd = reservedRolesStore.roleDescriptor(role).                 if (rd != null) {                     roles.add(rd).                 } else {                     listener.onFailure(new IllegalStateException("unable to obtain reserved role [" + role + "]")).                     return.                 }             } else {                 rolesToSearchFor.add(role).             }         }     } else {         roles.addAll(reservedRolesStore.roleDescriptors()).     }     if (specificRolesRequested && rolesToSearchFor.isEmpty()) {         // specific roles were requested but they were built in only, no need to hit the store         listener.onResponse(new GetRolesResponse(roles.toArray(new RoleDescriptor[roles.size()]))).     } else {         nativeRolesStore.getRoleDescriptors(rolesToSearchFor, ActionListener.wrap((retrievalResult) -> {             if (retrievalResult.isSuccess()) {                 roles.addAll(retrievalResult.getDescriptors()).                 listener.onResponse(new GetRolesResponse(roles.toArray(new RoleDescriptor[roles.size()]))).             } else {                 listener.onFailure(retrievalResult.getFailure()).             }         }, listener::onFailure)).     } }
