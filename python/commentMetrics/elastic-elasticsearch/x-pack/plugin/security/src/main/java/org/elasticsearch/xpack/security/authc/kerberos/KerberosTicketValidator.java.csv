# id;timestamp;commentText;codeText;commentWords;codeWords
KerberosTicketValidator -> private static void privilegedLogoutNoThrow(final LoginContext loginContext);1532456624;Privileged wrapper for closing LoginContext, does not throw exceptions but_logs them as a debug message.__@param loginContext LoginContext to be closed;private static void privilegedLogoutNoThrow(final LoginContext loginContext) {_        if (loginContext != null) {_            try {_                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                    loginContext.logout()__                    return null__                })__            } catch (PrivilegedActionException e) {_                LOGGER.debug("Could not close LoginContext", e.getCause())__            }_        }_    };privileged,wrapper,for,closing,login,context,does,not,throw,exceptions,but,logs,them,as,a,debug,message,param,login,context,login,context,to,be,closed;private,static,void,privileged,logout,no,throw,final,login,context,login,context,if,login,context,null,try,access,controller,do,privileged,privileged,exception,action,void,login,context,logout,return,null,catch,privileged,action,exception,e,logger,debug,could,not,close,login,context,e,get,cause
KerberosTicketValidator -> private static void privilegedLogoutNoThrow(final LoginContext loginContext);1532685069;Privileged wrapper for closing LoginContext, does not throw exceptions but_logs them as a debug message.__@param loginContext LoginContext to be closed;private static void privilegedLogoutNoThrow(final LoginContext loginContext) {_        if (loginContext != null) {_            try {_                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                    loginContext.logout()__                    return null__                })__            } catch (PrivilegedActionException e) {_                LOGGER.debug("Could not close LoginContext", e.getCause())__            }_        }_    };privileged,wrapper,for,closing,login,context,does,not,throw,exceptions,but,logs,them,as,a,debug,message,param,login,context,login,context,to,be,closed;private,static,void,privileged,logout,no,throw,final,login,context,login,context,if,login,context,null,try,access,controller,do,privileged,privileged,exception,action,void,login,context,logout,return,null,catch,privileged,action,exception,e,logger,debug,could,not,close,login,context,e,get,cause
KerberosTicketValidator -> private static void privilegedLogoutNoThrow(final LoginContext loginContext);1539615817;Privileged wrapper for closing LoginContext, does not throw exceptions but_logs them as a debug message.__@param loginContext LoginContext to be closed;private static void privilegedLogoutNoThrow(final LoginContext loginContext) {_        if (loginContext != null) {_            try {_                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                    loginContext.logout()__                    return null__                })__            } catch (PrivilegedActionException e) {_                LOGGER.debug("Could not close LoginContext", e.getCause())__            }_        }_    };privileged,wrapper,for,closing,login,context,does,not,throw,exceptions,but,logs,them,as,a,debug,message,param,login,context,login,context,to,be,closed;private,static,void,privileged,logout,no,throw,final,login,context,login,context,if,login,context,null,try,access,controller,do,privileged,privileged,exception,action,void,login,context,logout,return,null,catch,privileged,action,exception,e,logger,debug,could,not,close,login,context,e,get,cause
KerberosTicketValidator -> private static void privilegedLogoutNoThrow(final LoginContext loginContext);1543372183;Privileged wrapper for closing LoginContext, does not throw exceptions but_logs them as a debug message.__@param loginContext LoginContext to be closed;private static void privilegedLogoutNoThrow(final LoginContext loginContext) {_        if (loginContext != null) {_            try {_                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                    loginContext.logout()__                    return null__                })__            } catch (PrivilegedActionException e) {_                LOGGER.debug("Could not close LoginContext", e.getCause())__            }_        }_    };privileged,wrapper,for,closing,login,context,does,not,throw,exceptions,but,logs,them,as,a,debug,message,param,login,context,login,context,to,be,closed;private,static,void,privileged,logout,no,throw,final,login,context,login,context,if,login,context,null,try,access,controller,do,privileged,privileged,exception,action,void,login,context,logout,return,null,catch,privileged,action,exception,e,logger,debug,could,not,close,login,context,e,get,cause
KerberosTicketValidator -> private static <T> T doAsWrapper(final Subject subject, final PrivilegedExceptionAction<T> action) throws PrivilegedActionException;1532456624;Privileged Wrapper that invokes action with Subject.doAs to perform work as_given subject.__@param subject {@link Subject} to be used for this work_@param action {@link PrivilegedExceptionAction} action for performing inside_Subject.doAs_@return the value returned by the PrivilegedExceptionAction's run method_@throws PrivilegedActionException;private static <T> T doAsWrapper(final Subject subject, final PrivilegedExceptionAction<T> action) throws PrivilegedActionException {_        try {_            return AccessController.doPrivileged((PrivilegedExceptionAction<T>) () -> Subject.doAs(subject, action))__        } catch (PrivilegedActionException pae) {_            if (pae.getCause() instanceof PrivilegedActionException) {_                throw (PrivilegedActionException) pae.getCause()__            }_            throw pae__        }_    };privileged,wrapper,that,invokes,action,with,subject,do,as,to,perform,work,as,given,subject,param,subject,link,subject,to,be,used,for,this,work,param,action,link,privileged,exception,action,action,for,performing,inside,subject,do,as,return,the,value,returned,by,the,privileged,exception,action,s,run,method,throws,privileged,action,exception;private,static,t,t,do,as,wrapper,final,subject,subject,final,privileged,exception,action,t,action,throws,privileged,action,exception,try,return,access,controller,do,privileged,privileged,exception,action,t,subject,do,as,subject,action,catch,privileged,action,exception,pae,if,pae,get,cause,instanceof,privileged,action,exception,throw,privileged,action,exception,pae,get,cause,throw,pae
KerberosTicketValidator -> private static <T> T doAsWrapper(final Subject subject, final PrivilegedExceptionAction<T> action) throws PrivilegedActionException;1532685069;Privileged Wrapper that invokes action with Subject.doAs to perform work as_given subject.__@param subject {@link Subject} to be used for this work_@param action {@link PrivilegedExceptionAction} action for performing inside_Subject.doAs_@return the value returned by the PrivilegedExceptionAction's run method_@throws PrivilegedActionException when privileged action threw exception;private static <T> T doAsWrapper(final Subject subject, final PrivilegedExceptionAction<T> action) throws PrivilegedActionException {_        try {_            return AccessController.doPrivileged((PrivilegedExceptionAction<T>) () -> Subject.doAs(subject, action))__        } catch (PrivilegedActionException pae) {_            if (pae.getCause() instanceof PrivilegedActionException) {_                throw (PrivilegedActionException) pae.getCause()__            }_            throw pae__        }_    };privileged,wrapper,that,invokes,action,with,subject,do,as,to,perform,work,as,given,subject,param,subject,link,subject,to,be,used,for,this,work,param,action,link,privileged,exception,action,action,for,performing,inside,subject,do,as,return,the,value,returned,by,the,privileged,exception,action,s,run,method,throws,privileged,action,exception,when,privileged,action,threw,exception;private,static,t,t,do,as,wrapper,final,subject,subject,final,privileged,exception,action,t,action,throws,privileged,action,exception,try,return,access,controller,do,privileged,privileged,exception,action,t,subject,do,as,subject,action,catch,privileged,action,exception,pae,if,pae,get,cause,instanceof,privileged,action,exception,throw,privileged,action,exception,pae,get,cause,throw,pae
KerberosTicketValidator -> private static <T> T doAsWrapper(final Subject subject, final PrivilegedExceptionAction<T> action) throws PrivilegedActionException;1539615817;Privileged Wrapper that invokes action with Subject.doAs to perform work as_given subject.__@param subject {@link Subject} to be used for this work_@param action {@link PrivilegedExceptionAction} action for performing inside_Subject.doAs_@return the value returned by the PrivilegedExceptionAction's run method_@throws PrivilegedActionException when privileged action threw exception;private static <T> T doAsWrapper(final Subject subject, final PrivilegedExceptionAction<T> action) throws PrivilegedActionException {_        try {_            return AccessController.doPrivileged((PrivilegedExceptionAction<T>) () -> Subject.doAs(subject, action))__        } catch (PrivilegedActionException pae) {_            if (pae.getCause() instanceof PrivilegedActionException) {_                throw (PrivilegedActionException) pae.getCause()__            }_            throw pae__        }_    };privileged,wrapper,that,invokes,action,with,subject,do,as,to,perform,work,as,given,subject,param,subject,link,subject,to,be,used,for,this,work,param,action,link,privileged,exception,action,action,for,performing,inside,subject,do,as,return,the,value,returned,by,the,privileged,exception,action,s,run,method,throws,privileged,action,exception,when,privileged,action,threw,exception;private,static,t,t,do,as,wrapper,final,subject,subject,final,privileged,exception,action,t,action,throws,privileged,action,exception,try,return,access,controller,do,privileged,privileged,exception,action,t,subject,do,as,subject,action,catch,privileged,action,exception,pae,if,pae,get,cause,instanceof,privileged,action,exception,throw,privileged,action,exception,pae,get,cause,throw,pae
KerberosTicketValidator -> private static <T> T doAsWrapper(final Subject subject, final PrivilegedExceptionAction<T> action) throws PrivilegedActionException;1543372183;Privileged Wrapper that invokes action with Subject.doAs to perform work as_given subject.__@param subject {@link Subject} to be used for this work_@param action {@link PrivilegedExceptionAction} action for performing inside_Subject.doAs_@return the value returned by the PrivilegedExceptionAction's run method_@throws PrivilegedActionException when privileged action threw exception;private static <T> T doAsWrapper(final Subject subject, final PrivilegedExceptionAction<T> action) throws PrivilegedActionException {_        try {_            return AccessController.doPrivileged((PrivilegedExceptionAction<T>) () -> Subject.doAs(subject, action))__        } catch (PrivilegedActionException pae) {_            if (pae.getCause() instanceof PrivilegedActionException) {_                throw (PrivilegedActionException) pae.getCause()__            }_            throw pae__        }_    };privileged,wrapper,that,invokes,action,with,subject,do,as,to,perform,work,as,given,subject,param,subject,link,subject,to,be,used,for,this,work,param,action,link,privileged,exception,action,action,for,performing,inside,subject,do,as,return,the,value,returned,by,the,privileged,exception,action,s,run,method,throws,privileged,action,exception,when,privileged,action,threw,exception;private,static,t,t,do,as,wrapper,final,subject,subject,final,privileged,exception,action,t,action,throws,privileged,action,exception,try,return,access,controller,do,privileged,privileged,exception,action,t,subject,do,as,subject,action,catch,privileged,action,exception,pae,if,pae,get,cause,instanceof,privileged,action,exception,throw,privileged,action,exception,pae,get,cause,throw,pae
KerberosTicketValidator -> private static void privilegedDisposeNoThrow(final GSSContext gssContext);1532456624;Privileged wrapper for closing GSSContext, does not throw exceptions but logs_them as a debug message.__@param gssContext GSSContext to be disposed.;private static void privilegedDisposeNoThrow(final GSSContext gssContext) {_        if (gssContext != null) {_            try {_                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                    gssContext.dispose()__                    return null__                })__            } catch (PrivilegedActionException e) {_                LOGGER.debug("Could not dispose GSS Context", e.getCause())__            }_        }_    };privileged,wrapper,for,closing,gsscontext,does,not,throw,exceptions,but,logs,them,as,a,debug,message,param,gss,context,gsscontext,to,be,disposed;private,static,void,privileged,dispose,no,throw,final,gsscontext,gss,context,if,gss,context,null,try,access,controller,do,privileged,privileged,exception,action,void,gss,context,dispose,return,null,catch,privileged,action,exception,e,logger,debug,could,not,dispose,gss,context,e,get,cause
KerberosTicketValidator -> private static void privilegedDisposeNoThrow(final GSSContext gssContext);1532685069;Privileged wrapper for closing GSSContext, does not throw exceptions but logs_them as a debug message.__@param gssContext GSSContext to be disposed.;private static void privilegedDisposeNoThrow(final GSSContext gssContext) {_        if (gssContext != null) {_            try {_                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                    gssContext.dispose()__                    return null__                })__            } catch (PrivilegedActionException e) {_                LOGGER.debug("Could not dispose GSS Context", e.getCause())__            }_        }_    };privileged,wrapper,for,closing,gsscontext,does,not,throw,exceptions,but,logs,them,as,a,debug,message,param,gss,context,gsscontext,to,be,disposed;private,static,void,privileged,dispose,no,throw,final,gsscontext,gss,context,if,gss,context,null,try,access,controller,do,privileged,privileged,exception,action,void,gss,context,dispose,return,null,catch,privileged,action,exception,e,logger,debug,could,not,dispose,gss,context,e,get,cause
KerberosTicketValidator -> private static void privilegedDisposeNoThrow(final GSSContext gssContext);1539615817;Privileged wrapper for closing GSSContext, does not throw exceptions but logs_them as a debug message.__@param gssContext GSSContext to be disposed.;private static void privilegedDisposeNoThrow(final GSSContext gssContext) {_        if (gssContext != null) {_            try {_                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                    gssContext.dispose()__                    return null__                })__            } catch (PrivilegedActionException e) {_                LOGGER.debug("Could not dispose GSS Context", e.getCause())__            }_        }_    };privileged,wrapper,for,closing,gsscontext,does,not,throw,exceptions,but,logs,them,as,a,debug,message,param,gss,context,gsscontext,to,be,disposed;private,static,void,privileged,dispose,no,throw,final,gsscontext,gss,context,if,gss,context,null,try,access,controller,do,privileged,privileged,exception,action,void,gss,context,dispose,return,null,catch,privileged,action,exception,e,logger,debug,could,not,dispose,gss,context,e,get,cause
KerberosTicketValidator -> private static void privilegedDisposeNoThrow(final GSSContext gssContext);1543372183;Privileged wrapper for closing GSSContext, does not throw exceptions but logs_them as a debug message.__@param gssContext GSSContext to be disposed.;private static void privilegedDisposeNoThrow(final GSSContext gssContext) {_        if (gssContext != null) {_            try {_                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                    gssContext.dispose()__                    return null__                })__            } catch (PrivilegedActionException e) {_                LOGGER.debug("Could not dispose GSS Context", e.getCause())__            }_        }_    };privileged,wrapper,for,closing,gsscontext,does,not,throw,exceptions,but,logs,them,as,a,debug,message,param,gss,context,gsscontext,to,be,disposed;private,static,void,privileged,dispose,no,throw,final,gsscontext,gss,context,if,gss,context,null,try,access,controller,do,privileged,privileged,exception,action,void,gss,context,dispose,return,null,catch,privileged,action,exception,e,logger,debug,could,not,dispose,gss,context,e,get,cause
KerberosTicketValidator -> private String encodeToString(final byte[] outToken);1532456624;Encodes the specified byte array using base64 encoding scheme__@param outToken byte array to be encoded_@return String containing base64 encoded characters. returns {@code null} if_outToken is null or empty.;private String encodeToString(final byte[] outToken) {_        if (outToken != null && outToken.length > 0) {_            return Base64.getEncoder().encodeToString(outToken)__        }_        return null__    };encodes,the,specified,byte,array,using,base64,encoding,scheme,param,out,token,byte,array,to,be,encoded,return,string,containing,base64,encoded,characters,returns,code,null,if,out,token,is,null,or,empty;private,string,encode,to,string,final,byte,out,token,if,out,token,null,out,token,length,0,return,base64,get,encoder,encode,to,string,out,token,return,null
KerberosTicketValidator -> private String encodeToString(final byte[] outToken);1532685069;Encodes the specified byte array using base64 encoding scheme__@param outToken byte array to be encoded_@return String containing base64 encoded characters. returns {@code null} if_outToken is null or empty.;private String encodeToString(final byte[] outToken) {_        if (outToken != null && outToken.length > 0) {_            return Base64.getEncoder().encodeToString(outToken)__        }_        return null__    };encodes,the,specified,byte,array,using,base64,encoding,scheme,param,out,token,byte,array,to,be,encoded,return,string,containing,base64,encoded,characters,returns,code,null,if,out,token,is,null,or,empty;private,string,encode,to,string,final,byte,out,token,if,out,token,null,out,token,length,0,return,base64,get,encoder,encode,to,string,out,token,return,null
KerberosTicketValidator -> private String encodeToString(final byte[] outToken);1539615817;Encodes the specified byte array using base64 encoding scheme__@param outToken byte array to be encoded_@return String containing base64 encoded characters. returns {@code null} if_outToken is null or empty.;private String encodeToString(final byte[] outToken) {_        if (outToken != null && outToken.length > 0) {_            return Base64.getEncoder().encodeToString(outToken)__        }_        return null__    };encodes,the,specified,byte,array,using,base64,encoding,scheme,param,out,token,byte,array,to,be,encoded,return,string,containing,base64,encoded,characters,returns,code,null,if,out,token,is,null,or,empty;private,string,encode,to,string,final,byte,out,token,if,out,token,null,out,token,length,0,return,base64,get,encoder,encode,to,string,out,token,return,null
KerberosTicketValidator -> private String encodeToString(final byte[] outToken);1543372183;Encodes the specified byte array using base64 encoding scheme__@param outToken byte array to be encoded_@return String containing base64 encoded characters. returns {@code null} if_outToken is null or empty.;private String encodeToString(final byte[] outToken) {_        if (outToken != null && outToken.length > 0) {_            return Base64.getEncoder().encodeToString(outToken)__        }_        return null__    };encodes,the,specified,byte,array,using,base64,encoding,scheme,param,out,token,byte,array,to,be,encoded,return,string,containing,base64,encoded,characters,returns,code,null,if,out,token,is,null,or,empty;private,string,encode,to,string,final,byte,out,token,if,out,token,null,out,token,length,0,return,base64,get,encoder,encode,to,string,out,token,return,null
KerberosTicketValidator -> private static LoginContext serviceLogin(final String keytabFilePath, final boolean krbDebug) throws PrivilegedActionException;1532456624;Performs authentication using provided keytab__@param keytabFilePath Keytab file path_@param krbDebug if {@code true} enables jaas krb5 login module debug logs._@return authenticated {@link LoginContext} instance. Note: This needs to be_closed using {@link LoginContext#logout()} after usage._@throws PrivilegedActionException when privileged action threw exception;private static LoginContext serviceLogin(final String keytabFilePath, final boolean krbDebug) throws PrivilegedActionException {_        return AccessController.doPrivileged((PrivilegedExceptionAction<LoginContext>) () -> {_            final Subject subject = new Subject(false, Collections.emptySet(), Collections.emptySet(), Collections.emptySet())__            final Configuration conf = new KeytabJaasConf(keytabFilePath, krbDebug)__            final LoginContext loginContext = new LoginContext(KEY_TAB_CONF_NAME, subject, null, conf)__            loginContext.login()__            return loginContext__        })__    };performs,authentication,using,provided,keytab,param,keytab,file,path,keytab,file,path,param,krb,debug,if,code,true,enables,jaas,krb5,login,module,debug,logs,return,authenticated,link,login,context,instance,note,this,needs,to,be,closed,using,link,login,context,logout,after,usage,throws,privileged,action,exception,when,privileged,action,threw,exception;private,static,login,context,service,login,final,string,keytab,file,path,final,boolean,krb,debug,throws,privileged,action,exception,return,access,controller,do,privileged,privileged,exception,action,login,context,final,subject,subject,new,subject,false,collections,empty,set,collections,empty,set,collections,empty,set,final,configuration,conf,new,keytab,jaas,conf,keytab,file,path,krb,debug,final,login,context,login,context,new,login,context,subject,null,conf,login,context,login,return,login,context
KerberosTicketValidator -> private static LoginContext serviceLogin(final String keytabFilePath, final boolean krbDebug) throws PrivilegedActionException;1532685069;Performs authentication using provided keytab__@param keytabFilePath Keytab file path_@param krbDebug if {@code true} enables jaas krb5 login module debug logs._@return authenticated {@link LoginContext} instance. Note: This needs to be_closed using {@link LoginContext#logout()} after usage._@throws PrivilegedActionException when privileged action threw exception;private static LoginContext serviceLogin(final String keytabFilePath, final boolean krbDebug) throws PrivilegedActionException {_        return AccessController.doPrivileged((PrivilegedExceptionAction<LoginContext>) () -> {_            final Subject subject = new Subject(false, Collections.emptySet(), Collections.emptySet(), Collections.emptySet())__            final Configuration conf = new KeytabJaasConf(keytabFilePath, krbDebug)__            final LoginContext loginContext = new LoginContext(KEY_TAB_CONF_NAME, subject, null, conf)__            loginContext.login()__            return loginContext__        })__    };performs,authentication,using,provided,keytab,param,keytab,file,path,keytab,file,path,param,krb,debug,if,code,true,enables,jaas,krb5,login,module,debug,logs,return,authenticated,link,login,context,instance,note,this,needs,to,be,closed,using,link,login,context,logout,after,usage,throws,privileged,action,exception,when,privileged,action,threw,exception;private,static,login,context,service,login,final,string,keytab,file,path,final,boolean,krb,debug,throws,privileged,action,exception,return,access,controller,do,privileged,privileged,exception,action,login,context,final,subject,subject,new,subject,false,collections,empty,set,collections,empty,set,collections,empty,set,final,configuration,conf,new,keytab,jaas,conf,keytab,file,path,krb,debug,final,login,context,login,context,new,login,context,subject,null,conf,login,context,login,return,login,context
KerberosTicketValidator -> private static LoginContext serviceLogin(final String keytabFilePath, final boolean krbDebug) throws PrivilegedActionException;1539615817;Performs authentication using provided keytab__@param keytabFilePath Keytab file path_@param krbDebug if {@code true} enables jaas krb5 login module debug logs._@return authenticated {@link LoginContext} instance. Note: This needs to be_closed using {@link LoginContext#logout()} after usage._@throws PrivilegedActionException when privileged action threw exception;private static LoginContext serviceLogin(final String keytabFilePath, final boolean krbDebug) throws PrivilegedActionException {_        return AccessController.doPrivileged((PrivilegedExceptionAction<LoginContext>) () -> {_            final Subject subject = new Subject(false, Collections.emptySet(), Collections.emptySet(), Collections.emptySet())__            final Configuration conf = new KeytabJaasConf(keytabFilePath, krbDebug)__            final LoginContext loginContext = new LoginContext(KEY_TAB_CONF_NAME, subject, null, conf)__            loginContext.login()__            return loginContext__        })__    };performs,authentication,using,provided,keytab,param,keytab,file,path,keytab,file,path,param,krb,debug,if,code,true,enables,jaas,krb5,login,module,debug,logs,return,authenticated,link,login,context,instance,note,this,needs,to,be,closed,using,link,login,context,logout,after,usage,throws,privileged,action,exception,when,privileged,action,threw,exception;private,static,login,context,service,login,final,string,keytab,file,path,final,boolean,krb,debug,throws,privileged,action,exception,return,access,controller,do,privileged,privileged,exception,action,login,context,final,subject,subject,new,subject,false,collections,empty,set,collections,empty,set,collections,empty,set,final,configuration,conf,new,keytab,jaas,conf,keytab,file,path,krb,debug,final,login,context,login,context,new,login,context,subject,null,conf,login,context,login,return,login,context
KerberosTicketValidator -> private static LoginContext serviceLogin(final String keytabFilePath, final boolean krbDebug) throws PrivilegedActionException;1543372183;Performs authentication using provided keytab__@param keytabFilePath Keytab file path_@param krbDebug if {@code true} enables jaas krb5 login module debug logs._@return authenticated {@link LoginContext} instance. Note: This needs to be_closed using {@link LoginContext#logout()} after usage._@throws PrivilegedActionException when privileged action threw exception;private static LoginContext serviceLogin(final String keytabFilePath, final boolean krbDebug) throws PrivilegedActionException {_        return AccessController.doPrivileged((PrivilegedExceptionAction<LoginContext>) () -> {_            final Subject subject = new Subject(false, Collections.emptySet(), Collections.emptySet(), Collections.emptySet())__            final Configuration conf = new KeytabJaasConf(keytabFilePath, krbDebug)__            final LoginContext loginContext = new LoginContext(KEY_TAB_CONF_NAME, subject, null, conf)__            loginContext.login()__            return loginContext__        })__    };performs,authentication,using,provided,keytab,param,keytab,file,path,keytab,file,path,param,krb,debug,if,code,true,enables,jaas,krb5,login,module,debug,logs,return,authenticated,link,login,context,instance,note,this,needs,to,be,closed,using,link,login,context,logout,after,usage,throws,privileged,action,exception,when,privileged,action,threw,exception;private,static,login,context,service,login,final,string,keytab,file,path,final,boolean,krb,debug,throws,privileged,action,exception,return,access,controller,do,privileged,privileged,exception,action,login,context,final,subject,subject,new,subject,false,collections,empty,set,collections,empty,set,collections,empty,set,final,configuration,conf,new,keytab,jaas,conf,keytab,file,path,krb,debug,final,login,context,login,context,new,login,context,subject,null,conf,login,context,login,return,login,context
KerberosTicketValidator -> private static byte[] acceptSecContext(final byte[] base64decodedTicket, final GSSContext gssContext, Subject subject)             throws PrivilegedActionException;1532456624;Handles GSS context establishment. Received token is passed to the GSSContext_on acceptor side and returns with out token that needs to be sent to peer for_further GSS context establishment._<p>__@param base64decodedTicket in token generated by peer_@param gssContext instance of acceptor {@link GSSContext}_@param subject authenticated subject_@return a byte[] containing the token to be sent to the peer. null indicates_that no token is generated._@throws PrivilegedActionException_@see GSSContext#acceptSecContext(byte[], int, int);private static byte[] acceptSecContext(final byte[] base64decodedTicket, final GSSContext gssContext, Subject subject)_            throws PrivilegedActionException {_        _        return doAsWrapper(subject,_                (PrivilegedExceptionAction<byte[]>) () -> gssContext.acceptSecContext(base64decodedTicket, 0, base64decodedTicket.length))__    };handles,gss,context,establishment,received,token,is,passed,to,the,gsscontext,on,acceptor,side,and,returns,with,out,token,that,needs,to,be,sent,to,peer,for,further,gss,context,establishment,p,param,base64decoded,ticket,in,token,generated,by,peer,param,gss,context,instance,of,acceptor,link,gsscontext,param,subject,authenticated,subject,return,a,byte,containing,the,token,to,be,sent,to,the,peer,null,indicates,that,no,token,is,generated,throws,privileged,action,exception,see,gsscontext,accept,sec,context,byte,int,int;private,static,byte,accept,sec,context,final,byte,base64decoded,ticket,final,gsscontext,gss,context,subject,subject,throws,privileged,action,exception,return,do,as,wrapper,subject,privileged,exception,action,byte,gss,context,accept,sec,context,base64decoded,ticket,0,base64decoded,ticket,length
KerberosTicketValidator -> private static byte[] acceptSecContext(final byte[] base64decodedTicket, final GSSContext gssContext, Subject subject)             throws PrivilegedActionException;1532685069;Handles GSS context establishment. Received token is passed to the GSSContext_on acceptor side and returns with out token that needs to be sent to peer for_further GSS context establishment._<p>__@param base64decodedTicket in token generated by peer_@param gssContext instance of acceptor {@link GSSContext}_@param subject authenticated subject_@return a byte[] containing the token to be sent to the peer. null indicates_that no token is generated._@throws PrivilegedActionException when privileged action threw exception_@see GSSContext#acceptSecContext(byte[], int, int);private static byte[] acceptSecContext(final byte[] base64decodedTicket, final GSSContext gssContext, Subject subject)_            throws PrivilegedActionException {_        _        return doAsWrapper(subject,_                (PrivilegedExceptionAction<byte[]>) () -> gssContext.acceptSecContext(base64decodedTicket, 0, base64decodedTicket.length))__    };handles,gss,context,establishment,received,token,is,passed,to,the,gsscontext,on,acceptor,side,and,returns,with,out,token,that,needs,to,be,sent,to,peer,for,further,gss,context,establishment,p,param,base64decoded,ticket,in,token,generated,by,peer,param,gss,context,instance,of,acceptor,link,gsscontext,param,subject,authenticated,subject,return,a,byte,containing,the,token,to,be,sent,to,the,peer,null,indicates,that,no,token,is,generated,throws,privileged,action,exception,when,privileged,action,threw,exception,see,gsscontext,accept,sec,context,byte,int,int;private,static,byte,accept,sec,context,final,byte,base64decoded,ticket,final,gsscontext,gss,context,subject,subject,throws,privileged,action,exception,return,do,as,wrapper,subject,privileged,exception,action,byte,gss,context,accept,sec,context,base64decoded,ticket,0,base64decoded,ticket,length
KerberosTicketValidator -> private static byte[] acceptSecContext(final byte[] base64decodedTicket, final GSSContext gssContext, Subject subject)             throws PrivilegedActionException;1539615817;Handles GSS context establishment. Received token is passed to the GSSContext_on acceptor side and returns with out token that needs to be sent to peer for_further GSS context establishment._<p>__@param base64decodedTicket in token generated by peer_@param gssContext instance of acceptor {@link GSSContext}_@param subject authenticated subject_@return a byte[] containing the token to be sent to the peer. null indicates_that no token is generated._@throws PrivilegedActionException when privileged action threw exception_@see GSSContext#acceptSecContext(byte[], int, int);private static byte[] acceptSecContext(final byte[] base64decodedTicket, final GSSContext gssContext, Subject subject)_            throws PrivilegedActionException {_        _        return doAsWrapper(subject,_                (PrivilegedExceptionAction<byte[]>) () -> gssContext.acceptSecContext(base64decodedTicket, 0, base64decodedTicket.length))__    };handles,gss,context,establishment,received,token,is,passed,to,the,gsscontext,on,acceptor,side,and,returns,with,out,token,that,needs,to,be,sent,to,peer,for,further,gss,context,establishment,p,param,base64decoded,ticket,in,token,generated,by,peer,param,gss,context,instance,of,acceptor,link,gsscontext,param,subject,authenticated,subject,return,a,byte,containing,the,token,to,be,sent,to,the,peer,null,indicates,that,no,token,is,generated,throws,privileged,action,exception,when,privileged,action,threw,exception,see,gsscontext,accept,sec,context,byte,int,int;private,static,byte,accept,sec,context,final,byte,base64decoded,ticket,final,gsscontext,gss,context,subject,subject,throws,privileged,action,exception,return,do,as,wrapper,subject,privileged,exception,action,byte,gss,context,accept,sec,context,base64decoded,ticket,0,base64decoded,ticket,length
KerberosTicketValidator -> private static byte[] acceptSecContext(final byte[] base64decodedTicket, final GSSContext gssContext, Subject subject)             throws PrivilegedActionException;1543372183;Handles GSS context establishment. Received token is passed to the GSSContext_on acceptor side and returns with out token that needs to be sent to peer for_further GSS context establishment._<p>__@param base64decodedTicket in token generated by peer_@param gssContext instance of acceptor {@link GSSContext}_@param subject authenticated subject_@return a byte[] containing the token to be sent to the peer. null indicates_that no token is generated._@throws PrivilegedActionException when privileged action threw exception_@see GSSContext#acceptSecContext(byte[], int, int);private static byte[] acceptSecContext(final byte[] base64decodedTicket, final GSSContext gssContext, Subject subject)_            throws PrivilegedActionException {_        _        return doAsWrapper(subject,_                (PrivilegedExceptionAction<byte[]>) () -> gssContext.acceptSecContext(base64decodedTicket, 0, base64decodedTicket.length))__    };handles,gss,context,establishment,received,token,is,passed,to,the,gsscontext,on,acceptor,side,and,returns,with,out,token,that,needs,to,be,sent,to,peer,for,further,gss,context,establishment,p,param,base64decoded,ticket,in,token,generated,by,peer,param,gss,context,instance,of,acceptor,link,gsscontext,param,subject,authenticated,subject,return,a,byte,containing,the,token,to,be,sent,to,the,peer,null,indicates,that,no,token,is,generated,throws,privileged,action,exception,when,privileged,action,threw,exception,see,gsscontext,accept,sec,context,byte,int,int;private,static,byte,accept,sec,context,final,byte,base64decoded,ticket,final,gsscontext,gss,context,subject,subject,throws,privileged,action,exception,return,do,as,wrapper,subject,privileged,exception,action,byte,gss,context,accept,sec,context,base64decoded,ticket,0,base64decoded,ticket,length
KerberosTicketValidator -> public void validateTicket(final byte[] decodedToken, final Path keytabPath, final boolean krbDebug,             final ActionListener<Tuple<String, String>> actionListener);1532456624;Validates client kerberos ticket received from the peer._<p>_First performs service login using keytab, supports multiple principals in_keytab and the principal is selected based on the request._<p>_The GSS security context establishment state is handled as follows: <br>_If the context is established it will call {@link ActionListener#onResponse}_with a {@link Tuple} of username and outToken for peer reply. <br>_If the context is not established then it will call_{@link ActionListener#onResponse} with a Tuple where username is null but_with a outToken that needs to be sent to peer for further negotiation. <br>_Never calls {@link ActionListener#onResponse} with a {@code null} tuple. <br>_On failure, it will call {@link ActionListener#onFailure(Exception)}__@param decodedToken base64 decoded kerberos ticket bytes_@param keytabPath Path to Service key tab file containing credentials for ES_service._@param krbDebug if {@code true} enables jaas krb5 login module debug logs.;public void validateTicket(final byte[] decodedToken, final Path keytabPath, final boolean krbDebug,_            final ActionListener<Tuple<String, String>> actionListener) {_        final GSSManager gssManager = GSSManager.getInstance()__        GSSContext gssContext = null__        LoginContext loginContext = null__        try {_            loginContext = serviceLogin(keytabPath.toString(), krbDebug)__            GSSCredential serviceCreds = createCredentials(gssManager, loginContext.getSubject())__            gssContext = gssManager.createContext(serviceCreds)__            final String base64OutToken = encodeToString(acceptSecContext(decodedToken, gssContext, loginContext.getSubject()))__            LOGGER.trace("validateTicket isGSSContextEstablished = {}, username = {}, outToken = {}", gssContext.isEstablished(),_                    gssContext.getSrcName().toString(), base64OutToken)__            actionListener.onResponse(new Tuple<>(gssContext.isEstablished() ? gssContext.getSrcName().toString() : null, base64OutToken))__        } catch (GSSException e) {_            actionListener.onFailure(e)__        } catch (PrivilegedActionException pve) {_            if (pve.getCause() instanceof LoginException) {_                actionListener.onFailure((LoginException) pve.getCause())__            } else if (pve.getCause() instanceof GSSException) {_                actionListener.onFailure((GSSException) pve.getCause())__            } else {_                actionListener.onFailure(pve.getException())__            }_        } finally {_            privilegedLogoutNoThrow(loginContext)__            privilegedDisposeNoThrow(gssContext)__        }_    };validates,client,kerberos,ticket,received,from,the,peer,p,first,performs,service,login,using,keytab,supports,multiple,principals,in,keytab,and,the,principal,is,selected,based,on,the,request,p,the,gss,security,context,establishment,state,is,handled,as,follows,br,if,the,context,is,established,it,will,call,link,action,listener,on,response,with,a,link,tuple,of,username,and,out,token,for,peer,reply,br,if,the,context,is,not,established,then,it,will,call,link,action,listener,on,response,with,a,tuple,where,username,is,null,but,with,a,out,token,that,needs,to,be,sent,to,peer,for,further,negotiation,br,never,calls,link,action,listener,on,response,with,a,code,null,tuple,br,on,failure,it,will,call,link,action,listener,on,failure,exception,param,decoded,token,base64,decoded,kerberos,ticket,bytes,param,keytab,path,path,to,service,key,tab,file,containing,credentials,for,es,service,param,krb,debug,if,code,true,enables,jaas,krb5,login,module,debug,logs;public,void,validate,ticket,final,byte,decoded,token,final,path,keytab,path,final,boolean,krb,debug,final,action,listener,tuple,string,string,action,listener,final,gssmanager,gss,manager,gssmanager,get,instance,gsscontext,gss,context,null,login,context,login,context,null,try,login,context,service,login,keytab,path,to,string,krb,debug,gsscredential,service,creds,create,credentials,gss,manager,login,context,get,subject,gss,context,gss,manager,create,context,service,creds,final,string,base64out,token,encode,to,string,accept,sec,context,decoded,token,gss,context,login,context,get,subject,logger,trace,validate,ticket,is,gsscontext,established,username,out,token,gss,context,is,established,gss,context,get,src,name,to,string,base64out,token,action,listener,on,response,new,tuple,gss,context,is,established,gss,context,get,src,name,to,string,null,base64out,token,catch,gssexception,e,action,listener,on,failure,e,catch,privileged,action,exception,pve,if,pve,get,cause,instanceof,login,exception,action,listener,on,failure,login,exception,pve,get,cause,else,if,pve,get,cause,instanceof,gssexception,action,listener,on,failure,gssexception,pve,get,cause,else,action,listener,on,failure,pve,get,exception,finally,privileged,logout,no,throw,login,context,privileged,dispose,no,throw,gss,context
KerberosTicketValidator -> public void validateTicket(final byte[] decodedToken, final Path keytabPath, final boolean krbDebug,             final ActionListener<Tuple<String, String>> actionListener);1532685069;Validates client kerberos ticket received from the peer._<p>_First performs service login using keytab, supports multiple principals in_keytab and the principal is selected based on the request._<p>_The GSS security context establishment state is handled as follows: <br>_If the context is established it will call {@link ActionListener#onResponse}_with a {@link Tuple} of username and outToken for peer reply. <br>_If the context is not established then it will call_{@link ActionListener#onResponse} with a Tuple where username is null but_with a outToken that needs to be sent to peer for further negotiation. <br>_Never calls {@link ActionListener#onResponse} with a {@code null} tuple. <br>_On failure, it will call {@link ActionListener#onFailure(Exception)}__@param decodedToken base64 decoded kerberos ticket bytes_@param keytabPath Path to Service key tab file containing credentials for ES_service._@param krbDebug if {@code true} enables jaas krb5 login module debug logs.;public void validateTicket(final byte[] decodedToken, final Path keytabPath, final boolean krbDebug,_            final ActionListener<Tuple<String, String>> actionListener) {_        final GSSManager gssManager = GSSManager.getInstance()__        GSSContext gssContext = null__        LoginContext loginContext = null__        try {_            loginContext = serviceLogin(keytabPath.toString(), krbDebug)__            GSSCredential serviceCreds = createCredentials(gssManager, loginContext.getSubject())__            gssContext = gssManager.createContext(serviceCreds)__            final String base64OutToken = encodeToString(acceptSecContext(decodedToken, gssContext, loginContext.getSubject()))__            LOGGER.trace("validateTicket isGSSContextEstablished = {}, username = {}, outToken = {}", gssContext.isEstablished(),_                    gssContext.getSrcName().toString(), base64OutToken)__            actionListener.onResponse(new Tuple<>(gssContext.isEstablished() ? gssContext.getSrcName().toString() : null, base64OutToken))__        } catch (GSSException e) {_            actionListener.onFailure(e)__        } catch (PrivilegedActionException pve) {_            if (pve.getCause() instanceof LoginException) {_                actionListener.onFailure((LoginException) pve.getCause())__            } else if (pve.getCause() instanceof GSSException) {_                actionListener.onFailure((GSSException) pve.getCause())__            } else {_                actionListener.onFailure(pve.getException())__            }_        } finally {_            privilegedLogoutNoThrow(loginContext)__            privilegedDisposeNoThrow(gssContext)__        }_    };validates,client,kerberos,ticket,received,from,the,peer,p,first,performs,service,login,using,keytab,supports,multiple,principals,in,keytab,and,the,principal,is,selected,based,on,the,request,p,the,gss,security,context,establishment,state,is,handled,as,follows,br,if,the,context,is,established,it,will,call,link,action,listener,on,response,with,a,link,tuple,of,username,and,out,token,for,peer,reply,br,if,the,context,is,not,established,then,it,will,call,link,action,listener,on,response,with,a,tuple,where,username,is,null,but,with,a,out,token,that,needs,to,be,sent,to,peer,for,further,negotiation,br,never,calls,link,action,listener,on,response,with,a,code,null,tuple,br,on,failure,it,will,call,link,action,listener,on,failure,exception,param,decoded,token,base64,decoded,kerberos,ticket,bytes,param,keytab,path,path,to,service,key,tab,file,containing,credentials,for,es,service,param,krb,debug,if,code,true,enables,jaas,krb5,login,module,debug,logs;public,void,validate,ticket,final,byte,decoded,token,final,path,keytab,path,final,boolean,krb,debug,final,action,listener,tuple,string,string,action,listener,final,gssmanager,gss,manager,gssmanager,get,instance,gsscontext,gss,context,null,login,context,login,context,null,try,login,context,service,login,keytab,path,to,string,krb,debug,gsscredential,service,creds,create,credentials,gss,manager,login,context,get,subject,gss,context,gss,manager,create,context,service,creds,final,string,base64out,token,encode,to,string,accept,sec,context,decoded,token,gss,context,login,context,get,subject,logger,trace,validate,ticket,is,gsscontext,established,username,out,token,gss,context,is,established,gss,context,get,src,name,to,string,base64out,token,action,listener,on,response,new,tuple,gss,context,is,established,gss,context,get,src,name,to,string,null,base64out,token,catch,gssexception,e,action,listener,on,failure,e,catch,privileged,action,exception,pve,if,pve,get,cause,instanceof,login,exception,action,listener,on,failure,login,exception,pve,get,cause,else,if,pve,get,cause,instanceof,gssexception,action,listener,on,failure,gssexception,pve,get,cause,else,action,listener,on,failure,pve,get,exception,finally,privileged,logout,no,throw,login,context,privileged,dispose,no,throw,gss,context
KerberosTicketValidator -> public void validateTicket(final byte[] decodedToken, final Path keytabPath, final boolean krbDebug,             final ActionListener<Tuple<String, String>> actionListener);1539615817;Validates client kerberos ticket received from the peer._<p>_First performs service login using keytab, supports multiple principals in_keytab and the principal is selected based on the request._<p>_The GSS security context establishment state is handled as follows: <br>_If the context is established it will call {@link ActionListener#onResponse}_with a {@link Tuple} of username and outToken for peer reply. <br>_If the context is not established then it will call_{@link ActionListener#onResponse} with a Tuple where username is null but_with a outToken that needs to be sent to peer for further negotiation. <br>_Never calls {@link ActionListener#onResponse} with a {@code null} tuple. <br>_On failure, it will call {@link ActionListener#onFailure(Exception)}__@param decodedToken base64 decoded kerberos ticket bytes_@param keytabPath Path to Service key tab file containing credentials for ES_service._@param krbDebug if {@code true} enables jaas krb5 login module debug logs.;public void validateTicket(final byte[] decodedToken, final Path keytabPath, final boolean krbDebug,_            final ActionListener<Tuple<String, String>> actionListener) {_        final GSSManager gssManager = GSSManager.getInstance()__        GSSContext gssContext = null__        LoginContext loginContext = null__        try {_            loginContext = serviceLogin(keytabPath.toString(), krbDebug)__            GSSCredential serviceCreds = createCredentials(gssManager, loginContext.getSubject())__            gssContext = gssManager.createContext(serviceCreds)__            final String base64OutToken = encodeToString(acceptSecContext(decodedToken, gssContext, loginContext.getSubject()))__            LOGGER.trace("validateTicket isGSSContextEstablished = {}, username = {}, outToken = {}", gssContext.isEstablished(),_                    gssContext.getSrcName().toString(), base64OutToken)__            actionListener.onResponse(new Tuple<>(gssContext.isEstablished() ? gssContext.getSrcName().toString() : null, base64OutToken))__        } catch (GSSException e) {_            actionListener.onFailure(e)__        } catch (PrivilegedActionException pve) {_            if (pve.getCause() instanceof LoginException) {_                actionListener.onFailure((LoginException) pve.getCause())__            } else if (pve.getCause() instanceof GSSException) {_                actionListener.onFailure((GSSException) pve.getCause())__            } else {_                actionListener.onFailure(pve.getException())__            }_        } finally {_            privilegedLogoutNoThrow(loginContext)__            privilegedDisposeNoThrow(gssContext)__        }_    };validates,client,kerberos,ticket,received,from,the,peer,p,first,performs,service,login,using,keytab,supports,multiple,principals,in,keytab,and,the,principal,is,selected,based,on,the,request,p,the,gss,security,context,establishment,state,is,handled,as,follows,br,if,the,context,is,established,it,will,call,link,action,listener,on,response,with,a,link,tuple,of,username,and,out,token,for,peer,reply,br,if,the,context,is,not,established,then,it,will,call,link,action,listener,on,response,with,a,tuple,where,username,is,null,but,with,a,out,token,that,needs,to,be,sent,to,peer,for,further,negotiation,br,never,calls,link,action,listener,on,response,with,a,code,null,tuple,br,on,failure,it,will,call,link,action,listener,on,failure,exception,param,decoded,token,base64,decoded,kerberos,ticket,bytes,param,keytab,path,path,to,service,key,tab,file,containing,credentials,for,es,service,param,krb,debug,if,code,true,enables,jaas,krb5,login,module,debug,logs;public,void,validate,ticket,final,byte,decoded,token,final,path,keytab,path,final,boolean,krb,debug,final,action,listener,tuple,string,string,action,listener,final,gssmanager,gss,manager,gssmanager,get,instance,gsscontext,gss,context,null,login,context,login,context,null,try,login,context,service,login,keytab,path,to,string,krb,debug,gsscredential,service,creds,create,credentials,gss,manager,login,context,get,subject,gss,context,gss,manager,create,context,service,creds,final,string,base64out,token,encode,to,string,accept,sec,context,decoded,token,gss,context,login,context,get,subject,logger,trace,validate,ticket,is,gsscontext,established,username,out,token,gss,context,is,established,gss,context,get,src,name,to,string,base64out,token,action,listener,on,response,new,tuple,gss,context,is,established,gss,context,get,src,name,to,string,null,base64out,token,catch,gssexception,e,action,listener,on,failure,e,catch,privileged,action,exception,pve,if,pve,get,cause,instanceof,login,exception,action,listener,on,failure,login,exception,pve,get,cause,else,if,pve,get,cause,instanceof,gssexception,action,listener,on,failure,gssexception,pve,get,cause,else,action,listener,on,failure,pve,get,exception,finally,privileged,logout,no,throw,login,context,privileged,dispose,no,throw,gss,context
KerberosTicketValidator -> public void validateTicket(final byte[] decodedToken, final Path keytabPath, final boolean krbDebug,             final ActionListener<Tuple<String, String>> actionListener);1543372183;Validates client kerberos ticket received from the peer._<p>_First performs service login using keytab, supports multiple principals in_keytab and the principal is selected based on the request._<p>_The GSS security context establishment state is handled as follows: <br>_If the context is established it will call {@link ActionListener#onResponse}_with a {@link Tuple} of username and outToken for peer reply. <br>_If the context is not established then it will call_{@link ActionListener#onResponse} with a Tuple where username is null but_with a outToken that needs to be sent to peer for further negotiation. <br>_Never calls {@link ActionListener#onResponse} with a {@code null} tuple. <br>_On failure, it will call {@link ActionListener#onFailure(Exception)}__@param decodedToken base64 decoded kerberos ticket bytes_@param keytabPath Path to Service key tab file containing credentials for ES_service._@param krbDebug if {@code true} enables jaas krb5 login module debug logs.;public void validateTicket(final byte[] decodedToken, final Path keytabPath, final boolean krbDebug,_            final ActionListener<Tuple<String, String>> actionListener) {_        final GSSManager gssManager = GSSManager.getInstance()__        GSSContext gssContext = null__        LoginContext loginContext = null__        try {_            loginContext = serviceLogin(keytabPath.toString(), krbDebug)__            GSSCredential serviceCreds = createCredentials(gssManager, loginContext.getSubject())__            gssContext = gssManager.createContext(serviceCreds)__            final String base64OutToken = encodeToString(acceptSecContext(decodedToken, gssContext, loginContext.getSubject()))__            LOGGER.trace("validateTicket isGSSContextEstablished = {}, username = {}, outToken = {}", gssContext.isEstablished(),_                    gssContext.getSrcName().toString(), base64OutToken)__            actionListener.onResponse(new Tuple<>(gssContext.isEstablished() ? gssContext.getSrcName().toString() : null, base64OutToken))__        } catch (GSSException e) {_            actionListener.onFailure(e)__        } catch (PrivilegedActionException pve) {_            if (pve.getCause() instanceof LoginException) {_                actionListener.onFailure((LoginException) pve.getCause())__            } else if (pve.getCause() instanceof GSSException) {_                actionListener.onFailure((GSSException) pve.getCause())__            } else {_                actionListener.onFailure(pve.getException())__            }_        } finally {_            privilegedLogoutNoThrow(loginContext)__            privilegedDisposeNoThrow(gssContext)__        }_    };validates,client,kerberos,ticket,received,from,the,peer,p,first,performs,service,login,using,keytab,supports,multiple,principals,in,keytab,and,the,principal,is,selected,based,on,the,request,p,the,gss,security,context,establishment,state,is,handled,as,follows,br,if,the,context,is,established,it,will,call,link,action,listener,on,response,with,a,link,tuple,of,username,and,out,token,for,peer,reply,br,if,the,context,is,not,established,then,it,will,call,link,action,listener,on,response,with,a,tuple,where,username,is,null,but,with,a,out,token,that,needs,to,be,sent,to,peer,for,further,negotiation,br,never,calls,link,action,listener,on,response,with,a,code,null,tuple,br,on,failure,it,will,call,link,action,listener,on,failure,exception,param,decoded,token,base64,decoded,kerberos,ticket,bytes,param,keytab,path,path,to,service,key,tab,file,containing,credentials,for,es,service,param,krb,debug,if,code,true,enables,jaas,krb5,login,module,debug,logs;public,void,validate,ticket,final,byte,decoded,token,final,path,keytab,path,final,boolean,krb,debug,final,action,listener,tuple,string,string,action,listener,final,gssmanager,gss,manager,gssmanager,get,instance,gsscontext,gss,context,null,login,context,login,context,null,try,login,context,service,login,keytab,path,to,string,krb,debug,gsscredential,service,creds,create,credentials,gss,manager,login,context,get,subject,gss,context,gss,manager,create,context,service,creds,final,string,base64out,token,encode,to,string,accept,sec,context,decoded,token,gss,context,login,context,get,subject,logger,trace,validate,ticket,is,gsscontext,established,username,out,token,gss,context,is,established,gss,context,get,src,name,to,string,base64out,token,action,listener,on,response,new,tuple,gss,context,is,established,gss,context,get,src,name,to,string,null,base64out,token,catch,gssexception,e,action,listener,on,failure,e,catch,privileged,action,exception,pve,if,pve,get,cause,instanceof,login,exception,action,listener,on,failure,login,exception,pve,get,cause,else,if,pve,get,cause,instanceof,gssexception,action,listener,on,failure,gssexception,pve,get,cause,else,action,listener,on,failure,pve,get,exception,finally,privileged,logout,no,throw,login,context,privileged,dispose,no,throw,gss,context
KerberosTicketValidator -> private static GSSCredential createCredentials(final GSSManager gssManager, final Subject subject) throws PrivilegedActionException;1532456624;For acquiring SPNEGO mechanism credentials for service based on the subject__@param gssManager {@link GSSManager}_@param subject logged in {@link Subject}_@return {@link GSSCredential} for particular mechanism_@throws PrivilegedActionException;private static GSSCredential createCredentials(final GSSManager gssManager, final Subject subject) throws PrivilegedActionException {_        return doAsWrapper(subject, (PrivilegedExceptionAction<GSSCredential>) () -> gssManager.createCredential(null,_                GSSCredential.DEFAULT_LIFETIME, SPNEGO_OID, GSSCredential.ACCEPT_ONLY))__    };for,acquiring,spnego,mechanism,credentials,for,service,based,on,the,subject,param,gss,manager,link,gssmanager,param,subject,logged,in,link,subject,return,link,gsscredential,for,particular,mechanism,throws,privileged,action,exception;private,static,gsscredential,create,credentials,final,gssmanager,gss,manager,final,subject,subject,throws,privileged,action,exception,return,do,as,wrapper,subject,privileged,exception,action,gsscredential,gss,manager,create,credential,null,gsscredential,gsscredential
KerberosTicketValidator -> private static GSSCredential createCredentials(final GSSManager gssManager, final Subject subject) throws PrivilegedActionException;1532685069;For acquiring SPNEGO mechanism credentials for service based on the subject__@param gssManager {@link GSSManager}_@param subject logged in {@link Subject}_@return {@link GSSCredential} for particular mechanism_@throws PrivilegedActionException when privileged action threw exception;private static GSSCredential createCredentials(final GSSManager gssManager, final Subject subject) throws PrivilegedActionException {_        return doAsWrapper(subject, (PrivilegedExceptionAction<GSSCredential>) () -> gssManager.createCredential(null,_                GSSCredential.DEFAULT_LIFETIME, SPNEGO_OID, GSSCredential.ACCEPT_ONLY))__    };for,acquiring,spnego,mechanism,credentials,for,service,based,on,the,subject,param,gss,manager,link,gssmanager,param,subject,logged,in,link,subject,return,link,gsscredential,for,particular,mechanism,throws,privileged,action,exception,when,privileged,action,threw,exception;private,static,gsscredential,create,credentials,final,gssmanager,gss,manager,final,subject,subject,throws,privileged,action,exception,return,do,as,wrapper,subject,privileged,exception,action,gsscredential,gss,manager,create,credential,null,gsscredential,gsscredential
KerberosTicketValidator -> private static GSSCredential createCredentials(final GSSManager gssManager, final Subject subject) throws PrivilegedActionException;1539615817;For acquiring SPNEGO mechanism credentials for service based on the subject__@param gssManager {@link GSSManager}_@param subject logged in {@link Subject}_@return {@link GSSCredential} for particular mechanism_@throws PrivilegedActionException when privileged action threw exception;private static GSSCredential createCredentials(final GSSManager gssManager, final Subject subject) throws PrivilegedActionException {_        return doAsWrapper(subject, (PrivilegedExceptionAction<GSSCredential>) () -> gssManager.createCredential(null,_                GSSCredential.DEFAULT_LIFETIME, SPNEGO_OID, GSSCredential.ACCEPT_ONLY))__    };for,acquiring,spnego,mechanism,credentials,for,service,based,on,the,subject,param,gss,manager,link,gssmanager,param,subject,logged,in,link,subject,return,link,gsscredential,for,particular,mechanism,throws,privileged,action,exception,when,privileged,action,threw,exception;private,static,gsscredential,create,credentials,final,gssmanager,gss,manager,final,subject,subject,throws,privileged,action,exception,return,do,as,wrapper,subject,privileged,exception,action,gsscredential,gss,manager,create,credential,null,gsscredential,gsscredential
KerberosTicketValidator -> private static GSSCredential createCredentials(final GSSManager gssManager, final Subject subject) throws PrivilegedActionException;1543372183;For acquiring SPNEGO mechanism credentials for service based on the subject__@param gssManager {@link GSSManager}_@param subject logged in {@link Subject}_@return {@link GSSCredential} for particular mechanism_@throws PrivilegedActionException when privileged action threw exception;private static GSSCredential createCredentials(final GSSManager gssManager, final Subject subject) throws PrivilegedActionException {_        return doAsWrapper(subject, (PrivilegedExceptionAction<GSSCredential>) () -> gssManager.createCredential(null,_                GSSCredential.DEFAULT_LIFETIME, SUPPORTED_OIDS, GSSCredential.ACCEPT_ONLY))__    };for,acquiring,spnego,mechanism,credentials,for,service,based,on,the,subject,param,gss,manager,link,gssmanager,param,subject,logged,in,link,subject,return,link,gsscredential,for,particular,mechanism,throws,privileged,action,exception,when,privileged,action,threw,exception;private,static,gsscredential,create,credentials,final,gssmanager,gss,manager,final,subject,subject,throws,privileged,action,exception,return,do,as,wrapper,subject,privileged,exception,action,gsscredential,gss,manager,create,credential,null,gsscredential,gsscredential
