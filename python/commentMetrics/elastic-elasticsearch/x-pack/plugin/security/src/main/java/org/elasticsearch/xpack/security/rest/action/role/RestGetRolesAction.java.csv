commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "security_get_roles_action". }
false;public;2;18;;@Override public RestResponse buildResponse(GetRolesResponse response, XContentBuilder builder) throws Exception {     builder.startObject().     for (RoleDescriptor role : response.roles()) {         builder.field(role.getName(), role).     }     builder.endObject().     // we'll return an empty result and 404 status code     if (roles.length != 0 && response.roles().length == 0) {         return new BytesRestResponse(RestStatus.NOT_FOUND, builder).     }     // the user asked for was found     return new BytesRestResponse(RestStatus.OK, builder). }
false;public;2;24;;@Override public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {     final String[] roles = request.paramAsStringArray("name", Strings.EMPTY_ARRAY).     return channel -> new SecurityClient(client).prepareGetRoles(roles).execute(new RestBuilderListener<GetRolesResponse>(channel) {          @Override         public RestResponse buildResponse(GetRolesResponse response, XContentBuilder builder) throws Exception {             builder.startObject().             for (RoleDescriptor role : response.roles()) {                 builder.field(role.getName(), role).             }             builder.endObject().             // we'll return an empty result and 404 status code             if (roles.length != 0 && response.roles().length == 0) {                 return new BytesRestResponse(RestStatus.NOT_FOUND, builder).             }             // the user asked for was found             return new BytesRestResponse(RestStatus.OK, builder).         }     }). }
