# id;timestamp;commentText;codeText;commentWords;codeWords
NativeRolesStore -> public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener);1539723533;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(RoleRetrievalResult.success(Collections.emptySet()))__        } else if (names != null && names.size() == 1) {_            getRoleDescriptor(Objects.requireNonNull(names.iterator().next()), listener)__        } else {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                QueryBuilder query__                if (names == null || names.isEmpty()) {_                    query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                } else {_                    final String[] roleNames = names.stream().map(NativeRolesStore::getIdForUser).toArray(String[]::new)__                    query = QueryBuilders.boolQuery().filter(QueryBuilders.idsQuery(ROLE_DOC_TYPE).addIds(roleNames))__                }_                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                            .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                            .setQuery(query)_                            .setSize(1000)_                            .setFetchSource(true)_                            .request()__                    request.indicesOptions().ignoreUnavailable()__                    final ActionListener<Collection<RoleDescriptor>> descriptorsListener = ActionListener.wrap(_                        roleDescriptors -> listener.onResponse(RoleRetrievalResult.success(new HashSet<>(roleDescriptors))),_                        e -> listener.onResponse(RoleRetrievalResult.failure(e)))__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier, descriptorsListener),_                            (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,set,string,names,final,action,listener,role,retrieval,result,listener,if,security,index,index,exists,false,listener,on,response,role,retrieval,result,success,collections,empty,set,else,if,names,null,names,size,1,get,role,descriptor,objects,require,non,null,names,iterator,next,listener,else,security,index,check,index,version,then,execute,listener,on,failure,query,builder,query,if,names,null,names,is,empty,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,else,final,string,role,names,names,stream,map,native,roles,store,get,id,for,user,to,array,string,new,query,query,builders,bool,query,filter,query,builders,ids,query,add,ids,role,names,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,get,settings,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,final,action,listener,collection,role,descriptor,descriptors,listener,action,listener,wrap,role,descriptors,listener,on,response,role,retrieval,result,success,new,hash,set,role,descriptors,e,listener,on,response,role,retrieval,result,failure,e,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,descriptors,listener,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state
NativeRolesStore -> public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener);1539796943;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(RoleRetrievalResult.success(Collections.emptySet()))__        } else if (names != null && names.size() == 1) {_            getRoleDescriptor(Objects.requireNonNull(names.iterator().next()), listener)__        } else {_            securityIndex.prepareIndexIfNeededThenExecute(listener::onFailure, () -> {_                QueryBuilder query__                if (names == null || names.isEmpty()) {_                    query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                } else {_                    final String[] roleNames = names.stream().map(NativeRolesStore::getIdForUser).toArray(String[]::new)__                    query = QueryBuilders.boolQuery().filter(QueryBuilders.idsQuery(ROLE_DOC_TYPE).addIds(roleNames))__                }_                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                            .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                            .setQuery(query)_                            .setSize(1000)_                            .setFetchSource(true)_                            .request()__                    request.indicesOptions().ignoreUnavailable()__                    final ActionListener<Collection<RoleDescriptor>> descriptorsListener = ActionListener.wrap(_                        roleDescriptors -> listener.onResponse(RoleRetrievalResult.success(new HashSet<>(roleDescriptors))),_                        e -> listener.onResponse(RoleRetrievalResult.failure(e)))__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier, descriptorsListener),_                            (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,set,string,names,final,action,listener,role,retrieval,result,listener,if,security,index,index,exists,false,listener,on,response,role,retrieval,result,success,collections,empty,set,else,if,names,null,names,size,1,get,role,descriptor,objects,require,non,null,names,iterator,next,listener,else,security,index,prepare,index,if,needed,then,execute,listener,on,failure,query,builder,query,if,names,null,names,is,empty,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,else,final,string,role,names,names,stream,map,native,roles,store,get,id,for,user,to,array,string,new,query,query,builders,bool,query,filter,query,builders,ids,query,add,ids,role,names,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,get,settings,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,final,action,listener,collection,role,descriptor,descriptors,listener,action,listener,wrap,role,descriptors,listener,on,response,role,retrieval,result,success,new,hash,set,role,descriptors,e,listener,on,response,role,retrieval,result,failure,e,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,descriptors,listener,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state
NativeRolesStore -> public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener);1540238977;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(RoleRetrievalResult.success(Collections.emptySet()))__        } else if (names != null && names.size() == 1) {_            getRoleDescriptor(Objects.requireNonNull(names.iterator().next()), listener)__        } else {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                QueryBuilder query__                if (names == null || names.isEmpty()) {_                    query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                } else {_                    final String[] roleNames = names.stream().map(NativeRolesStore::getIdForUser).toArray(String[]::new)__                    query = QueryBuilders.boolQuery().filter(QueryBuilders.idsQuery(ROLE_DOC_TYPE).addIds(roleNames))__                }_                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                            .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                            .setQuery(query)_                            .setSize(1000)_                            .setFetchSource(true)_                            .request()__                    request.indicesOptions().ignoreUnavailable()__                    final ActionListener<Collection<RoleDescriptor>> descriptorsListener = ActionListener.wrap(_                        roleDescriptors -> listener.onResponse(RoleRetrievalResult.success(new HashSet<>(roleDescriptors))),_                        e -> listener.onResponse(RoleRetrievalResult.failure(e)))__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier, descriptorsListener),_                            (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,set,string,names,final,action,listener,role,retrieval,result,listener,if,security,index,index,exists,false,listener,on,response,role,retrieval,result,success,collections,empty,set,else,if,names,null,names,size,1,get,role,descriptor,objects,require,non,null,names,iterator,next,listener,else,security,index,check,index,version,then,execute,listener,on,failure,query,builder,query,if,names,null,names,is,empty,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,else,final,string,role,names,names,stream,map,native,roles,store,get,id,for,user,to,array,string,new,query,query,builders,bool,query,filter,query,builders,ids,query,add,ids,role,names,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,get,settings,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,final,action,listener,collection,role,descriptor,descriptors,listener,action,listener,wrap,role,descriptors,listener,on,response,role,retrieval,result,success,new,hash,set,role,descriptors,e,listener,on,response,role,retrieval,result,failure,e,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,descriptors,listener,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state
NativeRolesStore -> public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener);1541008027;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(RoleRetrievalResult.success(Collections.emptySet()))__        } else if (names == null || names.isEmpty()) {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                QueryBuilder query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                        .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                        .setQuery(query)_                        .setSize(1000)_                        .setFetchSource(true)_                        .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(roles -> listener.onResponse(RoleRetrievalResult.success(new HashSet<>(roles))),_                                e -> listener.onResponse(RoleRetrievalResult.failure(e)))),_                        (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        } else if (names.size() == 1) {_            getRoleDescriptor(Objects.requireNonNull(names.iterator().next()), listener)__        } else {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                final String[] roleIds = names.stream().map(NativeRolesStore::getIdForRole).toArray(String[]::new)__                MultiGetRequest multiGetRequest = client.prepareMultiGet().add(SECURITY_INDEX_NAME, ROLE_DOC_TYPE, roleIds).request()__                executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, multiGetRequest,_                    ActionListener.<MultiGetResponse>wrap(mGetResponse -> {_                            final MultiGetItemResponse[] responses = mGetResponse.getResponses()__                            Set<RoleDescriptor> descriptors = new HashSet<>()__                            for (int i = 0_ i < responses.length_ i++) {_                                MultiGetItemResponse item = responses[i]__                                if (item.isFailed()) {_                                    final Exception failure = item.getFailure().getFailure()__                                    for (int j = i + 1_ j < responses.length_ j++) {_                                        item = responses[j]__                                        if (item.isFailed()) {_                                            failure.addSuppressed(failure)__                                        }_                                    }_                                    listener.onResponse(RoleRetrievalResult.failure(failure))__                                    return__                                } else if (item.getResponse().isExists()) {_                                    descriptors.add(transformRole(item.getResponse()))__                                }_                            }_                            listener.onResponse(RoleRetrievalResult.success(descriptors))__                        },_                        e -> listener.onResponse(RoleRetrievalResult.failure(e))), client::multiGet)__            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,set,string,names,final,action,listener,role,retrieval,result,listener,if,security,index,index,exists,false,listener,on,response,role,retrieval,result,success,collections,empty,set,else,if,names,null,names,is,empty,security,index,check,index,version,then,execute,listener,on,failure,query,builder,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,get,settings,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,roles,listener,on,response,role,retrieval,result,success,new,hash,set,roles,e,listener,on,response,role,retrieval,result,failure,e,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state,else,if,names,size,1,get,role,descriptor,objects,require,non,null,names,iterator,next,listener,else,security,index,check,index,version,then,execute,listener,on,failure,final,string,role,ids,names,stream,map,native,roles,store,get,id,for,role,to,array,string,new,multi,get,request,multi,get,request,client,prepare,multi,get,add,role,ids,request,execute,async,with,origin,client,thread,pool,get,thread,context,multi,get,request,action,listener,multi,get,response,wrap,m,get,response,final,multi,get,item,response,responses,m,get,response,get,responses,set,role,descriptor,descriptors,new,hash,set,for,int,i,0,i,responses,length,i,multi,get,item,response,item,responses,i,if,item,is,failed,final,exception,failure,item,get,failure,get,failure,for,int,j,i,1,j,responses,length,j,item,responses,j,if,item,is,failed,failure,add,suppressed,failure,listener,on,response,role,retrieval,result,failure,failure,return,else,if,item,get,response,is,exists,descriptors,add,transform,role,item,get,response,listener,on,response,role,retrieval,result,success,descriptors,e,listener,on,response,role,retrieval,result,failure,e,client,multi,get
NativeRolesStore -> public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener);1541092382;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(RoleRetrievalResult.success(Collections.emptySet()))__        } else if (names == null || names.isEmpty()) {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                QueryBuilder query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                        .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                        .setQuery(query)_                        .setSize(1000)_                        .setFetchSource(true)_                        .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(roles -> listener.onResponse(RoleRetrievalResult.success(new HashSet<>(roles))),_                                e -> listener.onResponse(RoleRetrievalResult.failure(e)))),_                        (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        } else if (names.size() == 1) {_            getRoleDescriptor(Objects.requireNonNull(names.iterator().next()), listener)__        } else {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                final String[] roleIds = names.stream().map(NativeRolesStore::getIdForRole).toArray(String[]::new)__                MultiGetRequest multiGetRequest = client.prepareMultiGet().add(SECURITY_INDEX_NAME, ROLE_DOC_TYPE, roleIds).request()__                executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, multiGetRequest,_                    ActionListener.<MultiGetResponse>wrap(mGetResponse -> {_                            final MultiGetItemResponse[] responses = mGetResponse.getResponses()__                            Set<RoleDescriptor> descriptors = new HashSet<>()__                            for (int i = 0_ i < responses.length_ i++) {_                                MultiGetItemResponse item = responses[i]__                                if (item.isFailed()) {_                                    final Exception failure = item.getFailure().getFailure()__                                    for (int j = i + 1_ j < responses.length_ j++) {_                                        item = responses[j]__                                        if (item.isFailed()) {_                                            failure.addSuppressed(failure)__                                        }_                                    }_                                    listener.onResponse(RoleRetrievalResult.failure(failure))__                                    return__                                } else if (item.getResponse().isExists()) {_                                    descriptors.add(transformRole(item.getResponse()))__                                }_                            }_                            listener.onResponse(RoleRetrievalResult.success(descriptors))__                        },_                        e -> listener.onResponse(RoleRetrievalResult.failure(e))), client::multiGet)__            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,set,string,names,final,action,listener,role,retrieval,result,listener,if,security,index,index,exists,false,listener,on,response,role,retrieval,result,success,collections,empty,set,else,if,names,null,names,is,empty,security,index,check,index,version,then,execute,listener,on,failure,query,builder,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,get,settings,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,roles,listener,on,response,role,retrieval,result,success,new,hash,set,roles,e,listener,on,response,role,retrieval,result,failure,e,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state,else,if,names,size,1,get,role,descriptor,objects,require,non,null,names,iterator,next,listener,else,security,index,check,index,version,then,execute,listener,on,failure,final,string,role,ids,names,stream,map,native,roles,store,get,id,for,role,to,array,string,new,multi,get,request,multi,get,request,client,prepare,multi,get,add,role,ids,request,execute,async,with,origin,client,thread,pool,get,thread,context,multi,get,request,action,listener,multi,get,response,wrap,m,get,response,final,multi,get,item,response,responses,m,get,response,get,responses,set,role,descriptor,descriptors,new,hash,set,for,int,i,0,i,responses,length,i,multi,get,item,response,item,responses,i,if,item,is,failed,final,exception,failure,item,get,failure,get,failure,for,int,j,i,1,j,responses,length,j,item,responses,j,if,item,is,failed,failure,add,suppressed,failure,listener,on,response,role,retrieval,result,failure,failure,return,else,if,item,get,response,is,exists,descriptors,add,transform,role,item,get,response,listener,on,response,role,retrieval,result,success,descriptors,e,listener,on,response,role,retrieval,result,failure,e,client,multi,get
NativeRolesStore -> public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener);1541169206;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(RoleRetrievalResult.success(Collections.emptySet()))__        } else if (names == null || names.isEmpty()) {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                QueryBuilder query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                        .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                        .setQuery(query)_                        .setSize(1000)_                        .setFetchSource(true)_                        .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(roles -> listener.onResponse(RoleRetrievalResult.success(new HashSet<>(roles))),_                                e -> listener.onResponse(RoleRetrievalResult.failure(e)))),_                        (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        } else if (names.size() == 1) {_            getRoleDescriptor(Objects.requireNonNull(names.iterator().next()), listener)__        } else {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                final String[] roleIds = names.stream().map(NativeRolesStore::getIdForRole).toArray(String[]::new)__                MultiGetRequest multiGetRequest = client.prepareMultiGet().add(SECURITY_INDEX_NAME, ROLE_DOC_TYPE, roleIds).request()__                executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, multiGetRequest,_                    ActionListener.<MultiGetResponse>wrap(mGetResponse -> {_                            final MultiGetItemResponse[] responses = mGetResponse.getResponses()__                            Set<RoleDescriptor> descriptors = new HashSet<>()__                            for (int i = 0_ i < responses.length_ i++) {_                                MultiGetItemResponse item = responses[i]__                                if (item.isFailed()) {_                                    final Exception failure = item.getFailure().getFailure()__                                    for (int j = i + 1_ j < responses.length_ j++) {_                                        item = responses[j]__                                        if (item.isFailed()) {_                                            failure.addSuppressed(failure)__                                        }_                                    }_                                    listener.onResponse(RoleRetrievalResult.failure(failure))__                                    return__                                } else if (item.getResponse().isExists()) {_                                    descriptors.add(transformRole(item.getResponse()))__                                }_                            }_                            listener.onResponse(RoleRetrievalResult.success(descriptors))__                        },_                        e -> listener.onResponse(RoleRetrievalResult.failure(e))), client::multiGet)__            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,set,string,names,final,action,listener,role,retrieval,result,listener,if,security,index,index,exists,false,listener,on,response,role,retrieval,result,success,collections,empty,set,else,if,names,null,names,is,empty,security,index,check,index,version,then,execute,listener,on,failure,query,builder,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,get,settings,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,roles,listener,on,response,role,retrieval,result,success,new,hash,set,roles,e,listener,on,response,role,retrieval,result,failure,e,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state,else,if,names,size,1,get,role,descriptor,objects,require,non,null,names,iterator,next,listener,else,security,index,check,index,version,then,execute,listener,on,failure,final,string,role,ids,names,stream,map,native,roles,store,get,id,for,role,to,array,string,new,multi,get,request,multi,get,request,client,prepare,multi,get,add,role,ids,request,execute,async,with,origin,client,thread,pool,get,thread,context,multi,get,request,action,listener,multi,get,response,wrap,m,get,response,final,multi,get,item,response,responses,m,get,response,get,responses,set,role,descriptor,descriptors,new,hash,set,for,int,i,0,i,responses,length,i,multi,get,item,response,item,responses,i,if,item,is,failed,final,exception,failure,item,get,failure,get,failure,for,int,j,i,1,j,responses,length,j,item,responses,j,if,item,is,failed,failure,add,suppressed,failure,listener,on,response,role,retrieval,result,failure,failure,return,else,if,item,get,response,is,exists,descriptors,add,transform,role,item,get,response,listener,on,response,role,retrieval,result,success,descriptors,e,listener,on,response,role,retrieval,result,failure,e,client,multi,get
NativeRolesStore -> public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener);1544035746;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(RoleRetrievalResult.success(Collections.emptySet()))__        } else if (names == null || names.isEmpty()) {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                QueryBuilder query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                        .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                        .setQuery(query)_                        .setSize(1000)_                        .setFetchSource(true)_                        .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(roles -> listener.onResponse(RoleRetrievalResult.success(new HashSet<>(roles))),_                                e -> listener.onResponse(RoleRetrievalResult.failure(e)))),_                        (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        } else if (names.size() == 1) {_            getRoleDescriptor(Objects.requireNonNull(names.iterator().next()), listener)__        } else {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                final String[] roleIds = names.stream().map(NativeRolesStore::getIdForRole).toArray(String[]::new)__                MultiGetRequest multiGetRequest = client.prepareMultiGet().add(SECURITY_INDEX_NAME, ROLE_DOC_TYPE, roleIds).request()__                executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, multiGetRequest,_                    ActionListener.<MultiGetResponse>wrap(mGetResponse -> {_                            final MultiGetItemResponse[] responses = mGetResponse.getResponses()__                            Set<RoleDescriptor> descriptors = new HashSet<>()__                            for (int i = 0_ i < responses.length_ i++) {_                                MultiGetItemResponse item = responses[i]__                                if (item.isFailed()) {_                                    final Exception failure = item.getFailure().getFailure()__                                    for (int j = i + 1_ j < responses.length_ j++) {_                                        item = responses[j]__                                        if (item.isFailed()) {_                                            failure.addSuppressed(failure)__                                        }_                                    }_                                    listener.onResponse(RoleRetrievalResult.failure(failure))__                                    return__                                } else if (item.getResponse().isExists()) {_                                    descriptors.add(transformRole(item.getResponse()))__                                }_                            }_                            listener.onResponse(RoleRetrievalResult.success(descriptors))__                        },_                        e -> listener.onResponse(RoleRetrievalResult.failure(e))), client::multiGet)__            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,set,string,names,final,action,listener,role,retrieval,result,listener,if,security,index,index,exists,false,listener,on,response,role,retrieval,result,success,collections,empty,set,else,if,names,null,names,is,empty,security,index,check,index,version,then,execute,listener,on,failure,query,builder,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,get,settings,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,roles,listener,on,response,role,retrieval,result,success,new,hash,set,roles,e,listener,on,response,role,retrieval,result,failure,e,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state,else,if,names,size,1,get,role,descriptor,objects,require,non,null,names,iterator,next,listener,else,security,index,check,index,version,then,execute,listener,on,failure,final,string,role,ids,names,stream,map,native,roles,store,get,id,for,role,to,array,string,new,multi,get,request,multi,get,request,client,prepare,multi,get,add,role,ids,request,execute,async,with,origin,client,thread,pool,get,thread,context,multi,get,request,action,listener,multi,get,response,wrap,m,get,response,final,multi,get,item,response,responses,m,get,response,get,responses,set,role,descriptor,descriptors,new,hash,set,for,int,i,0,i,responses,length,i,multi,get,item,response,item,responses,i,if,item,is,failed,final,exception,failure,item,get,failure,get,failure,for,int,j,i,1,j,responses,length,j,item,responses,j,if,item,is,failed,failure,add,suppressed,failure,listener,on,response,role,retrieval,result,failure,failure,return,else,if,item,get,response,is,exists,descriptors,add,transform,role,item,get,response,listener,on,response,role,retrieval,result,success,descriptors,e,listener,on,response,role,retrieval,result,failure,e,client,multi,get
NativeRolesStore -> public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener);1548420339;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(RoleRetrievalResult.success(Collections.emptySet()))__        } else if (names == null || names.isEmpty()) {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                QueryBuilder query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                        .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                        .setQuery(query)_                        .setSize(1000)_                        .setFetchSource(true)_                        .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(roles -> listener.onResponse(RoleRetrievalResult.success(new HashSet<>(roles))),_                                e -> listener.onResponse(RoleRetrievalResult.failure(e)))),_                        (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        } else if (names.size() == 1) {_            getRoleDescriptor(Objects.requireNonNull(names.iterator().next()), listener)__        } else {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                final String[] roleIds = names.stream().map(NativeRolesStore::getIdForRole).toArray(String[]::new)__                MultiGetRequest multiGetRequest = client.prepareMultiGet().add(SECURITY_INDEX_NAME, ROLE_DOC_TYPE, roleIds).request()__                executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, multiGetRequest,_                    ActionListener.<MultiGetResponse>wrap(mGetResponse -> {_                            final MultiGetItemResponse[] responses = mGetResponse.getResponses()__                            Set<RoleDescriptor> descriptors = new HashSet<>()__                            for (int i = 0_ i < responses.length_ i++) {_                                MultiGetItemResponse item = responses[i]__                                if (item.isFailed()) {_                                    final Exception failure = item.getFailure().getFailure()__                                    for (int j = i + 1_ j < responses.length_ j++) {_                                        item = responses[j]__                                        if (item.isFailed()) {_                                            failure.addSuppressed(failure)__                                        }_                                    }_                                    listener.onResponse(RoleRetrievalResult.failure(failure))__                                    return__                                } else if (item.getResponse().isExists()) {_                                    descriptors.add(transformRole(item.getResponse()))__                                }_                            }_                            listener.onResponse(RoleRetrievalResult.success(descriptors))__                        },_                        e -> listener.onResponse(RoleRetrievalResult.failure(e))), client::multiGet)__            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,set,string,names,final,action,listener,role,retrieval,result,listener,if,security,index,index,exists,false,listener,on,response,role,retrieval,result,success,collections,empty,set,else,if,names,null,names,is,empty,security,index,check,index,version,then,execute,listener,on,failure,query,builder,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,get,settings,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,roles,listener,on,response,role,retrieval,result,success,new,hash,set,roles,e,listener,on,response,role,retrieval,result,failure,e,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state,else,if,names,size,1,get,role,descriptor,objects,require,non,null,names,iterator,next,listener,else,security,index,check,index,version,then,execute,listener,on,failure,final,string,role,ids,names,stream,map,native,roles,store,get,id,for,role,to,array,string,new,multi,get,request,multi,get,request,client,prepare,multi,get,add,role,ids,request,execute,async,with,origin,client,thread,pool,get,thread,context,multi,get,request,action,listener,multi,get,response,wrap,m,get,response,final,multi,get,item,response,responses,m,get,response,get,responses,set,role,descriptor,descriptors,new,hash,set,for,int,i,0,i,responses,length,i,multi,get,item,response,item,responses,i,if,item,is,failed,final,exception,failure,item,get,failure,get,failure,for,int,j,i,1,j,responses,length,j,item,responses,j,if,item,is,failed,failure,add,suppressed,failure,listener,on,response,role,retrieval,result,failure,failure,return,else,if,item,get,response,is,exists,descriptors,add,transform,role,item,get,response,listener,on,response,role,retrieval,result,success,descriptors,e,listener,on,response,role,retrieval,result,failure,e,client,multi,get
NativeRolesStore -> public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener);1550669555;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(Set<String> names, final ActionListener<RoleRetrievalResult> listener) {_        final SecurityIndexManager frozenSecurityIndex = this.securityIndex.freeze()__        if (frozenSecurityIndex.indexExists() == false) {_            _            listener.onResponse(RoleRetrievalResult.success(Collections.emptySet()))__        } else if (frozenSecurityIndex.isAvailable() == false) {_            listener.onResponse(RoleRetrievalResult.failure(frozenSecurityIndex.getUnavailableReason()))__        } else if (names == null || names.isEmpty()) {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                QueryBuilder query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                        .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                        .setQuery(query)_                        .setSize(1000)_                        .setFetchSource(true)_                        .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier,_                            ActionListener.wrap(roles -> listener.onResponse(RoleRetrievalResult.success(new HashSet<>(roles))),_                                e -> listener.onResponse(RoleRetrievalResult.failure(e)))),_                        (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        } else if (names.size() == 1) {_            getRoleDescriptor(Objects.requireNonNull(names.iterator().next()), listener)__        } else {_            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {_                final String[] roleIds = names.stream().map(NativeRolesStore::getIdForRole).toArray(String[]::new)__                MultiGetRequest multiGetRequest = client.prepareMultiGet().add(SECURITY_INDEX_NAME, ROLE_DOC_TYPE, roleIds).request()__                executeAsyncWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN, multiGetRequest,_                    ActionListener.<MultiGetResponse>wrap(mGetResponse -> {_                            final MultiGetItemResponse[] responses = mGetResponse.getResponses()__                            Set<RoleDescriptor> descriptors = new HashSet<>()__                            for (int i = 0_ i < responses.length_ i++) {_                                MultiGetItemResponse item = responses[i]__                                if (item.isFailed()) {_                                    final Exception failure = item.getFailure().getFailure()__                                    for (int j = i + 1_ j < responses.length_ j++) {_                                        item = responses[j]__                                        if (item.isFailed()) {_                                            failure.addSuppressed(failure)__                                        }_                                    }_                                    listener.onResponse(RoleRetrievalResult.failure(failure))__                                    return__                                } else if (item.getResponse().isExists()) {_                                    descriptors.add(transformRole(item.getResponse()))__                                }_                            }_                            listener.onResponse(RoleRetrievalResult.success(descriptors))__                        },_                        e -> listener.onResponse(RoleRetrievalResult.failure(e))), client::multiGet)__            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,set,string,names,final,action,listener,role,retrieval,result,listener,final,security,index,manager,frozen,security,index,this,security,index,freeze,if,frozen,security,index,index,exists,false,listener,on,response,role,retrieval,result,success,collections,empty,set,else,if,frozen,security,index,is,available,false,listener,on,response,role,retrieval,result,failure,frozen,security,index,get,unavailable,reason,else,if,names,null,names,is,empty,security,index,check,index,version,then,execute,listener,on,failure,query,builder,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,get,settings,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,action,listener,wrap,roles,listener,on,response,role,retrieval,result,success,new,hash,set,roles,e,listener,on,response,role,retrieval,result,failure,e,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state,else,if,names,size,1,get,role,descriptor,objects,require,non,null,names,iterator,next,listener,else,security,index,check,index,version,then,execute,listener,on,failure,final,string,role,ids,names,stream,map,native,roles,store,get,id,for,role,to,array,string,new,multi,get,request,multi,get,request,client,prepare,multi,get,add,role,ids,request,execute,async,with,origin,client,thread,pool,get,thread,context,multi,get,request,action,listener,multi,get,response,wrap,m,get,response,final,multi,get,item,response,responses,m,get,response,get,responses,set,role,descriptor,descriptors,new,hash,set,for,int,i,0,i,responses,length,i,multi,get,item,response,item,responses,i,if,item,is,failed,final,exception,failure,item,get,failure,get,failure,for,int,j,i,1,j,responses,length,j,item,responses,j,if,item,is,failed,failure,add,suppressed,failure,listener,on,response,role,retrieval,result,failure,failure,return,else,if,item,get,response,is,exists,descriptors,add,transform,role,item,get,response,listener,on,response,role,retrieval,result,success,descriptors,e,listener,on,response,role,retrieval,result,failure,e,client,multi,get
NativeRolesStore -> private static String getIdForRole(final String roleName);1541008027;Gets the document's id field for the given role name.;private static String getIdForRole(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,role,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForRole(final String roleName);1541092382;Gets the document's id field for the given role name.;private static String getIdForRole(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,role,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForRole(final String roleName);1541169206;Gets the document's id field for the given role name.;private static String getIdForRole(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,role,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForRole(final String roleName);1544035746;Gets the document's id field for the given role name.;private static String getIdForRole(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,role,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForRole(final String roleName);1548420339;Gets the document's id field for the given role name.;private static String getIdForRole(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,role,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForRole(final String roleName);1550669555;Gets the document's id field for the given role name.;private static String getIdForRole(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,role,final,string,role,name,return,role,name
NativeRolesStore -> public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener);1524684173;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener) {_        if (securityLifecycleService.isSecurityIndexExisting() == false) {_            _            listener.onResponse(Collections.emptyList())__        } else if (names != null && names.length == 1) {_            getRoleDescriptor(Objects.requireNonNull(names[0]), ActionListener.wrap(roleDescriptor ->_                    listener.onResponse(roleDescriptor == null ? Collections.emptyList() : Collections.singletonList(roleDescriptor)),_                    listener::onFailure))__        } else {_            securityLifecycleService.prepareIndexIfNeededThenExecute(listener::onFailure, () -> {_                QueryBuilder query__                if (names == null || names.length == 0) {_                    query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                } else {_                    final String[] roleNames = Arrays.stream(names).map(s -> getIdForUser(s)).toArray(String[]::new)__                    query = QueryBuilders.boolQuery().filter(QueryBuilders.idsQuery(ROLE_DOC_TYPE).addIds(roleNames))__                }_                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityLifecycleService.SECURITY_INDEX_NAME)_                            .setScroll(TimeValue.timeValueSeconds(10L))_                            .setQuery(query)_                            .setSize(1000)_                            .setFetchSource(true)_                            .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier, listener),_                            (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,string,names,final,action,listener,collection,role,descriptor,listener,if,security,lifecycle,service,is,security,index,existing,false,listener,on,response,collections,empty,list,else,if,names,null,names,length,1,get,role,descriptor,objects,require,non,null,names,0,action,listener,wrap,role,descriptor,listener,on,response,role,descriptor,null,collections,empty,list,collections,singleton,list,role,descriptor,listener,on,failure,else,security,lifecycle,service,prepare,index,if,needed,then,execute,listener,on,failure,query,builder,query,if,names,null,names,length,0,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,else,final,string,role,names,arrays,stream,names,map,s,get,id,for,user,s,to,array,string,new,query,query,builders,bool,query,filter,query,builders,ids,query,add,ids,role,names,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,lifecycle,service,set,scroll,time,value,time,value,seconds,10l,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,listener,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state
NativeRolesStore -> public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener);1525859433;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener) {_        if (securityLifecycleService.securityIndex().indexExists() == false) {_            _            listener.onResponse(Collections.emptyList())__        } else if (names != null && names.length == 1) {_            getRoleDescriptor(Objects.requireNonNull(names[0]), ActionListener.wrap(roleDescriptor ->_                    listener.onResponse(roleDescriptor == null ? Collections.emptyList() : Collections.singletonList(roleDescriptor)),_                    listener::onFailure))__        } else {_            securityLifecycleService.securityIndex().prepareIndexIfNeededThenExecute(listener::onFailure, () -> {_                QueryBuilder query__                if (names == null || names.length == 0) {_                    query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                } else {_                    final String[] roleNames = Arrays.stream(names).map(s -> getIdForUser(s)).toArray(String[]::new)__                    query = QueryBuilders.boolQuery().filter(QueryBuilders.idsQuery(ROLE_DOC_TYPE).addIds(roleNames))__                }_                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityLifecycleService.SECURITY_INDEX_NAME)_                            .setScroll(TimeValue.timeValueSeconds(10L))_                            .setQuery(query)_                            .setSize(1000)_                            .setFetchSource(true)_                            .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier, listener),_                            (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,string,names,final,action,listener,collection,role,descriptor,listener,if,security,lifecycle,service,security,index,index,exists,false,listener,on,response,collections,empty,list,else,if,names,null,names,length,1,get,role,descriptor,objects,require,non,null,names,0,action,listener,wrap,role,descriptor,listener,on,response,role,descriptor,null,collections,empty,list,collections,singleton,list,role,descriptor,listener,on,failure,else,security,lifecycle,service,security,index,prepare,index,if,needed,then,execute,listener,on,failure,query,builder,query,if,names,null,names,length,0,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,else,final,string,role,names,arrays,stream,names,map,s,get,id,for,user,s,to,array,string,new,query,query,builders,bool,query,filter,query,builders,ids,query,add,ids,role,names,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,lifecycle,service,set,scroll,time,value,time,value,seconds,10l,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,listener,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state
NativeRolesStore -> public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener);1526449283;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(Collections.emptyList())__        } else if (names != null && names.length == 1) {_            getRoleDescriptor(Objects.requireNonNull(names[0]), ActionListener.wrap(roleDescriptor ->_                    listener.onResponse(roleDescriptor == null ? Collections.emptyList() : Collections.singletonList(roleDescriptor)),_                    listener::onFailure))__        } else {_            securityIndex.prepareIndexIfNeededThenExecute(listener::onFailure, () -> {_                QueryBuilder query__                if (names == null || names.length == 0) {_                    query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                } else {_                    final String[] roleNames = Arrays.stream(names).map(s -> getIdForUser(s)).toArray(String[]::new)__                    query = QueryBuilders.boolQuery().filter(QueryBuilders.idsQuery(ROLE_DOC_TYPE).addIds(roleNames))__                }_                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                            .setScroll(TimeValue.timeValueSeconds(10L))_                            .setQuery(query)_                            .setSize(1000)_                            .setFetchSource(true)_                            .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier, listener),_                            (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,string,names,final,action,listener,collection,role,descriptor,listener,if,security,index,index,exists,false,listener,on,response,collections,empty,list,else,if,names,null,names,length,1,get,role,descriptor,objects,require,non,null,names,0,action,listener,wrap,role,descriptor,listener,on,response,role,descriptor,null,collections,empty,list,collections,singleton,list,role,descriptor,listener,on,failure,else,security,index,prepare,index,if,needed,then,execute,listener,on,failure,query,builder,query,if,names,null,names,length,0,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,else,final,string,role,names,arrays,stream,names,map,s,get,id,for,user,s,to,array,string,new,query,query,builders,bool,query,filter,query,builders,ids,query,add,ids,role,names,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,time,value,time,value,seconds,10l,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,listener,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state
NativeRolesStore -> public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener);1528304883;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(Collections.emptyList())__        } else if (names != null && names.length == 1) {_            getRoleDescriptor(Objects.requireNonNull(names[0]), ActionListener.wrap(roleDescriptor ->_                    listener.onResponse(roleDescriptor == null ? Collections.emptyList() : Collections.singletonList(roleDescriptor)),_                    listener::onFailure))__        } else {_            securityIndex.prepareIndexIfNeededThenExecute(listener::onFailure, () -> {_                QueryBuilder query__                if (names == null || names.length == 0) {_                    query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                } else {_                    final String[] roleNames = Arrays.stream(names).map(s -> getIdForUser(s)).toArray(String[]::new)__                    query = QueryBuilders.boolQuery().filter(QueryBuilders.idsQuery(ROLE_DOC_TYPE).addIds(roleNames))__                }_                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                            .setScroll(TimeValue.timeValueSeconds(10L))_                            .setQuery(query)_                            .setSize(1000)_                            .setFetchSource(true)_                            .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier, listener),_                            (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,string,names,final,action,listener,collection,role,descriptor,listener,if,security,index,index,exists,false,listener,on,response,collections,empty,list,else,if,names,null,names,length,1,get,role,descriptor,objects,require,non,null,names,0,action,listener,wrap,role,descriptor,listener,on,response,role,descriptor,null,collections,empty,list,collections,singleton,list,role,descriptor,listener,on,failure,else,security,index,prepare,index,if,needed,then,execute,listener,on,failure,query,builder,query,if,names,null,names,length,0,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,else,final,string,role,names,arrays,stream,names,map,s,get,id,for,user,s,to,array,string,new,query,query,builders,bool,query,filter,query,builders,ids,query,add,ids,role,names,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,time,value,time,value,seconds,10l,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,listener,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state
NativeRolesStore -> public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener);1532456624;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(Collections.emptyList())__        } else if (names != null && names.length == 1) {_            getRoleDescriptor(Objects.requireNonNull(names[0]), ActionListener.wrap(roleDescriptor ->_                    listener.onResponse(roleDescriptor == null ? Collections.emptyList() : Collections.singletonList(roleDescriptor)),_                    listener::onFailure))__        } else {_            securityIndex.prepareIndexIfNeededThenExecute(listener::onFailure, () -> {_                QueryBuilder query__                if (names == null || names.length == 0) {_                    query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                } else {_                    final String[] roleNames = Arrays.stream(names).map(s -> getIdForUser(s)).toArray(String[]::new)__                    query = QueryBuilders.boolQuery().filter(QueryBuilders.idsQuery(ROLE_DOC_TYPE).addIds(roleNames))__                }_                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                            .setScroll(TimeValue.timeValueSeconds(10L))_                            .setQuery(query)_                            .setSize(1000)_                            .setFetchSource(true)_                            .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier, listener),_                            (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,string,names,final,action,listener,collection,role,descriptor,listener,if,security,index,index,exists,false,listener,on,response,collections,empty,list,else,if,names,null,names,length,1,get,role,descriptor,objects,require,non,null,names,0,action,listener,wrap,role,descriptor,listener,on,response,role,descriptor,null,collections,empty,list,collections,singleton,list,role,descriptor,listener,on,failure,else,security,index,prepare,index,if,needed,then,execute,listener,on,failure,query,builder,query,if,names,null,names,length,0,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,else,final,string,role,names,arrays,stream,names,map,s,get,id,for,user,s,to,array,string,new,query,query,builders,bool,query,filter,query,builders,ids,query,add,ids,role,names,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,time,value,time,value,seconds,10l,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,listener,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state
NativeRolesStore -> public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener);1538067637;Retrieve a list of roles, if rolesToGet is null or empty, fetch all roles;public void getRoleDescriptors(String[] names, final ActionListener<Collection<RoleDescriptor>> listener) {_        if (securityIndex.indexExists() == false) {_            _            listener.onResponse(Collections.emptyList())__        } else if (names != null && names.length == 1) {_            getRoleDescriptor(Objects.requireNonNull(names[0]), ActionListener.wrap(roleDescriptor ->_                    listener.onResponse(roleDescriptor == null ? Collections.emptyList() : Collections.singletonList(roleDescriptor)),_                    listener::onFailure))__        } else {_            securityIndex.prepareIndexIfNeededThenExecute(listener::onFailure, () -> {_                QueryBuilder query__                if (names == null || names.length == 0) {_                    query = QueryBuilders.termQuery(RoleDescriptor.Fields.TYPE.getPreferredName(), ROLE_TYPE)__                } else {_                    final String[] roleNames = Arrays.stream(names).map(s -> getIdForUser(s)).toArray(String[]::new)__                    query = QueryBuilders.boolQuery().filter(QueryBuilders.idsQuery(ROLE_DOC_TYPE).addIds(roleNames))__                }_                final Supplier<ThreadContext.StoredContext> supplier = client.threadPool().getThreadContext().newRestorableContext(false)__                try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), SECURITY_ORIGIN)) {_                    SearchRequest request = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)_                            .setScroll(DEFAULT_KEEPALIVE_SETTING.get(settings))_                            .setQuery(query)_                            .setSize(1000)_                            .setFetchSource(true)_                            .request()__                    request.indicesOptions().ignoreUnavailable()__                    ScrollHelper.fetchAllByEntity(client, request, new ContextPreservingActionListener<>(supplier, listener),_                            (hit) -> transformRole(hit.getId(), hit.getSourceRef(), logger, licenseState))__                }_            })__        }_    };retrieve,a,list,of,roles,if,roles,to,get,is,null,or,empty,fetch,all,roles;public,void,get,role,descriptors,string,names,final,action,listener,collection,role,descriptor,listener,if,security,index,index,exists,false,listener,on,response,collections,empty,list,else,if,names,null,names,length,1,get,role,descriptor,objects,require,non,null,names,0,action,listener,wrap,role,descriptor,listener,on,response,role,descriptor,null,collections,empty,list,collections,singleton,list,role,descriptor,listener,on,failure,else,security,index,prepare,index,if,needed,then,execute,listener,on,failure,query,builder,query,if,names,null,names,length,0,query,query,builders,term,query,role,descriptor,fields,type,get,preferred,name,else,final,string,role,names,arrays,stream,names,map,s,get,id,for,user,s,to,array,string,new,query,query,builders,bool,query,filter,query,builders,ids,query,add,ids,role,names,final,supplier,thread,context,stored,context,supplier,client,thread,pool,get,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,search,request,request,client,prepare,search,security,index,manager,set,scroll,get,settings,set,query,query,set,size,1000,set,fetch,source,true,request,request,indices,options,ignore,unavailable,scroll,helper,fetch,all,by,entity,client,request,new,context,preserving,action,listener,supplier,listener,hit,transform,role,hit,get,id,hit,get,source,ref,logger,license,state
NativeRolesStore -> private static String getIdForUser(final String roleName);1524684173;Gets the document's id field for the given role name.;private static String getIdForUser(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,user,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForUser(final String roleName);1525859433;Gets the document's id field for the given role name.;private static String getIdForUser(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,user,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForUser(final String roleName);1526449283;Gets the document's id field for the given role name.;private static String getIdForUser(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,user,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForUser(final String roleName);1528304883;Gets the document's id field for the given role name.;private static String getIdForUser(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,user,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForUser(final String roleName);1532456624;Gets the document's id field for the given role name.;private static String getIdForUser(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,user,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForUser(final String roleName);1538067637;Gets the document's id field for the given role name.;private static String getIdForUser(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,user,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForUser(final String roleName);1539723533;Gets the document's id field for the given role name.;private static String getIdForUser(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,user,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForUser(final String roleName);1539796943;Gets the document's id field for the given role name.;private static String getIdForUser(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,user,final,string,role,name,return,role,name
NativeRolesStore -> private static String getIdForUser(final String roleName);1540238977;Gets the document's id field for the given role name.;private static String getIdForUser(final String roleName) {_        return ROLE_TYPE + "-" + roleName__    };gets,the,document,s,id,field,for,the,given,role,name;private,static,string,get,id,for,user,final,string,role,name,return,role,name
