commented;modifiers;parameterAmount;loc;comment;code
true;;1;15;/**  * Finds all values for the specified attribute  *  * @param attributeId The name of the attribute - either its {@code name} or @{code friendlyName}  * @return A list of all matching attribute values (may be empty).  */ ;/**  * Finds all values for the specified attribute  *  * @param attributeId The name of the attribute - either its {@code name} or @{code friendlyName}  * @return A list of all matching attribute values (may be empty).  */ List<String> getAttributeValues(String attributeId) {     if (attributeId.equals(NAMEID_SYNTHENTIC_ATTRIBUTE)) {         return name == null ? Collections.emptyList() : Collections.singletonList(name.value).     }     if (name != null && NameIDType.PERSISTENT.equals(name.format) && attributeId.equals(PERSISTENT_NAMEID_SYNTHENTIC_ATTRIBUTE)) {         return Collections.singletonList(name.value).     }     if (Strings.isNullOrEmpty(attributeId)) {         return Collections.emptyList().     }     return attributes.stream().filter(attr -> attributeId.equals(attr.name) || attributeId.equals(attr.friendlyName)).flatMap(attr -> attr.values.stream()).collect(Collectors.toList()). }
false;;0;3;;List<SamlAttribute> attributes() {     return Collections.unmodifiableList(attributes). }
false;;0;3;;SamlNameId name() {     return name. }
false;;0;3;;String session() {     return session. }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + "(" + name + ")[" + session + "]{" + attributes + "}". }
false;public;0;8;;@Override public String toString() {     if (Strings.isNullOrEmpty(friendlyName)) {         return name + '=' + values.     } else {         return friendlyName + '(' + name + ")=" + values.     } }
