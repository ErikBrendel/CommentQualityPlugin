# id;timestamp;commentText;codeText;commentWords;codeWords
AuthorizationUtils -> public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,                                                                Consumer<ThreadContext.StoredContext> consumer);1524684173;Stashes the current context and executes the consumer as the proper user based on the origin of the action.__This method knows nothing about listeners so it is important that callers ensure their listeners preserve their_context and restore it appropriately.;public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,_                                                               Consumer<ThreadContext.StoredContext> consumer) {_        final String actionOrigin = threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        if (actionOrigin == null) {_            assert false : "cannot switch user if there is no action origin"__            throw new IllegalStateException("cannot switch user if there is no action origin")__        }__        switch (actionOrigin) {_            case SECURITY_ORIGIN:_                securityContext.executeAsUser(XPackSecurityUser.INSTANCE, consumer, Version.CURRENT)__                break__            case WATCHER_ORIGIN:_            case ML_ORIGIN:_            case MONITORING_ORIGIN:_            case DEPRECATION_ORIGIN:_            case PERSISTENT_TASK_ORIGIN:_            case ROLLUP_ORIGIN:_                securityContext.executeAsUser(XPackUser.INSTANCE, consumer, Version.CURRENT)__                break__            default:_                assert false : "action.origin [" + actionOrigin + "] is unknown!"__                throw new IllegalStateException("action.origin [" + actionOrigin + "] should always be a known value")__        }_    };stashes,the,current,context,and,executes,the,consumer,as,the,proper,user,based,on,the,origin,of,the,action,this,method,knows,nothing,about,listeners,so,it,is,important,that,callers,ensure,their,listeners,preserve,their,context,and,restore,it,appropriately;public,static,void,switch,user,based,on,action,origin,and,execute,thread,context,thread,context,security,context,security,context,consumer,thread,context,stored,context,consumer,final,string,action,origin,thread,context,get,transient,client,helper,if,action,origin,null,assert,false,cannot,switch,user,if,there,is,no,action,origin,throw,new,illegal,state,exception,cannot,switch,user,if,there,is,no,action,origin,switch,action,origin,case,security,context,execute,as,user,xpack,security,user,instance,consumer,version,current,break,case,case,case,case,case,case,security,context,execute,as,user,xpack,user,instance,consumer,version,current,break,default,assert,false,action,origin,action,origin,is,unknown,throw,new,illegal,state,exception,action,origin,action,origin,should,always,be,a,known,value
AuthorizationUtils -> public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,                                                                Consumer<ThreadContext.StoredContext> consumer);1531179852;Stashes the current context and executes the consumer as the proper user based on the origin of the action.__This method knows nothing about listeners so it is important that callers ensure their listeners preserve their_context and restore it appropriately.;public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,_                                                               Consumer<ThreadContext.StoredContext> consumer) {_        final String actionOrigin = threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        if (actionOrigin == null) {_            assert false : "cannot switch user if there is no action origin"__            throw new IllegalStateException("cannot switch user if there is no action origin")__        }__        switch (actionOrigin) {_            case SECURITY_ORIGIN:_                securityContext.executeAsUser(XPackSecurityUser.INSTANCE, consumer, Version.CURRENT)__                break__            case WATCHER_ORIGIN:_            case ML_ORIGIN:_            case MONITORING_ORIGIN:_            case DEPRECATION_ORIGIN:_            case PERSISTENT_TASK_ORIGIN:_            case ROLLUP_ORIGIN:_                securityContext.executeAsUser(XPackUser.INSTANCE, consumer, Version.CURRENT)__                break__            default:_                assert false : "action.origin [" + actionOrigin + "] is unknown!"__                throw new IllegalStateException("action.origin [" + actionOrigin + "] should always be a known value")__        }_    };stashes,the,current,context,and,executes,the,consumer,as,the,proper,user,based,on,the,origin,of,the,action,this,method,knows,nothing,about,listeners,so,it,is,important,that,callers,ensure,their,listeners,preserve,their,context,and,restore,it,appropriately;public,static,void,switch,user,based,on,action,origin,and,execute,thread,context,thread,context,security,context,security,context,consumer,thread,context,stored,context,consumer,final,string,action,origin,thread,context,get,transient,client,helper,if,action,origin,null,assert,false,cannot,switch,user,if,there,is,no,action,origin,throw,new,illegal,state,exception,cannot,switch,user,if,there,is,no,action,origin,switch,action,origin,case,security,context,execute,as,user,xpack,security,user,instance,consumer,version,current,break,case,case,case,case,case,case,security,context,execute,as,user,xpack,user,instance,consumer,version,current,break,default,assert,false,action,origin,action,origin,is,unknown,throw,new,illegal,state,exception,action,origin,action,origin,should,always,be,a,known,value
AuthorizationUtils -> public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,                                                                Consumer<ThreadContext.StoredContext> consumer);1534805087;Stashes the current context and executes the consumer as the proper user based on the origin of the action.__This method knows nothing about listeners so it is important that callers ensure their listeners preserve their_context and restore it appropriately.;public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,_                                                               Consumer<ThreadContext.StoredContext> consumer) {_        final String actionOrigin = threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        if (actionOrigin == null) {_            assert false : "cannot switch user if there is no action origin"__            throw new IllegalStateException("cannot switch user if there is no action origin")__        }__        switch (actionOrigin) {_            case SECURITY_ORIGIN:_                securityContext.executeAsUser(XPackSecurityUser.INSTANCE, consumer, Version.CURRENT)__                break__            case WATCHER_ORIGIN:_            case ML_ORIGIN:_            case MONITORING_ORIGIN:_            case DEPRECATION_ORIGIN:_            case PERSISTENT_TASK_ORIGIN:_            case ROLLUP_ORIGIN:_            case INDEX_LIFECYCLE_ORIGIN:_                securityContext.executeAsUser(XPackUser.INSTANCE, consumer, Version.CURRENT)__                break__            default:_                assert false : "action.origin [" + actionOrigin + "] is unknown!"__                throw new IllegalStateException("action.origin [" + actionOrigin + "] should always be a known value")__        }_    };stashes,the,current,context,and,executes,the,consumer,as,the,proper,user,based,on,the,origin,of,the,action,this,method,knows,nothing,about,listeners,so,it,is,important,that,callers,ensure,their,listeners,preserve,their,context,and,restore,it,appropriately;public,static,void,switch,user,based,on,action,origin,and,execute,thread,context,thread,context,security,context,security,context,consumer,thread,context,stored,context,consumer,final,string,action,origin,thread,context,get,transient,client,helper,if,action,origin,null,assert,false,cannot,switch,user,if,there,is,no,action,origin,throw,new,illegal,state,exception,cannot,switch,user,if,there,is,no,action,origin,switch,action,origin,case,security,context,execute,as,user,xpack,security,user,instance,consumer,version,current,break,case,case,case,case,case,case,case,security,context,execute,as,user,xpack,user,instance,consumer,version,current,break,default,assert,false,action,origin,action,origin,is,unknown,throw,new,illegal,state,exception,action,origin,action,origin,should,always,be,a,known,value
AuthorizationUtils -> public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,                                                                Consumer<ThreadContext.StoredContext> consumer);1543415307;Stashes the current context and executes the consumer as the proper user based on the origin of the action.__This method knows nothing about listeners so it is important that callers ensure their listeners preserve their_context and restore it appropriately.;public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,_                                                               Consumer<ThreadContext.StoredContext> consumer) {_        final String actionOrigin = threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        if (actionOrigin == null) {_            assert false : "cannot switch user if there is no action origin"__            throw new IllegalStateException("cannot switch user if there is no action origin")__        }__        switch (actionOrigin) {_            case SECURITY_ORIGIN:_                securityContext.executeAsUser(XPackSecurityUser.INSTANCE, consumer, Version.CURRENT)__                break__            case WATCHER_ORIGIN:_            case ML_ORIGIN:_            case MONITORING_ORIGIN:_            case DEPRECATION_ORIGIN:_            case PERSISTENT_TASK_ORIGIN:_            case ROLLUP_ORIGIN:_            case INDEX_LIFECYCLE_ORIGIN:_            case TASKS_ORIGIN:   _                securityContext.executeAsUser(XPackUser.INSTANCE, consumer, Version.CURRENT)__                break__            default:_                assert false : "action.origin [" + actionOrigin + "] is unknown!"__                throw new IllegalStateException("action.origin [" + actionOrigin + "] should always be a known value")__        }_    };stashes,the,current,context,and,executes,the,consumer,as,the,proper,user,based,on,the,origin,of,the,action,this,method,knows,nothing,about,listeners,so,it,is,important,that,callers,ensure,their,listeners,preserve,their,context,and,restore,it,appropriately;public,static,void,switch,user,based,on,action,origin,and,execute,thread,context,thread,context,security,context,security,context,consumer,thread,context,stored,context,consumer,final,string,action,origin,thread,context,get,transient,client,helper,if,action,origin,null,assert,false,cannot,switch,user,if,there,is,no,action,origin,throw,new,illegal,state,exception,cannot,switch,user,if,there,is,no,action,origin,switch,action,origin,case,security,context,execute,as,user,xpack,security,user,instance,consumer,version,current,break,case,case,case,case,case,case,case,case,security,context,execute,as,user,xpack,user,instance,consumer,version,current,break,default,assert,false,action,origin,action,origin,is,unknown,throw,new,illegal,state,exception,action,origin,action,origin,should,always,be,a,known,value
AuthorizationUtils -> public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,                                                                Consumer<ThreadContext.StoredContext> consumer);1549336917;Stashes the current context and executes the consumer as the proper user based on the origin of the action.__This method knows nothing about listeners so it is important that callers ensure their listeners preserve their_context and restore it appropriately.;public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,_                                                               Consumer<ThreadContext.StoredContext> consumer) {_        final String actionOrigin = threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        if (actionOrigin == null) {_            assert false : "cannot switch user if there is no action origin"__            throw new IllegalStateException("cannot switch user if there is no action origin")__        }__        switch (actionOrigin) {_            case SECURITY_ORIGIN:_                securityContext.executeAsUser(XPackSecurityUser.INSTANCE, consumer, Version.CURRENT)__                break__            case WATCHER_ORIGIN:_            case ML_ORIGIN:_            case MONITORING_ORIGIN:_            case DEPRECATION_ORIGIN:_            case PERSISTENT_TASK_ORIGIN:_            case ROLLUP_ORIGIN:_            case INDEX_LIFECYCLE_ORIGIN:_            case TASKS_ORIGIN:   _                securityContext.executeAsUser(XPackUser.INSTANCE, consumer, Version.CURRENT)__                break__            default:_                assert false : "action.origin [" + actionOrigin + "] is unknown!"__                throw new IllegalStateException("action.origin [" + actionOrigin + "] should always be a known value")__        }_    };stashes,the,current,context,and,executes,the,consumer,as,the,proper,user,based,on,the,origin,of,the,action,this,method,knows,nothing,about,listeners,so,it,is,important,that,callers,ensure,their,listeners,preserve,their,context,and,restore,it,appropriately;public,static,void,switch,user,based,on,action,origin,and,execute,thread,context,thread,context,security,context,security,context,consumer,thread,context,stored,context,consumer,final,string,action,origin,thread,context,get,transient,client,helper,if,action,origin,null,assert,false,cannot,switch,user,if,there,is,no,action,origin,throw,new,illegal,state,exception,cannot,switch,user,if,there,is,no,action,origin,switch,action,origin,case,security,context,execute,as,user,xpack,security,user,instance,consumer,version,current,break,case,case,case,case,case,case,case,case,security,context,execute,as,user,xpack,user,instance,consumer,version,current,break,default,assert,false,action,origin,action,origin,is,unknown,throw,new,illegal,state,exception,action,origin,action,origin,should,always,be,a,known,value
AuthorizationUtils -> public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,                                                                Consumer<ThreadContext.StoredContext> consumer);1549399169;Stashes the current context and executes the consumer as the proper user based on the origin of the action.__This method knows nothing about listeners so it is important that callers ensure their listeners preserve their_context and restore it appropriately.;public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,_                                                               Consumer<ThreadContext.StoredContext> consumer) {_        final String actionOrigin = threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        if (actionOrigin == null) {_            assert false : "cannot switch user if there is no action origin"__            throw new IllegalStateException("cannot switch user if there is no action origin")__        }__        switch (actionOrigin) {_            case SECURITY_ORIGIN:_                securityContext.executeAsUser(XPackSecurityUser.INSTANCE, consumer, Version.CURRENT)__                break__            case WATCHER_ORIGIN:_            case ML_ORIGIN:_            case MONITORING_ORIGIN:_            case DEPRECATION_ORIGIN:_            case PERSISTENT_TASK_ORIGIN:_            case ROLLUP_ORIGIN:_            case INDEX_LIFECYCLE_ORIGIN:_            case TASKS_ORIGIN:   _                securityContext.executeAsUser(XPackUser.INSTANCE, consumer, Version.CURRENT)__                break__            default:_                assert false : "action.origin [" + actionOrigin + "] is unknown!"__                throw new IllegalStateException("action.origin [" + actionOrigin + "] should always be a known value")__        }_    };stashes,the,current,context,and,executes,the,consumer,as,the,proper,user,based,on,the,origin,of,the,action,this,method,knows,nothing,about,listeners,so,it,is,important,that,callers,ensure,their,listeners,preserve,their,context,and,restore,it,appropriately;public,static,void,switch,user,based,on,action,origin,and,execute,thread,context,thread,context,security,context,security,context,consumer,thread,context,stored,context,consumer,final,string,action,origin,thread,context,get,transient,client,helper,if,action,origin,null,assert,false,cannot,switch,user,if,there,is,no,action,origin,throw,new,illegal,state,exception,cannot,switch,user,if,there,is,no,action,origin,switch,action,origin,case,security,context,execute,as,user,xpack,security,user,instance,consumer,version,current,break,case,case,case,case,case,case,case,case,security,context,execute,as,user,xpack,user,instance,consumer,version,current,break,default,assert,false,action,origin,action,origin,is,unknown,throw,new,illegal,state,exception,action,origin,action,origin,should,always,be,a,known,value
AuthorizationUtils -> public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,                                                                Consumer<ThreadContext.StoredContext> consumer);1550477798;Stashes the current context and executes the consumer as the proper user based on the origin of the action.__This method knows nothing about listeners so it is important that callers ensure their listeners preserve their_context and restore it appropriately.;public static void switchUserBasedOnActionOriginAndExecute(ThreadContext threadContext, SecurityContext securityContext,_                                                               Consumer<ThreadContext.StoredContext> consumer) {_        final String actionOrigin = threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        if (actionOrigin == null) {_            assert false : "cannot switch user if there is no action origin"__            throw new IllegalStateException("cannot switch user if there is no action origin")__        }__        switch (actionOrigin) {_            case SECURITY_ORIGIN:_                securityContext.executeAsUser(XPackSecurityUser.INSTANCE, consumer, Version.CURRENT)__                break__            case WATCHER_ORIGIN:_            case ML_ORIGIN:_            case MONITORING_ORIGIN:_            case DATA_FRAME_ORIGIN:_            case DEPRECATION_ORIGIN:_            case PERSISTENT_TASK_ORIGIN:_            case ROLLUP_ORIGIN:_            case INDEX_LIFECYCLE_ORIGIN:_            case TASKS_ORIGIN:   _                securityContext.executeAsUser(XPackUser.INSTANCE, consumer, Version.CURRENT)__                break__            default:_                assert false : "action.origin [" + actionOrigin + "] is unknown!"__                throw new IllegalStateException("action.origin [" + actionOrigin + "] should always be a known value")__        }_    };stashes,the,current,context,and,executes,the,consumer,as,the,proper,user,based,on,the,origin,of,the,action,this,method,knows,nothing,about,listeners,so,it,is,important,that,callers,ensure,their,listeners,preserve,their,context,and,restore,it,appropriately;public,static,void,switch,user,based,on,action,origin,and,execute,thread,context,thread,context,security,context,security,context,consumer,thread,context,stored,context,consumer,final,string,action,origin,thread,context,get,transient,client,helper,if,action,origin,null,assert,false,cannot,switch,user,if,there,is,no,action,origin,throw,new,illegal,state,exception,cannot,switch,user,if,there,is,no,action,origin,switch,action,origin,case,security,context,execute,as,user,xpack,security,user,instance,consumer,version,current,break,case,case,case,case,case,case,case,case,case,security,context,execute,as,user,xpack,user,instance,consumer,version,current,break,default,assert,false,action,origin,action,origin,is,unknown,throw,new,illegal,state,exception,action,origin,action,origin,should,always,be,a,known,value
AuthorizationUtils -> public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action);1524684173;This method is used to determine if a request should be executed as the system user, even if the request already_has a user associated with it.__In order for the user to be replaced by the system user one of the following conditions must be true:__<ul>_<li>the action is an internal action and no user is associated with the request</li>_<li>the action is an internal action and the thread context contains a non-internal action as the originating action</li>_</ul>__@param threadContext the {@link ThreadContext} that contains the headers and context associated with the request_@param action the action name that is being executed_@return true if the system user should be used to execute a request;public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action) {_        _        if (threadContext.isSystemContext() == false && isInternalAction(action) == false) {_            return false__        }__        _        _        Authentication authentication = threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        if (authentication == null && threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME) == null) {_            return true__        }__        _        _        _        final String originatingAction = threadContext.getTransient(AuthorizationService.ORIGINATING_ACTION_KEY)__        if (originatingAction != null && isInternalAction(originatingAction) == false) {_            return true__        }__        _        _        return false__    };this,method,is,used,to,determine,if,a,request,should,be,executed,as,the,system,user,even,if,the,request,already,has,a,user,associated,with,it,in,order,for,the,user,to,be,replaced,by,the,system,user,one,of,the,following,conditions,must,be,true,ul,li,the,action,is,an,internal,action,and,no,user,is,associated,with,the,request,li,li,the,action,is,an,internal,action,and,the,thread,context,contains,a,non,internal,action,as,the,originating,action,li,ul,param,thread,context,the,link,thread,context,that,contains,the,headers,and,context,associated,with,the,request,param,action,the,action,name,that,is,being,executed,return,true,if,the,system,user,should,be,used,to,execute,a,request;public,static,boolean,should,replace,user,with,system,thread,context,thread,context,string,action,if,thread,context,is,system,context,false,is,internal,action,action,false,return,false,authentication,authentication,thread,context,get,transient,authentication,field,if,authentication,null,thread,context,get,transient,client,helper,null,return,true,final,string,originating,action,thread,context,get,transient,authorization,service,if,originating,action,null,is,internal,action,originating,action,false,return,true,return,false
AuthorizationUtils -> public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action);1531179852;This method is used to determine if a request should be executed as the system user, even if the request already_has a user associated with it.__In order for the user to be replaced by the system user one of the following conditions must be true:__<ul>_<li>the action is an internal action and no user is associated with the request</li>_<li>the action is an internal action and the thread context contains a non-internal action as the originating action</li>_</ul>__@param threadContext the {@link ThreadContext} that contains the headers and context associated with the request_@param action the action name that is being executed_@return true if the system user should be used to execute a request;public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action) {_        _        if (threadContext.isSystemContext() == false && isInternalAction(action) == false) {_            return false__        }__        _        _        Authentication authentication = threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        if (authentication == null && threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME) == null) {_            return true__        }__        _        _        _        final String originatingAction = threadContext.getTransient(AuthorizationService.ORIGINATING_ACTION_KEY)__        if (originatingAction != null && isInternalAction(originatingAction) == false) {_            return true__        }__        _        _        return false__    };this,method,is,used,to,determine,if,a,request,should,be,executed,as,the,system,user,even,if,the,request,already,has,a,user,associated,with,it,in,order,for,the,user,to,be,replaced,by,the,system,user,one,of,the,following,conditions,must,be,true,ul,li,the,action,is,an,internal,action,and,no,user,is,associated,with,the,request,li,li,the,action,is,an,internal,action,and,the,thread,context,contains,a,non,internal,action,as,the,originating,action,li,ul,param,thread,context,the,link,thread,context,that,contains,the,headers,and,context,associated,with,the,request,param,action,the,action,name,that,is,being,executed,return,true,if,the,system,user,should,be,used,to,execute,a,request;public,static,boolean,should,replace,user,with,system,thread,context,thread,context,string,action,if,thread,context,is,system,context,false,is,internal,action,action,false,return,false,authentication,authentication,thread,context,get,transient,authentication,field,if,authentication,null,thread,context,get,transient,client,helper,null,return,true,final,string,originating,action,thread,context,get,transient,authorization,service,if,originating,action,null,is,internal,action,originating,action,false,return,true,return,false
AuthorizationUtils -> public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action);1534805087;This method is used to determine if a request should be executed as the system user, even if the request already_has a user associated with it.__In order for the user to be replaced by the system user one of the following conditions must be true:__<ul>_<li>the action is an internal action and no user is associated with the request</li>_<li>the action is an internal action and the thread context contains a non-internal action as the originating action</li>_</ul>__@param threadContext the {@link ThreadContext} that contains the headers and context associated with the request_@param action the action name that is being executed_@return true if the system user should be used to execute a request;public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action) {_        _        if (threadContext.isSystemContext() == false && isInternalAction(action) == false) {_            return false__        }__        _        _        Authentication authentication = threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        if (authentication == null && threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME) == null) {_            return true__        }__        _        _        _        final String originatingAction = threadContext.getTransient(AuthorizationService.ORIGINATING_ACTION_KEY)__        if (originatingAction != null && isInternalAction(originatingAction) == false) {_            return true__        }__        _        _        return false__    };this,method,is,used,to,determine,if,a,request,should,be,executed,as,the,system,user,even,if,the,request,already,has,a,user,associated,with,it,in,order,for,the,user,to,be,replaced,by,the,system,user,one,of,the,following,conditions,must,be,true,ul,li,the,action,is,an,internal,action,and,no,user,is,associated,with,the,request,li,li,the,action,is,an,internal,action,and,the,thread,context,contains,a,non,internal,action,as,the,originating,action,li,ul,param,thread,context,the,link,thread,context,that,contains,the,headers,and,context,associated,with,the,request,param,action,the,action,name,that,is,being,executed,return,true,if,the,system,user,should,be,used,to,execute,a,request;public,static,boolean,should,replace,user,with,system,thread,context,thread,context,string,action,if,thread,context,is,system,context,false,is,internal,action,action,false,return,false,authentication,authentication,thread,context,get,transient,authentication,field,if,authentication,null,thread,context,get,transient,client,helper,null,return,true,final,string,originating,action,thread,context,get,transient,authorization,service,if,originating,action,null,is,internal,action,originating,action,false,return,true,return,false
AuthorizationUtils -> public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action);1543415307;This method is used to determine if a request should be executed as the system user, even if the request already_has a user associated with it.__In order for the user to be replaced by the system user one of the following conditions must be true:__<ul>_<li>the action is an internal action and no user is associated with the request</li>_<li>the action is an internal action and the thread context contains a non-internal action as the originating action</li>_</ul>__@param threadContext the {@link ThreadContext} that contains the headers and context associated with the request_@param action the action name that is being executed_@return true if the system user should be used to execute a request;public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action) {_        _        if (threadContext.isSystemContext() == false && isInternalAction(action) == false) {_            return false__        }__        _        _        Authentication authentication = threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        if (authentication == null && threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME) == null) {_            return true__        }__        _        _        _        final String originatingAction = threadContext.getTransient(AuthorizationService.ORIGINATING_ACTION_KEY)__        if (originatingAction != null && isInternalAction(originatingAction) == false) {_            return true__        }__        _        _        return false__    };this,method,is,used,to,determine,if,a,request,should,be,executed,as,the,system,user,even,if,the,request,already,has,a,user,associated,with,it,in,order,for,the,user,to,be,replaced,by,the,system,user,one,of,the,following,conditions,must,be,true,ul,li,the,action,is,an,internal,action,and,no,user,is,associated,with,the,request,li,li,the,action,is,an,internal,action,and,the,thread,context,contains,a,non,internal,action,as,the,originating,action,li,ul,param,thread,context,the,link,thread,context,that,contains,the,headers,and,context,associated,with,the,request,param,action,the,action,name,that,is,being,executed,return,true,if,the,system,user,should,be,used,to,execute,a,request;public,static,boolean,should,replace,user,with,system,thread,context,thread,context,string,action,if,thread,context,is,system,context,false,is,internal,action,action,false,return,false,authentication,authentication,thread,context,get,transient,authentication,field,if,authentication,null,thread,context,get,transient,client,helper,null,return,true,final,string,originating,action,thread,context,get,transient,authorization,service,if,originating,action,null,is,internal,action,originating,action,false,return,true,return,false
AuthorizationUtils -> public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action);1549336917;This method is used to determine if a request should be executed as the system user, even if the request already_has a user associated with it.__In order for the user to be replaced by the system user one of the following conditions must be true:__<ul>_<li>the action is an internal action and no user is associated with the request</li>_<li>the action is an internal action and the thread context contains a non-internal action as the originating action</li>_</ul>__@param threadContext the {@link ThreadContext} that contains the headers and context associated with the request_@param action the action name that is being executed_@return true if the system user should be used to execute a request;public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action) {_        _        if (threadContext.isSystemContext() == false && isInternalAction(action) == false) {_            return false__        }__        _        _        Authentication authentication = threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        if (authentication == null && threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME) == null) {_            return true__        }__        _        _        _        final String originatingAction = threadContext.getTransient(AuthorizationService.ORIGINATING_ACTION_KEY)__        if (originatingAction != null && isInternalAction(originatingAction) == false) {_            return true__        }__        _        _        return false__    };this,method,is,used,to,determine,if,a,request,should,be,executed,as,the,system,user,even,if,the,request,already,has,a,user,associated,with,it,in,order,for,the,user,to,be,replaced,by,the,system,user,one,of,the,following,conditions,must,be,true,ul,li,the,action,is,an,internal,action,and,no,user,is,associated,with,the,request,li,li,the,action,is,an,internal,action,and,the,thread,context,contains,a,non,internal,action,as,the,originating,action,li,ul,param,thread,context,the,link,thread,context,that,contains,the,headers,and,context,associated,with,the,request,param,action,the,action,name,that,is,being,executed,return,true,if,the,system,user,should,be,used,to,execute,a,request;public,static,boolean,should,replace,user,with,system,thread,context,thread,context,string,action,if,thread,context,is,system,context,false,is,internal,action,action,false,return,false,authentication,authentication,thread,context,get,transient,authentication,field,if,authentication,null,thread,context,get,transient,client,helper,null,return,true,final,string,originating,action,thread,context,get,transient,authorization,service,if,originating,action,null,is,internal,action,originating,action,false,return,true,return,false
AuthorizationUtils -> public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action);1549399169;This method is used to determine if a request should be executed as the system user, even if the request already_has a user associated with it.__In order for the user to be replaced by the system user one of the following conditions must be true:__<ul>_<li>the action is an internal action and no user is associated with the request</li>_<li>the action is an internal action and the thread context contains a non-internal action as the originating action</li>_</ul>__@param threadContext the {@link ThreadContext} that contains the headers and context associated with the request_@param action the action name that is being executed_@return true if the system user should be used to execute a request;public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action) {_        _        if (threadContext.isSystemContext() == false && isInternalAction(action) == false) {_            return false__        }__        _        _        Authentication authentication = threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        if (authentication == null && threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME) == null) {_            return true__        }__        _        _        _        final String originatingAction = threadContext.getTransient(AuthorizationService.ORIGINATING_ACTION_KEY)__        if (originatingAction != null && isInternalAction(originatingAction) == false) {_            return true__        }__        _        _        return false__    };this,method,is,used,to,determine,if,a,request,should,be,executed,as,the,system,user,even,if,the,request,already,has,a,user,associated,with,it,in,order,for,the,user,to,be,replaced,by,the,system,user,one,of,the,following,conditions,must,be,true,ul,li,the,action,is,an,internal,action,and,no,user,is,associated,with,the,request,li,li,the,action,is,an,internal,action,and,the,thread,context,contains,a,non,internal,action,as,the,originating,action,li,ul,param,thread,context,the,link,thread,context,that,contains,the,headers,and,context,associated,with,the,request,param,action,the,action,name,that,is,being,executed,return,true,if,the,system,user,should,be,used,to,execute,a,request;public,static,boolean,should,replace,user,with,system,thread,context,thread,context,string,action,if,thread,context,is,system,context,false,is,internal,action,action,false,return,false,authentication,authentication,thread,context,get,transient,authentication,field,if,authentication,null,thread,context,get,transient,client,helper,null,return,true,final,string,originating,action,thread,context,get,transient,authorization,service,if,originating,action,null,is,internal,action,originating,action,false,return,true,return,false
AuthorizationUtils -> public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action);1550477798;This method is used to determine if a request should be executed as the system user, even if the request already_has a user associated with it.__In order for the user to be replaced by the system user one of the following conditions must be true:__<ul>_<li>the action is an internal action and no user is associated with the request</li>_<li>the action is an internal action and the thread context contains a non-internal action as the originating action</li>_</ul>__@param threadContext the {@link ThreadContext} that contains the headers and context associated with the request_@param action the action name that is being executed_@return true if the system user should be used to execute a request;public static boolean shouldReplaceUserWithSystem(ThreadContext threadContext, String action) {_        _        if (threadContext.isSystemContext() == false && isInternalAction(action) == false) {_            return false__        }__        _        _        Authentication authentication = threadContext.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        if (authentication == null && threadContext.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME) == null) {_            return true__        }__        _        _        _        final String originatingAction = threadContext.getTransient(AuthorizationService.ORIGINATING_ACTION_KEY)__        if (originatingAction != null && isInternalAction(originatingAction) == false) {_            return true__        }__        _        _        return false__    };this,method,is,used,to,determine,if,a,request,should,be,executed,as,the,system,user,even,if,the,request,already,has,a,user,associated,with,it,in,order,for,the,user,to,be,replaced,by,the,system,user,one,of,the,following,conditions,must,be,true,ul,li,the,action,is,an,internal,action,and,no,user,is,associated,with,the,request,li,li,the,action,is,an,internal,action,and,the,thread,context,contains,a,non,internal,action,as,the,originating,action,li,ul,param,thread,context,the,link,thread,context,that,contains,the,headers,and,context,associated,with,the,request,param,action,the,action,name,that,is,being,executed,return,true,if,the,system,user,should,be,used,to,execute,a,request;public,static,boolean,should,replace,user,with,system,thread,context,thread,context,string,action,if,thread,context,is,system,context,false,is,internal,action,action,false,return,false,authentication,authentication,thread,context,get,transient,authentication,field,if,authentication,null,thread,context,get,transient,client,helper,null,return,true,final,string,originating,action,thread,context,get,transient,authorization,service,if,originating,action,null,is,internal,action,originating,action,false,return,true,return,false
AuthorizationUtils -> public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context);1524684173;Returns true if the thread context contains the origin of the action and does not have any authentication;public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context) {_        final String actionOrigin = context.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        final Authentication authentication = context.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        return actionOrigin != null && authentication == null__    };returns,true,if,the,thread,context,contains,the,origin,of,the,action,and,does,not,have,any,authentication;public,static,boolean,should,set,user,based,on,action,origin,thread,context,context,final,string,action,origin,context,get,transient,client,helper,final,authentication,authentication,context,get,transient,authentication,field,return,action,origin,null,authentication,null
AuthorizationUtils -> public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context);1531179852;Returns true if the thread context contains the origin of the action and does not have any authentication;public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context) {_        final String actionOrigin = context.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        final Authentication authentication = context.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        return actionOrigin != null && authentication == null__    };returns,true,if,the,thread,context,contains,the,origin,of,the,action,and,does,not,have,any,authentication;public,static,boolean,should,set,user,based,on,action,origin,thread,context,context,final,string,action,origin,context,get,transient,client,helper,final,authentication,authentication,context,get,transient,authentication,field,return,action,origin,null,authentication,null
AuthorizationUtils -> public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context);1534805087;Returns true if the thread context contains the origin of the action and does not have any authentication;public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context) {_        final String actionOrigin = context.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        final Authentication authentication = context.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        return actionOrigin != null && authentication == null__    };returns,true,if,the,thread,context,contains,the,origin,of,the,action,and,does,not,have,any,authentication;public,static,boolean,should,set,user,based,on,action,origin,thread,context,context,final,string,action,origin,context,get,transient,client,helper,final,authentication,authentication,context,get,transient,authentication,field,return,action,origin,null,authentication,null
AuthorizationUtils -> public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context);1543415307;Returns true if the thread context contains the origin of the action and does not have any authentication;public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context) {_        final String actionOrigin = context.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        final Authentication authentication = context.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        return actionOrigin != null && authentication == null__    };returns,true,if,the,thread,context,contains,the,origin,of,the,action,and,does,not,have,any,authentication;public,static,boolean,should,set,user,based,on,action,origin,thread,context,context,final,string,action,origin,context,get,transient,client,helper,final,authentication,authentication,context,get,transient,authentication,field,return,action,origin,null,authentication,null
AuthorizationUtils -> public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context);1549336917;Returns true if the thread context contains the origin of the action and does not have any authentication;public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context) {_        final String actionOrigin = context.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        final Authentication authentication = context.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        return actionOrigin != null && authentication == null__    };returns,true,if,the,thread,context,contains,the,origin,of,the,action,and,does,not,have,any,authentication;public,static,boolean,should,set,user,based,on,action,origin,thread,context,context,final,string,action,origin,context,get,transient,client,helper,final,authentication,authentication,context,get,transient,authentication,field,return,action,origin,null,authentication,null
AuthorizationUtils -> public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context);1549399169;Returns true if the thread context contains the origin of the action and does not have any authentication;public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context) {_        final String actionOrigin = context.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        final Authentication authentication = context.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        return actionOrigin != null && authentication == null__    };returns,true,if,the,thread,context,contains,the,origin,of,the,action,and,does,not,have,any,authentication;public,static,boolean,should,set,user,based,on,action,origin,thread,context,context,final,string,action,origin,context,get,transient,client,helper,final,authentication,authentication,context,get,transient,authentication,field,return,action,origin,null,authentication,null
AuthorizationUtils -> public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context);1550477798;Returns true if the thread context contains the origin of the action and does not have any authentication;public static boolean shouldSetUserBasedOnActionOrigin(ThreadContext context) {_        final String actionOrigin = context.getTransient(ClientHelper.ACTION_ORIGIN_TRANSIENT_NAME)__        final Authentication authentication = context.getTransient(AuthenticationField.AUTHENTICATION_KEY)__        return actionOrigin != null && authentication == null__    };returns,true,if,the,thread,context,contains,the,origin,of,the,action,and,does,not,have,any,authentication;public,static,boolean,should,set,user,based,on,action,origin,thread,context,context,final,string,action,origin,context,get,transient,client,helper,final,authentication,authentication,context,get,transient,authentication,field,return,action,origin,null,authentication,null
