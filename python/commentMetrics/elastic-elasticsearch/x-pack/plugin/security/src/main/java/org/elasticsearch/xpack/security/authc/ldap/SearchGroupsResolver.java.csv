commented;modifiers;parameterAmount;loc;comment;code
false;public;6;26;;@Override public void resolve(LDAPInterface connection, String userDn, TimeValue timeout, Logger logger, Collection<Attribute> attributes, ActionListener<List<String>> listener) {     getUserId(userDn, attributes, connection, timeout, ActionListener.wrap((userId) -> {         if (userId == null) {             listener.onResponse(Collections.emptyList()).         } else {             try {                 Filter userFilter = createFilter(filter, userId).                 search(connection, baseDn, scope.scope(), userFilter, Math.toIntExact(timeout.seconds()), ignoreReferralErrors, ActionListener.wrap((results) -> listener.onResponse(results.stream().map((r) -> r.getDN()).collect(Collectors.toList())), listener::onFailure), SearchRequest.NO_ATTRIBUTES).             } catch (LDAPException e) {                 listener.onFailure(e).             }         }     }, listener::onFailure)). }
false;public;0;7;;@Override public String[] attributes() {     if (Strings.hasLength(userAttribute)) {         return new String[] { userAttribute }.     }     return null. }
false;private;5;15;;private void getUserId(String dn, Collection<Attribute> attributes, LDAPInterface connection, TimeValue timeout, ActionListener<String> listener) {     if (isNullOrEmpty(userAttribute) || userAttribute.equals("dn")) {         listener.onResponse(dn).     } else if (attributes != null) {         final String value = attributes.stream().filter((attribute) -> attribute.getName().equals(userAttribute)).map(Attribute::getValue).findFirst().orElse(null).         listener.onResponse(value).     } else {         readUserAttribute(connection, dn, timeout, listener).     } }
false;;4;13;;void readUserAttribute(LDAPInterface connection, String userDn, TimeValue timeout, ActionListener<String> listener) {     searchForEntry(connection, userDn, SearchScope.BASE, OBJECT_CLASS_PRESENCE_FILTER, Math.toIntExact(timeout.seconds()), ignoreReferralErrors, ActionListener.wrap((entry) -> {         if (entry == null || entry.hasAttribute(userAttribute) == false) {             listener.onResponse(null).         } else {             listener.onResponse(entry.getAttributeValue(userAttribute)).         }     }, listener::onFailure), userAttribute). }
