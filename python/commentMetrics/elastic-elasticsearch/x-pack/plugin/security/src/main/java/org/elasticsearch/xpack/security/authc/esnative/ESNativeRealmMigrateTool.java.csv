# id;timestamp;commentText;codeText;commentWords;codeWords
ESNativeRealmMigrateTool -> static Logger getTerminalLogger(final Terminal terminal);1524684173;Creates a new Logger that is detached from the ROOT logger and only has an appender that will output log messages to the terminal;static Logger getTerminalLogger(final Terminal terminal) {_        final Logger logger = ESLoggerFactory.getLogger(ESNativeRealmMigrateTool.class)__        Loggers.setLevel(logger, Level.ALL)___        _        final Appender appender = new AbstractAppender(ESNativeRealmMigrateTool.class.getName(), null,_                PatternLayout.newBuilder().withPattern("%m").build()) {_            @Override_            public void append(LogEvent event) {_                switch (event.getLevel().getStandardLevel()) {_                    case FATAL:_                    case ERROR:_                        terminal.println(Verbosity.NORMAL, event.getMessage().getFormattedMessage())__                        break__                    case OFF:_                        break__                    default:_                        terminal.println(Verbosity.VERBOSE, event.getMessage().getFormattedMessage())__                        break__                }_            }_        }__        appender.start()___        _        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false)__        final Configuration config = ctx.getConfiguration()__        final LoggerConfig loggerConfig = config.getLoggerConfig(ESNativeRealmMigrateTool.class.getName())__        loggerConfig.setParent(null)__        loggerConfig.getAppenders().forEach((s, a) -> Loggers.removeAppender(logger, a))__        Loggers.addAppender(logger, appender)__        return logger__    };creates,a,new,logger,that,is,detached,from,the,root,logger,and,only,has,an,appender,that,will,output,log,messages,to,the,terminal;static,logger,get,terminal,logger,final,terminal,terminal,final,logger,logger,eslogger,factory,get,logger,esnative,realm,migrate,tool,class,loggers,set,level,logger,level,all,final,appender,appender,new,abstract,appender,esnative,realm,migrate,tool,class,get,name,null,pattern,layout,new,builder,with,pattern,m,build,override,public,void,append,log,event,event,switch,event,get,level,get,standard,level,case,fatal,case,error,terminal,println,verbosity,normal,event,get,message,get,formatted,message,break,case,off,break,default,terminal,println,verbosity,verbose,event,get,message,get,formatted,message,break,appender,start,final,logger,context,ctx,logger,context,log,manager,get,context,false,final,configuration,config,ctx,get,configuration,final,logger,config,logger,config,config,get,logger,config,esnative,realm,migrate,tool,class,get,name,logger,config,set,parent,null,logger,config,get,appenders,for,each,s,a,loggers,remove,appender,logger,a,loggers,add,appender,logger,appender,return,logger
ESNativeRealmMigrateTool -> static Logger getTerminalLogger(final Terminal terminal);1531729807;Creates a new Logger that is detached from the ROOT logger and only has an appender that will output log messages to the terminal;static Logger getTerminalLogger(final Terminal terminal) {_        final Logger logger = ESLoggerFactory.getLogger(ESNativeRealmMigrateTool.class)__        Loggers.setLevel(logger, Level.ALL)___        _        final Appender appender = new AbstractAppender(ESNativeRealmMigrateTool.class.getName(), null,_                PatternLayout.newBuilder().withPattern("%m").build()) {_            @Override_            public void append(LogEvent event) {_                switch (event.getLevel().getStandardLevel()) {_                    case FATAL:_                    case ERROR:_                        terminal.println(Verbosity.NORMAL, event.getMessage().getFormattedMessage())__                        break__                    case OFF:_                        break__                    default:_                        terminal.println(Verbosity.VERBOSE, event.getMessage().getFormattedMessage())__                        break__                }_            }_        }__        appender.start()___        _        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false)__        final Configuration config = ctx.getConfiguration()__        final LoggerConfig loggerConfig = config.getLoggerConfig(ESNativeRealmMigrateTool.class.getName())__        loggerConfig.setParent(null)__        loggerConfig.getAppenders().forEach((s, a) -> Loggers.removeAppender(logger, a))__        Loggers.addAppender(logger, appender)__        return logger__    };creates,a,new,logger,that,is,detached,from,the,root,logger,and,only,has,an,appender,that,will,output,log,messages,to,the,terminal;static,logger,get,terminal,logger,final,terminal,terminal,final,logger,logger,eslogger,factory,get,logger,esnative,realm,migrate,tool,class,loggers,set,level,logger,level,all,final,appender,appender,new,abstract,appender,esnative,realm,migrate,tool,class,get,name,null,pattern,layout,new,builder,with,pattern,m,build,override,public,void,append,log,event,event,switch,event,get,level,get,standard,level,case,fatal,case,error,terminal,println,verbosity,normal,event,get,message,get,formatted,message,break,case,off,break,default,terminal,println,verbosity,verbose,event,get,message,get,formatted,message,break,appender,start,final,logger,context,ctx,logger,context,log,manager,get,context,false,final,configuration,config,ctx,get,configuration,final,logger,config,logger,config,config,get,logger,config,esnative,realm,migrate,tool,class,get,name,logger,config,set,parent,null,logger,config,get,appenders,for,each,s,a,loggers,remove,appender,logger,a,loggers,add,appender,logger,appender,return,logger
ESNativeRealmMigrateTool -> static Logger getTerminalLogger(final Terminal terminal);1533063033;Creates a new Logger that is detached from the ROOT logger and only has an appender that will output log messages to the terminal;static Logger getTerminalLogger(final Terminal terminal) {_        final Logger logger = ESLoggerFactory.getLogger(ESNativeRealmMigrateTool.class)__        Loggers.setLevel(logger, Level.ALL)___        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false)__        final Configuration config = ctx.getConfiguration()___        _        final Appender appender = new AbstractAppender(ESNativeRealmMigrateTool.class.getName(), null,_                PatternLayout.newBuilder()_                    _                    .withConfiguration(config)_                    .withPattern("%m")_                    .build()) {_            @Override_            public void append(LogEvent event) {_                switch (event.getLevel().getStandardLevel()) {_                    case FATAL:_                    case ERROR:_                        terminal.println(Verbosity.NORMAL, event.getMessage().getFormattedMessage())__                        break__                    case OFF:_                        break__                    default:_                        terminal.println(Verbosity.VERBOSE, event.getMessage().getFormattedMessage())__                        break__                }_            }_        }__        appender.start()___        _        final LoggerConfig loggerConfig = config.getLoggerConfig(ESNativeRealmMigrateTool.class.getName())__        loggerConfig.setParent(null)__        loggerConfig.getAppenders().forEach((s, a) -> Loggers.removeAppender(logger, a))__        Loggers.addAppender(logger, appender)__        return logger__    };creates,a,new,logger,that,is,detached,from,the,root,logger,and,only,has,an,appender,that,will,output,log,messages,to,the,terminal;static,logger,get,terminal,logger,final,terminal,terminal,final,logger,logger,eslogger,factory,get,logger,esnative,realm,migrate,tool,class,loggers,set,level,logger,level,all,final,logger,context,ctx,logger,context,log,manager,get,context,false,final,configuration,config,ctx,get,configuration,final,appender,appender,new,abstract,appender,esnative,realm,migrate,tool,class,get,name,null,pattern,layout,new,builder,with,configuration,config,with,pattern,m,build,override,public,void,append,log,event,event,switch,event,get,level,get,standard,level,case,fatal,case,error,terminal,println,verbosity,normal,event,get,message,get,formatted,message,break,case,off,break,default,terminal,println,verbosity,verbose,event,get,message,get,formatted,message,break,appender,start,final,logger,config,logger,config,config,get,logger,config,esnative,realm,migrate,tool,class,get,name,logger,config,set,parent,null,logger,config,get,appenders,for,each,s,a,loggers,remove,appender,logger,a,loggers,add,appender,logger,appender,return,logger
ESNativeRealmMigrateTool -> static Logger getTerminalLogger(final Terminal terminal);1539615817;Creates a new Logger that is detached from the ROOT logger and only has an appender that will output log messages to the terminal;static Logger getTerminalLogger(final Terminal terminal) {_        final Logger logger = LogManager.getLogger(ESNativeRealmMigrateTool.class)__        Loggers.setLevel(logger, Level.ALL)___        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false)__        final Configuration config = ctx.getConfiguration()___        _        final Appender appender = new AbstractAppender(ESNativeRealmMigrateTool.class.getName(), null,_                PatternLayout.newBuilder()_                    _                    .withConfiguration(config)_                    .withPattern("%m")_                    .build()) {_            @Override_            public void append(LogEvent event) {_                switch (event.getLevel().getStandardLevel()) {_                    case FATAL:_                    case ERROR:_                        terminal.println(Verbosity.NORMAL, event.getMessage().getFormattedMessage())__                        break__                    case OFF:_                        break__                    default:_                        terminal.println(Verbosity.VERBOSE, event.getMessage().getFormattedMessage())__                        break__                }_            }_        }__        appender.start()___        _        final LoggerConfig loggerConfig = config.getLoggerConfig(ESNativeRealmMigrateTool.class.getName())__        loggerConfig.setParent(null)__        loggerConfig.getAppenders().forEach((s, a) -> Loggers.removeAppender(logger, a))__        Loggers.addAppender(logger, appender)__        return logger__    };creates,a,new,logger,that,is,detached,from,the,root,logger,and,only,has,an,appender,that,will,output,log,messages,to,the,terminal;static,logger,get,terminal,logger,final,terminal,terminal,final,logger,logger,log,manager,get,logger,esnative,realm,migrate,tool,class,loggers,set,level,logger,level,all,final,logger,context,ctx,logger,context,log,manager,get,context,false,final,configuration,config,ctx,get,configuration,final,appender,appender,new,abstract,appender,esnative,realm,migrate,tool,class,get,name,null,pattern,layout,new,builder,with,configuration,config,with,pattern,m,build,override,public,void,append,log,event,event,switch,event,get,level,get,standard,level,case,fatal,case,error,terminal,println,verbosity,normal,event,get,message,get,formatted,message,break,case,off,break,default,terminal,println,verbosity,verbose,event,get,message,get,formatted,message,break,appender,start,final,logger,config,logger,config,config,get,logger,config,esnative,realm,migrate,tool,class,get,name,logger,config,set,parent,null,logger,config,get,appenders,for,each,s,a,loggers,remove,appender,logger,a,loggers,add,appender,logger,appender,return,logger
ESNativeRealmMigrateTool -> static Logger getTerminalLogger(final Terminal terminal);1543985510;Creates a new Logger that is detached from the ROOT logger and only has an appender that will output log messages to the terminal;static Logger getTerminalLogger(final Terminal terminal) {_        final Logger logger = LogManager.getLogger(ESNativeRealmMigrateTool.class)__        Loggers.setLevel(logger, Level.ALL)___        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false)__        final Configuration config = ctx.getConfiguration()___        _        final Appender appender = new AbstractAppender(ESNativeRealmMigrateTool.class.getName(), null,_                PatternLayout.newBuilder()_                    _                    .withConfiguration(config)_                    .withPattern("%m")_                    .build()) {_            @Override_            public void append(LogEvent event) {_                switch (event.getLevel().getStandardLevel()) {_                    case FATAL:_                    case ERROR:_                        terminal.println(Verbosity.NORMAL, event.getMessage().getFormattedMessage())__                        break__                    case OFF:_                        break__                    default:_                        terminal.println(Verbosity.VERBOSE, event.getMessage().getFormattedMessage())__                        break__                }_            }_        }__        appender.start()___        _        final LoggerConfig loggerConfig = config.getLoggerConfig(ESNativeRealmMigrateTool.class.getName())__        loggerConfig.setParent(null)__        loggerConfig.getAppenders().forEach((s, a) -> Loggers.removeAppender(logger, a))__        Loggers.addAppender(logger, appender)__        return logger__    };creates,a,new,logger,that,is,detached,from,the,root,logger,and,only,has,an,appender,that,will,output,log,messages,to,the,terminal;static,logger,get,terminal,logger,final,terminal,terminal,final,logger,logger,log,manager,get,logger,esnative,realm,migrate,tool,class,loggers,set,level,logger,level,all,final,logger,context,ctx,logger,context,log,manager,get,context,false,final,configuration,config,ctx,get,configuration,final,appender,appender,new,abstract,appender,esnative,realm,migrate,tool,class,get,name,null,pattern,layout,new,builder,with,configuration,config,with,pattern,m,build,override,public,void,append,log,event,event,switch,event,get,level,get,standard,level,case,fatal,case,error,terminal,println,verbosity,normal,event,get,message,get,formatted,message,break,case,off,break,default,terminal,println,verbosity,verbose,event,get,message,get,formatted,message,break,appender,start,final,logger,config,logger,config,config,get,logger,config,esnative,realm,migrate,tool,class,get,name,logger,config,set,parent,null,logger,config,get,appenders,for,each,s,a,loggers,remove,appender,logger,a,loggers,add,appender,logger,appender,return,logger
ESNativeRealmMigrateTool -> static Logger getTerminalLogger(final Terminal terminal);1544519590;Creates a new Logger that is detached from the ROOT logger and only has an appender that will output log messages to the terminal;static Logger getTerminalLogger(final Terminal terminal) {_        final Logger logger = LogManager.getLogger(ESNativeRealmMigrateTool.class)__        Loggers.setLevel(logger, Level.ALL)___        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false)__        final Configuration config = ctx.getConfiguration()___        _        final Appender appender = new AbstractAppender(ESNativeRealmMigrateTool.class.getName(), null,_                PatternLayout.newBuilder()_                    _                    .withConfiguration(config)_                    .withPattern("%m")_                    .build()) {_            @Override_            public void append(LogEvent event) {_                switch (event.getLevel().getStandardLevel()) {_                    case FATAL:_                    case ERROR:_                        terminal.println(Verbosity.NORMAL, event.getMessage().getFormattedMessage())__                        break__                    case OFF:_                        break__                    default:_                        terminal.println(Verbosity.VERBOSE, event.getMessage().getFormattedMessage())__                        break__                }_            }_        }__        appender.start()___        _        final LoggerConfig loggerConfig = config.getLoggerConfig(ESNativeRealmMigrateTool.class.getName())__        loggerConfig.setParent(null)__        loggerConfig.getAppenders().forEach((s, a) -> Loggers.removeAppender(logger, a))__        Loggers.addAppender(logger, appender)__        return logger__    };creates,a,new,logger,that,is,detached,from,the,root,logger,and,only,has,an,appender,that,will,output,log,messages,to,the,terminal;static,logger,get,terminal,logger,final,terminal,terminal,final,logger,logger,log,manager,get,logger,esnative,realm,migrate,tool,class,loggers,set,level,logger,level,all,final,logger,context,ctx,logger,context,log,manager,get,context,false,final,configuration,config,ctx,get,configuration,final,appender,appender,new,abstract,appender,esnative,realm,migrate,tool,class,get,name,null,pattern,layout,new,builder,with,configuration,config,with,pattern,m,build,override,public,void,append,log,event,event,switch,event,get,level,get,standard,level,case,fatal,case,error,terminal,println,verbosity,normal,event,get,message,get,formatted,message,break,case,off,break,default,terminal,println,verbosity,verbose,event,get,message,get,formatted,message,break,appender,start,final,logger,config,logger,config,config,get,logger,config,esnative,realm,migrate,tool,class,get,name,logger,config,set,parent,null,logger,config,get,appenders,for,each,s,a,loggers,remove,appender,logger,a,loggers,add,appender,logger,appender,return,logger
ESNativeRealmMigrateTool -> static Logger getTerminalLogger(final Terminal terminal);1547499982;Creates a new Logger that is detached from the ROOT logger and only has an appender that will output log messages to the terminal;static Logger getTerminalLogger(final Terminal terminal) {_        final Logger logger = LogManager.getLogger(ESNativeRealmMigrateTool.class)__        Loggers.setLevel(logger, Level.ALL)___        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false)__        final Configuration config = ctx.getConfiguration()___        _        final Appender appender = new AbstractAppender(ESNativeRealmMigrateTool.class.getName(), null,_                PatternLayout.newBuilder()_                    _                    .withConfiguration(config)_                    .withPattern("%m")_                    .build()) {_            @Override_            public void append(LogEvent event) {_                switch (event.getLevel().getStandardLevel()) {_                    case FATAL:_                    case ERROR:_                        terminal.println(Verbosity.NORMAL, event.getMessage().getFormattedMessage())__                        break__                    case OFF:_                        break__                    default:_                        terminal.println(Verbosity.VERBOSE, event.getMessage().getFormattedMessage())__                        break__                }_            }_        }__        appender.start()___        _        final LoggerConfig loggerConfig = config.getLoggerConfig(ESNativeRealmMigrateTool.class.getName())__        loggerConfig.setParent(null)__        loggerConfig.getAppenders().forEach((s, a) -> Loggers.removeAppender(logger, a))__        Loggers.addAppender(logger, appender)__        return logger__    };creates,a,new,logger,that,is,detached,from,the,root,logger,and,only,has,an,appender,that,will,output,log,messages,to,the,terminal;static,logger,get,terminal,logger,final,terminal,terminal,final,logger,logger,log,manager,get,logger,esnative,realm,migrate,tool,class,loggers,set,level,logger,level,all,final,logger,context,ctx,logger,context,log,manager,get,context,false,final,configuration,config,ctx,get,configuration,final,appender,appender,new,abstract,appender,esnative,realm,migrate,tool,class,get,name,null,pattern,layout,new,builder,with,configuration,config,with,pattern,m,build,override,public,void,append,log,event,event,switch,event,get,level,get,standard,level,case,fatal,case,error,terminal,println,verbosity,normal,event,get,message,get,formatted,message,break,case,off,break,default,terminal,println,verbosity,verbose,event,get,message,get,formatted,message,break,appender,start,final,logger,config,logger,config,config,get,logger,config,esnative,realm,migrate,tool,class,get,name,logger,config,set,parent,null,logger,config,get,appenders,for,each,s,a,loggers,remove,appender,logger,a,loggers,add,appender,logger,appender,return,logger
