commented;modifiers;parameterAmount;loc;comment;code
false;public;6;18;;@Override public void resolve(LDAPInterface connection, String userDn, TimeValue timeout, Logger logger, Collection<Attribute> attributes, ActionListener<List<String>> listener) {     if (attributes != null) {         List<String> list = attributes.stream().filter((attr) -> attr.getName().equals(attribute)).flatMap(attr -> Arrays.stream(attr.getValues())).collect(Collectors.toList()).         listener.onResponse(Collections.unmodifiableList(list)).     } else {         searchForEntry(connection, userDn, SearchScope.BASE, OBJECT_CLASS_PRESENCE_FILTER, Math.toIntExact(timeout.seconds()), ignoreReferralErrors, ActionListener.wrap((entry) -> {             if (entry == null || entry.hasAttribute(attribute) == false) {                 listener.onResponse(Collections.emptyList()).             } else {                 listener.onResponse(Collections.unmodifiableList(Arrays.asList(entry.getAttributeValues(attribute)))).             }         }, listener::onFailure), attribute).     } }
false;public;0;4;;@Override public String[] attributes() {     return new String[] { attribute }. }
