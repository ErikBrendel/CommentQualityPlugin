commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String name() {     return NAME. }
false;public;4;19;;@Override public void authenticationSuccess(String requestId, String realm, User user, RestRequest request) {     if (events.contains(AUTHENTICATION_SUCCESS) && eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(user), Optional.of(realm), Optional.empty(), Optional.empty())) == false) {         final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, REST_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "authentication_success").with(REALM_FIELD_NAME, realm).withRestUriAndMethod(request).withRequestId(requestId).withPrincipal(user).withRestOrigin(request).withRequestBody(request).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().         logger.info(logEntry).     } }
false;public;5;23;;@Override public void authenticationSuccess(String requestId, String realm, User user, String action, TransportMessage message) {     if (events.contains(AUTHENTICATION_SUCCESS)) {         final Optional<String[]> indices = indices(message).         if (eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(user), Optional.of(realm), Optional.empty(), indices)) == false) {             final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "authentication_success").with(REALM_FIELD_NAME, realm).with(ACTION_FIELD_NAME, action).with(REQUEST_NAME_FIELD_NAME, message.getClass().getSimpleName()).withRequestId(requestId).withPrincipal(user).withRestOrTransportOrigin(message, threadContext).with(INDICES_FIELD_NAME, indices.orElse(null)).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().             logger.info(logEntry).         }     } }
false;public;3;21;;@Override public void anonymousAccessDenied(String requestId, String action, TransportMessage message) {     if (events.contains(ANONYMOUS_ACCESS_DENIED)) {         final Optional<String[]> indices = indices(message).         if (eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.empty(), Optional.empty(), indices)) == false) {             final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "anonymous_access_denied").with(ACTION_FIELD_NAME, action).with(REQUEST_NAME_FIELD_NAME, message.getClass().getSimpleName()).withRequestId(requestId).withRestOrTransportOrigin(message, threadContext).with(INDICES_FIELD_NAME, indices.orElse(null)).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().             logger.info(logEntry).         }     } }
false;public;2;17;;@Override public void anonymousAccessDenied(String requestId, RestRequest request) {     if (events.contains(ANONYMOUS_ACCESS_DENIED) && eventFilterPolicyRegistry.ignorePredicate().test(AuditEventMetaInfo.EMPTY) == false) {         final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, REST_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "anonymous_access_denied").withRestUriAndMethod(request).withRestOrigin(request).withRequestBody(request).withRequestId(requestId).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().         logger.info(logEntry).     } }
false;public;4;22;;@Override public void authenticationFailed(String requestId, AuthenticationToken token, String action, TransportMessage message) {     if (events.contains(AUTHENTICATION_FAILED)) {         final Optional<String[]> indices = indices(message).         if (eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(token), Optional.empty(), indices)) == false) {             final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "authentication_failed").with(ACTION_FIELD_NAME, action).with(PRINCIPAL_FIELD_NAME, token.principal()).with(REQUEST_NAME_FIELD_NAME, message.getClass().getSimpleName()).withRequestId(requestId).withRestOrTransportOrigin(message, threadContext).with(INDICES_FIELD_NAME, indices.orElse(null)).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().             logger.info(logEntry).         }     } }
false;public;2;16;;@Override public void authenticationFailed(String requestId, RestRequest request) {     if (events.contains(AUTHENTICATION_FAILED) && eventFilterPolicyRegistry.ignorePredicate().test(AuditEventMetaInfo.EMPTY) == false) {         final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, REST_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "authentication_failed").withRestUriAndMethod(request).withRestOrigin(request).withRequestBody(request).withRequestId(requestId).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().         logger.info(logEntry).     } }
false;public;3;21;;@Override public void authenticationFailed(String requestId, String action, TransportMessage message) {     if (events.contains(AUTHENTICATION_FAILED)) {         final Optional<String[]> indices = indices(message).         if (eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.empty(), Optional.empty(), indices)) == false) {             final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "authentication_failed").with(ACTION_FIELD_NAME, action).with(REQUEST_NAME_FIELD_NAME, message.getClass().getSimpleName()).withRequestId(requestId).withRestOrTransportOrigin(message, threadContext).with(INDICES_FIELD_NAME, indices.orElse(null)).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().             logger.info(logEntry).         }     } }
false;public;3;18;;@Override public void authenticationFailed(String requestId, AuthenticationToken token, RestRequest request) {     if (events.contains(AUTHENTICATION_FAILED) && eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(token), Optional.empty(), Optional.empty())) == false) {         final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, REST_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "authentication_failed").with(PRINCIPAL_FIELD_NAME, token.principal()).withRestUriAndMethod(request).withRestOrigin(request).withRequestBody(request).withRequestId(requestId).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().         logger.info(logEntry).     } }
false;public;5;23;;@Override public void authenticationFailed(String requestId, String realm, AuthenticationToken token, String action, TransportMessage message) {     if (events.contains(REALM_AUTHENTICATION_FAILED)) {         final Optional<String[]> indices = indices(message).         if (eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(token), Optional.of(realm), indices)) == false) {             final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "realm_authentication_failed").with(REALM_FIELD_NAME, realm).with(PRINCIPAL_FIELD_NAME, token.principal()).with(ACTION_FIELD_NAME, action).with(REQUEST_NAME_FIELD_NAME, message.getClass().getSimpleName()).withRequestId(requestId).withRestOrTransportOrigin(message, threadContext).with(INDICES_FIELD_NAME, indices.orElse(null)).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().             logger.info(logEntry).         }     } }
false;public;4;19;;@Override public void authenticationFailed(String requestId, String realm, AuthenticationToken token, RestRequest request) {     if (events.contains(REALM_AUTHENTICATION_FAILED) && eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(token), Optional.of(realm), Optional.empty())) == false) {         final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, REST_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "realm_authentication_failed").with(REALM_FIELD_NAME, realm).with(PRINCIPAL_FIELD_NAME, token.principal()).withRestUriAndMethod(request).withRestOrigin(request).withRequestBody(request).withRequestId(requestId).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().         logger.info(logEntry).     } }
false;public;5;26;;@Override public void accessGranted(String requestId, Authentication authentication, String action, TransportMessage msg, AuthorizationInfo authorizationInfo) {     final User user = authentication.getUser().     final boolean isSystem = SystemUser.is(user) || XPackUser.is(user).     if ((isSystem && events.contains(SYSTEM_ACCESS_GRANTED)) || ((isSystem == false) && events.contains(ACCESS_GRANTED))) {         final Optional<String[]> indices = indices(msg).         if (eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(user), Optional.of(effectiveRealmName(authentication)), Optional.of(authorizationInfo), indices)) == false) {             final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "access_granted").with(ACTION_FIELD_NAME, action).with(REQUEST_NAME_FIELD_NAME, msg.getClass().getSimpleName()).withRequestId(requestId).withSubject(authentication).withRestOrTransportOrigin(msg, threadContext).with(INDICES_FIELD_NAME, indices.orElse(null)).withOpaqueId(threadContext).withXForwardedFor(threadContext).with(authorizationInfo.asMap()).build().             logger.info(logEntry).         }     } }
false;public;5;24;;@Override public void accessDenied(String requestId, Authentication authentication, String action, TransportMessage message, AuthorizationInfo authorizationInfo) {     if (events.contains(ACCESS_DENIED)) {         final Optional<String[]> indices = indices(message).         if (eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(authentication.getUser()), Optional.of(effectiveRealmName(authentication)), Optional.of(authorizationInfo), indices)) == false) {             final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "access_denied").with(ACTION_FIELD_NAME, action).with(REQUEST_NAME_FIELD_NAME, message.getClass().getSimpleName()).withRequestId(requestId).withSubject(authentication).withRestOrTransportOrigin(message, threadContext).with(INDICES_FIELD_NAME, indices.orElse(null)).with(authorizationInfo.asMap()).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().             logger.info(logEntry).         }     } }
false;public;2;16;;@Override public void tamperedRequest(String requestId, RestRequest request) {     if (events.contains(TAMPERED_REQUEST) && eventFilterPolicyRegistry.ignorePredicate().test(AuditEventMetaInfo.EMPTY) == false) {         final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, REST_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "tampered_request").withRestUriAndMethod(request).withRestOrigin(request).withRequestBody(request).withRequestId(requestId).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().         logger.info(logEntry).     } }
false;public;3;21;;@Override public void tamperedRequest(String requestId, String action, TransportMessage message) {     if (events.contains(TAMPERED_REQUEST)) {         final Optional<String[]> indices = indices(message).         if (eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.empty(), Optional.empty(), indices)) == false) {             final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "tampered_request").with(ACTION_FIELD_NAME, action).with(REQUEST_NAME_FIELD_NAME, message.getClass().getSimpleName()).withRequestId(requestId).withRestOrTransportOrigin(message, threadContext).with(INDICES_FIELD_NAME, indices.orElse(null)).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().             logger.info(logEntry).         }     } }
false;public;4;22;;@Override public void tamperedRequest(String requestId, User user, String action, TransportMessage message) {     if (events.contains(TAMPERED_REQUEST)) {         final Optional<String[]> indices = indices(message).         if (eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(user), Optional.empty(), Optional.empty(), indices)) == false) {             final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "tampered_request").with(ACTION_FIELD_NAME, action).with(REQUEST_NAME_FIELD_NAME, message.getClass().getSimpleName()).withRequestId(requestId).withRestOrTransportOrigin(message, threadContext).withPrincipal(user).with(INDICES_FIELD_NAME, indices.orElse(null)).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().             logger.info(logEntry).         }     } }
false;public;3;17;;@Override public void connectionGranted(InetAddress inetAddress, String profile, SecurityIpFilterRule rule) {     if (events.contains(CONNECTION_GRANTED) && eventFilterPolicyRegistry.ignorePredicate().test(AuditEventMetaInfo.EMPTY) == false) {         final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, IP_FILTER_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "connection_granted").with(ORIGIN_TYPE_FIELD_NAME, IPFilter.HTTP_PROFILE_NAME.equals(profile) ? REST_ORIGIN_FIELD_VALUE : TRANSPORT_ORIGIN_FIELD_VALUE).with(ORIGIN_ADDRESS_FIELD_NAME, NetworkAddress.format(inetAddress)).with(TRANSPORT_PROFILE_FIELD_NAME, profile).with(RULE_FIELD_NAME, rule.toString()).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().         logger.info(logEntry).     } }
false;public;3;17;;@Override public void connectionDenied(InetAddress inetAddress, String profile, SecurityIpFilterRule rule) {     if (events.contains(CONNECTION_DENIED) && eventFilterPolicyRegistry.ignorePredicate().test(AuditEventMetaInfo.EMPTY) == false) {         final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, IP_FILTER_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "connection_denied").with(ORIGIN_TYPE_FIELD_NAME, IPFilter.HTTP_PROFILE_NAME.equals(profile) ? REST_ORIGIN_FIELD_VALUE : TRANSPORT_ORIGIN_FIELD_VALUE).with(ORIGIN_ADDRESS_FIELD_NAME, NetworkAddress.format(inetAddress)).with(TRANSPORT_PROFILE_FIELD_NAME, profile).with(RULE_FIELD_NAME, rule.toString()).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().         logger.info(logEntry).     } }
false;public;5;24;;@Override public void runAsGranted(String requestId, Authentication authentication, String action, TransportMessage message, AuthorizationInfo authorizationInfo) {     if (events.contains(RUN_AS_GRANTED)) {         final Optional<String[]> indices = indices(message).         if (eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(authentication.getUser()), Optional.of(effectiveRealmName(authentication)), Optional.of(authorizationInfo), indices)) == false) {             final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "run_as_granted").with(ACTION_FIELD_NAME, action).with(REQUEST_NAME_FIELD_NAME, message.getClass().getSimpleName()).withRequestId(requestId).withRunAsSubject(authentication).withRestOrTransportOrigin(message, threadContext).with(INDICES_FIELD_NAME, indices.orElse(null)).with(authorizationInfo.asMap()).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().             logger.info(logEntry).         }     } }
false;public;5;24;;@Override public void runAsDenied(String requestId, Authentication authentication, String action, TransportMessage message, AuthorizationInfo authorizationInfo) {     if (events.contains(RUN_AS_DENIED)) {         final Optional<String[]> indices = indices(message).         if (eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(authentication.getUser()), Optional.of(effectiveRealmName(authentication)), Optional.of(authorizationInfo), indices)) == false) {             final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "run_as_denied").with(ACTION_FIELD_NAME, action).with(REQUEST_NAME_FIELD_NAME, message.getClass().getSimpleName()).withRequestId(requestId).withRunAsSubject(authentication).withRestOrTransportOrigin(message, threadContext).with(INDICES_FIELD_NAME, indices.orElse(null)).with(authorizationInfo.asMap()).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().             logger.info(logEntry).         }     } }
false;public;4;20;;@Override public void runAsDenied(String requestId, Authentication authentication, RestRequest request, AuthorizationInfo authorizationInfo) {     if (events.contains(RUN_AS_DENIED) && eventFilterPolicyRegistry.ignorePredicate().test(new AuditEventMetaInfo(Optional.of(authentication.getUser()), Optional.of(effectiveRealmName(authentication)), Optional.of(authorizationInfo), Optional.empty())) == false) {         final StringMapMessage logEntry = new LogEntryBuilder().with(EVENT_TYPE_FIELD_NAME, REST_ORIGIN_FIELD_VALUE).with(EVENT_ACTION_FIELD_NAME, "run_as_denied").with(authorizationInfo.asMap()).withRestUriAndMethod(request).withRunAsSubject(authentication).withRestOrigin(request).withRequestBody(request).withRequestId(requestId).withOpaqueId(threadContext).withXForwardedFor(threadContext).build().         logger.info(logEntry).     } }
false;;1;17;;LogEntryBuilder withRestUriAndMethod(RestRequest request) {     final int queryStringIndex = request.uri().indexOf('?').     int queryStringLength = request.uri().indexOf('#').     if (queryStringLength < 0) {         queryStringLength = request.uri().length().     }     if (queryStringIndex < 0) {         logEntry.with(URL_PATH_FIELD_NAME, request.uri().substring(0, queryStringLength)).     } else {         logEntry.with(URL_PATH_FIELD_NAME, request.uri().substring(0, queryStringIndex)).     }     if (queryStringIndex > -1) {         logEntry.with(URL_QUERY_FIELD_NAME, request.uri().substring(queryStringIndex + 1, queryStringLength)).     }     logEntry.with(REQUEST_METHOD_FIELD_NAME, request.method().toString()).     return this. }
false;;1;9;;LogEntryBuilder withRunAsSubject(Authentication authentication) {     logEntry.with(PRINCIPAL_FIELD_NAME, authentication.getUser().authenticatedUser().principal()).with(PRINCIPAL_REALM_FIELD_NAME, authentication.getAuthenticatedBy().getName()).with(PRINCIPAL_RUN_AS_FIELD_NAME, authentication.getUser().principal()).     if (authentication.getLookedUpBy() != null) {         logEntry.with(PRINCIPAL_RUN_AS_REALM_FIELD_NAME, authentication.getLookedUpBy().getName()).     }     return this. }
false;;1;10;;LogEntryBuilder withRestOrigin(RestRequest request) {     // this is the default     assert LOCAL_ORIGIN_FIELD_VALUE.equals(logEntry.get(ORIGIN_TYPE_FIELD_NAME)).     final InetSocketAddress socketAddress = request.getHttpChannel().getRemoteAddress().     if (socketAddress != null) {         logEntry.with(ORIGIN_TYPE_FIELD_NAME, REST_ORIGIN_FIELD_VALUE).with(ORIGIN_ADDRESS_FIELD_NAME, NetworkAddress.format(socketAddress)).     }     // fall through to local_node default     return this. }
false;;2;16;;LogEntryBuilder withRestOrTransportOrigin(TransportMessage message, ThreadContext threadContext) {     // this is the default     assert LOCAL_ORIGIN_FIELD_VALUE.equals(logEntry.get(ORIGIN_TYPE_FIELD_NAME)).     final InetSocketAddress restAddress = RemoteHostHeader.restRemoteAddress(threadContext).     if (restAddress != null) {         logEntry.with(ORIGIN_TYPE_FIELD_NAME, REST_ORIGIN_FIELD_VALUE).with(ORIGIN_ADDRESS_FIELD_NAME, NetworkAddress.format(restAddress)).     } else {         final TransportAddress address = message.remoteAddress().         if (address != null) {             logEntry.with(ORIGIN_TYPE_FIELD_NAME, TRANSPORT_ORIGIN_FIELD_VALUE).with(ORIGIN_ADDRESS_FIELD_NAME, NetworkAddress.format(address.address())).         }     }     // fall through to local_node default     return this. }
false;;1;9;;LogEntryBuilder withRequestBody(RestRequest request) {     if (includeRequestBody) {         final String requestContent = restRequestContent(request).         if (Strings.hasLength(requestContent)) {             logEntry.with(REQUEST_BODY_FIELD_NAME, requestContent).         }     }     return this. }
false;;1;6;;LogEntryBuilder withRequestId(String requestId) {     if (requestId != null) {         logEntry.with(REQUEST_ID_FIELD_NAME, requestId).     }     return this. }
false;;1;7;;LogEntryBuilder withOpaqueId(ThreadContext threadContext) {     final String opaqueId = threadContext.getHeader(Task.X_OPAQUE_ID).     if (opaqueId != null) {         logEntry.with(OPAQUE_ID_FIELD_NAME, opaqueId).     }     return this. }
false;;1;7;;LogEntryBuilder withXForwardedFor(ThreadContext threadContext) {     final String xForwardedFor = threadContext.getHeader(AuditTrail.X_FORWARDED_FOR_HEADER).     if (xForwardedFor != null) {         logEntry.with(X_FORWARDED_FOR_FIELD_NAME, xForwardedFor).     }     return this. }
false;;1;7;;LogEntryBuilder withPrincipal(User user) {     logEntry.with(PRINCIPAL_FIELD_NAME, user.principal()).     if (user.isRunAs()) {         logEntry.with(PRINCIPAL_RUN_BY_FIELD_NAME, user.authenticatedUser().principal()).     }     return this. }
false;;1;11;;LogEntryBuilder withSubject(Authentication authentication) {     logEntry.with(PRINCIPAL_FIELD_NAME, authentication.getUser().principal()).     if (authentication.getUser().isRunAs()) {         logEntry.with(PRINCIPAL_REALM_FIELD_NAME, authentication.getLookedUpBy().getName()).with(PRINCIPAL_RUN_BY_FIELD_NAME, authentication.getUser().authenticatedUser().principal()).with(PRINCIPAL_RUN_BY_REALM_FIELD_NAME, authentication.getAuthenticatedBy().getName()).     } else {         logEntry.with(PRINCIPAL_REALM_FIELD_NAME, authentication.getAuthenticatedBy().getName()).     }     return this. }
false;;2;6;;LogEntryBuilder with(String key, String value) {     if (value != null) {         logEntry.with(key, value).     }     return this. }
false;;2;6;;LogEntryBuilder with(String key, String[] values) {     if (values != null) {         logEntry.with(key, toQuotedJsonArray(values)).     }     return this. }
false;;1;11;;LogEntryBuilder with(Map<String, Object> map) {     for (Entry<String, Object> entry : map.entrySet()) {         Object value = entry.getValue().         if (value.getClass().isArray()) {             logEntry.with(entry.getKey(), toQuotedJsonArray((Object[]) value)).         } else {             logEntry.with(entry.getKey(), value).         }     }     return this. }
false;;0;3;;StringMapMessage build() {     return logEntry. }
false;;1;18;;String toQuotedJsonArray(Object[] values) {     assert values != null.     final StringBuilder stringBuilder = new StringBuilder().     final JsonStringEncoder jsonStringEncoder = JsonStringEncoder.getInstance().     stringBuilder.append("[").     for (final Object value : values) {         if (value != null) {             if (stringBuilder.length() > 1) {                 stringBuilder.append(",").             }             stringBuilder.append("\"").             jsonStringEncoder.quoteAsString(value.toString(), stringBuilder).             stringBuilder.append("\"").         }     }     stringBuilder.append("]").     return stringBuilder.toString(). }
false;private,static;1;9;;private static Optional<String[]> indices(TransportMessage message) {     if (message instanceof IndicesRequest) {         final String[] indices = ((IndicesRequest) message).indices().         if (indices != null) {             return Optional.of(((IndicesRequest) message).indices()).         }     }     return Optional.empty(). }
false;private,static;1;4;;private static String effectiveRealmName(Authentication authentication) {     return authentication.getLookedUpBy() != null ? authentication.getLookedUpBy().getName() : authentication.getAuthenticatedBy().getName(). }
false;public,static;1;13;;public static void registerSettings(List<Setting<?>> settings) {     settings.add(EMIT_HOST_ADDRESS_SETTING).     settings.add(EMIT_HOST_NAME_SETTING).     settings.add(EMIT_NODE_NAME_SETTING).     settings.add(EMIT_NODE_ID_SETTING).     settings.add(INCLUDE_EVENT_SETTINGS).     settings.add(EXCLUDE_EVENT_SETTINGS).     settings.add(INCLUDE_REQUEST_BODY).     settings.add(FILTER_POLICY_IGNORE_PRINCIPALS).     settings.add(FILTER_POLICY_IGNORE_INDICES).     settings.add(FILTER_POLICY_IGNORE_ROLES).     settings.add(FILTER_POLICY_IGNORE_REALMS). }
false;private;1;4;;private EventFilterPolicy changePrincipalsFilter(List<String> filtersList) {     return new EventFilterPolicy(name, parsePredicate(filtersList), ignoreRealmsPredicate, ignoreRolesPredicate, ignoreIndicesPredicate). }
false;private;1;4;;private EventFilterPolicy changeRealmsFilter(List<String> filtersList) {     return new EventFilterPolicy(name, ignorePrincipalsPredicate, parsePredicate(filtersList), ignoreRolesPredicate, ignoreIndicesPredicate). }
false;private;1;4;;private EventFilterPolicy changeRolesFilter(List<String> filtersList) {     return new EventFilterPolicy(name, ignorePrincipalsPredicate, ignoreRealmsPredicate, parsePredicate(filtersList), ignoreIndicesPredicate). }
false;private;1;4;;private EventFilterPolicy changeIndicesFilter(List<String> filtersList) {     return new EventFilterPolicy(name, ignorePrincipalsPredicate, ignoreRealmsPredicate, ignoreRolesPredicate, parsePredicate(filtersList)). }
false;static;1;3;;static Predicate<String> parsePredicate(List<String> l) {     return Automatons.predicate(emptyStringBuildsEmptyAutomaton(l)). }
true;private,static;1;6;/**  * It is a requirement that empty string filters match empty string fields. In  * this case we require automatons from empty string to match the empty string.  * `Automatons.predicate("").test("") == false`  * `Automatons.predicate("//").test("") == true`  */ ;/**  * It is a requirement that empty string filters match empty string fields. In  * this case we require automatons from empty string to match the empty string.  * `Automatons.predicate("").test("") == false`  * `Automatons.predicate("//").test("") == true`  */ private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {     if (l.isEmpty()) {         return Collections.singletonList("//").     }     return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList()). }
true;;0;6;/**  * ANDs the predicates of this filter policy. The `indices` and `roles` fields  * of an audit event are multi-valued and all values should match the filter  * predicate of the corresponding field.  */ ;/**  * ANDs the predicates of this filter policy. The `indices` and `roles` fields  * of an audit event are multi-valued and all values should match the filter  * predicate of the corresponding field.  */ Predicate<AuditEventMetaInfo> ignorePredicate() {     return eventInfo -> eventInfo.principal != null && ignorePrincipalsPredicate.test(eventInfo.principal) && eventInfo.realm != null && ignoreRealmsPredicate.test(eventInfo.realm) && eventInfo.roles.get().allMatch(role -> role != null && ignoreRolesPredicate.test(role)) && eventInfo.indices.get().allMatch(index -> index != null && ignoreIndicesPredicate.test(index)). }
false;public;0;5;;@Override public String toString() {     return "[users]:" + ignorePrincipalsPredicate.toString() + "&[realms]:" + ignoreRealmsPredicate.toString() + "&[roles]:" + ignoreRolesPredicate.toString() + "&[indices]:" + ignoreIndicesPredicate.toString(). }
false;private;1;3;;private Optional<EventFilterPolicy> get(String policyName) {     return Optional.ofNullable(policyMap.get(policyName)). }
false;private,synchronized;2;5;;private synchronized void set(String policyName, EventFilterPolicy eventFilterPolicy) {     policyMap = MapBuilder.newMapBuilder(policyMap).put(policyName, eventFilterPolicy).immutableMap().     // precompute predicate     predicate = buildIgnorePredicate(policyMap). }
false;;0;3;;Predicate<AuditEventMetaInfo> ignorePredicate() {     return predicate. }
false;private,static;1;3;;private static Predicate<AuditEventMetaInfo> buildIgnorePredicate(Map<String, EventFilterPolicy> policyMap) {     return policyMap.values().stream().map(EventFilterPolicy::ignorePredicate).reduce(x -> false, (x, y) -> x.or(y)). }
false;public;0;9;;@Override public String toString() {     final Map<String, EventFilterPolicy> treeMap = new TreeMap<>(policyMap).     final StringBuilder sb = new StringBuilder().     for (final Map.Entry<String, EventFilterPolicy> entry : treeMap.entrySet()) {         sb.append(entry.getKey()).append(":").append(entry.getValue().toString()).     }     return sb.toString(). }
false;public;1;4;;@Override public void clusterChanged(ClusterChangedEvent event) {     updateLocalNodeInfo(event.state().getNodes().getLocalNode()). }
false;;1;8;;void updateLocalNodeInfo(DiscoveryNode newLocalNode) {     // check if local node changed     final EntryCommonFields localNodeInfo = this.entryCommonFields.     if (localNodeInfo.localNode == null || localNodeInfo.localNode.equals(newLocalNode) == false) {         // no need to synchronize, called only from the cluster state applier thread         this.entryCommonFields = this.entryCommonFields.withNewLocalNode(newLocalNode).     } }
false;;1;4;;EntryCommonFields withNewSettings(Settings newSettings) {     final Settings mergedSettings = Settings.builder().put(this.settings).put(newSettings, false).build().     return new EntryCommonFields(mergedSettings, this.localNode). }
false;;1;3;;EntryCommonFields withNewLocalNode(DiscoveryNode newLocalNode) {     return new EntryCommonFields(this.settings, newLocalNode). }
