# id;timestamp;commentText;codeText;commentWords;codeWords
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1524684173;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1529015561;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1531234550;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1533295538;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1535552903;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1536964057;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1539951844;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1541092382;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1541169206;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1541678807;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1543292387;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1544471687;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1545224200;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1547385983;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1549182857;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            _            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,                 Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate);1549399169;An empty filter list for a field will match events with that field missing._An event with an undefined field has the field value the empty string ("") or_a singleton list of the empty string ([""]).;EventFilterPolicy(String name, Predicate<String> ignorePrincipalsPredicate, Predicate<String> ignoreRealmsPredicate,_                Predicate<String> ignoreRolesPredicate, Predicate<String> ignoreIndicesPredicate) {_            this.name = name__            _            this.ignorePrincipalsPredicate = ignorePrincipalsPredicate__            this.ignoreRealmsPredicate = ignoreRealmsPredicate__            this.ignoreRolesPredicate = ignoreRolesPredicate__            this.ignoreIndicesPredicate = ignoreIndicesPredicate__        };an,empty,filter,list,for,a,field,will,match,events,with,that,field,missing,an,event,with,an,undefined,field,has,the,field,value,the,empty,string,or,a,singleton,list,of,the,empty,string;event,filter,policy,string,name,predicate,string,ignore,principals,predicate,predicate,string,ignore,realms,predicate,predicate,string,ignore,roles,predicate,predicate,string,ignore,indices,predicate,this,name,name,this,ignore,principals,predicate,ignore,principals,predicate,this,ignore,realms,predicate,ignore,realms,predicate,this,ignore,roles,predicate,ignore,roles,predicate,this,ignore,indices,predicate,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1524684173;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1529015561;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1531234550;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1533295538;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1535552903;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1536964057;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1539951844;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1541092382;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1541169206;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1541678807;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1543292387;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1544471687;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1545224200;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1547385983;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1549182857;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> EventFilterPolicy -> private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l);1549399169;It is a requirement that empty string filters match empty string fields. In_this case we require automatons from empty string to match the empty string._`Automatons.predicate("").test("") == false`_`Automatons.predicate("//").test("") == true`;private static List<String> emptyStringBuildsEmptyAutomaton(List<String> l) {_            if (l.isEmpty()) {_                return Collections.singletonList("//")__            }_            return l.stream().map(f -> f.isEmpty() ? "//" : f).collect(Collectors.toList())__        };it,is,a,requirement,that,empty,string,filters,match,empty,string,fields,in,this,case,we,require,automatons,from,empty,string,to,match,the,empty,string,automatons,predicate,test,false,automatons,predicate,test,true;private,static,list,string,empty,string,builds,empty,automaton,list,string,l,if,l,is,empty,return,collections,singleton,list,return,l,stream,map,f,f,is,empty,f,collect,collectors,to,list
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1524684173;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1529015561;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1531234550;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1533295538;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1535552903;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1536964057;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1539951844;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1541092382;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1541169206;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1541678807;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1543292387;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1544471687;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1545224200;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1547385983;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length != 0).map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length != 0).map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> AuditEventMetaInfo -> AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices);1549182857;If a field is missing for an event, its value for filtering purposes is the_empty string or a singleton stream of the empty string. This a allows a_policy to filter by the missing value using the empty string, ie_`ignore_filters.users: ["", "elastic"]` will filter events with a missing_user field (such as `anonymous_access_denied`) as well as events from the_"elastic" username.;AuditEventMetaInfo(Optional<User> user, Optional<String> realm, Optional<String[]> roles, Optional<String[]> indices) {_            this.principal = user.map(u -> u.principal()).orElse("")__            this.realm = realm.orElse("")__            _            _            _            _            _            this.roles = () -> roles.filter(r -> r.length > 0).filter(a -> Arrays.stream(a).anyMatch(Objects::nonNull))_                    .map(Arrays::stream).orElse(Stream.of(""))__            this.indices = () -> indices.filter(i -> i.length > 0).filter(a -> Arrays.stream(a).anyMatch(Objects::nonNull))_                    .map(Arrays::stream).orElse(Stream.of(""))__        };if,a,field,is,missing,for,an,event,its,value,for,filtering,purposes,is,the,empty,string,or,a,singleton,stream,of,the,empty,string,this,a,allows,a,policy,to,filter,by,the,missing,value,using,the,empty,string,ie,users,elastic,will,filter,events,with,a,missing,user,field,such,as,as,well,as,events,from,the,elastic,username;audit,event,meta,info,optional,user,user,optional,string,realm,optional,string,roles,optional,string,indices,this,principal,user,map,u,u,principal,or,else,this,realm,realm,or,else,this,roles,roles,filter,r,r,length,0,filter,a,arrays,stream,a,any,match,objects,non,null,map,arrays,stream,or,else,stream,of,this,indices,indices,filter,i,i,length,0,filter,a,arrays,stream,a,any,match,objects,non,null,map,arrays,stream,or,else,stream,of
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1524684173;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1529015561;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1531234550;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1533295538;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1535552903;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1536964057;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1539951844;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1541092382;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1541169206;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1541678807;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1543292387;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1544471687;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1545224200;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1547385983;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> ignorePrincipalsPredicate.test(eventInfo.principal) && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(ignoreRolesPredicate) && eventInfo.indices.get().allMatch(ignoreIndicesPredicate)__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,ignore,principals,predicate,test,event,info,principal,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,ignore,roles,predicate,event,info,indices,get,all,match,ignore,indices,predicate
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1549182857;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> eventInfo.principal != null && ignorePrincipalsPredicate.test(eventInfo.principal)_                    && eventInfo.realm != null && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(role -> role != null && ignoreRolesPredicate.test(role))_                    && eventInfo.indices.get().allMatch(index -> index != null && ignoreIndicesPredicate.test(index))__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,event,info,principal,null,ignore,principals,predicate,test,event,info,principal,event,info,realm,null,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,role,role,null,ignore,roles,predicate,test,role,event,info,indices,get,all,match,index,index,null,ignore,indices,predicate,test,index
LoggingAuditTrail -> EventFilterPolicy -> Predicate<AuditEventMetaInfo> ignorePredicate();1549399169;ANDs the predicates of this filter policy. The `indices` and `roles` fields_of an audit event are multi-valued and all values should match the filter_predicate of the corresponding field.;Predicate<AuditEventMetaInfo> ignorePredicate() {_            return eventInfo -> eventInfo.principal != null && ignorePrincipalsPredicate.test(eventInfo.principal)_                    && eventInfo.realm != null && ignoreRealmsPredicate.test(eventInfo.realm)_                    && eventInfo.roles.get().allMatch(role -> role != null && ignoreRolesPredicate.test(role))_                    && eventInfo.indices.get().allMatch(index -> index != null && ignoreIndicesPredicate.test(index))__        };ands,the,predicates,of,this,filter,policy,the,indices,and,roles,fields,of,an,audit,event,are,multi,valued,and,all,values,should,match,the,filter,predicate,of,the,corresponding,field;predicate,audit,event,meta,info,ignore,predicate,return,event,info,event,info,principal,null,ignore,principals,predicate,test,event,info,principal,event,info,realm,null,ignore,realms,predicate,test,event,info,realm,event,info,roles,get,all,match,role,role,null,ignore,roles,predicate,test,role,event,info,indices,get,all,match,index,index,null,ignore,indices,predicate,test,index
