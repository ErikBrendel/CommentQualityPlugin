# id;timestamp;commentText;codeText;commentWords;codeWords
LdapUtils -> public static void searchForEntry(LDAPConnection ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1524684173;This method performs an asynchronous ldap search operation that only expects at most one_result._If more than one result is found then this is an error_If no results are found, then {@code null} will be returned._If the LDAP server returns an error {@link ResultCode} then this is handled as a_{@link ActionListener#onFailure(Exception) failure};public static void searchForEntry(LDAPConnection ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        LdapSearchResultListener searchResultListener = new SingleEntryListener(ldap, listener,_                filter, ignoreReferralErrors)__        try {_            SearchRequest request = new SearchRequest(searchResultListener, baseDN, scope,_                    DereferencePolicy.NEVER, 0, timeLimitSeconds, false, filter, attributes)__            searchResultListener.setSearchRequest(request)__            ldap.asyncSearch(request)__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,only,expects,at,most,one,result,if,more,than,one,result,is,found,then,this,is,an,error,if,no,results,are,found,then,code,null,will,be,returned,if,the,ldap,server,returns,an,error,link,result,code,then,this,is,handled,as,a,link,action,listener,on,failure,exception,failure;public,static,void,search,for,entry,ldapconnection,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,ldap,search,result,listener,search,result,listener,new,single,entry,listener,ldap,listener,filter,ignore,referral,errors,try,search,request,request,new,search,request,search,result,listener,base,dn,scope,dereference,policy,never,0,time,limit,seconds,false,filter,attributes,search,result,listener,set,search,request,request,ldap,async,search,request,catch,ldapexception,e,listener,on,failure,e
LdapUtils -> public static void searchForEntry(LDAPConnection ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1539615817;This method performs an asynchronous ldap search operation that only expects at most one_result._If more than one result is found then this is an error_If no results are found, then {@code null} will be returned._If the LDAP server returns an error {@link ResultCode} then this is handled as a_{@link ActionListener#onFailure(Exception) failure};public static void searchForEntry(LDAPConnection ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        LdapSearchResultListener searchResultListener = new SingleEntryListener(ldap, listener,_                filter, ignoreReferralErrors)__        try {_            SearchRequest request = new SearchRequest(searchResultListener, baseDN, scope,_                    DereferencePolicy.NEVER, 0, timeLimitSeconds, false, filter, attributes)__            searchResultListener.setSearchRequest(request)__            ldap.asyncSearch(request)__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,only,expects,at,most,one,result,if,more,than,one,result,is,found,then,this,is,an,error,if,no,results,are,found,then,code,null,will,be,returned,if,the,ldap,server,returns,an,error,link,result,code,then,this,is,handled,as,a,link,action,listener,on,failure,exception,failure;public,static,void,search,for,entry,ldapconnection,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,ldap,search,result,listener,search,result,listener,new,single,entry,listener,ldap,listener,filter,ignore,referral,errors,try,search,request,request,new,search,request,search,result,listener,base,dn,scope,dereference,policy,never,0,time,limit,seconds,false,filter,attributes,search,result,listener,set,search,request,request,ldap,async,search,request,catch,ldapexception,e,listener,on,failure,e
LdapUtils -> public static void searchForEntry(LDAPConnection ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1541476610;This method performs an asynchronous ldap search operation that only expects at most one_result._If more than one result is found then this is an error_If no results are found, then {@code null} will be returned._If the LDAP server returns an error {@link ResultCode} then this is handled as a_{@link ActionListener#onFailure(Exception) failure};public static void searchForEntry(LDAPConnection ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        LdapSearchResultListener searchResultListener = new SingleEntryListener(ldap, listener,_                filter, ignoreReferralErrors)__        try {_            SearchRequest request = new SearchRequest(searchResultListener, baseDN, scope,_                    DereferencePolicy.NEVER, 0, timeLimitSeconds, false, filter, attributes)__            searchResultListener.setSearchRequest(request)__            ldap.asyncSearch(request)__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,only,expects,at,most,one,result,if,more,than,one,result,is,found,then,this,is,an,error,if,no,results,are,found,then,code,null,will,be,returned,if,the,ldap,server,returns,an,error,link,result,code,then,this,is,handled,as,a,link,action,listener,on,failure,exception,failure;public,static,void,search,for,entry,ldapconnection,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,ldap,search,result,listener,search,result,listener,new,single,entry,listener,ldap,listener,filter,ignore,referral,errors,try,search,request,request,new,search,request,search,result,listener,base,dn,scope,dereference,policy,never,0,time,limit,seconds,false,filter,attributes,search,result,listener,set,search,request,request,ldap,async,search,request,catch,ldapexception,e,listener,on,failure,e
LdapUtils -> public static void searchForEntry(LDAPConnection ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1543791957;This method performs an asynchronous ldap search operation that only expects at most one_result._If more than one result is found then this is an error_If no results are found, then {@code null} will be returned._If the LDAP server returns an error {@link ResultCode} then this is handled as a_{@link ActionListener#onFailure(Exception) failure};public static void searchForEntry(LDAPConnection ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        LdapSearchResultListener searchResultListener = new SingleEntryListener(ldap, listener,_                filter, ignoreReferralErrors)__        try {_            SearchRequest request = new SearchRequest(searchResultListener, baseDN, scope,_                    DereferencePolicy.NEVER, 0, timeLimitSeconds, false, filter, attributes)__            searchResultListener.setSearchRequest(request)__            ldap.asyncSearch(request)__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,only,expects,at,most,one,result,if,more,than,one,result,is,found,then,this,is,an,error,if,no,results,are,found,then,code,null,will,be,returned,if,the,ldap,server,returns,an,error,link,result,code,then,this,is,handled,as,a,link,action,listener,on,failure,exception,failure;public,static,void,search,for,entry,ldapconnection,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,ldap,search,result,listener,search,result,listener,new,single,entry,listener,ldap,listener,filter,ignore,referral,errors,try,search,request,request,new,search,request,search,result,listener,base,dn,scope,dereference,policy,never,0,time,limit,seconds,false,filter,attributes,search,result,listener,set,search,request,request,ldap,async,search,request,catch,ldapexception,e,listener,on,failure,e
LdapUtils -> public static void searchForEntry(LDAPInterface ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1524684173;This method performs an asynchronous ldap search operation that could have multiple results;public static void searchForEntry(LDAPInterface ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        if (ldap instanceof LDAPConnection) {_            searchForEntry((LDAPConnection) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else if (ldap instanceof LDAPConnectionPool) {_            searchForEntry((LDAPConnectionPool) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else {_            throw new IllegalArgumentException("unsupported LDAPInterface implementation: " + ldap)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,for,entry,ldapinterface,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,if,ldap,instanceof,ldapconnection,search,for,entry,ldapconnection,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,if,ldap,instanceof,ldapconnection,pool,search,for,entry,ldapconnection,pool,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,throw,new,illegal,argument,exception,unsupported,ldapinterface,implementation,ldap
LdapUtils -> public static void searchForEntry(LDAPInterface ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1539615817;This method performs an asynchronous ldap search operation that could have multiple results;public static void searchForEntry(LDAPInterface ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        if (ldap instanceof LDAPConnection) {_            searchForEntry((LDAPConnection) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else if (ldap instanceof LDAPConnectionPool) {_            searchForEntry((LDAPConnectionPool) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else {_            throw new IllegalArgumentException("unsupported LDAPInterface implementation: " + ldap)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,for,entry,ldapinterface,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,if,ldap,instanceof,ldapconnection,search,for,entry,ldapconnection,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,if,ldap,instanceof,ldapconnection,pool,search,for,entry,ldapconnection,pool,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,throw,new,illegal,argument,exception,unsupported,ldapinterface,implementation,ldap
LdapUtils -> public static void searchForEntry(LDAPInterface ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1541476610;This method performs an asynchronous ldap search operation that could have multiple results;public static void searchForEntry(LDAPInterface ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        if (ldap instanceof LDAPConnection) {_            searchForEntry((LDAPConnection) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else if (ldap instanceof LDAPConnectionPool) {_            searchForEntry((LDAPConnectionPool) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else {_            throw new IllegalArgumentException("unsupported LDAPInterface implementation: " + ldap)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,for,entry,ldapinterface,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,if,ldap,instanceof,ldapconnection,search,for,entry,ldapconnection,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,if,ldap,instanceof,ldapconnection,pool,search,for,entry,ldapconnection,pool,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,throw,new,illegal,argument,exception,unsupported,ldapinterface,implementation,ldap
LdapUtils -> public static void searchForEntry(LDAPInterface ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1543791957;This method performs an asynchronous ldap search operation that could have multiple results;public static void searchForEntry(LDAPInterface ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        if (ldap instanceof LDAPConnection) {_            searchForEntry((LDAPConnection) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else if (ldap instanceof LDAPConnectionPool) {_            searchForEntry((LDAPConnectionPool) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else {_            throw new IllegalArgumentException("unsupported LDAPInterface implementation: " + ldap)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,for,entry,ldapinterface,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,if,ldap,instanceof,ldapconnection,search,for,entry,ldapconnection,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,if,ldap,instanceof,ldapconnection,pool,search,for,entry,ldapconnection,pool,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,throw,new,illegal,argument,exception,unsupported,ldapinterface,implementation,ldap
LdapUtils -> public static void maybeForkThenBindAndRevert(LDAPConnectionPool ldapPool, BindRequest bind, ThreadPool threadPool,                                                   AbstractRunnable runnable);1524684173;This method submits the {@code bind} request over one connection from the_pool. The bind authentication is then reverted and the connection is returned_to the pool, so that the connection can be safely reused, see_{@code LDAPConnectionPool#bindAndRevertAuthentication}. This validates the_bind credentials.__Bind calls are blocking and if a bind is executed on the LDAP Connection_Reader thread (as returned by {@code LdapUtils#isLdapConnectionThread}), the_thread will be blocked until it is interrupted by something else such as a_timeout timer. <b>Do not call bind</b> outside this method or_{@link LdapUtils#maybeForkThenBind(LDAPConnection, BindRequest, ThreadPool, AbstractRunnable)}__@param ldapPool_The LDAP connection pool on which to submit the bind operation._@param bind_The request object of the bind operation._@param threadPool_The threads that will call the blocking bind operation, in case_the calling thread is a connection reader, see:_{@code LdapUtils#isLdapConnectionThread}._@param runnable_The runnable that continues the program flow after the bind_operation. It is executed on the same thread as the prior bind.;public static void maybeForkThenBindAndRevert(LDAPConnectionPool ldapPool, BindRequest bind, ThreadPool threadPool,_                                                  AbstractRunnable runnable) {_        final Runnable bindRunnable = new AbstractRunnable() {_            @Override_            @SuppressForbidden(reason = "Bind allowed if forking of the LDAP Connection Reader Thread.")_            protected void doRun() throws Exception {_                privilegedConnect(() -> ldapPool.bindAndRevertAuthentication(bind.duplicate()))__                runnable.run()__            }__            @Override_            public void onFailure(Exception e) {_                runnable.onFailure(e)__            }__            @Override_            public void onAfter() {_                runnable.onAfter()__            }_        }__        maybeForkAndRun(threadPool, bindRunnable)__    };this,method,submits,the,code,bind,request,over,one,connection,from,the,pool,the,bind,authentication,is,then,reverted,and,the,connection,is,returned,to,the,pool,so,that,the,connection,can,be,safely,reused,see,code,ldapconnection,pool,bind,and,revert,authentication,this,validates,the,bind,credentials,bind,calls,are,blocking,and,if,a,bind,is,executed,on,the,ldap,connection,reader,thread,as,returned,by,code,ldap,utils,is,ldap,connection,thread,the,thread,will,be,blocked,until,it,is,interrupted,by,something,else,such,as,a,timeout,timer,b,do,not,call,bind,b,outside,this,method,or,link,ldap,utils,maybe,fork,then,bind,ldapconnection,bind,request,thread,pool,abstract,runnable,param,ldap,pool,the,ldap,connection,pool,on,which,to,submit,the,bind,operation,param,bind,the,request,object,of,the,bind,operation,param,thread,pool,the,threads,that,will,call,the,blocking,bind,operation,in,case,the,calling,thread,is,a,connection,reader,see,code,ldap,utils,is,ldap,connection,thread,param,runnable,the,runnable,that,continues,the,program,flow,after,the,bind,operation,it,is,executed,on,the,same,thread,as,the,prior,bind;public,static,void,maybe,fork,then,bind,and,revert,ldapconnection,pool,ldap,pool,bind,request,bind,thread,pool,thread,pool,abstract,runnable,runnable,final,runnable,bind,runnable,new,abstract,runnable,override,suppress,forbidden,reason,bind,allowed,if,forking,of,the,ldap,connection,reader,thread,protected,void,do,run,throws,exception,privileged,connect,ldap,pool,bind,and,revert,authentication,bind,duplicate,runnable,run,override,public,void,on,failure,exception,e,runnable,on,failure,e,override,public,void,on,after,runnable,on,after,maybe,fork,and,run,thread,pool,bind,runnable
LdapUtils -> public static void maybeForkThenBindAndRevert(LDAPConnectionPool ldapPool, BindRequest bind, ThreadPool threadPool,                                                   AbstractRunnable runnable);1539615817;This method submits the {@code bind} request over one connection from the_pool. The bind authentication is then reverted and the connection is returned_to the pool, so that the connection can be safely reused, see_{@code LDAPConnectionPool#bindAndRevertAuthentication}. This validates the_bind credentials.__Bind calls are blocking and if a bind is executed on the LDAP Connection_Reader thread (as returned by {@code LdapUtils#isLdapConnectionThread}), the_thread will be blocked until it is interrupted by something else such as a_timeout timer. <b>Do not call bind</b> outside this method or_{@link LdapUtils#maybeForkThenBind(LDAPConnection, BindRequest, ThreadPool, AbstractRunnable)}__@param ldapPool_The LDAP connection pool on which to submit the bind operation._@param bind_The request object of the bind operation._@param threadPool_The threads that will call the blocking bind operation, in case_the calling thread is a connection reader, see:_{@code LdapUtils#isLdapConnectionThread}._@param runnable_The runnable that continues the program flow after the bind_operation. It is executed on the same thread as the prior bind.;public static void maybeForkThenBindAndRevert(LDAPConnectionPool ldapPool, BindRequest bind, ThreadPool threadPool,_                                                  AbstractRunnable runnable) {_        final Runnable bindRunnable = new AbstractRunnable() {_            @Override_            @SuppressForbidden(reason = "Bind allowed if forking of the LDAP Connection Reader Thread.")_            protected void doRun() throws Exception {_                privilegedConnect(() -> ldapPool.bindAndRevertAuthentication(bind.duplicate()))__                runnable.run()__            }__            @Override_            public void onFailure(Exception e) {_                runnable.onFailure(e)__            }__            @Override_            public void onAfter() {_                runnable.onAfter()__            }_        }__        maybeForkAndRun(threadPool, bindRunnable)__    };this,method,submits,the,code,bind,request,over,one,connection,from,the,pool,the,bind,authentication,is,then,reverted,and,the,connection,is,returned,to,the,pool,so,that,the,connection,can,be,safely,reused,see,code,ldapconnection,pool,bind,and,revert,authentication,this,validates,the,bind,credentials,bind,calls,are,blocking,and,if,a,bind,is,executed,on,the,ldap,connection,reader,thread,as,returned,by,code,ldap,utils,is,ldap,connection,thread,the,thread,will,be,blocked,until,it,is,interrupted,by,something,else,such,as,a,timeout,timer,b,do,not,call,bind,b,outside,this,method,or,link,ldap,utils,maybe,fork,then,bind,ldapconnection,bind,request,thread,pool,abstract,runnable,param,ldap,pool,the,ldap,connection,pool,on,which,to,submit,the,bind,operation,param,bind,the,request,object,of,the,bind,operation,param,thread,pool,the,threads,that,will,call,the,blocking,bind,operation,in,case,the,calling,thread,is,a,connection,reader,see,code,ldap,utils,is,ldap,connection,thread,param,runnable,the,runnable,that,continues,the,program,flow,after,the,bind,operation,it,is,executed,on,the,same,thread,as,the,prior,bind;public,static,void,maybe,fork,then,bind,and,revert,ldapconnection,pool,ldap,pool,bind,request,bind,thread,pool,thread,pool,abstract,runnable,runnable,final,runnable,bind,runnable,new,abstract,runnable,override,suppress,forbidden,reason,bind,allowed,if,forking,of,the,ldap,connection,reader,thread,protected,void,do,run,throws,exception,privileged,connect,ldap,pool,bind,and,revert,authentication,bind,duplicate,runnable,run,override,public,void,on,failure,exception,e,runnable,on,failure,e,override,public,void,on,after,runnable,on,after,maybe,fork,and,run,thread,pool,bind,runnable
LdapUtils -> public static void maybeForkThenBindAndRevert(LDAPConnectionPool ldapPool, BindRequest bind, ThreadPool threadPool,                                                   AbstractRunnable runnable);1541476610;This method submits the {@code bind} request over one connection from the_pool. The bind authentication is then reverted and the connection is returned_to the pool, so that the connection can be safely reused, see_{@code LDAPConnectionPool#bindAndRevertAuthentication}. This validates the_bind credentials.__Bind calls are blocking and if a bind is executed on the LDAP Connection_Reader thread (as returned by {@code LdapUtils#isLdapConnectionThread}), the_thread will be blocked until it is interrupted by something else such as a_timeout timer. <b>Do not call bind</b> outside this method or_{@link LdapUtils#maybeForkThenBind(LDAPConnection, BindRequest, ThreadPool, AbstractRunnable)}__@param ldapPool_The LDAP connection pool on which to submit the bind operation._@param bind_The request object of the bind operation._@param threadPool_The threads that will call the blocking bind operation, in case_the calling thread is a connection reader, see:_{@code LdapUtils#isLdapConnectionThread}._@param runnable_The runnable that continues the program flow after the bind_operation. It is executed on the same thread as the prior bind.;public static void maybeForkThenBindAndRevert(LDAPConnectionPool ldapPool, BindRequest bind, ThreadPool threadPool,_                                                  AbstractRunnable runnable) {_        final Runnable bindRunnable = new AbstractRunnable() {_            @Override_            @SuppressForbidden(reason = "Bind allowed if forking of the LDAP Connection Reader Thread.")_            protected void doRun() throws Exception {_                privilegedConnect(() -> ldapPool.bindAndRevertAuthentication(bind.duplicate()))__                runnable.run()__            }__            @Override_            public void onFailure(Exception e) {_                runnable.onFailure(e)__            }__            @Override_            public void onAfter() {_                runnable.onAfter()__            }_        }__        maybeForkAndRun(threadPool, bindRunnable)__    };this,method,submits,the,code,bind,request,over,one,connection,from,the,pool,the,bind,authentication,is,then,reverted,and,the,connection,is,returned,to,the,pool,so,that,the,connection,can,be,safely,reused,see,code,ldapconnection,pool,bind,and,revert,authentication,this,validates,the,bind,credentials,bind,calls,are,blocking,and,if,a,bind,is,executed,on,the,ldap,connection,reader,thread,as,returned,by,code,ldap,utils,is,ldap,connection,thread,the,thread,will,be,blocked,until,it,is,interrupted,by,something,else,such,as,a,timeout,timer,b,do,not,call,bind,b,outside,this,method,or,link,ldap,utils,maybe,fork,then,bind,ldapconnection,bind,request,thread,pool,abstract,runnable,param,ldap,pool,the,ldap,connection,pool,on,which,to,submit,the,bind,operation,param,bind,the,request,object,of,the,bind,operation,param,thread,pool,the,threads,that,will,call,the,blocking,bind,operation,in,case,the,calling,thread,is,a,connection,reader,see,code,ldap,utils,is,ldap,connection,thread,param,runnable,the,runnable,that,continues,the,program,flow,after,the,bind,operation,it,is,executed,on,the,same,thread,as,the,prior,bind;public,static,void,maybe,fork,then,bind,and,revert,ldapconnection,pool,ldap,pool,bind,request,bind,thread,pool,thread,pool,abstract,runnable,runnable,final,runnable,bind,runnable,new,abstract,runnable,override,suppress,forbidden,reason,bind,allowed,if,forking,of,the,ldap,connection,reader,thread,protected,void,do,run,throws,exception,privileged,connect,ldap,pool,bind,and,revert,authentication,bind,duplicate,runnable,run,override,public,void,on,failure,exception,e,runnable,on,failure,e,override,public,void,on,after,runnable,on,after,maybe,fork,and,run,thread,pool,bind,runnable
LdapUtils -> public static void maybeForkThenBindAndRevert(LDAPConnectionPool ldapPool, BindRequest bind, ThreadPool threadPool,                                                   AbstractRunnable runnable);1543791957;This method submits the {@code bind} request over one connection from the_pool. The bind authentication is then reverted and the connection is returned_to the pool, so that the connection can be safely reused, see_{@code LDAPConnectionPool#bindAndRevertAuthentication}. This validates the_bind credentials.__Bind calls are blocking and if a bind is executed on the LDAP Connection_Reader thread (as returned by {@code LdapUtils#isLdapConnectionThread}), the_thread will be blocked until it is interrupted by something else such as a_timeout timer. <b>Do not call bind</b> outside this method or_{@link LdapUtils#maybeForkThenBind(LDAPConnection, BindRequest, ThreadPool, AbstractRunnable)}__@param ldapPool_The LDAP connection pool on which to submit the bind operation._@param bind_The request object of the bind operation._@param threadPool_The threads that will call the blocking bind operation, in case_the calling thread is a connection reader, see:_{@code LdapUtils#isLdapConnectionThread}._@param runnable_The runnable that continues the program flow after the bind_operation. It is executed on the same thread as the prior bind.;public static void maybeForkThenBindAndRevert(LDAPConnectionPool ldapPool, BindRequest bind, ThreadPool threadPool,_                                                  AbstractRunnable runnable) {_        final Runnable bindRunnable = new AbstractRunnable() {_            @Override_            @SuppressForbidden(reason = "Bind allowed if forking of the LDAP Connection Reader Thread.")_            protected void doRun() throws Exception {_                privilegedConnect(() -> ldapPool.bindAndRevertAuthentication(bind.duplicate()))__                LOGGER.trace("LDAP bind [{}] succeeded for [{}]", bind, ldapPool)__                runnable.run()__            }__            @Override_            public void onFailure(Exception e) {_                LOGGER.debug("LDAP bind [{}] failed for [{}] - [{}]", bind, ldapPool, e.toString())__                runnable.onFailure(e)__            }__            @Override_            public void onAfter() {_                runnable.onAfter()__            }_        }__        maybeForkAndRun(threadPool, bindRunnable)__    };this,method,submits,the,code,bind,request,over,one,connection,from,the,pool,the,bind,authentication,is,then,reverted,and,the,connection,is,returned,to,the,pool,so,that,the,connection,can,be,safely,reused,see,code,ldapconnection,pool,bind,and,revert,authentication,this,validates,the,bind,credentials,bind,calls,are,blocking,and,if,a,bind,is,executed,on,the,ldap,connection,reader,thread,as,returned,by,code,ldap,utils,is,ldap,connection,thread,the,thread,will,be,blocked,until,it,is,interrupted,by,something,else,such,as,a,timeout,timer,b,do,not,call,bind,b,outside,this,method,or,link,ldap,utils,maybe,fork,then,bind,ldapconnection,bind,request,thread,pool,abstract,runnable,param,ldap,pool,the,ldap,connection,pool,on,which,to,submit,the,bind,operation,param,bind,the,request,object,of,the,bind,operation,param,thread,pool,the,threads,that,will,call,the,blocking,bind,operation,in,case,the,calling,thread,is,a,connection,reader,see,code,ldap,utils,is,ldap,connection,thread,param,runnable,the,runnable,that,continues,the,program,flow,after,the,bind,operation,it,is,executed,on,the,same,thread,as,the,prior,bind;public,static,void,maybe,fork,then,bind,and,revert,ldapconnection,pool,ldap,pool,bind,request,bind,thread,pool,thread,pool,abstract,runnable,runnable,final,runnable,bind,runnable,new,abstract,runnable,override,suppress,forbidden,reason,bind,allowed,if,forking,of,the,ldap,connection,reader,thread,protected,void,do,run,throws,exception,privileged,connect,ldap,pool,bind,and,revert,authentication,bind,duplicate,logger,trace,ldap,bind,succeeded,for,bind,ldap,pool,runnable,run,override,public,void,on,failure,exception,e,logger,debug,ldap,bind,failed,for,bind,ldap,pool,e,to,string,runnable,on,failure,e,override,public,void,on,after,runnable,on,after,maybe,fork,and,run,thread,pool,bind,runnable
LdapUtils -> public static void maybeForkThenBind(LDAPConnection ldap, BindRequest bind, ThreadPool threadPool, AbstractRunnable runnable);1524684173;This method submits the {@code bind} request over the ldap connection. Its_authentication status changes. The connection can be subsequently reused._This validates the bind credentials.__Bind calls are blocking and if a bind is executed on the LDAP Connection_Reader thread (as returned by {@code LdapUtils#isLdapConnectionThread}), the_thread will be blocked until it is interrupted by something else such as a_timeout timer. <b>Do not call bind</b> outside this method or_{@link LdapUtils#maybeForkThenBind(LDAPConnection, BindRequest, ThreadPool, AbstractRunnable)}__@param ldap_The LDAP connection on which to submit the bind operation._@param bind_The request object of the bind operation._@param threadPool_The threads that will call the blocking bind operation, in case_the calling thread is a connection reader, see:_{@code LdapUtils#isLdapConnectionThread}._@param runnable_The runnable that continues the program flow after the bind_operation. It is executed on the same thread as the prior bind.;public static void maybeForkThenBind(LDAPConnection ldap, BindRequest bind, ThreadPool threadPool, AbstractRunnable runnable) {_        final Runnable bindRunnable = new AbstractRunnable() {_            @Override_            @SuppressForbidden(reason = "Bind allowed if forking of the LDAP Connection Reader Thread.")_            protected void doRun() throws Exception {_                privilegedConnect(() -> ldap.bind(bind.duplicate()))__                runnable.run()__            }__            @Override_            public void onFailure(Exception e) {_                runnable.onFailure(e)__            }__            @Override_            public void onAfter() {_                runnable.onAfter()__            }_        }__        maybeForkAndRun(threadPool, bindRunnable)__    };this,method,submits,the,code,bind,request,over,the,ldap,connection,its,authentication,status,changes,the,connection,can,be,subsequently,reused,this,validates,the,bind,credentials,bind,calls,are,blocking,and,if,a,bind,is,executed,on,the,ldap,connection,reader,thread,as,returned,by,code,ldap,utils,is,ldap,connection,thread,the,thread,will,be,blocked,until,it,is,interrupted,by,something,else,such,as,a,timeout,timer,b,do,not,call,bind,b,outside,this,method,or,link,ldap,utils,maybe,fork,then,bind,ldapconnection,bind,request,thread,pool,abstract,runnable,param,ldap,the,ldap,connection,on,which,to,submit,the,bind,operation,param,bind,the,request,object,of,the,bind,operation,param,thread,pool,the,threads,that,will,call,the,blocking,bind,operation,in,case,the,calling,thread,is,a,connection,reader,see,code,ldap,utils,is,ldap,connection,thread,param,runnable,the,runnable,that,continues,the,program,flow,after,the,bind,operation,it,is,executed,on,the,same,thread,as,the,prior,bind;public,static,void,maybe,fork,then,bind,ldapconnection,ldap,bind,request,bind,thread,pool,thread,pool,abstract,runnable,runnable,final,runnable,bind,runnable,new,abstract,runnable,override,suppress,forbidden,reason,bind,allowed,if,forking,of,the,ldap,connection,reader,thread,protected,void,do,run,throws,exception,privileged,connect,ldap,bind,bind,duplicate,runnable,run,override,public,void,on,failure,exception,e,runnable,on,failure,e,override,public,void,on,after,runnable,on,after,maybe,fork,and,run,thread,pool,bind,runnable
LdapUtils -> public static void maybeForkThenBind(LDAPConnection ldap, BindRequest bind, ThreadPool threadPool, AbstractRunnable runnable);1539615817;This method submits the {@code bind} request over the ldap connection. Its_authentication status changes. The connection can be subsequently reused._This validates the bind credentials.__Bind calls are blocking and if a bind is executed on the LDAP Connection_Reader thread (as returned by {@code LdapUtils#isLdapConnectionThread}), the_thread will be blocked until it is interrupted by something else such as a_timeout timer. <b>Do not call bind</b> outside this method or_{@link LdapUtils#maybeForkThenBind(LDAPConnection, BindRequest, ThreadPool, AbstractRunnable)}__@param ldap_The LDAP connection on which to submit the bind operation._@param bind_The request object of the bind operation._@param threadPool_The threads that will call the blocking bind operation, in case_the calling thread is a connection reader, see:_{@code LdapUtils#isLdapConnectionThread}._@param runnable_The runnable that continues the program flow after the bind_operation. It is executed on the same thread as the prior bind.;public static void maybeForkThenBind(LDAPConnection ldap, BindRequest bind, ThreadPool threadPool, AbstractRunnable runnable) {_        final Runnable bindRunnable = new AbstractRunnable() {_            @Override_            @SuppressForbidden(reason = "Bind allowed if forking of the LDAP Connection Reader Thread.")_            protected void doRun() throws Exception {_                privilegedConnect(() -> ldap.bind(bind.duplicate()))__                runnable.run()__            }__            @Override_            public void onFailure(Exception e) {_                runnable.onFailure(e)__            }__            @Override_            public void onAfter() {_                runnable.onAfter()__            }_        }__        maybeForkAndRun(threadPool, bindRunnable)__    };this,method,submits,the,code,bind,request,over,the,ldap,connection,its,authentication,status,changes,the,connection,can,be,subsequently,reused,this,validates,the,bind,credentials,bind,calls,are,blocking,and,if,a,bind,is,executed,on,the,ldap,connection,reader,thread,as,returned,by,code,ldap,utils,is,ldap,connection,thread,the,thread,will,be,blocked,until,it,is,interrupted,by,something,else,such,as,a,timeout,timer,b,do,not,call,bind,b,outside,this,method,or,link,ldap,utils,maybe,fork,then,bind,ldapconnection,bind,request,thread,pool,abstract,runnable,param,ldap,the,ldap,connection,on,which,to,submit,the,bind,operation,param,bind,the,request,object,of,the,bind,operation,param,thread,pool,the,threads,that,will,call,the,blocking,bind,operation,in,case,the,calling,thread,is,a,connection,reader,see,code,ldap,utils,is,ldap,connection,thread,param,runnable,the,runnable,that,continues,the,program,flow,after,the,bind,operation,it,is,executed,on,the,same,thread,as,the,prior,bind;public,static,void,maybe,fork,then,bind,ldapconnection,ldap,bind,request,bind,thread,pool,thread,pool,abstract,runnable,runnable,final,runnable,bind,runnable,new,abstract,runnable,override,suppress,forbidden,reason,bind,allowed,if,forking,of,the,ldap,connection,reader,thread,protected,void,do,run,throws,exception,privileged,connect,ldap,bind,bind,duplicate,runnable,run,override,public,void,on,failure,exception,e,runnable,on,failure,e,override,public,void,on,after,runnable,on,after,maybe,fork,and,run,thread,pool,bind,runnable
LdapUtils -> public static void maybeForkThenBind(LDAPConnection ldap, BindRequest bind, ThreadPool threadPool, AbstractRunnable runnable);1541476610;This method submits the {@code bind} request over the ldap connection. Its_authentication status changes. The connection can be subsequently reused._This validates the bind credentials.__Bind calls are blocking and if a bind is executed on the LDAP Connection_Reader thread (as returned by {@code LdapUtils#isLdapConnectionThread}), the_thread will be blocked until it is interrupted by something else such as a_timeout timer. <b>Do not call bind</b> outside this method or_{@link LdapUtils#maybeForkThenBind(LDAPConnection, BindRequest, ThreadPool, AbstractRunnable)}__@param ldap_The LDAP connection on which to submit the bind operation._@param bind_The request object of the bind operation._@param threadPool_The threads that will call the blocking bind operation, in case_the calling thread is a connection reader, see:_{@code LdapUtils#isLdapConnectionThread}._@param runnable_The runnable that continues the program flow after the bind_operation. It is executed on the same thread as the prior bind.;public static void maybeForkThenBind(LDAPConnection ldap, BindRequest bind, ThreadPool threadPool, AbstractRunnable runnable) {_        final Runnable bindRunnable = new AbstractRunnable() {_            @Override_            @SuppressForbidden(reason = "Bind allowed if forking of the LDAP Connection Reader Thread.")_            protected void doRun() throws Exception {_                privilegedConnect(() -> ldap.bind(bind.duplicate()))__                runnable.run()__            }__            @Override_            public void onFailure(Exception e) {_                runnable.onFailure(e)__            }__            @Override_            public void onAfter() {_                runnable.onAfter()__            }_        }__        maybeForkAndRun(threadPool, bindRunnable)__    };this,method,submits,the,code,bind,request,over,the,ldap,connection,its,authentication,status,changes,the,connection,can,be,subsequently,reused,this,validates,the,bind,credentials,bind,calls,are,blocking,and,if,a,bind,is,executed,on,the,ldap,connection,reader,thread,as,returned,by,code,ldap,utils,is,ldap,connection,thread,the,thread,will,be,blocked,until,it,is,interrupted,by,something,else,such,as,a,timeout,timer,b,do,not,call,bind,b,outside,this,method,or,link,ldap,utils,maybe,fork,then,bind,ldapconnection,bind,request,thread,pool,abstract,runnable,param,ldap,the,ldap,connection,on,which,to,submit,the,bind,operation,param,bind,the,request,object,of,the,bind,operation,param,thread,pool,the,threads,that,will,call,the,blocking,bind,operation,in,case,the,calling,thread,is,a,connection,reader,see,code,ldap,utils,is,ldap,connection,thread,param,runnable,the,runnable,that,continues,the,program,flow,after,the,bind,operation,it,is,executed,on,the,same,thread,as,the,prior,bind;public,static,void,maybe,fork,then,bind,ldapconnection,ldap,bind,request,bind,thread,pool,thread,pool,abstract,runnable,runnable,final,runnable,bind,runnable,new,abstract,runnable,override,suppress,forbidden,reason,bind,allowed,if,forking,of,the,ldap,connection,reader,thread,protected,void,do,run,throws,exception,privileged,connect,ldap,bind,bind,duplicate,runnable,run,override,public,void,on,failure,exception,e,runnable,on,failure,e,override,public,void,on,after,runnable,on,after,maybe,fork,and,run,thread,pool,bind,runnable
LdapUtils -> public static void maybeForkThenBind(LDAPConnection ldap, BindRequest bind, ThreadPool threadPool, AbstractRunnable runnable);1543791957;This method submits the {@code bind} request over the ldap connection. Its_authentication status changes. The connection can be subsequently reused._This validates the bind credentials.__Bind calls are blocking and if a bind is executed on the LDAP Connection_Reader thread (as returned by {@code LdapUtils#isLdapConnectionThread}), the_thread will be blocked until it is interrupted by something else such as a_timeout timer. <b>Do not call bind</b> outside this method or_{@link LdapUtils#maybeForkThenBind(LDAPConnection, BindRequest, ThreadPool, AbstractRunnable)}__@param ldap_The LDAP connection on which to submit the bind operation._@param bind_The request object of the bind operation._@param threadPool_The threads that will call the blocking bind operation, in case_the calling thread is a connection reader, see:_{@code LdapUtils#isLdapConnectionThread}._@param runnable_The runnable that continues the program flow after the bind_operation. It is executed on the same thread as the prior bind.;public static void maybeForkThenBind(LDAPConnection ldap, BindRequest bind, ThreadPool threadPool, AbstractRunnable runnable) {_        final Runnable bindRunnable = new AbstractRunnable() {_            @Override_            @SuppressForbidden(reason = "Bind allowed if forking of the LDAP Connection Reader Thread.")_            protected void doRun() throws Exception {_                privilegedConnect(() -> ldap.bind(bind.duplicate()))__                LOGGER.trace("LDAP bind [{}] succeeded for [{}]", bind, ldap)__                runnable.run()__            }__            @Override_            public void onFailure(Exception e) {_                LOGGER.debug("LDAP bind [{}] failed for [{}] - [{}]", bind, ldap, e.toString())__                runnable.onFailure(e)__            }__            @Override_            public void onAfter() {_                runnable.onAfter()__            }_        }__        maybeForkAndRun(threadPool, bindRunnable)__    };this,method,submits,the,code,bind,request,over,the,ldap,connection,its,authentication,status,changes,the,connection,can,be,subsequently,reused,this,validates,the,bind,credentials,bind,calls,are,blocking,and,if,a,bind,is,executed,on,the,ldap,connection,reader,thread,as,returned,by,code,ldap,utils,is,ldap,connection,thread,the,thread,will,be,blocked,until,it,is,interrupted,by,something,else,such,as,a,timeout,timer,b,do,not,call,bind,b,outside,this,method,or,link,ldap,utils,maybe,fork,then,bind,ldapconnection,bind,request,thread,pool,abstract,runnable,param,ldap,the,ldap,connection,on,which,to,submit,the,bind,operation,param,bind,the,request,object,of,the,bind,operation,param,thread,pool,the,threads,that,will,call,the,blocking,bind,operation,in,case,the,calling,thread,is,a,connection,reader,see,code,ldap,utils,is,ldap,connection,thread,param,runnable,the,runnable,that,continues,the,program,flow,after,the,bind,operation,it,is,executed,on,the,same,thread,as,the,prior,bind;public,static,void,maybe,fork,then,bind,ldapconnection,ldap,bind,request,bind,thread,pool,thread,pool,abstract,runnable,runnable,final,runnable,bind,runnable,new,abstract,runnable,override,suppress,forbidden,reason,bind,allowed,if,forking,of,the,ldap,connection,reader,thread,protected,void,do,run,throws,exception,privileged,connect,ldap,bind,bind,duplicate,logger,trace,ldap,bind,succeeded,for,bind,ldap,runnable,run,override,public,void,on,failure,exception,e,logger,debug,ldap,bind,failed,for,bind,ldap,e,to,string,runnable,on,failure,e,override,public,void,on,after,runnable,on,after,maybe,fork,and,run,thread,pool,bind,runnable
LdapUtils -> private static void followReferral(LDAPConnection ldapConnection, String urlString,                                        SearchRequest searchRequest,                                        ActionListener<SearchResult> listener, int depth,                                        boolean ignoreErrors, SearchResult originatingResult)             throws LDAPException;1524684173;Performs the actual connection and following of a referral given a URL string._This referral is being followed as it may contain a result that is relevant to our search;private static void followReferral(LDAPConnection ldapConnection, String urlString,_                                       SearchRequest searchRequest,_                                       ActionListener<SearchResult> listener, int depth,_                                       boolean ignoreErrors, SearchResult originatingResult)_            throws LDAPException {__        final LDAPURL referralURL = new LDAPURL(urlString)__        final String host = referralURL.getHost()__        _        if (host == null) {_            _            _            throw new LDAPException(ResultCode.UNAVAILABLE, "Null referral host in " + urlString)__        }__        _        _        _        final String requestBaseDN__        if (referralURL.baseDNProvided()) {_            requestBaseDN = referralURL.getBaseDN().toString()__        } else {_            requestBaseDN = searchRequest.getBaseDN()__        }__        final SearchScope requestScope__        if (referralURL.scopeProvided()) {_            requestScope = referralURL.getScope()__        } else {_            requestScope = searchRequest.getScope()__        }__        final Filter requestFilter__        if (referralURL.filterProvided()) {_            requestFilter = referralURL.getFilter()__        } else {_            requestFilter = searchRequest.getFilter()__        }__        _        _        final LDAPConnection referralConn =_                privilegedConnect(() -> ldapConnection.getReferralConnector().getReferralConnection(referralURL, ldapConnection))__        final LdapSearchResultListener ldapListener = new LdapSearchResultListener(_                referralConn, ignoreErrors,_                ActionListener.wrap(_                        searchResult -> {_                            IOUtils.close(referralConn)__                            listener.onResponse(searchResult)__                        },_                        e -> {_                            IOUtils.closeWhileHandlingException(referralConn)__                            if (ignoreErrors) {_                                if (LOGGER.isDebugEnabled()) {_                                    LOGGER.debug(new ParameterizedMessage(_                                            "Failed to retrieve results from referral URL [{}]." +_                                                    " Treating as 'no results'",_                                            referralURL), e)__                                }_                                listener.onResponse(emptyResult(originatingResult))__                            } else {_                                listener.onFailure(e)__                            }_                        }),_                depth)__        boolean success = false__        try {_            final SearchRequest referralSearchRequest =_                    new SearchRequest(ldapListener, searchRequest.getControls(),_                            requestBaseDN, requestScope, searchRequest.getDereferencePolicy(),_                            searchRequest.getSizeLimit(), searchRequest.getTimeLimitSeconds(),_                            searchRequest.typesOnly(), requestFilter,_                            searchRequest.getAttributes())__            ldapListener.setSearchRequest(searchRequest)__            referralConn.asyncSearch(referralSearchRequest)__            success = true__        } finally {_            if (success == false) {_                IOUtils.closeWhileHandlingException(referralConn)__            }_        }_    };performs,the,actual,connection,and,following,of,a,referral,given,a,url,string,this,referral,is,being,followed,as,it,may,contain,a,result,that,is,relevant,to,our,search;private,static,void,follow,referral,ldapconnection,ldap,connection,string,url,string,search,request,search,request,action,listener,search,result,listener,int,depth,boolean,ignore,errors,search,result,originating,result,throws,ldapexception,final,ldapurl,referral,url,new,ldapurl,url,string,final,string,host,referral,url,get,host,if,host,null,throw,new,ldapexception,result,code,unavailable,null,referral,host,in,url,string,final,string,request,base,dn,if,referral,url,base,dnprovided,request,base,dn,referral,url,get,base,dn,to,string,else,request,base,dn,search,request,get,base,dn,final,search,scope,request,scope,if,referral,url,scope,provided,request,scope,referral,url,get,scope,else,request,scope,search,request,get,scope,final,filter,request,filter,if,referral,url,filter,provided,request,filter,referral,url,get,filter,else,request,filter,search,request,get,filter,final,ldapconnection,referral,conn,privileged,connect,ldap,connection,get,referral,connector,get,referral,connection,referral,url,ldap,connection,final,ldap,search,result,listener,ldap,listener,new,ldap,search,result,listener,referral,conn,ignore,errors,action,listener,wrap,search,result,ioutils,close,referral,conn,listener,on,response,search,result,e,ioutils,close,while,handling,exception,referral,conn,if,ignore,errors,if,logger,is,debug,enabled,logger,debug,new,parameterized,message,failed,to,retrieve,results,from,referral,url,treating,as,no,results,referral,url,e,listener,on,response,empty,result,originating,result,else,listener,on,failure,e,depth,boolean,success,false,try,final,search,request,referral,search,request,new,search,request,ldap,listener,search,request,get,controls,request,base,dn,request,scope,search,request,get,dereference,policy,search,request,get,size,limit,search,request,get,time,limit,seconds,search,request,types,only,request,filter,search,request,get,attributes,ldap,listener,set,search,request,search,request,referral,conn,async,search,referral,search,request,success,true,finally,if,success,false,ioutils,close,while,handling,exception,referral,conn
LdapUtils -> private static void followReferral(LDAPConnection ldapConnection, String urlString,                                        SearchRequest searchRequest,                                        ActionListener<SearchResult> listener, int depth,                                        boolean ignoreErrors, SearchResult originatingResult)             throws LDAPException;1539615817;Performs the actual connection and following of a referral given a URL string._This referral is being followed as it may contain a result that is relevant to our search;private static void followReferral(LDAPConnection ldapConnection, String urlString,_                                       SearchRequest searchRequest,_                                       ActionListener<SearchResult> listener, int depth,_                                       boolean ignoreErrors, SearchResult originatingResult)_            throws LDAPException {__        final LDAPURL referralURL = new LDAPURL(urlString)__        final String host = referralURL.getHost()__        _        if (host == null) {_            _            _            throw new LDAPException(ResultCode.UNAVAILABLE, "Null referral host in " + urlString)__        }__        _        _        _        final String requestBaseDN__        if (referralURL.baseDNProvided()) {_            requestBaseDN = referralURL.getBaseDN().toString()__        } else {_            requestBaseDN = searchRequest.getBaseDN()__        }__        final SearchScope requestScope__        if (referralURL.scopeProvided()) {_            requestScope = referralURL.getScope()__        } else {_            requestScope = searchRequest.getScope()__        }__        final Filter requestFilter__        if (referralURL.filterProvided()) {_            requestFilter = referralURL.getFilter()__        } else {_            requestFilter = searchRequest.getFilter()__        }__        _        _        final LDAPConnection referralConn =_                privilegedConnect(() -> ldapConnection.getReferralConnector().getReferralConnection(referralURL, ldapConnection))__        final LdapSearchResultListener ldapListener = new LdapSearchResultListener(_                referralConn, ignoreErrors,_                ActionListener.wrap(_                        searchResult -> {_                            IOUtils.close(referralConn)__                            listener.onResponse(searchResult)__                        },_                        e -> {_                            IOUtils.closeWhileHandlingException(referralConn)__                            if (ignoreErrors) {_                                if (LOGGER.isDebugEnabled()) {_                                    LOGGER.debug(new ParameterizedMessage(_                                            "Failed to retrieve results from referral URL [{}]." +_                                                    " Treating as 'no results'",_                                            referralURL), e)__                                }_                                listener.onResponse(emptyResult(originatingResult))__                            } else {_                                listener.onFailure(e)__                            }_                        }),_                depth)__        boolean success = false__        try {_            final SearchRequest referralSearchRequest =_                    new SearchRequest(ldapListener, searchRequest.getControls(),_                            requestBaseDN, requestScope, searchRequest.getDereferencePolicy(),_                            searchRequest.getSizeLimit(), searchRequest.getTimeLimitSeconds(),_                            searchRequest.typesOnly(), requestFilter,_                            searchRequest.getAttributes())__            ldapListener.setSearchRequest(searchRequest)__            referralConn.asyncSearch(referralSearchRequest)__            success = true__        } finally {_            if (success == false) {_                IOUtils.closeWhileHandlingException(referralConn)__            }_        }_    };performs,the,actual,connection,and,following,of,a,referral,given,a,url,string,this,referral,is,being,followed,as,it,may,contain,a,result,that,is,relevant,to,our,search;private,static,void,follow,referral,ldapconnection,ldap,connection,string,url,string,search,request,search,request,action,listener,search,result,listener,int,depth,boolean,ignore,errors,search,result,originating,result,throws,ldapexception,final,ldapurl,referral,url,new,ldapurl,url,string,final,string,host,referral,url,get,host,if,host,null,throw,new,ldapexception,result,code,unavailable,null,referral,host,in,url,string,final,string,request,base,dn,if,referral,url,base,dnprovided,request,base,dn,referral,url,get,base,dn,to,string,else,request,base,dn,search,request,get,base,dn,final,search,scope,request,scope,if,referral,url,scope,provided,request,scope,referral,url,get,scope,else,request,scope,search,request,get,scope,final,filter,request,filter,if,referral,url,filter,provided,request,filter,referral,url,get,filter,else,request,filter,search,request,get,filter,final,ldapconnection,referral,conn,privileged,connect,ldap,connection,get,referral,connector,get,referral,connection,referral,url,ldap,connection,final,ldap,search,result,listener,ldap,listener,new,ldap,search,result,listener,referral,conn,ignore,errors,action,listener,wrap,search,result,ioutils,close,referral,conn,listener,on,response,search,result,e,ioutils,close,while,handling,exception,referral,conn,if,ignore,errors,if,logger,is,debug,enabled,logger,debug,new,parameterized,message,failed,to,retrieve,results,from,referral,url,treating,as,no,results,referral,url,e,listener,on,response,empty,result,originating,result,else,listener,on,failure,e,depth,boolean,success,false,try,final,search,request,referral,search,request,new,search,request,ldap,listener,search,request,get,controls,request,base,dn,request,scope,search,request,get,dereference,policy,search,request,get,size,limit,search,request,get,time,limit,seconds,search,request,types,only,request,filter,search,request,get,attributes,ldap,listener,set,search,request,search,request,referral,conn,async,search,referral,search,request,success,true,finally,if,success,false,ioutils,close,while,handling,exception,referral,conn
LdapUtils -> private static void followReferral(LDAPConnection ldapConnection, String urlString,                                        SearchRequest searchRequest,                                        ActionListener<SearchResult> listener, int depth,                                        boolean ignoreErrors, SearchResult originatingResult)             throws LDAPException;1541476610;Performs the actual connection and following of a referral given a URL string._This referral is being followed as it may contain a result that is relevant to our search;private static void followReferral(LDAPConnection ldapConnection, String urlString,_                                       SearchRequest searchRequest,_                                       ActionListener<SearchResult> listener, int depth,_                                       boolean ignoreErrors, SearchResult originatingResult)_            throws LDAPException {__        final LDAPURL referralURL = new LDAPURL(urlString)__        final String host = referralURL.getHost()__        _        if (host == null) {_            _            _            throw new LDAPException(ResultCode.UNAVAILABLE, "Null referral host in " + urlString)__        }__        _        _        _        final String requestBaseDN__        if (referralURL.baseDNProvided()) {_            requestBaseDN = referralURL.getBaseDN().toString()__        } else {_            requestBaseDN = searchRequest.getBaseDN()__        }__        final SearchScope requestScope__        if (referralURL.scopeProvided()) {_            requestScope = referralURL.getScope()__        } else {_            requestScope = searchRequest.getScope()__        }__        final Filter requestFilter__        if (referralURL.filterProvided()) {_            requestFilter = referralURL.getFilter()__        } else {_            requestFilter = searchRequest.getFilter()__        }__        _        _        final LDAPConnection referralConn =_                privilegedConnect(() -> ldapConnection.getReferralConnector().getReferralConnection(referralURL, ldapConnection))__        final LdapSearchResultListener ldapListener = new LdapSearchResultListener(_                referralConn, ignoreErrors,_                ActionListener.wrap(_                        searchResult -> {_                            IOUtils.close(referralConn)__                            listener.onResponse(searchResult)__                        },_                        e -> {_                            IOUtils.closeWhileHandlingException(referralConn)__                            if (ignoreErrors) {_                                if (LOGGER.isDebugEnabled()) {_                                    LOGGER.debug(new ParameterizedMessage(_                                            "Failed to retrieve results from referral URL [{}]." +_                                                    " Treating as 'no results'",_                                            referralURL), e)__                                }_                                listener.onResponse(emptyResult(originatingResult))__                            } else {_                                listener.onFailure(e)__                            }_                        }),_                depth)__        boolean success = false__        try {_            final SearchRequest referralSearchRequest =_                    new SearchRequest(ldapListener, searchRequest.getControls(),_                            requestBaseDN, requestScope, searchRequest.getDereferencePolicy(),_                            searchRequest.getSizeLimit(), searchRequest.getTimeLimitSeconds(),_                            searchRequest.typesOnly(), requestFilter,_                            searchRequest.getAttributes())__            ldapListener.setSearchRequest(searchRequest)__            referralConn.asyncSearch(referralSearchRequest)__            success = true__        } finally {_            if (success == false) {_                IOUtils.closeWhileHandlingException(referralConn)__            }_        }_    };performs,the,actual,connection,and,following,of,a,referral,given,a,url,string,this,referral,is,being,followed,as,it,may,contain,a,result,that,is,relevant,to,our,search;private,static,void,follow,referral,ldapconnection,ldap,connection,string,url,string,search,request,search,request,action,listener,search,result,listener,int,depth,boolean,ignore,errors,search,result,originating,result,throws,ldapexception,final,ldapurl,referral,url,new,ldapurl,url,string,final,string,host,referral,url,get,host,if,host,null,throw,new,ldapexception,result,code,unavailable,null,referral,host,in,url,string,final,string,request,base,dn,if,referral,url,base,dnprovided,request,base,dn,referral,url,get,base,dn,to,string,else,request,base,dn,search,request,get,base,dn,final,search,scope,request,scope,if,referral,url,scope,provided,request,scope,referral,url,get,scope,else,request,scope,search,request,get,scope,final,filter,request,filter,if,referral,url,filter,provided,request,filter,referral,url,get,filter,else,request,filter,search,request,get,filter,final,ldapconnection,referral,conn,privileged,connect,ldap,connection,get,referral,connector,get,referral,connection,referral,url,ldap,connection,final,ldap,search,result,listener,ldap,listener,new,ldap,search,result,listener,referral,conn,ignore,errors,action,listener,wrap,search,result,ioutils,close,referral,conn,listener,on,response,search,result,e,ioutils,close,while,handling,exception,referral,conn,if,ignore,errors,if,logger,is,debug,enabled,logger,debug,new,parameterized,message,failed,to,retrieve,results,from,referral,url,treating,as,no,results,referral,url,e,listener,on,response,empty,result,originating,result,else,listener,on,failure,e,depth,boolean,success,false,try,final,search,request,referral,search,request,new,search,request,ldap,listener,search,request,get,controls,request,base,dn,request,scope,search,request,get,dereference,policy,search,request,get,size,limit,search,request,get,time,limit,seconds,search,request,types,only,request,filter,search,request,get,attributes,ldap,listener,set,search,request,search,request,referral,conn,async,search,referral,search,request,success,true,finally,if,success,false,ioutils,close,while,handling,exception,referral,conn
LdapUtils -> private static void followReferral(LDAPConnection ldapConnection, String urlString,                                        SearchRequest searchRequest,                                        ActionListener<SearchResult> listener, int depth,                                        boolean ignoreErrors, SearchResult originatingResult)             throws LDAPException;1543791957;Performs the actual connection and following of a referral given a URL string._This referral is being followed as it may contain a result that is relevant to our search;private static void followReferral(LDAPConnection ldapConnection, String urlString,_                                       SearchRequest searchRequest,_                                       ActionListener<SearchResult> listener, int depth,_                                       boolean ignoreErrors, SearchResult originatingResult)_            throws LDAPException {__        final LDAPURL referralURL = new LDAPURL(urlString)__        final String host = referralURL.getHost()__        _        if (host == null) {_            _            _            throw new LDAPException(ResultCode.UNAVAILABLE, "Null referral host in " + urlString)__        }__        _        _        _        final String requestBaseDN__        if (referralURL.baseDNProvided()) {_            requestBaseDN = referralURL.getBaseDN().toString()__        } else {_            requestBaseDN = searchRequest.getBaseDN()__        }__        final SearchScope requestScope__        if (referralURL.scopeProvided()) {_            requestScope = referralURL.getScope()__        } else {_            requestScope = searchRequest.getScope()__        }__        final Filter requestFilter__        if (referralURL.filterProvided()) {_            requestFilter = referralURL.getFilter()__        } else {_            requestFilter = searchRequest.getFilter()__        }__        _        _        final LDAPConnection referralConn =_                privilegedConnect(() -> ldapConnection.getReferralConnector().getReferralConnection(referralURL, ldapConnection))__        final LdapSearchResultListener ldapListener = new LdapSearchResultListener(_                referralConn, ignoreErrors,_                ActionListener.wrap(_                        searchResult -> {_                            IOUtils.close(referralConn)__                            listener.onResponse(searchResult)__                        },_                        e -> {_                            IOUtils.closeWhileHandlingException(referralConn)__                            if (ignoreErrors) {_                                if (LOGGER.isDebugEnabled()) {_                                    LOGGER.debug(new ParameterizedMessage(_                                            "Failed to retrieve results from referral URL [{}]." +_                                                    " Treating as 'no results'",_                                            referralURL), e)__                                }_                                listener.onResponse(emptyResult(originatingResult))__                            } else {_                                listener.onFailure(e)__                            }_                        }),_                depth)__        boolean success = false__        try {_            final SearchRequest referralSearchRequest =_                    new SearchRequest(ldapListener, searchRequest.getControls(),_                            requestBaseDN, requestScope, searchRequest.getDereferencePolicy(),_                            searchRequest.getSizeLimit(), searchRequest.getTimeLimitSeconds(),_                            searchRequest.typesOnly(), requestFilter,_                            searchRequest.getAttributes())__            ldapListener.setSearchRequest(searchRequest)__            referralConn.asyncSearch(referralSearchRequest)__            success = true__        } finally {_            if (success == false) {_                IOUtils.closeWhileHandlingException(referralConn)__            }_        }_    };performs,the,actual,connection,and,following,of,a,referral,given,a,url,string,this,referral,is,being,followed,as,it,may,contain,a,result,that,is,relevant,to,our,search;private,static,void,follow,referral,ldapconnection,ldap,connection,string,url,string,search,request,search,request,action,listener,search,result,listener,int,depth,boolean,ignore,errors,search,result,originating,result,throws,ldapexception,final,ldapurl,referral,url,new,ldapurl,url,string,final,string,host,referral,url,get,host,if,host,null,throw,new,ldapexception,result,code,unavailable,null,referral,host,in,url,string,final,string,request,base,dn,if,referral,url,base,dnprovided,request,base,dn,referral,url,get,base,dn,to,string,else,request,base,dn,search,request,get,base,dn,final,search,scope,request,scope,if,referral,url,scope,provided,request,scope,referral,url,get,scope,else,request,scope,search,request,get,scope,final,filter,request,filter,if,referral,url,filter,provided,request,filter,referral,url,get,filter,else,request,filter,search,request,get,filter,final,ldapconnection,referral,conn,privileged,connect,ldap,connection,get,referral,connector,get,referral,connection,referral,url,ldap,connection,final,ldap,search,result,listener,ldap,listener,new,ldap,search,result,listener,referral,conn,ignore,errors,action,listener,wrap,search,result,ioutils,close,referral,conn,listener,on,response,search,result,e,ioutils,close,while,handling,exception,referral,conn,if,ignore,errors,if,logger,is,debug,enabled,logger,debug,new,parameterized,message,failed,to,retrieve,results,from,referral,url,treating,as,no,results,referral,url,e,listener,on,response,empty,result,originating,result,else,listener,on,failure,e,depth,boolean,success,false,try,final,search,request,referral,search,request,new,search,request,ldap,listener,search,request,get,controls,request,base,dn,request,scope,search,request,get,dereference,policy,search,request,get,size,limit,search,request,get,time,limit,seconds,search,request,types,only,request,filter,search,request,get,attributes,ldap,listener,set,search,request,search,request,referral,conn,async,search,referral,search,request,success,true,finally,if,success,false,ioutils,close,while,handling,exception,referral,conn
LdapUtils -> public static void search(LDAPInterface ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1524684173;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPInterface ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        if (ldap instanceof LDAPConnection) {_            search((LDAPConnection) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else if (ldap instanceof LDAPConnectionPool) {_            search((LDAPConnectionPool) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else {_            throw new IllegalArgumentException("unsupported LDAPInterface implementation: " + ldap)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapinterface,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,if,ldap,instanceof,ldapconnection,search,ldapconnection,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,if,ldap,instanceof,ldapconnection,pool,search,ldapconnection,pool,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,throw,new,illegal,argument,exception,unsupported,ldapinterface,implementation,ldap
LdapUtils -> public static void search(LDAPInterface ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1539615817;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPInterface ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        if (ldap instanceof LDAPConnection) {_            search((LDAPConnection) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else if (ldap instanceof LDAPConnectionPool) {_            search((LDAPConnectionPool) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else {_            throw new IllegalArgumentException("unsupported LDAPInterface implementation: " + ldap)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapinterface,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,if,ldap,instanceof,ldapconnection,search,ldapconnection,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,if,ldap,instanceof,ldapconnection,pool,search,ldapconnection,pool,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,throw,new,illegal,argument,exception,unsupported,ldapinterface,implementation,ldap
LdapUtils -> public static void search(LDAPInterface ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1541476610;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPInterface ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        if (ldap instanceof LDAPConnection) {_            search((LDAPConnection) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else if (ldap instanceof LDAPConnectionPool) {_            search((LDAPConnectionPool) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else {_            throw new IllegalArgumentException("unsupported LDAPInterface implementation: " + ldap)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapinterface,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,if,ldap,instanceof,ldapconnection,search,ldapconnection,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,if,ldap,instanceof,ldapconnection,pool,search,ldapconnection,pool,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,throw,new,illegal,argument,exception,unsupported,ldapinterface,implementation,ldap
LdapUtils -> public static void search(LDAPInterface ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1543791957;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPInterface ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        if (ldap instanceof LDAPConnection) {_            search((LDAPConnection) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else if (ldap instanceof LDAPConnectionPool) {_            search((LDAPConnectionPool) ldap, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, listener, attributes)__        } else {_            throw new IllegalArgumentException("unsupported LDAPInterface implementation: " + ldap)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapinterface,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,if,ldap,instanceof,ldapconnection,search,ldapconnection,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,if,ldap,instanceof,ldapconnection,pool,search,ldapconnection,pool,ldap,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,listener,attributes,else,throw,new,illegal,argument,exception,unsupported,ldapinterface,implementation,ldap
LdapUtils -> public static void search(LDAPConnectionPool ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1524684173;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPConnectionPool ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        boolean searching = false__        LDAPConnection ldapConnection = null__        try {_            ldapConnection = privilegedConnect(ldap::getConnection)__            final LDAPConnection finalConnection = ldapConnection__            search(finalConnection, baseDN, scope, filter, timeLimitSeconds, ignoreReferralErrors, ActionListener.wrap(searchResult -> {_                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__                listener.onResponse(searchResult)__            }, (e) -> {_                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__                listener.onFailure(e)__            }), attributes)__            searching = true__        } catch (LDAPException e) {_            listener.onFailure(e)__        } finally {_            if (searching == false && ldapConnection != null) {_                final LDAPConnection finalConnection = ldapConnection__                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__            }_        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapconnection,pool,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,boolean,searching,false,ldapconnection,ldap,connection,null,try,ldap,connection,privileged,connect,ldap,get,connection,final,ldapconnection,final,connection,ldap,connection,search,final,connection,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,action,listener,wrap,search,result,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,response,search,result,e,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,failure,e,attributes,searching,true,catch,ldapexception,e,listener,on,failure,e,finally,if,searching,false,ldap,connection,null,final,ldapconnection,final,connection,ldap,connection,ioutils,close,while,handling,exception,ldap,release,connection,final,connection
LdapUtils -> public static void search(LDAPConnectionPool ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1539615817;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPConnectionPool ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        boolean searching = false__        LDAPConnection ldapConnection = null__        try {_            ldapConnection = privilegedConnect(ldap::getConnection)__            final LDAPConnection finalConnection = ldapConnection__            search(finalConnection, baseDN, scope, filter, timeLimitSeconds, ignoreReferralErrors, ActionListener.wrap(searchResult -> {_                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__                listener.onResponse(searchResult)__            }, (e) -> {_                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__                listener.onFailure(e)__            }), attributes)__            searching = true__        } catch (LDAPException e) {_            listener.onFailure(e)__        } finally {_            if (searching == false && ldapConnection != null) {_                final LDAPConnection finalConnection = ldapConnection__                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__            }_        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapconnection,pool,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,boolean,searching,false,ldapconnection,ldap,connection,null,try,ldap,connection,privileged,connect,ldap,get,connection,final,ldapconnection,final,connection,ldap,connection,search,final,connection,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,action,listener,wrap,search,result,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,response,search,result,e,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,failure,e,attributes,searching,true,catch,ldapexception,e,listener,on,failure,e,finally,if,searching,false,ldap,connection,null,final,ldapconnection,final,connection,ldap,connection,ioutils,close,while,handling,exception,ldap,release,connection,final,connection
LdapUtils -> public static void search(LDAPConnectionPool ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1541476610;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPConnectionPool ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        boolean searching = false__        LDAPConnection ldapConnection = null__        try {_            ldapConnection = privilegedConnect(ldap::getConnection)__            final LDAPConnection finalConnection = ldapConnection__            search(finalConnection, baseDN, scope, filter, timeLimitSeconds, ignoreReferralErrors, ActionListener.wrap(searchResult -> {_                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__                listener.onResponse(searchResult)__            }, (e) -> {_                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__                listener.onFailure(e)__            }), attributes)__            searching = true__        } catch (LDAPException e) {_            listener.onFailure(e)__        } finally {_            if (searching == false && ldapConnection != null) {_                final LDAPConnection finalConnection = ldapConnection__                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__            }_        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapconnection,pool,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,boolean,searching,false,ldapconnection,ldap,connection,null,try,ldap,connection,privileged,connect,ldap,get,connection,final,ldapconnection,final,connection,ldap,connection,search,final,connection,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,action,listener,wrap,search,result,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,response,search,result,e,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,failure,e,attributes,searching,true,catch,ldapexception,e,listener,on,failure,e,finally,if,searching,false,ldap,connection,null,final,ldapconnection,final,connection,ldap,connection,ioutils,close,while,handling,exception,ldap,release,connection,final,connection
LdapUtils -> public static void search(LDAPConnectionPool ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1543791957;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPConnectionPool ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        boolean searching = false__        LDAPConnection ldapConnection = null__        try {_            ldapConnection = privilegedConnect(ldap::getConnection)__            final LDAPConnection finalConnection = ldapConnection__            search(finalConnection, baseDN, scope, filter, timeLimitSeconds, ignoreReferralErrors, ActionListener.wrap(searchResult -> {_                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__                listener.onResponse(searchResult)__            }, (e) -> {_                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__                listener.onFailure(e)__            }), attributes)__            searching = true__        } catch (LDAPException e) {_            listener.onFailure(e)__        } finally {_            if (searching == false && ldapConnection != null) {_                final LDAPConnection finalConnection = ldapConnection__                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__            }_        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapconnection,pool,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,boolean,searching,false,ldapconnection,ldap,connection,null,try,ldap,connection,privileged,connect,ldap,get,connection,final,ldapconnection,final,connection,ldap,connection,search,final,connection,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,action,listener,wrap,search,result,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,response,search,result,e,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,failure,e,attributes,searching,true,catch,ldapexception,e,listener,on,failure,e,finally,if,searching,false,ldap,connection,null,final,ldapconnection,final,connection,ldap,connection,ioutils,close,while,handling,exception,ldap,release,connection,final,connection
LdapUtils -> private static boolean isSuccess(SearchResult searchResult);1524684173;Returns <code>true</code> if the provide {@link SearchResult} was successfully completed_by the server._<strong>Note:</strong> Referrals are <em>not</em> considered a successful response for the_purposes of this method.;private static boolean isSuccess(SearchResult searchResult) {_        switch (searchResult.getResultCode().intValue()) {_            case ResultCode.SUCCESS_INT_VALUE:_            case ResultCode.COMPARE_FALSE_INT_VALUE:_            case ResultCode.COMPARE_TRUE_INT_VALUE:_                return true__            default:_                return false__        }_    };returns,code,true,code,if,the,provide,link,search,result,was,successfully,completed,by,the,server,strong,note,strong,referrals,are,em,not,em,considered,a,successful,response,for,the,purposes,of,this,method;private,static,boolean,is,success,search,result,search,result,switch,search,result,get,result,code,int,value,case,result,code,case,result,code,case,result,code,return,true,default,return,false
LdapUtils -> private static boolean isSuccess(SearchResult searchResult);1539615817;Returns <code>true</code> if the provide {@link SearchResult} was successfully completed_by the server._<strong>Note:</strong> Referrals are <em>not</em> considered a successful response for the_purposes of this method.;private static boolean isSuccess(SearchResult searchResult) {_        switch (searchResult.getResultCode().intValue()) {_            case ResultCode.SUCCESS_INT_VALUE:_            case ResultCode.COMPARE_FALSE_INT_VALUE:_            case ResultCode.COMPARE_TRUE_INT_VALUE:_                return true__            default:_                return false__        }_    };returns,code,true,code,if,the,provide,link,search,result,was,successfully,completed,by,the,server,strong,note,strong,referrals,are,em,not,em,considered,a,successful,response,for,the,purposes,of,this,method;private,static,boolean,is,success,search,result,search,result,switch,search,result,get,result,code,int,value,case,result,code,case,result,code,case,result,code,return,true,default,return,false
LdapUtils -> private static boolean isSuccess(SearchResult searchResult);1541476610;Returns <code>true</code> if the provide {@link SearchResult} was successfully completed_by the server._<strong>Note:</strong> Referrals are <em>not</em> considered a successful response for the_purposes of this method.;private static boolean isSuccess(SearchResult searchResult) {_        switch (searchResult.getResultCode().intValue()) {_            case ResultCode.SUCCESS_INT_VALUE:_            case ResultCode.COMPARE_FALSE_INT_VALUE:_            case ResultCode.COMPARE_TRUE_INT_VALUE:_                return true__            default:_                return false__        }_    };returns,code,true,code,if,the,provide,link,search,result,was,successfully,completed,by,the,server,strong,note,strong,referrals,are,em,not,em,considered,a,successful,response,for,the,purposes,of,this,method;private,static,boolean,is,success,search,result,search,result,switch,search,result,get,result,code,int,value,case,result,code,case,result,code,case,result,code,return,true,default,return,false
LdapUtils -> private static boolean isSuccess(SearchResult searchResult);1543791957;Returns <code>true</code> if the provide {@link SearchResult} was successfully completed_by the server._<strong>Note:</strong> Referrals are <em>not</em> considered a successful response for the_purposes of this method.;private static boolean isSuccess(SearchResult searchResult) {_        switch (searchResult.getResultCode().intValue()) {_            case ResultCode.SUCCESS_INT_VALUE:_            case ResultCode.COMPARE_FALSE_INT_VALUE:_            case ResultCode.COMPARE_TRUE_INT_VALUE:_                return true__            default:_                return false__        }_    };returns,code,true,code,if,the,provide,link,search,result,was,successfully,completed,by,the,server,strong,note,strong,referrals,are,em,not,em,considered,a,successful,response,for,the,purposes,of,this,method;private,static,boolean,is,success,search,result,search,result,switch,search,result,get,result,code,int,value,case,result,code,case,result,code,case,result,code,return,true,default,return,false
LdapUtils -> private static void maybeForkAndRun(ThreadPool threadPool, Runnable runnable);1524684173;If necessary, fork before executing the runnable. A deadlock will happen if_the same thread which handles bind responses blocks on the bind call, waiting_for the response which he itself should handle.;private static void maybeForkAndRun(ThreadPool threadPool, Runnable runnable) {_        if (isLdapConnectionThread(Thread.currentThread())) {_            _            threadPool.executor(ThreadPool.Names.GENERIC).execute(runnable)__        } else {_            _            runnable.run()__        }_    };if,necessary,fork,before,executing,the,runnable,a,deadlock,will,happen,if,the,same,thread,which,handles,bind,responses,blocks,on,the,bind,call,waiting,for,the,response,which,he,itself,should,handle;private,static,void,maybe,fork,and,run,thread,pool,thread,pool,runnable,runnable,if,is,ldap,connection,thread,thread,current,thread,thread,pool,executor,thread,pool,names,generic,execute,runnable,else,runnable,run
LdapUtils -> private static void maybeForkAndRun(ThreadPool threadPool, Runnable runnable);1539615817;If necessary, fork before executing the runnable. A deadlock will happen if_the same thread which handles bind responses blocks on the bind call, waiting_for the response which he itself should handle.;private static void maybeForkAndRun(ThreadPool threadPool, Runnable runnable) {_        if (isLdapConnectionThread(Thread.currentThread())) {_            _            threadPool.executor(ThreadPool.Names.GENERIC).execute(runnable)__        } else {_            _            runnable.run()__        }_    };if,necessary,fork,before,executing,the,runnable,a,deadlock,will,happen,if,the,same,thread,which,handles,bind,responses,blocks,on,the,bind,call,waiting,for,the,response,which,he,itself,should,handle;private,static,void,maybe,fork,and,run,thread,pool,thread,pool,runnable,runnable,if,is,ldap,connection,thread,thread,current,thread,thread,pool,executor,thread,pool,names,generic,execute,runnable,else,runnable,run
LdapUtils -> private static void maybeForkAndRun(ThreadPool threadPool, Runnable runnable);1541476610;If necessary, fork before executing the runnable. A deadlock will happen if_the same thread which handles bind responses blocks on the bind call, waiting_for the response which he itself should handle.;private static void maybeForkAndRun(ThreadPool threadPool, Runnable runnable) {_        if (isLdapConnectionThread(Thread.currentThread())) {_            _            threadPool.executor(ThreadPool.Names.GENERIC).execute(runnable)__        } else {_            _            runnable.run()__        }_    };if,necessary,fork,before,executing,the,runnable,a,deadlock,will,happen,if,the,same,thread,which,handles,bind,responses,blocks,on,the,bind,call,waiting,for,the,response,which,he,itself,should,handle;private,static,void,maybe,fork,and,run,thread,pool,thread,pool,runnable,runnable,if,is,ldap,connection,thread,thread,current,thread,thread,pool,executor,thread,pool,names,generic,execute,runnable,else,runnable,run
LdapUtils -> private static void maybeForkAndRun(ThreadPool threadPool, Runnable runnable);1543791957;If necessary, fork before executing the runnable. A deadlock will happen if_the same thread which handles bind responses blocks on the bind call, waiting_for the response which he itself should handle.;private static void maybeForkAndRun(ThreadPool threadPool, Runnable runnable) {_        if (isLdapConnectionThread(Thread.currentThread())) {_            _            threadPool.executor(ThreadPool.Names.GENERIC).execute(runnable)__        } else {_            _            runnable.run()__        }_    };if,necessary,fork,before,executing,the,runnable,a,deadlock,will,happen,if,the,same,thread,which,handles,bind,responses,blocks,on,the,bind,call,waiting,for,the,response,which,he,itself,should,handle;private,static,void,maybe,fork,and,run,thread,pool,thread,pool,runnable,runnable,if,is,ldap,connection,thread,thread,current,thread,thread,pool,executor,thread,pool,names,generic,execute,runnable,else,runnable,run
LdapUtils -> public static void search(LDAPConnection ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1524684173;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPConnection ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        LdapSearchResultListener searchResultListener = new LdapSearchResultListener(_                ldap,_                ignoreReferralErrors,_                ActionListener.wrap(_                        searchResult -> {_                            assert isLdapConnectionThread(Thread.currentThread()) : "Expected current thread [" + Thread.currentThread()_                                    + "] to be an LDAPConnectionReader Thread. Probably the new library has changed the thread's name."__                            listener.onResponse(Collections.unmodifiableList(searchResult.getSearchEntries()))__                        },_                        listener::onFailure),_                1)__        try {_            SearchRequest request = new SearchRequest(searchResultListener, baseDN, scope,_                    DereferencePolicy.NEVER, 0, timeLimitSeconds, false, filter, attributes)__            searchResultListener.setSearchRequest(request)__            ldap.asyncSearch(request)__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapconnection,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,ldap,search,result,listener,search,result,listener,new,ldap,search,result,listener,ldap,ignore,referral,errors,action,listener,wrap,search,result,assert,is,ldap,connection,thread,thread,current,thread,expected,current,thread,thread,current,thread,to,be,an,ldapconnection,reader,thread,probably,the,new,library,has,changed,the,thread,s,name,listener,on,response,collections,unmodifiable,list,search,result,get,search,entries,listener,on,failure,1,try,search,request,request,new,search,request,search,result,listener,base,dn,scope,dereference,policy,never,0,time,limit,seconds,false,filter,attributes,search,result,listener,set,search,request,request,ldap,async,search,request,catch,ldapexception,e,listener,on,failure,e
LdapUtils -> public static void search(LDAPConnection ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1539615817;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPConnection ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        LdapSearchResultListener searchResultListener = new LdapSearchResultListener(_                ldap,_                ignoreReferralErrors,_                ActionListener.wrap(_                        searchResult -> {_                            assert isLdapConnectionThread(Thread.currentThread()) : "Expected current thread [" + Thread.currentThread()_                                    + "] to be an LDAPConnectionReader Thread. Probably the new library has changed the thread's name."__                            listener.onResponse(Collections.unmodifiableList(searchResult.getSearchEntries()))__                        },_                        listener::onFailure),_                1)__        try {_            SearchRequest request = new SearchRequest(searchResultListener, baseDN, scope,_                    DereferencePolicy.NEVER, 0, timeLimitSeconds, false, filter, attributes)__            searchResultListener.setSearchRequest(request)__            ldap.asyncSearch(request)__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapconnection,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,ldap,search,result,listener,search,result,listener,new,ldap,search,result,listener,ldap,ignore,referral,errors,action,listener,wrap,search,result,assert,is,ldap,connection,thread,thread,current,thread,expected,current,thread,thread,current,thread,to,be,an,ldapconnection,reader,thread,probably,the,new,library,has,changed,the,thread,s,name,listener,on,response,collections,unmodifiable,list,search,result,get,search,entries,listener,on,failure,1,try,search,request,request,new,search,request,search,result,listener,base,dn,scope,dereference,policy,never,0,time,limit,seconds,false,filter,attributes,search,result,listener,set,search,request,request,ldap,async,search,request,catch,ldapexception,e,listener,on,failure,e
LdapUtils -> public static void search(LDAPConnection ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1541476610;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPConnection ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        LdapSearchResultListener searchResultListener = new LdapSearchResultListener(_                ldap,_                ignoreReferralErrors,_                ActionListener.wrap(_                        searchResult -> {_                            assert isLdapConnectionThread(Thread.currentThread()) : "Expected current thread [" + Thread.currentThread()_                                    + "] to be an LDAPConnectionReader Thread. Probably the new library has changed the thread's name."__                            listener.onResponse(Collections.unmodifiableList(searchResult.getSearchEntries()))__                        },_                        listener::onFailure),_                1)__        try {_            SearchRequest request = new SearchRequest(searchResultListener, baseDN, scope,_                    DereferencePolicy.NEVER, 0, timeLimitSeconds, false, filter, attributes)__            searchResultListener.setSearchRequest(request)__            ldap.asyncSearch(request)__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapconnection,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,ldap,search,result,listener,search,result,listener,new,ldap,search,result,listener,ldap,ignore,referral,errors,action,listener,wrap,search,result,assert,is,ldap,connection,thread,thread,current,thread,expected,current,thread,thread,current,thread,to,be,an,ldapconnection,reader,thread,probably,the,new,library,has,changed,the,thread,s,name,listener,on,response,collections,unmodifiable,list,search,result,get,search,entries,listener,on,failure,1,try,search,request,request,new,search,request,search,result,listener,base,dn,scope,dereference,policy,never,0,time,limit,seconds,false,filter,attributes,search,result,listener,set,search,request,request,ldap,async,search,request,catch,ldapexception,e,listener,on,failure,e
LdapUtils -> public static void search(LDAPConnection ldap, String baseDN, SearchScope scope,                               Filter filter, int timeLimitSeconds,                               boolean ignoreReferralErrors,                               ActionListener<List<SearchResultEntry>> listener,                               String... attributes);1543791957;This method performs an asynchronous ldap search operation that could have multiple results;public static void search(LDAPConnection ldap, String baseDN, SearchScope scope,_                              Filter filter, int timeLimitSeconds,_                              boolean ignoreReferralErrors,_                              ActionListener<List<SearchResultEntry>> listener,_                              String... attributes) {_        LdapSearchResultListener searchResultListener = new LdapSearchResultListener(_                ldap,_                ignoreReferralErrors,_                ActionListener.wrap(_                        searchResult -> {_                            assert isLdapConnectionThread(Thread.currentThread()) : "Expected current thread [" + Thread.currentThread()_                                    + "] to be an LDAPConnectionReader Thread. Probably the new library has changed the thread's name."__                            listener.onResponse(Collections.unmodifiableList(searchResult.getSearchEntries()))__                        },_                        listener::onFailure),_                1)__        try {_            SearchRequest request = new SearchRequest(searchResultListener, baseDN, scope,_                    DereferencePolicy.NEVER, 0, timeLimitSeconds, false, filter, attributes)__            searchResultListener.setSearchRequest(request)__            ldap.asyncSearch(request)__        } catch (LDAPException e) {_            listener.onFailure(e)__        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,could,have,multiple,results;public,static,void,search,ldapconnection,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,list,search,result,entry,listener,string,attributes,ldap,search,result,listener,search,result,listener,new,ldap,search,result,listener,ldap,ignore,referral,errors,action,listener,wrap,search,result,assert,is,ldap,connection,thread,thread,current,thread,expected,current,thread,thread,current,thread,to,be,an,ldapconnection,reader,thread,probably,the,new,library,has,changed,the,thread,s,name,listener,on,response,collections,unmodifiable,list,search,result,get,search,entries,listener,on,failure,1,try,search,request,request,new,search,request,search,result,listener,base,dn,scope,dereference,policy,never,0,time,limit,seconds,false,filter,attributes,search,result,listener,set,search,request,request,ldap,async,search,request,catch,ldapexception,e,listener,on,failure,e
LdapUtils -> public static void searchForEntry(LDAPConnectionPool ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1524684173;This method performs an asynchronous ldap search operation that only expects at most one_result._If more than one result is found then this is an error._If no results are found, then {@code null} will be returned._If the LDAP server returns an error {@link ResultCode} then this is handled as a_{@link ActionListener#onFailure(Exception) failure};public static void searchForEntry(LDAPConnectionPool ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        boolean searching = false__        LDAPConnection ldapConnection = null__        try {_            ldapConnection = privilegedConnect(ldap::getConnection)__            final LDAPConnection finalConnection = ldapConnection__            searchForEntry(finalConnection, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, ActionListener.wrap(_                            entry -> {_                                assert isLdapConnectionThread(Thread.currentThread()) : "Expected current thread [" + Thread.currentThread()_                                        + "] to be an LDAPConnectionReader Thread. Probably the new library has changed the thread's name."__                                IOUtils.close(() -> ldap.releaseConnection(finalConnection))__                                listener.onResponse(entry)__                            },_                            e -> {_                                IOUtils.closeWhileHandlingException(_                                        () -> ldap.releaseConnection(finalConnection)_                                )__                                listener.onFailure(e)__                            }), attributes)__            searching = true__        } catch (LDAPException e) {_            listener.onFailure(e)__        } finally {_            if (searching == false) {_                final LDAPConnection finalConnection = ldapConnection__                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__            }_        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,only,expects,at,most,one,result,if,more,than,one,result,is,found,then,this,is,an,error,if,no,results,are,found,then,code,null,will,be,returned,if,the,ldap,server,returns,an,error,link,result,code,then,this,is,handled,as,a,link,action,listener,on,failure,exception,failure;public,static,void,search,for,entry,ldapconnection,pool,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,boolean,searching,false,ldapconnection,ldap,connection,null,try,ldap,connection,privileged,connect,ldap,get,connection,final,ldapconnection,final,connection,ldap,connection,search,for,entry,final,connection,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,action,listener,wrap,entry,assert,is,ldap,connection,thread,thread,current,thread,expected,current,thread,thread,current,thread,to,be,an,ldapconnection,reader,thread,probably,the,new,library,has,changed,the,thread,s,name,ioutils,close,ldap,release,connection,final,connection,listener,on,response,entry,e,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,failure,e,attributes,searching,true,catch,ldapexception,e,listener,on,failure,e,finally,if,searching,false,final,ldapconnection,final,connection,ldap,connection,ioutils,close,while,handling,exception,ldap,release,connection,final,connection
LdapUtils -> public static void searchForEntry(LDAPConnectionPool ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1539615817;This method performs an asynchronous ldap search operation that only expects at most one_result._If more than one result is found then this is an error._If no results are found, then {@code null} will be returned._If the LDAP server returns an error {@link ResultCode} then this is handled as a_{@link ActionListener#onFailure(Exception) failure};public static void searchForEntry(LDAPConnectionPool ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        boolean searching = false__        LDAPConnection ldapConnection = null__        try {_            ldapConnection = privilegedConnect(ldap::getConnection)__            final LDAPConnection finalConnection = ldapConnection__            searchForEntry(finalConnection, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, ActionListener.wrap(_                            entry -> {_                                assert isLdapConnectionThread(Thread.currentThread()) : "Expected current thread [" + Thread.currentThread()_                                        + "] to be an LDAPConnectionReader Thread. Probably the new library has changed the thread's name."__                                IOUtils.close(() -> ldap.releaseConnection(finalConnection))__                                listener.onResponse(entry)__                            },_                            e -> {_                                IOUtils.closeWhileHandlingException(_                                        () -> ldap.releaseConnection(finalConnection)_                                )__                                listener.onFailure(e)__                            }), attributes)__            searching = true__        } catch (LDAPException e) {_            listener.onFailure(e)__        } finally {_            if (searching == false) {_                final LDAPConnection finalConnection = ldapConnection__                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__            }_        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,only,expects,at,most,one,result,if,more,than,one,result,is,found,then,this,is,an,error,if,no,results,are,found,then,code,null,will,be,returned,if,the,ldap,server,returns,an,error,link,result,code,then,this,is,handled,as,a,link,action,listener,on,failure,exception,failure;public,static,void,search,for,entry,ldapconnection,pool,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,boolean,searching,false,ldapconnection,ldap,connection,null,try,ldap,connection,privileged,connect,ldap,get,connection,final,ldapconnection,final,connection,ldap,connection,search,for,entry,final,connection,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,action,listener,wrap,entry,assert,is,ldap,connection,thread,thread,current,thread,expected,current,thread,thread,current,thread,to,be,an,ldapconnection,reader,thread,probably,the,new,library,has,changed,the,thread,s,name,ioutils,close,ldap,release,connection,final,connection,listener,on,response,entry,e,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,failure,e,attributes,searching,true,catch,ldapexception,e,listener,on,failure,e,finally,if,searching,false,final,ldapconnection,final,connection,ldap,connection,ioutils,close,while,handling,exception,ldap,release,connection,final,connection
LdapUtils -> public static void searchForEntry(LDAPConnectionPool ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1541476610;This method performs an asynchronous ldap search operation that only expects at most one_result._If more than one result is found then this is an error._If no results are found, then {@code null} will be returned._If the LDAP server returns an error {@link ResultCode} then this is handled as a_{@link ActionListener#onFailure(Exception) failure};public static void searchForEntry(LDAPConnectionPool ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        boolean searching = false__        LDAPConnection ldapConnection = null__        try {_            ldapConnection = privilegedConnect(ldap::getConnection)__            final LDAPConnection finalConnection = ldapConnection__            searchForEntry(finalConnection, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, ActionListener.wrap(_                            entry -> {_                                assert isLdapConnectionThread(Thread.currentThread()) : "Expected current thread [" + Thread.currentThread()_                                        + "] to be an LDAPConnectionReader Thread. Probably the new library has changed the thread's name."__                                IOUtils.close(() -> ldap.releaseConnection(finalConnection))__                                listener.onResponse(entry)__                            },_                            e -> {_                                IOUtils.closeWhileHandlingException(_                                        () -> ldap.releaseConnection(finalConnection)_                                )__                                listener.onFailure(e)__                            }), attributes)__            searching = true__        } catch (LDAPException e) {_            listener.onFailure(e)__        } finally {_            if (searching == false) {_                final LDAPConnection finalConnection = ldapConnection__                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__            }_        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,only,expects,at,most,one,result,if,more,than,one,result,is,found,then,this,is,an,error,if,no,results,are,found,then,code,null,will,be,returned,if,the,ldap,server,returns,an,error,link,result,code,then,this,is,handled,as,a,link,action,listener,on,failure,exception,failure;public,static,void,search,for,entry,ldapconnection,pool,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,boolean,searching,false,ldapconnection,ldap,connection,null,try,ldap,connection,privileged,connect,ldap,get,connection,final,ldapconnection,final,connection,ldap,connection,search,for,entry,final,connection,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,action,listener,wrap,entry,assert,is,ldap,connection,thread,thread,current,thread,expected,current,thread,thread,current,thread,to,be,an,ldapconnection,reader,thread,probably,the,new,library,has,changed,the,thread,s,name,ioutils,close,ldap,release,connection,final,connection,listener,on,response,entry,e,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,failure,e,attributes,searching,true,catch,ldapexception,e,listener,on,failure,e,finally,if,searching,false,final,ldapconnection,final,connection,ldap,connection,ioutils,close,while,handling,exception,ldap,release,connection,final,connection
LdapUtils -> public static void searchForEntry(LDAPConnectionPool ldap, String baseDN, SearchScope scope,                                       Filter filter, int timeLimitSeconds,                                       boolean ignoreReferralErrors,                                       ActionListener<SearchResultEntry> listener,                                       String... attributes);1543791957;This method performs an asynchronous ldap search operation that only expects at most one_result._If more than one result is found then this is an error._If no results are found, then {@code null} will be returned._If the LDAP server returns an error {@link ResultCode} then this is handled as a_{@link ActionListener#onFailure(Exception) failure};public static void searchForEntry(LDAPConnectionPool ldap, String baseDN, SearchScope scope,_                                      Filter filter, int timeLimitSeconds,_                                      boolean ignoreReferralErrors,_                                      ActionListener<SearchResultEntry> listener,_                                      String... attributes) {_        boolean searching = false__        LDAPConnection ldapConnection = null__        try {_            ldapConnection = privilegedConnect(ldap::getConnection)__            final LDAPConnection finalConnection = ldapConnection__            searchForEntry(finalConnection, baseDN, scope, filter, timeLimitSeconds,_                    ignoreReferralErrors, ActionListener.wrap(_                            entry -> {_                                assert isLdapConnectionThread(Thread.currentThread()) : "Expected current thread [" + Thread.currentThread()_                                        + "] to be an LDAPConnectionReader Thread. Probably the new library has changed the thread's name."__                                IOUtils.close(() -> ldap.releaseConnection(finalConnection))__                                listener.onResponse(entry)__                            },_                            e -> {_                                IOUtils.closeWhileHandlingException(_                                        () -> ldap.releaseConnection(finalConnection)_                                )__                                listener.onFailure(e)__                            }), attributes)__            searching = true__        } catch (LDAPException e) {_            listener.onFailure(e)__        } finally {_            if (searching == false) {_                final LDAPConnection finalConnection = ldapConnection__                IOUtils.closeWhileHandlingException(() -> ldap.releaseConnection(finalConnection))__            }_        }_    };this,method,performs,an,asynchronous,ldap,search,operation,that,only,expects,at,most,one,result,if,more,than,one,result,is,found,then,this,is,an,error,if,no,results,are,found,then,code,null,will,be,returned,if,the,ldap,server,returns,an,error,link,result,code,then,this,is,handled,as,a,link,action,listener,on,failure,exception,failure;public,static,void,search,for,entry,ldapconnection,pool,ldap,string,base,dn,search,scope,scope,filter,filter,int,time,limit,seconds,boolean,ignore,referral,errors,action,listener,search,result,entry,listener,string,attributes,boolean,searching,false,ldapconnection,ldap,connection,null,try,ldap,connection,privileged,connect,ldap,get,connection,final,ldapconnection,final,connection,ldap,connection,search,for,entry,final,connection,base,dn,scope,filter,time,limit,seconds,ignore,referral,errors,action,listener,wrap,entry,assert,is,ldap,connection,thread,thread,current,thread,expected,current,thread,thread,current,thread,to,be,an,ldapconnection,reader,thread,probably,the,new,library,has,changed,the,thread,s,name,ioutils,close,ldap,release,connection,final,connection,listener,on,response,entry,e,ioutils,close,while,handling,exception,ldap,release,connection,final,connection,listener,on,failure,e,attributes,searching,true,catch,ldapexception,e,listener,on,failure,e,finally,if,searching,false,final,ldapconnection,final,connection,ldap,connection,ioutils,close,while,handling,exception,ldap,release,connection,final,connection
