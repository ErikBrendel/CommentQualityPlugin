commented;modifiers;parameterAmount;loc;comment;code
false;public;6;22;;@Override public void resolve(LDAPInterface connection, String userDn, TimeValue timeout, Logger logger, Collection<Attribute> attributes, ActionListener<List<String>> listener) {     buildGroupQuery(connection, userDn, timeout, ignoreReferralErrors, ActionListener.wrap((filter) -> {         if (filter == null) {             listener.onResponse(Collections.emptyList()).         } else {             logger.debug("group SID to DN [{}] search filter: [{}]", userDn, filter).             search(connection, baseDn, scope.scope(), filter, Math.toIntExact(timeout.seconds()), ignoreReferralErrors, ActionListener.wrap((results) -> {                 List<String> groups = results.stream().map(SearchResultEntry::getDN).collect(Collectors.toList()).                 listener.onResponse(Collections.unmodifiableList(groups)).             }, listener::onFailure), SearchRequest.NO_ATTRIBUTES).         }     }, listener::onFailure)). }
false;public;0;5;;@Override public String[] attributes() {     // we have to return null since the tokenGroups attribute is computed and can only be retrieved using a BASE level search     return null. }
false;static;5;17;;static void buildGroupQuery(LDAPInterface connection, String userDn, TimeValue timeout, boolean ignoreReferralErrors, ActionListener<Filter> listener) {     searchForEntry(connection, userDn, SearchScope.BASE, OBJECT_CLASS_PRESENCE_FILTER, Math.toIntExact(timeout.seconds()), ignoreReferralErrors, ActionListener.wrap((entry) -> {         if (entry == null || entry.hasAttribute(TOKEN_GROUPS) == false) {             listener.onResponse(null).         } else {             final byte[][] tokenGroupSIDBytes = entry.getAttributeValueByteArrays(TOKEN_GROUPS).             List<Filter> orFilters = Arrays.stream(tokenGroupSIDBytes).map((sidBytes) -> Filter.createEqualityFilter("objectSid", convertToString(sidBytes))).collect(Collectors.toList()).             listener.onResponse(Filter.createORFilter(orFilters)).         }     }, listener::onFailure), TOKEN_GROUPS). }
