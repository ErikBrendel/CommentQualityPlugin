commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Override public void doRun() {     DeleteByQueryRequest expiredDbq = new DeleteByQueryRequest(SecurityIndexManager.SECURITY_INDEX_NAME).     if (timeout != TimeValue.MINUS_ONE) {         expiredDbq.setTimeout(timeout).         expiredDbq.getSearchRequest().source().timeout(timeout).     }     final Instant now = Instant.now().     expiredDbq.setQuery(QueryBuilders.boolQuery().filter(QueryBuilders.termsQuery("doc_type", "api_key")).should(QueryBuilders.termsQuery("api_key_invalidated", true)).should(QueryBuilders.rangeQuery("expiration_time").lte(now.minus(EXPIRED_API_KEYS_RETENTION_PERIOD).toEpochMilli())).minimumShouldMatch(1)).     executeAsyncWithOrigin(client, SECURITY_ORIGIN, DeleteByQueryAction.INSTANCE, expiredDbq, ActionListener.wrap(r -> {         debugDbqResponse(r).         markComplete().     }, this::onFailure)). }
false;;1;5;;void submit(ThreadPool threadPool) {     if (inProgress.compareAndSet(false, true)) {         threadPool.executor(Names.GENERIC).submit(this).     } }
false;private;1;14;;private void debugDbqResponse(BulkByScrollResponse response) {     if (logger.isDebugEnabled()) {         logger.debug("delete by query of api keys finished with [{}] deletions, [{}] bulk failures, [{}] search failures", response.getDeleted(), response.getBulkFailures().size(), response.getSearchFailures().size()).         for (BulkItemResponse.Failure failure : response.getBulkFailures()) {             logger.debug(new ParameterizedMessage("deletion failed for index [{}], type [{}], id [{}]", failure.getIndex(), failure.getType(), failure.getId()), failure.getCause()).         }         for (ScrollableHitSource.SearchFailure failure : response.getSearchFailures()) {             logger.debug(new ParameterizedMessage("search failed for index [{}], shard [{}] on node [{}]", failure.getIndex(), failure.getShardId(), failure.getNodeId()), failure.getReason()).         }     } }
false;;0;3;;boolean isExpirationInProgress() {     return inProgress.get(). }
false;public;1;9;;@Override public void onFailure(Exception e) {     if (isShardNotAvailableException(e)) {         logger.debug("failed to delete expired or invalidated api keys", e).     } else {         logger.error("failed to delete expired or invalidated api keys", e).     }     markComplete(). }
false;private;0;5;;private void markComplete() {     if (inProgress.compareAndSet(true, false) == false) {         throw new IllegalStateException("in progress was set to false but should have been true!").     } }
