# id;timestamp;commentText;codeText;commentWords;codeWords
DeprecationChecks -> static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper);1547846674;helper utility function to reduce repeat of running a specific {@link List} of checks.__@param checks The functional checks to execute using the mapper function_@param mapper The function that executes the lambda check with the appropriate arguments_@param <T> The signature of the check (BiFunction, Function, including the appropriate arguments)_@return The list of {@link DeprecationIssue} that were found in the cluster;static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper) {_        return checks.stream().map(mapper).filter(Objects::nonNull).collect(Collectors.toList())__    };helper,utility,function,to,reduce,repeat,of,running,a,specific,link,list,of,checks,param,checks,the,functional,checks,to,execute,using,the,mapper,function,param,mapper,the,function,that,executes,the,lambda,check,with,the,appropriate,arguments,param,t,the,signature,of,the,check,bi,function,function,including,the,appropriate,arguments,return,the,list,of,link,deprecation,issue,that,were,found,in,the,cluster;static,t,list,deprecation,issue,filter,checks,list,t,checks,function,t,deprecation,issue,mapper,return,checks,stream,map,mapper,filter,objects,non,null,collect,collectors,to,list
DeprecationChecks -> static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper);1548879140;helper utility function to reduce repeat of running a specific {@link List} of checks.__@param checks The functional checks to execute using the mapper function_@param mapper The function that executes the lambda check with the appropriate arguments_@param <T> The signature of the check (BiFunction, Function, including the appropriate arguments)_@return The list of {@link DeprecationIssue} that were found in the cluster;static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper) {_        return checks.stream().map(mapper).filter(Objects::nonNull).collect(Collectors.toList())__    };helper,utility,function,to,reduce,repeat,of,running,a,specific,link,list,of,checks,param,checks,the,functional,checks,to,execute,using,the,mapper,function,param,mapper,the,function,that,executes,the,lambda,check,with,the,appropriate,arguments,param,t,the,signature,of,the,check,bi,function,function,including,the,appropriate,arguments,return,the,list,of,link,deprecation,issue,that,were,found,in,the,cluster;static,t,list,deprecation,issue,filter,checks,list,t,checks,function,t,deprecation,issue,mapper,return,checks,stream,map,mapper,filter,objects,non,null,collect,collectors,to,list
DeprecationChecks -> static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper);1549298608;helper utility function to reduce repeat of running a specific {@link List} of checks.__@param checks The functional checks to execute using the mapper function_@param mapper The function that executes the lambda check with the appropriate arguments_@param <T> The signature of the check (BiFunction, Function, including the appropriate arguments)_@return The list of {@link DeprecationIssue} that were found in the cluster;static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper) {_        return checks.stream().map(mapper).filter(Objects::nonNull).collect(Collectors.toList())__    };helper,utility,function,to,reduce,repeat,of,running,a,specific,link,list,of,checks,param,checks,the,functional,checks,to,execute,using,the,mapper,function,param,mapper,the,function,that,executes,the,lambda,check,with,the,appropriate,arguments,param,t,the,signature,of,the,check,bi,function,function,including,the,appropriate,arguments,return,the,list,of,link,deprecation,issue,that,were,found,in,the,cluster;static,t,list,deprecation,issue,filter,checks,list,t,checks,function,t,deprecation,issue,mapper,return,checks,stream,map,mapper,filter,objects,non,null,collect,collectors,to,list
