commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.GENERIC. }
false;protected;0;4;;@Override protected DeprecationInfoAction.Response newResponse() {     return new DeprecationInfoAction.Response(). }
false;protected;2;5;;@Override protected ClusterBlockException checkBlock(DeprecationInfoAction.Request request, ClusterState state) {     // Cluster is not affected but we look up repositories in metadata     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ). }
false;protected,final;3;34;;@Override protected final void masterOperation(final DeprecationInfoAction.Request request, ClusterState state, final ActionListener<DeprecationInfoAction.Response> listener) {     if (licenseState.isDeprecationAllowed()) {         NodesDeprecationCheckRequest nodeDepReq = new NodesDeprecationCheckRequest("_all").         ClientHelper.executeAsyncWithOrigin(client, ClientHelper.DEPRECATION_ORIGIN, NodesDeprecationCheckAction.INSTANCE, nodeDepReq, ActionListener.wrap(response -> {             if (response.hasFailures()) {                 List<String> failedNodeIds = response.failures().stream().map(failure -> failure.nodeId() + ": " + failure.getMessage()).collect(Collectors.toList()).                 logger.warn("nodes failed to run deprecation checks: {}", failedNodeIds).                 for (FailedNodeException failure : response.failures()) {                     logger.debug("node {} failed to run deprecation checks: {}", failure.nodeId(), failure).                 }             }             getDatafeedConfigs(ActionListener.wrap(datafeeds -> {                 listener.onResponse(DeprecationInfoAction.Response.from(state, indexNameExpressionResolver, request.indices(), request.indicesOptions(), datafeeds, response, INDEX_SETTINGS_CHECKS, CLUSTER_SETTINGS_CHECKS, ML_SETTINGS_CHECKS)).             }, listener::onFailure)).         }, listener::onFailure)).     } else {         listener.onFailure(LicenseUtils.newComplianceException(XPackField.DEPRECATION)).     } }
false;private;1;11;;private void getDatafeedConfigs(ActionListener<List<DatafeedConfig>> listener) {     if (XPackSettings.MACHINE_LEARNING_ENABLED.get(settings) == false) {         listener.onResponse(Collections.emptyList()).     } else {         ClientHelper.executeAsyncWithOrigin(client, ClientHelper.DEPRECATION_ORIGIN, GetDatafeedsAction.INSTANCE, new GetDatafeedsAction.Request(GetDatafeedsAction.ALL), ActionListener.wrap(datafeedsResponse -> listener.onResponse(datafeedsResponse.getResponse().results()), listener::onFailure)).     } }
