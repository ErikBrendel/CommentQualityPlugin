# id;timestamp;commentText;codeText;commentWords;codeWords
IndexDeprecationChecks -> @SuppressWarnings("unchecked")     private static List<String> findInPropertiesRecursively(String type, Map<String, Object> parentMap,                                                     Function<Map<?,?>, Boolean> predicate);1524684173;iterates through the "properties" field of mappings and returns any predicates that match in the_form of issue-strings.__@param type the document type_@param parentMap the mapping to read properties from_@param predicate the predicate to check against for issues, issue is returned if predicate evaluates to true_@return a list of issues found in fields;@SuppressWarnings("unchecked")_    private static List<String> findInPropertiesRecursively(String type, Map<String, Object> parentMap,_                                                    Function<Map<?,?>, Boolean> predicate) {_        List<String> issues = new ArrayList<>()__        Map<?, ?> properties = (Map<?, ?>) parentMap.get("properties")__        if (properties == null) {_            return issues__        }_        for (Map.Entry<?, ?> entry : properties.entrySet()) {_            Map<String, Object> valueMap = (Map<String, Object>) entry.getValue()__            if (predicate.apply(valueMap)) {_                issues.add("[type: " + type + ", field: " + entry.getKey() + "]")__            }__            Map<?, ?> values = (Map<?, ?>) valueMap.get("fields")__            if (values != null) {_                for (Map.Entry<?, ?> multifieldEntry : values.entrySet()) {_                    Map<String, Object> multifieldValueMap = (Map<String, Object>) multifieldEntry.getValue()__                    if (predicate.apply(multifieldValueMap)) {_                        issues.add("[type: " + type + ", field: " + entry.getKey() + ", multifield: " + multifieldEntry.getKey() + "]")__                    }_                    if (multifieldValueMap.containsKey("properties")) {_                        issues.addAll(findInPropertiesRecursively(type, multifieldValueMap, predicate))__                    }_                }_            }_            if (valueMap.containsKey("properties")) {_                issues.addAll(findInPropertiesRecursively(type, valueMap, predicate))__            }_        }__        return issues__    };iterates,through,the,properties,field,of,mappings,and,returns,any,predicates,that,match,in,the,form,of,issue,strings,param,type,the,document,type,param,parent,map,the,mapping,to,read,properties,from,param,predicate,the,predicate,to,check,against,for,issues,issue,is,returned,if,predicate,evaluates,to,true,return,a,list,of,issues,found,in,fields;suppress,warnings,unchecked,private,static,list,string,find,in,properties,recursively,string,type,map,string,object,parent,map,function,map,boolean,predicate,list,string,issues,new,array,list,map,properties,map,parent,map,get,properties,if,properties,null,return,issues,for,map,entry,entry,properties,entry,set,map,string,object,value,map,map,string,object,entry,get,value,if,predicate,apply,value,map,issues,add,type,type,field,entry,get,key,map,values,map,value,map,get,fields,if,values,null,for,map,entry,multifield,entry,values,entry,set,map,string,object,multifield,value,map,map,string,object,multifield,entry,get,value,if,predicate,apply,multifield,value,map,issues,add,type,type,field,entry,get,key,multifield,multifield,entry,get,key,if,multifield,value,map,contains,key,properties,issues,add,all,find,in,properties,recursively,type,multifield,value,map,predicate,if,value,map,contains,key,properties,issues,add,all,find,in,properties,recursively,type,value,map,predicate,return,issues
IndexDeprecationChecks -> @SuppressWarnings("unchecked")     private static List<String> findInPropertiesRecursively(String type, Map<String, Object> parentMap,                                                     Function<Map<?,?>, Boolean> predicate);1541592065;iterates through the "properties" field of mappings and returns any predicates that match in the_form of issue-strings.__@param type the document type_@param parentMap the mapping to read properties from_@param predicate the predicate to check against for issues, issue is returned if predicate evaluates to true_@return a list of issues found in fields;@SuppressWarnings("unchecked")_    private static List<String> findInPropertiesRecursively(String type, Map<String, Object> parentMap,_                                                    Function<Map<?,?>, Boolean> predicate) {_        List<String> issues = new ArrayList<>()__        Map<?, ?> properties = (Map<?, ?>) parentMap.get("properties")__        if (properties == null) {_            return issues__        }_        for (Map.Entry<?, ?> entry : properties.entrySet()) {_            Map<String, Object> valueMap = (Map<String, Object>) entry.getValue()__            if (predicate.apply(valueMap)) {_                issues.add("[type: " + type + ", field: " + entry.getKey() + "]")__            }__            Map<?, ?> values = (Map<?, ?>) valueMap.get("fields")__            if (values != null) {_                for (Map.Entry<?, ?> multifieldEntry : values.entrySet()) {_                    Map<String, Object> multifieldValueMap = (Map<String, Object>) multifieldEntry.getValue()__                    if (predicate.apply(multifieldValueMap)) {_                        issues.add("[type: " + type + ", field: " + entry.getKey() + ", multifield: " + multifieldEntry.getKey() + "]")__                    }_                    if (multifieldValueMap.containsKey("properties")) {_                        issues.addAll(findInPropertiesRecursively(type, multifieldValueMap, predicate))__                    }_                }_            }_            if (valueMap.containsKey("properties")) {_                issues.addAll(findInPropertiesRecursively(type, valueMap, predicate))__            }_        }__        return issues__    };iterates,through,the,properties,field,of,mappings,and,returns,any,predicates,that,match,in,the,form,of,issue,strings,param,type,the,document,type,param,parent,map,the,mapping,to,read,properties,from,param,predicate,the,predicate,to,check,against,for,issues,issue,is,returned,if,predicate,evaluates,to,true,return,a,list,of,issues,found,in,fields;suppress,warnings,unchecked,private,static,list,string,find,in,properties,recursively,string,type,map,string,object,parent,map,function,map,boolean,predicate,list,string,issues,new,array,list,map,properties,map,parent,map,get,properties,if,properties,null,return,issues,for,map,entry,entry,properties,entry,set,map,string,object,value,map,map,string,object,entry,get,value,if,predicate,apply,value,map,issues,add,type,type,field,entry,get,key,map,values,map,value,map,get,fields,if,values,null,for,map,entry,multifield,entry,values,entry,set,map,string,object,multifield,value,map,map,string,object,multifield,entry,get,value,if,predicate,apply,multifield,value,map,issues,add,type,type,field,entry,get,key,multifield,multifield,entry,get,key,if,multifield,value,map,contains,key,properties,issues,add,all,find,in,properties,recursively,type,multifield,value,map,predicate,if,value,map,contains,key,properties,issues,add,all,find,in,properties,recursively,type,value,map,predicate,return,issues
IndexDeprecationChecks -> @SuppressWarnings("unchecked")     private static List<String> findInPropertiesRecursively(String type, Map<String, Object> parentMap,                                                     Function<Map<?,?>, Boolean> predicate);1544222753;iterates through the "properties" field of mappings and returns any predicates that match in the_form of issue-strings.__@param type the document type_@param parentMap the mapping to read properties from_@param predicate the predicate to check against for issues, issue is returned if predicate evaluates to true_@return a list of issues found in fields;@SuppressWarnings("unchecked")_    private static List<String> findInPropertiesRecursively(String type, Map<String, Object> parentMap,_                                                    Function<Map<?,?>, Boolean> predicate) {_        List<String> issues = new ArrayList<>()__        Map<?, ?> properties = (Map<?, ?>) parentMap.get("properties")__        if (properties == null) {_            return issues__        }_        for (Map.Entry<?, ?> entry : properties.entrySet()) {_            Map<String, Object> valueMap = (Map<String, Object>) entry.getValue()__            if (predicate.apply(valueMap)) {_                issues.add("[type: " + type + ", field: " + entry.getKey() + "]")__            }__            Map<?, ?> values = (Map<?, ?>) valueMap.get("fields")__            if (values != null) {_                for (Map.Entry<?, ?> multifieldEntry : values.entrySet()) {_                    Map<String, Object> multifieldValueMap = (Map<String, Object>) multifieldEntry.getValue()__                    if (predicate.apply(multifieldValueMap)) {_                        issues.add("[type: " + type + ", field: " + entry.getKey() + ", multifield: " + multifieldEntry.getKey() + "]")__                    }_                    if (multifieldValueMap.containsKey("properties")) {_                        issues.addAll(findInPropertiesRecursively(type, multifieldValueMap, predicate))__                    }_                }_            }_            if (valueMap.containsKey("properties")) {_                issues.addAll(findInPropertiesRecursively(type, valueMap, predicate))__            }_        }__        return issues__    };iterates,through,the,properties,field,of,mappings,and,returns,any,predicates,that,match,in,the,form,of,issue,strings,param,type,the,document,type,param,parent,map,the,mapping,to,read,properties,from,param,predicate,the,predicate,to,check,against,for,issues,issue,is,returned,if,predicate,evaluates,to,true,return,a,list,of,issues,found,in,fields;suppress,warnings,unchecked,private,static,list,string,find,in,properties,recursively,string,type,map,string,object,parent,map,function,map,boolean,predicate,list,string,issues,new,array,list,map,properties,map,parent,map,get,properties,if,properties,null,return,issues,for,map,entry,entry,properties,entry,set,map,string,object,value,map,map,string,object,entry,get,value,if,predicate,apply,value,map,issues,add,type,type,field,entry,get,key,map,values,map,value,map,get,fields,if,values,null,for,map,entry,multifield,entry,values,entry,set,map,string,object,multifield,value,map,map,string,object,multifield,entry,get,value,if,predicate,apply,multifield,value,map,issues,add,type,type,field,entry,get,key,multifield,multifield,entry,get,key,if,multifield,value,map,contains,key,properties,issues,add,all,find,in,properties,recursively,type,multifield,value,map,predicate,if,value,map,contains,key,properties,issues,add,all,find,in,properties,recursively,type,value,map,predicate,return,issues
IndexDeprecationChecks -> @SuppressWarnings("unchecked")     private static List<String> findInPropertiesRecursively(String type, Map<String, Object> parentMap,                                                     Function<Map<?,?>, Boolean> predicate);1547846674;iterates through the "properties" field of mappings and returns any predicates that match in the_form of issue-strings.__@param type the document type_@param parentMap the mapping to read properties from_@param predicate the predicate to check against for issues, issue is returned if predicate evaluates to true_@return a list of issues found in fields;@SuppressWarnings("unchecked")_    private static List<String> findInPropertiesRecursively(String type, Map<String, Object> parentMap,_                                                    Function<Map<?,?>, Boolean> predicate) {_        List<String> issues = new ArrayList<>()__        Map<?, ?> properties = (Map<?, ?>) parentMap.get("properties")__        if (properties == null) {_            return issues__        }_        for (Map.Entry<?, ?> entry : properties.entrySet()) {_            Map<String, Object> valueMap = (Map<String, Object>) entry.getValue()__            if (predicate.apply(valueMap)) {_                issues.add("[type: " + type + ", field: " + entry.getKey() + "]")__            }__            Map<?, ?> values = (Map<?, ?>) valueMap.get("fields")__            if (values != null) {_                for (Map.Entry<?, ?> multifieldEntry : values.entrySet()) {_                    Map<String, Object> multifieldValueMap = (Map<String, Object>) multifieldEntry.getValue()__                    if (predicate.apply(multifieldValueMap)) {_                        issues.add("[type: " + type + ", field: " + entry.getKey() + ", multifield: " + multifieldEntry.getKey() + "]")__                    }_                    if (multifieldValueMap.containsKey("properties")) {_                        issues.addAll(findInPropertiesRecursively(type, multifieldValueMap, predicate))__                    }_                }_            }_            if (valueMap.containsKey("properties")) {_                issues.addAll(findInPropertiesRecursively(type, valueMap, predicate))__            }_        }__        return issues__    };iterates,through,the,properties,field,of,mappings,and,returns,any,predicates,that,match,in,the,form,of,issue,strings,param,type,the,document,type,param,parent,map,the,mapping,to,read,properties,from,param,predicate,the,predicate,to,check,against,for,issues,issue,is,returned,if,predicate,evaluates,to,true,return,a,list,of,issues,found,in,fields;suppress,warnings,unchecked,private,static,list,string,find,in,properties,recursively,string,type,map,string,object,parent,map,function,map,boolean,predicate,list,string,issues,new,array,list,map,properties,map,parent,map,get,properties,if,properties,null,return,issues,for,map,entry,entry,properties,entry,set,map,string,object,value,map,map,string,object,entry,get,value,if,predicate,apply,value,map,issues,add,type,type,field,entry,get,key,map,values,map,value,map,get,fields,if,values,null,for,map,entry,multifield,entry,values,entry,set,map,string,object,multifield,value,map,map,string,object,multifield,entry,get,value,if,predicate,apply,multifield,value,map,issues,add,type,type,field,entry,get,key,multifield,multifield,entry,get,key,if,multifield,value,map,contains,key,properties,issues,add,all,find,in,properties,recursively,type,multifield,value,map,predicate,if,value,map,contains,key,properties,issues,add,all,find,in,properties,recursively,type,value,map,predicate,return,issues
