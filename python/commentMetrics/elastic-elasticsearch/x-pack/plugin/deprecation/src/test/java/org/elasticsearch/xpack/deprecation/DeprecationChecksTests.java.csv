commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testFilterChecks() {     DeprecationIssue issue = createRandomDeprecationIssue().     int numChecksPassed = randomIntBetween(0, 5).     int numChecksFailed = 10 - numChecksPassed.     List<Supplier<DeprecationIssue>> checks = new ArrayList<>().     for (int i = 0. i < numChecksFailed. i++) {         checks.add(() -> issue).     }     for (int i = 0. i < numChecksPassed. i++) {         checks.add(() -> null).     }     List<DeprecationIssue> filteredIssues = DeprecationInfoAction.filterChecks(checks, Supplier::get).     assertThat(filteredIssues.size(), equalTo(numChecksFailed)). }
false;private,static;0;5;;private static DeprecationIssue createRandomDeprecationIssue() {     String details = randomBoolean() ? randomAlphaOfLength(10) : null.     return new DeprecationIssue(randomFrom(DeprecationIssue.Level.values()), randomAlphaOfLength(10), randomAlphaOfLength(10), details). }
