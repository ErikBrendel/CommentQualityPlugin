commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testDoCheckAndPublish() {     final List<MockHttpResource> allResources = successfulResources().     final MultiHttpResource multiResource = new MultiHttpResource(owner, allResources).     multiResource.doCheckAndPublish(client, listener).     verify(listener).onResponse(true).     for (final MockHttpResource resource : allResources) {         assertSuccessfulResource(resource).     } }
false;public;0;43;;public void testDoCheckAndPublishShortCircuits() {     // fail either the check or the publish     final Boolean check = randomBoolean() ? null : false.     final boolean publish = check == null.     final List<MockHttpResource> allResources = successfulResources().     final MockHttpResource failureResource = new MockHttpResource(owner, true, check, publish).     allResources.add(failureResource).     Collections.shuffle(allResources, random()).     final MultiHttpResource multiResource = new MultiHttpResource(owner, allResources).     multiResource.doCheckAndPublish(client, listener).     if (check == null) {         verify(listener).onFailure(any(Exception.class)).     } else {         verify(listener).onResponse(false).     }     boolean found = false.     for (final MockHttpResource resource : allResources) {         // should stop looking at this point         if (resource == failureResource) {             assertThat(resource.checked, equalTo(1)).             if (resource.check == null) {                 assertThat(resource.published, equalTo(0)).             } else {                 assertThat(resource.published, equalTo(1)).             }             found = true.         } else if (found) {             assertThat(resource.checked, equalTo(0)).             assertThat(resource.published, equalTo(0)).         } else {             assertSuccessfulResource(resource).         }     } }
false;public;0;6;;public void testGetResources() {     final List<MockHttpResource> allResources = successfulResources().     final MultiHttpResource multiResource = new MultiHttpResource(owner, allResources).     assertThat(multiResource.getResources(), equalTo(allResources)). }
false;private;0;13;;private List<MockHttpResource> successfulResources() {     final int successful = randomIntBetween(2, 5).     final List<MockHttpResource> resources = new ArrayList<>(successful).     for (int i = 0. i < successful. ++i) {         final boolean check = randomBoolean().         final MockHttpResource resource = new MockHttpResource(owner, randomBoolean(), check, check == false).         resources.add(resource).     }     return resources. }
false;private;1;8;;private void assertSuccessfulResource(final MockHttpResource resource) {     assertThat(resource.checked, equalTo(1)).     if (resource.check == false) {         assertThat(resource.published, equalTo(1)).     } else {         assertThat(resource.published, equalTo(0)).     } }
