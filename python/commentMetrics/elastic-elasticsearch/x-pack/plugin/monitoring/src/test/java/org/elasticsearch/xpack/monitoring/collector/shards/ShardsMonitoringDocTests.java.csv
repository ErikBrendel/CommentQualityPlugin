commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Override @Before public void setUp() throws Exception {     super.setUp().     stateUuid = randomAlphaOfLength(5).     assignedToNode = randomBoolean().     node = assignedToNode ? MonitoringTestUtils.randomMonitoringNode(random()) : null.     shardRouting = newShardRouting(randomAlphaOfLength(5), randomIntBetween(0, 5), assignedToNode ? node.getUUID() : null, randomBoolean(), assignedToNode ? INITIALIZING : UNASSIGNED). }
false;protected;7;5;;@Override protected ShardMonitoringDoc createMonitoringDoc(String cluster, long timestamp, long interval, MonitoringDoc.Node node, MonitoredSystem system, String type, String id) {     return new ShardMonitoringDoc(cluster, timestamp, interval, node, shardRouting, stateUuid). }
false;protected;1;14;;@Override protected void assertFilteredMonitoringDoc(final ShardMonitoringDoc document) {     assertThat(document.getSystem(), is(MonitoredSystem.ES)).     assertThat(document.getType(), is(ShardMonitoringDoc.TYPE)).     assertThat(document.getId(), equalTo(ShardMonitoringDoc.id(stateUuid, shardRouting))).     assertThat(document.getShardRouting(), is(shardRouting)).     if (assignedToNode) {         assertThat(document.getShardRouting().assignedToNode(), is(true)).         assertThat(document.getNode(), is(node)).     } else {         assertThat(document.getNode(), nullValue()).     } }
false;protected;0;4;;@Override protected Set<String> getExpectedXContentFilters() {     return ShardMonitoringDoc.XCONTENT_FILTERS. }
false;public;0;3;;public void testConstructorShardRoutingMustNotBeNull() {     expectThrows(NullPointerException.class, () -> new ShardMonitoringDoc(cluster, timestamp, interval, node, null, stateUuid)). }
false;public;0;3;;public void testConstructorStateUuidMustNotBeNull() {     expectThrows(NullPointerException.class, () -> new ShardMonitoringDoc(cluster, timestamp, interval, node, shardRouting, null)). }
false;public;0;4;;public void testIdWithPrimaryShardAssigned() {     final ShardRouting shardRouting = newShardRouting("_index_0", 123, "_node_0", randomAlphaOfLength(5), true, INITIALIZING).     assertEquals("_state_uuid_0:_node_0:_index_0:123:p", ShardMonitoringDoc.id("_state_uuid_0", shardRouting)). }
false;public;0;4;;public void testIdWithReplicaShardAssigned() {     final ShardRouting shardRouting = newShardRouting("_index_1", 456, "_node_1", randomAlphaOfLength(5), false, INITIALIZING).     assertEquals("_state_uuid_1:_node_1:_index_1:456:r", ShardMonitoringDoc.id("_state_uuid_1", shardRouting)). }
false;public;0;4;;public void testIdWithPrimaryShardUnassigned() {     final ShardRouting shardRouting = newShardRouting("_index_2", 789, null, randomAlphaOfLength(5), true, UNASSIGNED).     assertEquals("_state_uuid_2:_na:_index_2:789:p", ShardMonitoringDoc.id("_state_uuid_2", shardRouting)). }
false;public;0;4;;public void testIdWithReplicaShardUnassigned() {     final ShardRouting shardRouting = newShardRouting("_index_3", 159, null, randomAlphaOfLength(5), false, UNASSIGNED).     assertEquals("_state_uuid_3:_na:_index_3:159:r", ShardMonitoringDoc.id("_state_uuid_3", shardRouting)). }
false;public;0;32;;@Override public void testToXContent() throws IOException {     final ShardRouting shardRouting = newShardRouting("_index", 1, "_index_uuid", "_node_uuid", true, INITIALIZING).     final MonitoringDoc.Node node = new MonitoringDoc.Node("_uuid", "_host", "_addr", "_ip", "_name", 1504169190855L).     final ShardMonitoringDoc doc = new ShardMonitoringDoc("_cluster", 1502107402133L, 1506593717631L, node, shardRouting, "_state_uuid").     final BytesReference xContent = XContentHelper.toXContent(doc, XContentType.JSON, randomBoolean()).     assertEquals("{" + "\"cluster_uuid\":\"_cluster\"," + "\"timestamp\":\"2017-08-07T12:03:22.133Z\"," + "\"interval_ms\":1506593717631," + "\"type\":\"shards\"," + "\"source_node\":{" + "\"uuid\":\"_uuid\"," + "\"host\":\"_host\"," + "\"transport_address\":\"_addr\"," + "\"ip\":\"_ip\"," + "\"name\":\"_name\"," + "\"timestamp\":\"2017-08-31T08:46:30.855Z\"" + "}," + "\"state_uuid\":\"_state_uuid\"," + "\"shard\":{" + "\"state\":\"INITIALIZING\"," + "\"primary\":true," + "\"node\":\"_index_uuid\"," + "\"relocating_node\":\"_node_uuid\"," + "\"shard\":1," + "\"index\":\"_index\"" + "}" + "}", xContent.utf8ToString()). }
