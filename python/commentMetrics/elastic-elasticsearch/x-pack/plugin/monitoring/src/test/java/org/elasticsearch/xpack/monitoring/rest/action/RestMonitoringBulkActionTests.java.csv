commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testGetName() {     // Are you sure that you want to change the name?     assertThat(action.getName(), is("monitoring_bulk")). }
false;public;0;4;;public void testSupportsContentStream() {     // if you change this, it's a very breaking change for Monitoring     assertThat(action.supportsContentStream(), is(true)). }
false;public;0;6;;public void testMissingSystemId() {     final RestRequest restRequest = createRestRequest(null, TEMPLATE_VERSION, "10s").     final IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> prepareRequest(restRequest)).     assertThat(exception.getMessage(), containsString("no [system_id] for monitoring bulk request")). }
false;public;0;6;;public void testMissingSystemApiVersion() {     final RestRequest restRequest = createRestRequest(randomSystem().getSystem(), null, "10s").     final IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> prepareRequest(restRequest)).     assertThat(exception.getMessage(), containsString("no [system_api_version] for monitoring bulk request")). }
false;public;0;6;;public void testMissingInterval() {     final RestRequest restRequest = createRestRequest(randomSystem().getSystem(), TEMPLATE_VERSION, null).     final IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> prepareRequest(restRequest)).     assertThat(exception.getMessage(), containsString("no [interval] for monitoring bulk request")). }
false;public;0;6;;public void testWrongInterval() {     final RestRequest restRequest = createRestRequest(randomSystem().getSystem(), TEMPLATE_VERSION, "null").     final IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> prepareRequest(restRequest)).     assertThat(exception.getMessage(), containsString("failed to parse setting [interval] with value [null]")). }
false;public;0;6;;public void testMissingContent() {     final RestRequest restRequest = createRestRequest(0, randomSystem().getSystem(), TEMPLATE_VERSION, "30s").     final ElasticsearchParseException exception = expectThrows(ElasticsearchParseException.class, () -> prepareRequest(restRequest)).     assertThat(exception.getMessage(), containsString("no body content for monitoring bulk request")). }
false;public;0;8;;public void testUnsupportedSystemVersion() {     final String systemApiVersion = randomFrom(TEMPLATE_VERSION, MonitoringTemplateUtils.OLD_TEMPLATE_VERSION).     final RestRequest restRequest = createRestRequest(MonitoredSystem.UNKNOWN.getSystem(), systemApiVersion, "30s").     final IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> prepareRequest(restRequest)).     assertThat(exception.getMessage(), containsString("system_api_version [" + systemApiVersion + "] is not supported by system_id [unknown]")). }
false;public;0;8;;public void testUnknownSystemVersion() {     final MonitoredSystem system = randomSystem().     final RestRequest restRequest = createRestRequest(system.getSystem(), "0", "30s").     final IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> prepareRequest(restRequest)).     assertThat(exception.getMessage(), containsString("system_api_version [0] is not supported by system_id [" + system.getSystem() + "]")). }
false;public;0;11;;public void testNoErrors() throws Exception {     final MonitoringBulkResponse response = new MonitoringBulkResponse(randomLong(), false).     final FakeRestRequest request = createRestRequest(randomSystemId(), TEMPLATE_VERSION, "10s").     final RestResponse restResponse = getRestBuilderListener(request).buildResponse(response).     assertThat(restResponse.status(), is(RestStatus.OK)).     assertThat(restResponse.content().utf8ToString(), is("{\"took\":" + response.getTookInMillis() + ",\"ignored\":false,\"errors\":false}")).     // This test's JSON contains outdated references to types     assertWarnings(RestBulkAction.TYPES_DEPRECATION_MESSAGE). }
false;public;0;11;;public void testNoErrorsButIgnored() throws Exception {     final MonitoringBulkResponse response = new MonitoringBulkResponse(randomLong(), true).     final FakeRestRequest request = createRestRequest(randomSystemId(), TEMPLATE_VERSION, "10s").     final RestResponse restResponse = getRestBuilderListener(request).buildResponse(response).     assertThat(restResponse.status(), is(RestStatus.OK)).     assertThat(restResponse.content().utf8ToString(), is("{\"took\":" + response.getTookInMillis() + ",\"ignored\":true,\"errors\":false}")).     // This test's JSON contains outdated references to types     assertWarnings(RestBulkAction.TYPES_DEPRECATION_MESSAGE). }
false;public;0;20;;public void testWithErrors() throws Exception {     final RuntimeException e = new RuntimeException("TEST - expected").     final MonitoringBulkResponse.Error error = new MonitoringBulkResponse.Error(e).     final MonitoringBulkResponse response = new MonitoringBulkResponse(randomLong(), error).     final String errorJson.     final FakeRestRequest request = createRestRequest(randomSystemId(), TEMPLATE_VERSION, "10s").     final RestResponse restResponse = getRestBuilderListener(request).buildResponse(response).     try (XContentBuilder builder = XContentBuilder.builder(XContentType.JSON.xContent())) {         error.toXContent(builder, ToXContent.EMPTY_PARAMS).         errorJson = Strings.toString(builder).     }     assertThat(restResponse.status(), is(RestStatus.INTERNAL_SERVER_ERROR)).     assertThat(restResponse.content().utf8ToString(), is("{\"took\":" + response.getTookInMillis() + ",\"ignored\":false,\"errors\":true,\"error\":" + errorJson + "}")).     // This test's JSON contains outdated references to types     assertWarnings(RestBulkAction.TYPES_DEPRECATION_MESSAGE). }
true;private,static;0;3;/**  * Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API  */ ;/**  * Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API  */ private static MonitoredSystem randomSystem() {     return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS). }
true;private,static;0;3;/**  * Returns a {@link String} representing a {@link MonitoredSystem} supported by the Monitoring Bulk API  */ ;/**  * Returns a {@link String} representing a {@link MonitoredSystem} supported by the Monitoring Bulk API  */ private static String randomSystemId() {     return randomSystem().getSystem(). }
false;private;1;3;;private void prepareRequest(final RestRequest restRequest) throws Exception {     getRestBuilderListener(restRequest). }
false;public;1;5;;@SuppressWarnings("unchecked") @Override public void execute(ActionListener<MonitoringBulkResponse> listener) {     listenerReference.set((RestBuilderListener) listener). }
false;private;1;27;;private RestBuilderListener<MonitoringBulkResponse> getRestBuilderListener(final RestRequest restRequest) throws Exception {     final Client client = mock(Client.class).     final XPackClient xpackClient = mock(XPackClient.class).     final MonitoringClient monitoringClient = mock(MonitoringClient.class).     final AtomicReference<RestBuilderListener<MonitoringBulkResponse>> listenerReference = new AtomicReference<>().     final MonitoringBulkRequestBuilder builder = new MonitoringBulkRequestBuilder(client) {          @SuppressWarnings("unchecked")         @Override         public void execute(ActionListener<MonitoringBulkResponse> listener) {             listenerReference.set((RestBuilderListener) listener).         }     }.     when(monitoringClient.prepareMonitoringBulk()).thenReturn(builder).     when(xpackClient.monitoring()).thenReturn(monitoringClient).     final CheckedConsumer<RestChannel, Exception> consumer = action.doPrepareRequest(restRequest, xpackClient).     final RestChannel channel = mock(RestChannel.class).     when(channel.newBuilder()).thenReturn(JsonXContent.contentBuilder()).     // trigger/capture execution     consumer.accept(channel).     assertThat(listenerReference.get(), not(nullValue())).     return listenerReference.get(). }
false;private,static;3;3;;private static FakeRestRequest createRestRequest(final String systemId, final String systemApiVersion, final String interval) {     return createRestRequest(randomIntBetween(1, 10), systemId, systemApiVersion, interval). }
false;private,static;4;29;;private static FakeRestRequest createRestRequest(final int nbDocs, final String systemId, final String systemApiVersion, final String interval) {     final FakeRestRequest.Builder builder = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY).     if (nbDocs > 0) {         final StringBuilder requestBody = new StringBuilder().         for (int n = 0. n < nbDocs. n++) {             requestBody.append("{\"index\":{\"_type\":\"_doc\"}}\n").             requestBody.append("{\"field\":").append(n).append("}\n").         }         requestBody.append("\n").         builder.withContent(new BytesArray(requestBody.toString()), XContentType.JSON).     }     final Map<String, String> parameters = new HashMap<>().     if (systemId != null) {         parameters.put(RestMonitoringBulkAction.MONITORING_ID, systemId).     }     if (systemApiVersion != null) {         parameters.put(RestMonitoringBulkAction.MONITORING_VERSION, systemApiVersion).     }     if (interval != null) {         parameters.put(RestMonitoringBulkAction.INTERVAL, interval).     }     builder.withParams(parameters).     return builder.build(). }
