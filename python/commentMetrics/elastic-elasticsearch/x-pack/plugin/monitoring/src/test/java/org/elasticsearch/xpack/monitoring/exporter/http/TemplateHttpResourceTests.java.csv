commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void testTemplateToHttpEntity() throws IOException {     final byte[] templateValueBytes = templateValue.getBytes(ContentType.APPLICATION_JSON.getCharset()).     final HttpEntity entity = resource.templateToHttpEntity().     assertThat(entity.getContentType().getValue(), is(ContentType.APPLICATION_JSON.toString())).     final InputStream byteStream = entity.getContent().     assertThat(byteStream.available(), is(templateValueBytes.length)).     for (final byte templateByte : templateValueBytes) {         assertThat(templateByte, is((byte) byteStream.read())).     }     assertThat(byteStream.available(), is(0)). }
false;public;0;5;;public void testDoCheckExists() {     final HttpEntity entity = entityForResource(true, templateName, minimumVersion).     doCheckWithStatusCode(resource, "/_template", templateName, successfulCheckStatus(), true, entity). }
false;public;0;11;;public void testDoCheckDoesNotExist() {     if (randomBoolean()) {         // it does not exist because it's literally not there         assertCheckDoesNotExist(resource, "/_template", templateName).     } else {         // it does not exist because we need to replace it         final HttpEntity entity = entityForResource(false, templateName, minimumVersion).         doCheckWithStatusCode(resource, "/_template", templateName, successfulCheckStatus(), false, entity).     } }
false;public;0;11;;public void testDoCheckError() {     if (randomBoolean()) {         // error because of a server error         assertCheckWithException(resource, "/_template", templateName).     } else {         // error because of a malformed response         final HttpEntity entity = entityForResource(null, templateName, minimumVersion).         doCheckWithStatusCode(resource, "/_template", templateName, successfulCheckStatus(), null, entity).     } }
false;public;0;4;;public void testDoPublishTrue() {     Map<String, String> parameters = Collections.singletonMap(INCLUDE_TYPE_NAME_PARAMETER, "true").     assertPublishSucceeds(resource, "/_template", templateName, parameters, StringEntity.class). }
false;public;0;4;;public void testDoPublishFalseWithException() {     Map<String, String> parameters = Collections.singletonMap(INCLUDE_TYPE_NAME_PARAMETER, "true").     assertPublishWithException(resource, "/_template", templateName, parameters, StringEntity.class). }
false;public;0;3;;public void testParameters() {     assertVersionParameters(resource). }
