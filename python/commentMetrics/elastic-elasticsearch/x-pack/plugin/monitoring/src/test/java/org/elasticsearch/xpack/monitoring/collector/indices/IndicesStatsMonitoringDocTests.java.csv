commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override @Before public void setUp() throws Exception {     super.setUp().     indicesStats = Collections.singletonList(new IndexStats("index-0", "dcvO5uZATE-EhIKc3tk9Bg", new ShardStats[] { // Primaries     new ShardStats(mockShardRouting(true), mockShardPath(), mockCommonStats(), null, null, null), new ShardStats(mockShardRouting(true), mockShardPath(), mockCommonStats(), null, null, null), // Replica     new ShardStats(mockShardRouting(false), mockShardPath(), mockCommonStats(), null, null, null) })). }
false;protected;7;5;;@Override protected IndicesStatsMonitoringDoc createMonitoringDoc(String cluster, long timestamp, long interval, MonitoringDoc.Node node, MonitoredSystem system, String type, String id) {     return new IndicesStatsMonitoringDoc(cluster, timestamp, interval, node, indicesStats). }
false;protected;1;8;;@Override protected void assertFilteredMonitoringDoc(final IndicesStatsMonitoringDoc document) {     assertThat(document.getSystem(), is(MonitoredSystem.ES)).     assertThat(document.getType(), is(IndicesStatsMonitoringDoc.TYPE)).     assertThat(document.getId(), nullValue()).     assertThat(document.getIndicesStats(), is(indicesStats)). }
false;protected;0;4;;@Override protected Set<String> getExpectedXContentFilters() {     return IndicesStatsMonitoringDoc.XCONTENT_FILTERS. }
false;public;0;3;;public void testConstructorIndexStatsMustNotBeNull() {     expectThrows(NullPointerException.class, () -> new IndicesStatsMonitoringDoc(cluster, timestamp, interval, node, null)). }
false;public;0;62;;@Override public void testToXContent() throws IOException {     final MonitoringDoc.Node node = new MonitoringDoc.Node("_uuid", "_host", "_addr", "_ip", "_name", 1504169190855L).     final IndicesStatsMonitoringDoc document = new IndicesStatsMonitoringDoc("_cluster", 1502266739402L, 1506593717631L, node, indicesStats).     final BytesReference xContent = XContentHelper.toXContent(document, XContentType.JSON, false).     assertEquals("{" + "\"cluster_uuid\":\"_cluster\"," + "\"timestamp\":\"2017-08-09T08:18:59.402Z\"," + "\"interval_ms\":1506593717631," + "\"type\":\"indices_stats\"," + "\"source_node\":{" + "\"uuid\":\"_uuid\"," + "\"host\":\"_host\"," + "\"transport_address\":\"_addr\"," + "\"ip\":\"_ip\"," + "\"name\":\"_name\"," + "\"timestamp\":\"2017-08-31T08:46:30.855Z\"" + "}," + "\"indices_stats\":{" + "\"_all\":{" + "\"primaries\":{" + "\"docs\":{" + "\"count\":2" + "}," + "\"store\":{" + "\"size_in_bytes\":4" + "}," + "\"indexing\":{" + "\"index_total\":6," + "\"index_time_in_millis\":8," + "\"is_throttled\":true," + "\"throttle_time_in_millis\":10" + "}," + "\"search\":{" + "\"query_total\":12," + "\"query_time_in_millis\":14" + "}" + "}," + "\"total\":{" + "\"docs\":{" + "\"count\":3" + "}," + "\"store\":{" + "\"size_in_bytes\":6" + "}," + "\"indexing\":{" + "\"index_total\":9," + "\"index_time_in_millis\":12," + "\"is_throttled\":true," + "\"throttle_time_in_millis\":15" + "}," + "\"search\":{" + "\"query_total\":18," + "\"query_time_in_millis\":21" + "}" + "}" + "}" + "}" + "}", xContent.utf8ToString()). }
false;private;0;13;;private CommonStats mockCommonStats() {     final CommonStats commonStats = new CommonStats(CommonStatsFlags.ALL).     commonStats.getDocs().add(new DocsStats(1L, -1L, randomNonNegativeLong())).     commonStats.getStore().add(new StoreStats(2L)).     final IndexingStats.Stats indexingStats = new IndexingStats.Stats(3L, 4L, -1L, -1L, -1L, -1L, -1L, -1L, true, 5L).     commonStats.getIndexing().add(new IndexingStats(indexingStats, null)).     final SearchStats.Stats searchStats = new SearchStats.Stats(6L, 7L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L).     commonStats.getSearch().add(new SearchStats(searchStats, -1L, null)).     return commonStats. }
false;private;0;24;;private ShardPath mockShardPath() {     // Mock paths in a way that pass ShardPath constructor assertions     final int shardId = randomIntBetween(0, 10).     final Path getFileNameShardId = mock(Path.class).     when(getFileNameShardId.toString()).thenReturn(Integer.toString(shardId)).     final String shardUuid = randomAlphaOfLength(5).     final Path getFileNameShardUuid = mock(Path.class).     when(getFileNameShardUuid.toString()).thenReturn(shardUuid).     final Path getParent = mock(Path.class).     when(getParent.getFileName()).thenReturn(getFileNameShardUuid).     final Path path = mock(Path.class).     when(path.getParent()).thenReturn(getParent).     when(path.getFileName()).thenReturn(getFileNameShardId).     // Mock paths for ShardPath#getRootDataPath()     final Path getParentOfParent = mock(Path.class).     when(getParent.getParent()).thenReturn(getParentOfParent).     when(getParentOfParent.getParent()).thenReturn(mock(Path.class)).     return new ShardPath(false, path, path, new ShardId(randomAlphaOfLength(5), shardUuid, shardId)). }
false;private;1;3;;private ShardRouting mockShardRouting(final boolean primary) {     return TestShardRouting.newShardRouting(randomAlphaOfLength(5), randomInt(), randomAlphaOfLength(5), primary, INITIALIZING). }
