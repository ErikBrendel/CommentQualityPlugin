# id;timestamp;commentText;codeText;commentWords;codeWords
BaseMonitoringDocTestCase -> public final void testToXContentContainsCommonFields() throws IOException;1524684173;Test that {@link MonitoringDoc} rendered using {@link ToXContent#toXContent(XContentBuilder, ToXContent.Params)}_contain a common set of fields.;public final void testToXContentContainsCommonFields() throws IOException {_        final XContentType xContentType = randomFrom(XContentType.values())__        final T document = createMonitoringDoc(cluster, timestamp, interval, node, system, type, id)___        final BytesReference bytes = XContentHelper.toXContent(document, xContentType, false)__        try (XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, bytes.streamInput())) {_            final Map<String, ?> map = parser.map()___            assertThat(map.get("cluster_uuid"), equalTo(cluster))__            assertThat(map.get("timestamp"), equalTo(MonitoringDoc.toUTC(timestamp)))__            assertThat(map.get("interval_ms"), equalTo(document.getIntervalMillis()))__            assertThat(map.get("type"), equalTo(document.getType()))___            if (document.getType().equals(ShardMonitoringDoc.TYPE)) {_                assertThat(map.get("shard"), notNullValue())__            } else {_                assertThat(map.get(document.getType()), notNullValue())__            }__            @SuppressWarnings("unchecked")_            final Map<String, ?> sourceNode = (Map<String, ?>) map.get("source_node")__            if (node == null) {_                assertThat(sourceNode, nullValue())__            } else {_                assertThat(sourceNode.get("uuid"), equalTo(node.getUUID()))__                assertThat(sourceNode.get("transport_address"), equalTo(node.getTransportAddress()))__                assertThat(sourceNode.get("ip"), equalTo(node.getIp()))__                assertThat(sourceNode.get("host"), equalTo(node.getHost()))__                assertThat(sourceNode.get("name"), equalTo(node.getName()))__                assertThat(sourceNode.get("timestamp"), equalTo(MonitoringDoc.toUTC(node.getTimestamp())))__            }_        }_    };test,that,link,monitoring,doc,rendered,using,link,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,contain,a,common,set,of,fields;public,final,void,test,to,xcontent,contains,common,fields,throws,ioexception,final,xcontent,type,x,content,type,random,from,xcontent,type,values,final,t,document,create,monitoring,doc,cluster,timestamp,interval,node,system,type,id,final,bytes,reference,bytes,xcontent,helper,to,xcontent,document,x,content,type,false,try,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,bytes,stream,input,final,map,string,map,parser,map,assert,that,map,get,equal,to,cluster,assert,that,map,get,timestamp,equal,to,monitoring,doc,to,utc,timestamp,assert,that,map,get,equal,to,document,get,interval,millis,assert,that,map,get,type,equal,to,document,get,type,if,document,get,type,equals,shard,monitoring,doc,type,assert,that,map,get,shard,not,null,value,else,assert,that,map,get,document,get,type,not,null,value,suppress,warnings,unchecked,final,map,string,source,node,map,string,map,get,if,node,null,assert,that,source,node,null,value,else,assert,that,source,node,get,uuid,equal,to,node,get,uuid,assert,that,source,node,get,equal,to,node,get,transport,address,assert,that,source,node,get,ip,equal,to,node,get,ip,assert,that,source,node,get,host,equal,to,node,get,host,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,source,node,get,timestamp,equal,to,monitoring,doc,to,utc,node,get,timestamp
BaseMonitoringDocTestCase -> public final void testToXContentContainsCommonFields() throws IOException;1535139672;Test that {@link MonitoringDoc} rendered using {@link ToXContent#toXContent(XContentBuilder, ToXContent.Params)}_contain a common set of fields.;public final void testToXContentContainsCommonFields() throws IOException {_        final XContentType xContentType = randomFrom(XContentType.values())__        final T document = createMonitoringDoc(cluster, timestamp, interval, node, system, type, id)___        final BytesReference bytes = XContentHelper.toXContent(document, xContentType, false)__        try (XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, bytes.streamInput())) {_            final Map<String, ?> map = parser.map()___            assertThat(map.get("cluster_uuid"), equalTo(cluster))__            assertThat(map.get("timestamp"), equalTo(MonitoringDoc.toUTC(timestamp)))__            assertThat(map.get("interval_ms"), equalTo(document.getIntervalMillis()))__            assertThat(map.get("type"), equalTo(document.getType()))___            if (document.getType().equals(ShardMonitoringDoc.TYPE)) {_                assertThat(map.get("shard"), notNullValue())__            } else {_                assertThat(map.get(document.getType()), notNullValue())__            }__            @SuppressWarnings("unchecked")_            final Map<String, ?> sourceNode = (Map<String, ?>) map.get("source_node")__            if (node == null) {_                assertThat(sourceNode, nullValue())__            } else {_                assertThat(sourceNode.get("uuid"), equalTo(node.getUUID()))__                assertThat(sourceNode.get("transport_address"), equalTo(node.getTransportAddress()))__                assertThat(sourceNode.get("ip"), equalTo(node.getIp()))__                assertThat(sourceNode.get("host"), equalTo(node.getHost()))__                assertThat(sourceNode.get("name"), equalTo(node.getName()))__                assertThat(sourceNode.get("timestamp"), equalTo(MonitoringDoc.toUTC(node.getTimestamp())))__            }_        }_    };test,that,link,monitoring,doc,rendered,using,link,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,contain,a,common,set,of,fields;public,final,void,test,to,xcontent,contains,common,fields,throws,ioexception,final,xcontent,type,x,content,type,random,from,xcontent,type,values,final,t,document,create,monitoring,doc,cluster,timestamp,interval,node,system,type,id,final,bytes,reference,bytes,xcontent,helper,to,xcontent,document,x,content,type,false,try,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,bytes,stream,input,final,map,string,map,parser,map,assert,that,map,get,equal,to,cluster,assert,that,map,get,timestamp,equal,to,monitoring,doc,to,utc,timestamp,assert,that,map,get,equal,to,document,get,interval,millis,assert,that,map,get,type,equal,to,document,get,type,if,document,get,type,equals,shard,monitoring,doc,type,assert,that,map,get,shard,not,null,value,else,assert,that,map,get,document,get,type,not,null,value,suppress,warnings,unchecked,final,map,string,source,node,map,string,map,get,if,node,null,assert,that,source,node,null,value,else,assert,that,source,node,get,uuid,equal,to,node,get,uuid,assert,that,source,node,get,equal,to,node,get,transport,address,assert,that,source,node,get,ip,equal,to,node,get,ip,assert,that,source,node,get,host,equal,to,node,get,host,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,source,node,get,timestamp,equal,to,monitoring,doc,to,utc,node,get,timestamp
BaseMonitoringDocTestCase -> public final void testToXContentContainsCommonFields() throws IOException;1549288028;Test that {@link MonitoringDoc} rendered using {@link ToXContent#toXContent(XContentBuilder, ToXContent.Params)}_contain a common set of fields.;public final void testToXContentContainsCommonFields() throws IOException {_        final XContentType xContentType = randomFrom(XContentType.values())__        final T document = createMonitoringDoc(cluster, timestamp, interval, node, system, type, id)___        final BytesReference bytes = XContentHelper.toXContent(document, xContentType, false)__        try (XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, bytes.streamInput())) {_            final Map<String, ?> map = parser.map()___            assertThat(map.get("cluster_uuid"), equalTo(cluster))__            assertThat(map.get("timestamp"), equalTo(MonitoringDoc.toUTC(timestamp)))__            assertThat(map.get("interval_ms"), equalTo(document.getIntervalMillis()))__            assertThat(map.get("type"), equalTo(document.getType()))___            if (document.getType().equals(ShardMonitoringDoc.TYPE)) {_                assertThat(map.get("shard"), notNullValue())__            } else {_                assertThat(map.get(document.getType()), notNullValue())__            }__            @SuppressWarnings("unchecked")_            final Map<String, ?> sourceNode = (Map<String, ?>) map.get("source_node")__            if (node == null) {_                assertThat(sourceNode, nullValue())__            } else {_                assertThat(sourceNode.get("uuid"), equalTo(node.getUUID()))__                assertThat(sourceNode.get("transport_address"), equalTo(node.getTransportAddress()))__                assertThat(sourceNode.get("ip"), equalTo(node.getIp()))__                assertThat(sourceNode.get("host"), equalTo(node.getHost()))__                assertThat(sourceNode.get("name"), equalTo(node.getName()))__                assertThat(sourceNode.get("timestamp"), equalTo(MonitoringDoc.toUTC(node.getTimestamp())))__            }_        }_    };test,that,link,monitoring,doc,rendered,using,link,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,contain,a,common,set,of,fields;public,final,void,test,to,xcontent,contains,common,fields,throws,ioexception,final,xcontent,type,x,content,type,random,from,xcontent,type,values,final,t,document,create,monitoring,doc,cluster,timestamp,interval,node,system,type,id,final,bytes,reference,bytes,xcontent,helper,to,xcontent,document,x,content,type,false,try,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,bytes,stream,input,final,map,string,map,parser,map,assert,that,map,get,equal,to,cluster,assert,that,map,get,timestamp,equal,to,monitoring,doc,to,utc,timestamp,assert,that,map,get,equal,to,document,get,interval,millis,assert,that,map,get,type,equal,to,document,get,type,if,document,get,type,equals,shard,monitoring,doc,type,assert,that,map,get,shard,not,null,value,else,assert,that,map,get,document,get,type,not,null,value,suppress,warnings,unchecked,final,map,string,source,node,map,string,map,get,if,node,null,assert,that,source,node,null,value,else,assert,that,source,node,get,uuid,equal,to,node,get,uuid,assert,that,source,node,get,equal,to,node,get,transport,address,assert,that,source,node,get,ip,equal,to,node,get,ip,assert,that,source,node,get,host,equal,to,node,get,host,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,source,node,get,timestamp,equal,to,monitoring,doc,to,utc,node,get,timestamp
BaseMonitoringDocTestCase -> public final void testToXContentContainsCommonFields() throws IOException;1549871643;Test that {@link MonitoringDoc} rendered using {@link ToXContent#toXContent(XContentBuilder, ToXContent.Params)}_contain a common set of fields.;public final void testToXContentContainsCommonFields() throws IOException {_        final XContentType xContentType = randomFrom(XContentType.values())__        final T document = createMonitoringDoc(cluster, timestamp, interval, node, system, type, id)___        final BytesReference bytes = XContentHelper.toXContent(document, xContentType, false)__        try (XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, bytes.streamInput())) {_            final Map<String, ?> map = parser.map()___            assertThat(map.get("cluster_uuid"), equalTo(cluster))__            assertThat(map.get("timestamp"), equalTo(MonitoringDoc.toUTC(timestamp)))__            assertThat(map.get("interval_ms"), equalTo(document.getIntervalMillis()))__            assertThat(map.get("type"), equalTo(document.getType()))___            if (document.getType().equals(ShardMonitoringDoc.TYPE)) {_                assertThat(map.get("shard"), notNullValue())__            } else {_                assertThat(map.get(document.getType()), notNullValue())__            }__            @SuppressWarnings("unchecked")_            final Map<String, ?> sourceNode = (Map<String, ?>) map.get("source_node")__            if (node == null) {_                assertThat(sourceNode, nullValue())__            } else {_                assertThat(sourceNode.get("uuid"), equalTo(node.getUUID()))__                assertThat(sourceNode.get("transport_address"), equalTo(node.getTransportAddress()))__                assertThat(sourceNode.get("ip"), equalTo(node.getIp()))__                assertThat(sourceNode.get("host"), equalTo(node.getHost()))__                assertThat(sourceNode.get("name"), equalTo(node.getName()))__                assertThat(sourceNode.get("timestamp"), equalTo(MonitoringDoc.toUTC(node.getTimestamp())))__            }_        }_    };test,that,link,monitoring,doc,rendered,using,link,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,contain,a,common,set,of,fields;public,final,void,test,to,xcontent,contains,common,fields,throws,ioexception,final,xcontent,type,x,content,type,random,from,xcontent,type,values,final,t,document,create,monitoring,doc,cluster,timestamp,interval,node,system,type,id,final,bytes,reference,bytes,xcontent,helper,to,xcontent,document,x,content,type,false,try,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,bytes,stream,input,final,map,string,map,parser,map,assert,that,map,get,equal,to,cluster,assert,that,map,get,timestamp,equal,to,monitoring,doc,to,utc,timestamp,assert,that,map,get,equal,to,document,get,interval,millis,assert,that,map,get,type,equal,to,document,get,type,if,document,get,type,equals,shard,monitoring,doc,type,assert,that,map,get,shard,not,null,value,else,assert,that,map,get,document,get,type,not,null,value,suppress,warnings,unchecked,final,map,string,source,node,map,string,map,get,if,node,null,assert,that,source,node,null,value,else,assert,that,source,node,get,uuid,equal,to,node,get,uuid,assert,that,source,node,get,equal,to,node,get,transport,address,assert,that,source,node,get,ip,equal,to,node,get,ip,assert,that,source,node,get,host,equal,to,node,get,host,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,source,node,get,timestamp,equal,to,monitoring,doc,to,utc,node,get,timestamp
BaseMonitoringDocTestCase -> protected abstract void assertMonitoringDoc(T document)_;1524684173;Asserts that the specific fields of a {@link MonitoringDoc} have_the expected values.;protected abstract void assertMonitoringDoc(T document)_;asserts,that,the,specific,fields,of,a,link,monitoring,doc,have,the,expected,values;protected,abstract,void,assert,monitoring,doc,t,document
BaseMonitoringDocTestCase -> protected abstract void assertMonitoringDoc(T document)_;1535139672;Asserts that the specific fields of a {@link MonitoringDoc} have_the expected values.;protected abstract void assertMonitoringDoc(T document)_;asserts,that,the,specific,fields,of,a,link,monitoring,doc,have,the,expected,values;protected,abstract,void,assert,monitoring,doc,t,document
BaseMonitoringDocTestCase -> protected abstract void assertMonitoringDoc(T document)_;1549288028;Asserts that the specific fields of a {@link MonitoringDoc} have_the expected values.;protected abstract void assertMonitoringDoc(T document)_;asserts,that,the,specific,fields,of,a,link,monitoring,doc,have,the,expected,values;protected,abstract,void,assert,monitoring,doc,t,document
BaseMonitoringDocTestCase -> protected abstract void assertMonitoringDoc(T document)_;1549871643;Asserts that the specific fields of a {@link MonitoringDoc} have_the expected values.;protected abstract void assertMonitoringDoc(T document)_;asserts,that,the,specific,fields,of,a,link,monitoring,doc,have,the,expected,values;protected,abstract,void,assert,monitoring,doc,t,document
BaseMonitoringDocTestCase -> protected abstract T createMonitoringDoc(String cluster,                                              long timestamp,                                              long interval,                                              @Nullable MonitoringDoc.Node node,                                              MonitoredSystem system,                                              String type,                                              @Nullable String id)_;1524684173;Creates the {@link MonitoringDoc} to test. Returned value must be deterministic,_ie multiple calls with the same parameters within the same test must return_identical objects.;protected abstract T createMonitoringDoc(String cluster,_                                             long timestamp,_                                             long interval,_                                             @Nullable MonitoringDoc.Node node,_                                             MonitoredSystem system,_                                             String type,_                                             @Nullable String id)_;creates,the,link,monitoring,doc,to,test,returned,value,must,be,deterministic,ie,multiple,calls,with,the,same,parameters,within,the,same,test,must,return,identical,objects;protected,abstract,t,create,monitoring,doc,string,cluster,long,timestamp,long,interval,nullable,monitoring,doc,node,node,monitored,system,system,string,type,nullable,string,id
BaseMonitoringDocTestCase -> protected abstract T createMonitoringDoc(String cluster,                                              long timestamp,                                              long interval,                                              @Nullable MonitoringDoc.Node node,                                              MonitoredSystem system,                                              String type,                                              @Nullable String id)_;1535139672;Creates the {@link MonitoringDoc} to test. Returned value must be deterministic,_ie multiple calls with the same parameters within the same test must return_identical objects.;protected abstract T createMonitoringDoc(String cluster,_                                             long timestamp,_                                             long interval,_                                             @Nullable MonitoringDoc.Node node,_                                             MonitoredSystem system,_                                             String type,_                                             @Nullable String id)_;creates,the,link,monitoring,doc,to,test,returned,value,must,be,deterministic,ie,multiple,calls,with,the,same,parameters,within,the,same,test,must,return,identical,objects;protected,abstract,t,create,monitoring,doc,string,cluster,long,timestamp,long,interval,nullable,monitoring,doc,node,node,monitored,system,system,string,type,nullable,string,id
BaseMonitoringDocTestCase -> protected abstract T createMonitoringDoc(String cluster,                                              long timestamp,                                              long interval,                                              @Nullable MonitoringDoc.Node node,                                              MonitoredSystem system,                                              String type,                                              @Nullable String id)_;1549288028;Creates the {@link MonitoringDoc} to test. Returned value must be deterministic,_ie multiple calls with the same parameters within the same test must return_identical objects.;protected abstract T createMonitoringDoc(String cluster,_                                             long timestamp,_                                             long interval,_                                             @Nullable MonitoringDoc.Node node,_                                             MonitoredSystem system,_                                             String type,_                                             @Nullable String id)_;creates,the,link,monitoring,doc,to,test,returned,value,must,be,deterministic,ie,multiple,calls,with,the,same,parameters,within,the,same,test,must,return,identical,objects;protected,abstract,t,create,monitoring,doc,string,cluster,long,timestamp,long,interval,nullable,monitoring,doc,node,node,monitored,system,system,string,type,nullable,string,id
BaseMonitoringDocTestCase -> protected abstract T createMonitoringDoc(String cluster,                                              long timestamp,                                              long interval,                                              @Nullable MonitoringDoc.Node node,                                              MonitoredSystem system,                                              String type,                                              @Nullable String id)_;1549871643;Creates the {@link MonitoringDoc} to test. Returned value must be deterministic,_ie multiple calls with the same parameters within the same test must return_identical objects.;protected abstract T createMonitoringDoc(String cluster,_                                             long timestamp,_                                             long interval,_                                             @Nullable MonitoringDoc.Node node,_                                             MonitoredSystem system,_                                             String type,_                                             @Nullable String id)_;creates,the,link,monitoring,doc,to,test,returned,value,must,be,deterministic,ie,multiple,calls,with,the,same,parameters,within,the,same,test,must,return,identical,objects;protected,abstract,t,create,monitoring,doc,string,cluster,long,timestamp,long,interval,nullable,monitoring,doc,node,node,monitored,system,system,string,type,nullable,string,id
BaseMonitoringDocTestCase -> private void assertMonitoringDocEquals(T expected, T actual) throws IOException;1524684173;Assert that two {@link MonitoringDoc} are equal. By default, it_uses {@link MonitoringDoc#equals(Object)} and {@link MonitoringDoc#hashCode()} methods_and also checks XContent equality.;private void assertMonitoringDocEquals(T expected, T actual) throws IOException {_        assertEquals(expected, actual)__        assertEquals(expected.hashCode(), actual.hashCode())___        final boolean human = randomBoolean()__        final XContentType xContentType = randomFrom(XContentType.values())__        assertToXContentEquivalent(toXContent(expected, xContentType, human), toXContent(actual, xContentType, human), xContentType)__    };assert,that,two,link,monitoring,doc,are,equal,by,default,it,uses,link,monitoring,doc,equals,object,and,link,monitoring,doc,hash,code,methods,and,also,checks,xcontent,equality;private,void,assert,monitoring,doc,equals,t,expected,t,actual,throws,ioexception,assert,equals,expected,actual,assert,equals,expected,hash,code,actual,hash,code,final,boolean,human,random,boolean,final,xcontent,type,x,content,type,random,from,xcontent,type,values,assert,to,xcontent,equivalent,to,xcontent,expected,x,content,type,human,to,xcontent,actual,x,content,type,human,x,content,type
BaseMonitoringDocTestCase -> private void assertMonitoringDocEquals(T expected, T actual) throws IOException;1535139672;Assert that two {@link MonitoringDoc} are equal. By default, it_uses {@link MonitoringDoc#equals(Object)} and {@link MonitoringDoc#hashCode()} methods_and also checks XContent equality.;private void assertMonitoringDocEquals(T expected, T actual) throws IOException {_        assertEquals(expected, actual)__        assertEquals(expected.hashCode(), actual.hashCode())___        final boolean human = randomBoolean()__        final XContentType xContentType = randomFrom(XContentType.values())__        assertToXContentEquivalent(toXContent(expected, xContentType, human), toXContent(actual, xContentType, human), xContentType)__    };assert,that,two,link,monitoring,doc,are,equal,by,default,it,uses,link,monitoring,doc,equals,object,and,link,monitoring,doc,hash,code,methods,and,also,checks,xcontent,equality;private,void,assert,monitoring,doc,equals,t,expected,t,actual,throws,ioexception,assert,equals,expected,actual,assert,equals,expected,hash,code,actual,hash,code,final,boolean,human,random,boolean,final,xcontent,type,x,content,type,random,from,xcontent,type,values,assert,to,xcontent,equivalent,to,xcontent,expected,x,content,type,human,to,xcontent,actual,x,content,type,human,x,content,type
BaseMonitoringDocTestCase -> private void assertMonitoringDocEquals(T expected, T actual) throws IOException;1549288028;Assert that two {@link MonitoringDoc} are equal. By default, it_uses {@link MonitoringDoc#equals(Object)} and {@link MonitoringDoc#hashCode()} methods_and also checks XContent equality.;private void assertMonitoringDocEquals(T expected, T actual) throws IOException {_        assertEquals(expected, actual)__        assertEquals(expected.hashCode(), actual.hashCode())___        final boolean human = randomBoolean()__        final XContentType xContentType = randomFrom(XContentType.values())__        assertToXContentEquivalent(toXContent(expected, xContentType, human), toXContent(actual, xContentType, human), xContentType)__    };assert,that,two,link,monitoring,doc,are,equal,by,default,it,uses,link,monitoring,doc,equals,object,and,link,monitoring,doc,hash,code,methods,and,also,checks,xcontent,equality;private,void,assert,monitoring,doc,equals,t,expected,t,actual,throws,ioexception,assert,equals,expected,actual,assert,equals,expected,hash,code,actual,hash,code,final,boolean,human,random,boolean,final,xcontent,type,x,content,type,random,from,xcontent,type,values,assert,to,xcontent,equivalent,to,xcontent,expected,x,content,type,human,to,xcontent,actual,x,content,type,human,x,content,type
BaseMonitoringDocTestCase -> private void assertMonitoringDocEquals(T expected, T actual) throws IOException;1549871643;Assert that two {@link MonitoringDoc} are equal. By default, it_uses {@link MonitoringDoc#equals(Object)} and {@link MonitoringDoc#hashCode()} methods_and also checks XContent equality.;private void assertMonitoringDocEquals(T expected, T actual) throws IOException {_        assertEquals(expected, actual)__        assertEquals(expected.hashCode(), actual.hashCode())___        final boolean human = randomBoolean()__        final XContentType xContentType = randomFrom(XContentType.values())__        assertToXContentEquivalent(toXContent(expected, xContentType, human), toXContent(actual, xContentType, human), xContentType)__    };assert,that,two,link,monitoring,doc,are,equal,by,default,it,uses,link,monitoring,doc,equals,object,and,link,monitoring,doc,hash,code,methods,and,also,checks,xcontent,equality;private,void,assert,monitoring,doc,equals,t,expected,t,actual,throws,ioexception,assert,equals,expected,actual,assert,equals,expected,hash,code,actual,hash,code,final,boolean,human,random,boolean,final,xcontent,type,x,content,type,random,from,xcontent,type,values,assert,to,xcontent,equivalent,to,xcontent,expected,x,content,type,human,to,xcontent,actual,x,content,type,human,x,content,type
