commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;12;/**  * Generates a random {@link MonitoringDoc.Node}  */ ;/**  * Generates a random {@link MonitoringDoc.Node}  */ public static MonitoringDoc.Node randomMonitoringNode(final Random random) {     final String id = RandomStrings.randomAsciiLettersOfLength(random, 5).     final String name = RandomStrings.randomAsciiLettersOfLengthBetween(random, 3, 10).     final TransportAddress fakeTransportAddress = buildNewFakeTransportAddress().     final String host = fakeTransportAddress.address().getHostString().     final String transportAddress = fakeTransportAddress.toString().     final String ip = fakeTransportAddress.getAddress().     final long timestamp = RandomNumbers.randomLongBetween(random, 0, MAX_MILLIS_BEFORE_10000).     return new MonitoringDoc.Node(id, host, transportAddress, ip, name, timestamp). }
true;public,static;1;3;/**  * Generates a random {@link MonitoringDoc}  */ ;/**  * Generates a random {@link MonitoringDoc}  */ public static MonitoringBulkDoc randomMonitoringBulkDoc(Random random) throws IOException {     return randomMonitoringBulkDoc(random, RandomPicks.randomFrom(random, XContentType.values())). }
true;public,static;2;4;/**  * Generates a random {@link MonitoringDoc} with a given {@link XContentType}  */ ;/**  * Generates a random {@link MonitoringDoc} with a given {@link XContentType}  */ public static MonitoringBulkDoc randomMonitoringBulkDoc(final Random random, final XContentType xContentType) throws IOException {     return randomMonitoringBulkDoc(random, xContentType, RandomObjects.randomSource(random, xContentType)). }
true;public,static;3;5;/**  * Generates a random {@link MonitoringDoc} with a given {@link XContentType} and {@link BytesReference} source  */ ;/**  * Generates a random {@link MonitoringDoc} with a given {@link XContentType} and {@link BytesReference} source  */ public static MonitoringBulkDoc randomMonitoringBulkDoc(final Random random, final XContentType xContentType, final BytesReference source) throws IOException {     return randomMonitoringBulkDoc(random, xContentType, source, RandomPicks.randomFrom(random, MonitoredSystem.values())). }
true;public,static;4;7;/**  * Generates a random {@link MonitoringDoc} with a given {@link XContentType}, {@link BytesReference} source and {@link MonitoredSystem}  */ ;/**  * Generates a random {@link MonitoringDoc} with a given {@link XContentType}, {@link BytesReference} source and {@link MonitoredSystem}  */ public static MonitoringBulkDoc randomMonitoringBulkDoc(final Random random, final XContentType xContentType, final BytesReference source, final MonitoredSystem system) throws IOException {     final String type = RandomPicks.randomFrom(random, new String[] { "type1", "type2", "type3" }).     return randomMonitoringBulkDoc(random, xContentType, source, system, type). }
true;public,static;5;10;/**  * Generates a random {@link MonitoringDoc} with a given {@link XContentType}, {@link BytesReference} source,  * {@link MonitoredSystem} and type.  */ ;/**  * Generates a random {@link MonitoringDoc} with a given {@link XContentType}, {@link BytesReference} source,  * {@link MonitoredSystem} and type.  */ public static MonitoringBulkDoc randomMonitoringBulkDoc(final Random random, final XContentType xContentType, final BytesReference source, final MonitoredSystem system, final String type) throws IOException {     final String id = random.nextBoolean() ? RandomStrings.randomAsciiLettersOfLength(random, 5) : null.     final long timestamp = RandomNumbers.randomLongBetween(random, 0L, MAX_MILLIS_BEFORE_10000).     final long interval = RandomNumbers.randomLongBetween(random, 0L, Long.MAX_VALUE).     return new MonitoringBulkDoc(system, type, id, timestamp, interval, source, xContentType). }
