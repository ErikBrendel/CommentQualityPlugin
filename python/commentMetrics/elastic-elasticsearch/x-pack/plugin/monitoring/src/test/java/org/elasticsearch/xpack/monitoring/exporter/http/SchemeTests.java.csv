commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testToString() {     for (final Scheme scheme : Scheme.values()) {         assertThat(scheme.toString(), equalTo(scheme.name().toLowerCase(Locale.ROOT))).     } }
false;public;0;6;;public void testFromString() {     for (final Scheme scheme : Scheme.values()) {         assertThat(Scheme.fromString(scheme.name()), sameInstance(scheme)).         assertThat(Scheme.fromString(scheme.name().toLowerCase(Locale.ROOT)), sameInstance(scheme)).     } }
false;public;0;9;;public void testFromStringMalformed() {     assertIllegalScheme("htp").     assertIllegalScheme("htttp").     assertIllegalScheme("httpd").     assertIllegalScheme("ftp").     assertIllegalScheme("ws").     assertIllegalScheme("wss").     assertIllegalScheme("gopher"). }
false;private;1;8;;private void assertIllegalScheme(final String scheme) {     try {         Scheme.fromString(scheme).         fail("scheme should be unknown: [" + scheme + "]").     } catch (final IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("[" + scheme + "]")).     } }
