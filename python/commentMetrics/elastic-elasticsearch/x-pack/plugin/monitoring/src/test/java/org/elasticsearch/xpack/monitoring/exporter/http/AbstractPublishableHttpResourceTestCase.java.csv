# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractPublishableHttpResourceTestCase -> protected void assertCheckWithException(final PublishableHttpResource resource,                                             final Map<String, String> expectedParameters,                                             final String resourceBasePath, final String resourceName);1543346894;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} that throws an_exception and assert that it returns {@code onFailure}.__@param resource The resource to execute._@param expectedParameters The test-supplied parameters for the {@code Request}._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckWithException(final PublishableHttpResource resource,_                                            final Map<String, String> expectedParameters,_                                            final String resourceBasePath, final String resourceName) {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("GET", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        final Request request = new Request("GET", endpoint)__        addParameters(request, expectedParameters)__        whenPerformRequestAsyncWith(client, request, e)___        resource.doCheck(client, listener)___        verifyListener(null)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,on,failure,param,resource,the,resource,to,execute,param,expected,parameters,the,test,supplied,parameters,for,the,code,request,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,with,exception,final,publishable,http,resource,resource,final,map,string,string,expected,parameters,final,string,resource,base,path,final,string,resource,name,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,get,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,final,request,request,new,request,get,endpoint,add,parameters,request,expected,parameters,when,perform,request,async,with,client,request,e,resource,do,check,client,listener,verify,listener,null
AbstractPublishableHttpResourceTestCase -> protected void assertCheckWithException(final PublishableHttpResource resource,                                             final Map<String, String> expectedParameters,                                             final String resourceBasePath, final String resourceName);1547500081;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} that throws an_exception and assert that it returns {@code onFailure}.__@param resource The resource to execute._@param expectedParameters The test-supplied parameters for the {@code Request}._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckWithException(final PublishableHttpResource resource,_                                            final Map<String, String> expectedParameters,_                                            final String resourceBasePath, final String resourceName) {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("GET", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        final Request request = new Request("GET", endpoint)__        addParameters(request, expectedParameters)__        whenPerformRequestAsyncWith(client, request, e)___        resource.doCheck(client, listener)___        verifyListener(null)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,on,failure,param,resource,the,resource,to,execute,param,expected,parameters,the,test,supplied,parameters,for,the,code,request,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,with,exception,final,publishable,http,resource,resource,final,map,string,string,expected,parameters,final,string,resource,base,path,final,string,resource,name,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,get,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,final,request,request,new,request,get,endpoint,add,parameters,request,expected,parameters,when,perform,request,async,with,client,request,e,resource,do,check,client,listener,verify,listener,null
AbstractPublishableHttpResourceTestCase -> protected void assertCheckWithException(final PublishableHttpResource resource,                                             final Map<String, String> expectedParameters,                                             final String resourceBasePath, final String resourceName);1550177579;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} that throws an_exception and assert that it returns {@code onFailure}.__@param resource The resource to execute._@param expectedParameters The test-supplied parameters for the {@code Request}._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckWithException(final PublishableHttpResource resource,_                                            final Map<String, String> expectedParameters,_                                            final String resourceBasePath, final String resourceName) {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("GET", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        final Request request = new Request("GET", endpoint)__        addParameters(request, expectedParameters)__        whenPerformRequestAsyncWith(client, request, e)___        resource.doCheck(client, listener)___        verifyListener(null)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,on,failure,param,resource,the,resource,to,execute,param,expected,parameters,the,test,supplied,parameters,for,the,code,request,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,with,exception,final,publishable,http,resource,resource,final,map,string,string,expected,parameters,final,string,resource,base,path,final,string,resource,name,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,get,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,final,request,request,new,request,get,endpoint,add,parameters,request,expected,parameters,when,perform,request,async,with,client,request,e,resource,do,check,client,listener,verify,listener,null
AbstractPublishableHttpResourceTestCase -> protected void assertCheckExists(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)             throws IOException;1524684173;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} and assert that it returns_{@code EXISTS} given a {@link RestStatus} that is {@link RestStatus#OK}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckExists(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)_            throws IOException {_        doCheckWithStatusCode(resource, resourceBasePath, resourceName, successfulCheckStatus(), CheckResponse.EXISTS)__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,and,assert,that,it,returns,code,exists,given,a,link,rest,status,that,is,link,rest,status,ok,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,exists,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,do,check,with,status,code,resource,resource,base,path,resource,name,successful,check,status,check,response,exists
AbstractPublishableHttpResourceTestCase -> protected void assertCheckExists(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)             throws IOException;1528762805;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} and assert that it returns_{@code EXISTS} given a {@link RestStatus} that is {@link RestStatus#OK}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckExists(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)_            throws IOException {_        doCheckWithStatusCode(resource, resourceBasePath, resourceName, successfulCheckStatus(), CheckResponse.EXISTS)__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,and,assert,that,it,returns,code,exists,given,a,link,rest,status,that,is,link,rest,status,ok,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,exists,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,do,check,with,status,code,resource,resource,base,path,resource,name,successful,check,status,check,response,exists
AbstractPublishableHttpResourceTestCase -> protected void assertCheckExists(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)             throws IOException;1532434432;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} and assert that it returns_{@code EXISTS} given a {@link RestStatus} that is {@link RestStatus#OK}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckExists(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)_            throws IOException {_        doCheckWithStatusCode(resource, resourceBasePath, resourceName, successfulCheckStatus(), CheckResponse.EXISTS)__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,and,assert,that,it,returns,code,exists,given,a,link,rest,status,that,is,link,rest,status,ok,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,exists,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,do,check,with,status,code,resource,resource,base,path,resource,name,successful,check,status,check,response,exists
AbstractPublishableHttpResourceTestCase -> protected void assertPublishWithException(final PublishableHttpResource resource,                                               final String resourceBasePath, final String resourceName,                                               final Class<? extends HttpEntity> bodyType)             throws IOException;1524684173;Perform {@link PublishableHttpResource#doPublish(RestClient) doPublish} against the {@code resource} that throws an exception and_assert that it returns {@code false}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertPublishWithException(final PublishableHttpResource resource,_                                              final String resourceBasePath, final String resourceName,_                                              final Class<? extends HttpEntity> bodyType)_            throws IOException {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"))___        when(client.performRequest(eq("PUT"), eq(endpoint), eq(resource.getParameters()), any(bodyType))).thenThrow(e)___        assertThat(resource.doPublish(client), is(false))__    };perform,link,publishable,http,resource,do,publish,rest,client,do,publish,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,false,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,publish,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,throws,ioexception,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,when,client,perform,request,eq,put,eq,endpoint,eq,resource,get,parameters,any,body,type,then,throw,e,assert,that,resource,do,publish,client,is,false
AbstractPublishableHttpResourceTestCase -> protected void assertPublishWithException(final PublishableHttpResource resource,                                               final String resourceBasePath, final String resourceName,                                               final Class<? extends HttpEntity> bodyType)             throws IOException;1528762805;Perform {@link PublishableHttpResource#doPublish(RestClient) doPublish} against the {@code resource} that throws an exception and_assert that it returns {@code false}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertPublishWithException(final PublishableHttpResource resource,_                                              final String resourceBasePath, final String resourceName,_                                              final Class<? extends HttpEntity> bodyType)_            throws IOException {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"))___        when(client.performRequest(eq("PUT"), eq(endpoint), eq(resource.getParameters()), any(bodyType))).thenThrow(e)___        assertThat(resource.doPublish(client), is(false))__    };perform,link,publishable,http,resource,do,publish,rest,client,do,publish,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,false,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,publish,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,throws,ioexception,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,when,client,perform,request,eq,put,eq,endpoint,eq,resource,get,parameters,any,body,type,then,throw,e,assert,that,resource,do,publish,client,is,false
AbstractPublishableHttpResourceTestCase -> protected void assertPublishWithException(final PublishableHttpResource resource,                                               final String resourceBasePath, final String resourceName,                                               final Class<? extends HttpEntity> bodyType)             throws IOException;1532434432;Perform {@link PublishableHttpResource#doPublish(RestClient) doPublish} against the {@code resource} that throws an exception and_assert that it returns {@code false}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertPublishWithException(final PublishableHttpResource resource,_                                              final String resourceBasePath, final String resourceName,_                                              final Class<? extends HttpEntity> bodyType)_            throws IOException {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"))___        when(client.performRequest(Mockito.any(Request.class))).thenThrow(e)___        assertThat(resource.doPublish(client), is(false))__        ArgumentCaptor<Request> request = ArgumentCaptor.forClass(Request.class)__        verify(client).performRequest(request.capture())__        assertThat(request.getValue().getMethod(), is("PUT"))__        assertThat(request.getValue().getEndpoint(), is(endpoint))__        assertThat(request.getValue().getParameters(), is(resource.getParameters()))__        assertThat(request.getValue().getEntity(), instanceOf(bodyType))__    };perform,link,publishable,http,resource,do,publish,rest,client,do,publish,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,false,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,publish,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,throws,ioexception,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,when,client,perform,request,mockito,any,request,class,then,throw,e,assert,that,resource,do,publish,client,is,false,argument,captor,request,request,argument,captor,for,class,request,class,verify,client,perform,request,request,capture,assert,that,request,get,value,get,method,is,put,assert,that,request,get,value,get,endpoint,is,endpoint,assert,that,request,get,value,get,parameters,is,resource,get,parameters,assert,that,request,get,value,get,entity,instance,of,body,type
AbstractPublishableHttpResourceTestCase -> protected void assertPublishSucceeds(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,                                          final Class<? extends HttpEntity> bodyType)             throws IOException;1524684173;Perform {@link PublishableHttpResource#doPublish(RestClient) doPublish} against the {@code resource} and assert that it returns_{@code true} given a {@link RestStatus} that is {@link RestStatus#OK} or {@link RestStatus#CREATED}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name)._@param bodyType The request body provider's type.;protected void assertPublishSucceeds(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,_                                         final Class<? extends HttpEntity> bodyType)_            throws IOException {_        doPublishWithStatusCode(resource, resourceBasePath, resourceName, bodyType, successfulPublishStatus(), true)__    };perform,link,publishable,http,resource,do,publish,rest,client,do,publish,against,the,code,resource,and,assert,that,it,returns,code,true,given,a,link,rest,status,that,is,link,rest,status,ok,or,link,rest,status,created,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name,param,body,type,the,request,body,provider,s,type;protected,void,assert,publish,succeeds,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,throws,ioexception,do,publish,with,status,code,resource,resource,base,path,resource,name,body,type,successful,publish,status,true
AbstractPublishableHttpResourceTestCase -> protected void assertPublishSucceeds(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,                                          final Class<? extends HttpEntity> bodyType)             throws IOException;1528762805;Perform {@link PublishableHttpResource#doPublish(RestClient) doPublish} against the {@code resource} and assert that it returns_{@code true} given a {@link RestStatus} that is {@link RestStatus#OK} or {@link RestStatus#CREATED}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name)._@param bodyType The request body provider's type.;protected void assertPublishSucceeds(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,_                                         final Class<? extends HttpEntity> bodyType)_            throws IOException {_        doPublishWithStatusCode(resource, resourceBasePath, resourceName, bodyType, successfulPublishStatus(), true)__    };perform,link,publishable,http,resource,do,publish,rest,client,do,publish,against,the,code,resource,and,assert,that,it,returns,code,true,given,a,link,rest,status,that,is,link,rest,status,ok,or,link,rest,status,created,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name,param,body,type,the,request,body,provider,s,type;protected,void,assert,publish,succeeds,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,throws,ioexception,do,publish,with,status,code,resource,resource,base,path,resource,name,body,type,successful,publish,status,true
AbstractPublishableHttpResourceTestCase -> protected void assertPublishSucceeds(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,                                          final Class<? extends HttpEntity> bodyType)             throws IOException;1532434432;Perform {@link PublishableHttpResource#doPublish(RestClient) doPublish} against the {@code resource} and assert that it returns_{@code true} given a {@link RestStatus} that is {@link RestStatus#OK} or {@link RestStatus#CREATED}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name)._@param bodyType The request body provider's type.;protected void assertPublishSucceeds(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,_                                         final Class<? extends HttpEntity> bodyType)_            throws IOException {_        doPublishWithStatusCode(resource, resourceBasePath, resourceName, bodyType, successfulPublishStatus(), true)__    };perform,link,publishable,http,resource,do,publish,rest,client,do,publish,against,the,code,resource,and,assert,that,it,returns,code,true,given,a,link,rest,status,that,is,link,rest,status,ok,or,link,rest,status,created,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name,param,body,type,the,request,body,provider,s,type;protected,void,assert,publish,succeeds,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,throws,ioexception,do,publish,with,status,code,resource,resource,base,path,resource,name,body,type,successful,publish,status,true
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,                                              final String resourceBasePath, final String resourceName);1543346894;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource}, expecting a_{@code DELETE}, and assert that it returns {@code onResponse(true)} given a {@link RestStatus} that is {@link RestStatus#OK} or_{@link RestStatus#NOT_FOUND}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,_                                             final String resourceBasePath, final String resourceName) {_        final RestStatus status = randomFrom(successfulCheckStatus(), notFoundCheckStatus())___        doCheckAsDeleteWithStatusCode(resource, resourceBasePath, resourceName, status, true)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,expecting,a,code,delete,and,assert,that,it,returns,code,on,response,true,given,a,link,rest,status,that,is,link,rest,status,ok,or,link,rest,status,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,exists,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,rest,status,status,random,from,successful,check,status,not,found,check,status,do,check,as,delete,with,status,code,resource,resource,base,path,resource,name,status,true
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,                                              final String resourceBasePath, final String resourceName);1547500081;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource}, expecting a_{@code DELETE}, and assert that it returns {@code onResponse(true)} given a {@link RestStatus} that is {@link RestStatus#OK} or_{@link RestStatus#NOT_FOUND}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,_                                             final String resourceBasePath, final String resourceName) {_        final RestStatus status = randomFrom(successfulCheckStatus(), notFoundCheckStatus())___        doCheckAsDeleteWithStatusCode(resource, resourceBasePath, resourceName, status, true)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,expecting,a,code,delete,and,assert,that,it,returns,code,on,response,true,given,a,link,rest,status,that,is,link,rest,status,ok,or,link,rest,status,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,exists,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,rest,status,status,random,from,successful,check,status,not,found,check,status,do,check,as,delete,with,status,code,resource,resource,base,path,resource,name,status,true
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,                                              final String resourceBasePath, final String resourceName);1550177579;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource}, expecting a_{@code DELETE}, and assert that it returns {@code onResponse(true)} given a {@link RestStatus} that is {@link RestStatus#OK} or_{@link RestStatus#NOT_FOUND}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,_                                             final String resourceBasePath, final String resourceName) {_        final RestStatus status = randomFrom(successfulCheckStatus(), notFoundCheckStatus())___        doCheckAsDeleteWithStatusCode(resource, resourceBasePath, resourceName, status, true)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,expecting,a,code,delete,and,assert,that,it,returns,code,on,response,true,given,a,link,rest,status,that,is,link,rest,status,ok,or,link,rest,status,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,exists,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,rest,status,status,random,from,successful,check,status,not,found,check,status,do,check,as,delete,with,status,code,resource,resource,base,path,resource,name,status,true
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,                                              final String resourceBasePath, final String resourceName)             throws IOException;1524684173;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource}, expecting a {@code DELETE}, and_assert that it returns {@code EXISTS} given a {@link RestStatus} that is {@link RestStatus#OK} or {@link RestStatus#NOT_FOUND}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,_                                             final String resourceBasePath, final String resourceName)_            throws IOException {_        final RestStatus status = randomFrom(successfulCheckStatus(), notFoundCheckStatus())___        doCheckAsDeleteWithStatusCode(resource, resourceBasePath, resourceName, status, CheckResponse.EXISTS)__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,expecting,a,code,delete,and,assert,that,it,returns,code,exists,given,a,link,rest,status,that,is,link,rest,status,ok,or,link,rest,status,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,exists,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,final,rest,status,status,random,from,successful,check,status,not,found,check,status,do,check,as,delete,with,status,code,resource,resource,base,path,resource,name,status,check,response,exists
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,                                              final String resourceBasePath, final String resourceName)             throws IOException;1528762805;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource}, expecting a {@code DELETE}, and_assert that it returns {@code EXISTS} given a {@link RestStatus} that is {@link RestStatus#OK} or {@link RestStatus#NOT_FOUND}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,_                                             final String resourceBasePath, final String resourceName)_            throws IOException {_        final RestStatus status = randomFrom(successfulCheckStatus(), notFoundCheckStatus())___        doCheckAsDeleteWithStatusCode(resource, resourceBasePath, resourceName, status, CheckResponse.EXISTS)__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,expecting,a,code,delete,and,assert,that,it,returns,code,exists,given,a,link,rest,status,that,is,link,rest,status,ok,or,link,rest,status,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,exists,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,final,rest,status,status,random,from,successful,check,status,not,found,check,status,do,check,as,delete,with,status,code,resource,resource,base,path,resource,name,status,check,response,exists
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,                                              final String resourceBasePath, final String resourceName)             throws IOException;1532434432;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource}, expecting a {@code DELETE}, and_assert that it returns {@code EXISTS} given a {@link RestStatus} that is {@link RestStatus#OK} or {@link RestStatus#NOT_FOUND}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteExists(final PublishableHttpResource resource,_                                             final String resourceBasePath, final String resourceName)_            throws IOException {_        final RestStatus status = randomFrom(successfulCheckStatus(), notFoundCheckStatus())___        doCheckAsDeleteWithStatusCode(resource, resourceBasePath, resourceName, status, CheckResponse.EXISTS)__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,expecting,a,code,delete,and,assert,that,it,returns,code,exists,given,a,link,rest,status,that,is,link,rest,status,ok,or,link,rest,status,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,exists,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,final,rest,status,status,random,from,successful,check,status,not,found,check,status,do,check,as,delete,with,status,code,resource,resource,base,path,resource,name,status,check,response,exists
AbstractPublishableHttpResourceTestCase -> protected void assertCheckWithException(final PublishableHttpResource resource,                                             final String resourceBasePath, final String resourceName)             throws IOException;1524684173;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} that throws an exception and assert_that it returns {@code ERROR}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckWithException(final PublishableHttpResource resource,_                                            final String resourceBasePath, final String resourceName)_            throws IOException {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("GET", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        when(client.performRequest("GET", endpoint, getParameters(resource.getParameters()))).thenThrow(e)___        assertThat(resource.doCheck(client), is(CheckResponse.ERROR))__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,error,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,get,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,when,client,perform,request,get,endpoint,get,parameters,resource,get,parameters,then,throw,e,assert,that,resource,do,check,client,is,check,response,error
AbstractPublishableHttpResourceTestCase -> protected void assertCheckWithException(final PublishableHttpResource resource,                                             final String resourceBasePath, final String resourceName)             throws IOException;1528762805;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} that throws an exception and assert_that it returns {@code ERROR}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckWithException(final PublishableHttpResource resource,_                                            final String resourceBasePath, final String resourceName)_            throws IOException {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("GET", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        when(client.performRequest("GET", endpoint, getParameters(resource.getParameters()))).thenThrow(e)___        assertThat(resource.doCheck(client), is(CheckResponse.ERROR))__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,error,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,get,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,when,client,perform,request,get,endpoint,get,parameters,resource,get,parameters,then,throw,e,assert,that,resource,do,check,client,is,check,response,error
AbstractPublishableHttpResourceTestCase -> protected void assertCheckWithException(final PublishableHttpResource resource,                                             final String resourceBasePath, final String resourceName)             throws IOException;1532434432;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} that throws an exception and assert_that it returns {@code ERROR}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckWithException(final PublishableHttpResource resource,_                                            final String resourceBasePath, final String resourceName)_            throws IOException {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("GET", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        Request request = new Request("GET", endpoint)__        addParameters(request, getParameters(resource.getParameters()))__        when(client.performRequest(request)).thenThrow(e)___        assertThat(resource.doCheck(client), is(CheckResponse.ERROR))__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,error,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,get,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,request,request,new,request,get,endpoint,add,parameters,request,get,parameters,resource,get,parameters,when,client,perform,request,request,then,throw,e,assert,that,resource,do,check,client,is,check,response,error
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,                                                     final String resourceBasePath, final String resourceName);1543346894;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} that throws an_exception and assert that it returns {@code onFailure()} when performing a {@code DELETE} rather than the more common {@code GET}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,_                                                    final String resourceBasePath, final String resourceName) {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("DELETE", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        final Request request = new Request("DELETE", endpoint)__        addParameters(request, deleteParameters(resource.getParameters()))__        whenPerformRequestAsyncWith(client, request, e)___        resource.doCheck(client, listener)___        verifyListener(null)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,on,failure,when,performing,a,code,delete,rather,than,the,more,common,code,get,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,delete,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,final,request,request,new,request,delete,endpoint,add,parameters,request,delete,parameters,resource,get,parameters,when,perform,request,async,with,client,request,e,resource,do,check,client,listener,verify,listener,null
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,                                                     final String resourceBasePath, final String resourceName);1547500081;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} that throws an_exception and assert that it returns {@code onFailure()} when performing a {@code DELETE} rather than the more common {@code GET}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,_                                                    final String resourceBasePath, final String resourceName) {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("DELETE", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        final Request request = new Request("DELETE", endpoint)__        addParameters(request, deleteParameters(resource.getParameters()))__        whenPerformRequestAsyncWith(client, request, e)___        resource.doCheck(client, listener)___        verifyListener(null)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,on,failure,when,performing,a,code,delete,rather,than,the,more,common,code,get,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,delete,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,final,request,request,new,request,delete,endpoint,add,parameters,request,delete,parameters,resource,get,parameters,when,perform,request,async,with,client,request,e,resource,do,check,client,listener,verify,listener,null
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,                                                     final String resourceBasePath, final String resourceName);1550177579;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} that throws an_exception and assert that it returns {@code onFailure()} when performing a {@code DELETE} rather than the more common {@code GET}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,_                                                    final String resourceBasePath, final String resourceName) {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("DELETE", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        final Request request = new Request("DELETE", endpoint)__        addParameters(request, deleteParameters(resource.getDefaultParameters()))__        whenPerformRequestAsyncWith(client, request, e)___        resource.doCheck(client, listener)___        verifyListener(null)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,on,failure,when,performing,a,code,delete,rather,than,the,more,common,code,get,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,delete,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,final,request,request,new,request,delete,endpoint,add,parameters,request,delete,parameters,resource,get,default,parameters,when,perform,request,async,with,client,request,e,resource,do,check,client,listener,verify,listener,null
AbstractPublishableHttpResourceTestCase -> protected void assertPublishFails(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,                                       final Class<? extends HttpEntity> bodyType)             throws IOException;1524684173;Perform {@link PublishableHttpResource#doPublish(RestClient) doPublish} against the {@code resource} and assert that it returns_{@code false} given a {@link RestStatus} that is neither {@link RestStatus#OK} or {@link RestStatus#CREATED}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name)._@param bodyType The request body provider's type.;protected void assertPublishFails(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,_                                      final Class<? extends HttpEntity> bodyType)_            throws IOException {_        doPublishWithStatusCode(resource, resourceBasePath, resourceName, bodyType, failedPublishStatus(), false)__    };perform,link,publishable,http,resource,do,publish,rest,client,do,publish,against,the,code,resource,and,assert,that,it,returns,code,false,given,a,link,rest,status,that,is,neither,link,rest,status,ok,or,link,rest,status,created,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name,param,body,type,the,request,body,provider,s,type;protected,void,assert,publish,fails,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,throws,ioexception,do,publish,with,status,code,resource,resource,base,path,resource,name,body,type,failed,publish,status,false
AbstractPublishableHttpResourceTestCase -> protected void assertPublishFails(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,                                       final Class<? extends HttpEntity> bodyType)             throws IOException;1528762805;Perform {@link PublishableHttpResource#doPublish(RestClient) doPublish} against the {@code resource} and assert that it returns_{@code false} given a {@link RestStatus} that is neither {@link RestStatus#OK} or {@link RestStatus#CREATED}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name)._@param bodyType The request body provider's type.;protected void assertPublishFails(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,_                                      final Class<? extends HttpEntity> bodyType)_            throws IOException {_        doPublishWithStatusCode(resource, resourceBasePath, resourceName, bodyType, failedPublishStatus(), false)__    };perform,link,publishable,http,resource,do,publish,rest,client,do,publish,against,the,code,resource,and,assert,that,it,returns,code,false,given,a,link,rest,status,that,is,neither,link,rest,status,ok,or,link,rest,status,created,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name,param,body,type,the,request,body,provider,s,type;protected,void,assert,publish,fails,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,throws,ioexception,do,publish,with,status,code,resource,resource,base,path,resource,name,body,type,failed,publish,status,false
AbstractPublishableHttpResourceTestCase -> protected void assertPublishFails(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,                                       final Class<? extends HttpEntity> bodyType)             throws IOException;1532434432;Perform {@link PublishableHttpResource#doPublish(RestClient) doPublish} against the {@code resource} and assert that it returns_{@code false} given a {@link RestStatus} that is neither {@link RestStatus#OK} or {@link RestStatus#CREATED}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name)._@param bodyType The request body provider's type.;protected void assertPublishFails(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,_                                      final Class<? extends HttpEntity> bodyType)_            throws IOException {_        doPublishWithStatusCode(resource, resourceBasePath, resourceName, bodyType, failedPublishStatus(), false)__    };perform,link,publishable,http,resource,do,publish,rest,client,do,publish,against,the,code,resource,and,assert,that,it,returns,code,false,given,a,link,rest,status,that,is,neither,link,rest,status,ok,or,link,rest,status,created,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name,param,body,type,the,request,body,provider,s,type;protected,void,assert,publish,fails,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,throws,ioexception,do,publish,with,status,code,resource,resource,base,path,resource,name,body,type,failed,publish,status,false
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,                                                     final String resourceBasePath, final String resourceName)             throws IOException;1524684173;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} that throws an exception and assert_that it returns {@code ERRPR} when performing a {@code DELETE} rather than the more common {@code GET}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,_                                                    final String resourceBasePath, final String resourceName)_            throws IOException {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("DELETE", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        when(client.performRequest("DELETE", endpoint, deleteParameters(resource.getParameters()))).thenThrow(e)___        assertThat(resource.doCheck(client), is(CheckResponse.ERROR))__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,errpr,when,performing,a,code,delete,rather,than,the,more,common,code,get,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,delete,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,when,client,perform,request,delete,endpoint,delete,parameters,resource,get,parameters,then,throw,e,assert,that,resource,do,check,client,is,check,response,error
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,                                                     final String resourceBasePath, final String resourceName)             throws IOException;1528762805;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} that throws an exception and assert_that it returns {@code ERRPR} when performing a {@code DELETE} rather than the more common {@code GET}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,_                                                    final String resourceBasePath, final String resourceName)_            throws IOException {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("DELETE", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        when(client.performRequest("DELETE", endpoint, deleteParameters(resource.getParameters()))).thenThrow(e)___        assertThat(resource.doCheck(client), is(CheckResponse.ERROR))__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,errpr,when,performing,a,code,delete,rather,than,the,more,common,code,get,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,delete,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,when,client,perform,request,delete,endpoint,delete,parameters,resource,get,parameters,then,throw,e,assert,that,resource,do,check,client,is,check,response,error
AbstractPublishableHttpResourceTestCase -> protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,                                                     final String resourceBasePath, final String resourceName)             throws IOException;1532434432;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} that throws an exception and assert_that it returns {@code ERRPR} when performing a {@code DELETE} rather than the more common {@code GET}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckAsDeleteWithException(final PublishableHttpResource resource,_                                                    final String resourceBasePath, final String resourceName)_            throws IOException {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final ResponseException responseException = responseException("DELETE", endpoint, failedCheckStatus())__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"), responseException)___        Request request = new Request("DELETE", endpoint)__        addParameters(request, deleteParameters(resource.getParameters()))__        when(client.performRequest(request)).thenThrow(e)___        assertThat(resource.doCheck(client), is(CheckResponse.ERROR))__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,errpr,when,performing,a,code,delete,rather,than,the,more,common,code,get,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,as,delete,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,response,exception,response,exception,response,exception,delete,endpoint,failed,check,status,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,response,exception,request,request,new,request,delete,endpoint,add,parameters,request,delete,parameters,resource,get,parameters,when,client,perform,request,request,then,throw,e,assert,that,resource,do,check,client,is,check,response,error
AbstractPublishableHttpResourceTestCase -> protected void assertPublishWithException(final PublishableHttpResource resource,                                               final String resourceBasePath, final String resourceName,                                               final Class<? extends HttpEntity> bodyType);1543346894;Perform {@link PublishableHttpResource#doPublish(RestClient, ActionListener) doPublish} against the {@code resource} that throws an_exception and assert that it returns {@code onResponse(false)}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertPublishWithException(final PublishableHttpResource resource,_                                              final String resourceBasePath, final String resourceName,_                                              final Class<? extends HttpEntity> bodyType) {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"))___        whenPerformRequestAsyncWith(client, e)___        resource.doPublish(client, listener)___        verifyListener(null)___        final ArgumentCaptor<Request> request = ArgumentCaptor.forClass(Request.class)__        verify(client).performRequestAsync(request.capture(), any(ResponseListener.class))__        assertThat(request.getValue().getMethod(), is("PUT"))__        assertThat(request.getValue().getEndpoint(), is(endpoint))__        assertThat(request.getValue().getParameters(), is(resource.getParameters()))__        assertThat(request.getValue().getEntity(), instanceOf(bodyType))__    };perform,link,publishable,http,resource,do,publish,rest,client,action,listener,do,publish,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,on,response,false,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,publish,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,when,perform,request,async,with,client,e,resource,do,publish,client,listener,verify,listener,null,final,argument,captor,request,request,argument,captor,for,class,request,class,verify,client,perform,request,async,request,capture,any,response,listener,class,assert,that,request,get,value,get,method,is,put,assert,that,request,get,value,get,endpoint,is,endpoint,assert,that,request,get,value,get,parameters,is,resource,get,parameters,assert,that,request,get,value,get,entity,instance,of,body,type
AbstractPublishableHttpResourceTestCase -> protected void assertPublishWithException(final PublishableHttpResource resource,                                               final String resourceBasePath, final String resourceName,                                               final Class<? extends HttpEntity> bodyType);1547500081;Perform {@link PublishableHttpResource#doPublish(RestClient, ActionListener) doPublish} against the {@code resource} that throws an_exception and assert that it returns {@code onResponse(false)}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertPublishWithException(final PublishableHttpResource resource,_                                              final String resourceBasePath, final String resourceName,_                                              final Class<? extends HttpEntity> bodyType) {_        final String endpoint = concatenateEndpoint(resourceBasePath, resourceName)__        final Exception e = randomFrom(new IOException("expected"), new RuntimeException("expected"))___        whenPerformRequestAsyncWith(client, e)___        resource.doPublish(client, listener)___        verifyListener(null)___        final ArgumentCaptor<Request> request = ArgumentCaptor.forClass(Request.class)__        verify(client).performRequestAsync(request.capture(), any(ResponseListener.class))__        assertThat(request.getValue().getMethod(), is("PUT"))__        assertThat(request.getValue().getEndpoint(), is(endpoint))__        assertThat(request.getValue().getParameters(), is(resource.getParameters()))__        assertThat(request.getValue().getEntity(), instanceOf(bodyType))__    };perform,link,publishable,http,resource,do,publish,rest,client,action,listener,do,publish,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,on,response,false,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,publish,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,final,string,endpoint,concatenate,endpoint,resource,base,path,resource,name,final,exception,e,random,from,new,ioexception,expected,new,runtime,exception,expected,when,perform,request,async,with,client,e,resource,do,publish,client,listener,verify,listener,null,final,argument,captor,request,request,argument,captor,for,class,request,class,verify,client,perform,request,async,request,capture,any,response,listener,class,assert,that,request,get,value,get,method,is,put,assert,that,request,get,value,get,endpoint,is,endpoint,assert,that,request,get,value,get,parameters,is,resource,get,parameters,assert,that,request,get,value,get,entity,instance,of,body,type
AbstractPublishableHttpResourceTestCase -> protected void assertCheckDoesNotExist(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)             throws IOException;1524684173;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} and assert that it returns_{@code DOES_NOT_EXIST} given a {@link RestStatus} that is not {@link RestStatus#OK}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckDoesNotExist(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)_            throws IOException {_        doCheckWithStatusCode(resource, resourceBasePath, resourceName, notFoundCheckStatus(), CheckResponse.DOES_NOT_EXIST)__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,and,assert,that,it,returns,code,given,a,link,rest,status,that,is,not,link,rest,status,ok,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,does,not,exist,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,do,check,with,status,code,resource,resource,base,path,resource,name,not,found,check,status,check,response
AbstractPublishableHttpResourceTestCase -> protected void assertCheckDoesNotExist(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)             throws IOException;1528762805;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} and assert that it returns_{@code DOES_NOT_EXIST} given a {@link RestStatus} that is not {@link RestStatus#OK}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckDoesNotExist(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)_            throws IOException {_        doCheckWithStatusCode(resource, resourceBasePath, resourceName, notFoundCheckStatus(), CheckResponse.DOES_NOT_EXIST)__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,and,assert,that,it,returns,code,given,a,link,rest,status,that,is,not,link,rest,status,ok,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,does,not,exist,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,do,check,with,status,code,resource,resource,base,path,resource,name,not,found,check,status,check,response
AbstractPublishableHttpResourceTestCase -> protected void assertCheckDoesNotExist(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)             throws IOException;1532434432;Perform {@link PublishableHttpResource#doCheck(RestClient) doCheck} against the {@code resource} and assert that it returns_{@code DOES_NOT_EXIST} given a {@link RestStatus} that is not {@link RestStatus#OK}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckDoesNotExist(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName)_            throws IOException {_        doCheckWithStatusCode(resource, resourceBasePath, resourceName, notFoundCheckStatus(), CheckResponse.DOES_NOT_EXIST)__    };perform,link,publishable,http,resource,do,check,rest,client,do,check,against,the,code,resource,and,assert,that,it,returns,code,given,a,link,rest,status,that,is,not,link,rest,status,ok,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,does,not,exist,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,throws,ioexception,do,check,with,status,code,resource,resource,base,path,resource,name,not,found,check,status,check,response
AbstractPublishableHttpResourceTestCase -> protected void assertCheckDoesNotExist(final PublishableHttpResource resource,                                            final String resourceBasePath,                                            final String resourceName);1543346894;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} and assert that it_returns {@code onResponse(false)} given a {@link RestStatus} that is not {@link RestStatus#OK}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckDoesNotExist(final PublishableHttpResource resource,_                                           final String resourceBasePath,_                                           final String resourceName) {_        doCheckWithStatusCode(resource, resourceBasePath, resourceName, notFoundCheckStatus(), false)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,and,assert,that,it,returns,code,on,response,false,given,a,link,rest,status,that,is,not,link,rest,status,ok,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,does,not,exist,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,do,check,with,status,code,resource,resource,base,path,resource,name,not,found,check,status,false
AbstractPublishableHttpResourceTestCase -> protected void assertCheckDoesNotExist(final PublishableHttpResource resource,                                            final String resourceBasePath,                                            final String resourceName);1547500081;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} and assert that it_returns {@code onResponse(false)} given a {@link RestStatus} that is not {@link RestStatus#OK}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckDoesNotExist(final PublishableHttpResource resource,_                                           final String resourceBasePath,_                                           final String resourceName) {_        doCheckWithStatusCode(resource, resourceBasePath, resourceName, notFoundCheckStatus(), false)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,and,assert,that,it,returns,code,on,response,false,given,a,link,rest,status,that,is,not,link,rest,status,ok,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,does,not,exist,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,do,check,with,status,code,resource,resource,base,path,resource,name,not,found,check,status,false
AbstractPublishableHttpResourceTestCase -> protected void assertCheckDoesNotExist(final PublishableHttpResource resource,                                            final String resourceBasePath,                                            final String resourceName);1550177579;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} and assert that it_returns {@code onResponse(false)} given a {@link RestStatus} that is not {@link RestStatus#OK}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckDoesNotExist(final PublishableHttpResource resource,_                                           final String resourceBasePath,_                                           final String resourceName) {_        doCheckWithStatusCode(resource, resourceBasePath, resourceName, notFoundCheckStatus(), false)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,and,assert,that,it,returns,code,on,response,false,given,a,link,rest,status,that,is,not,link,rest,status,ok,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,does,not,exist,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,do,check,with,status,code,resource,resource,base,path,resource,name,not,found,check,status,false
AbstractPublishableHttpResourceTestCase -> protected void assertCheckWithException(final PublishableHttpResource resource,                                             final String resourceBasePath, final String resourceName);1543346894;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} that throws an_exception and assert that it returns {@code onFailure}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckWithException(final PublishableHttpResource resource,_                                            final String resourceBasePath, final String resourceName) {_        assertCheckWithException(resource, getParameters(resource.getParameters()), resourceBasePath, resourceName)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,on,failure,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,assert,check,with,exception,resource,get,parameters,resource,get,parameters,resource,base,path,resource,name
AbstractPublishableHttpResourceTestCase -> protected void assertCheckWithException(final PublishableHttpResource resource,                                             final String resourceBasePath, final String resourceName);1547500081;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} that throws an_exception and assert that it returns {@code onFailure}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckWithException(final PublishableHttpResource resource,_                                            final String resourceBasePath, final String resourceName) {_        assertCheckWithException(resource, getParameters(resource.getParameters()), resourceBasePath, resourceName)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,on,failure,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,assert,check,with,exception,resource,get,parameters,resource,get,parameters,resource,base,path,resource,name
AbstractPublishableHttpResourceTestCase -> protected void assertCheckWithException(final PublishableHttpResource resource,                                             final String resourceBasePath, final String resourceName);1550177579;Perform {@link PublishableHttpResource#doCheck(RestClient, ActionListener) doCheck} against the {@code resource} that throws an_exception and assert that it returns {@code onFailure}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name).;protected void assertCheckWithException(final PublishableHttpResource resource,_                                            final String resourceBasePath, final String resourceName) {_        assertCheckWithException(resource, getParameters(resource.getDefaultParameters()), resourceBasePath, resourceName)__    };perform,link,publishable,http,resource,do,check,rest,client,action,listener,do,check,against,the,code,resource,that,throws,an,exception,and,assert,that,it,returns,code,on,failure,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name;protected,void,assert,check,with,exception,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,assert,check,with,exception,resource,get,parameters,resource,get,default,parameters,resource,base,path,resource,name
AbstractPublishableHttpResourceTestCase -> protected void assertPublishSucceeds(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,                                          final Class<? extends HttpEntity> bodyType);1543346894;Perform {@link PublishableHttpResource#doPublish(RestClient, ActionListener) doPublish} against the {@code resource} and assert that_it returns {@code onResponse(true)} given a {@link RestStatus} that is {@link RestStatus#OK} or {@link RestStatus#CREATED}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name)._@param bodyType The request body provider's type.;protected void assertPublishSucceeds(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,_                                         final Class<? extends HttpEntity> bodyType) {_        doPublishWithStatusCode(resource, resourceBasePath, resourceName, bodyType, successfulPublishStatus(), true)__    };perform,link,publishable,http,resource,do,publish,rest,client,action,listener,do,publish,against,the,code,resource,and,assert,that,it,returns,code,on,response,true,given,a,link,rest,status,that,is,link,rest,status,ok,or,link,rest,status,created,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name,param,body,type,the,request,body,provider,s,type;protected,void,assert,publish,succeeds,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,do,publish,with,status,code,resource,resource,base,path,resource,name,body,type,successful,publish,status,true
AbstractPublishableHttpResourceTestCase -> protected void assertPublishSucceeds(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,                                          final Class<? extends HttpEntity> bodyType);1547500081;Perform {@link PublishableHttpResource#doPublish(RestClient, ActionListener) doPublish} against the {@code resource} and assert that_it returns {@code onResponse(true)} given a {@link RestStatus} that is {@link RestStatus#OK} or {@link RestStatus#CREATED}.__@param resource The resource to execute._@param resourceBasePath The base endpoint (e.g., "/_template")_@param resourceName The resource name (e.g., the template or pipeline name)._@param bodyType The request body provider's type.;protected void assertPublishSucceeds(final PublishableHttpResource resource, final String resourceBasePath, final String resourceName,_                                         final Class<? extends HttpEntity> bodyType) {_        doPublishWithStatusCode(resource, resourceBasePath, resourceName, bodyType, successfulPublishStatus(), true)__    };perform,link,publishable,http,resource,do,publish,rest,client,action,listener,do,publish,against,the,code,resource,and,assert,that,it,returns,code,on,response,true,given,a,link,rest,status,that,is,link,rest,status,ok,or,link,rest,status,created,param,resource,the,resource,to,execute,param,resource,base,path,the,base,endpoint,e,g,param,resource,name,the,resource,name,e,g,the,template,or,pipeline,name,param,body,type,the,request,body,provider,s,type;protected,void,assert,publish,succeeds,final,publishable,http,resource,resource,final,string,resource,base,path,final,string,resource,name,final,class,extends,http,entity,body,type,do,publish,with,status,code,resource,resource,base,path,resource,name,body,type,successful,publish,status,true
