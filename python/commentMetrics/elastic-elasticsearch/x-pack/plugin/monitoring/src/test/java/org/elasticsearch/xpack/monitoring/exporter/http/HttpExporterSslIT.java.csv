commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;@AfterClass public static void cleanUpStatics() {     if (webServer != null) {         webServer.close().         webServer = null.     } }
false;protected;0;4;;@Override protected boolean ignoreExternalCluster() {     return true. }
false;protected;1;32;;@Override protected Settings nodeSettings(int nodeOrdinal) {     final Path truststore = getDataPath("/org/elasticsearch/xpack/monitoring/exporter/http/testnode.jks").     assertThat(Files.exists(truststore), CoreMatchers.is(true)).     if (webServer == null) {         try {             webServer = buildWebServer().         } catch (IOException e) {             throw new RuntimeException(e).         }     }     final String address = "https://" + webServer.getHostName() + ":" + webServer.getPort().     final Settings.Builder builder = Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("xpack.monitoring.exporters.plaintext.type", "http").put("xpack.monitoring.exporters.plaintext.enabled", true).put("xpack.monitoring.exporters.plaintext.host", address).put("xpack.monitoring.exporters.plaintext.ssl.truststore.path", truststore).put("xpack.monitoring.exporters.plaintext.ssl.truststore.password", "testnode").put("xpack.monitoring.exporters.secure.type", "http").put("xpack.monitoring.exporters.secure.enabled", true).put("xpack.monitoring.exporters.secure.host", address).put("xpack.monitoring.exporters.secure.ssl.truststore.path", truststore).     secureSettings = new MockSecureSettings().     secureSettings.setString("xpack.monitoring.exporters.secure.ssl.truststore.secure_password", "testnode").     builder.setSecureSettings(secureSettings).     return builder.build(). }
false;private;0;17;;private MockWebServer buildWebServer() throws IOException {     final Path cert = getDataPath("/org/elasticsearch/xpack/monitoring/exporter/http/testnode.crt").     final Path key = getDataPath("/org/elasticsearch/xpack/monitoring/exporter/http/testnode.pem").     final Settings sslSettings = Settings.builder().put("xpack.transport.security.ssl.certificate", cert).put("xpack.transport.security.ssl.key", key).put("xpack.transport.security.ssl.key_passphrase", "testnode").put(globalSettings).build().     TestsSSLService sslService = new TestsSSLService(sslSettings, environment).     final SSLContext sslContext = sslService.sslContext("xpack.security.transport.ssl").     MockWebServer server = new MockWebServer(sslContext, false).     server.start().     return server. }
false;public;0;7;;@Before public // Force the exporters to be built from closed secure settings (as they would be in a production environment) void closeSecureSettings() throws IOException {     if (secureSettings != null) {         secureSettings.close().     } }
false;public;0;10;;public void testCannotUpdateSslSettingsWithSecureSettings() throws Exception {     // Verify that it was created even though it has a secure setting     assertExporterExists("secure").     // Verify that we cannot modify the SSL settings     final ActionFuture<ClusterUpdateSettingsResponse> future = setVerificationMode("secure", VerificationMode.CERTIFICATE).     final IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, future::actionGet).     assertThat(iae.getCause(), instanceOf(IllegalStateException.class)).     assertThat(iae.getCause().getMessage(), containsString("secure_password")). }
false;public;0;6;;public void testCanUpdateSslSettingsWithNoSecureSettings() {     final ActionFuture<ClusterUpdateSettingsResponse> future = setVerificationMode("plaintext", VerificationMode.CERTIFICATE).     final ClusterUpdateSettingsResponse response = future.actionGet().     assertThat(response, notNullValue()).     clearTransientSettings("plaintext"). }
false;public;0;20;;public void testCanAddNewExporterWithSsl() {     Path truststore = getDataPath("/org/elasticsearch/xpack/monitoring/exporter/http/testnode.jks").     assertThat(Files.exists(truststore), CoreMatchers.is(true)).     final ClusterUpdateSettingsRequest updateSettings = new ClusterUpdateSettingsRequest().     final Settings settings = Settings.builder().put("xpack.monitoring.exporters._new.type", "http").put("xpack.monitoring.exporters._new.host", "https://" + webServer.getHostName() + ":" + webServer.getPort()).put("xpack.monitoring.exporters._new.ssl.truststore.path", truststore).put("xpack.monitoring.exporters._new.ssl.truststore.password", "testnode").put("xpack.monitoring.exporters._new.ssl.verification_mode", VerificationMode.CERTIFICATE.name()).build().     updateSettings.transientSettings(settings).     final ActionFuture<ClusterUpdateSettingsResponse> future = client().admin().cluster().updateSettings(updateSettings).     final ClusterUpdateSettingsResponse response = future.actionGet().     assertThat(response, notNullValue()).     assertExporterExists("_new").     clearTransientSettings("_new"). }
false;private;1;5;;private void assertExporterExists(String secure) {     final Exporter httpExporter = getExporter(secure).     assertThat(httpExporter, notNullValue()).     assertThat(httpExporter, instanceOf(HttpExporter.class)). }
false;private;1;5;;private Exporter getExporter(String name) {     final Exporters exporters = internalCluster().getInstance(Exporters.class).     assertThat(exporters, notNullValue()).     return exporters.getExporter(name). }
false;private;2;8;;private ActionFuture<ClusterUpdateSettingsResponse> setVerificationMode(String name, VerificationMode mode) {     final ClusterUpdateSettingsRequest updateSettings = new ClusterUpdateSettingsRequest().     final Settings settings = Settings.builder().put("xpack.monitoring.exporters." + name + ".ssl.verification_mode", mode.name()).build().     updateSettings.transientSettings(settings).     return client().admin().cluster().updateSettings(updateSettings). }
false;private;1;9;;private void clearTransientSettings(String... names) {     final ClusterUpdateSettingsRequest updateSettings = new ClusterUpdateSettingsRequest().     final Settings.Builder builder = Settings.builder().     for (String name : names) {         builder.put("xpack.monitoring.exporters." + name + ".*", (String) null).     }     updateSettings.transientSettings(builder.build()).     client().admin().cluster().updateSettings(updateSettings).actionGet(). }
