commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void testPipelineToHttpEntity() throws IOException {     final HttpEntity entity = resource.pipelineToHttpEntity().     assertThat(entity.getContentType().getValue(), is(ContentType.APPLICATION_JSON.toString())).     final InputStream byteStream = entity.getContent().     assertThat(byteStream.available(), is(pipelineBytes.length)).     for (final byte pipelineByte : pipelineBytes) {         assertThat(pipelineByte, is((byte) byteStream.read())).     }     assertThat(byteStream.available(), is(0)). }
false;public;0;5;;public void testDoCheckExists() {     final HttpEntity entity = entityForResource(true, pipelineName, minimumVersion).     doCheckWithStatusCode(resource, "/_ingest/pipeline", pipelineName, successfulCheckStatus(), true, entity). }
false;public;0;12;;public void testDoCheckDoesNotExist() {     if (randomBoolean()) {         // it does not exist because it's literally not there         assertCheckDoesNotExist(resource, "/_ingest/pipeline", pipelineName).     } else {         // it does not exist because we need to replace it         final HttpEntity entity = entityForResource(false, pipelineName, minimumVersion).         doCheckWithStatusCode(resource, "/_ingest/pipeline", pipelineName, successfulCheckStatus(), false, entity).     } }
false;public;0;11;;public void testDoCheckError() {     if (randomBoolean()) {         // error because of a server error         assertCheckWithException(resource, "/_ingest/pipeline", pipelineName).     } else {         // error because of a malformed response         final HttpEntity entity = entityForResource(null, pipelineName, minimumVersion).         doCheckWithStatusCode(resource, "/_ingest/pipeline", pipelineName, successfulCheckStatus(), null, entity).     } }
false;public;0;3;;public void testDoPublishTrue() {     assertPublishSucceeds(resource, "/_ingest/pipeline", pipelineName, Collections.emptyMap(), ByteArrayEntity.class). }
false;public;0;3;;public void testDoPublishFalseWithException() {     assertPublishWithException(resource, "/_ingest/pipeline", pipelineName, Collections.emptyMap(), ByteArrayEntity.class). }
false;public;0;3;;public void testParameters() {     assertVersionParameters(resource). }
