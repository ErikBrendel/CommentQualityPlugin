commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setupThreadPool() {     THREADPOOL = new TestThreadPool(LocalExporterIntegTestCase.class.getName()). }
false;public,static;0;6;;@AfterClass public static void cleanUpStatic() throws Exception {     if (THREADPOOL != null) {         terminate(THREADPOOL).     } }
false;protected;0;10;;protected Settings localExporterSettings() {     return Settings.builder().put("xpack.monitoring.collection.enabled", false).put("xpack.monitoring.collection.interval", "1s").put("xpack.monitoring.exporters." + exporterName + ".type", LocalExporter.TYPE).put("xpack.monitoring.exporters." + exporterName + ".enabled", false).put("xpack.monitoring.exporters." + exporterName + ".cluster_alerts.management.enabled", false).put(XPackSettings.MACHINE_LEARNING_ENABLED.getKey(), false).build(). }
false;protected;1;7;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(localExporterSettings()).build(). }
true;protected;0;9;/**  * Create a new {@link LocalExporter}. Expected usage:  * <pre><code>  * final Settings settings = Settings.builder().put("xpack.monitoring.exporters._local.type", "local").build().  * try (LocalExporter exporter = createLocalExporter("_local", settings)) {  *   // ...  * }  * </code></pre>  *  * @return Never {@code null}.  */ ;/**  * Create a new {@link LocalExporter}. Expected usage:  * <pre><code>  * final Settings settings = Settings.builder().put("xpack.monitoring.exporters._local.type", "local").build().  * try (LocalExporter exporter = createLocalExporter("_local", settings)) {  *   // ...  * }  * </code></pre>  *  * @return Never {@code null}.  */ protected LocalExporter createLocalExporter() {     final Settings settings = localExporterSettings().     final XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     final Exporter.Config config = new Exporter.Config(exporterName, "local", settings, clusterService(), licenseState).     final CleanerService cleanerService = new CleanerService(settings, clusterService().getClusterSettings(), THREADPOOL, licenseState).     return new LocalExporter(config, client(), cleanerService). }
