commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testDoCheckAndPublishSuccess() {     final Version minimumVersion = VersionUtils.randomVersion(random()).     final Version version = randomFrom(minimumVersion, Version.CURRENT).     final Response response = responseForVersion(version).     final VersionHttpResource resource = new VersionHttpResource(owner, minimumVersion).     resource.doCheckAndPublish(client, listener).     verify(listener).onResponse(true).     verify(response).getEntity(). }
false;public;0;11;;public void testDoCheckAndPublishFailedParsing() {     // malformed JSON     final Response response = responseForJSON("{").     final VersionHttpResource resource = new VersionHttpResource(owner, Version.CURRENT).     resource.doCheckAndPublish(client, listener).     verify(listener).onFailure(any(Exception.class)).     verify(response).getEntity(). }
false;public;0;11;;public void testDoCheckAndPublishFailedFieldMissing() {     // malformed response. imagining that we may change it in the future or someone breaks filter_path     final Response response = responseForJSON("{\"version.number\":\"" + Version.CURRENT + "\"}").     final VersionHttpResource resource = new VersionHttpResource(owner, Version.CURRENT).     resource.doCheckAndPublish(client, listener).     verify(listener).onFailure(any(Exception.class)).     verify(response).getEntity(). }
false;public;0;11;;public void testDoCheckAndPublishFailedFieldWrongType() {     // malformed response (should be {version: { number : ... }})     final Response response = responseForJSON("{\"version\":\"" + Version.CURRENT + "\"}").     final VersionHttpResource resource = new VersionHttpResource(owner, Version.CURRENT).     resource.doCheckAndPublish(client, listener).     verify(listener).onFailure(any(Exception.class)).     verify(response).getEntity(). }
false;public;0;12;;public void testDoCheckAndPublishFailedWithIOException() {     final Request request = new Request("GET", "/").     request.addParameter("filter_path", "version.number").     whenPerformRequestAsyncWith(client, request, new IOException("expected")).     final VersionHttpResource resource = new VersionHttpResource(owner, Version.CURRENT).     resource.doCheckAndPublish(client, listener).     verify(listener).onFailure(any(Exception.class)). }
false;private;1;13;;private Response responseForJSON(final String json) {     final NStringEntity entity = new NStringEntity(json, ContentType.APPLICATION_JSON).     final Response response = mock(Response.class).     when(response.getEntity()).thenReturn(entity).     final Request request = new Request("GET", "/").     request.addParameter("filter_path", "version.number").     whenPerformRequestAsyncWith(client, request, response).     return response. }
false;private;1;3;;private Response responseForVersion(final Version version) {     return responseForJSON("{\"version\":{\"number\":\"" + version + "\"}}"). }
