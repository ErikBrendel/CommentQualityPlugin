commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testOnSuccess() throws IOException {     final Response response = mock(Response.class).     final StringEntity entity = new StringEntity("{\"took\":5,\"errors\":false}", ContentType.APPLICATION_JSON).     when(response.getEntity()).thenReturn(entity).     // doesn't explode     new WarningsHttpExporterBulkResponseListener().onSuccess(response). }
false;public;0;26;;public void testOnSuccessParsing() throws IOException {     // {"took": 4, "errors": false, ...     final Response response = mock(Response.class).     final XContent xContent = mock(XContent.class).     final XContentParser parser = mock(XContentParser.class).     final HttpEntity entity = mock(HttpEntity.class).     final InputStream stream = mock(InputStream.class).     when(response.getEntity()).thenReturn(entity).     when(entity.getContent()).thenReturn(stream).     when(xContent.createParser(Mockito.any(NamedXContentRegistry.class), Mockito.any(DeprecationHandler.class), Mockito.eq(stream))).thenReturn(parser).     // {, "took", 4, "errors", false     when(parser.nextToken()).thenReturn(Token.START_OBJECT, Token.FIELD_NAME, Token.VALUE_NUMBER, Token.FIELD_NAME, Token.VALUE_BOOLEAN).     when(parser.currentName()).thenReturn("took", "errors").     when(parser.booleanValue()).thenReturn(false).     new HttpExportBulkResponseListener(xContent).onSuccess(response).     verify(parser, times(5)).nextToken().     verify(parser, times(2)).currentName().     verify(parser).booleanValue(). }
false;;1;4;;@Override void onItemError(final String text) {     assertEquals(expectedErrors[counter.getAndIncrement()], text). }
false;public;0;27;;public void testOnSuccessWithInnerErrors() {     final String[] expectedErrors = new String[] { randomAlphaOfLengthBetween(4, 10), randomAlphaOfLengthBetween(5, 9) }.     final AtomicInteger counter = new AtomicInteger(0).     final Response response = mock(Response.class).     final StringEntity entity = new StringEntity("{\"took\":4,\"errors\":true,\"items\":[" + "{\"index\":{\"_index\":\".monitoring-data-2\",\"_type\":\"node\",\"_id\":\"123\"}}," + "{\"index\":{\"_index\":\".monitoring-data-2\",\"_type\":\"node\",\"_id\":\"456\"," + "\"error\":\"" + expectedErrors[0] + "\"}}," + "{\"index\":{\"_index\":\".monitoring-data-2\",\"_type\":\"node\",\"_id\":\"789\"}}," + "{\"index\":{\"_index\":\".monitoring-data-2\",\"_type\":\"node\",\"_id\":\"012\"," + "\"error\":\"" + expectedErrors[1] + "\"}}" + "]}", ContentType.APPLICATION_JSON).     when(response.getEntity()).thenReturn(entity).     // doesn't explode     new WarningsHttpExporterBulkResponseListener() {          @Override         void onItemError(final String text) {             assertEquals(expectedErrors[counter.getAndIncrement()], text).         }     }.onSuccess(response).     assertEquals(expectedErrors.length, counter.get()). }
false;public;0;49;;public void testOnSuccessParsingWithInnerErrors() throws IOException {     // {"took": 4, "errors": true, "items": [ { "index": { "_index": "ignored", "_type": "ignored", "_id": "ignored" },     // { "index": { "_index": "ignored", "_type": "ignored", "_id": "ignored", "error": "blah" }     // ]...     final Response response = mock(Response.class).     final XContent xContent = mock(XContent.class).     final XContentParser parser = mock(XContentParser.class).     final HttpEntity entity = mock(HttpEntity.class).     final InputStream stream = mock(InputStream.class).     when(response.getEntity()).thenReturn(entity).     when(entity.getContent()).thenReturn(stream).     when(xContent.createParser(Mockito.any(NamedXContentRegistry.class), Mockito.any(DeprecationHandler.class), Mockito.eq(stream))).thenReturn(parser).     // {, "took", 4, "errors", false                                                      nextToken, currentName     // 1     when(parser.nextToken()).thenReturn(// 1     Token.START_OBJECT, // 3, 1     Token.FIELD_NAME, // 3, 1     Token.VALUE_NUMBER, // 5, 2     Token.FIELD_NAME, // 5, 2     Token.VALUE_BOOLEAN, // 7, 3     Token.FIELD_NAME, // 7, 3     Token.START_ARRAY, // 8     Token.START_OBJECT, // 10, 4     Token.FIELD_NAME, // 10, 4     Token.START_OBJECT, // 12, 5     Token.FIELD_NAME, // 12, 5     Token.VALUE_STRING, // 14, 6     Token.FIELD_NAME, // 14, 6     Token.VALUE_STRING, // 16, 7     Token.FIELD_NAME, // 16, 7     Token.VALUE_STRING, // 17     Token.END_OBJECT, // 18     Token.START_OBJECT, // 20, 8     Token.FIELD_NAME, // 20, 8     Token.START_OBJECT, // 22, 9     Token.FIELD_NAME, // 22, 9     Token.VALUE_STRING, // 24, 10     Token.FIELD_NAME, // 24, 10     Token.VALUE_STRING, // 26, 11     Token.FIELD_NAME, // 26, 11     Token.VALUE_STRING, // 28, 12 ("error")     Token.FIELD_NAME, // 28, 12 ("error")     Token.VALUE_STRING, // 29     Token.END_OBJECT, // 30     Token.END_ARRAY).     when(parser.currentName()).thenReturn("took", "errors", "items", "index", "_index", "_type", "_id", "index", "_index", "_type", "_id", "error").     // there were errors. so go diving for the error     when(parser.booleanValue()).thenReturn(true).     when(parser.text()).thenReturn("this is the error").     new HttpExportBulkResponseListener(xContent).onSuccess(response).     verify(parser, times(30)).nextToken().     verify(parser, times(12)).currentName().     verify(parser).booleanValue().     verify(parser).text(). }
false;;2;4;;@Override void onError(final String msg, final Throwable cause) {     counter.getAndIncrement(). }
false;public;0;18;;public void testOnSuccessMalformed() {     final AtomicInteger counter = new AtomicInteger(0).     final Response response = mock(Response.class).     if (randomBoolean()) {         // malformed JSON         when(response.getEntity()).thenReturn(new StringEntity("{", ContentType.APPLICATION_JSON)).     }     new WarningsHttpExporterBulkResponseListener() {          @Override         void onError(final String msg, final Throwable cause) {             counter.getAndIncrement().         }     }.onSuccess(response).     assertEquals(1, counter.get()). }
false;;2;4;;@Override void onError(final String msg, final Throwable cause) {     assertSame(exception, cause). }
false;public;0;10;;public void testOnFailure() {     final Exception exception = randomBoolean() ? new Exception() : new RuntimeException().     new WarningsHttpExporterBulkResponseListener() {          @Override         void onError(final String msg, final Throwable cause) {             assertSame(exception, cause).         }     }.onFailure(exception). }
false;;1;4;;@Override void onItemError(final String msg) {     fail("There should be no errors within the response!"). }
false;;2;6;;@Override void onError(final String msg, final Throwable cause) {     // let it log the exception so you can check the output     super.onError(msg, cause).     fail("There should be no errors!"). }
