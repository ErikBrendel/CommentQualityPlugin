commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override public void setUp() throws Exception {     super.setUp().     clusterName = mock(ClusterName.class).     clusterService = mock(ClusterService.class).     clusterState = mock(ClusterState.class).     nodes = mock(DiscoveryNodes.class).     metaData = mock(MetaData.class).     licenseState = mock(XPackLicenseState.class).     client = mock(Client.class).     ThreadPool threadPool = mock(ThreadPool.class).     when(client.threadPool()).thenReturn(threadPool).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)).     settings = Settings.builder().put("path.home", createTempDir()).build(). }
false;protected;1;5;;protected void whenLocalNodeElectedMaster(final boolean electedMaster) {     when(clusterService.state()).thenReturn(clusterState).     when(clusterState.getNodes()).thenReturn(nodes).     when(nodes.isLocalNodeElectedMaster()).thenReturn(electedMaster). }
false;protected;1;5;;protected void whenClusterStateWithName(final String name) {     when(clusterName.value()).thenReturn(name).     when(clusterService.getClusterName()).thenReturn(clusterName).     when(clusterState.getClusterName()).thenReturn(clusterName). }
false;protected;1;5;;protected void whenClusterStateWithUUID(final String clusterUUID) {     when(clusterService.state()).thenReturn(clusterState).     when(clusterState.metaData()).thenReturn(metaData).     when(metaData.clusterUUID()).thenReturn(clusterUUID). }
false;protected;2;3;;protected void withCollectionTimeout(final Setting<TimeValue> collectionTimeout, final TimeValue timeout) throws Exception {     withCollectionSetting(builder -> builder.put(collectionTimeout.getKey(), timeout.getStringRep())). }
false;protected;1;8;;protected void withCollectionIndices(final String[] collectionIndices) throws Exception {     final String key = Collector.INDICES.getKey().     if (collectionIndices != null) {         withCollectionSetting(builder -> builder.putList(key, collectionIndices)).     } else {         withCollectionSetting(builder -> builder.putNull(key)).     } }
false;protected;0;4;;@Override protected XPackLicenseState getLicenseState() {     return licenseState. }
false;protected;1;13;;protected void withCollectionSetting(final Function<Settings.Builder, Settings.Builder> builder) throws Exception {     settings = Settings.builder().put(settings).put(builder.apply(Settings.builder()).build()).build().     when(clusterService.getClusterSettings()).thenReturn(new ClusterSettings(settings, Sets.newHashSet(new Monitoring(settings) {          @Override         protected XPackLicenseState getLicenseState() {             return licenseState.         }     }.getSettings()))). }
false;protected,static;1;3;;protected static DiscoveryNode localNode(final String uuid) {     return new DiscoveryNode(uuid, new TransportAddress(TransportAddress.META_ADDRESS, 9300), Version.CURRENT). }
