commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void configureTimeouts() {     when(connectTimeout.millis()).thenReturn((long) connectTimeoutMillis).     when(socketTimeout.millis()).thenReturn((long) socketTimeoutMillis). }
false;public;0;8;;public void testCustomizeRequestConfig() {     final TimeoutRequestConfigCallback callback = new TimeoutRequestConfigCallback(connectTimeout, socketTimeout).     assertSame(builder, callback.customizeRequestConfig(builder)).     verify(builder).setConnectTimeout(connectTimeoutMillis).     verify(builder).setSocketTimeout(socketTimeoutMillis). }
false;public;0;23;;public void testCustomizeRequestConfigWithOptionalParameters() {     final TimeValue optionalConnectTimeout = randomFrom(connectTimeout, null).     // avoid making both null at the same time     final TimeValue optionalSocketTimeout = optionalConnectTimeout != null ? randomFrom(socketTimeout, null) : socketTimeout.     final TimeoutRequestConfigCallback callback = new TimeoutRequestConfigCallback(optionalConnectTimeout, optionalSocketTimeout).     assertSame(builder, callback.customizeRequestConfig(builder)).     assertSame(optionalConnectTimeout, callback.getConnectTimeout()).     assertSame(optionalSocketTimeout, callback.getSocketTimeout()).     if (optionalConnectTimeout != null) {         verify(builder).setConnectTimeout(connectTimeoutMillis).     } else {         verify(builder, never()).setConnectTimeout(anyInt()).     }     if (optionalSocketTimeout != null) {         verify(builder).setSocketTimeout(socketTimeoutMillis).     } else {         verify(builder, never()).setSocketTimeout(anyInt()).     } }
