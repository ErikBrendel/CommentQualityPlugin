commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testHistoryDurationDefaults7Days() {     TimeValue sevenDays = TimeValue.timeValueHours(7 * 24).     // 7 days     assertEquals(sevenDays, MonitoringField.HISTORY_DURATION.get(Settings.EMPTY)).     // Note: this verifies the semantics because this is taken for granted that it never returns null!     assertEquals(sevenDays, MonitoringField.HISTORY_DURATION.get(buildSettings(MonitoringField.HISTORY_DURATION.getKey(), null))). }
false;public;0;5;;public void testHistoryDurationMinimum24Hours() {     // hit the minimum     assertEquals(MonitoringField.HISTORY_DURATION_MINIMUM, MonitoringField.HISTORY_DURATION.get(buildSettings(MonitoringField.HISTORY_DURATION.getKey(), "24h"))). }
false;public;0;6;;public void testHistoryDurationMinimum24HoursBlocksLower() {     // 1 ms early!     final String oneSecondEarly = (MonitoringField.HISTORY_DURATION_MINIMUM.millis() - 1) + "ms".     expectThrows(IllegalArgumentException.class, () -> MonitoringField.HISTORY_DURATION.get(buildSettings(MonitoringField.HISTORY_DURATION.getKey(), oneSecondEarly))). }
false;private;2;3;;private Settings buildSettings(String key, String value) {     return Settings.builder().put(key, value).build(). }
