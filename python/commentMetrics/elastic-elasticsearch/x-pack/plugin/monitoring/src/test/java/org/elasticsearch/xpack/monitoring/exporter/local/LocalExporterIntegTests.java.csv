# id;timestamp;commentText;codeText;commentWords;codeWords
LocalExporterIntegTests -> private void checkMonitoringDocs();1524684173;Checks that the monitoring documents all have the cluster_uuid, timestamp and source_node_fields and belongs to the right data or timestamped index.;private void checkMonitoringDocs() {_        ClusterStateResponse response = client().admin().cluster().prepareState().get()__        String customTimeFormat = response.getState().getMetaData().transientSettings()_                .get("xpack.monitoring.exporters._local.index.name.time_format")__        assertEquals(indexTimeFormat, customTimeFormat)__        if (customTimeFormat == null) {_            customTimeFormat = "YYYY.MM.dd"__        }__        DateTimeFormatter dateParser = ISODateTimeFormat.dateTime().withZoneUTC()__        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(customTimeFormat).withZoneUTC()___        SearchResponse searchResponse = client().prepareSearch(".monitoring-*").setSize(100).get()__        assertThat(searchResponse.getHits().getTotalHits(), greaterThan(0L))___        for (SearchHit hit : searchResponse.getHits().getHits()) {_            final Map<String, Object> source = hit.getSourceAsMap()___            assertTrue(source != null && source.isEmpty() == false)___            final String timestamp = (String) source.get("timestamp")__            final String type = (String) source.get("type")___            assertTrue("document is missing cluster_uuid field", Strings.hasText((String) source.get("cluster_uuid")))__            assertTrue("document is missing timestamp field", Strings.hasText(timestamp))__            assertTrue("document is missing type field", Strings.hasText(type))__            assertEquals("document _type is 'doc'", "doc", hit.getType())___            @SuppressWarnings("unchecked")_            Map<String, Object> docSource = (Map<String, Object>) source.get("doc")___            MonitoredSystem expectedSystem__            if (docSource == null) {_                _                expectedSystem = MonitoredSystem.ES__            } else {_                _                expectedSystem = MonitoredSystem.fromSystem((String) docSource.get("expected_system"))__            }__            String dateTime = dateFormatter.print(dateParser.parseDateTime(timestamp))__            final String expectedIndex = ".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-" + dateTime__            assertEquals("Expected " + expectedIndex + " but got " + hit.getIndex(), expectedIndex, hit.getIndex())___            @SuppressWarnings("unchecked")_            Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__            if ("shards".equals(type) == false) {_                assertNotNull("document is missing source_node field", sourceNode)__            }_        }_    };checks,that,the,monitoring,documents,all,have,the,timestamp,and,fields,and,belongs,to,the,right,data,or,timestamped,index;private,void,check,monitoring,docs,cluster,state,response,response,client,admin,cluster,prepare,state,get,string,custom,time,format,response,get,state,get,meta,data,transient,settings,get,xpack,monitoring,exporters,index,name,assert,equals,index,time,format,custom,time,format,if,custom,time,format,null,custom,time,format,yyyy,mm,dd,date,time,formatter,date,parser,isodate,time,format,date,time,with,zone,utc,date,time,formatter,date,formatter,date,time,format,for,pattern,custom,time,format,with,zone,utc,search,response,search,response,client,prepare,search,monitoring,set,size,100,get,assert,that,search,response,get,hits,get,total,hits,greater,than,0l,for,search,hit,hit,search,response,get,hits,get,hits,final,map,string,object,source,hit,get,source,as,map,assert,true,source,null,source,is,empty,false,final,string,timestamp,string,source,get,timestamp,final,string,type,string,source,get,type,assert,true,document,is,missing,field,strings,has,text,string,source,get,assert,true,document,is,missing,timestamp,field,strings,has,text,timestamp,assert,true,document,is,missing,type,field,strings,has,text,type,assert,equals,document,is,doc,doc,hit,get,type,suppress,warnings,unchecked,map,string,object,doc,source,map,string,object,source,get,doc,monitored,system,expected,system,if,doc,source,null,expected,system,monitored,system,es,else,expected,system,monitored,system,from,system,string,doc,source,get,string,date,time,date,formatter,print,date,parser,parse,date,time,timestamp,final,string,expected,index,monitoring,expected,system,get,system,date,time,assert,equals,expected,expected,index,but,got,hit,get,index,expected,index,hit,get,index,suppress,warnings,unchecked,map,string,object,source,node,map,string,object,source,get,if,shards,equals,type,false,assert,not,null,document,is,missing,field,source,node
LocalExporterIntegTests -> private void checkMonitoringDocs();1536314350;Checks that the monitoring documents all have the cluster_uuid, timestamp and source_node_fields and belongs to the right data or timestamped index.;private void checkMonitoringDocs() {_        ClusterStateResponse response = client().admin().cluster().prepareState().get()__        String customTimeFormat = response.getState().getMetaData().transientSettings()_                .get("xpack.monitoring.exporters._local.index.name.time_format")__        assertEquals(indexTimeFormat, customTimeFormat)__        if (customTimeFormat == null) {_            customTimeFormat = "YYYY.MM.dd"__        }__        DateTimeFormatter dateParser = ISODateTimeFormat.dateTime().withZoneUTC()__        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(customTimeFormat).withZoneUTC()___        SearchResponse searchResponse = client().prepareSearch(".monitoring-*").setSize(100).get()__        assertThat(searchResponse.getHits().getTotalHits(), greaterThan(0L))___        for (SearchHit hit : searchResponse.getHits().getHits()) {_            final Map<String, Object> source = hit.getSourceAsMap()___            assertTrue(source != null && source.isEmpty() == false)___            final String timestamp = (String) source.get("timestamp")__            final String type = (String) source.get("type")___            assertTrue("document is missing cluster_uuid field", Strings.hasText((String) source.get("cluster_uuid")))__            assertTrue("document is missing timestamp field", Strings.hasText(timestamp))__            assertTrue("document is missing type field", Strings.hasText(type))__            assertEquals("document _type is 'doc'", "doc", hit.getType())___            @SuppressWarnings("unchecked")_            Map<String, Object> docSource = (Map<String, Object>) source.get("doc")___            MonitoredSystem expectedSystem__            if (docSource == null) {_                _                expectedSystem = MonitoredSystem.ES__            } else {_                _                expectedSystem = MonitoredSystem.fromSystem((String) docSource.get("expected_system"))__            }__            String dateTime = dateFormatter.print(dateParser.parseDateTime(timestamp))__            final String expectedIndex = ".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-" + dateTime__            assertEquals("Expected " + expectedIndex + " but got " + hit.getIndex(), expectedIndex, hit.getIndex())___            @SuppressWarnings("unchecked")_            Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__            if ("shards".equals(type) == false) {_                assertNotNull("document is missing source_node field", sourceNode)__            }_        }_    };checks,that,the,monitoring,documents,all,have,the,timestamp,and,fields,and,belongs,to,the,right,data,or,timestamped,index;private,void,check,monitoring,docs,cluster,state,response,response,client,admin,cluster,prepare,state,get,string,custom,time,format,response,get,state,get,meta,data,transient,settings,get,xpack,monitoring,exporters,index,name,assert,equals,index,time,format,custom,time,format,if,custom,time,format,null,custom,time,format,yyyy,mm,dd,date,time,formatter,date,parser,isodate,time,format,date,time,with,zone,utc,date,time,formatter,date,formatter,date,time,format,for,pattern,custom,time,format,with,zone,utc,search,response,search,response,client,prepare,search,monitoring,set,size,100,get,assert,that,search,response,get,hits,get,total,hits,greater,than,0l,for,search,hit,hit,search,response,get,hits,get,hits,final,map,string,object,source,hit,get,source,as,map,assert,true,source,null,source,is,empty,false,final,string,timestamp,string,source,get,timestamp,final,string,type,string,source,get,type,assert,true,document,is,missing,field,strings,has,text,string,source,get,assert,true,document,is,missing,timestamp,field,strings,has,text,timestamp,assert,true,document,is,missing,type,field,strings,has,text,type,assert,equals,document,is,doc,doc,hit,get,type,suppress,warnings,unchecked,map,string,object,doc,source,map,string,object,source,get,doc,monitored,system,expected,system,if,doc,source,null,expected,system,monitored,system,es,else,expected,system,monitored,system,from,system,string,doc,source,get,string,date,time,date,formatter,print,date,parser,parse,date,time,timestamp,final,string,expected,index,monitoring,expected,system,get,system,date,time,assert,equals,expected,expected,index,but,got,hit,get,index,expected,index,hit,get,index,suppress,warnings,unchecked,map,string,object,source,node,map,string,object,source,get,if,shards,equals,type,false,assert,not,null,document,is,missing,field,source,node
LocalExporterIntegTests -> private void checkMonitoringDocs();1543854368;Checks that the monitoring documents all have the cluster_uuid, timestamp and source_node_fields and belongs to the right data or timestamped index.;private void checkMonitoringDocs() {_        ClusterStateResponse response = client().admin().cluster().prepareState().get()__        String customTimeFormat = response.getState().getMetaData().transientSettings()_                .get("xpack.monitoring.exporters._local.index.name.time_format")__        assertEquals(indexTimeFormat, customTimeFormat)__        if (customTimeFormat == null) {_            customTimeFormat = "YYYY.MM.dd"__        }__        DateTimeFormatter dateParser = ISODateTimeFormat.dateTime().withZoneUTC()__        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(customTimeFormat).withZoneUTC()___        SearchResponse searchResponse = client().prepareSearch(".monitoring-*").setSize(100).get()__        assertThat(searchResponse.getHits().getTotalHits(), greaterThan(0L))___        for (SearchHit hit : searchResponse.getHits().getHits()) {_            final Map<String, Object> source = hit.getSourceAsMap()___            assertTrue(source != null && source.isEmpty() == false)___            final String timestamp = (String) source.get("timestamp")__            final String type = (String) source.get("type")___            assertTrue("document is missing cluster_uuid field", Strings.hasText((String) source.get("cluster_uuid")))__            assertTrue("document is missing timestamp field", Strings.hasText(timestamp))__            assertTrue("document is missing type field", Strings.hasText(type))__            assertEquals("document _type is 'doc'", "doc", hit.getType())___            @SuppressWarnings("unchecked")_            Map<String, Object> docSource = (Map<String, Object>) source.get("doc")___            MonitoredSystem expectedSystem__            if (docSource == null) {_                _                expectedSystem = MonitoredSystem.ES__            } else {_                _                expectedSystem = MonitoredSystem.fromSystem((String) docSource.get("expected_system"))__            }__            String dateTime = dateFormatter.print(dateParser.parseDateTime(timestamp))__            final String expectedIndex = ".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-" + dateTime__            assertEquals("Expected " + expectedIndex + " but got " + hit.getIndex(), expectedIndex, hit.getIndex())___            @SuppressWarnings("unchecked")_            Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__            if ("shards".equals(type) == false) {_                assertNotNull("document is missing source_node field", sourceNode)__            }_        }_    };checks,that,the,monitoring,documents,all,have,the,timestamp,and,fields,and,belongs,to,the,right,data,or,timestamped,index;private,void,check,monitoring,docs,cluster,state,response,response,client,admin,cluster,prepare,state,get,string,custom,time,format,response,get,state,get,meta,data,transient,settings,get,xpack,monitoring,exporters,index,name,assert,equals,index,time,format,custom,time,format,if,custom,time,format,null,custom,time,format,yyyy,mm,dd,date,time,formatter,date,parser,isodate,time,format,date,time,with,zone,utc,date,time,formatter,date,formatter,date,time,format,for,pattern,custom,time,format,with,zone,utc,search,response,search,response,client,prepare,search,monitoring,set,size,100,get,assert,that,search,response,get,hits,get,total,hits,greater,than,0l,for,search,hit,hit,search,response,get,hits,get,hits,final,map,string,object,source,hit,get,source,as,map,assert,true,source,null,source,is,empty,false,final,string,timestamp,string,source,get,timestamp,final,string,type,string,source,get,type,assert,true,document,is,missing,field,strings,has,text,string,source,get,assert,true,document,is,missing,timestamp,field,strings,has,text,timestamp,assert,true,document,is,missing,type,field,strings,has,text,type,assert,equals,document,is,doc,doc,hit,get,type,suppress,warnings,unchecked,map,string,object,doc,source,map,string,object,source,get,doc,monitored,system,expected,system,if,doc,source,null,expected,system,monitored,system,es,else,expected,system,monitored,system,from,system,string,doc,source,get,string,date,time,date,formatter,print,date,parser,parse,date,time,timestamp,final,string,expected,index,monitoring,expected,system,get,system,date,time,assert,equals,expected,expected,index,but,got,hit,get,index,expected,index,hit,get,index,suppress,warnings,unchecked,map,string,object,source,node,map,string,object,source,get,if,shards,equals,type,false,assert,not,null,document,is,missing,field,source,node
LocalExporterIntegTests -> private void checkMonitoringDocs();1544035746;Checks that the monitoring documents all have the cluster_uuid, timestamp and source_node_fields and belongs to the right data or timestamped index.;private void checkMonitoringDocs() {_        ClusterStateResponse response = client().admin().cluster().prepareState().get()__        String customTimeFormat = response.getState().getMetaData().transientSettings()_                .get("xpack.monitoring.exporters._local.index.name.time_format")__        assertEquals(indexTimeFormat, customTimeFormat)__        if (customTimeFormat == null) {_            customTimeFormat = "YYYY.MM.dd"__        }__        DateTimeFormatter dateParser = ISODateTimeFormat.dateTime().withZoneUTC()__        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(customTimeFormat).withZoneUTC()___        SearchResponse searchResponse = client().prepareSearch(".monitoring-*").setSize(100).get()__        assertThat(searchResponse.getHits().getTotalHits().value, greaterThan(0L))___        for (SearchHit hit : searchResponse.getHits().getHits()) {_            final Map<String, Object> source = hit.getSourceAsMap()___            assertTrue(source != null && source.isEmpty() == false)___            final String timestamp = (String) source.get("timestamp")__            final String type = (String) source.get("type")___            assertTrue("document is missing cluster_uuid field", Strings.hasText((String) source.get("cluster_uuid")))__            assertTrue("document is missing timestamp field", Strings.hasText(timestamp))__            assertTrue("document is missing type field", Strings.hasText(type))__            assertEquals("document _type is 'doc'", "doc", hit.getType())___            @SuppressWarnings("unchecked")_            Map<String, Object> docSource = (Map<String, Object>) source.get("doc")___            MonitoredSystem expectedSystem__            if (docSource == null) {_                _                expectedSystem = MonitoredSystem.ES__            } else {_                _                expectedSystem = MonitoredSystem.fromSystem((String) docSource.get("expected_system"))__            }__            String dateTime = dateFormatter.print(dateParser.parseDateTime(timestamp))__            final String expectedIndex = ".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-" + dateTime__            assertEquals("Expected " + expectedIndex + " but got " + hit.getIndex(), expectedIndex, hit.getIndex())___            @SuppressWarnings("unchecked")_            Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__            if ("shards".equals(type) == false) {_                assertNotNull("document is missing source_node field", sourceNode)__            }_        }_    };checks,that,the,monitoring,documents,all,have,the,timestamp,and,fields,and,belongs,to,the,right,data,or,timestamped,index;private,void,check,monitoring,docs,cluster,state,response,response,client,admin,cluster,prepare,state,get,string,custom,time,format,response,get,state,get,meta,data,transient,settings,get,xpack,monitoring,exporters,index,name,assert,equals,index,time,format,custom,time,format,if,custom,time,format,null,custom,time,format,yyyy,mm,dd,date,time,formatter,date,parser,isodate,time,format,date,time,with,zone,utc,date,time,formatter,date,formatter,date,time,format,for,pattern,custom,time,format,with,zone,utc,search,response,search,response,client,prepare,search,monitoring,set,size,100,get,assert,that,search,response,get,hits,get,total,hits,value,greater,than,0l,for,search,hit,hit,search,response,get,hits,get,hits,final,map,string,object,source,hit,get,source,as,map,assert,true,source,null,source,is,empty,false,final,string,timestamp,string,source,get,timestamp,final,string,type,string,source,get,type,assert,true,document,is,missing,field,strings,has,text,string,source,get,assert,true,document,is,missing,timestamp,field,strings,has,text,timestamp,assert,true,document,is,missing,type,field,strings,has,text,type,assert,equals,document,is,doc,doc,hit,get,type,suppress,warnings,unchecked,map,string,object,doc,source,map,string,object,source,get,doc,monitored,system,expected,system,if,doc,source,null,expected,system,monitored,system,es,else,expected,system,monitored,system,from,system,string,doc,source,get,string,date,time,date,formatter,print,date,parser,parse,date,time,timestamp,final,string,expected,index,monitoring,expected,system,get,system,date,time,assert,equals,expected,expected,index,but,got,hit,get,index,expected,index,hit,get,index,suppress,warnings,unchecked,map,string,object,source,node,map,string,object,source,get,if,shards,equals,type,false,assert,not,null,document,is,missing,field,source,node
LocalExporterIntegTests -> private void checkMonitoringDocs();1548236405;Checks that the monitoring documents all have the cluster_uuid, timestamp and source_node_fields and belongs to the right data or timestamped index.;private void checkMonitoringDocs() {_        ClusterStateResponse response = client().admin().cluster().prepareState().get()__        String customTimeFormat = response.getState().getMetaData().transientSettings()_                .get("xpack.monitoring.exporters._local.index.name.time_format")__        assertEquals(indexTimeFormat, customTimeFormat)__        if (customTimeFormat == null) {_            customTimeFormat = "YYYY.MM.dd"__        }__        DateTimeFormatter dateParser = ISODateTimeFormat.dateTime().withZoneUTC()__        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(customTimeFormat).withZoneUTC()___        SearchResponse searchResponse = client().prepareSearch(".monitoring-*").setSize(100).get()__        assertThat(searchResponse.getHits().getTotalHits().value, greaterThan(0L))___        for (SearchHit hit : searchResponse.getHits().getHits()) {_            final Map<String, Object> source = hit.getSourceAsMap()___            assertTrue(source != null && source.isEmpty() == false)___            final String timestamp = (String) source.get("timestamp")__            final String type = (String) source.get("type")___            assertTrue("document is missing cluster_uuid field", Strings.hasText((String) source.get("cluster_uuid")))__            assertTrue("document is missing timestamp field", Strings.hasText(timestamp))__            assertTrue("document is missing type field", Strings.hasText(type))__            assertEquals("document _type is 'doc'", "doc", hit.getType())___            @SuppressWarnings("unchecked")_            Map<String, Object> docSource = (Map<String, Object>) source.get("doc")___            MonitoredSystem expectedSystem__            if (docSource == null) {_                _                expectedSystem = MonitoredSystem.ES__            } else {_                _                expectedSystem = MonitoredSystem.fromSystem((String) docSource.get("expected_system"))__            }__            String dateTime = dateFormatter.print(dateParser.parseDateTime(timestamp))__            final String expectedIndex = ".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-" + dateTime__            assertEquals("Expected " + expectedIndex + " but got " + hit.getIndex(), expectedIndex, hit.getIndex())___            @SuppressWarnings("unchecked")_            Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__            if ("shards".equals(type) == false) {_                assertNotNull("document is missing source_node field", sourceNode)__            }_        }_    };checks,that,the,monitoring,documents,all,have,the,timestamp,and,fields,and,belongs,to,the,right,data,or,timestamped,index;private,void,check,monitoring,docs,cluster,state,response,response,client,admin,cluster,prepare,state,get,string,custom,time,format,response,get,state,get,meta,data,transient,settings,get,xpack,monitoring,exporters,index,name,assert,equals,index,time,format,custom,time,format,if,custom,time,format,null,custom,time,format,yyyy,mm,dd,date,time,formatter,date,parser,isodate,time,format,date,time,with,zone,utc,date,time,formatter,date,formatter,date,time,format,for,pattern,custom,time,format,with,zone,utc,search,response,search,response,client,prepare,search,monitoring,set,size,100,get,assert,that,search,response,get,hits,get,total,hits,value,greater,than,0l,for,search,hit,hit,search,response,get,hits,get,hits,final,map,string,object,source,hit,get,source,as,map,assert,true,source,null,source,is,empty,false,final,string,timestamp,string,source,get,timestamp,final,string,type,string,source,get,type,assert,true,document,is,missing,field,strings,has,text,string,source,get,assert,true,document,is,missing,timestamp,field,strings,has,text,timestamp,assert,true,document,is,missing,type,field,strings,has,text,type,assert,equals,document,is,doc,doc,hit,get,type,suppress,warnings,unchecked,map,string,object,doc,source,map,string,object,source,get,doc,monitored,system,expected,system,if,doc,source,null,expected,system,monitored,system,es,else,expected,system,monitored,system,from,system,string,doc,source,get,string,date,time,date,formatter,print,date,parser,parse,date,time,timestamp,final,string,expected,index,monitoring,expected,system,get,system,date,time,assert,equals,expected,expected,index,but,got,hit,get,index,expected,index,hit,get,index,suppress,warnings,unchecked,map,string,object,source,node,map,string,object,source,get,if,shards,equals,type,false,assert,not,null,document,is,missing,field,source,node
LocalExporterIntegTests -> private void checkMonitoringDocs();1549288028;Checks that the monitoring documents all have the cluster_uuid, timestamp and source_node_fields and belongs to the right data or timestamped index.;private void checkMonitoringDocs() {_        ClusterStateResponse response = client().admin().cluster().prepareState().get()__        String customTimeFormat = response.getState().getMetaData().transientSettings()_                .get("xpack.monitoring.exporters._local.index.name.time_format")__        assertEquals(indexTimeFormat, customTimeFormat)__        if (customTimeFormat == null) {_            customTimeFormat = "yyyy.MM.dd"__        }__        DateFormatter dateParser = DateFormatter.forPattern("strict_date_time")__        DateFormatter dateFormatter = DateFormatter.forPattern(customTimeFormat).withZone(ZoneOffset.UTC)___        SearchResponse searchResponse = client().prepareSearch(".monitoring-*").setSize(100).get()__        assertThat(searchResponse.getHits().getTotalHits().value, greaterThan(0L))___        for (SearchHit hit : searchResponse.getHits().getHits()) {_            final Map<String, Object> source = hit.getSourceAsMap()___            assertTrue(source != null && source.isEmpty() == false)___            final String timestamp = (String) source.get("timestamp")__            final String type = (String) source.get("type")___            assertTrue("document is missing cluster_uuid field", Strings.hasText((String) source.get("cluster_uuid")))__            assertTrue("document is missing timestamp field", Strings.hasText(timestamp))__            assertTrue("document is missing type field", Strings.hasText(type))__            assertEquals("document _type is 'doc'", "doc", hit.getType())___            @SuppressWarnings("unchecked")_            Map<String, Object> docSource = (Map<String, Object>) source.get("doc")___            MonitoredSystem expectedSystem__            if (docSource == null) {_                _                expectedSystem = MonitoredSystem.ES__            } else {_                _                expectedSystem = MonitoredSystem.fromSystem((String) docSource.get("expected_system"))__            }__            String dateTime = dateFormatter.format(dateParser.parse(timestamp))__            final String expectedIndex = ".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-" + dateTime__            assertEquals("Expected " + expectedIndex + " but got " + hit.getIndex(), expectedIndex, hit.getIndex())___            @SuppressWarnings("unchecked")_            Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__            if ("shards".equals(type) == false) {_                assertNotNull("document is missing source_node field", sourceNode)__            }_        }_    };checks,that,the,monitoring,documents,all,have,the,timestamp,and,fields,and,belongs,to,the,right,data,or,timestamped,index;private,void,check,monitoring,docs,cluster,state,response,response,client,admin,cluster,prepare,state,get,string,custom,time,format,response,get,state,get,meta,data,transient,settings,get,xpack,monitoring,exporters,index,name,assert,equals,index,time,format,custom,time,format,if,custom,time,format,null,custom,time,format,yyyy,mm,dd,date,formatter,date,parser,date,formatter,for,pattern,date,formatter,date,formatter,date,formatter,for,pattern,custom,time,format,with,zone,zone,offset,utc,search,response,search,response,client,prepare,search,monitoring,set,size,100,get,assert,that,search,response,get,hits,get,total,hits,value,greater,than,0l,for,search,hit,hit,search,response,get,hits,get,hits,final,map,string,object,source,hit,get,source,as,map,assert,true,source,null,source,is,empty,false,final,string,timestamp,string,source,get,timestamp,final,string,type,string,source,get,type,assert,true,document,is,missing,field,strings,has,text,string,source,get,assert,true,document,is,missing,timestamp,field,strings,has,text,timestamp,assert,true,document,is,missing,type,field,strings,has,text,type,assert,equals,document,is,doc,doc,hit,get,type,suppress,warnings,unchecked,map,string,object,doc,source,map,string,object,source,get,doc,monitored,system,expected,system,if,doc,source,null,expected,system,monitored,system,es,else,expected,system,monitored,system,from,system,string,doc,source,get,string,date,time,date,formatter,format,date,parser,parse,timestamp,final,string,expected,index,monitoring,expected,system,get,system,date,time,assert,equals,expected,expected,index,but,got,hit,get,index,expected,index,hit,get,index,suppress,warnings,unchecked,map,string,object,source,node,map,string,object,source,get,if,shards,equals,type,false,assert,not,null,document,is,missing,field,source,node
LocalExporterIntegTests -> private void checkMonitoringDocs();1549306683;Checks that the monitoring documents all have the cluster_uuid, timestamp and source_node_fields and belongs to the right data or timestamped index.;private void checkMonitoringDocs() {_        ClusterStateResponse response = client().admin().cluster().prepareState().get()__        String customTimeFormat = response.getState().getMetaData().transientSettings()_                .get("xpack.monitoring.exporters._local.index.name.time_format")__        assertEquals(indexTimeFormat, customTimeFormat)__        if (customTimeFormat == null) {_            customTimeFormat = "yyyy.MM.dd"__        }__        DateFormatter dateParser = DateFormatter.forPattern("strict_date_time")__        DateFormatter dateFormatter = DateFormatter.forPattern(customTimeFormat).withZone(ZoneOffset.UTC)___        SearchResponse searchResponse = client().prepareSearch(".monitoring-*").setSize(100).get()__        assertThat(searchResponse.getHits().getTotalHits().value, greaterThan(0L))___        for (SearchHit hit : searchResponse.getHits().getHits()) {_            final Map<String, Object> source = hit.getSourceAsMap()___            assertTrue(source != null && source.isEmpty() == false)___            final String timestamp = (String) source.get("timestamp")__            final String type = (String) source.get("type")___            assertTrue("document is missing cluster_uuid field", Strings.hasText((String) source.get("cluster_uuid")))__            assertTrue("document is missing timestamp field", Strings.hasText(timestamp))__            assertTrue("document is missing type field", Strings.hasText(type))___            @SuppressWarnings("unchecked")_            Map<String, Object> docSource = (Map<String, Object>) source.get("doc")___            MonitoredSystem expectedSystem__            if (docSource == null) {_                _                expectedSystem = MonitoredSystem.ES__            } else {_                _                expectedSystem = MonitoredSystem.fromSystem((String) docSource.get("expected_system"))__            }__            String dateTime = dateFormatter.format(dateParser.parse(timestamp))__            final String expectedIndex = ".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-" + dateTime__            assertEquals("Expected " + expectedIndex + " but got " + hit.getIndex(), expectedIndex, hit.getIndex())___            @SuppressWarnings("unchecked")_            Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__            if ("shards".equals(type) == false) {_                assertNotNull("document is missing source_node field", sourceNode)__            }_        }_    };checks,that,the,monitoring,documents,all,have,the,timestamp,and,fields,and,belongs,to,the,right,data,or,timestamped,index;private,void,check,monitoring,docs,cluster,state,response,response,client,admin,cluster,prepare,state,get,string,custom,time,format,response,get,state,get,meta,data,transient,settings,get,xpack,monitoring,exporters,index,name,assert,equals,index,time,format,custom,time,format,if,custom,time,format,null,custom,time,format,yyyy,mm,dd,date,formatter,date,parser,date,formatter,for,pattern,date,formatter,date,formatter,date,formatter,for,pattern,custom,time,format,with,zone,zone,offset,utc,search,response,search,response,client,prepare,search,monitoring,set,size,100,get,assert,that,search,response,get,hits,get,total,hits,value,greater,than,0l,for,search,hit,hit,search,response,get,hits,get,hits,final,map,string,object,source,hit,get,source,as,map,assert,true,source,null,source,is,empty,false,final,string,timestamp,string,source,get,timestamp,final,string,type,string,source,get,type,assert,true,document,is,missing,field,strings,has,text,string,source,get,assert,true,document,is,missing,timestamp,field,strings,has,text,timestamp,assert,true,document,is,missing,type,field,strings,has,text,type,suppress,warnings,unchecked,map,string,object,doc,source,map,string,object,source,get,doc,monitored,system,expected,system,if,doc,source,null,expected,system,monitored,system,es,else,expected,system,monitored,system,from,system,string,doc,source,get,string,date,time,date,formatter,format,date,parser,parse,timestamp,final,string,expected,index,monitoring,expected,system,get,system,date,time,assert,equals,expected,expected,index,but,got,hit,get,index,expected,index,hit,get,index,suppress,warnings,unchecked,map,string,object,source,node,map,string,object,source,get,if,shards,equals,type,false,assert,not,null,document,is,missing,field,source,node
LocalExporterIntegTests -> private void checkMonitoringTemplates();1524684173;Checks that the monitoring templates have been created by the local exporter;private void checkMonitoringTemplates() {_        final Set<String> templates = new HashSet<>()__        templates.add(".monitoring-alerts")__        templates.add(".monitoring-es")__        templates.add(".monitoring-kibana")__        templates.add(".monitoring-logstash")__        templates.add(".monitoring-beats")___        GetIndexTemplatesResponse response = client().admin().indices().prepareGetTemplates(".monitoring-*").get()__        Set<String> actualTemplates = response.getIndexTemplates().stream().map(IndexTemplateMetaData::getName).collect(Collectors.toSet())__        assertEquals(templates, actualTemplates)__    };checks,that,the,monitoring,templates,have,been,created,by,the,local,exporter;private,void,check,monitoring,templates,final,set,string,templates,new,hash,set,templates,add,monitoring,alerts,templates,add,monitoring,es,templates,add,monitoring,kibana,templates,add,monitoring,logstash,templates,add,monitoring,beats,get,index,templates,response,response,client,admin,indices,prepare,get,templates,monitoring,get,set,string,actual,templates,response,get,index,templates,stream,map,index,template,meta,data,get,name,collect,collectors,to,set,assert,equals,templates,actual,templates
LocalExporterIntegTests -> private void checkMonitoringTemplates();1536314350;Checks that the monitoring templates have been created by the local exporter;private void checkMonitoringTemplates() {_        final Set<String> templates = new HashSet<>()__        templates.add(".monitoring-alerts")__        templates.add(".monitoring-es")__        templates.add(".monitoring-kibana")__        templates.add(".monitoring-logstash")__        templates.add(".monitoring-beats")___        GetIndexTemplatesResponse response = client().admin().indices().prepareGetTemplates(".monitoring-*").get()__        Set<String> actualTemplates = response.getIndexTemplates().stream().map(IndexTemplateMetaData::getName).collect(Collectors.toSet())__        assertEquals(templates, actualTemplates)__    };checks,that,the,monitoring,templates,have,been,created,by,the,local,exporter;private,void,check,monitoring,templates,final,set,string,templates,new,hash,set,templates,add,monitoring,alerts,templates,add,monitoring,es,templates,add,monitoring,kibana,templates,add,monitoring,logstash,templates,add,monitoring,beats,get,index,templates,response,response,client,admin,indices,prepare,get,templates,monitoring,get,set,string,actual,templates,response,get,index,templates,stream,map,index,template,meta,data,get,name,collect,collectors,to,set,assert,equals,templates,actual,templates
LocalExporterIntegTests -> private void checkMonitoringTemplates();1543854368;Checks that the monitoring templates have been created by the local exporter;private void checkMonitoringTemplates() {_        final Set<String> templates = new HashSet<>()__        templates.add(".monitoring-alerts")__        templates.add(".monitoring-es")__        templates.add(".monitoring-kibana")__        templates.add(".monitoring-logstash")__        templates.add(".monitoring-beats")___        GetIndexTemplatesResponse response = client().admin().indices().prepareGetTemplates(".monitoring-*").get()__        Set<String> actualTemplates = response.getIndexTemplates().stream().map(IndexTemplateMetaData::getName).collect(Collectors.toSet())__        assertEquals(templates, actualTemplates)__    };checks,that,the,monitoring,templates,have,been,created,by,the,local,exporter;private,void,check,monitoring,templates,final,set,string,templates,new,hash,set,templates,add,monitoring,alerts,templates,add,monitoring,es,templates,add,monitoring,kibana,templates,add,monitoring,logstash,templates,add,monitoring,beats,get,index,templates,response,response,client,admin,indices,prepare,get,templates,monitoring,get,set,string,actual,templates,response,get,index,templates,stream,map,index,template,meta,data,get,name,collect,collectors,to,set,assert,equals,templates,actual,templates
LocalExporterIntegTests -> private void checkMonitoringTemplates();1544035746;Checks that the monitoring templates have been created by the local exporter;private void checkMonitoringTemplates() {_        final Set<String> templates = new HashSet<>()__        templates.add(".monitoring-alerts")__        templates.add(".monitoring-es")__        templates.add(".monitoring-kibana")__        templates.add(".monitoring-logstash")__        templates.add(".monitoring-beats")___        GetIndexTemplatesResponse response = client().admin().indices().prepareGetTemplates(".monitoring-*").get()__        Set<String> actualTemplates = response.getIndexTemplates().stream().map(IndexTemplateMetaData::getName).collect(Collectors.toSet())__        assertEquals(templates, actualTemplates)__    };checks,that,the,monitoring,templates,have,been,created,by,the,local,exporter;private,void,check,monitoring,templates,final,set,string,templates,new,hash,set,templates,add,monitoring,alerts,templates,add,monitoring,es,templates,add,monitoring,kibana,templates,add,monitoring,logstash,templates,add,monitoring,beats,get,index,templates,response,response,client,admin,indices,prepare,get,templates,monitoring,get,set,string,actual,templates,response,get,index,templates,stream,map,index,template,meta,data,get,name,collect,collectors,to,set,assert,equals,templates,actual,templates
LocalExporterIntegTests -> private void checkMonitoringTemplates();1548236405;Checks that the monitoring templates have been created by the local exporter;private void checkMonitoringTemplates() {_        final Set<String> templates = new HashSet<>()__        templates.add(".monitoring-alerts")__        templates.add(".monitoring-es")__        templates.add(".monitoring-kibana")__        templates.add(".monitoring-logstash")__        templates.add(".monitoring-beats")___        GetIndexTemplatesResponse response = client().admin().indices().prepareGetTemplates(".monitoring-*").get()__        Set<String> actualTemplates = response.getIndexTemplates().stream().map(IndexTemplateMetaData::getName).collect(Collectors.toSet())__        assertEquals(templates, actualTemplates)__    };checks,that,the,monitoring,templates,have,been,created,by,the,local,exporter;private,void,check,monitoring,templates,final,set,string,templates,new,hash,set,templates,add,monitoring,alerts,templates,add,monitoring,es,templates,add,monitoring,kibana,templates,add,monitoring,logstash,templates,add,monitoring,beats,get,index,templates,response,response,client,admin,indices,prepare,get,templates,monitoring,get,set,string,actual,templates,response,get,index,templates,stream,map,index,template,meta,data,get,name,collect,collectors,to,set,assert,equals,templates,actual,templates
LocalExporterIntegTests -> private void checkMonitoringTemplates();1549288028;Checks that the monitoring templates have been created by the local exporter;private void checkMonitoringTemplates() {_        final Set<String> templates = new HashSet<>()__        templates.add(".monitoring-alerts")__        templates.add(".monitoring-es")__        templates.add(".monitoring-kibana")__        templates.add(".monitoring-logstash")__        templates.add(".monitoring-beats")___        GetIndexTemplatesResponse response = client().admin().indices().prepareGetTemplates(".monitoring-*").get()__        Set<String> actualTemplates = response.getIndexTemplates().stream().map(IndexTemplateMetaData::getName).collect(Collectors.toSet())__        assertEquals(templates, actualTemplates)__    };checks,that,the,monitoring,templates,have,been,created,by,the,local,exporter;private,void,check,monitoring,templates,final,set,string,templates,new,hash,set,templates,add,monitoring,alerts,templates,add,monitoring,es,templates,add,monitoring,kibana,templates,add,monitoring,logstash,templates,add,monitoring,beats,get,index,templates,response,response,client,admin,indices,prepare,get,templates,monitoring,get,set,string,actual,templates,response,get,index,templates,stream,map,index,template,meta,data,get,name,collect,collectors,to,set,assert,equals,templates,actual,templates
LocalExporterIntegTests -> private void checkMonitoringTemplates();1549306683;Checks that the monitoring templates have been created by the local exporter;private void checkMonitoringTemplates() {_        final Set<String> templates = new HashSet<>()__        templates.add(".monitoring-alerts")__        templates.add(".monitoring-es")__        templates.add(".monitoring-kibana")__        templates.add(".monitoring-logstash")__        templates.add(".monitoring-beats")___        GetIndexTemplatesResponse response = client().admin().indices().prepareGetTemplates(".monitoring-*").get()__        Set<String> actualTemplates = response.getIndexTemplates().stream().map(IndexTemplateMetaData::getName).collect(Collectors.toSet())__        assertEquals(templates, actualTemplates)__    };checks,that,the,monitoring,templates,have,been,created,by,the,local,exporter;private,void,check,monitoring,templates,final,set,string,templates,new,hash,set,templates,add,monitoring,alerts,templates,add,monitoring,es,templates,add,monitoring,kibana,templates,add,monitoring,logstash,templates,add,monitoring,beats,get,index,templates,response,response,client,admin,indices,prepare,get,templates,monitoring,get,set,string,actual,templates,response,get,index,templates,stream,map,index,template,meta,data,get,name,collect,collectors,to,set,assert,equals,templates,actual,templates
LocalExporterIntegTests -> private void checkMonitoringPipelines();1524684173;Checks that the monitoring ingest pipelines have been created by the local exporter;private void checkMonitoringPipelines() {_        final Set<String> expectedPipelines =_                Arrays.stream(PIPELINE_IDS).map(MonitoringTemplateUtils::pipelineName).collect(Collectors.toSet())___        final GetPipelineResponse response = client().admin().cluster().prepareGetPipeline("xpack_monitoring_*").get()___        _        final Set<String> pipelines = response.pipelines().stream().map(PipelineConfiguration::getId).collect(Collectors.toSet())___        assertEquals("Missing expected pipelines", expectedPipelines, pipelines)__        assertTrue("monitoring ingest pipeline not found", response.isFound())__    };checks,that,the,monitoring,ingest,pipelines,have,been,created,by,the,local,exporter;private,void,check,monitoring,pipelines,final,set,string,expected,pipelines,arrays,stream,map,monitoring,template,utils,pipeline,name,collect,collectors,to,set,final,get,pipeline,response,response,client,admin,cluster,prepare,get,pipeline,get,final,set,string,pipelines,response,pipelines,stream,map,pipeline,configuration,get,id,collect,collectors,to,set,assert,equals,missing,expected,pipelines,expected,pipelines,pipelines,assert,true,monitoring,ingest,pipeline,not,found,response,is,found
LocalExporterIntegTests -> private void checkMonitoringPipelines();1536314350;Checks that the monitoring ingest pipelines have been created by the local exporter;private void checkMonitoringPipelines() {_        final Set<String> expectedPipelines =_                Arrays.stream(PIPELINE_IDS).map(MonitoringTemplateUtils::pipelineName).collect(Collectors.toSet())___        final GetPipelineResponse response = client().admin().cluster().prepareGetPipeline("xpack_monitoring_*").get()___        _        final Set<String> pipelines = response.pipelines().stream().map(PipelineConfiguration::getId).collect(Collectors.toSet())___        assertEquals("Missing expected pipelines", expectedPipelines, pipelines)__        assertTrue("monitoring ingest pipeline not found", response.isFound())__    };checks,that,the,monitoring,ingest,pipelines,have,been,created,by,the,local,exporter;private,void,check,monitoring,pipelines,final,set,string,expected,pipelines,arrays,stream,map,monitoring,template,utils,pipeline,name,collect,collectors,to,set,final,get,pipeline,response,response,client,admin,cluster,prepare,get,pipeline,get,final,set,string,pipelines,response,pipelines,stream,map,pipeline,configuration,get,id,collect,collectors,to,set,assert,equals,missing,expected,pipelines,expected,pipelines,pipelines,assert,true,monitoring,ingest,pipeline,not,found,response,is,found
LocalExporterIntegTests -> private void checkMonitoringPipelines();1543854368;Checks that the monitoring ingest pipelines have been created by the local exporter;private void checkMonitoringPipelines() {_        final Set<String> expectedPipelines =_                Arrays.stream(PIPELINE_IDS).map(MonitoringTemplateUtils::pipelineName).collect(Collectors.toSet())___        final GetPipelineResponse response = client().admin().cluster().prepareGetPipeline("xpack_monitoring_*").get()___        _        final Set<String> pipelines = response.pipelines().stream().map(PipelineConfiguration::getId).collect(Collectors.toSet())___        assertEquals("Missing expected pipelines", expectedPipelines, pipelines)__        assertTrue("monitoring ingest pipeline not found", response.isFound())__    };checks,that,the,monitoring,ingest,pipelines,have,been,created,by,the,local,exporter;private,void,check,monitoring,pipelines,final,set,string,expected,pipelines,arrays,stream,map,monitoring,template,utils,pipeline,name,collect,collectors,to,set,final,get,pipeline,response,response,client,admin,cluster,prepare,get,pipeline,get,final,set,string,pipelines,response,pipelines,stream,map,pipeline,configuration,get,id,collect,collectors,to,set,assert,equals,missing,expected,pipelines,expected,pipelines,pipelines,assert,true,monitoring,ingest,pipeline,not,found,response,is,found
LocalExporterIntegTests -> private void checkMonitoringPipelines();1544035746;Checks that the monitoring ingest pipelines have been created by the local exporter;private void checkMonitoringPipelines() {_        final Set<String> expectedPipelines =_                Arrays.stream(PIPELINE_IDS).map(MonitoringTemplateUtils::pipelineName).collect(Collectors.toSet())___        final GetPipelineResponse response = client().admin().cluster().prepareGetPipeline("xpack_monitoring_*").get()___        _        final Set<String> pipelines = response.pipelines().stream().map(PipelineConfiguration::getId).collect(Collectors.toSet())___        assertEquals("Missing expected pipelines", expectedPipelines, pipelines)__        assertTrue("monitoring ingest pipeline not found", response.isFound())__    };checks,that,the,monitoring,ingest,pipelines,have,been,created,by,the,local,exporter;private,void,check,monitoring,pipelines,final,set,string,expected,pipelines,arrays,stream,map,monitoring,template,utils,pipeline,name,collect,collectors,to,set,final,get,pipeline,response,response,client,admin,cluster,prepare,get,pipeline,get,final,set,string,pipelines,response,pipelines,stream,map,pipeline,configuration,get,id,collect,collectors,to,set,assert,equals,missing,expected,pipelines,expected,pipelines,pipelines,assert,true,monitoring,ingest,pipeline,not,found,response,is,found
LocalExporterIntegTests -> private void checkMonitoringPipelines();1548236405;Checks that the monitoring ingest pipelines have been created by the local exporter;private void checkMonitoringPipelines() {_        final Set<String> expectedPipelines =_                Arrays.stream(PIPELINE_IDS).map(MonitoringTemplateUtils::pipelineName).collect(Collectors.toSet())___        final GetPipelineResponse response = client().admin().cluster().prepareGetPipeline("xpack_monitoring_*").get()___        _        final Set<String> pipelines = response.pipelines().stream().map(PipelineConfiguration::getId).collect(Collectors.toSet())___        assertEquals("Missing expected pipelines", expectedPipelines, pipelines)__        assertTrue("monitoring ingest pipeline not found", response.isFound())__    };checks,that,the,monitoring,ingest,pipelines,have,been,created,by,the,local,exporter;private,void,check,monitoring,pipelines,final,set,string,expected,pipelines,arrays,stream,map,monitoring,template,utils,pipeline,name,collect,collectors,to,set,final,get,pipeline,response,response,client,admin,cluster,prepare,get,pipeline,get,final,set,string,pipelines,response,pipelines,stream,map,pipeline,configuration,get,id,collect,collectors,to,set,assert,equals,missing,expected,pipelines,expected,pipelines,pipelines,assert,true,monitoring,ingest,pipeline,not,found,response,is,found
LocalExporterIntegTests -> private void checkMonitoringPipelines();1549288028;Checks that the monitoring ingest pipelines have been created by the local exporter;private void checkMonitoringPipelines() {_        final Set<String> expectedPipelines =_                Arrays.stream(PIPELINE_IDS).map(MonitoringTemplateUtils::pipelineName).collect(Collectors.toSet())___        final GetPipelineResponse response = client().admin().cluster().prepareGetPipeline("xpack_monitoring_*").get()___        _        final Set<String> pipelines = response.pipelines().stream().map(PipelineConfiguration::getId).collect(Collectors.toSet())___        assertEquals("Missing expected pipelines", expectedPipelines, pipelines)__        assertTrue("monitoring ingest pipeline not found", response.isFound())__    };checks,that,the,monitoring,ingest,pipelines,have,been,created,by,the,local,exporter;private,void,check,monitoring,pipelines,final,set,string,expected,pipelines,arrays,stream,map,monitoring,template,utils,pipeline,name,collect,collectors,to,set,final,get,pipeline,response,response,client,admin,cluster,prepare,get,pipeline,get,final,set,string,pipelines,response,pipelines,stream,map,pipeline,configuration,get,id,collect,collectors,to,set,assert,equals,missing,expected,pipelines,expected,pipelines,pipelines,assert,true,monitoring,ingest,pipeline,not,found,response,is,found
LocalExporterIntegTests -> private void checkMonitoringPipelines();1549306683;Checks that the monitoring ingest pipelines have been created by the local exporter;private void checkMonitoringPipelines() {_        final Set<String> expectedPipelines =_                Arrays.stream(PIPELINE_IDS).map(MonitoringTemplateUtils::pipelineName).collect(Collectors.toSet())___        final GetPipelineResponse response = client().admin().cluster().prepareGetPipeline("xpack_monitoring_*").get()___        _        final Set<String> pipelines = response.pipelines().stream().map(PipelineConfiguration::getId).collect(Collectors.toSet())___        assertEquals("Missing expected pipelines", expectedPipelines, pipelines)__        assertTrue("monitoring ingest pipeline not found", response.isFound())__    };checks,that,the,monitoring,ingest,pipelines,have,been,created,by,the,local,exporter;private,void,check,monitoring,pipelines,final,set,string,expected,pipelines,arrays,stream,map,monitoring,template,utils,pipeline,name,collect,collectors,to,set,final,get,pipeline,response,response,client,admin,cluster,prepare,get,pipeline,get,final,set,string,pipelines,response,pipelines,stream,map,pipeline,configuration,get,id,collect,collectors,to,set,assert,equals,missing,expected,pipelines,expected,pipelines,pipelines,assert,true,monitoring,ingest,pipeline,not,found,response,is,found
