# id;timestamp;commentText;codeText;commentWords;codeWords
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1532353780;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1537202470;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1537300661;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1537371806;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1538509426;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1541464025;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        final Settings settings = Settings.builder()_            .put("cluster.metadata.display_name", "my cluster")_            .build()__        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,final,settings,settings,settings,builder,put,cluster,metadata,my,cluster,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1543854368;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        final Settings settings = Settings.builder()_            .put("cluster.metadata.display_name", "my cluster")_            .build()__        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,final,settings,settings,settings,builder,put,cluster,metadata,my,cluster,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1544035746;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        final Settings settings = Settings.builder()_            .put("cluster.metadata.display_name", "my cluster")_            .build()__        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,final,settings,settings,settings,builder,put,cluster,metadata,my,cluster,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1544081506;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        final Settings settings = Settings.builder()_            .put("cluster.metadata.display_name", "my cluster")_            .build()__        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,final,settings,settings,settings,builder,put,cluster,metadata,my,cluster,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1547156119;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        final Settings settings = Settings.builder()_            .put("cluster.metadata.display_name", "my cluster")_            .build()__        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,final,settings,settings,settings,builder,put,cluster,metadata,my,cluster,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1549288028;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        final Settings settings = Settings.builder()_            .put("cluster.metadata.display_name", "my cluster")_            .build()__        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,final,settings,settings,settings,builder,put,cluster,metadata,my,cluster,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1549306683;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        final Settings settings = Settings.builder()_            .put("cluster.metadata.display_name", "my cluster")_            .build()__        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,final,settings,settings,settings,builder,put,cluster,metadata,my,cluster,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")     public void testMonitoringService() throws Exception;1550830873;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/29880")_    public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        final Settings settings = Settings.builder()_            .put("cluster.metadata.display_name", "my cluster")_            .build()__        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,29880,public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,final,settings,settings,settings,builder,put,cluster,metadata,my,cluster,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> @SuppressWarnings("unchecked")     public void testMonitoringBulk() throws Exception;1524684173;Monitoring Bulk API test:__This test uses the Monitoring Bulk API to index document as an external application like Kibana would do. It_then ensure that the documents were correctly indexed and have the expected information.;@SuppressWarnings("unchecked")_    public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            _            _            _            __            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,api,test,this,test,uses,the,monitoring,bulk,api,to,index,document,as,an,external,application,like,kibana,would,do,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information;suppress,warnings,unchecked,public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> @SuppressWarnings("unchecked")     public void testMonitoringBulk() throws Exception;1525076988;Monitoring Bulk API test:__This test uses the Monitoring Bulk API to index document as an external application like Kibana would do. It_then ensure that the documents were correctly indexed and have the expected information.;@SuppressWarnings("unchecked")_    public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            _            _            _            __            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,api,test,this,test,uses,the,monitoring,bulk,api,to,index,document,as,an,external,application,like,kibana,would,do,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information;suppress,warnings,unchecked,public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringService() throws Exception;1535046779;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> public void testMonitoringService() throws Exception;1535383145;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> public void testMonitoringService() throws Exception;1536177418;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> public void testMonitoringService() throws Exception;1549881451;Monitoring Service test:__This test waits for the monitoring service to collect monitoring documents and then checks that all expected documents_have been indexed with the expected information.;public void testMonitoringService() throws Exception {_        final boolean createAPMIndex = randomBoolean()__        final String indexName = createAPMIndex ? "apm-2017.11.06" : "books"___        assertThat(client().prepareIndex(indexName, "doc", "0")_                           .setRefreshPolicy("true")_                           .setSource("{\"field\":\"value\"}", XContentType.JSON)_                           .get()_                           .status(),_                   is(RestStatus.CREATED))___        final Settings settings = Settings.builder()_            .put("cluster.metadata.display_name", "my cluster")_            .build()__        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        whenExportersAreReady(() -> {_            final AtomicReference<SearchResponse> searchResponse = new AtomicReference<>()___            assertBusy(() -> {_                final SearchResponse response =_                        client().prepareSearch(".monitoring-es-*")_                                .setCollapse(new CollapseBuilder("type"))_                                .addSort("timestamp", SortOrder.DESC)_                                .get()___                assertThat(response.status(), is(RestStatus.OK))__                assertThat("Expecting a minimum number of 6 docs, one per collector",_                           response.getHits().getHits().length,_                           greaterThanOrEqualTo(6))___                searchResponse.set(response)__            })___            for (final SearchHit hit : searchResponse.get().getHits()) {_                final Map<String, Object> searchHit = toMap(hit)__                final String type = (String) extractValue("_source.type", searchHit)___                assertMonitoringDoc(searchHit, MonitoredSystem.ES, type, MonitoringService.MIN_INTERVAL)___                if (ClusterStatsMonitoringDoc.TYPE.equals(type)) {_                    assertClusterStatsMonitoringDoc(searchHit, createAPMIndex)__                } else if (IndexRecoveryMonitoringDoc.TYPE.equals(type)) {_                    assertIndexRecoveryMonitoringDoc(searchHit)__                } else if (IndicesStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndicesStatsMonitoringDoc(searchHit)__                } else if (IndexStatsMonitoringDoc.TYPE.equals(type)) {_                    assertIndexStatsMonitoringDoc(searchHit)__                } else if (NodeStatsMonitoringDoc.TYPE.equals(type)) {_                    assertNodeStatsMonitoringDoc(searchHit)__                } else if (ShardMonitoringDoc.TYPE.equals(type)) {_                    assertShardMonitoringDoc(searchHit)__                } else {_                    fail("Monitoring document of type [" + type + "] is not supported by this test")__                }_            }_        })___    };monitoring,service,test,this,test,waits,for,the,monitoring,service,to,collect,monitoring,documents,and,then,checks,that,all,expected,documents,have,been,indexed,with,the,expected,information;public,void,test,monitoring,service,throws,exception,final,boolean,create,apmindex,random,boolean,final,string,index,name,create,apmindex,apm,2017,11,06,books,assert,that,client,prepare,index,index,name,doc,0,set,refresh,policy,true,set,source,field,value,xcontent,type,json,get,status,is,rest,status,created,final,settings,settings,settings,builder,put,cluster,metadata,my,cluster,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,when,exporters,are,ready,final,atomic,reference,search,response,search,response,new,atomic,reference,assert,busy,final,search,response,response,client,prepare,search,monitoring,es,set,collapse,new,collapse,builder,type,add,sort,timestamp,sort,order,desc,get,assert,that,response,status,is,rest,status,ok,assert,that,expecting,a,minimum,number,of,6,docs,one,per,collector,response,get,hits,get,hits,length,greater,than,or,equal,to,6,search,response,set,response,for,final,search,hit,hit,search,response,get,get,hits,final,map,string,object,search,hit,to,map,hit,final,string,type,string,extract,value,type,search,hit,assert,monitoring,doc,search,hit,monitored,system,es,type,monitoring,service,if,cluster,stats,monitoring,doc,type,equals,type,assert,cluster,stats,monitoring,doc,search,hit,create,apmindex,else,if,index,recovery,monitoring,doc,type,equals,type,assert,index,recovery,monitoring,doc,search,hit,else,if,indices,stats,monitoring,doc,type,equals,type,assert,indices,stats,monitoring,doc,search,hit,else,if,index,stats,monitoring,doc,type,equals,type,assert,index,stats,monitoring,doc,search,hit,else,if,node,stats,monitoring,doc,type,equals,type,assert,node,stats,monitoring,doc,search,hit,else,if,shard,monitoring,doc,type,equals,type,assert,shard,monitoring,doc,search,hit,else,fail,monitoring,document,of,type,type,is,not,supported,by,this,test
MonitoringIT -> public void enableMonitoring() throws Exception;1524684173;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1525076988;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1532353780;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1535046779;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1535383145;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1536177418;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1537202470;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1537300661;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1537371806;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1538509426;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1541464025;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1543854368;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits(),_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1544035746;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits().value,_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,value,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1544081506;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits().value,_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,value,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1547156119;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits().value,_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,value,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1549288028;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits().value,_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,value,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1549306683;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits().value,_                       greaterThan(0L))__        })__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,value,greater,than,0l
MonitoringIT -> public void enableMonitoring() throws Exception;1549881451;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits().value,_                       greaterThan(0L))__        }, 30L, TimeUnit.SECONDS)__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,value,greater,than,0l,30l,time,unit,seconds
MonitoringIT -> public void enableMonitoring() throws Exception;1550830873;Enable the monitoring service and the Local exporter, waiting for some monitoring documents_to be indexed before it returns.;public void enableMonitoring() throws Exception {_        _        assertAcked(client().admin().indices().prepareDelete(".monitoring-*"))___        assertThat("Must be no enabled exporters before enabling monitoring", getMonitoringUsageExportersDefined(), is(false))___        final Settings settings = Settings.builder()_                .put("xpack.monitoring.collection.enabled", true)_                .put("xpack.monitoring.exporters._local.enabled", true)_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("[_local] exporter not enabled yet", getMonitoringUsageExportersDefined(), is(true)))___        assertBusy(() -> {_            _            ensureGreen(".monitoring-es-*")__            assertThat(client().admin().indices().prepareRefresh(".monitoring-es-*").get().getStatus(), is(RestStatus.OK))___            assertThat("No monitoring documents yet",_                       client().prepareSearch(".monitoring-es-" + TEMPLATE_VERSION + "-*")_                               .setSize(0)_                               .get().getHits().getTotalHits().value,_                       greaterThan(0L))__        }, 30L, TimeUnit.SECONDS)__    };enable,the,monitoring,service,and,the,local,exporter,waiting,for,some,monitoring,documents,to,be,indexed,before,it,returns;public,void,enable,monitoring,throws,exception,assert,acked,client,admin,indices,prepare,delete,monitoring,assert,that,must,be,no,enabled,exporters,before,enabling,monitoring,get,monitoring,usage,exporters,defined,is,false,final,settings,settings,settings,builder,put,xpack,monitoring,collection,enabled,true,put,xpack,monitoring,exporters,enabled,true,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporter,not,enabled,yet,get,monitoring,usage,exporters,defined,is,true,assert,busy,ensure,green,monitoring,es,assert,that,client,admin,indices,prepare,refresh,monitoring,es,get,get,status,is,rest,status,ok,assert,that,no,monitoring,documents,yet,client,prepare,search,monitoring,es,set,size,0,get,get,hits,get,total,hits,value,greater,than,0l,30l,time,unit,seconds
MonitoringIT -> @SuppressWarnings("unchecked")     public void disableMonitoring() throws Exception;1524684173;Disable the monitoring service and the Local exporter.;@SuppressWarnings("unchecked")_    public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;suppress,warnings,unchecked,public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> @SuppressWarnings("unchecked")     public void disableMonitoring() throws Exception;1525076988;Disable the monitoring service and the Local exporter.;@SuppressWarnings("unchecked")_    public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;suppress,warnings,unchecked,public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1524684173;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1525076988;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1532353780;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1535046779;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1535383145;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1536177418;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1537202470;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1537300661;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1537371806;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1538509426;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1541464025;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1543854368;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1544035746;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1544081506;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1547156119;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1549288028;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1549306683;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1549881451;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document);1550830873;Assert that a {@link IndexRecoveryMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexRecoveryMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indexRecovery = (Map<String, Object>) source.get(IndexRecoveryMonitoringDoc.TYPE)__        assertEquals(1, indexRecovery.size())___        final List<Object> shards = (List<Object>) indexRecovery.get("shards")__        assertThat(shards, notNullValue())__    };assert,that,a,link,index,recovery,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,recovery,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,recovery,map,string,object,source,get,index,recovery,monitoring,doc,type,assert,equals,1,index,recovery,size,final,list,object,shards,list,object,index,recovery,get,shards,assert,that,shards,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1524684173;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1525076988;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1532353780;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1535046779;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1535383145;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1536177418;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1537202470;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1537300661;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1537371806;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1538509426;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1541464025;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1543854368;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1544035746;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1544081506;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1547156119;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1549288028;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1549306683;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1549881451;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertShardMonitoringDoc(final Map<String, Object> document);1550830873;Assert that a {@link ShardMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertShardMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(7, source.size())__        assertThat(source.get("state_uuid"), notNullValue())___        final Map<String, Object> shard = (Map<String, Object>) source.get("shard")__        assertEquals(6, shard.size())___        final String currentNodeId = (String) shard.get("node")__        if (Strings.hasLength(currentNodeId)) {_            assertThat(source.get("source_node"), notNullValue())__        } else {_            assertThat(source.get("source_node"), nullValue())__        }__        ShardMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (filter.equals("shard.relocating_node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("relocating_node"))__                return__            }_            if (filter.equals("shard.node")) {_                _                assertTrue(filter + " must exist in the monitoring document", shard.containsKey("node"))__                return__            }_            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,shard,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,shard,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,7,source,size,assert,that,source,get,not,null,value,final,map,string,object,shard,map,string,object,source,get,shard,assert,equals,6,shard,size,final,string,current,node,id,string,shard,get,node,if,strings,has,length,current,node,id,assert,that,source,get,not,null,value,else,assert,that,source,get,null,value,shard,monitoring,doc,for,each,filter,if,filter,equals,shard,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,return,if,filter,equals,shard,node,assert,true,filter,must,exist,in,the,monitoring,document,shard,contains,key,node,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1524684173;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            enableMonitoring()__            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,enable,monitoring,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1525076988;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            enableMonitoring()__            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,enable,monitoring,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1532353780;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            enableMonitoring()__            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,enable,monitoring,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1535046779;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            enableMonitoring()__            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,enable,monitoring,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1535383145;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            enableMonitoring()__            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,enable,monitoring,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1536177418;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1537202470;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1537300661;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1537371806;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1538509426;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1541464025;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1543854368;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1544035746;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1544081506;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1547156119;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1549288028;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1549306683;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1549881451;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception;1550830873;Executes the given {@link Runnable} once the monitoring exporters are ready and functional. Ensure that_the exporters and the monitoring service are shut down after the runnable has been executed.;private void whenExportersAreReady(final CheckedRunnable<Exception> runnable) throws Exception {_        try {_            try {_                enableMonitoring()__            } catch (AssertionError e) {_                _                _                StringBuilder b = new StringBuilder()__                b.append("\n==== jstack at monitoring enablement failure time ====\n")__                for (ThreadInfo ti : ManagementFactory.getThreadMXBean().dumpAllThreads(true, true)) {_                  append(b, ti)__                }_                b.append("^^==============================================\n")__                logger.info(b.toString())__                throw e__            }_            runnable.run()__        } finally {_            disableMonitoring()__        }_    };executes,the,given,link,runnable,once,the,monitoring,exporters,are,ready,and,functional,ensure,that,the,exporters,and,the,monitoring,service,are,shut,down,after,the,runnable,has,been,executed;private,void,when,exporters,are,ready,final,checked,runnable,exception,runnable,throws,exception,try,try,enable,monitoring,catch,assertion,error,e,string,builder,b,new,string,builder,b,append,n,jstack,at,monitoring,enablement,failure,time,n,for,thread,info,ti,management,factory,get,thread,mxbean,dump,all,threads,true,true,append,b,ti,b,append,n,logger,info,b,to,string,throw,e,runnable,run,finally,disable,monitoring
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1524684173;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(11, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(4))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.isEmpty(), is(true))___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.size(), equalTo(6))__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.isEmpty(), is(true))__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,11,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,4,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,is,empty,is,true,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,size,equal,to,6,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,is,empty,is,true
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1525076988;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(11, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(4))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.isEmpty(), is(true))___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.size(), equalTo(6))__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.isEmpty(), is(true))__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,11,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,4,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,is,empty,is,true,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,size,equal,to,6,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,is,empty,is,true
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1532353780;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(11, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(4))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.isEmpty(), is(true))___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.size(), equalTo(6))__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.isEmpty(), is(true))__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,11,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,4,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,is,empty,is,true,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,size,equal,to,6,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,is,empty,is,true
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1535046779;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(11, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,11,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1535383145;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(11, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,11,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1536177418;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(11, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,11,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1537202470;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(11, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,11,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1537300661;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(11, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,11,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1537371806;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(11, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,11,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1538509426;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(12, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,12,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1541464025;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(12, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())___        final Map<String, Object> clusterSettings = (Map<String, Object>) source.get("cluster_settings")__        assertThat(clusterSettings, notNullValue())__        assertThat(clusterSettings.remove("cluster"), notNullValue())__        assertThat(clusterSettings.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,12,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty,final,map,string,object,cluster,settings,map,string,object,source,get,assert,that,cluster,settings,not,null,value,assert,that,cluster,settings,remove,cluster,not,null,value,assert,that,cluster,settings,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1543854368;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(12, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())___        final Map<String, Object> clusterSettings = (Map<String, Object>) source.get("cluster_settings")__        assertThat(clusterSettings, notNullValue())__        assertThat(clusterSettings.remove("cluster"), notNullValue())__        assertThat(clusterSettings.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,12,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty,final,map,string,object,cluster,settings,map,string,object,source,get,assert,that,cluster,settings,not,null,value,assert,that,cluster,settings,remove,cluster,not,null,value,assert,that,cluster,settings,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1544035746;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(12, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())___        final Map<String, Object> clusterSettings = (Map<String, Object>) source.get("cluster_settings")__        assertThat(clusterSettings, notNullValue())__        assertThat(clusterSettings.remove("cluster"), notNullValue())__        assertThat(clusterSettings.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,12,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty,final,map,string,object,cluster,settings,map,string,object,source,get,assert,that,cluster,settings,not,null,value,assert,that,cluster,settings,remove,cluster,not,null,value,assert,that,cluster,settings,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1544081506;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(12, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.remove("term"), notNullValue())__        assertThat(clusterState.remove("last_committed_config"), notNullValue())__        assertThat(clusterState.remove("last_accepted_config"), notNullValue())__        assertThat(clusterState.keySet(), empty())___        final Map<String, Object> clusterSettings = (Map<String, Object>) source.get("cluster_settings")__        assertThat(clusterSettings, notNullValue())__        assertThat(clusterSettings.remove("cluster"), notNullValue())__        assertThat(clusterSettings.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,12,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,remove,term,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,key,set,empty,final,map,string,object,cluster,settings,map,string,object,source,get,assert,that,cluster,settings,not,null,value,assert,that,cluster,settings,remove,cluster,not,null,value,assert,that,cluster,settings,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1547156119;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(12, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.remove("term"), notNullValue())__        assertThat(clusterState.remove("last_committed_config"), notNullValue())__        assertThat(clusterState.remove("last_accepted_config"), notNullValue())__        assertThat(clusterState.keySet(), empty())___        final Map<String, Object> clusterSettings = (Map<String, Object>) source.get("cluster_settings")__        assertThat(clusterSettings, notNullValue())__        assertThat(clusterSettings.remove("cluster"), notNullValue())__        assertThat(clusterSettings.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,12,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,remove,term,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,key,set,empty,final,map,string,object,cluster,settings,map,string,object,source,get,assert,that,cluster,settings,not,null,value,assert,that,cluster,settings,remove,cluster,not,null,value,assert,that,cluster,settings,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1549288028;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(12, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.remove("term"), notNullValue())__        assertThat(clusterState.remove("last_committed_config"), notNullValue())__        assertThat(clusterState.remove("last_accepted_config"), notNullValue())__        assertThat(clusterState.keySet(), empty())___        final Map<String, Object> clusterSettings = (Map<String, Object>) source.get("cluster_settings")__        assertThat(clusterSettings, notNullValue())__        assertThat(clusterSettings.remove("cluster"), notNullValue())__        assertThat(clusterSettings.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,12,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,remove,term,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,key,set,empty,final,map,string,object,cluster,settings,map,string,object,source,get,assert,that,cluster,settings,not,null,value,assert,that,cluster,settings,remove,cluster,not,null,value,assert,that,cluster,settings,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1549306683;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(12, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.remove("term"), notNullValue())__        assertThat(clusterState.remove("last_committed_config"), notNullValue())__        assertThat(clusterState.remove("last_accepted_config"), notNullValue())__        assertThat(clusterState.keySet(), empty())___        final Map<String, Object> clusterSettings = (Map<String, Object>) source.get("cluster_settings")__        assertThat(clusterSettings, notNullValue())__        assertThat(clusterSettings.remove("cluster"), notNullValue())__        assertThat(clusterSettings.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,12,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,remove,term,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,key,set,empty,final,map,string,object,cluster,settings,map,string,object,source,get,assert,that,cluster,settings,not,null,value,assert,that,cluster,settings,remove,cluster,not,null,value,assert,that,cluster,settings,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1549881451;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(12, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())___        final Map<String, Object> clusterSettings = (Map<String, Object>) source.get("cluster_settings")__        assertThat(clusterSettings, notNullValue())__        assertThat(clusterSettings.remove("cluster"), notNullValue())__        assertThat(clusterSettings.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,12,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty,final,map,string,object,cluster,settings,map,string,object,source,get,assert,that,cluster,settings,not,null,value,assert,that,cluster,settings,remove,cluster,not,null,value,assert,that,cluster,settings,key,set,empty
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,                                                  final boolean apmIndicesExist);1550830873;Assert that a {@link ClusterStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertClusterStatsMonitoringDoc(final Map<String, Object> document,_                                                 final boolean apmIndicesExist) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(12, source.size())___        assertThat((String) source.get("cluster_name"), not(isEmptyOrNullString()))__        assertThat(source.get("version"), equalTo(Version.CURRENT.toString()))___        final Map<String, Object> license = (Map<String, Object>) source.get("license")__        assertThat(license, notNullValue())__        assertThat((String) license.get(License.Fields.ISSUER), not(isEmptyOrNullString()))__        assertThat((String) license.get(License.Fields.ISSUED_TO), not(isEmptyOrNullString()))__        assertThat((Long) license.get(License.Fields.ISSUE_DATE_IN_MILLIS), greaterThan(0L))__        assertThat((Integer) license.get(License.Fields.MAX_NODES), greaterThan(0))___        String uid = (String) license.get("uid")__        assertThat(uid, not(isEmptyOrNullString()))___        String type = (String) license.get("type")__        assertThat(type, not(isEmptyOrNullString()))___        String status = (String) license.get(License.Fields.STATUS)__        assertThat(status, not(isEmptyOrNullString()))___        if ("basic".equals(license.get("type")) == false) {_            Long expiryDate = (Long) license.get(License.Fields.EXPIRY_DATE_IN_MILLIS)__            assertThat(expiryDate, greaterThan(0L))__        }__        Boolean clusterNeedsTLS = (Boolean) license.get("cluster_needs_tls")__        assertThat(clusterNeedsTLS, isOneOf(true, null))___        final Map<String, Object> clusterStats = (Map<String, Object>) source.get("cluster_stats")__        assertThat(clusterStats, notNullValue())__        assertThat(clusterStats.size(), equalTo(5))___        final Map<String, Object> stackStats = (Map<String, Object>) source.get("stack_stats")__        assertThat(stackStats, notNullValue())__        assertThat(stackStats.size(), equalTo(2))___        final Map<String, Object> apm = (Map<String, Object>) stackStats.get("apm")__        assertThat(apm, notNullValue())__        assertThat(apm.size(), equalTo(1))__        assertThat(apm.remove("found"), is(apmIndicesExist))__        assertThat(apm.keySet(), empty())___        final Map<String, Object> xpackStats = (Map<String, Object>) stackStats.get("xpack")__        assertThat(xpackStats, notNullValue())__        assertThat("X-Pack stats must have at least monitoring, but others may be hidden", xpackStats.size(), greaterThanOrEqualTo(1))___        final Map<String, Object> monitoring = (Map<String, Object>) xpackStats.get("monitoring")__        _        assertThat(monitoring, notNullValue())___        final Map<String, Object> clusterState = (Map<String, Object>) source.get("cluster_state")__        assertThat(clusterState, notNullValue())__        assertThat(clusterState.remove("nodes_hash"), notNullValue())__        assertThat(clusterState.remove("status"), notNullValue())__        assertThat(clusterState.remove("version"), notNullValue())__        assertThat(clusterState.remove("state_uuid"), notNullValue())__        assertThat(clusterState.remove("cluster_uuid"), notNullValue())__        assertThat(clusterState.remove("master_node"), notNullValue())__        assertThat(clusterState.remove("nodes"), notNullValue())__        assertThat(clusterState.keySet(), empty())___        final Map<String, Object> clusterSettings = (Map<String, Object>) source.get("cluster_settings")__        assertThat(clusterSettings, notNullValue())__        assertThat(clusterSettings.remove("cluster"), notNullValue())__        assertThat(clusterSettings.keySet(), empty())__    };assert,that,a,link,cluster,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,cluster,stats,monitoring,doc,final,map,string,object,document,final,boolean,apm,indices,exist,final,map,string,object,source,map,string,object,document,get,assert,equals,12,source,size,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,version,equal,to,version,current,to,string,final,map,string,object,license,map,string,object,source,get,license,assert,that,license,not,null,value,assert,that,string,license,get,license,fields,issuer,not,is,empty,or,null,string,assert,that,string,license,get,license,fields,not,is,empty,or,null,string,assert,that,long,license,get,license,fields,greater,than,0l,assert,that,integer,license,get,license,fields,greater,than,0,string,uid,string,license,get,uid,assert,that,uid,not,is,empty,or,null,string,string,type,string,license,get,type,assert,that,type,not,is,empty,or,null,string,string,status,string,license,get,license,fields,status,assert,that,status,not,is,empty,or,null,string,if,basic,equals,license,get,type,false,long,expiry,date,long,license,get,license,fields,assert,that,expiry,date,greater,than,0l,boolean,cluster,needs,tls,boolean,license,get,assert,that,cluster,needs,tls,is,one,of,true,null,final,map,string,object,cluster,stats,map,string,object,source,get,assert,that,cluster,stats,not,null,value,assert,that,cluster,stats,size,equal,to,5,final,map,string,object,stack,stats,map,string,object,source,get,assert,that,stack,stats,not,null,value,assert,that,stack,stats,size,equal,to,2,final,map,string,object,apm,map,string,object,stack,stats,get,apm,assert,that,apm,not,null,value,assert,that,apm,size,equal,to,1,assert,that,apm,remove,found,is,apm,indices,exist,assert,that,apm,key,set,empty,final,map,string,object,xpack,stats,map,string,object,stack,stats,get,xpack,assert,that,xpack,stats,not,null,value,assert,that,x,pack,stats,must,have,at,least,monitoring,but,others,may,be,hidden,xpack,stats,size,greater,than,or,equal,to,1,final,map,string,object,monitoring,map,string,object,xpack,stats,get,monitoring,assert,that,monitoring,not,null,value,final,map,string,object,cluster,state,map,string,object,source,get,assert,that,cluster,state,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,status,not,null,value,assert,that,cluster,state,remove,version,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,not,null,value,assert,that,cluster,state,remove,nodes,not,null,value,assert,that,cluster,state,key,set,empty,final,map,string,object,cluster,settings,map,string,object,source,get,assert,that,cluster,settings,not,null,value,assert,that,cluster,settings,remove,cluster,not,null,value,assert,that,cluster,settings,key,set,empty
MonitoringIT -> private static MonitoredSystem randomSystem();1524684173;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1525076988;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1532353780;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1535046779;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1535383145;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1536177418;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1537202470;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1537300661;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1537371806;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1538509426;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1541464025;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1543854368;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1544035746;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1544081506;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1547156119;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1549288028;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1549306683;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1549881451;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static MonitoredSystem randomSystem();1550830873;Returns a {@link MonitoredSystem} supported by the Monitoring Bulk API;private static MonitoredSystem randomSystem() {_        return randomFrom(MonitoredSystem.LOGSTASH, MonitoredSystem.KIBANA, MonitoredSystem.BEATS)__    };returns,a,link,monitored,system,supported,by,the,monitoring,bulk,api;private,static,monitored,system,random,system,return,random,from,monitored,system,logstash,monitored,system,kibana,monitored,system,beats
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1524684173;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1525076988;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1532353780;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1535046779;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1535383145;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1536177418;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1537202470;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1537300661;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1537371806;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1538509426;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1541464025;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1543854368;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1544035746;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1544081506;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1547156119;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1549288028;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1549306683;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1549881451;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException;1550830873;Returns the {@link SearchHit} content as a {@link Map} object.;private static Map<String, Object> toMap(final ToXContentObject xContentObject) throws IOException {_        final XContentType xContentType = XContentType.JSON___        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {_            xContentObject.toXContent(builder, EMPTY_PARAMS)___            final Map<String, Object> map = XContentHelper.convertToMap(xContentType.xContent(), Strings.toString(builder), false)___            _            map.remove("_score")__            map.remove("fields")__            map.remove("sort")___            return map__        }_    };returns,the,link,search,hit,content,as,a,link,map,object;private,static,map,string,object,to,map,final,to,xcontent,object,x,content,object,throws,ioexception,final,xcontent,type,x,content,type,xcontent,type,json,try,xcontent,builder,builder,xcontent,builder,builder,x,content,type,x,content,x,content,object,to,xcontent,builder,final,map,string,object,map,xcontent,helper,convert,to,map,x,content,type,x,content,strings,to,string,builder,false,map,remove,map,remove,fields,map,remove,sort,return,map
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1524684173;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1525076988;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1532353780;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1535046779;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1535383145;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1536177418;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1537202470;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1537300661;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1537371806;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1538509426;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1541464025;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1543854368;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1544035746;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1544081506;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1547156119;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        assertThat(index, equalTo(MonitoringTemplateUtils.indexName(DateTimeFormat.forPattern("YYYY.MM.dd").withZoneUTC(),_                                                                    expectedSystem,_                                                                    ISODateTimeFormat.dateTime().parseMillis(timestamp))))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,assert,that,index,equal,to,monitoring,template,utils,index,name,date,time,format,for,pattern,yyyy,mm,dd,with,zone,utc,expected,system,isodate,time,format,date,time,parse,millis,timestamp,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1549288028;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat(document.get("_type"), equalTo("doc"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        DateFormatter formatter = DateFormatter.forPattern("yyyy.MM.dd")__        long isoTimestamp = Instant.from(DateFormatter.forPattern("strict_date_time").parse(timestamp)).toEpochMilli()__        String isoDateTime = MonitoringTemplateUtils.indexName(formatter.withZone(ZoneOffset.UTC), expectedSystem, isoTimestamp)__        assertThat(index, equalTo(isoDateTime))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,document,get,equal,to,doc,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,date,formatter,formatter,date,formatter,for,pattern,yyyy,mm,dd,long,iso,timestamp,instant,from,date,formatter,for,pattern,parse,timestamp,to,epoch,milli,string,iso,date,time,monitoring,template,utils,index,name,formatter,with,zone,zone,offset,utc,expected,system,iso,timestamp,assert,that,index,equal,to,iso,date,time,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1549306683;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        DateFormatter formatter = DateFormatter.forPattern("yyyy.MM.dd")__        long isoTimestamp = Instant.from(DateFormatter.forPattern("strict_date_time").parse(timestamp)).toEpochMilli()__        String isoDateTime = MonitoringTemplateUtils.indexName(formatter.withZone(ZoneOffset.UTC), expectedSystem, isoTimestamp)__        assertThat(index, equalTo(isoDateTime))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,date,formatter,formatter,date,formatter,for,pattern,yyyy,mm,dd,long,iso,timestamp,instant,from,date,formatter,for,pattern,parse,timestamp,to,epoch,milli,string,iso,date,time,monitoring,template,utils,index,name,formatter,with,zone,zone,offset,utc,expected,system,iso,timestamp,assert,that,index,equal,to,iso,date,time,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1549881451;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        DateFormatter formatter = DateFormatter.forPattern("yyyy.MM.dd")__        long isoTimestamp = Instant.from(DateFormatter.forPattern("strict_date_time").parse(timestamp)).toEpochMilli()__        String isoDateTime = MonitoringTemplateUtils.indexName(formatter.withZone(ZoneOffset.UTC), expectedSystem, isoTimestamp)__        assertThat(index, equalTo(isoDateTime))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,date,formatter,formatter,date,formatter,for,pattern,yyyy,mm,dd,long,iso,timestamp,instant,from,date,formatter,for,pattern,parse,timestamp,to,epoch,milli,string,iso,date,time,monitoring,template,utils,index,name,formatter,with,zone,zone,offset,utc,expected,system,iso,timestamp,assert,that,index,equal,to,iso,date,time,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDoc(final Map<String, Object> document,                                      final MonitoredSystem expectedSystem,                                      final String expectedType,                                      final TimeValue interval);1550830873;Asserts that the monitoring document (provided as a Map) contains the common information that_all monitoring documents must have;@SuppressWarnings("unchecked")_    private void assertMonitoringDoc(final Map<String, Object> document,_                                     final MonitoredSystem expectedSystem,_                                     final String expectedType,_                                     final TimeValue interval) {_        assertEquals(document.toString(),4, document.size())___        final String index = (String) document.get("_index")__        assertThat(index, containsString(".monitoring-" + expectedSystem.getSystem() + "-" + TEMPLATE_VERSION + "-"))__        assertThat((String) document.get("_id"), not(isEmptyOrNullString()))___        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertThat(source, notNullValue())__        assertThat((String) source.get("cluster_uuid"), not(isEmptyOrNullString()))__        assertThat(source.get("type"), equalTo(expectedType))___        final String timestamp = (String) source.get("timestamp")__        assertThat(timestamp, not(isEmptyOrNullString()))___        assertThat(((Number) source.get("interval_ms")).longValue(), equalTo(interval.getMillis()))___        DateFormatter formatter = DateFormatter.forPattern("yyyy.MM.dd")__        long isoTimestamp = Instant.from(DateFormatter.forPattern("strict_date_time").parse(timestamp)).toEpochMilli()__        String isoDateTime = MonitoringTemplateUtils.indexName(formatter.withZone(ZoneOffset.UTC), expectedSystem, isoTimestamp)__        assertThat(index, equalTo(isoDateTime))___        final Map<String, Object> sourceNode = (Map<String, Object>) source.get("source_node")__        if (sourceNode != null) {_            assertMonitoringDocSourceNode(sourceNode)__        }_    };asserts,that,the,monitoring,document,provided,as,a,map,contains,the,common,information,that,all,monitoring,documents,must,have;suppress,warnings,unchecked,private,void,assert,monitoring,doc,final,map,string,object,document,final,monitored,system,expected,system,final,string,expected,type,final,time,value,interval,assert,equals,document,to,string,4,document,size,final,string,index,string,document,get,assert,that,index,contains,string,monitoring,expected,system,get,system,assert,that,string,document,get,not,is,empty,or,null,string,final,map,string,object,source,map,string,object,document,get,assert,that,source,not,null,value,assert,that,string,source,get,not,is,empty,or,null,string,assert,that,source,get,type,equal,to,expected,type,final,string,timestamp,string,source,get,timestamp,assert,that,timestamp,not,is,empty,or,null,string,assert,that,number,source,get,long,value,equal,to,interval,get,millis,date,formatter,formatter,date,formatter,for,pattern,yyyy,mm,dd,long,iso,timestamp,instant,from,date,formatter,for,pattern,parse,timestamp,to,epoch,milli,string,iso,date,time,monitoring,template,utils,index,name,formatter,with,zone,zone,offset,utc,expected,system,iso,timestamp,assert,that,index,equal,to,iso,date,time,final,map,string,object,source,node,map,string,object,source,get,if,source,node,null,assert,monitoring,doc,source,node,source,node
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1524684173;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1525076988;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1532353780;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1535046779;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1535383145;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1536177418;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1537202470;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1537300661;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1537371806;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1538509426;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1541464025;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1543854368;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1544035746;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1544081506;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1547156119;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1549288028;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1549306683;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1549881451;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document);1550830873;Assert that a {@link IndicesStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndicesStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        final Map<String, Object> indicesStats = (Map<String, Object>) source.get(IndicesStatsMonitoringDoc.TYPE)__        assertEquals(1, indicesStats.size())___        IndicesStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,indices,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,indices,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,indices,stats,map,string,object,source,get,indices,stats,monitoring,doc,type,assert,equals,1,indices,stats,size,indices,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1524684173;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1525076988;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1532353780;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1535046779;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1535383145;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1536177418;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1537202470;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1537300661;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1537371806;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1538509426;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1541464025;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1543854368;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1544035746;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1544081506;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1547156119;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1549288028;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1549306683;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1549881451;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertNodeStatsMonitoringDoc(final Map<String, Object> document);1550830873;Assert that a {@link NodeStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertNodeStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        NodeStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter -> {_            if (Constants.WINDOWS && filter.startsWith("node_stats.os.cpu.load_average")) {_                _                return__            }__            _            _            if (filter.startsWith("node_stats.fs") || filter.startsWith("node_stats.os.cgroup")) {_                return__            }__            _            if ("node_stats.os.cpu.load_average.5m".equals(filter) || "node_stats.os.cpu.load_average.15m".equals(filter)) {_                return__            }__            _            if (filter.startsWith("node_stats.thread_pool.bulk")) {_                return__            }__            assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue())__        })__    };assert,that,a,link,node,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,node,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,node,stats,monitoring,doc,for,each,filter,if,constants,windows,filter,starts,with,os,cpu,return,if,filter,starts,with,fs,filter,starts,with,os,cgroup,return,if,os,cpu,5m,equals,filter,os,cpu,15m,equals,filter,return,if,filter,starts,with,bulk,return,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1532353780;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1535046779;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1535383145;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1536177418;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1537202470;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1537300661;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1537371806;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1538509426;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1541464025;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1543854368;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1544035746;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1544081506;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1547156119;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1549288028;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1549306683;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1549881451;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1550830873;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> public void testMonitoringBulk() throws Exception;1532353780;Monitoring Bulk API test:__This test uses the Monitoring Bulk API to index document as an external application like Kibana would do. It_then ensure that the documents were correctly indexed and have the expected information.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            _            _            _            __            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,api,test,this,test,uses,the,monitoring,bulk,api,to,index,document,as,an,external,application,like,kibana,would,do,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1535046779;Monitoring Bulk API test:__This test uses the Monitoring Bulk API to index document as an external application like Kibana would do. It_then ensure that the documents were correctly indexed and have the expected information.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            _            _            _            __            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,api,test,this,test,uses,the,monitoring,bulk,api,to,index,document,as,an,external,application,like,kibana,would,do,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1535383145;Monitoring Bulk API test:__This test uses the Monitoring Bulk API to index document as an external application like Kibana would do. It_then ensure that the documents were correctly indexed and have the expected information.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            _            _            _            _            _            __            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,api,test,this,test,uses,the,monitoring,bulk,api,to,index,document,as,an,external,application,like,kibana,would,do,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1536177418;Monitoring Bulk API test:__This test uses the Monitoring Bulk API to index document as an external application like Kibana would do. It_then ensure that the documents were correctly indexed and have the expected information.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            _            _            _            _            _            __            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,api,test,this,test,uses,the,monitoring,bulk,api,to,index,document,as,an,external,application,like,kibana,would,do,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1537202470;Monitoring Bulk API test:__This test uses the Monitoring Bulk API to index document as an external application like Kibana would do. It_then ensure that the documents were correctly indexed and have the expected information.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            _            _            _            _            _            __            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,api,test,this,test,uses,the,monitoring,bulk,api,to,index,document,as,an,external,application,like,kibana,would,do,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1537300661;Monitoring Bulk API test:__This test uses the Monitoring Bulk API to index document as an external application like Kibana would do. It_then ensure that the documents were correctly indexed and have the expected information.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            _            _            _            _            _            __            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,api,test,this,test,uses,the,monitoring,bulk,api,to,index,document,as,an,external,application,like,kibana,would,do,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1537371806;Monitoring Bulk API test:__This test uses the Monitoring Bulk API to index document as an external application like Kibana would do. It_then ensure that the documents were correctly indexed and have the expected information.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            _            _            _            _            _            __            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,api,test,this,test,uses,the,monitoring,bulk,api,to,index,document,as,an,external,application,like,kibana,would,do,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1538509426;Monitoring Bulk API test:__This test uses the Monitoring Bulk API to index document as an external application like Kibana would do. It_then ensure that the documents were correctly indexed and have the expected information.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            _            _            _            _            _            __            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,api,test,this,test,uses,the,monitoring,bulk,api,to,index,document,as,an,external,application,like,kibana,would,do,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1541464025;Monitoring Bulk API test:__This test uses the Monitoring Bulk API to index document as an external application like Kibana would do. It_then ensure that the documents were correctly indexed and have the expected information.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            _            _            _            _            _            __            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,api,test,this,test,uses,the,monitoring,bulk,api,to,index,document,as,an,external,application,like,kibana,would,do,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1543854368;Monitoring Bulk test:__This test uses the Monitoring Bulk Request to index documents. It then ensure that the documents were correctly_indexed and have the expected information. REST API tests (like how this is really called) are handled as part of the_XPackRest tests.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits(), equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits(), equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,test,this,test,uses,the,monitoring,bulk,request,to,index,documents,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information,rest,api,tests,like,how,this,is,really,called,are,handled,as,part,of,the,xpack,rest,tests;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1544035746;Monitoring Bulk test:__This test uses the Monitoring Bulk Request to index documents. It then ensure that the documents were correctly_indexed and have the expected information. REST API tests (like how this is really called) are handled as part of the_XPackRest tests.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits().value, equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits().value, equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,test,this,test,uses,the,monitoring,bulk,request,to,index,documents,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information,rest,api,tests,like,how,this,is,really,called,are,handled,as,part,of,the,xpack,rest,tests;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,value,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,value,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1544081506;Monitoring Bulk test:__This test uses the Monitoring Bulk Request to index documents. It then ensure that the documents were correctly_indexed and have the expected information. REST API tests (like how this is really called) are handled as part of the_XPackRest tests.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits().value, equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits().value, equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__    };monitoring,bulk,test,this,test,uses,the,monitoring,bulk,request,to,index,documents,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information,rest,api,tests,like,how,this,is,really,called,are,handled,as,part,of,the,xpack,rest,tests;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,value,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,value,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1547156119;Monitoring Bulk test:__This test uses the Monitoring Bulk Request to index documents. It then ensure that the documents were correctly_indexed and have the expected information. REST API tests (like how this is really called) are handled as part of the_XPackRest tests.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits().value, equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits().value, equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__        assertWarnings(RestBulkAction.TYPES_DEPRECATION_MESSAGE)__    };monitoring,bulk,test,this,test,uses,the,monitoring,bulk,request,to,index,documents,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information,rest,api,tests,like,how,this,is,really,called,are,handled,as,part,of,the,xpack,rest,tests;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,value,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,value,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval,assert,warnings,rest,bulk,action
MonitoringIT -> public void testMonitoringBulk() throws Exception;1549288028;Monitoring Bulk test:__This test uses the Monitoring Bulk Request to index documents. It then ensure that the documents were correctly_indexed and have the expected information. REST API tests (like how this is really called) are handled as part of the_XPackRest tests.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits().value, equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits().value, equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "test", interval)__            }_        })__        assertWarnings(RestBulkAction.TYPES_DEPRECATION_MESSAGE)__    };monitoring,bulk,test,this,test,uses,the,monitoring,bulk,request,to,index,documents,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information,rest,api,tests,like,how,this,is,really,called,are,handled,as,part,of,the,xpack,rest,tests;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,null,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,value,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,value,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,test,interval,assert,warnings,rest,bulk,action
MonitoringIT -> public void testMonitoringBulk() throws Exception;1549306683;Monitoring Bulk test:__This test uses the Monitoring Bulk Request to index documents. It then ensure that the documents were correctly_indexed and have the expected information. REST API tests (like how this is really called) are handled as part of the_XPackRest tests.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, "monitoring_data_type", new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits().value, equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits().value, equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "monitoring_data_type", interval)__            }_        })__    };monitoring,bulk,test,this,test,uses,the,monitoring,bulk,request,to,index,documents,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information,rest,api,tests,like,how,this,is,really,called,are,handled,as,part,of,the,xpack,rest,tests;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,value,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,value,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1549881451;Monitoring Bulk test:__This test uses the Monitoring Bulk Request to index documents. It then ensure that the documents were correctly_indexed and have the expected information. REST API tests (like how this is really called) are handled as part of the_XPackRest tests.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, "monitoring_data_type", new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits().value, equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits().value, equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "monitoring_data_type", interval)__            }_        })__    };monitoring,bulk,test,this,test,uses,the,monitoring,bulk,request,to,index,documents,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information,rest,api,tests,like,how,this,is,really,called,are,handled,as,part,of,the,xpack,rest,tests;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,value,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,value,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,interval
MonitoringIT -> public void testMonitoringBulk() throws Exception;1550830873;Monitoring Bulk test:__This test uses the Monitoring Bulk Request to index documents. It then ensure that the documents were correctly_indexed and have the expected information. REST API tests (like how this is really called) are handled as part of the_XPackRest tests.;public void testMonitoringBulk() throws Exception {_        whenExportersAreReady(() -> {_            final MonitoredSystem system = randomSystem()__            final TimeValue interval = TimeValue.timeValueSeconds(randomIntBetween(1, 20))___            final MonitoringBulkResponse bulkResponse =_                    new MonitoringBulkRequestBuilder(client())_                            .add(system, "monitoring_data_type", new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,_                                 System.currentTimeMillis(), interval.millis())_                    .get()___            assertThat(bulkResponse.status(), is(RestStatus.OK))__            assertThat(bulkResponse.getError(), nullValue())___            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*"___            _            assertBusy(() -> {_                _                ensureGreen(monitoringIndex)__                assertThat(client().admin().indices().prepareRefresh(monitoringIndex).get().getStatus(), is(RestStatus.OK))___                final SearchResponse response =_                        client().prepareSearch(".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*")_                                .get()___                _                assertThat("No monitoring documents yet", response.getHits().getTotalHits().value, equalTo(3L))___                final List<Map<String, Object>> sources =_                        Arrays.stream(response.getHits().getHits())_                              .map(SearchHit::getSourceAsMap)_                              .collect(Collectors.toList())___                _                assertThat(sources.stream().map(source -> source.get("timestamp")).distinct().count(), is(1L))__                _                assertThat(sources.stream().map(source -> source.get("source_node")).distinct().count(), is(1L))__            })___            final SearchResponse response = client().prepareSearch(monitoringIndex).get()__            final SearchHits hits = response.getHits()___            assertThat(response.getHits().getTotalHits().value, equalTo(3L))__            assertThat("Monitoring documents must have the same timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))__            assertThat("Monitoring documents must have the same source_node timestamp",_                       Arrays.stream(hits.getHits())_                             .map(hit -> extractValue("source_node.timestamp", hit.getSourceAsMap()))_                             .distinct()_                             .count(),_                       equalTo(1L))___            for (final SearchHit hit : hits.getHits()) {_                assertMonitoringDoc(toMap(hit), system, "monitoring_data_type", interval)__            }_        })__    };monitoring,bulk,test,this,test,uses,the,monitoring,bulk,request,to,index,documents,it,then,ensure,that,the,documents,were,correctly,indexed,and,have,the,expected,information,rest,api,tests,like,how,this,is,really,called,are,handled,as,part,of,the,xpack,rest,tests;public,void,test,monitoring,bulk,throws,exception,when,exporters,are,ready,final,monitored,system,system,random,system,final,time,value,interval,time,value,time,value,seconds,random,int,between,1,20,final,monitoring,bulk,response,bulk,response,new,monitoring,bulk,request,builder,client,add,system,new,bytes,array,create,bulk,entity,get,bytes,utf,8,xcontent,type,json,system,current,time,millis,interval,millis,get,assert,that,bulk,response,status,is,rest,status,ok,assert,that,bulk,response,get,error,null,value,final,string,monitoring,index,monitoring,system,get,system,assert,busy,ensure,green,monitoring,index,assert,that,client,admin,indices,prepare,refresh,monitoring,index,get,get,status,is,rest,status,ok,final,search,response,response,client,prepare,search,monitoring,system,get,system,get,assert,that,no,monitoring,documents,yet,response,get,hits,get,total,hits,value,equal,to,3l,final,list,map,string,object,sources,arrays,stream,response,get,hits,get,hits,map,search,hit,get,source,as,map,collect,collectors,to,list,assert,that,sources,stream,map,source,source,get,timestamp,distinct,count,is,1l,assert,that,sources,stream,map,source,source,get,distinct,count,is,1l,final,search,response,response,client,prepare,search,monitoring,index,get,final,search,hits,hits,response,get,hits,assert,that,response,get,hits,get,total,hits,value,equal,to,3l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,assert,that,monitoring,documents,must,have,the,same,timestamp,arrays,stream,hits,get,hits,map,hit,extract,value,timestamp,hit,get,source,as,map,distinct,count,equal,to,1l,for,final,search,hit,hit,hits,get,hits,assert,monitoring,doc,to,map,hit,system,interval
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1524684173;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(8, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("version"), notNullValue())__        final Map<String, Object> version = (Map<String, Object>) indexStats.get("version")__        assertEquals(2, version.size())__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,8,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,version,not,null,value,final,map,string,object,version,map,string,object,index,stats,get,version,assert,equals,2,version,size,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1525076988;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(8, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("version"), notNullValue())__        final Map<String, Object> version = (Map<String, Object>) indexStats.get("version")__        assertEquals(2, version.size())__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,8,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,version,not,null,value,final,map,string,object,version,map,string,object,index,stats,get,version,assert,equals,2,version,size,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1532353780;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(8, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("version"), notNullValue())__        final Map<String, Object> version = (Map<String, Object>) indexStats.get("version")__        assertEquals(2, version.size())__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,8,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,version,not,null,value,final,map,string,object,version,map,string,object,index,stats,get,version,assert,equals,2,version,size,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1535046779;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(8, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("version"), notNullValue())__        final Map<String, Object> version = (Map<String, Object>) indexStats.get("version")__        assertEquals(2, version.size())__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,8,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,version,not,null,value,final,map,string,object,version,map,string,object,index,stats,get,version,assert,equals,2,version,size,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1535383145;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(8, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("version"), notNullValue())__        final Map<String, Object> version = (Map<String, Object>) indexStats.get("version")__        assertEquals(2, version.size())__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,8,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,version,not,null,value,final,map,string,object,version,map,string,object,index,stats,get,version,assert,equals,2,version,size,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1536177418;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(8, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("version"), notNullValue())__        final Map<String, Object> version = (Map<String, Object>) indexStats.get("version")__        assertEquals(2, version.size())__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,8,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,version,not,null,value,final,map,string,object,version,map,string,object,index,stats,get,version,assert,equals,2,version,size,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1537202470;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(8, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("version"), notNullValue())__        final Map<String, Object> version = (Map<String, Object>) indexStats.get("version")__        assertEquals(2, version.size())__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,8,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,version,not,null,value,final,map,string,object,version,map,string,object,index,stats,get,version,assert,equals,2,version,size,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1537300661;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("version"), notNullValue())__        final Map<String, Object> version = (Map<String, Object>) indexStats.get("version")__        assertEquals(2, version.size())__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,version,not,null,value,final,map,string,object,version,map,string,object,index,stats,get,version,assert,equals,2,version,size,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1537371806;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1538509426;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1541464025;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1543854368;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1544035746;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1544081506;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1547156119;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1549288028;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1549306683;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1549881451;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertIndexStatsMonitoringDoc(final Map<String, Object> document);1550830873;Assert that a {@link IndexStatsMonitoringDoc} contains the expected information;@SuppressWarnings("unchecked")_    private void assertIndexStatsMonitoringDoc(final Map<String, Object> document) {_        final Map<String, Object> source = (Map<String, Object>) document.get("_source")__        assertEquals(6, source.size())___        _        final Map<String, Object> indexStats = (Map<String, Object>) source.get(IndexStatsMonitoringDoc.TYPE)__        assertEquals(7, indexStats.size())__        assertThat((String) indexStats.get("index"), not(isEmptyOrNullString()))__        assertThat((String) indexStats.get("uuid"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("created"), notNullValue())__        assertThat((String) indexStats.get("status"), not(isEmptyOrNullString()))__        assertThat(indexStats.get("shards"), notNullValue())__        final Map<String, Object> shards = (Map<String, Object>) indexStats.get("shards")__        assertEquals(11, shards.size())__        assertThat(indexStats.get("primaries"), notNullValue())__        assertThat(indexStats.get("total"), notNullValue())___        IndexStatsMonitoringDoc.XCONTENT_FILTERS.forEach(filter ->_                assertThat(filter + " must not be null in the monitoring document", extractValue(filter, source), notNullValue()))__    };assert,that,a,link,index,stats,monitoring,doc,contains,the,expected,information;suppress,warnings,unchecked,private,void,assert,index,stats,monitoring,doc,final,map,string,object,document,final,map,string,object,source,map,string,object,document,get,assert,equals,6,source,size,final,map,string,object,index,stats,map,string,object,source,get,index,stats,monitoring,doc,type,assert,equals,7,index,stats,size,assert,that,string,index,stats,get,index,not,is,empty,or,null,string,assert,that,string,index,stats,get,uuid,not,is,empty,or,null,string,assert,that,index,stats,get,created,not,null,value,assert,that,string,index,stats,get,status,not,is,empty,or,null,string,assert,that,index,stats,get,shards,not,null,value,final,map,string,object,shards,map,string,object,index,stats,get,shards,assert,equals,11,shards,size,assert,that,index,stats,get,primaries,not,null,value,assert,that,index,stats,get,total,not,null,value,index,stats,monitoring,doc,for,each,filter,assert,that,filter,must,not,be,null,in,the,monitoring,document,extract,value,filter,source,not,null,value
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1524684173;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;@SuppressWarnings("unchecked")_    private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;suppress,warnings,unchecked,private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> @SuppressWarnings("unchecked")     private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode);1525076988;Asserts that the source_node information (provided as a Map) of a monitoring document correspond to_the current local node information;@SuppressWarnings("unchecked")_    private void assertMonitoringDocSourceNode(final Map<String, Object> sourceNode) {_        assertEquals(6, sourceNode.size())___        final NodesInfoResponse nodesResponse = client().admin().cluster().prepareNodesInfo().clear().get()___        assertEquals(1, nodesResponse.getNodes().size())___        final DiscoveryNode node = nodesResponse.getNodes().stream().findFirst().get().getNode()___        assertThat(sourceNode.get("uuid"), equalTo(node.getId()))__        assertThat(sourceNode.get("host"), equalTo(node.getHostName()))__        assertThat(sourceNode.get("transport_address"),equalTo(node.getAddress().toString()))__        assertThat(sourceNode.get("ip"), equalTo(node.getAddress().getAddress()))__        assertThat(sourceNode.get("name"), equalTo(node.getName()))__        assertThat((String) sourceNode.get("timestamp"), not(isEmptyOrNullString()))__    };asserts,that,the,information,provided,as,a,map,of,a,monitoring,document,correspond,to,the,current,local,node,information;suppress,warnings,unchecked,private,void,assert,monitoring,doc,source,node,final,map,string,object,source,node,assert,equals,6,source,node,size,final,nodes,info,response,nodes,response,client,admin,cluster,prepare,nodes,info,clear,get,assert,equals,1,nodes,response,get,nodes,size,final,discovery,node,node,nodes,response,get,nodes,stream,find,first,get,get,node,assert,that,source,node,get,uuid,equal,to,node,get,id,assert,that,source,node,get,host,equal,to,node,get,host,name,assert,that,source,node,get,equal,to,node,get,address,to,string,assert,that,source,node,get,ip,equal,to,node,get,address,get,address,assert,that,source,node,get,name,equal,to,node,get,name,assert,that,string,source,node,get,timestamp,not,is,empty,or,null,string
MonitoringIT -> public void disableMonitoring() throws Exception;1532353780;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1535046779;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1535383145;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1536177418;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1537202470;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1537300661;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1537371806;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1538509426;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1541464025;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .putNull("cluster.metadata.display_name")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,put,null,cluster,metadata,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1543854368;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .putNull("cluster.metadata.display_name")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,put,null,cluster,metadata,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1544035746;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .putNull("cluster.metadata.display_name")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,put,null,cluster,metadata,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1544081506;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .putNull("cluster.metadata.display_name")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,put,null,cluster,metadata,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1547156119;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .putNull("cluster.metadata.display_name")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,put,null,cluster,metadata,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1549288028;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .putNull("cluster.metadata.display_name")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,put,null,cluster,metadata,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1549306683;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .putNull("cluster.metadata.display_name")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        })__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,put,null,cluster,metadata,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e
MonitoringIT -> public void disableMonitoring() throws Exception;1549881451;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .putNull("cluster.metadata.display_name")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        }, 30L, TimeUnit.SECONDS)__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,put,null,cluster,metadata,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e,30l,time,unit,seconds
MonitoringIT -> public void disableMonitoring() throws Exception;1550830873;Disable the monitoring service and the Local exporter.;public void disableMonitoring() throws Exception {_        final Settings settings = Settings.builder()_                .putNull("xpack.monitoring.collection.enabled")_                .putNull("xpack.monitoring.exporters._local.enabled")_                .putNull("cluster.metadata.display_name")_                .build()___        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings))___        assertBusy(() -> assertThat("Exporters are not yet stopped", getMonitoringUsageExportersDefined(), is(false)))__        assertBusy(() -> {_            try {_                _                final NodesStatsResponse response = client().admin().cluster().prepareNodesStats().clear().setThreadPool(true).get()___                for (final NodeStats nodeStats : response.getNodes()) {_                    boolean foundBulkThreads = false___                    for(final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {_                        if (WRITE.equals(threadPoolStats.getName())) {_                            foundBulkThreads = true__                            assertThat("Still some active _bulk threads!", threadPoolStats.getActive(), equalTo(0))__                            break__                        }_                    }__                    assertThat("Could not find bulk thread pool", foundBulkThreads, is(true))__                }_            } catch (Exception e) {_                throw new ElasticsearchException("Failed to wait for monitoring exporters to stop:", e)__            }_        }, 30L, TimeUnit.SECONDS)__    };disable,the,monitoring,service,and,the,local,exporter;public,void,disable,monitoring,throws,exception,final,settings,settings,settings,builder,put,null,xpack,monitoring,collection,enabled,put,null,xpack,monitoring,exporters,enabled,put,null,cluster,metadata,build,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,assert,busy,assert,that,exporters,are,not,yet,stopped,get,monitoring,usage,exporters,defined,is,false,assert,busy,try,final,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,clear,set,thread,pool,true,get,for,final,node,stats,node,stats,response,get,nodes,boolean,found,bulk,threads,false,for,final,thread,pool,stats,stats,thread,pool,stats,node,stats,get,thread,pool,if,write,equals,thread,pool,stats,get,name,found,bulk,threads,true,assert,that,still,some,active,threads,thread,pool,stats,get,active,equal,to,0,break,assert,that,could,not,find,bulk,thread,pool,found,bulk,threads,is,true,catch,exception,e,throw,new,elasticsearch,exception,failed,to,wait,for,monitoring,exporters,to,stop,e,30l,time,unit,seconds
