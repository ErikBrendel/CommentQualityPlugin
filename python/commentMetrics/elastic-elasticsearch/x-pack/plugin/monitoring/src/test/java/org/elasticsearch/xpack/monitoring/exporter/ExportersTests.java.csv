# id;timestamp;commentText;codeText;commentWords;codeWords
ExportersTests -> public void testConcurrentExports() throws Exception;1524684173;This test creates N threads that export a random number of document_using a {@link Exporters} instance.;public void testConcurrentExports() throws Exception {_        final int nbExporters = randomIntBetween(1, 5)___        Settings.Builder settings = Settings.builder()__        for (int i = 0_ i < nbExporters_ i++) {_            settings.put("xpack.monitoring.exporters._name" + String.valueOf(i) + ".type", "record")__        }__        factories.put("record", (s) -> new CountingExporter(s, threadContext))___        Exporters exporters = new Exporters(settings.build(), factories, clusterService, licenseState, threadContext)__        exporters.start()___        final Thread[] threads = new Thread[3 + randomInt(7)]__        final CyclicBarrier barrier = new CyclicBarrier(threads.length)__        final List<Throwable> exceptions = new CopyOnWriteArrayList<>()___        int total = 0___        for (int i = 0_ i < threads.length_ i++) {_            int nbDocs = randomIntBetween(10, 50)__            total += nbDocs___            final int threadNum = i__            final int threadDocs = nbDocs___            threads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    exceptions.add(e)__                }__                @Override_                protected void doRun() throws Exception {_                    List<MonitoringDoc> docs = new ArrayList<>()__                    for (int n = 0_ n < threadDocs_ n++) {_                        docs.add(new TestMonitoringDoc(randomAlphaOfLength(5), randomNonNegativeLong(), randomNonNegativeLong(),_                                                       null, MonitoredSystem.ES, randomAlphaOfLength(5), null, String.valueOf(n)))__                    }_                    barrier.await(10, TimeUnit.SECONDS)__                    exporters.export(docs, ActionListener.wrap(_                            r -> logger.debug("--> thread [{}] successfully exported {} documents", threadNum, threadDocs),_                            e -> logger.debug("--> thread [{}] failed to export {} documents", threadNum, threadDocs)))___                }_            }, "export_thread_" + i)__            threads[i].start()__        }__        for (Thread thread : threads) {_            thread.join()__        }__        assertThat(exceptions, empty())__        for (Exporter exporter : exporters) {_            assertThat(exporter, instanceOf(CountingExporter.class))__            assertThat(((CountingExporter) exporter).getExportedCount(), equalTo(total))__        }__        exporters.close()__    };this,test,creates,n,threads,that,export,a,random,number,of,document,using,a,link,exporters,instance;public,void,test,concurrent,exports,throws,exception,final,int,nb,exporters,random,int,between,1,5,settings,builder,settings,settings,builder,for,int,i,0,i,nb,exporters,i,settings,put,xpack,monitoring,exporters,string,value,of,i,type,record,factories,put,record,s,new,counting,exporter,s,thread,context,exporters,exporters,new,exporters,settings,build,factories,cluster,service,license,state,thread,context,exporters,start,final,thread,threads,new,thread,3,random,int,7,final,cyclic,barrier,barrier,new,cyclic,barrier,threads,length,final,list,throwable,exceptions,new,copy,on,write,array,list,int,total,0,for,int,i,0,i,threads,length,i,int,nb,docs,random,int,between,10,50,total,nb,docs,final,int,thread,num,i,final,int,thread,docs,nb,docs,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,exceptions,add,e,override,protected,void,do,run,throws,exception,list,monitoring,doc,docs,new,array,list,for,int,n,0,n,thread,docs,n,docs,add,new,test,monitoring,doc,random,alpha,of,length,5,random,non,negative,long,random,non,negative,long,null,monitored,system,es,random,alpha,of,length,5,null,string,value,of,n,barrier,await,10,time,unit,seconds,exporters,export,docs,action,listener,wrap,r,logger,debug,thread,successfully,exported,documents,thread,num,thread,docs,e,logger,debug,thread,failed,to,export,documents,thread,num,thread,docs,i,threads,i,start,for,thread,thread,threads,thread,join,assert,that,exceptions,empty,for,exporter,exporter,exporters,assert,that,exporter,instance,of,counting,exporter,class,assert,that,counting,exporter,exporter,get,exported,count,equal,to,total,exporters,close
ExportersTests -> public void testConcurrentExports() throws Exception;1528762805;This test creates N threads that export a random number of document_using a {@link Exporters} instance.;public void testConcurrentExports() throws Exception {_        final int nbExporters = randomIntBetween(1, 5)___        Settings.Builder settings = Settings.builder()__        for (int i = 0_ i < nbExporters_ i++) {_            settings.put("xpack.monitoring.exporters._name" + String.valueOf(i) + ".type", "record")__        }__        factories.put("record", (s) -> new CountingExporter(s, threadContext))___        Exporters exporters = new Exporters(settings.build(), factories, clusterService, licenseState, threadContext)__        exporters.start()___        final Thread[] threads = new Thread[3 + randomInt(7)]__        final CyclicBarrier barrier = new CyclicBarrier(threads.length)__        final List<Throwable> exceptions = new CopyOnWriteArrayList<>()___        int total = 0___        for (int i = 0_ i < threads.length_ i++) {_            int nbDocs = randomIntBetween(10, 50)__            total += nbDocs___            final int threadNum = i__            final int threadDocs = nbDocs___            threads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    exceptions.add(e)__                }__                @Override_                protected void doRun() throws Exception {_                    List<MonitoringDoc> docs = new ArrayList<>()__                    for (int n = 0_ n < threadDocs_ n++) {_                        docs.add(new TestMonitoringDoc(randomAlphaOfLength(5), randomNonNegativeLong(), randomNonNegativeLong(),_                                                       null, MonitoredSystem.ES, randomAlphaOfLength(5), null, String.valueOf(n)))__                    }_                    barrier.await(10, TimeUnit.SECONDS)__                    exporters.export(docs, ActionListener.wrap(_                            r -> logger.debug("--> thread [{}] successfully exported {} documents", threadNum, threadDocs),_                            e -> logger.debug("--> thread [{}] failed to export {} documents", threadNum, threadDocs)))___                }_            }, "export_thread_" + i)__            threads[i].start()__        }__        for (Thread thread : threads) {_            thread.join()__        }__        assertThat(exceptions, empty())__        for (Exporter exporter : exporters) {_            assertThat(exporter, instanceOf(CountingExporter.class))__            assertThat(((CountingExporter) exporter).getExportedCount(), equalTo(total))__        }__        exporters.close()__    };this,test,creates,n,threads,that,export,a,random,number,of,document,using,a,link,exporters,instance;public,void,test,concurrent,exports,throws,exception,final,int,nb,exporters,random,int,between,1,5,settings,builder,settings,settings,builder,for,int,i,0,i,nb,exporters,i,settings,put,xpack,monitoring,exporters,string,value,of,i,type,record,factories,put,record,s,new,counting,exporter,s,thread,context,exporters,exporters,new,exporters,settings,build,factories,cluster,service,license,state,thread,context,exporters,start,final,thread,threads,new,thread,3,random,int,7,final,cyclic,barrier,barrier,new,cyclic,barrier,threads,length,final,list,throwable,exceptions,new,copy,on,write,array,list,int,total,0,for,int,i,0,i,threads,length,i,int,nb,docs,random,int,between,10,50,total,nb,docs,final,int,thread,num,i,final,int,thread,docs,nb,docs,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,exceptions,add,e,override,protected,void,do,run,throws,exception,list,monitoring,doc,docs,new,array,list,for,int,n,0,n,thread,docs,n,docs,add,new,test,monitoring,doc,random,alpha,of,length,5,random,non,negative,long,random,non,negative,long,null,monitored,system,es,random,alpha,of,length,5,null,string,value,of,n,barrier,await,10,time,unit,seconds,exporters,export,docs,action,listener,wrap,r,logger,debug,thread,successfully,exported,documents,thread,num,thread,docs,e,logger,debug,thread,failed,to,export,documents,thread,num,thread,docs,i,threads,i,start,for,thread,thread,threads,thread,join,assert,that,exceptions,empty,for,exporter,exporter,exporters,assert,that,exporter,instance,of,counting,exporter,class,assert,that,counting,exporter,exporter,get,exported,count,equal,to,total,exporters,close
ExportersTests -> public void testConcurrentExports() throws Exception;1543346894;This test creates N threads that export a random number of document_using a {@link Exporters} instance.;public void testConcurrentExports() throws Exception {_        final int nbExporters = randomIntBetween(1, 5)___        Settings.Builder settings = Settings.builder()__        for (int i = 0_ i < nbExporters_ i++) {_            settings.put("xpack.monitoring.exporters._name" + String.valueOf(i) + ".type", "record")__        }__        factories.put("record", (s) -> new CountingExporter(s, threadContext))___        Exporters exporters = new Exporters(settings.build(), factories, clusterService, licenseState, threadContext)__        exporters.start()___        final Thread[] threads = new Thread[3 + randomInt(7)]__        final CyclicBarrier barrier = new CyclicBarrier(threads.length)__        final List<Throwable> exceptions = new CopyOnWriteArrayList<>()___        int total = 0___        for (int i = 0_ i < threads.length_ i++) {_            int nbDocs = randomIntBetween(10, 50)__            total += nbDocs___            final int threadNum = i__            final int threadDocs = nbDocs___            threads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    exceptions.add(e)__                }__                @Override_                protected void doRun() throws Exception {_                    List<MonitoringDoc> docs = new ArrayList<>()__                    for (int n = 0_ n < threadDocs_ n++) {_                        docs.add(new TestMonitoringDoc(randomAlphaOfLength(5), randomNonNegativeLong(), randomNonNegativeLong(),_                                                       null, MonitoredSystem.ES, randomAlphaOfLength(5), null, String.valueOf(n)))__                    }_                    barrier.await(10, TimeUnit.SECONDS)__                    exporters.export(docs, ActionListener.wrap(_                            r -> logger.debug("--> thread [{}] successfully exported {} documents", threadNum, threadDocs),_                            e -> logger.debug("--> thread [{}] failed to export {} documents", threadNum, threadDocs)))___                }_            }, "export_thread_" + i)__            threads[i].start()__        }__        for (Thread thread : threads) {_            thread.join()__        }__        assertThat(exceptions, empty())__        for (Exporter exporter : exporters.getEnabledExporters()) {_            assertThat(exporter, instanceOf(CountingExporter.class))__            assertThat(((CountingExporter) exporter).getExportedCount(), equalTo(total))__        }__        exporters.close()__    };this,test,creates,n,threads,that,export,a,random,number,of,document,using,a,link,exporters,instance;public,void,test,concurrent,exports,throws,exception,final,int,nb,exporters,random,int,between,1,5,settings,builder,settings,settings,builder,for,int,i,0,i,nb,exporters,i,settings,put,xpack,monitoring,exporters,string,value,of,i,type,record,factories,put,record,s,new,counting,exporter,s,thread,context,exporters,exporters,new,exporters,settings,build,factories,cluster,service,license,state,thread,context,exporters,start,final,thread,threads,new,thread,3,random,int,7,final,cyclic,barrier,barrier,new,cyclic,barrier,threads,length,final,list,throwable,exceptions,new,copy,on,write,array,list,int,total,0,for,int,i,0,i,threads,length,i,int,nb,docs,random,int,between,10,50,total,nb,docs,final,int,thread,num,i,final,int,thread,docs,nb,docs,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,exceptions,add,e,override,protected,void,do,run,throws,exception,list,monitoring,doc,docs,new,array,list,for,int,n,0,n,thread,docs,n,docs,add,new,test,monitoring,doc,random,alpha,of,length,5,random,non,negative,long,random,non,negative,long,null,monitored,system,es,random,alpha,of,length,5,null,string,value,of,n,barrier,await,10,time,unit,seconds,exporters,export,docs,action,listener,wrap,r,logger,debug,thread,successfully,exported,documents,thread,num,thread,docs,e,logger,debug,thread,failed,to,export,documents,thread,num,thread,docs,i,threads,i,start,for,thread,thread,threads,thread,join,assert,that,exceptions,empty,for,exporter,exporter,exporters,get,enabled,exporters,assert,that,exporter,instance,of,counting,exporter,class,assert,that,counting,exporter,exporter,get,exported,count,equal,to,total,exporters,close
ExportersTests -> public void testConcurrentExports() throws Exception;1549288028;This test creates N threads that export a random number of document_using a {@link Exporters} instance.;public void testConcurrentExports() throws Exception {_        final int nbExporters = randomIntBetween(1, 5)___        Settings.Builder settings = Settings.builder()__        for (int i = 0_ i < nbExporters_ i++) {_            settings.put("xpack.monitoring.exporters._name" + String.valueOf(i) + ".type", "record")__        }__        factories.put("record", (s) -> new CountingExporter(s, threadContext))___        Exporters exporters = new Exporters(settings.build(), factories, clusterService, licenseState, threadContext)__        exporters.start()___        final Thread[] threads = new Thread[3 + randomInt(7)]__        final CyclicBarrier barrier = new CyclicBarrier(threads.length)__        final List<Throwable> exceptions = new CopyOnWriteArrayList<>()___        int total = 0___        for (int i = 0_ i < threads.length_ i++) {_            int nbDocs = randomIntBetween(10, 50)__            total += nbDocs___            final int threadNum = i__            final int threadDocs = nbDocs___            threads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    exceptions.add(e)__                }__                @Override_                protected void doRun() throws Exception {_                    List<MonitoringDoc> docs = new ArrayList<>()__                    for (int n = 0_ n < threadDocs_ n++) {_                        docs.add(new TestMonitoringDoc(randomAlphaOfLength(5), randomNonNegativeLong(), randomNonNegativeLong(),_                                                       null, MonitoredSystem.ES, randomAlphaOfLength(5), null, String.valueOf(n)))__                    }_                    barrier.await(10, TimeUnit.SECONDS)__                    exporters.export(docs, ActionListener.wrap(_                            r -> logger.debug("--> thread [{}] successfully exported {} documents", threadNum, threadDocs),_                            e -> logger.debug("--> thread [{}] failed to export {} documents", threadNum, threadDocs)))___                }_            }, "export_thread_" + i)__            threads[i].start()__        }__        for (Thread thread : threads) {_            thread.join()__        }__        assertThat(exceptions, empty())__        for (Exporter exporter : exporters.getEnabledExporters()) {_            assertThat(exporter, instanceOf(CountingExporter.class))__            assertThat(((CountingExporter) exporter).getExportedCount(), equalTo(total))__        }__        exporters.close()__    };this,test,creates,n,threads,that,export,a,random,number,of,document,using,a,link,exporters,instance;public,void,test,concurrent,exports,throws,exception,final,int,nb,exporters,random,int,between,1,5,settings,builder,settings,settings,builder,for,int,i,0,i,nb,exporters,i,settings,put,xpack,monitoring,exporters,string,value,of,i,type,record,factories,put,record,s,new,counting,exporter,s,thread,context,exporters,exporters,new,exporters,settings,build,factories,cluster,service,license,state,thread,context,exporters,start,final,thread,threads,new,thread,3,random,int,7,final,cyclic,barrier,barrier,new,cyclic,barrier,threads,length,final,list,throwable,exceptions,new,copy,on,write,array,list,int,total,0,for,int,i,0,i,threads,length,i,int,nb,docs,random,int,between,10,50,total,nb,docs,final,int,thread,num,i,final,int,thread,docs,nb,docs,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,exceptions,add,e,override,protected,void,do,run,throws,exception,list,monitoring,doc,docs,new,array,list,for,int,n,0,n,thread,docs,n,docs,add,new,test,monitoring,doc,random,alpha,of,length,5,random,non,negative,long,random,non,negative,long,null,monitored,system,es,random,alpha,of,length,5,null,string,value,of,n,barrier,await,10,time,unit,seconds,exporters,export,docs,action,listener,wrap,r,logger,debug,thread,successfully,exported,documents,thread,num,thread,docs,e,logger,debug,thread,failed,to,export,documents,thread,num,thread,docs,i,threads,i,start,for,thread,thread,threads,thread,join,assert,that,exceptions,empty,for,exporter,exporter,exporters,get,enabled,exporters,assert,that,exporter,instance,of,counting,exporter,class,assert,that,counting,exporter,exporter,get,exported,count,equal,to,total,exporters,close
