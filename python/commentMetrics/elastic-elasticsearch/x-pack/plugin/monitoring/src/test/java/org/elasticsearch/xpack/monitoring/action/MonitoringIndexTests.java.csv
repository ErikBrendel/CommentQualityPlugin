commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testDataMatchesIndexName() {     assertFalse(MonitoringIndex.IGNORED_DATA.matchesIndexName("_data")).     assertFalse(MonitoringIndex.IGNORED_DATA.matchesIndexName("_DATA")).     assertFalse(MonitoringIndex.IGNORED_DATA.matchesIndexName("_dAtA")).     assertFalse(MonitoringIndex.IGNORED_DATA.matchesIndexName("_data ")).     assertFalse(MonitoringIndex.IGNORED_DATA.matchesIndexName(" _data ")).     assertFalse(MonitoringIndex.IGNORED_DATA.matchesIndexName("")).     assertFalse(MonitoringIndex.IGNORED_DATA.matchesIndexName(null)). }
false;public;0;6;;public void testTimestampMatchesIndexName() {     assertTrue(MonitoringIndex.TIMESTAMPED.matchesIndexName("")).     assertTrue(MonitoringIndex.TIMESTAMPED.matchesIndexName(null)).     assertFalse(MonitoringIndex.TIMESTAMPED.matchesIndexName(" ")).     assertFalse(MonitoringIndex.TIMESTAMPED.matchesIndexName("_data")). }
false;public;0;5;;public void testFrom() {     assertSame(MonitoringIndex.IGNORED_DATA, MonitoringIndex.from("_data")).     assertSame(MonitoringIndex.TIMESTAMPED, MonitoringIndex.from("")).     assertSame(MonitoringIndex.TIMESTAMPED, MonitoringIndex.from(null)). }
false;public;0;9;;public void testFromFails() {     String[] invalidNames = { "_DATA", "other", "    " }.     for (String name : invalidNames) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> MonitoringIndex.from(name)).         assertEquals("unrecognized index name [" + name + "]", e.getMessage()).     } }
false;public;0;16;;public void testStreaming() throws IOException {     MonitoringIndex index = randomFrom(MonitoringIndex.values()).     final BytesStreamOutput out = new BytesStreamOutput().     index.writeTo(out).     final StreamInput in = out.bytes().streamInput().     assertSame(index, MonitoringIndex.readFrom(in)).     assertEquals(0, in.available()).     in.close().     out.close(). }
