commented;modifiers;parameterAmount;loc;comment;code
false;static;0;4;;@SuppressWarnings("unchecked") static ActionListener<Boolean> mockBooleanActionListener() {     return mock(ActionListener.class). }
false;static;2;6;;static void whenPerformRequestAsyncWith(final RestClient client, final Response response) {     doAnswer(invocation -> {         ((ResponseListener) invocation.getArguments()[1]).onSuccess(response).         return null.     }).when(client).performRequestAsync(any(Request.class), any(ResponseListener.class)). }
false;static;3;6;;static void whenPerformRequestAsyncWith(final RestClient client, final Matcher<Request> request, final Response response) {     doAnswer(invocation -> {         ((ResponseListener) invocation.getArguments()[1]).onSuccess(response).         return null.     }).when(client).performRequestAsync(argThat(request), any(ResponseListener.class)). }
false;static;3;7;;static void whenPerformRequestAsyncWith(final RestClient client, final Matcher<Request> request, final List<Response> responses) {     if (responses.size() == 1) {         whenPerformRequestAsyncWith(client, request, responses.get(0)).     } else if (responses.size() > 1) {         whenPerformRequestAsyncWith(client, request, responses.get(0), responses.subList(1, responses.size()), null).     } }
false;static;4;6;;static void whenPerformRequestAsyncWith(final RestClient client, final Matcher<Request> request, final Response response, final Exception exception) {     whenPerformRequestAsyncWith(client, request, response, null, exception). }
false;static;5;28;;static void whenPerformRequestAsyncWith(final RestClient client, final Matcher<Request> request, final Response first, final List<Response> responses, final Exception exception) {     Stubber stub = doAnswer(invocation -> {         ((ResponseListener) invocation.getArguments()[1]).onSuccess(first).         return null.     }).     if (responses != null) {         for (final Response response : responses) {             stub.doAnswer(invocation -> {                 ((ResponseListener) invocation.getArguments()[1]).onSuccess(response).                 return null.             }).         }     }     if (exception != null) {         stub.doAnswer(invocation -> {             ((ResponseListener) invocation.getArguments()[1]).onFailure(exception).             return null.         }).     }     stub.when(client).performRequestAsync(argThat(request), any(ResponseListener.class)). }
false;static;3;6;;static void whenPerformRequestAsyncWith(final RestClient client, final Request request, final Response response) {     doAnswer(invocation -> {         ((ResponseListener) invocation.getArguments()[1]).onSuccess(response).         return null.     }).when(client).performRequestAsync(eq(request), any(ResponseListener.class)). }
false;static;2;6;;static void whenPerformRequestAsyncWith(final RestClient client, final Exception exception) {     doAnswer(invocation -> {         ((ResponseListener) invocation.getArguments()[1]).onFailure(exception).         return null.     }).when(client).performRequestAsync(any(Request.class), any(ResponseListener.class)). }
false;static;3;6;;static void whenPerformRequestAsyncWith(final RestClient client, final Matcher<Request> request, final Exception exception) {     doAnswer(invocation -> {         ((ResponseListener) invocation.getArguments()[1]).onFailure(exception).         return null.     }).when(client).performRequestAsync(argThat(request), any(ResponseListener.class)). }
false;static;3;6;;static void whenPerformRequestAsyncWith(final RestClient client, final Request request, final Exception exception) {     doAnswer(invocation -> {         ((ResponseListener) invocation.getArguments()[1]).onFailure(exception).         return null.     }).when(client).performRequestAsync(eq(request), any(ResponseListener.class)). }
