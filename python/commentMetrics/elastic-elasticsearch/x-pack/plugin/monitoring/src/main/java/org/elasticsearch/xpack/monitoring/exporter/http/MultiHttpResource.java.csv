# id;timestamp;commentText;codeText;commentWords;codeWords
MultiHttpResource -> @Override     protected boolean doCheckAndPublish(RestClient client);1524684173;Check and publish all {@linkplain #resources sub-resources}.;@Override_    protected boolean doCheckAndPublish(RestClient client) {_        logger.trace("checking sub-resources existence and publishing on the [{}]", resourceOwnerName)___        boolean exists = true___        _        for (final HttpResource resource : resources) {_            if (resource.checkAndPublish(client) == false) {_                exists = false__                break__            }_        }__        logger.trace("all sub-resources exist [{}] on the [{}]", exists, resourceOwnerName)___        return exists__    };check,and,publish,all,linkplain,resources,sub,resources;override,protected,boolean,do,check,and,publish,rest,client,client,logger,trace,checking,sub,resources,existence,and,publishing,on,the,resource,owner,name,boolean,exists,true,for,final,http,resource,resource,resources,if,resource,check,and,publish,client,false,exists,false,break,logger,trace,all,sub,resources,exist,on,the,exists,resource,owner,name,return,exists
MultiHttpResource -> @Override     protected boolean doCheckAndPublish(RestClient client);1540847035;Check and publish all {@linkplain #resources sub-resources}.;@Override_    protected boolean doCheckAndPublish(RestClient client) {_        logger.trace("checking sub-resources existence and publishing on the [{}]", resourceOwnerName)___        boolean exists = true___        _        for (final HttpResource resource : resources) {_            if (resource.checkAndPublish(client) == false) {_                exists = false__                break__            }_        }__        logger.trace("all sub-resources exist [{}] on the [{}]", exists, resourceOwnerName)___        return exists__    };check,and,publish,all,linkplain,resources,sub,resources;override,protected,boolean,do,check,and,publish,rest,client,client,logger,trace,checking,sub,resources,existence,and,publishing,on,the,resource,owner,name,boolean,exists,true,for,final,http,resource,resource,resources,if,resource,check,and,publish,client,false,exists,false,break,logger,trace,all,sub,resources,exist,on,the,exists,resource,owner,name,return,exists
MultiHttpResource -> public List<HttpResource> getResources();1524684173;Get the resources that are checked by this {@link MultiHttpResource}.__@return Never {@code null}.;public List<HttpResource> getResources() {_        return resources__    };get,the,resources,that,are,checked,by,this,link,multi,http,resource,return,never,code,null;public,list,http,resource,get,resources,return,resources
MultiHttpResource -> public List<HttpResource> getResources();1540847035;Get the resources that are checked by this {@link MultiHttpResource}.__@return Never {@code null}.;public List<HttpResource> getResources() {_        return resources__    };get,the,resources,that,are,checked,by,this,link,multi,http,resource,return,never,code,null;public,list,http,resource,get,resources,return,resources
MultiHttpResource -> public List<HttpResource> getResources();1543346894;Get the resources that are checked by this {@link MultiHttpResource}.__@return Never {@code null}.;public List<HttpResource> getResources() {_        return resources__    };get,the,resources,that,are,checked,by,this,link,multi,http,resource,return,never,code,null;public,list,http,resource,get,resources,return,resources
MultiHttpResource -> public MultiHttpResource(final String resourceOwnerName, final List<? extends HttpResource> resources);1524684173;Create a {@link MultiHttpResource}.__@param resourceOwnerName The user-recognizable name._@param resources The sub-resources to aggregate.;public MultiHttpResource(final String resourceOwnerName, final List<? extends HttpResource> resources) {_        super(resourceOwnerName)___        this.resources = Collections.unmodifiableList(resources)__    };create,a,link,multi,http,resource,param,resource,owner,name,the,user,recognizable,name,param,resources,the,sub,resources,to,aggregate;public,multi,http,resource,final,string,resource,owner,name,final,list,extends,http,resource,resources,super,resource,owner,name,this,resources,collections,unmodifiable,list,resources
MultiHttpResource -> public MultiHttpResource(final String resourceOwnerName, final List<? extends HttpResource> resources);1540847035;Create a {@link MultiHttpResource}.__@param resourceOwnerName The user-recognizable name._@param resources The sub-resources to aggregate.;public MultiHttpResource(final String resourceOwnerName, final List<? extends HttpResource> resources) {_        super(resourceOwnerName)___        this.resources = Collections.unmodifiableList(resources)__    };create,a,link,multi,http,resource,param,resource,owner,name,the,user,recognizable,name,param,resources,the,sub,resources,to,aggregate;public,multi,http,resource,final,string,resource,owner,name,final,list,extends,http,resource,resources,super,resource,owner,name,this,resources,collections,unmodifiable,list,resources
MultiHttpResource -> public MultiHttpResource(final String resourceOwnerName, final List<? extends HttpResource> resources);1543346894;Create a {@link MultiHttpResource}.__@param resourceOwnerName The user-recognizable name._@param resources The sub-resources to aggregate.;public MultiHttpResource(final String resourceOwnerName, final List<? extends HttpResource> resources) {_        super(resourceOwnerName)___        if (resources.isEmpty()) {_            throw new IllegalArgumentException("[resources] cannot be empty")__        }__        this.resources = Collections.unmodifiableList(resources)__    };create,a,link,multi,http,resource,param,resource,owner,name,the,user,recognizable,name,param,resources,the,sub,resources,to,aggregate;public,multi,http,resource,final,string,resource,owner,name,final,list,extends,http,resource,resources,super,resource,owner,name,if,resources,is,empty,throw,new,illegal,argument,exception,resources,cannot,be,empty,this,resources,collections,unmodifiable,list,resources
