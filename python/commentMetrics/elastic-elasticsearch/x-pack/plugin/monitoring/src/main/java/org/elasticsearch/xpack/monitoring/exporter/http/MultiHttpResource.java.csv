commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Get the resources that are checked by this {@link MultiHttpResource}.  *  * @return Never {@code null}.  */ ;/**  * Get the resources that are checked by this {@link MultiHttpResource}.  *  * @return Never {@code null}.  */ public List<HttpResource> getResources() {     return resources. }
false;public;1;11;;@Override public void onResponse(final Boolean success) {     // short-circuit on the first failure     if (success && iterator.hasNext()) {         iterator.next().checkAndPublish(client, this).     } else {         logger.trace("all sub-resources exist [{}] on the [{}]", success, resourceOwnerName).         listener.onResponse(success).     } }
false;public;1;6;;@Override public void onFailure(final Exception e) {     logger.trace("all sub-resources exist [false] on the [{}]", resourceOwnerName).     listener.onFailure(e). }
true;protected;2;30;/**  * Check and publish all {@linkplain #resources sub-resources}.  */ ;/**  * Check and publish all {@linkplain #resources sub-resources}.  */ @Override protected void doCheckAndPublish(final RestClient client, final ActionListener<Boolean> listener) {     logger.trace("checking sub-resources existence and publishing on the [{}]", resourceOwnerName).     final Iterator<HttpResource> iterator = resources.iterator().     // short-circuits on the first failure, thus marking the whole thing dirty     iterator.next().checkAndPublish(client, new ActionListener<Boolean>() {          @Override         public void onResponse(final Boolean success) {             // short-circuit on the first failure             if (success && iterator.hasNext()) {                 iterator.next().checkAndPublish(client, this).             } else {                 logger.trace("all sub-resources exist [{}] on the [{}]", success, resourceOwnerName).                 listener.onResponse(success).             }         }          @Override         public void onFailure(final Exception e) {             logger.trace("all sub-resources exist [false] on the [{}]", resourceOwnerName).             listener.onFailure(e).         }     }). }
