commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Create an empty {@link HttpHostBuilder}.  * <p>  * The expectation is that you then explicitly build the {@link HttpHost} piece-by-piece.  * <p>  * For example:  * <pre><code>  * HttpHost localhost = HttpHostBuilder.builder().host("localhost").build().                            // http://localhost:9200  * HttpHost explicitLocalhost = HttpHostBuilder.builder.().scheme(Scheme.HTTP).host("localhost").port(9200).build().  *                                                                                                      // http://localhost:9200  * HttpHost secureLocalhost = HttpHostBuilder.builder().scheme(Scheme.HTTPS).host("localhost").build(). // https://localhost:9200  * HttpHost differentPort = HttpHostBuilder.builder().host("my_host").port(19200).build().              // https://my_host:19200  * HttpHost ipBased = HttpHostBuilder.builder().host("192.168.0.11").port(80).build().                  // https://192.168.0.11:80  * </code></pre>  *  * @return Never {@code null}.  */ ;/**  * Create an empty {@link HttpHostBuilder}.  * <p>  * The expectation is that you then explicitly build the {@link HttpHost} piece-by-piece.  * <p>  * For example:  * <pre><code>  * HttpHost localhost = HttpHostBuilder.builder().host("localhost").build().                            // http://localhost:9200  * HttpHost explicitLocalhost = HttpHostBuilder.builder.().scheme(Scheme.HTTP).host("localhost").port(9200).build().  *                                                                                                      // http://localhost:9200  * HttpHost secureLocalhost = HttpHostBuilder.builder().scheme(Scheme.HTTPS).host("localhost").build(). // https://localhost:9200  * HttpHost differentPort = HttpHostBuilder.builder().host("my_host").port(19200).build().              // https://my_host:19200  * HttpHost ipBased = HttpHostBuilder.builder().host("192.168.0.11").port(80).build().                  // https://192.168.0.11:80  * </code></pre>  *  * @return Never {@code null}.  */ public static HttpHostBuilder builder() {     return new HttpHostBuilder(). }
true;public,static;1;3;/**  * Create an empty {@link HttpHostBuilder}.  * <p>  * The expectation is that you then explicitly build the {@link HttpHost} piece-by-piece.  * <p>  * For example:  * <pre><code>  * HttpHost localhost = HttpHostBuilder.builder("localhost").build().                     // http://localhost:9200  * HttpHost explicitLocalhost = HttpHostBuilder.builder("http://localhost:9200").build(). // http://localhost:9200  * HttpHost secureLocalhost = HttpHostBuilder.builder("https://localhost").build().       // https://localhost:9200  * HttpHost differentPort = HttpHostBuilder.builder("my_host:19200").build().             // http://my_host:19200  * HttpHost ipBased = HttpHostBuilder.builder("192.168.0.11:80").build().                 // http://192.168.0.11:80  * </code></pre>  *  * @return Never {@code null}.  * @throws NullPointerException if {@code uri} is {@code null}.  * @throws IllegalArgumentException if any issue occurs while parsing the {@code uri}.  */ ;/**  * Create an empty {@link HttpHostBuilder}.  * <p>  * The expectation is that you then explicitly build the {@link HttpHost} piece-by-piece.  * <p>  * For example:  * <pre><code>  * HttpHost localhost = HttpHostBuilder.builder("localhost").build().                     // http://localhost:9200  * HttpHost explicitLocalhost = HttpHostBuilder.builder("http://localhost:9200").build(). // http://localhost:9200  * HttpHost secureLocalhost = HttpHostBuilder.builder("https://localhost").build().       // https://localhost:9200  * HttpHost differentPort = HttpHostBuilder.builder("my_host:19200").build().             // http://my_host:19200  * HttpHost ipBased = HttpHostBuilder.builder("192.168.0.11:80").build().                 // http://192.168.0.11:80  * </code></pre>  *  * @return Never {@code null}.  * @throws NullPointerException if {@code uri} is {@code null}.  * @throws IllegalArgumentException if any issue occurs while parsing the {@code uri}.  */ public static HttpHostBuilder builder(final String uri) {     return new HttpHostBuilder(uri). }
true;public;1;5;/**  * Set the scheme (aka protocol) for the {@link HttpHost}.  *  * @param scheme The scheme to use.  * @return Always {@code this}.  * @throws NullPointerException if {@code scheme} is {@code null}.  */ ;/**  * Set the scheme (aka protocol) for the {@link HttpHost}.  *  * @param scheme The scheme to use.  * @return Always {@code this}.  * @throws NullPointerException if {@code scheme} is {@code null}.  */ public HttpHostBuilder scheme(final Scheme scheme) {     this.scheme = Objects.requireNonNull(scheme).     return this. }
true;public;1;5;/**  * Set the host for the {@link HttpHost}.  * <p>  * This does not attempt to parse the {@code host} in any way.  *  * @param host The host to use.  * @return Always {@code this}.  * @throws NullPointerException if {@code host} is {@code null}.  */ ;/**  * Set the host for the {@link HttpHost}.  * <p>  * This does not attempt to parse the {@code host} in any way.  *  * @param host The host to use.  * @return Always {@code this}.  * @throws NullPointerException if {@code host} is {@code null}.  */ public HttpHostBuilder host(final String host) {     this.host = Objects.requireNonNull(host).     return this. }
true;public;1;10;/**  * Set the port for the {@link HttpHost}.  * <p>  * Specifying the {@code port} as -1 will cause it to be defaulted to 9200 when the {@code HttpHost} is built.  *  * @param port The port to use.  * @return Always {@code this}.  * @throws IllegalArgumentException if the {@code port} is not -1 or [1, 65535].  */ ;/**  * Set the port for the {@link HttpHost}.  * <p>  * Specifying the {@code port} as -1 will cause it to be defaulted to 9200 when the {@code HttpHost} is built.  *  * @param port The port to use.  * @return Always {@code this}.  * @throws IllegalArgumentException if the {@code port} is not -1 or [1, 65535].  */ public HttpHostBuilder port(final int port) {     // setting a port to 0 makes no sense when you're the client. -1 allows us to use the default when we build     if (port != -1 && (port < 1 || port > 65535)) {         throw new IllegalArgumentException("port must be -1 for the default or [1, 65535]. was: " + port).     }     this.port = port.     return this. }
true;public;0;7;/**  * Create a new {@link HttpHost} from the current {@code scheme}, {@code host}, and {@code port}.  *  * @return Never {@code null}.  * @throws IllegalStateException if {@code host} is unset.  */ ;/**  * Create a new {@link HttpHost} from the current {@code scheme}, {@code host}, and {@code port}.  *  * @return Never {@code null}.  * @throws IllegalStateException if {@code host} is unset.  */ public HttpHost build() {     if (host == null) {         throw new IllegalStateException("host must be set").     }     return new HttpHost(host, port == -1 ? 9200 : port, scheme.toString()). }
