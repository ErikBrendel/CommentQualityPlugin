# id;timestamp;commentText;codeText;commentWords;codeWords
ClusterAlertHttpResource -> public ClusterAlertHttpResource(final String resourceOwnerName,                                     final XPackLicenseState licenseState,                                     final Supplier<String> watchId,                                     @Nullable final Supplier<String> watch);1524684173;Create a new {@link ClusterAlertHttpResource}.__@param resourceOwnerName The user-recognizable name._@param watchId The name of the watch, which is lazily loaded._@param watch The watch provider. {@code null} indicates that we should always delete this Watch.;public ClusterAlertHttpResource(final String resourceOwnerName,_                                    final XPackLicenseState licenseState,_                                    final Supplier<String> watchId,_                                    @Nullable final Supplier<String> watch) {_        _        super(resourceOwnerName, null, CLUSTER_ALERT_VERSION_PARAMETERS)___        this.licenseState = Objects.requireNonNull(licenseState)__        this.watchId = Objects.requireNonNull(watchId)__        this.watch = watch__    };create,a,new,link,cluster,alert,http,resource,param,resource,owner,name,the,user,recognizable,name,param,watch,id,the,name,of,the,watch,which,is,lazily,loaded,param,watch,the,watch,provider,code,null,indicates,that,we,should,always,delete,this,watch;public,cluster,alert,http,resource,final,string,resource,owner,name,final,xpack,license,state,license,state,final,supplier,string,watch,id,nullable,final,supplier,string,watch,super,resource,owner,name,null,this,license,state,objects,require,non,null,license,state,this,watch,id,objects,require,non,null,watch,id,this,watch,watch
ClusterAlertHttpResource -> public ClusterAlertHttpResource(final String resourceOwnerName,                                     final XPackLicenseState licenseState,                                     final Supplier<String> watchId,                                     @Nullable final Supplier<String> watch);1540847035;Create a new {@link ClusterAlertHttpResource}.__@param resourceOwnerName The user-recognizable name._@param watchId The name of the watch, which is lazily loaded._@param watch The watch provider. {@code null} indicates that we should always delete this Watch.;public ClusterAlertHttpResource(final String resourceOwnerName,_                                    final XPackLicenseState licenseState,_                                    final Supplier<String> watchId,_                                    @Nullable final Supplier<String> watch) {_        _        super(resourceOwnerName, null, CLUSTER_ALERT_VERSION_PARAMETERS)___        this.licenseState = Objects.requireNonNull(licenseState)__        this.watchId = Objects.requireNonNull(watchId)__        this.watch = watch__    };create,a,new,link,cluster,alert,http,resource,param,resource,owner,name,the,user,recognizable,name,param,watch,id,the,name,of,the,watch,which,is,lazily,loaded,param,watch,the,watch,provider,code,null,indicates,that,we,should,always,delete,this,watch;public,cluster,alert,http,resource,final,string,resource,owner,name,final,xpack,license,state,license,state,final,supplier,string,watch,id,nullable,final,supplier,string,watch,super,resource,owner,name,null,this,license,state,objects,require,non,null,license,state,this,watch,id,objects,require,non,null,watch,id,this,watch,watch
ClusterAlertHttpResource -> public ClusterAlertHttpResource(final String resourceOwnerName,                                     final XPackLicenseState licenseState,                                     final Supplier<String> watchId,                                     @Nullable final Supplier<String> watch);1543346894;Create a new {@link ClusterAlertHttpResource}.__@param resourceOwnerName The user-recognizable name._@param watchId The name of the watch, which is lazily loaded._@param watch The watch provider. {@code null} indicates that we should always delete this Watch.;public ClusterAlertHttpResource(final String resourceOwnerName,_                                    final XPackLicenseState licenseState,_                                    final Supplier<String> watchId,_                                    @Nullable final Supplier<String> watch) {_        _        super(resourceOwnerName, null, CLUSTER_ALERT_VERSION_PARAMETERS)___        this.licenseState = Objects.requireNonNull(licenseState)__        this.watchId = Objects.requireNonNull(watchId)__        this.watch = watch__    };create,a,new,link,cluster,alert,http,resource,param,resource,owner,name,the,user,recognizable,name,param,watch,id,the,name,of,the,watch,which,is,lazily,loaded,param,watch,the,watch,provider,code,null,indicates,that,we,should,always,delete,this,watch;public,cluster,alert,http,resource,final,string,resource,owner,name,final,xpack,license,state,license,state,final,supplier,string,watch,id,nullable,final,supplier,string,watch,super,resource,owner,name,null,this,license,state,objects,require,non,null,license,state,this,watch,id,objects,require,non,null,watch,id,this,watch,watch
ClusterAlertHttpResource -> public ClusterAlertHttpResource(final String resourceOwnerName,                                     final XPackLicenseState licenseState,                                     final Supplier<String> watchId,                                     @Nullable final Supplier<String> watch);1544295436;Create a new {@link ClusterAlertHttpResource}.__@param resourceOwnerName The user-recognizable name._@param watchId The name of the watch, which is lazily loaded._@param watch The watch provider. {@code null} indicates that we should always delete this Watch.;public ClusterAlertHttpResource(final String resourceOwnerName,_                                    final XPackLicenseState licenseState,_                                    final Supplier<String> watchId,_                                    @Nullable final Supplier<String> watch) {_        _        super(resourceOwnerName, null, CLUSTER_ALERT_VERSION_PARAMETERS)___        this.licenseState = Objects.requireNonNull(licenseState)__        this.watchId = Objects.requireNonNull(watchId)__        this.watch = watch__    };create,a,new,link,cluster,alert,http,resource,param,resource,owner,name,the,user,recognizable,name,param,watch,id,the,name,of,the,watch,which,is,lazily,loaded,param,watch,the,watch,provider,code,null,indicates,that,we,should,always,delete,this,watch;public,cluster,alert,http,resource,final,string,resource,owner,name,final,xpack,license,state,license,state,final,supplier,string,watch,id,nullable,final,supplier,string,watch,super,resource,owner,name,null,this,license,state,objects,require,non,null,license,state,this,watch,id,objects,require,non,null,watch,id,this,watch,watch
ClusterAlertHttpResource -> public ClusterAlertHttpResource(final String resourceOwnerName,                                     final XPackLicenseState licenseState,                                     final Supplier<String> watchId,                                     @Nullable final Supplier<String> watch);1550177579;Create a new {@link ClusterAlertHttpResource}.__@param resourceOwnerName The user-recognizable name._@param watchId The name of the watch, which is lazily loaded._@param watch The watch provider. {@code null} indicates that we should always delete this Watch.;public ClusterAlertHttpResource(final String resourceOwnerName,_                                    final XPackLicenseState licenseState,_                                    final Supplier<String> watchId,_                                    @Nullable final Supplier<String> watch) {_        _        super(resourceOwnerName, null, CLUSTER_ALERT_VERSION_PARAMETERS)___        this.licenseState = Objects.requireNonNull(licenseState)__        this.watchId = Objects.requireNonNull(watchId)__        this.watch = watch__    };create,a,new,link,cluster,alert,http,resource,param,resource,owner,name,the,user,recognizable,name,param,watch,id,the,name,of,the,watch,which,is,lazily,loaded,param,watch,the,watch,provider,code,null,indicates,that,we,should,always,delete,this,watch;public,cluster,alert,http,resource,final,string,resource,owner,name,final,xpack,license,state,license,state,final,supplier,string,watch,id,nullable,final,supplier,string,watch,super,resource,owner,name,null,this,license,state,objects,require,non,null,license,state,this,watch,id,objects,require,non,null,watch,id,this,watch,watch
ClusterAlertHttpResource -> @Override     protected boolean doPublish(final RestClient client);1524684173;Publish the missing {@linkplain #watchId Watch}.;@Override_    protected boolean doPublish(final RestClient client) {_        return putResource(client, logger,_                           "/_xpack/watcher/watch", watchId.get(), this::watchToHttpEntity, "monitoring cluster alert",_                           resourceOwnerName, "monitoring cluster")__    };publish,the,missing,linkplain,watch,id,watch;override,protected,boolean,do,publish,final,rest,client,client,return,put,resource,client,logger,watcher,watch,watch,id,get,this,watch,to,http,entity,monitoring,cluster,alert,resource,owner,name,monitoring,cluster
ClusterAlertHttpResource -> @Override     protected boolean doPublish(final RestClient client);1540847035;Publish the missing {@linkplain #watchId Watch}.;@Override_    protected boolean doPublish(final RestClient client) {_        return putResource(client, logger,_                           "/_xpack/watcher/watch", watchId.get(), this::watchToHttpEntity, "monitoring cluster alert",_                           resourceOwnerName, "monitoring cluster")__    };publish,the,missing,linkplain,watch,id,watch;override,protected,boolean,do,publish,final,rest,client,client,return,put,resource,client,logger,watcher,watch,watch,id,get,this,watch,to,http,entity,monitoring,cluster,alert,resource,owner,name,monitoring,cluster
ClusterAlertHttpResource -> @Override     protected CheckResponse doCheck(final RestClient client);1524684173;Determine if the current {@linkplain #watchId Watch} exists.;@Override_    protected CheckResponse doCheck(final RestClient client) {_        _        if (isWatchDefined() && licenseState.isMonitoringClusterAlertsAllowed()) {_            final CheckedFunction<Response, Boolean, IOException> watchChecker =_                    (response) -> shouldReplaceClusterAlert(response, XContentType.JSON.xContent(), LAST_UPDATED_VERSION)___            return versionCheckForResource(client, logger,_                                           "/_xpack/watcher/watch", watchId.get(), "monitoring cluster alert",_                                           resourceOwnerName, "monitoring cluster",_                                           watchChecker)__        }__        _        final boolean deleted = deleteResource(client, logger, "/_xpack/watcher/watch", watchId.get(),_                                               "monitoring cluster alert",_                                               resourceOwnerName, "monitoring cluster")___        return deleted ? CheckResponse.EXISTS : CheckResponse.ERROR__    };determine,if,the,current,linkplain,watch,id,watch,exists;override,protected,check,response,do,check,final,rest,client,client,if,is,watch,defined,license,state,is,monitoring,cluster,alerts,allowed,final,checked,function,response,boolean,ioexception,watch,checker,response,should,replace,cluster,alert,response,xcontent,type,json,x,content,return,version,check,for,resource,client,logger,watcher,watch,watch,id,get,monitoring,cluster,alert,resource,owner,name,monitoring,cluster,watch,checker,final,boolean,deleted,delete,resource,client,logger,watcher,watch,watch,id,get,monitoring,cluster,alert,resource,owner,name,monitoring,cluster,return,deleted,check,response,exists,check,response,error
ClusterAlertHttpResource -> @Override     protected CheckResponse doCheck(final RestClient client);1540847035;Determine if the current {@linkplain #watchId Watch} exists.;@Override_    protected CheckResponse doCheck(final RestClient client) {_        _        if (isWatchDefined() && licenseState.isMonitoringClusterAlertsAllowed()) {_            final CheckedFunction<Response, Boolean, IOException> watchChecker =_                    (response) -> shouldReplaceClusterAlert(response, XContentType.JSON.xContent(), LAST_UPDATED_VERSION)___            return versionCheckForResource(client, logger,_                                           "/_xpack/watcher/watch", watchId.get(), "monitoring cluster alert",_                                           resourceOwnerName, "monitoring cluster",_                                           watchChecker)__        }__        _        final boolean deleted = deleteResource(client, logger, "/_xpack/watcher/watch", watchId.get(),_                                               "monitoring cluster alert",_                                               resourceOwnerName, "monitoring cluster")___        return deleted ? CheckResponse.EXISTS : CheckResponse.ERROR__    };determine,if,the,current,linkplain,watch,id,watch,exists;override,protected,check,response,do,check,final,rest,client,client,if,is,watch,defined,license,state,is,monitoring,cluster,alerts,allowed,final,checked,function,response,boolean,ioexception,watch,checker,response,should,replace,cluster,alert,response,xcontent,type,json,x,content,return,version,check,for,resource,client,logger,watcher,watch,watch,id,get,monitoring,cluster,alert,resource,owner,name,monitoring,cluster,watch,checker,final,boolean,deleted,delete,resource,client,logger,watcher,watch,watch,id,get,monitoring,cluster,alert,resource,owner,name,monitoring,cluster,return,deleted,check,response,exists,check,response,error
ClusterAlertHttpResource -> boolean isWatchDefined();1524684173;Determine if the {@link #watch} is defined. If not, then we should always delete the watch.__@return {@code true} if {@link #watch} is defined (non-{@code null}). Otherwise {@code false}.;boolean isWatchDefined() {_        return watch != null__    };determine,if,the,link,watch,is,defined,if,not,then,we,should,always,delete,the,watch,return,code,true,if,link,watch,is,defined,non,code,null,otherwise,code,false;boolean,is,watch,defined,return,watch,null
ClusterAlertHttpResource -> boolean isWatchDefined();1540847035;Determine if the {@link #watch} is defined. If not, then we should always delete the watch.__@return {@code true} if {@link #watch} is defined (non-{@code null}). Otherwise {@code false}.;boolean isWatchDefined() {_        return watch != null__    };determine,if,the,link,watch,is,defined,if,not,then,we,should,always,delete,the,watch,return,code,true,if,link,watch,is,defined,non,code,null,otherwise,code,false;boolean,is,watch,defined,return,watch,null
ClusterAlertHttpResource -> boolean isWatchDefined();1543346894;Determine if the {@link #watch} is defined. If not, then we should always delete the watch.__@return {@code true} if {@link #watch} is defined (non-{@code null}). Otherwise {@code false}.;boolean isWatchDefined() {_        return watch != null__    };determine,if,the,link,watch,is,defined,if,not,then,we,should,always,delete,the,watch,return,code,true,if,link,watch,is,defined,non,code,null,otherwise,code,false;boolean,is,watch,defined,return,watch,null
ClusterAlertHttpResource -> boolean isWatchDefined();1544295436;Determine if the {@link #watch} is defined. If not, then we should always delete the watch.__@return {@code true} if {@link #watch} is defined (non-{@code null}). Otherwise {@code false}.;boolean isWatchDefined() {_        return watch != null__    };determine,if,the,link,watch,is,defined,if,not,then,we,should,always,delete,the,watch,return,code,true,if,link,watch,is,defined,non,code,null,otherwise,code,false;boolean,is,watch,defined,return,watch,null
ClusterAlertHttpResource -> boolean isWatchDefined();1550177579;Determine if the {@link #watch} is defined. If not, then we should always delete the watch.__@return {@code true} if {@link #watch} is defined (non-{@code null}). Otherwise {@code false}.;boolean isWatchDefined() {_        return watch != null__    };determine,if,the,link,watch,is,defined,if,not,then,we,should,always,delete,the,watch,return,code,true,if,link,watch,is,defined,non,code,null,otherwise,code,false;boolean,is,watch,defined,return,watch,null
ClusterAlertHttpResource -> @Override     protected void doPublish(final RestClient client, final ActionListener<Boolean> listener);1543346894;Publish the missing {@linkplain #watchId Watch}.;@Override_    protected void doPublish(final RestClient client, final ActionListener<Boolean> listener) {_        putResource(client, listener, logger,_                    "/_xpack/watcher/watch", watchId.get(), this::watchToHttpEntity, "monitoring cluster alert",_                    resourceOwnerName, "monitoring cluster")__    };publish,the,missing,linkplain,watch,id,watch;override,protected,void,do,publish,final,rest,client,client,final,action,listener,boolean,listener,put,resource,client,listener,logger,watcher,watch,watch,id,get,this,watch,to,http,entity,monitoring,cluster,alert,resource,owner,name,monitoring,cluster
ClusterAlertHttpResource -> @Override     protected void doPublish(final RestClient client, final ActionListener<Boolean> listener);1544295436;Publish the missing {@linkplain #watchId Watch}.;@Override_    protected void doPublish(final RestClient client, final ActionListener<Boolean> listener) {_        putResource(client, listener, logger,_                    "/_watcher/watch", watchId.get(), this::watchToHttpEntity, "monitoring cluster alert",_                    resourceOwnerName, "monitoring cluster")__    };publish,the,missing,linkplain,watch,id,watch;override,protected,void,do,publish,final,rest,client,client,final,action,listener,boolean,listener,put,resource,client,listener,logger,watch,watch,id,get,this,watch,to,http,entity,monitoring,cluster,alert,resource,owner,name,monitoring,cluster
ClusterAlertHttpResource -> @Override     protected void doPublish(final RestClient client, final ActionListener<Boolean> listener);1550177579;Publish the missing {@linkplain #watchId Watch}.;@Override_    protected void doPublish(final RestClient client, final ActionListener<Boolean> listener) {_        putResource(client, listener, logger,_                    "/_watcher/watch", watchId.get(), Collections.emptyMap(), this::watchToHttpEntity, "monitoring cluster alert",_                    resourceOwnerName, "monitoring cluster")__    };publish,the,missing,linkplain,watch,id,watch;override,protected,void,do,publish,final,rest,client,client,final,action,listener,boolean,listener,put,resource,client,listener,logger,watch,watch,id,get,collections,empty,map,this,watch,to,http,entity,monitoring,cluster,alert,resource,owner,name,monitoring,cluster
ClusterAlertHttpResource -> @Override     protected void doCheck(final RestClient client, final ActionListener<Boolean> listener);1543346894;Determine if the current {@linkplain #watchId Watch} exists.;@Override_    protected void doCheck(final RestClient client, final ActionListener<Boolean> listener) {_        _        if (isWatchDefined() && licenseState.isMonitoringClusterAlertsAllowed()) {_            final CheckedFunction<Response, Boolean, IOException> watchChecker =_                    (response) -> shouldReplaceClusterAlert(response, XContentType.JSON.xContent(), LAST_UPDATED_VERSION)___            checkForResource(client, listener, logger,_                             "/_xpack/watcher/watch", watchId.get(), "monitoring cluster alert",_                             resourceOwnerName, "monitoring cluster",_                             GET_EXISTS, GET_DOES_NOT_EXIST,_                             watchChecker, this::alwaysReplaceResource)__        } else {_            _            deleteResource(client, listener, logger, "/_xpack/watcher/watch", watchId.get(),_                           "monitoring cluster alert",_                           resourceOwnerName, "monitoring cluster")__        }_    };determine,if,the,current,linkplain,watch,id,watch,exists;override,protected,void,do,check,final,rest,client,client,final,action,listener,boolean,listener,if,is,watch,defined,license,state,is,monitoring,cluster,alerts,allowed,final,checked,function,response,boolean,ioexception,watch,checker,response,should,replace,cluster,alert,response,xcontent,type,json,x,content,check,for,resource,client,listener,logger,watcher,watch,watch,id,get,monitoring,cluster,alert,resource,owner,name,monitoring,cluster,watch,checker,this,always,replace,resource,else,delete,resource,client,listener,logger,watcher,watch,watch,id,get,monitoring,cluster,alert,resource,owner,name,monitoring,cluster
ClusterAlertHttpResource -> @Override     protected void doCheck(final RestClient client, final ActionListener<Boolean> listener);1544295436;Determine if the current {@linkplain #watchId Watch} exists.;@Override_    protected void doCheck(final RestClient client, final ActionListener<Boolean> listener) {_        _        if (isWatchDefined() && licenseState.isMonitoringClusterAlertsAllowed()) {_            final CheckedFunction<Response, Boolean, IOException> watchChecker =_                    (response) -> shouldReplaceClusterAlert(response, XContentType.JSON.xContent(), LAST_UPDATED_VERSION)___            checkForResource(client, listener, logger,_                             "/_watcher/watch", watchId.get(), "monitoring cluster alert",_                             resourceOwnerName, "monitoring cluster",_                             GET_EXISTS, GET_DOES_NOT_EXIST,_                             watchChecker, this::alwaysReplaceResource)__        } else {_            _            deleteResource(client, listener, logger, "/_watcher/watch", watchId.get(),_                           "monitoring cluster alert",_                           resourceOwnerName, "monitoring cluster")__        }_    };determine,if,the,current,linkplain,watch,id,watch,exists;override,protected,void,do,check,final,rest,client,client,final,action,listener,boolean,listener,if,is,watch,defined,license,state,is,monitoring,cluster,alerts,allowed,final,checked,function,response,boolean,ioexception,watch,checker,response,should,replace,cluster,alert,response,xcontent,type,json,x,content,check,for,resource,client,listener,logger,watch,watch,id,get,monitoring,cluster,alert,resource,owner,name,monitoring,cluster,watch,checker,this,always,replace,resource,else,delete,resource,client,listener,logger,watch,watch,id,get,monitoring,cluster,alert,resource,owner,name,monitoring,cluster
ClusterAlertHttpResource -> @Override     protected void doCheck(final RestClient client, final ActionListener<Boolean> listener);1550177579;Determine if the current {@linkplain #watchId Watch} exists.;@Override_    protected void doCheck(final RestClient client, final ActionListener<Boolean> listener) {_        _        if (isWatchDefined() && licenseState.isMonitoringClusterAlertsAllowed()) {_            final CheckedFunction<Response, Boolean, IOException> watchChecker =_                    (response) -> shouldReplaceClusterAlert(response, XContentType.JSON.xContent(), LAST_UPDATED_VERSION)___            checkForResource(client, listener, logger,_                             "/_watcher/watch", watchId.get(), "monitoring cluster alert",_                             resourceOwnerName, "monitoring cluster",_                             GET_EXISTS, GET_DOES_NOT_EXIST,_                             watchChecker, this::alwaysReplaceResource)__        } else {_            _            deleteResource(client, listener, logger, "/_watcher/watch", watchId.get(),_                           "monitoring cluster alert",_                           resourceOwnerName, "monitoring cluster")__        }_    };determine,if,the,current,linkplain,watch,id,watch,exists;override,protected,void,do,check,final,rest,client,client,final,action,listener,boolean,listener,if,is,watch,defined,license,state,is,monitoring,cluster,alerts,allowed,final,checked,function,response,boolean,ioexception,watch,checker,response,should,replace,cluster,alert,response,xcontent,type,json,x,content,check,for,resource,client,listener,logger,watch,watch,id,get,monitoring,cluster,alert,resource,owner,name,monitoring,cluster,watch,checker,this,always,replace,resource,else,delete,resource,client,listener,logger,watch,watch,id,get,monitoring,cluster,alert,resource,owner,name,monitoring,cluster
ClusterAlertHttpResource -> boolean shouldReplaceClusterAlert(final Response response, final XContent xContent, final int minimumVersion) throws IOException;1524684173;Determine if the {@code response} contains a Watch whose value__<p>_This expects a response like:_<pre><code>__"metadata": {_"xpack": {_"version": 6000002____</code></pre>__@param response The filtered response from the Get Watcher API_@param xContent The XContent parser to use_@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version)._@return {@code true} represents that it should be replaced. {@code false} that it should be left alone._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;boolean shouldReplaceClusterAlert(final Response response, final XContent xContent, final int minimumVersion) throws IOException {_        _        final Map<String, Object> resources = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (resources.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> metadata = (Map<String, Object>) resources.get("metadata")__            @SuppressWarnings("unchecked")_            final Map<String, Object> xpack = metadata != null ? (Map<String, Object>) metadata.get("xpack") : null__            final Object version = xpack != null ? xpack.get("version_created") : null___            _            if (version instanceof Number) {_                _                return ((Number) version).intValue() < minimumVersion__            }_        }__        return true__    };determine,if,the,code,response,contains,a,watch,whose,value,p,this,expects,a,response,like,pre,code,metadata,xpack,version,6000002,code,pre,param,response,the,filtered,response,from,the,get,watcher,api,param,x,content,the,xcontent,parser,to,use,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version,return,code,true,represents,that,it,should,be,replaced,code,false,that,it,should,be,left,alone,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;boolean,should,replace,cluster,alert,final,response,response,final,xcontent,x,content,final,int,minimum,version,throws,ioexception,final,map,string,object,resources,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,resources,is,empty,false,suppress,warnings,unchecked,final,map,string,object,metadata,map,string,object,resources,get,metadata,suppress,warnings,unchecked,final,map,string,object,xpack,metadata,null,map,string,object,metadata,get,xpack,null,final,object,version,xpack,null,xpack,get,null,if,version,instanceof,number,return,number,version,int,value,minimum,version,return,true
ClusterAlertHttpResource -> boolean shouldReplaceClusterAlert(final Response response, final XContent xContent, final int minimumVersion) throws IOException;1540847035;Determine if the {@code response} contains a Watch whose value__<p>_This expects a response like:_<pre><code>__"metadata": {_"xpack": {_"version": 6000002____</code></pre>__@param response The filtered response from the Get Watcher API_@param xContent The XContent parser to use_@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version)._@return {@code true} represents that it should be replaced. {@code false} that it should be left alone._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;boolean shouldReplaceClusterAlert(final Response response, final XContent xContent, final int minimumVersion) throws IOException {_        _        final Map<String, Object> resources = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (resources.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> metadata = (Map<String, Object>) resources.get("metadata")__            @SuppressWarnings("unchecked")_            final Map<String, Object> xpack = metadata != null ? (Map<String, Object>) metadata.get("xpack") : null__            final Object version = xpack != null ? xpack.get("version_created") : null___            _            if (version instanceof Number) {_                _                return ((Number) version).intValue() < minimumVersion__            }_        }__        return true__    };determine,if,the,code,response,contains,a,watch,whose,value,p,this,expects,a,response,like,pre,code,metadata,xpack,version,6000002,code,pre,param,response,the,filtered,response,from,the,get,watcher,api,param,x,content,the,xcontent,parser,to,use,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version,return,code,true,represents,that,it,should,be,replaced,code,false,that,it,should,be,left,alone,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;boolean,should,replace,cluster,alert,final,response,response,final,xcontent,x,content,final,int,minimum,version,throws,ioexception,final,map,string,object,resources,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,resources,is,empty,false,suppress,warnings,unchecked,final,map,string,object,metadata,map,string,object,resources,get,metadata,suppress,warnings,unchecked,final,map,string,object,xpack,metadata,null,map,string,object,metadata,get,xpack,null,final,object,version,xpack,null,xpack,get,null,if,version,instanceof,number,return,number,version,int,value,minimum,version,return,true
ClusterAlertHttpResource -> boolean shouldReplaceClusterAlert(final Response response, final XContent xContent, final int minimumVersion) throws IOException;1543346894;Determine if the {@code response} contains a Watch whose value__<p>_This expects a response like:_<pre><code>__"metadata": {_"xpack": {_"version": 6000002____</code></pre>__@param response The filtered response from the Get Watcher API_@param xContent The XContent parser to use_@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version)._@return {@code true} represents that it should be replaced. {@code false} that it should be left alone._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;boolean shouldReplaceClusterAlert(final Response response, final XContent xContent, final int minimumVersion) throws IOException {_        _        final Map<String, Object> resources = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (resources.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> metadata = (Map<String, Object>) resources.get("metadata")__            @SuppressWarnings("unchecked")_            final Map<String, Object> xpack = metadata != null ? (Map<String, Object>) metadata.get("xpack") : null__            final Object version = xpack != null ? xpack.get("version_created") : null___            _            if (version instanceof Number) {_                _                return ((Number) version).intValue() < minimumVersion__            }_        }__        return true__    };determine,if,the,code,response,contains,a,watch,whose,value,p,this,expects,a,response,like,pre,code,metadata,xpack,version,6000002,code,pre,param,response,the,filtered,response,from,the,get,watcher,api,param,x,content,the,xcontent,parser,to,use,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version,return,code,true,represents,that,it,should,be,replaced,code,false,that,it,should,be,left,alone,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;boolean,should,replace,cluster,alert,final,response,response,final,xcontent,x,content,final,int,minimum,version,throws,ioexception,final,map,string,object,resources,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,resources,is,empty,false,suppress,warnings,unchecked,final,map,string,object,metadata,map,string,object,resources,get,metadata,suppress,warnings,unchecked,final,map,string,object,xpack,metadata,null,map,string,object,metadata,get,xpack,null,final,object,version,xpack,null,xpack,get,null,if,version,instanceof,number,return,number,version,int,value,minimum,version,return,true
ClusterAlertHttpResource -> boolean shouldReplaceClusterAlert(final Response response, final XContent xContent, final int minimumVersion) throws IOException;1544295436;Determine if the {@code response} contains a Watch whose value__<p>_This expects a response like:_<pre><code>__"metadata": {_"xpack": {_"version": 6000002____</code></pre>__@param response The filtered response from the Get Watcher API_@param xContent The XContent parser to use_@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version)._@return {@code true} represents that it should be replaced. {@code false} that it should be left alone._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;boolean shouldReplaceClusterAlert(final Response response, final XContent xContent, final int minimumVersion) throws IOException {_        _        final Map<String, Object> resources = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (resources.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> metadata = (Map<String, Object>) resources.get("metadata")__            @SuppressWarnings("unchecked")_            final Map<String, Object> xpack = metadata != null ? (Map<String, Object>) metadata.get("xpack") : null__            final Object version = xpack != null ? xpack.get("version_created") : null___            _            if (version instanceof Number) {_                _                return ((Number) version).intValue() < minimumVersion__            }_        }__        return true__    };determine,if,the,code,response,contains,a,watch,whose,value,p,this,expects,a,response,like,pre,code,metadata,xpack,version,6000002,code,pre,param,response,the,filtered,response,from,the,get,watcher,api,param,x,content,the,xcontent,parser,to,use,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version,return,code,true,represents,that,it,should,be,replaced,code,false,that,it,should,be,left,alone,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;boolean,should,replace,cluster,alert,final,response,response,final,xcontent,x,content,final,int,minimum,version,throws,ioexception,final,map,string,object,resources,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,resources,is,empty,false,suppress,warnings,unchecked,final,map,string,object,metadata,map,string,object,resources,get,metadata,suppress,warnings,unchecked,final,map,string,object,xpack,metadata,null,map,string,object,metadata,get,xpack,null,final,object,version,xpack,null,xpack,get,null,if,version,instanceof,number,return,number,version,int,value,minimum,version,return,true
ClusterAlertHttpResource -> boolean shouldReplaceClusterAlert(final Response response, final XContent xContent, final int minimumVersion) throws IOException;1550177579;Determine if the {@code response} contains a Watch whose value__<p>_This expects a response like:_<pre><code>__"metadata": {_"xpack": {_"version": 6000002____</code></pre>__@param response The filtered response from the Get Watcher API_@param xContent The XContent parser to use_@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version)._@return {@code true} represents that it should be replaced. {@code false} that it should be left alone._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;boolean shouldReplaceClusterAlert(final Response response, final XContent xContent, final int minimumVersion) throws IOException {_        _        final Map<String, Object> resources = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (resources.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> metadata = (Map<String, Object>) resources.get("metadata")__            @SuppressWarnings("unchecked")_            final Map<String, Object> xpack = metadata != null ? (Map<String, Object>) metadata.get("xpack") : null__            final Object version = xpack != null ? xpack.get("version_created") : null___            _            if (version instanceof Number) {_                _                return ((Number) version).intValue() < minimumVersion__            }_        }__        return true__    };determine,if,the,code,response,contains,a,watch,whose,value,p,this,expects,a,response,like,pre,code,metadata,xpack,version,6000002,code,pre,param,response,the,filtered,response,from,the,get,watcher,api,param,x,content,the,xcontent,parser,to,use,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version,return,code,true,represents,that,it,should,be,replaced,code,false,that,it,should,be,left,alone,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;boolean,should,replace,cluster,alert,final,response,response,final,xcontent,x,content,final,int,minimum,version,throws,ioexception,final,map,string,object,resources,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,resources,is,empty,false,suppress,warnings,unchecked,final,map,string,object,metadata,map,string,object,resources,get,metadata,suppress,warnings,unchecked,final,map,string,object,xpack,metadata,null,map,string,object,metadata,get,xpack,null,final,object,version,xpack,null,xpack,get,null,if,version,instanceof,number,return,number,version,int,value,minimum,version,return,true
ClusterAlertHttpResource -> HttpEntity watchToHttpEntity();1524684173;Create a {@link HttpEntity} for the {@link #watch}.__@return Never {@code null}.;HttpEntity watchToHttpEntity() {_        return new StringEntity(watch.get(), ContentType.APPLICATION_JSON)__    };create,a,link,http,entity,for,the,link,watch,return,never,code,null;http,entity,watch,to,http,entity,return,new,string,entity,watch,get,content,type
ClusterAlertHttpResource -> HttpEntity watchToHttpEntity();1540847035;Create a {@link HttpEntity} for the {@link #watch}.__@return Never {@code null}.;HttpEntity watchToHttpEntity() {_        return new StringEntity(watch.get(), ContentType.APPLICATION_JSON)__    };create,a,link,http,entity,for,the,link,watch,return,never,code,null;http,entity,watch,to,http,entity,return,new,string,entity,watch,get,content,type
ClusterAlertHttpResource -> HttpEntity watchToHttpEntity();1543346894;Create a {@link HttpEntity} for the {@link #watch}.__@return Never {@code null}.;HttpEntity watchToHttpEntity() {_        return new StringEntity(watch.get(), ContentType.APPLICATION_JSON)__    };create,a,link,http,entity,for,the,link,watch,return,never,code,null;http,entity,watch,to,http,entity,return,new,string,entity,watch,get,content,type
ClusterAlertHttpResource -> HttpEntity watchToHttpEntity();1544295436;Create a {@link HttpEntity} for the {@link #watch}.__@return Never {@code null}.;HttpEntity watchToHttpEntity() {_        return new StringEntity(watch.get(), ContentType.APPLICATION_JSON)__    };create,a,link,http,entity,for,the,link,watch,return,never,code,null;http,entity,watch,to,http,entity,return,new,string,entity,watch,get,content,type
ClusterAlertHttpResource -> HttpEntity watchToHttpEntity();1550177579;Create a {@link HttpEntity} for the {@link #watch}.__@return Never {@code null}.;HttpEntity watchToHttpEntity() {_        return new StringEntity(watch.get(), ContentType.APPLICATION_JSON)__    };create,a,link,http,entity,for,the,link,watch,return,never,code,null;http,entity,watch,to,http,entity,return,new,string,entity,watch,get,content,type
