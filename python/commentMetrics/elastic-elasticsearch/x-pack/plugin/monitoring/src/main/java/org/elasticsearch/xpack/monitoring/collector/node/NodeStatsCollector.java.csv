commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;4;// For testing purpose ;// For testing purpose @Override protected boolean shouldCollect(final boolean isElectedMaster) {     return super.shouldCollect(isElectedMaster). }
false;protected;3;26;;@Override protected Collection<MonitoringDoc> doCollect(final MonitoringDoc.Node node, final long interval, final ClusterState clusterState) throws Exception {     NodesStatsRequest request = new NodesStatsRequest("_local").     request.indices(FLAGS).     request.os(true).     request.jvm(true).     request.process(true).     request.threadPool(true).     request.fs(true).     final NodesStatsResponse response = client.admin().cluster().nodesStats(request).actionGet(getCollectionTimeout()).     // _local node (guaranteed a single exception)     if (response.hasFailures()) {         throw response.failures().get(0).     }     final String clusterUuid = clusterUuid(clusterState).     final NodeStats nodeStats = response.getNodes().get(0).     return Collections.singletonList(new NodeStatsMonitoringDoc(clusterUuid, nodeStats.getTimestamp(), interval, node, node.getUUID(), clusterState.getNodes().isLocalNodeElectedMaster(), nodeStats, BootstrapInfo.isMemoryLocked())). }
