# id;timestamp;commentText;codeText;commentWords;codeWords
Exporters -> public void export(final Collection<MonitoringDoc> docs, final ActionListener<Void> listener) throws ExportException;1543346894;Exports a collection of monitoring documents using the configured exporters;public void export(final Collection<MonitoringDoc> docs, final ActionListener<Void> listener) throws ExportException {_        if (this.lifecycleState() != Lifecycle.State.STARTED) {_            listener.onFailure(new ExportException("Export service is not started"))__        } else if (docs != null && docs.size() > 0) {_            wrapExportBulk(ActionListener.wrap(bulk -> {_                if (bulk != null) {_                    doExport(bulk, docs, listener)__                } else {_                    listener.onResponse(null)__                }_            }, listener::onFailure))__        } else {_            listener.onResponse(null)__        }_    };exports,a,collection,of,monitoring,documents,using,the,configured,exporters;public,void,export,final,collection,monitoring,doc,docs,final,action,listener,void,listener,throws,export,exception,if,this,lifecycle,state,lifecycle,state,started,listener,on,failure,new,export,exception,export,service,is,not,started,else,if,docs,null,docs,size,0,wrap,export,bulk,action,listener,wrap,bulk,if,bulk,null,do,export,bulk,docs,listener,else,listener,on,response,null,listener,on,failure,else,listener,on,response,null
Exporters -> public void export(final Collection<MonitoringDoc> docs, final ActionListener<Void> listener) throws ExportException;1547625930;Exports a collection of monitoring documents using the configured exporters;public void export(final Collection<MonitoringDoc> docs, final ActionListener<Void> listener) throws ExportException {_        if (this.lifecycleState() != Lifecycle.State.STARTED) {_            listener.onFailure(new ExportException("Export service is not started"))__        } else if (docs != null && docs.size() > 0) {_            wrapExportBulk(ActionListener.wrap(bulk -> {_                if (bulk != null) {_                    doExport(bulk, docs, listener)__                } else {_                    listener.onResponse(null)__                }_            }, listener::onFailure))__        } else {_            listener.onResponse(null)__        }_    };exports,a,collection,of,monitoring,documents,using,the,configured,exporters;public,void,export,final,collection,monitoring,doc,docs,final,action,listener,void,listener,throws,export,exception,if,this,lifecycle,state,lifecycle,state,started,listener,on,failure,new,export,exception,export,service,is,not,started,else,if,docs,null,docs,size,0,wrap,export,bulk,action,listener,wrap,bulk,if,bulk,null,do,export,bulk,docs,listener,else,listener,on,response,null,listener,on,failure,else,listener,on,response,null
Exporters -> private void doExport(final ExportBulk bulk, final Collection<MonitoringDoc> docs, final ActionListener<Void> listener);1543346894;Add {@code docs} and send the {@code bulk}, then respond to the {@code listener}.__@param bulk The bulk object to send {@code docs} through._@param docs The monitoring documents to send._@param listener Returns {@code null} when complete, or failure where relevant.;private void doExport(final ExportBulk bulk, final Collection<MonitoringDoc> docs, final ActionListener<Void> listener) {_        final AtomicReference<ExportException> exceptionRef = new AtomicReference<>()___        try {_            bulk.add(docs)__        } catch (ExportException e) {_            exceptionRef.set(e)__        } finally {_            bulk.close(lifecycleState() == Lifecycle.State.STARTED, ActionListener.wrap(r -> {_                if (exceptionRef.get() == null) {_                    listener.onResponse(null)__                } else {_                    listener.onFailure(exceptionRef.get())__                }_            }, listener::onFailure))__        }_    };add,code,docs,and,send,the,code,bulk,then,respond,to,the,code,listener,param,bulk,the,bulk,object,to,send,code,docs,through,param,docs,the,monitoring,documents,to,send,param,listener,returns,code,null,when,complete,or,failure,where,relevant;private,void,do,export,final,export,bulk,bulk,final,collection,monitoring,doc,docs,final,action,listener,void,listener,final,atomic,reference,export,exception,exception,ref,new,atomic,reference,try,bulk,add,docs,catch,export,exception,e,exception,ref,set,e,finally,bulk,close,lifecycle,state,lifecycle,state,started,action,listener,wrap,r,if,exception,ref,get,null,listener,on,response,null,else,listener,on,failure,exception,ref,get,listener,on,failure
Exporters -> private void doExport(final ExportBulk bulk, final Collection<MonitoringDoc> docs, final ActionListener<Void> listener);1547625930;Add {@code docs} and send the {@code bulk}, then respond to the {@code listener}.__@param bulk The bulk object to send {@code docs} through._@param docs The monitoring documents to send._@param listener Returns {@code null} when complete, or failure where relevant.;private void doExport(final ExportBulk bulk, final Collection<MonitoringDoc> docs, final ActionListener<Void> listener) {_        final AtomicReference<ExportException> exceptionRef = new AtomicReference<>()___        try {_            bulk.add(docs)__        } catch (ExportException e) {_            exceptionRef.set(e)__        } finally {_            bulk.close(lifecycleState() == Lifecycle.State.STARTED, ActionListener.wrap(r -> {_                if (exceptionRef.get() == null) {_                    listener.onResponse(null)__                } else {_                    listener.onFailure(exceptionRef.get())__                }_            }, listener::onFailure))__        }_    };add,code,docs,and,send,the,code,bulk,then,respond,to,the,code,listener,param,bulk,the,bulk,object,to,send,code,docs,through,param,docs,the,monitoring,documents,to,send,param,listener,returns,code,null,when,complete,or,failure,where,relevant;private,void,do,export,final,export,bulk,bulk,final,collection,monitoring,doc,docs,final,action,listener,void,listener,final,atomic,reference,export,exception,exception,ref,new,atomic,reference,try,bulk,add,docs,catch,export,exception,e,exception,ref,set,e,finally,bulk,close,lifecycle,state,lifecycle,state,started,action,listener,wrap,r,if,exception,ref,get,null,listener,on,response,null,else,listener,on,failure,exception,ref,get,listener,on,failure
Exporters -> public static List<Setting.AffixSetting<?>> getSettings();1524684173;Return all the settings of all the exporters, no matter if HTTP or Local;public static List<Setting.AffixSetting<?>> getSettings() {_        List<Setting.AffixSetting<?>> settings = new ArrayList<>()__        settings.addAll(Exporter.getSettings())__        settings.addAll(HttpExporter.getSettings())__        return settings__    };return,all,the,settings,of,all,the,exporters,no,matter,if,http,or,local;public,static,list,setting,affix,setting,get,settings,list,setting,affix,setting,settings,new,array,list,settings,add,all,exporter,get,settings,settings,add,all,http,exporter,get,settings,return,settings
Exporters -> public static List<Setting.AffixSetting<?>> getSettings();1531729807;Return all the settings of all the exporters, no matter if HTTP or Local;public static List<Setting.AffixSetting<?>> getSettings() {_        List<Setting.AffixSetting<?>> settings = new ArrayList<>()__        settings.addAll(Exporter.getSettings())__        settings.addAll(HttpExporter.getSettings())__        return settings__    };return,all,the,settings,of,all,the,exporters,no,matter,if,http,or,local;public,static,list,setting,affix,setting,get,settings,list,setting,affix,setting,settings,new,array,list,settings,add,all,exporter,get,settings,settings,add,all,http,exporter,get,settings,return,settings
Exporters -> public static List<Setting.AffixSetting<?>> getSettings();1541008027;Return all the settings of all the exporters, no matter if HTTP or Local;public static List<Setting.AffixSetting<?>> getSettings() {_        List<Setting.AffixSetting<?>> settings = new ArrayList<>()__        settings.addAll(Exporter.getSettings())__        settings.addAll(HttpExporter.getSettings())__        return settings__    };return,all,the,settings,of,all,the,exporters,no,matter,if,http,or,local;public,static,list,setting,affix,setting,get,settings,list,setting,affix,setting,settings,new,array,list,settings,add,all,exporter,get,settings,settings,add,all,http,exporter,get,settings,return,settings
Exporters -> public static List<Setting.AffixSetting<?>> getSettings();1542646292;Return all the settings of all the exporters, no matter if HTTP or Local;public static List<Setting.AffixSetting<?>> getSettings() {_        List<Setting.AffixSetting<?>> settings = new ArrayList<>()__        settings.addAll(Exporter.getSettings())__        settings.addAll(HttpExporter.getSettings())__        return settings__    };return,all,the,settings,of,all,the,exporters,no,matter,if,http,or,local;public,static,list,setting,affix,setting,get,settings,list,setting,affix,setting,settings,new,array,list,settings,add,all,exporter,get,settings,settings,add,all,http,exporter,get,settings,return,settings
Exporters -> public static List<Setting.AffixSetting<?>> getSettings();1543346894;Return all the settings of all the exporters, no matter if HTTP or Local;public static List<Setting.AffixSetting<?>> getSettings() {_        List<Setting.AffixSetting<?>> settings = new ArrayList<>()__        settings.addAll(Exporter.getSettings())__        settings.addAll(HttpExporter.getSettings())__        return settings__    };return,all,the,settings,of,all,the,exporters,no,matter,if,http,or,local;public,static,list,setting,affix,setting,get,settings,list,setting,affix,setting,settings,new,array,list,settings,add,all,exporter,get,settings,settings,add,all,http,exporter,get,settings,return,settings
Exporters -> public static List<Setting.AffixSetting<?>> getSettings();1547625930;Return all the settings of all the exporters, no matter if HTTP or Local;public static List<Setting.AffixSetting<?>> getSettings() {_        List<Setting.AffixSetting<?>> settings = new ArrayList<>()__        settings.addAll(Exporter.getSettings())__        settings.addAll(HttpExporter.getSettings())__        return settings__    };return,all,the,settings,of,all,the,exporters,no,matter,if,http,or,local;public,static,list,setting,affix,setting,get,settings,list,setting,affix,setting,settings,new,array,list,settings,add,all,exporter,get,settings,settings,add,all,http,exporter,get,settings,return,settings
Exporters -> public Collection<Exporter> getEnabledExporters();1543346894;Get all enabled {@linkplain Exporter}s.__@return Never {@code null}. Can be empty if none are enabled.;public Collection<Exporter> getEnabledExporters() {_        return exporters.get().values()__    };get,all,enabled,linkplain,exporter,s,return,never,code,null,can,be,empty,if,none,are,enabled;public,collection,exporter,get,enabled,exporters,return,exporters,get,values
Exporters -> public Collection<Exporter> getEnabledExporters();1547625930;Get all enabled {@linkplain Exporter}s.__@return Never {@code null}. Can be empty if none are enabled.;public Collection<Exporter> getEnabledExporters() {_        return exporters.get().values()__    };get,all,enabled,linkplain,exporter,s,return,never,code,null,can,be,empty,if,none,are,enabled;public,collection,exporter,get,enabled,exporters,return,exporters,get,values
Exporters -> void wrapExportBulk(final ActionListener<ExportBulk> listener);1543346894;Wrap every {@linkplain Exporter}'s {@linkplain ExportBulk} in a {@linkplain ExportBulk.Compound}.__@param listener {@code null} if no exporters are ready or available.;void wrapExportBulk(final ActionListener<ExportBulk> listener) {_        final ClusterState state = clusterService.state()___        _        if (state.blocks().hasGlobalBlock(GatewayService.STATE_NOT_RECOVERED_BLOCK) ||_            ClusterState.UNKNOWN_UUID.equals(state.metaData().clusterUUID()) ||_            state.version() == ClusterState.UNKNOWN_VERSION) {_            logger.trace("skipping exporters because the cluster state is not loaded")___            listener.onResponse(null)__            return__        }__        final Map<String, Exporter> exporterMap = exporters.get()__        final AtomicArray<ExportBulk> accumulatedBulks = new AtomicArray<>(exporterMap.size())__        final CountDown countDown = new CountDown(exporterMap.size())___        int i = 0___        _        for (final Exporter exporter : exporterMap.values()) {_            exporter.openBulk(_                new AccumulatingExportBulkActionListener(exporter.name(), i++, accumulatedBulks, countDown, threadContext, listener))__        }_    };wrap,every,linkplain,exporter,s,linkplain,export,bulk,in,a,linkplain,export,bulk,compound,param,listener,code,null,if,no,exporters,are,ready,or,available;void,wrap,export,bulk,final,action,listener,export,bulk,listener,final,cluster,state,state,cluster,service,state,if,state,blocks,has,global,block,gateway,service,cluster,state,equals,state,meta,data,cluster,uuid,state,version,cluster,state,logger,trace,skipping,exporters,because,the,cluster,state,is,not,loaded,listener,on,response,null,return,final,map,string,exporter,exporter,map,exporters,get,final,atomic,array,export,bulk,accumulated,bulks,new,atomic,array,exporter,map,size,final,count,down,count,down,new,count,down,exporter,map,size,int,i,0,for,final,exporter,exporter,exporter,map,values,exporter,open,bulk,new,accumulating,export,bulk,action,listener,exporter,name,i,accumulated,bulks,count,down,thread,context,listener
Exporters -> void wrapExportBulk(final ActionListener<ExportBulk> listener);1547625930;Wrap every {@linkplain Exporter}'s {@linkplain ExportBulk} in a {@linkplain ExportBulk.Compound}.__@param listener {@code null} if no exporters are ready or available.;void wrapExportBulk(final ActionListener<ExportBulk> listener) {_        final ClusterState state = clusterService.state()___        _        if (state.blocks().hasGlobalBlock(GatewayService.STATE_NOT_RECOVERED_BLOCK) ||_            ClusterState.UNKNOWN_UUID.equals(state.metaData().clusterUUID()) ||_            state.version() == ClusterState.UNKNOWN_VERSION) {_            logger.trace("skipping exporters because the cluster state is not loaded")___            listener.onResponse(null)__            return__        }__        final Map<String, Exporter> exporterMap = exporters.get()__        final AtomicArray<ExportBulk> accumulatedBulks = new AtomicArray<>(exporterMap.size())__        final CountDown countDown = new CountDown(exporterMap.size())___        int i = 0___        _        for (final Exporter exporter : exporterMap.values()) {_            exporter.openBulk(_                new AccumulatingExportBulkActionListener(exporter.name(), i++, accumulatedBulks, countDown, threadContext, listener))__        }_    };wrap,every,linkplain,exporter,s,linkplain,export,bulk,in,a,linkplain,export,bulk,compound,param,listener,code,null,if,no,exporters,are,ready,or,available;void,wrap,export,bulk,final,action,listener,export,bulk,listener,final,cluster,state,state,cluster,service,state,if,state,blocks,has,global,block,gateway,service,cluster,state,equals,state,meta,data,cluster,uuid,state,version,cluster,state,logger,trace,skipping,exporters,because,the,cluster,state,is,not,loaded,listener,on,response,null,return,final,map,string,exporter,exporter,map,exporters,get,final,atomic,array,export,bulk,accumulated,bulks,new,atomic,array,exporter,map,size,final,count,down,count,down,new,count,down,exporter,map,size,int,i,0,for,final,exporter,exporter,exporter,map,values,exporter,open,bulk,new,accumulating,export,bulk,action,listener,exporter,name,i,accumulated,bulks,count,down,thread,context,listener
Exporters -> AccumulatingExportBulkActionListener -> void delegateIfComplete();1543346894;Once all {@linkplain Exporter}'s have responded, whether it was success or failure, then this responds with all successful_{@linkplain ExportBulk}s wrapped using an {@linkplain ExportBulk.Compound} wrapper.;void delegateIfComplete() {_            if (countDown.countDown()) {_                final List<ExportBulk> bulkList = accumulatedBulks.asList()___                if (bulkList.isEmpty()) {_                    delegate.onResponse(null)__                } else {_                    delegate.onResponse(new ExportBulk.Compound(bulkList, threadContext))__                }_            }_        };once,all,linkplain,exporter,s,have,responded,whether,it,was,success,or,failure,then,this,responds,with,all,successful,linkplain,export,bulk,s,wrapped,using,an,linkplain,export,bulk,compound,wrapper;void,delegate,if,complete,if,count,down,count,down,final,list,export,bulk,bulk,list,accumulated,bulks,as,list,if,bulk,list,is,empty,delegate,on,response,null,else,delegate,on,response,new,export,bulk,compound,bulk,list,thread,context
Exporters -> AccumulatingExportBulkActionListener -> void delegateIfComplete();1547625930;Once all {@linkplain Exporter}'s have responded, whether it was success or failure, then this responds with all successful_{@linkplain ExportBulk}s wrapped using an {@linkplain ExportBulk.Compound} wrapper.;void delegateIfComplete() {_            if (countDown.countDown()) {_                final List<ExportBulk> bulkList = accumulatedBulks.asList()___                if (bulkList.isEmpty()) {_                    delegate.onResponse(null)__                } else {_                    delegate.onResponse(new ExportBulk.Compound(bulkList, threadContext))__                }_            }_        };once,all,linkplain,exporter,s,have,responded,whether,it,was,success,or,failure,then,this,responds,with,all,successful,linkplain,export,bulk,s,wrapped,using,an,linkplain,export,bulk,compound,wrapper;void,delegate,if,complete,if,count,down,count,down,final,list,export,bulk,bulk,list,accumulated,bulks,as,list,if,bulk,list,is,empty,delegate,on,response,null,else,delegate,on,response,new,export,bulk,compound,bulk,list,thread,context
Exporters -> public void export(Collection<MonitoringDoc> docs, ActionListener<Void> listener) throws ExportException;1524684173;Exports a collection of monitoring documents using the configured exporters;public void export(Collection<MonitoringDoc> docs, ActionListener<Void> listener) throws ExportException {_        if (this.lifecycleState() != Lifecycle.State.STARTED) {_            listener.onFailure(new ExportException("Export service is not started"))__        } else if (docs != null && docs.size() > 0) {_            final ExportBulk bulk = openBulk()___            if (bulk != null) {_                final AtomicReference<ExportException> exceptionRef = new AtomicReference<>()__                try {_                    bulk.add(docs)__                } catch (ExportException e) {_                    exceptionRef.set(e)__                } finally {_                    bulk.close(lifecycleState() == Lifecycle.State.STARTED, ActionListener.wrap(r -> {_                        if (exceptionRef.get() == null) {_                            listener.onResponse(null)__                        } else {_                            listener.onFailure(exceptionRef.get())__                        }_                    }, listener::onFailure))__                }_            } else {_                listener.onResponse(null)__            }_        } else {_            listener.onResponse(null)__        }_    };exports,a,collection,of,monitoring,documents,using,the,configured,exporters;public,void,export,collection,monitoring,doc,docs,action,listener,void,listener,throws,export,exception,if,this,lifecycle,state,lifecycle,state,started,listener,on,failure,new,export,exception,export,service,is,not,started,else,if,docs,null,docs,size,0,final,export,bulk,bulk,open,bulk,if,bulk,null,final,atomic,reference,export,exception,exception,ref,new,atomic,reference,try,bulk,add,docs,catch,export,exception,e,exception,ref,set,e,finally,bulk,close,lifecycle,state,lifecycle,state,started,action,listener,wrap,r,if,exception,ref,get,null,listener,on,response,null,else,listener,on,failure,exception,ref,get,listener,on,failure,else,listener,on,response,null,else,listener,on,response,null
Exporters -> public void export(Collection<MonitoringDoc> docs, ActionListener<Void> listener) throws ExportException;1531729807;Exports a collection of monitoring documents using the configured exporters;public void export(Collection<MonitoringDoc> docs, ActionListener<Void> listener) throws ExportException {_        if (this.lifecycleState() != Lifecycle.State.STARTED) {_            listener.onFailure(new ExportException("Export service is not started"))__        } else if (docs != null && docs.size() > 0) {_            final ExportBulk bulk = openBulk()___            if (bulk != null) {_                final AtomicReference<ExportException> exceptionRef = new AtomicReference<>()__                try {_                    bulk.add(docs)__                } catch (ExportException e) {_                    exceptionRef.set(e)__                } finally {_                    bulk.close(lifecycleState() == Lifecycle.State.STARTED, ActionListener.wrap(r -> {_                        if (exceptionRef.get() == null) {_                            listener.onResponse(null)__                        } else {_                            listener.onFailure(exceptionRef.get())__                        }_                    }, listener::onFailure))__                }_            } else {_                listener.onResponse(null)__            }_        } else {_            listener.onResponse(null)__        }_    };exports,a,collection,of,monitoring,documents,using,the,configured,exporters;public,void,export,collection,monitoring,doc,docs,action,listener,void,listener,throws,export,exception,if,this,lifecycle,state,lifecycle,state,started,listener,on,failure,new,export,exception,export,service,is,not,started,else,if,docs,null,docs,size,0,final,export,bulk,bulk,open,bulk,if,bulk,null,final,atomic,reference,export,exception,exception,ref,new,atomic,reference,try,bulk,add,docs,catch,export,exception,e,exception,ref,set,e,finally,bulk,close,lifecycle,state,lifecycle,state,started,action,listener,wrap,r,if,exception,ref,get,null,listener,on,response,null,else,listener,on,failure,exception,ref,get,listener,on,failure,else,listener,on,response,null,else,listener,on,response,null
Exporters -> public void export(Collection<MonitoringDoc> docs, ActionListener<Void> listener) throws ExportException;1541008027;Exports a collection of monitoring documents using the configured exporters;public void export(Collection<MonitoringDoc> docs, ActionListener<Void> listener) throws ExportException {_        if (this.lifecycleState() != Lifecycle.State.STARTED) {_            listener.onFailure(new ExportException("Export service is not started"))__        } else if (docs != null && docs.size() > 0) {_            final ExportBulk bulk = openBulk()___            if (bulk != null) {_                final AtomicReference<ExportException> exceptionRef = new AtomicReference<>()__                try {_                    bulk.add(docs)__                } catch (ExportException e) {_                    exceptionRef.set(e)__                } finally {_                    bulk.close(lifecycleState() == Lifecycle.State.STARTED, ActionListener.wrap(r -> {_                        if (exceptionRef.get() == null) {_                            listener.onResponse(null)__                        } else {_                            listener.onFailure(exceptionRef.get())__                        }_                    }, listener::onFailure))__                }_            } else {_                listener.onResponse(null)__            }_        } else {_            listener.onResponse(null)__        }_    };exports,a,collection,of,monitoring,documents,using,the,configured,exporters;public,void,export,collection,monitoring,doc,docs,action,listener,void,listener,throws,export,exception,if,this,lifecycle,state,lifecycle,state,started,listener,on,failure,new,export,exception,export,service,is,not,started,else,if,docs,null,docs,size,0,final,export,bulk,bulk,open,bulk,if,bulk,null,final,atomic,reference,export,exception,exception,ref,new,atomic,reference,try,bulk,add,docs,catch,export,exception,e,exception,ref,set,e,finally,bulk,close,lifecycle,state,lifecycle,state,started,action,listener,wrap,r,if,exception,ref,get,null,listener,on,response,null,else,listener,on,failure,exception,ref,get,listener,on,failure,else,listener,on,response,null,else,listener,on,response,null
Exporters -> public void export(Collection<MonitoringDoc> docs, ActionListener<Void> listener) throws ExportException;1542646292;Exports a collection of monitoring documents using the configured exporters;public void export(Collection<MonitoringDoc> docs, ActionListener<Void> listener) throws ExportException {_        if (this.lifecycleState() != Lifecycle.State.STARTED) {_            listener.onFailure(new ExportException("Export service is not started"))__        } else if (docs != null && docs.size() > 0) {_            final ExportBulk bulk = openBulk()___            if (bulk != null) {_                final AtomicReference<ExportException> exceptionRef = new AtomicReference<>()__                try {_                    bulk.add(docs)__                } catch (ExportException e) {_                    exceptionRef.set(e)__                } finally {_                    bulk.close(lifecycleState() == Lifecycle.State.STARTED, ActionListener.wrap(r -> {_                        if (exceptionRef.get() == null) {_                            listener.onResponse(null)__                        } else {_                            listener.onFailure(exceptionRef.get())__                        }_                    }, listener::onFailure))__                }_            } else {_                listener.onResponse(null)__            }_        } else {_            listener.onResponse(null)__        }_    };exports,a,collection,of,monitoring,documents,using,the,configured,exporters;public,void,export,collection,monitoring,doc,docs,action,listener,void,listener,throws,export,exception,if,this,lifecycle,state,lifecycle,state,started,listener,on,failure,new,export,exception,export,service,is,not,started,else,if,docs,null,docs,size,0,final,export,bulk,bulk,open,bulk,if,bulk,null,final,atomic,reference,export,exception,exception,ref,new,atomic,reference,try,bulk,add,docs,catch,export,exception,e,exception,ref,set,e,finally,bulk,close,lifecycle,state,lifecycle,state,started,action,listener,wrap,r,if,exception,ref,get,null,listener,on,response,null,else,listener,on,failure,exception,ref,get,listener,on,failure,else,listener,on,response,null,else,listener,on,response,null
