# id;timestamp;commentText;codeText;commentWords;codeWords
HttpExporter -> private static void configureTimeouts(final RestClientBuilder builder, final Config config);1524684173;Configure the {@link RestClientBuilder} to use initial connection and socket timeouts.__@param builder The REST client builder to configure_@param config The exporter's configuration;private static void configureTimeouts(final RestClientBuilder builder, final Config config) {_        final TimeValue connectTimeout =_                CONNECTION_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final TimeValue socketTimeout =_                CONNECTION_READ_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout))__    };configure,the,link,rest,client,builder,to,use,initial,connection,and,socket,timeouts,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration;private,static,void,configure,timeouts,final,rest,client,builder,builder,final,config,config,final,time,value,connect,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,socket,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,builder,set,request,config,callback,new,timeout,request,config,callback,connect,timeout,socket,timeout
HttpExporter -> private static void configureTimeouts(final RestClientBuilder builder, final Config config);1527840262;Configure the {@link RestClientBuilder} to use initial connection and socket timeouts.__@param builder The REST client builder to configure_@param config The exporter's configuration;private static void configureTimeouts(final RestClientBuilder builder, final Config config) {_        final TimeValue connectTimeout =_                CONNECTION_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final TimeValue socketTimeout =_                CONNECTION_READ_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout))__    };configure,the,link,rest,client,builder,to,use,initial,connection,and,socket,timeouts,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration;private,static,void,configure,timeouts,final,rest,client,builder,builder,final,config,config,final,time,value,connect,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,socket,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,builder,set,request,config,callback,new,timeout,request,config,callback,connect,timeout,socket,timeout
HttpExporter -> private static void configureTimeouts(final RestClientBuilder builder, final Config config);1528762805;Configure the {@link RestClientBuilder} to use initial connection and socket timeouts.__@param builder The REST client builder to configure_@param config The exporter's configuration;private static void configureTimeouts(final RestClientBuilder builder, final Config config) {_        final TimeValue connectTimeout =_                CONNECTION_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final TimeValue socketTimeout =_                CONNECTION_READ_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout))__    };configure,the,link,rest,client,builder,to,use,initial,connection,and,socket,timeouts,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration;private,static,void,configure,timeouts,final,rest,client,builder,builder,final,config,config,final,time,value,connect,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,socket,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,builder,set,request,config,callback,new,timeout,request,config,callback,connect,timeout,socket,timeout
HttpExporter -> private static void configureTimeouts(final RestClientBuilder builder, final Config config);1531179852;Configure the {@link RestClientBuilder} to use initial connection and socket timeouts.__@param builder The REST client builder to configure_@param config The exporter's configuration;private static void configureTimeouts(final RestClientBuilder builder, final Config config) {_        final TimeValue connectTimeout =_                CONNECTION_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final TimeValue socketTimeout =_                CONNECTION_READ_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout))__    };configure,the,link,rest,client,builder,to,use,initial,connection,and,socket,timeouts,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration;private,static,void,configure,timeouts,final,rest,client,builder,builder,final,config,config,final,time,value,connect,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,socket,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,builder,set,request,config,callback,new,timeout,request,config,callback,connect,timeout,socket,timeout
HttpExporter -> private static void configureTimeouts(final RestClientBuilder builder, final Config config);1531729807;Configure the {@link RestClientBuilder} to use initial connection and socket timeouts.__@param builder The REST client builder to configure_@param config The exporter's configuration;private static void configureTimeouts(final RestClientBuilder builder, final Config config) {_        final TimeValue connectTimeout =_                CONNECTION_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final TimeValue socketTimeout =_                CONNECTION_READ_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout))__    };configure,the,link,rest,client,builder,to,use,initial,connection,and,socket,timeouts,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration;private,static,void,configure,timeouts,final,rest,client,builder,builder,final,config,config,final,time,value,connect,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,socket,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,builder,set,request,config,callback,new,timeout,request,config,callback,connect,timeout,socket,timeout
HttpExporter -> private static void configureTimeouts(final RestClientBuilder builder, final Config config);1540847035;Configure the {@link RestClientBuilder} to use initial connection and socket timeouts.__@param builder The REST client builder to configure_@param config The exporter's configuration;private static void configureTimeouts(final RestClientBuilder builder, final Config config) {_        final TimeValue connectTimeout =_                CONNECTION_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final TimeValue socketTimeout =_                CONNECTION_READ_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout))__    };configure,the,link,rest,client,builder,to,use,initial,connection,and,socket,timeouts,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration;private,static,void,configure,timeouts,final,rest,client,builder,builder,final,config,config,final,time,value,connect,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,socket,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,builder,set,request,config,callback,new,timeout,request,config,callback,connect,timeout,socket,timeout
HttpExporter -> private static void configureTimeouts(final RestClientBuilder builder, final Config config);1541592065;Configure the {@link RestClientBuilder} to use initial connection and socket timeouts.__@param builder The REST client builder to configure_@param config The exporter's configuration;private static void configureTimeouts(final RestClientBuilder builder, final Config config) {_        final TimeValue connectTimeout =_                CONNECTION_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final TimeValue socketTimeout =_                CONNECTION_READ_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout))__    };configure,the,link,rest,client,builder,to,use,initial,connection,and,socket,timeouts,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration;private,static,void,configure,timeouts,final,rest,client,builder,builder,final,config,config,final,time,value,connect,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,socket,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,builder,set,request,config,callback,new,timeout,request,config,callback,connect,timeout,socket,timeout
HttpExporter -> private static void configureTimeouts(final RestClientBuilder builder, final Config config);1543346894;Configure the {@link RestClientBuilder} to use initial connection and socket timeouts.__@param builder The REST client builder to configure_@param config The exporter's configuration;private static void configureTimeouts(final RestClientBuilder builder, final Config config) {_        final TimeValue connectTimeout =_                CONNECTION_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final TimeValue socketTimeout =_                CONNECTION_READ_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout))__    };configure,the,link,rest,client,builder,to,use,initial,connection,and,socket,timeouts,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration;private,static,void,configure,timeouts,final,rest,client,builder,builder,final,config,config,final,time,value,connect,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,socket,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,builder,set,request,config,callback,new,timeout,request,config,callback,connect,timeout,socket,timeout
HttpExporter -> private static void configureTimeouts(final RestClientBuilder builder, final Config config);1549288028;Configure the {@link RestClientBuilder} to use initial connection and socket timeouts.__@param builder The REST client builder to configure_@param config The exporter's configuration;private static void configureTimeouts(final RestClientBuilder builder, final Config config) {_        final TimeValue connectTimeout =_                CONNECTION_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final TimeValue socketTimeout =_                CONNECTION_READ_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        builder.setRequestConfigCallback(new TimeoutRequestConfigCallback(connectTimeout, socketTimeout))__    };configure,the,link,rest,client,builder,to,use,initial,connection,and,socket,timeouts,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration;private,static,void,configure,timeouts,final,rest,client,builder,builder,final,config,config,final,time,value,connect,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,socket,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,builder,set,request,config,callback,new,timeout,request,config,callback,connect,timeout,socket,timeout
HttpExporter -> HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,                  final NodeFailureListener listener, final HttpResource resource);1524684173;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param sniffer The optional sniffer, which has already been associated with the {@code listener}_@param listener The node failure listener used to notify resources_@param resource Blocking HTTP resource to prevent bulks until all requirements are met_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,_                 final NodeFailureListener listener, final HttpResource resource) {_        super(config)___        this.client = Objects.requireNonNull(client)__        this.sniffer = sniffer__        this.resource = resource__        this.defaultParams = createDefaultParams(config)__        this.threadContext = threadContext__        this.dateTimeFormatter = dateTimeFormatter(config)___        _        listener.setResource(resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,sniffer,the,optional,sniffer,which,has,already,been,associated,with,the,code,listener,param,listener,the,node,failure,listener,used,to,notify,resources,param,resource,blocking,http,resource,to,prevent,bulks,until,all,requirements,are,met,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,nullable,final,sniffer,sniffer,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,super,config,this,client,objects,require,non,null,client,this,sniffer,sniffer,this,resource,resource,this,default,params,create,default,params,config,this,thread,context,thread,context,this,date,time,formatter,date,time,formatter,config,listener,set,resource,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,                  final NodeFailureListener listener, final HttpResource resource);1527840262;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param sniffer The optional sniffer, which has already been associated with the {@code listener}_@param listener The node failure listener used to notify resources_@param resource Blocking HTTP resource to prevent bulks until all requirements are met_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,_                 final NodeFailureListener listener, final HttpResource resource) {_        super(config)___        this.client = Objects.requireNonNull(client)__        this.sniffer = sniffer__        this.resource = resource__        this.defaultParams = createDefaultParams(config)__        this.threadContext = threadContext__        this.dateTimeFormatter = dateTimeFormatter(config)___        _        listener.setResource(resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,sniffer,the,optional,sniffer,which,has,already,been,associated,with,the,code,listener,param,listener,the,node,failure,listener,used,to,notify,resources,param,resource,blocking,http,resource,to,prevent,bulks,until,all,requirements,are,met,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,nullable,final,sniffer,sniffer,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,super,config,this,client,objects,require,non,null,client,this,sniffer,sniffer,this,resource,resource,this,default,params,create,default,params,config,this,thread,context,thread,context,this,date,time,formatter,date,time,formatter,config,listener,set,resource,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,                  final NodeFailureListener listener, final HttpResource resource);1528762805;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param sniffer The optional sniffer, which has already been associated with the {@code listener}_@param listener The node failure listener used to notify resources_@param resource Blocking HTTP resource to prevent bulks until all requirements are met_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,_                 final NodeFailureListener listener, final HttpResource resource) {_        super(config)___        this.client = Objects.requireNonNull(client)__        this.sniffer = sniffer__        this.resource = resource__        this.defaultParams = createDefaultParams(config)__        this.threadContext = threadContext__        this.dateTimeFormatter = dateTimeFormatter(config)___        _        listener.setResource(resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,sniffer,the,optional,sniffer,which,has,already,been,associated,with,the,code,listener,param,listener,the,node,failure,listener,used,to,notify,resources,param,resource,blocking,http,resource,to,prevent,bulks,until,all,requirements,are,met,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,nullable,final,sniffer,sniffer,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,super,config,this,client,objects,require,non,null,client,this,sniffer,sniffer,this,resource,resource,this,default,params,create,default,params,config,this,thread,context,thread,context,this,date,time,formatter,date,time,formatter,config,listener,set,resource,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,                  final NodeFailureListener listener, final HttpResource resource);1531179852;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param sniffer The optional sniffer, which has already been associated with the {@code listener}_@param listener The node failure listener used to notify resources_@param resource Blocking HTTP resource to prevent bulks until all requirements are met_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,_                 final NodeFailureListener listener, final HttpResource resource) {_        super(config)___        this.client = Objects.requireNonNull(client)__        this.sniffer = sniffer__        this.resource = resource__        this.defaultParams = createDefaultParams(config)__        this.threadContext = threadContext__        this.dateTimeFormatter = dateTimeFormatter(config)___        _        listener.setResource(resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,sniffer,the,optional,sniffer,which,has,already,been,associated,with,the,code,listener,param,listener,the,node,failure,listener,used,to,notify,resources,param,resource,blocking,http,resource,to,prevent,bulks,until,all,requirements,are,met,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,nullable,final,sniffer,sniffer,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,super,config,this,client,objects,require,non,null,client,this,sniffer,sniffer,this,resource,resource,this,default,params,create,default,params,config,this,thread,context,thread,context,this,date,time,formatter,date,time,formatter,config,listener,set,resource,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,                  final NodeFailureListener listener, final HttpResource resource);1531729807;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param sniffer The optional sniffer, which has already been associated with the {@code listener}_@param listener The node failure listener used to notify resources_@param resource Blocking HTTP resource to prevent bulks until all requirements are met_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,_                 final NodeFailureListener listener, final HttpResource resource) {_        super(config)___        this.client = Objects.requireNonNull(client)__        this.sniffer = sniffer__        this.resource = resource__        this.defaultParams = createDefaultParams(config)__        this.threadContext = threadContext__        this.dateTimeFormatter = dateTimeFormatter(config)___        _        listener.setResource(resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,sniffer,the,optional,sniffer,which,has,already,been,associated,with,the,code,listener,param,listener,the,node,failure,listener,used,to,notify,resources,param,resource,blocking,http,resource,to,prevent,bulks,until,all,requirements,are,met,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,nullable,final,sniffer,sniffer,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,super,config,this,client,objects,require,non,null,client,this,sniffer,sniffer,this,resource,resource,this,default,params,create,default,params,config,this,thread,context,thread,context,this,date,time,formatter,date,time,formatter,config,listener,set,resource,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,                  final NodeFailureListener listener, final HttpResource resource);1540847035;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param sniffer The optional sniffer, which has already been associated with the {@code listener}_@param listener The node failure listener used to notify resources_@param resource Blocking HTTP resource to prevent bulks until all requirements are met_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,_                 final NodeFailureListener listener, final HttpResource resource) {_        super(config)___        this.client = Objects.requireNonNull(client)__        this.sniffer = sniffer__        this.resource = resource__        this.defaultParams = createDefaultParams(config)__        this.threadContext = threadContext__        this.dateTimeFormatter = dateTimeFormatter(config)___        _        listener.setResource(resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,sniffer,the,optional,sniffer,which,has,already,been,associated,with,the,code,listener,param,listener,the,node,failure,listener,used,to,notify,resources,param,resource,blocking,http,resource,to,prevent,bulks,until,all,requirements,are,met,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,nullable,final,sniffer,sniffer,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,super,config,this,client,objects,require,non,null,client,this,sniffer,sniffer,this,resource,resource,this,default,params,create,default,params,config,this,thread,context,thread,context,this,date,time,formatter,date,time,formatter,config,listener,set,resource,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,                  final NodeFailureListener listener, final HttpResource resource);1541592065;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param sniffer The optional sniffer, which has already been associated with the {@code listener}_@param listener The node failure listener used to notify resources_@param resource Blocking HTTP resource to prevent bulks until all requirements are met_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,_                 final NodeFailureListener listener, final HttpResource resource) {_        super(config)___        this.client = Objects.requireNonNull(client)__        this.sniffer = sniffer__        this.resource = resource__        this.defaultParams = createDefaultParams(config)__        this.threadContext = threadContext__        this.dateTimeFormatter = dateTimeFormatter(config)___        _        listener.setResource(resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,sniffer,the,optional,sniffer,which,has,already,been,associated,with,the,code,listener,param,listener,the,node,failure,listener,used,to,notify,resources,param,resource,blocking,http,resource,to,prevent,bulks,until,all,requirements,are,met,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,nullable,final,sniffer,sniffer,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,super,config,this,client,objects,require,non,null,client,this,sniffer,sniffer,this,resource,resource,this,default,params,create,default,params,config,this,thread,context,thread,context,this,date,time,formatter,date,time,formatter,config,listener,set,resource,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,                  final NodeFailureListener listener, final HttpResource resource);1543346894;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param sniffer The optional sniffer, which has already been associated with the {@code listener}_@param listener The node failure listener used to notify resources_@param resource Blocking HTTP resource to prevent bulks until all requirements are met_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,_                 final NodeFailureListener listener, final HttpResource resource) {_        super(config)___        this.client = Objects.requireNonNull(client)__        this.sniffer = sniffer__        this.resource = resource__        this.defaultParams = createDefaultParams(config)__        this.threadContext = threadContext__        this.dateTimeFormatter = dateTimeFormatter(config)___        _        listener.setResource(resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,sniffer,the,optional,sniffer,which,has,already,been,associated,with,the,code,listener,param,listener,the,node,failure,listener,used,to,notify,resources,param,resource,blocking,http,resource,to,prevent,bulks,until,all,requirements,are,met,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,nullable,final,sniffer,sniffer,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,super,config,this,client,objects,require,non,null,client,this,sniffer,sniffer,this,resource,resource,this,default,params,create,default,params,config,this,thread,context,thread,context,this,date,time,formatter,date,time,formatter,config,listener,set,resource,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,                  final NodeFailureListener listener, final HttpResource resource);1549288028;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param sniffer The optional sniffer, which has already been associated with the {@code listener}_@param listener The node failure listener used to notify resources_@param resource Blocking HTTP resource to prevent bulks until all requirements are met_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, @Nullable final Sniffer sniffer, final ThreadContext threadContext,_                 final NodeFailureListener listener, final HttpResource resource) {_        super(config)___        this.client = Objects.requireNonNull(client)__        this.sniffer = sniffer__        this.resource = resource__        this.defaultParams = createDefaultParams(config)__        this.threadContext = threadContext__        this.dateTimeFormatter = dateTimeFormatter(config)___        _        listener.setResource(resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,sniffer,the,optional,sniffer,which,has,already,been,associated,with,the,code,listener,param,listener,the,node,failure,listener,used,to,notify,resources,param,resource,blocking,http,resource,to,prevent,bulks,until,all,requirements,are,met,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,nullable,final,sniffer,sniffer,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,super,config,this,client,objects,require,non,null,client,this,sniffer,sniffer,this,resource,resource,this,default,params,create,default,params,config,this,thread,context,thread,context,this,date,time,formatter,date,time,formatter,config,listener,set,resource,resource
HttpExporter -> private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService);1524684173;Configure the {@link RestClientBuilder} to use {@linkplain CredentialsProvider user authentication} and/or_{@linkplain SSLContext SSL / TLS}.__@param builder The REST client builder to configure_@param config The exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting causes issues;private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService) {_        final Settings sslSettings = SSL_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final SSLIOSessionStrategy sslStrategy = sslService.sslIOSessionStrategy(sslSettings)__        final CredentialsProvider credentialsProvider = createCredentialsProvider(config)__        List<String> hostList = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (credentialsProvider != null && hostList.stream().findFirst().orElse("").startsWith("https") == false) {_            logger.warn("exporter [{}] is not using https, but using user authentication with plaintext " +_                    "username/password!", config.name())__        }__        if (sslStrategy != null) {_            builder.setHttpClientConfigCallback(new SecurityHttpClientConfigCallback(sslStrategy, credentialsProvider))__        }_    };configure,the,link,rest,client,builder,to,use,linkplain,credentials,provider,user,authentication,and,or,linkplain,sslcontext,ssl,tls,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,causes,issues;private,static,void,configure,security,final,rest,client,builder,builder,final,config,config,final,sslservice,ssl,service,final,settings,ssl,settings,get,concrete,setting,for,namespace,config,name,get,config,settings,final,ssliosession,strategy,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,settings,final,credentials,provider,credentials,provider,create,credentials,provider,config,list,string,host,list,get,concrete,setting,for,namespace,config,name,get,config,settings,if,credentials,provider,null,host,list,stream,find,first,or,else,starts,with,https,false,logger,warn,exporter,is,not,using,https,but,using,user,authentication,with,plaintext,username,password,config,name,if,ssl,strategy,null,builder,set,http,client,config,callback,new,security,http,client,config,callback,ssl,strategy,credentials,provider
HttpExporter -> private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService);1527840262;Configure the {@link RestClientBuilder} to use {@linkplain CredentialsProvider user authentication} and/or_{@linkplain SSLContext SSL / TLS}.__@param builder The REST client builder to configure_@param config The exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting causes issues;private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService) {_        final Settings sslSettings = SSL_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final SSLIOSessionStrategy sslStrategy = sslService.sslIOSessionStrategy(sslSettings)__        final CredentialsProvider credentialsProvider = createCredentialsProvider(config)__        List<String> hostList = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (credentialsProvider != null && hostList.stream().findFirst().orElse("").startsWith("https") == false) {_            logger.warn("exporter [{}] is not using https, but using user authentication with plaintext " +_                    "username/password!", config.name())__        }__        if (sslStrategy != null) {_            builder.setHttpClientConfigCallback(new SecurityHttpClientConfigCallback(sslStrategy, credentialsProvider))__        }_    };configure,the,link,rest,client,builder,to,use,linkplain,credentials,provider,user,authentication,and,or,linkplain,sslcontext,ssl,tls,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,causes,issues;private,static,void,configure,security,final,rest,client,builder,builder,final,config,config,final,sslservice,ssl,service,final,settings,ssl,settings,get,concrete,setting,for,namespace,config,name,get,config,settings,final,ssliosession,strategy,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,settings,final,credentials,provider,credentials,provider,create,credentials,provider,config,list,string,host,list,get,concrete,setting,for,namespace,config,name,get,config,settings,if,credentials,provider,null,host,list,stream,find,first,or,else,starts,with,https,false,logger,warn,exporter,is,not,using,https,but,using,user,authentication,with,plaintext,username,password,config,name,if,ssl,strategy,null,builder,set,http,client,config,callback,new,security,http,client,config,callback,ssl,strategy,credentials,provider
HttpExporter -> private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService);1528762805;Configure the {@link RestClientBuilder} to use {@linkplain CredentialsProvider user authentication} and/or_{@linkplain SSLContext SSL / TLS}.__@param builder The REST client builder to configure_@param config The exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting causes issues;private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService) {_        final Settings sslSettings = SSL_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final SSLIOSessionStrategy sslStrategy = sslService.sslIOSessionStrategy(sslSettings)__        final CredentialsProvider credentialsProvider = createCredentialsProvider(config)__        List<String> hostList = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (credentialsProvider != null && hostList.stream().findFirst().orElse("").startsWith("https") == false) {_            logger.warn("exporter [{}] is not using https, but using user authentication with plaintext " +_                    "username/password!", config.name())__        }__        if (sslStrategy != null) {_            builder.setHttpClientConfigCallback(new SecurityHttpClientConfigCallback(sslStrategy, credentialsProvider))__        }_    };configure,the,link,rest,client,builder,to,use,linkplain,credentials,provider,user,authentication,and,or,linkplain,sslcontext,ssl,tls,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,causes,issues;private,static,void,configure,security,final,rest,client,builder,builder,final,config,config,final,sslservice,ssl,service,final,settings,ssl,settings,get,concrete,setting,for,namespace,config,name,get,config,settings,final,ssliosession,strategy,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,settings,final,credentials,provider,credentials,provider,create,credentials,provider,config,list,string,host,list,get,concrete,setting,for,namespace,config,name,get,config,settings,if,credentials,provider,null,host,list,stream,find,first,or,else,starts,with,https,false,logger,warn,exporter,is,not,using,https,but,using,user,authentication,with,plaintext,username,password,config,name,if,ssl,strategy,null,builder,set,http,client,config,callback,new,security,http,client,config,callback,ssl,strategy,credentials,provider
HttpExporter -> private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService);1531179852;Configure the {@link RestClientBuilder} to use {@linkplain CredentialsProvider user authentication} and/or_{@linkplain SSLContext SSL / TLS}.__@param builder The REST client builder to configure_@param config The exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting causes issues;private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService) {_        final Settings sslSettings = SSL_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final SSLIOSessionStrategy sslStrategy = sslService.sslIOSessionStrategy(sslSettings)__        final CredentialsProvider credentialsProvider = createCredentialsProvider(config)__        List<String> hostList = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        _        if (credentialsProvider != null && hostList.stream().findFirst().orElse("").startsWith("https") == false) {_            logger.warn("exporter [{}] is not using https, but using user authentication with plaintext " +_                    "username/password!", config.name())__        }__        if (sslStrategy != null) {_            builder.setHttpClientConfigCallback(new SecurityHttpClientConfigCallback(sslStrategy, credentialsProvider))__        }_    };configure,the,link,rest,client,builder,to,use,linkplain,credentials,provider,user,authentication,and,or,linkplain,sslcontext,ssl,tls,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,causes,issues;private,static,void,configure,security,final,rest,client,builder,builder,final,config,config,final,sslservice,ssl,service,final,settings,ssl,settings,get,concrete,setting,for,namespace,config,name,get,config,settings,final,ssliosession,strategy,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,settings,final,credentials,provider,credentials,provider,create,credentials,provider,config,list,string,host,list,get,concrete,setting,for,namespace,config,name,get,config,settings,if,credentials,provider,null,host,list,stream,find,first,or,else,starts,with,https,false,logger,warn,exporter,is,not,using,https,but,using,user,authentication,with,plaintext,username,password,config,name,if,ssl,strategy,null,builder,set,http,client,config,callback,new,security,http,client,config,callback,ssl,strategy,credentials,provider
HttpExporter -> private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService);1531729807;Configure the {@link RestClientBuilder} to use {@linkplain CredentialsProvider user authentication} and/or_{@linkplain SSLContext SSL / TLS}.__@param builder The REST client builder to configure_@param config The exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting causes issues;private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService) {_        final Setting<Settings> concreteSetting = SSL_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings sslSettings = concreteSetting.get(config.settings())__        final SSLIOSessionStrategy sslStrategy__        if (SSLConfigurationSettings.withoutPrefix().getSecureSettingsInUse(sslSettings).isEmpty()) {_            _            _            sslStrategy = sslService.sslIOSessionStrategy(sslSettings)__        } else {_            _            _            _            final SSLConfiguration sslConfiguration = sslService.getSSLConfiguration(concreteSetting.getKey())__            sslStrategy = sslService.sslIOSessionStrategy(sslConfiguration)__        }_        final CredentialsProvider credentialsProvider = createCredentialsProvider(config)__        List<String> hostList = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        _        if (credentialsProvider != null && hostList.stream().findFirst().orElse("").startsWith("https") == false) {_            logger.warn("exporter [{}] is not using https, but using user authentication with plaintext " +_                    "username/password!", config.name())__        }__        if (sslStrategy != null) {_            builder.setHttpClientConfigCallback(new SecurityHttpClientConfigCallback(sslStrategy, credentialsProvider))__        }_    };configure,the,link,rest,client,builder,to,use,linkplain,credentials,provider,user,authentication,and,or,linkplain,sslcontext,ssl,tls,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,causes,issues;private,static,void,configure,security,final,rest,client,builder,builder,final,config,config,final,sslservice,ssl,service,final,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,ssl,settings,concrete,setting,get,config,settings,final,ssliosession,strategy,ssl,strategy,if,sslconfiguration,settings,without,prefix,get,secure,settings,in,use,ssl,settings,is,empty,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,settings,else,final,sslconfiguration,ssl,configuration,ssl,service,get,sslconfiguration,concrete,setting,get,key,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,configuration,final,credentials,provider,credentials,provider,create,credentials,provider,config,list,string,host,list,get,concrete,setting,for,namespace,config,name,get,config,settings,if,credentials,provider,null,host,list,stream,find,first,or,else,starts,with,https,false,logger,warn,exporter,is,not,using,https,but,using,user,authentication,with,plaintext,username,password,config,name,if,ssl,strategy,null,builder,set,http,client,config,callback,new,security,http,client,config,callback,ssl,strategy,credentials,provider
HttpExporter -> private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService);1540847035;Configure the {@link RestClientBuilder} to use {@linkplain CredentialsProvider user authentication} and/or_{@linkplain SSLContext SSL / TLS}.__@param builder The REST client builder to configure_@param config The exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting causes issues;private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService) {_        final Setting<Settings> concreteSetting = SSL_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings sslSettings = concreteSetting.get(config.settings())__        final SSLIOSessionStrategy sslStrategy__        if (SSLConfigurationSettings.withoutPrefix().getSecureSettingsInUse(sslSettings).isEmpty()) {_            _            _            sslStrategy = sslService.sslIOSessionStrategy(sslSettings)__        } else {_            _            _            _            final SSLConfiguration sslConfiguration = sslService.getSSLConfiguration(concreteSetting.getKey())__            sslStrategy = sslService.sslIOSessionStrategy(sslConfiguration)__        }_        final CredentialsProvider credentialsProvider = createCredentialsProvider(config)__        List<String> hostList = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        _        if (credentialsProvider != null && hostList.stream().findFirst().orElse("").startsWith("https") == false) {_            logger.warn("exporter [{}] is not using https, but using user authentication with plaintext " +_                    "username/password!", config.name())__        }__        if (sslStrategy != null) {_            builder.setHttpClientConfigCallback(new SecurityHttpClientConfigCallback(sslStrategy, credentialsProvider))__        }_    };configure,the,link,rest,client,builder,to,use,linkplain,credentials,provider,user,authentication,and,or,linkplain,sslcontext,ssl,tls,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,causes,issues;private,static,void,configure,security,final,rest,client,builder,builder,final,config,config,final,sslservice,ssl,service,final,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,ssl,settings,concrete,setting,get,config,settings,final,ssliosession,strategy,ssl,strategy,if,sslconfiguration,settings,without,prefix,get,secure,settings,in,use,ssl,settings,is,empty,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,settings,else,final,sslconfiguration,ssl,configuration,ssl,service,get,sslconfiguration,concrete,setting,get,key,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,configuration,final,credentials,provider,credentials,provider,create,credentials,provider,config,list,string,host,list,get,concrete,setting,for,namespace,config,name,get,config,settings,if,credentials,provider,null,host,list,stream,find,first,or,else,starts,with,https,false,logger,warn,exporter,is,not,using,https,but,using,user,authentication,with,plaintext,username,password,config,name,if,ssl,strategy,null,builder,set,http,client,config,callback,new,security,http,client,config,callback,ssl,strategy,credentials,provider
HttpExporter -> private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService);1541592065;Configure the {@link RestClientBuilder} to use {@linkplain CredentialsProvider user authentication} and/or_{@linkplain SSLContext SSL / TLS}.__@param builder The REST client builder to configure_@param config The exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting causes issues;private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService) {_        final Setting<Settings> concreteSetting = SSL_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings sslSettings = concreteSetting.get(config.settings())__        final SSLIOSessionStrategy sslStrategy__        if (SSLConfigurationSettings.withoutPrefix().getSecureSettingsInUse(sslSettings).isEmpty()) {_            _            _            sslStrategy = sslService.sslIOSessionStrategy(sslSettings)__        } else {_            _            _            _            final SSLConfiguration sslConfiguration = sslService.getSSLConfiguration(concreteSetting.getKey())__            sslStrategy = sslService.sslIOSessionStrategy(sslConfiguration)__        }_        final CredentialsProvider credentialsProvider = createCredentialsProvider(config)__        List<String> hostList = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        _        if (credentialsProvider != null && hostList.stream().findFirst().orElse("").startsWith("https") == false) {_            logger.warn("exporter [{}] is not using https, but using user authentication with plaintext " +_                    "username/password!", config.name())__        }__        if (sslStrategy != null) {_            builder.setHttpClientConfigCallback(new SecurityHttpClientConfigCallback(sslStrategy, credentialsProvider))__        }_    };configure,the,link,rest,client,builder,to,use,linkplain,credentials,provider,user,authentication,and,or,linkplain,sslcontext,ssl,tls,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,causes,issues;private,static,void,configure,security,final,rest,client,builder,builder,final,config,config,final,sslservice,ssl,service,final,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,ssl,settings,concrete,setting,get,config,settings,final,ssliosession,strategy,ssl,strategy,if,sslconfiguration,settings,without,prefix,get,secure,settings,in,use,ssl,settings,is,empty,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,settings,else,final,sslconfiguration,ssl,configuration,ssl,service,get,sslconfiguration,concrete,setting,get,key,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,configuration,final,credentials,provider,credentials,provider,create,credentials,provider,config,list,string,host,list,get,concrete,setting,for,namespace,config,name,get,config,settings,if,credentials,provider,null,host,list,stream,find,first,or,else,starts,with,https,false,logger,warn,exporter,is,not,using,https,but,using,user,authentication,with,plaintext,username,password,config,name,if,ssl,strategy,null,builder,set,http,client,config,callback,new,security,http,client,config,callback,ssl,strategy,credentials,provider
HttpExporter -> private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService);1543346894;Configure the {@link RestClientBuilder} to use {@linkplain CredentialsProvider user authentication} and/or_{@linkplain SSLContext SSL / TLS}.__@param builder The REST client builder to configure_@param config The exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting causes issues;private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService) {_        final Setting<Settings> concreteSetting = SSL_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings sslSettings = concreteSetting.get(config.settings())__        final SSLIOSessionStrategy sslStrategy__        if (SSLConfigurationSettings.withoutPrefix().getSecureSettingsInUse(sslSettings).isEmpty()) {_            _            _            sslStrategy = sslService.sslIOSessionStrategy(sslSettings)__        } else {_            _            _            _            final SSLConfiguration sslConfiguration = sslService.getSSLConfiguration(concreteSetting.getKey())__            sslStrategy = sslService.sslIOSessionStrategy(sslConfiguration)__        }_        final CredentialsProvider credentialsProvider = createCredentialsProvider(config)__        List<String> hostList = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        _        if (credentialsProvider != null && hostList.stream().findFirst().orElse("").startsWith("https") == false) {_            logger.warn("exporter [{}] is not using https, but using user authentication with plaintext " +_                    "username/password!", config.name())__        }__        if (sslStrategy != null) {_            builder.setHttpClientConfigCallback(new SecurityHttpClientConfigCallback(sslStrategy, credentialsProvider))__        }_    };configure,the,link,rest,client,builder,to,use,linkplain,credentials,provider,user,authentication,and,or,linkplain,sslcontext,ssl,tls,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,causes,issues;private,static,void,configure,security,final,rest,client,builder,builder,final,config,config,final,sslservice,ssl,service,final,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,ssl,settings,concrete,setting,get,config,settings,final,ssliosession,strategy,ssl,strategy,if,sslconfiguration,settings,without,prefix,get,secure,settings,in,use,ssl,settings,is,empty,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,settings,else,final,sslconfiguration,ssl,configuration,ssl,service,get,sslconfiguration,concrete,setting,get,key,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,configuration,final,credentials,provider,credentials,provider,create,credentials,provider,config,list,string,host,list,get,concrete,setting,for,namespace,config,name,get,config,settings,if,credentials,provider,null,host,list,stream,find,first,or,else,starts,with,https,false,logger,warn,exporter,is,not,using,https,but,using,user,authentication,with,plaintext,username,password,config,name,if,ssl,strategy,null,builder,set,http,client,config,callback,new,security,http,client,config,callback,ssl,strategy,credentials,provider
HttpExporter -> private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService);1549288028;Configure the {@link RestClientBuilder} to use {@linkplain CredentialsProvider user authentication} and/or_{@linkplain SSLContext SSL / TLS}.__@param builder The REST client builder to configure_@param config The exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting causes issues;private static void configureSecurity(final RestClientBuilder builder, final Config config, final SSLService sslService) {_        final Setting<Settings> concreteSetting = SSL_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings sslSettings = concreteSetting.get(config.settings())__        final SSLIOSessionStrategy sslStrategy__        if (SSLConfigurationSettings.withoutPrefix().getSecureSettingsInUse(sslSettings).isEmpty()) {_            _            _            sslStrategy = sslService.sslIOSessionStrategy(sslSettings)__        } else {_            _            _            _            final SSLConfiguration sslConfiguration = sslService.getSSLConfiguration(concreteSetting.getKey())__            sslStrategy = sslService.sslIOSessionStrategy(sslConfiguration)__        }_        final CredentialsProvider credentialsProvider = createCredentialsProvider(config)__        List<String> hostList = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        _        if (credentialsProvider != null && hostList.stream().findFirst().orElse("").startsWith("https") == false) {_            logger.warn("exporter [{}] is not using https, but using user authentication with plaintext " +_                    "username/password!", config.name())__        }__        if (sslStrategy != null) {_            builder.setHttpClientConfigCallback(new SecurityHttpClientConfigCallback(sslStrategy, credentialsProvider))__        }_    };configure,the,link,rest,client,builder,to,use,linkplain,credentials,provider,user,authentication,and,or,linkplain,sslcontext,ssl,tls,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,causes,issues;private,static,void,configure,security,final,rest,client,builder,builder,final,config,config,final,sslservice,ssl,service,final,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,ssl,settings,concrete,setting,get,config,settings,final,ssliosession,strategy,ssl,strategy,if,sslconfiguration,settings,without,prefix,get,secure,settings,in,use,ssl,settings,is,empty,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,settings,else,final,sslconfiguration,ssl,configuration,ssl,service,get,sslconfiguration,concrete,setting,get,key,ssl,strategy,ssl,service,ssl,iosession,strategy,ssl,configuration,final,credentials,provider,credentials,provider,create,credentials,provider,config,list,string,host,list,get,concrete,setting,for,namespace,config,name,get,config,settings,if,credentials,provider,null,host,list,stream,find,first,or,else,starts,with,https,false,logger,warn,exporter,is,not,using,https,but,using,user,authentication,with,plaintext,username,password,config,name,if,ssl,strategy,null,builder,set,http,client,config,callback,new,security,http,client,config,callback,ssl,strategy,credentials,provider
HttpExporter -> @Nullable     private static CredentialsProvider createCredentialsProvider(final Config config);1524684173;Creates the optional {@link CredentialsProvider} with the username/password to use with <em>all</em> requests for user_authentication.__@param config The exporter's configuration_@return {@code null} if username and password not are provided. Otherwise the {@link CredentialsProvider} to use._@throws SettingsException if the username is missing, but a password is supplied;@Nullable_    private static CredentialsProvider createCredentialsProvider(final Config config) {_        final String username = AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final String password = AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (Strings.isNullOrEmpty(username)) {_            if (Strings.isNullOrEmpty(password) == false) {_                throw new SettingsException(_                        "[" + AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "] without [" +_                                AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "]")__            }_            _            return null__        }__        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider()__        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password))___        return credentialsProvider__    };creates,the,optional,link,credentials,provider,with,the,username,password,to,use,with,em,all,em,requests,for,user,authentication,param,config,the,exporter,s,configuration,return,code,null,if,username,and,password,not,are,provided,otherwise,the,link,credentials,provider,to,use,throws,settings,exception,if,the,username,is,missing,but,a,password,is,supplied;nullable,private,static,credentials,provider,create,credentials,provider,final,config,config,final,string,username,get,concrete,setting,for,namespace,config,name,get,config,settings,final,string,password,get,concrete,setting,for,namespace,config,name,get,config,settings,if,strings,is,null,or,empty,username,if,strings,is,null,or,empty,password,false,throw,new,settings,exception,get,concrete,setting,for,namespace,config,name,get,key,without,get,concrete,setting,for,namespace,config,name,get,key,return,null,final,credentials,provider,credentials,provider,new,basic,credentials,provider,credentials,provider,set,credentials,auth,scope,any,new,username,password,credentials,username,password,return,credentials,provider
HttpExporter -> @Nullable     private static CredentialsProvider createCredentialsProvider(final Config config);1527840262;Creates the optional {@link CredentialsProvider} with the username/password to use with <em>all</em> requests for user_authentication.__@param config The exporter's configuration_@return {@code null} if username and password not are provided. Otherwise the {@link CredentialsProvider} to use._@throws SettingsException if the username is missing, but a password is supplied;@Nullable_    private static CredentialsProvider createCredentialsProvider(final Config config) {_        final String username = AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final String password = AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (Strings.isNullOrEmpty(username)) {_            if (Strings.isNullOrEmpty(password) == false) {_                throw new SettingsException(_                        "[" + AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "] without [" +_                                AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "]")__            }_            _            return null__        }__        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider()__        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password))___        return credentialsProvider__    };creates,the,optional,link,credentials,provider,with,the,username,password,to,use,with,em,all,em,requests,for,user,authentication,param,config,the,exporter,s,configuration,return,code,null,if,username,and,password,not,are,provided,otherwise,the,link,credentials,provider,to,use,throws,settings,exception,if,the,username,is,missing,but,a,password,is,supplied;nullable,private,static,credentials,provider,create,credentials,provider,final,config,config,final,string,username,get,concrete,setting,for,namespace,config,name,get,config,settings,final,string,password,get,concrete,setting,for,namespace,config,name,get,config,settings,if,strings,is,null,or,empty,username,if,strings,is,null,or,empty,password,false,throw,new,settings,exception,get,concrete,setting,for,namespace,config,name,get,key,without,get,concrete,setting,for,namespace,config,name,get,key,return,null,final,credentials,provider,credentials,provider,new,basic,credentials,provider,credentials,provider,set,credentials,auth,scope,any,new,username,password,credentials,username,password,return,credentials,provider
HttpExporter -> @Nullable     private static CredentialsProvider createCredentialsProvider(final Config config);1528762805;Creates the optional {@link CredentialsProvider} with the username/password to use with <em>all</em> requests for user_authentication.__@param config The exporter's configuration_@return {@code null} if username and password not are provided. Otherwise the {@link CredentialsProvider} to use._@throws SettingsException if the username is missing, but a password is supplied;@Nullable_    private static CredentialsProvider createCredentialsProvider(final Config config) {_        final String username = AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final String password = AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (Strings.isNullOrEmpty(username)) {_            if (Strings.isNullOrEmpty(password) == false) {_                throw new SettingsException(_                        "[" + AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "] without [" +_                                AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "]")__            }_            _            return null__        }__        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider()__        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password))___        return credentialsProvider__    };creates,the,optional,link,credentials,provider,with,the,username,password,to,use,with,em,all,em,requests,for,user,authentication,param,config,the,exporter,s,configuration,return,code,null,if,username,and,password,not,are,provided,otherwise,the,link,credentials,provider,to,use,throws,settings,exception,if,the,username,is,missing,but,a,password,is,supplied;nullable,private,static,credentials,provider,create,credentials,provider,final,config,config,final,string,username,get,concrete,setting,for,namespace,config,name,get,config,settings,final,string,password,get,concrete,setting,for,namespace,config,name,get,config,settings,if,strings,is,null,or,empty,username,if,strings,is,null,or,empty,password,false,throw,new,settings,exception,get,concrete,setting,for,namespace,config,name,get,key,without,get,concrete,setting,for,namespace,config,name,get,key,return,null,final,credentials,provider,credentials,provider,new,basic,credentials,provider,credentials,provider,set,credentials,auth,scope,any,new,username,password,credentials,username,password,return,credentials,provider
HttpExporter -> @Nullable     private static CredentialsProvider createCredentialsProvider(final Config config);1531179852;Creates the optional {@link CredentialsProvider} with the username/password to use with <em>all</em> requests for user_authentication.__@param config The exporter's configuration_@return {@code null} if username and password not are provided. Otherwise the {@link CredentialsProvider} to use._@throws SettingsException if the username is missing, but a password is supplied;@Nullable_    private static CredentialsProvider createCredentialsProvider(final Config config) {_        final String username = AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final String password = AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (Strings.isNullOrEmpty(username)) {_            if (Strings.isNullOrEmpty(password) == false) {_                throw new SettingsException(_                        "[" + AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "] without [" +_                                AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "]")__            }_            _            return null__        }__        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider()__        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password))___        return credentialsProvider__    };creates,the,optional,link,credentials,provider,with,the,username,password,to,use,with,em,all,em,requests,for,user,authentication,param,config,the,exporter,s,configuration,return,code,null,if,username,and,password,not,are,provided,otherwise,the,link,credentials,provider,to,use,throws,settings,exception,if,the,username,is,missing,but,a,password,is,supplied;nullable,private,static,credentials,provider,create,credentials,provider,final,config,config,final,string,username,get,concrete,setting,for,namespace,config,name,get,config,settings,final,string,password,get,concrete,setting,for,namespace,config,name,get,config,settings,if,strings,is,null,or,empty,username,if,strings,is,null,or,empty,password,false,throw,new,settings,exception,get,concrete,setting,for,namespace,config,name,get,key,without,get,concrete,setting,for,namespace,config,name,get,key,return,null,final,credentials,provider,credentials,provider,new,basic,credentials,provider,credentials,provider,set,credentials,auth,scope,any,new,username,password,credentials,username,password,return,credentials,provider
HttpExporter -> @Nullable     private static CredentialsProvider createCredentialsProvider(final Config config);1531729807;Creates the optional {@link CredentialsProvider} with the username/password to use with <em>all</em> requests for user_authentication.__@param config The exporter's configuration_@return {@code null} if username and password not are provided. Otherwise the {@link CredentialsProvider} to use._@throws SettingsException if the username is missing, but a password is supplied;@Nullable_    private static CredentialsProvider createCredentialsProvider(final Config config) {_        final String username = AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final String password = AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (Strings.isNullOrEmpty(username)) {_            if (Strings.isNullOrEmpty(password) == false) {_                throw new SettingsException(_                        "[" + AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "] without [" +_                                AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "]")__            }_            _            return null__        }__        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider()__        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password))___        return credentialsProvider__    };creates,the,optional,link,credentials,provider,with,the,username,password,to,use,with,em,all,em,requests,for,user,authentication,param,config,the,exporter,s,configuration,return,code,null,if,username,and,password,not,are,provided,otherwise,the,link,credentials,provider,to,use,throws,settings,exception,if,the,username,is,missing,but,a,password,is,supplied;nullable,private,static,credentials,provider,create,credentials,provider,final,config,config,final,string,username,get,concrete,setting,for,namespace,config,name,get,config,settings,final,string,password,get,concrete,setting,for,namespace,config,name,get,config,settings,if,strings,is,null,or,empty,username,if,strings,is,null,or,empty,password,false,throw,new,settings,exception,get,concrete,setting,for,namespace,config,name,get,key,without,get,concrete,setting,for,namespace,config,name,get,key,return,null,final,credentials,provider,credentials,provider,new,basic,credentials,provider,credentials,provider,set,credentials,auth,scope,any,new,username,password,credentials,username,password,return,credentials,provider
HttpExporter -> @Nullable     private static CredentialsProvider createCredentialsProvider(final Config config);1540847035;Creates the optional {@link CredentialsProvider} with the username/password to use with <em>all</em> requests for user_authentication.__@param config The exporter's configuration_@return {@code null} if username and password not are provided. Otherwise the {@link CredentialsProvider} to use._@throws SettingsException if the username is missing, but a password is supplied;@Nullable_    private static CredentialsProvider createCredentialsProvider(final Config config) {_        final String username = AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final String password = AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (Strings.isNullOrEmpty(username)) {_            if (Strings.isNullOrEmpty(password) == false) {_                throw new SettingsException(_                        "[" + AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "] without [" +_                                AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "]")__            }_            _            return null__        }__        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider()__        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password))___        return credentialsProvider__    };creates,the,optional,link,credentials,provider,with,the,username,password,to,use,with,em,all,em,requests,for,user,authentication,param,config,the,exporter,s,configuration,return,code,null,if,username,and,password,not,are,provided,otherwise,the,link,credentials,provider,to,use,throws,settings,exception,if,the,username,is,missing,but,a,password,is,supplied;nullable,private,static,credentials,provider,create,credentials,provider,final,config,config,final,string,username,get,concrete,setting,for,namespace,config,name,get,config,settings,final,string,password,get,concrete,setting,for,namespace,config,name,get,config,settings,if,strings,is,null,or,empty,username,if,strings,is,null,or,empty,password,false,throw,new,settings,exception,get,concrete,setting,for,namespace,config,name,get,key,without,get,concrete,setting,for,namespace,config,name,get,key,return,null,final,credentials,provider,credentials,provider,new,basic,credentials,provider,credentials,provider,set,credentials,auth,scope,any,new,username,password,credentials,username,password,return,credentials,provider
HttpExporter -> @Nullable     private static CredentialsProvider createCredentialsProvider(final Config config);1541592065;Creates the optional {@link CredentialsProvider} with the username/password to use with <em>all</em> requests for user_authentication.__@param config The exporter's configuration_@return {@code null} if username and password not are provided. Otherwise the {@link CredentialsProvider} to use._@throws SettingsException if the username is missing, but a password is supplied;@Nullable_    private static CredentialsProvider createCredentialsProvider(final Config config) {_        final String username = AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final String password = AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (Strings.isNullOrEmpty(username)) {_            if (Strings.isNullOrEmpty(password) == false) {_                throw new SettingsException(_                        "[" + AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "] without [" +_                                AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "]")__            }_            _            return null__        }__        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider()__        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password))___        return credentialsProvider__    };creates,the,optional,link,credentials,provider,with,the,username,password,to,use,with,em,all,em,requests,for,user,authentication,param,config,the,exporter,s,configuration,return,code,null,if,username,and,password,not,are,provided,otherwise,the,link,credentials,provider,to,use,throws,settings,exception,if,the,username,is,missing,but,a,password,is,supplied;nullable,private,static,credentials,provider,create,credentials,provider,final,config,config,final,string,username,get,concrete,setting,for,namespace,config,name,get,config,settings,final,string,password,get,concrete,setting,for,namespace,config,name,get,config,settings,if,strings,is,null,or,empty,username,if,strings,is,null,or,empty,password,false,throw,new,settings,exception,get,concrete,setting,for,namespace,config,name,get,key,without,get,concrete,setting,for,namespace,config,name,get,key,return,null,final,credentials,provider,credentials,provider,new,basic,credentials,provider,credentials,provider,set,credentials,auth,scope,any,new,username,password,credentials,username,password,return,credentials,provider
HttpExporter -> @Nullable     private static CredentialsProvider createCredentialsProvider(final Config config);1543346894;Creates the optional {@link CredentialsProvider} with the username/password to use with <em>all</em> requests for user_authentication.__@param config The exporter's configuration_@return {@code null} if username and password not are provided. Otherwise the {@link CredentialsProvider} to use._@throws SettingsException if the username is missing, but a password is supplied;@Nullable_    private static CredentialsProvider createCredentialsProvider(final Config config) {_        final String username = AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final String password = AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (Strings.isNullOrEmpty(username)) {_            if (Strings.isNullOrEmpty(password) == false) {_                throw new SettingsException(_                        "[" + AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "] without [" +_                                AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "]")__            }_            _            return null__        }__        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider()__        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password))___        return credentialsProvider__    };creates,the,optional,link,credentials,provider,with,the,username,password,to,use,with,em,all,em,requests,for,user,authentication,param,config,the,exporter,s,configuration,return,code,null,if,username,and,password,not,are,provided,otherwise,the,link,credentials,provider,to,use,throws,settings,exception,if,the,username,is,missing,but,a,password,is,supplied;nullable,private,static,credentials,provider,create,credentials,provider,final,config,config,final,string,username,get,concrete,setting,for,namespace,config,name,get,config,settings,final,string,password,get,concrete,setting,for,namespace,config,name,get,config,settings,if,strings,is,null,or,empty,username,if,strings,is,null,or,empty,password,false,throw,new,settings,exception,get,concrete,setting,for,namespace,config,name,get,key,without,get,concrete,setting,for,namespace,config,name,get,key,return,null,final,credentials,provider,credentials,provider,new,basic,credentials,provider,credentials,provider,set,credentials,auth,scope,any,new,username,password,credentials,username,password,return,credentials,provider
HttpExporter -> @Nullable     private static CredentialsProvider createCredentialsProvider(final Config config);1549288028;Creates the optional {@link CredentialsProvider} with the username/password to use with <em>all</em> requests for user_authentication.__@param config The exporter's configuration_@return {@code null} if username and password not are provided. Otherwise the {@link CredentialsProvider} to use._@throws SettingsException if the username is missing, but a password is supplied;@Nullable_    private static CredentialsProvider createCredentialsProvider(final Config config) {_        final String username = AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        final String password = AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        if (Strings.isNullOrEmpty(username)) {_            if (Strings.isNullOrEmpty(password) == false) {_                throw new SettingsException(_                        "[" + AUTH_PASSWORD_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "] without [" +_                                AUTH_USERNAME_SETTING.getConcreteSettingForNamespace(config.name()).getKey() + "]")__            }_            _            return null__        }__        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider()__        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password))___        return credentialsProvider__    };creates,the,optional,link,credentials,provider,with,the,username,password,to,use,with,em,all,em,requests,for,user,authentication,param,config,the,exporter,s,configuration,return,code,null,if,username,and,password,not,are,provided,otherwise,the,link,credentials,provider,to,use,throws,settings,exception,if,the,username,is,missing,but,a,password,is,supplied;nullable,private,static,credentials,provider,create,credentials,provider,final,config,config,final,string,username,get,concrete,setting,for,namespace,config,name,get,config,settings,final,string,password,get,concrete,setting,for,namespace,config,name,get,config,settings,if,strings,is,null,or,empty,username,if,strings,is,null,or,empty,password,false,throw,new,settings,exception,get,concrete,setting,for,namespace,config,name,get,key,without,get,concrete,setting,for,namespace,config,name,get,key,return,null,final,credentials,provider,credentials,provider,new,basic,credentials,provider,credentials,provider,set,credentials,auth,scope,any,new,username,password,credentials,username,password,return,credentials,provider
HttpExporter -> static Map<String, String> createDefaultParams(final Config config);1524684173;Create the default parameters to use with bulk indexing operations.__@param config The exporter's configuration_@return Never {@code null}. Can be empty.;static Map<String, String> createDefaultParams(final Config config) {_        final TimeValue bulkTimeout = BULK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        final MapBuilder<String, String> params = new MapBuilder<>()___        if (TimeValue.MINUS_ONE.equals(bulkTimeout) == false) {_            params.put("timeout", bulkTimeout.toString())__        }__        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            params.put("pipeline", MonitoringTemplateUtils.pipelineName(MonitoringTemplateUtils.TEMPLATE_VERSION))__        }__        _        params.put("filter_path", "errors,items.*.error")___        return params.immutableMap()__    };create,the,default,parameters,to,use,with,bulk,indexing,operations,param,config,the,exporter,s,configuration,return,never,code,null,can,be,empty;static,map,string,string,create,default,params,final,config,config,final,time,value,bulk,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,map,builder,string,string,params,new,map,builder,if,time,value,equals,bulk,timeout,false,params,put,timeout,bulk,timeout,to,string,if,get,concrete,setting,for,namespace,config,name,get,config,settings,params,put,pipeline,monitoring,template,utils,pipeline,name,monitoring,template,utils,params,put,errors,items,error,return,params,immutable,map
HttpExporter -> static Map<String, String> createDefaultParams(final Config config);1527840262;Create the default parameters to use with bulk indexing operations.__@param config The exporter's configuration_@return Never {@code null}. Can be empty.;static Map<String, String> createDefaultParams(final Config config) {_        final TimeValue bulkTimeout = BULK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        final MapBuilder<String, String> params = new MapBuilder<>()___        if (TimeValue.MINUS_ONE.equals(bulkTimeout) == false) {_            params.put("timeout", bulkTimeout.toString())__        }__        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            params.put("pipeline", MonitoringTemplateUtils.pipelineName(MonitoringTemplateUtils.TEMPLATE_VERSION))__        }__        _        params.put("filter_path", "errors,items.*.error")___        return params.immutableMap()__    };create,the,default,parameters,to,use,with,bulk,indexing,operations,param,config,the,exporter,s,configuration,return,never,code,null,can,be,empty;static,map,string,string,create,default,params,final,config,config,final,time,value,bulk,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,map,builder,string,string,params,new,map,builder,if,time,value,equals,bulk,timeout,false,params,put,timeout,bulk,timeout,to,string,if,get,concrete,setting,for,namespace,config,name,get,config,settings,params,put,pipeline,monitoring,template,utils,pipeline,name,monitoring,template,utils,params,put,errors,items,error,return,params,immutable,map
HttpExporter -> static Map<String, String> createDefaultParams(final Config config);1528762805;Create the default parameters to use with bulk indexing operations.__@param config The exporter's configuration_@return Never {@code null}. Can be empty.;static Map<String, String> createDefaultParams(final Config config) {_        final TimeValue bulkTimeout = BULK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        final MapBuilder<String, String> params = new MapBuilder<>()___        if (TimeValue.MINUS_ONE.equals(bulkTimeout) == false) {_            params.put("timeout", bulkTimeout.toString())__        }__        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            params.put("pipeline", MonitoringTemplateUtils.pipelineName(MonitoringTemplateUtils.TEMPLATE_VERSION))__        }__        _        params.put("filter_path", "errors,items.*.error")___        return params.immutableMap()__    };create,the,default,parameters,to,use,with,bulk,indexing,operations,param,config,the,exporter,s,configuration,return,never,code,null,can,be,empty;static,map,string,string,create,default,params,final,config,config,final,time,value,bulk,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,map,builder,string,string,params,new,map,builder,if,time,value,equals,bulk,timeout,false,params,put,timeout,bulk,timeout,to,string,if,get,concrete,setting,for,namespace,config,name,get,config,settings,params,put,pipeline,monitoring,template,utils,pipeline,name,monitoring,template,utils,params,put,errors,items,error,return,params,immutable,map
HttpExporter -> static Map<String, String> createDefaultParams(final Config config);1531179852;Create the default parameters to use with bulk indexing operations.__@param config The exporter's configuration_@return Never {@code null}. Can be empty.;static Map<String, String> createDefaultParams(final Config config) {_        final TimeValue bulkTimeout = BULK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        final MapBuilder<String, String> params = new MapBuilder<>()___        if (TimeValue.MINUS_ONE.equals(bulkTimeout) == false) {_            params.put("timeout", bulkTimeout.toString())__        }__        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            params.put("pipeline", MonitoringTemplateUtils.pipelineName(MonitoringTemplateUtils.TEMPLATE_VERSION))__        }__        _        params.put("filter_path", "errors,items.*.error")___        return params.immutableMap()__    };create,the,default,parameters,to,use,with,bulk,indexing,operations,param,config,the,exporter,s,configuration,return,never,code,null,can,be,empty;static,map,string,string,create,default,params,final,config,config,final,time,value,bulk,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,map,builder,string,string,params,new,map,builder,if,time,value,equals,bulk,timeout,false,params,put,timeout,bulk,timeout,to,string,if,get,concrete,setting,for,namespace,config,name,get,config,settings,params,put,pipeline,monitoring,template,utils,pipeline,name,monitoring,template,utils,params,put,errors,items,error,return,params,immutable,map
HttpExporter -> static Map<String, String> createDefaultParams(final Config config);1531729807;Create the default parameters to use with bulk indexing operations.__@param config The exporter's configuration_@return Never {@code null}. Can be empty.;static Map<String, String> createDefaultParams(final Config config) {_        final TimeValue bulkTimeout = BULK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        final MapBuilder<String, String> params = new MapBuilder<>()___        if (TimeValue.MINUS_ONE.equals(bulkTimeout) == false) {_            params.put("timeout", bulkTimeout.toString())__        }__        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            params.put("pipeline", MonitoringTemplateUtils.pipelineName(MonitoringTemplateUtils.TEMPLATE_VERSION))__        }__        _        params.put("filter_path", "errors,items.*.error")___        return params.immutableMap()__    };create,the,default,parameters,to,use,with,bulk,indexing,operations,param,config,the,exporter,s,configuration,return,never,code,null,can,be,empty;static,map,string,string,create,default,params,final,config,config,final,time,value,bulk,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,map,builder,string,string,params,new,map,builder,if,time,value,equals,bulk,timeout,false,params,put,timeout,bulk,timeout,to,string,if,get,concrete,setting,for,namespace,config,name,get,config,settings,params,put,pipeline,monitoring,template,utils,pipeline,name,monitoring,template,utils,params,put,errors,items,error,return,params,immutable,map
HttpExporter -> static Map<String, String> createDefaultParams(final Config config);1540847035;Create the default parameters to use with bulk indexing operations.__@param config The exporter's configuration_@return Never {@code null}. Can be empty.;static Map<String, String> createDefaultParams(final Config config) {_        final TimeValue bulkTimeout = BULK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        final MapBuilder<String, String> params = new MapBuilder<>()___        if (TimeValue.MINUS_ONE.equals(bulkTimeout) == false) {_            params.put("timeout", bulkTimeout.toString())__        }__        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            params.put("pipeline", MonitoringTemplateUtils.pipelineName(MonitoringTemplateUtils.TEMPLATE_VERSION))__        }__        _        params.put("filter_path", "errors,items.*.error")___        return params.immutableMap()__    };create,the,default,parameters,to,use,with,bulk,indexing,operations,param,config,the,exporter,s,configuration,return,never,code,null,can,be,empty;static,map,string,string,create,default,params,final,config,config,final,time,value,bulk,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,map,builder,string,string,params,new,map,builder,if,time,value,equals,bulk,timeout,false,params,put,timeout,bulk,timeout,to,string,if,get,concrete,setting,for,namespace,config,name,get,config,settings,params,put,pipeline,monitoring,template,utils,pipeline,name,monitoring,template,utils,params,put,errors,items,error,return,params,immutable,map
HttpExporter -> static Map<String, String> createDefaultParams(final Config config);1541592065;Create the default parameters to use with bulk indexing operations.__@param config The exporter's configuration_@return Never {@code null}. Can be empty.;static Map<String, String> createDefaultParams(final Config config) {_        final TimeValue bulkTimeout = BULK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        final MapBuilder<String, String> params = new MapBuilder<>()___        if (TimeValue.MINUS_ONE.equals(bulkTimeout) == false) {_            params.put("timeout", bulkTimeout.toString())__        }__        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            params.put("pipeline", MonitoringTemplateUtils.pipelineName(MonitoringTemplateUtils.TEMPLATE_VERSION))__        }__        _        params.put("filter_path", "errors,items.*.error")___        return params.immutableMap()__    };create,the,default,parameters,to,use,with,bulk,indexing,operations,param,config,the,exporter,s,configuration,return,never,code,null,can,be,empty;static,map,string,string,create,default,params,final,config,config,final,time,value,bulk,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,map,builder,string,string,params,new,map,builder,if,time,value,equals,bulk,timeout,false,params,put,timeout,bulk,timeout,to,string,if,get,concrete,setting,for,namespace,config,name,get,config,settings,params,put,pipeline,monitoring,template,utils,pipeline,name,monitoring,template,utils,params,put,errors,items,error,return,params,immutable,map
HttpExporter -> static Map<String, String> createDefaultParams(final Config config);1543346894;Create the default parameters to use with bulk indexing operations.__@param config The exporter's configuration_@return Never {@code null}. Can be empty.;static Map<String, String> createDefaultParams(final Config config) {_        final TimeValue bulkTimeout = BULK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        final MapBuilder<String, String> params = new MapBuilder<>()___        if (TimeValue.MINUS_ONE.equals(bulkTimeout) == false) {_            params.put("timeout", bulkTimeout.toString())__        }__        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            params.put("pipeline", MonitoringTemplateUtils.pipelineName(MonitoringTemplateUtils.TEMPLATE_VERSION))__        }__        _        params.put("filter_path", "errors,items.*.error")___        return params.immutableMap()__    };create,the,default,parameters,to,use,with,bulk,indexing,operations,param,config,the,exporter,s,configuration,return,never,code,null,can,be,empty;static,map,string,string,create,default,params,final,config,config,final,time,value,bulk,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,map,builder,string,string,params,new,map,builder,if,time,value,equals,bulk,timeout,false,params,put,timeout,bulk,timeout,to,string,if,get,concrete,setting,for,namespace,config,name,get,config,settings,params,put,pipeline,monitoring,template,utils,pipeline,name,monitoring,template,utils,params,put,errors,items,error,return,params,immutable,map
HttpExporter -> static Map<String, String> createDefaultParams(final Config config);1549288028;Create the default parameters to use with bulk indexing operations.__@param config The exporter's configuration_@return Never {@code null}. Can be empty.;static Map<String, String> createDefaultParams(final Config config) {_        final TimeValue bulkTimeout = BULK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        final MapBuilder<String, String> params = new MapBuilder<>()___        if (TimeValue.MINUS_ONE.equals(bulkTimeout) == false) {_            params.put("timeout", bulkTimeout.toString())__        }__        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            params.put("pipeline", MonitoringTemplateUtils.pipelineName(MonitoringTemplateUtils.TEMPLATE_VERSION))__        }__        _        params.put("filter_path", "errors,items.*.error")___        return params.immutableMap()__    };create,the,default,parameters,to,use,with,bulk,indexing,operations,param,config,the,exporter,s,configuration,return,never,code,null,can,be,empty;static,map,string,string,create,default,params,final,config,config,final,time,value,bulk,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,final,map,builder,string,string,params,new,map,builder,if,time,value,equals,bulk,timeout,false,params,put,timeout,bulk,timeout,to,string,if,get,concrete,setting,for,namespace,config,name,get,config,settings,params,put,pipeline,monitoring,template,utils,pipeline,name,monitoring,template,utils,params,put,errors,items,error,return,params,immutable,map
HttpExporter -> private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,                                                         final List<HttpResource> resources);1524684173;Adds the {@code resources} necessary for checking and publishing cluster alerts.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,_                                                        final List<HttpResource> resources) {_        _        if (CLUSTER_ALERTS_MANAGEMENT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final ClusterService clusterService = config.clusterService()__            final List<HttpResource> watchResources = new ArrayList<>()__            final List<String> blacklist = ClusterAlertsUtil.getClusterAlertsBlacklist(config)___            _            for (final String watchId : ClusterAlertsUtil.WATCH_IDS) {_                final boolean blacklisted = blacklist.contains(watchId)__                _                final Supplier<String> uniqueWatchId = () -> ClusterAlertsUtil.createUniqueWatchId(clusterService, watchId)__                final Supplier<String> watch = blacklisted ? null : () -> ClusterAlertsUtil.loadWatch(clusterService, watchId)___                watchResources.add(new ClusterAlertHttpResource(resourceOwnerName, config.licenseState(), uniqueWatchId, watch))__            }__            _            resources.add(new WatcherExistsHttpResource(resourceOwnerName, clusterService,_                                                        new MultiHttpResource(resourceOwnerName, watchResources)))__        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,cluster,alerts,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,cluster,alerts,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,cluster,service,cluster,service,config,cluster,service,final,list,http,resource,watch,resources,new,array,list,final,list,string,blacklist,cluster,alerts,util,get,cluster,alerts,blacklist,config,for,final,string,watch,id,cluster,alerts,util,final,boolean,blacklisted,blacklist,contains,watch,id,final,supplier,string,unique,watch,id,cluster,alerts,util,create,unique,watch,id,cluster,service,watch,id,final,supplier,string,watch,blacklisted,null,cluster,alerts,util,load,watch,cluster,service,watch,id,watch,resources,add,new,cluster,alert,http,resource,resource,owner,name,config,license,state,unique,watch,id,watch,resources,add,new,watcher,exists,http,resource,resource,owner,name,cluster,service,new,multi,http,resource,resource,owner,name,watch,resources
HttpExporter -> private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,                                                         final List<HttpResource> resources);1527840262;Adds the {@code resources} necessary for checking and publishing cluster alerts.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,_                                                        final List<HttpResource> resources) {_        _        if (CLUSTER_ALERTS_MANAGEMENT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final ClusterService clusterService = config.clusterService()__            final List<HttpResource> watchResources = new ArrayList<>()__            final List<String> blacklist = ClusterAlertsUtil.getClusterAlertsBlacklist(config)___            _            for (final String watchId : ClusterAlertsUtil.WATCH_IDS) {_                final boolean blacklisted = blacklist.contains(watchId)__                _                final Supplier<String> uniqueWatchId = () -> ClusterAlertsUtil.createUniqueWatchId(clusterService, watchId)__                final Supplier<String> watch = blacklisted ? null : () -> ClusterAlertsUtil.loadWatch(clusterService, watchId)___                watchResources.add(new ClusterAlertHttpResource(resourceOwnerName, config.licenseState(), uniqueWatchId, watch))__            }__            _            resources.add(new WatcherExistsHttpResource(resourceOwnerName, clusterService,_                                                        new MultiHttpResource(resourceOwnerName, watchResources)))__        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,cluster,alerts,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,cluster,alerts,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,cluster,service,cluster,service,config,cluster,service,final,list,http,resource,watch,resources,new,array,list,final,list,string,blacklist,cluster,alerts,util,get,cluster,alerts,blacklist,config,for,final,string,watch,id,cluster,alerts,util,final,boolean,blacklisted,blacklist,contains,watch,id,final,supplier,string,unique,watch,id,cluster,alerts,util,create,unique,watch,id,cluster,service,watch,id,final,supplier,string,watch,blacklisted,null,cluster,alerts,util,load,watch,cluster,service,watch,id,watch,resources,add,new,cluster,alert,http,resource,resource,owner,name,config,license,state,unique,watch,id,watch,resources,add,new,watcher,exists,http,resource,resource,owner,name,cluster,service,new,multi,http,resource,resource,owner,name,watch,resources
HttpExporter -> private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,                                                         final List<HttpResource> resources);1528762805;Adds the {@code resources} necessary for checking and publishing cluster alerts.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,_                                                        final List<HttpResource> resources) {_        _        if (CLUSTER_ALERTS_MANAGEMENT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final ClusterService clusterService = config.clusterService()__            final List<HttpResource> watchResources = new ArrayList<>()__            final List<String> blacklist = ClusterAlertsUtil.getClusterAlertsBlacklist(config)___            _            for (final String watchId : ClusterAlertsUtil.WATCH_IDS) {_                final boolean blacklisted = blacklist.contains(watchId)__                _                final Supplier<String> uniqueWatchId = () -> ClusterAlertsUtil.createUniqueWatchId(clusterService, watchId)__                final Supplier<String> watch = blacklisted ? null : () -> ClusterAlertsUtil.loadWatch(clusterService, watchId)___                watchResources.add(new ClusterAlertHttpResource(resourceOwnerName, config.licenseState(), uniqueWatchId, watch))__            }__            _            resources.add(new WatcherExistsHttpResource(resourceOwnerName, clusterService,_                                                        new MultiHttpResource(resourceOwnerName, watchResources)))__        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,cluster,alerts,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,cluster,alerts,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,cluster,service,cluster,service,config,cluster,service,final,list,http,resource,watch,resources,new,array,list,final,list,string,blacklist,cluster,alerts,util,get,cluster,alerts,blacklist,config,for,final,string,watch,id,cluster,alerts,util,final,boolean,blacklisted,blacklist,contains,watch,id,final,supplier,string,unique,watch,id,cluster,alerts,util,create,unique,watch,id,cluster,service,watch,id,final,supplier,string,watch,blacklisted,null,cluster,alerts,util,load,watch,cluster,service,watch,id,watch,resources,add,new,cluster,alert,http,resource,resource,owner,name,config,license,state,unique,watch,id,watch,resources,add,new,watcher,exists,http,resource,resource,owner,name,cluster,service,new,multi,http,resource,resource,owner,name,watch,resources
HttpExporter -> private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,                                                         final List<HttpResource> resources);1531179852;Adds the {@code resources} necessary for checking and publishing cluster alerts.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,_                                                        final List<HttpResource> resources) {_        _        if (CLUSTER_ALERTS_MANAGEMENT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final ClusterService clusterService = config.clusterService()__            final List<HttpResource> watchResources = new ArrayList<>()__            final List<String> blacklist = ClusterAlertsUtil.getClusterAlertsBlacklist(config)___            _            for (final String watchId : ClusterAlertsUtil.WATCH_IDS) {_                final boolean blacklisted = blacklist.contains(watchId)__                _                final Supplier<String> uniqueWatchId = () -> ClusterAlertsUtil.createUniqueWatchId(clusterService, watchId)__                final Supplier<String> watch = blacklisted ? null : () -> ClusterAlertsUtil.loadWatch(clusterService, watchId)___                watchResources.add(new ClusterAlertHttpResource(resourceOwnerName, config.licenseState(), uniqueWatchId, watch))__            }__            _            resources.add(new WatcherExistsHttpResource(resourceOwnerName, clusterService,_                                                        new MultiHttpResource(resourceOwnerName, watchResources)))__        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,cluster,alerts,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,cluster,alerts,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,cluster,service,cluster,service,config,cluster,service,final,list,http,resource,watch,resources,new,array,list,final,list,string,blacklist,cluster,alerts,util,get,cluster,alerts,blacklist,config,for,final,string,watch,id,cluster,alerts,util,final,boolean,blacklisted,blacklist,contains,watch,id,final,supplier,string,unique,watch,id,cluster,alerts,util,create,unique,watch,id,cluster,service,watch,id,final,supplier,string,watch,blacklisted,null,cluster,alerts,util,load,watch,cluster,service,watch,id,watch,resources,add,new,cluster,alert,http,resource,resource,owner,name,config,license,state,unique,watch,id,watch,resources,add,new,watcher,exists,http,resource,resource,owner,name,cluster,service,new,multi,http,resource,resource,owner,name,watch,resources
HttpExporter -> private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,                                                         final List<HttpResource> resources);1531729807;Adds the {@code resources} necessary for checking and publishing cluster alerts.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,_                                                        final List<HttpResource> resources) {_        _        if (CLUSTER_ALERTS_MANAGEMENT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final ClusterService clusterService = config.clusterService()__            final List<HttpResource> watchResources = new ArrayList<>()__            final List<String> blacklist = ClusterAlertsUtil.getClusterAlertsBlacklist(config)___            _            for (final String watchId : ClusterAlertsUtil.WATCH_IDS) {_                final boolean blacklisted = blacklist.contains(watchId)__                _                final Supplier<String> uniqueWatchId = () -> ClusterAlertsUtil.createUniqueWatchId(clusterService, watchId)__                final Supplier<String> watch = blacklisted ? null : () -> ClusterAlertsUtil.loadWatch(clusterService, watchId)___                watchResources.add(new ClusterAlertHttpResource(resourceOwnerName, config.licenseState(), uniqueWatchId, watch))__            }__            _            resources.add(new WatcherExistsHttpResource(resourceOwnerName, clusterService,_                                                        new MultiHttpResource(resourceOwnerName, watchResources)))__        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,cluster,alerts,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,cluster,alerts,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,cluster,service,cluster,service,config,cluster,service,final,list,http,resource,watch,resources,new,array,list,final,list,string,blacklist,cluster,alerts,util,get,cluster,alerts,blacklist,config,for,final,string,watch,id,cluster,alerts,util,final,boolean,blacklisted,blacklist,contains,watch,id,final,supplier,string,unique,watch,id,cluster,alerts,util,create,unique,watch,id,cluster,service,watch,id,final,supplier,string,watch,blacklisted,null,cluster,alerts,util,load,watch,cluster,service,watch,id,watch,resources,add,new,cluster,alert,http,resource,resource,owner,name,config,license,state,unique,watch,id,watch,resources,add,new,watcher,exists,http,resource,resource,owner,name,cluster,service,new,multi,http,resource,resource,owner,name,watch,resources
HttpExporter -> private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,                                                         final List<HttpResource> resources);1540847035;Adds the {@code resources} necessary for checking and publishing cluster alerts.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,_                                                        final List<HttpResource> resources) {_        _        if (CLUSTER_ALERTS_MANAGEMENT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final ClusterService clusterService = config.clusterService()__            final List<HttpResource> watchResources = new ArrayList<>()__            final List<String> blacklist = ClusterAlertsUtil.getClusterAlertsBlacklist(config)___            _            for (final String watchId : ClusterAlertsUtil.WATCH_IDS) {_                final boolean blacklisted = blacklist.contains(watchId)__                _                final Supplier<String> uniqueWatchId = () -> ClusterAlertsUtil.createUniqueWatchId(clusterService, watchId)__                final Supplier<String> watch = blacklisted ? null : () -> ClusterAlertsUtil.loadWatch(clusterService, watchId)___                watchResources.add(new ClusterAlertHttpResource(resourceOwnerName, config.licenseState(), uniqueWatchId, watch))__            }__            _            resources.add(new WatcherExistsHttpResource(resourceOwnerName, clusterService,_                                                        new MultiHttpResource(resourceOwnerName, watchResources)))__        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,cluster,alerts,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,cluster,alerts,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,cluster,service,cluster,service,config,cluster,service,final,list,http,resource,watch,resources,new,array,list,final,list,string,blacklist,cluster,alerts,util,get,cluster,alerts,blacklist,config,for,final,string,watch,id,cluster,alerts,util,final,boolean,blacklisted,blacklist,contains,watch,id,final,supplier,string,unique,watch,id,cluster,alerts,util,create,unique,watch,id,cluster,service,watch,id,final,supplier,string,watch,blacklisted,null,cluster,alerts,util,load,watch,cluster,service,watch,id,watch,resources,add,new,cluster,alert,http,resource,resource,owner,name,config,license,state,unique,watch,id,watch,resources,add,new,watcher,exists,http,resource,resource,owner,name,cluster,service,new,multi,http,resource,resource,owner,name,watch,resources
HttpExporter -> private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,                                                         final List<HttpResource> resources);1541592065;Adds the {@code resources} necessary for checking and publishing cluster alerts.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,_                                                        final List<HttpResource> resources) {_        _        if (CLUSTER_ALERTS_MANAGEMENT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final ClusterService clusterService = config.clusterService()__            final List<HttpResource> watchResources = new ArrayList<>()__            final List<String> blacklist = ClusterAlertsUtil.getClusterAlertsBlacklist(config)___            _            for (final String watchId : ClusterAlertsUtil.WATCH_IDS) {_                final boolean blacklisted = blacklist.contains(watchId)__                _                final Supplier<String> uniqueWatchId = () -> ClusterAlertsUtil.createUniqueWatchId(clusterService, watchId)__                final Supplier<String> watch = blacklisted ? null : () -> ClusterAlertsUtil.loadWatch(clusterService, watchId)___                watchResources.add(new ClusterAlertHttpResource(resourceOwnerName, config.licenseState(), uniqueWatchId, watch))__            }__            _            resources.add(new WatcherExistsHttpResource(resourceOwnerName, clusterService,_                                                        new MultiHttpResource(resourceOwnerName, watchResources)))__        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,cluster,alerts,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,cluster,alerts,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,cluster,service,cluster,service,config,cluster,service,final,list,http,resource,watch,resources,new,array,list,final,list,string,blacklist,cluster,alerts,util,get,cluster,alerts,blacklist,config,for,final,string,watch,id,cluster,alerts,util,final,boolean,blacklisted,blacklist,contains,watch,id,final,supplier,string,unique,watch,id,cluster,alerts,util,create,unique,watch,id,cluster,service,watch,id,final,supplier,string,watch,blacklisted,null,cluster,alerts,util,load,watch,cluster,service,watch,id,watch,resources,add,new,cluster,alert,http,resource,resource,owner,name,config,license,state,unique,watch,id,watch,resources,add,new,watcher,exists,http,resource,resource,owner,name,cluster,service,new,multi,http,resource,resource,owner,name,watch,resources
HttpExporter -> private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,                                                         final List<HttpResource> resources);1543346894;Adds the {@code resources} necessary for checking and publishing cluster alerts.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,_                                                        final List<HttpResource> resources) {_        _        if (CLUSTER_ALERTS_MANAGEMENT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final ClusterService clusterService = config.clusterService()__            final List<HttpResource> watchResources = new ArrayList<>()__            final List<String> blacklist = ClusterAlertsUtil.getClusterAlertsBlacklist(config)___            _            for (final String watchId : ClusterAlertsUtil.WATCH_IDS) {_                final boolean blacklisted = blacklist.contains(watchId)__                _                final Supplier<String> uniqueWatchId = () -> ClusterAlertsUtil.createUniqueWatchId(clusterService, watchId)__                final Supplier<String> watch = blacklisted ? null : () -> ClusterAlertsUtil.loadWatch(clusterService, watchId)___                watchResources.add(new ClusterAlertHttpResource(resourceOwnerName, config.licenseState(), uniqueWatchId, watch))__            }__            _            resources.add(new WatcherExistsHttpResource(resourceOwnerName, clusterService,_                                                        new MultiHttpResource(resourceOwnerName, watchResources)))__        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,cluster,alerts,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,cluster,alerts,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,cluster,service,cluster,service,config,cluster,service,final,list,http,resource,watch,resources,new,array,list,final,list,string,blacklist,cluster,alerts,util,get,cluster,alerts,blacklist,config,for,final,string,watch,id,cluster,alerts,util,final,boolean,blacklisted,blacklist,contains,watch,id,final,supplier,string,unique,watch,id,cluster,alerts,util,create,unique,watch,id,cluster,service,watch,id,final,supplier,string,watch,blacklisted,null,cluster,alerts,util,load,watch,cluster,service,watch,id,watch,resources,add,new,cluster,alert,http,resource,resource,owner,name,config,license,state,unique,watch,id,watch,resources,add,new,watcher,exists,http,resource,resource,owner,name,cluster,service,new,multi,http,resource,resource,owner,name,watch,resources
HttpExporter -> private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,                                                         final List<HttpResource> resources);1549288028;Adds the {@code resources} necessary for checking and publishing cluster alerts.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureClusterAlertsResources(final Config config, final String resourceOwnerName,_                                                        final List<HttpResource> resources) {_        _        if (CLUSTER_ALERTS_MANAGEMENT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final ClusterService clusterService = config.clusterService()__            final List<HttpResource> watchResources = new ArrayList<>()__            final List<String> blacklist = ClusterAlertsUtil.getClusterAlertsBlacklist(config)___            _            for (final String watchId : ClusterAlertsUtil.WATCH_IDS) {_                final boolean blacklisted = blacklist.contains(watchId)__                _                final Supplier<String> uniqueWatchId = () -> ClusterAlertsUtil.createUniqueWatchId(clusterService, watchId)__                final Supplier<String> watch = blacklisted ? null : () -> ClusterAlertsUtil.loadWatch(clusterService, watchId)___                watchResources.add(new ClusterAlertHttpResource(resourceOwnerName, config.licenseState(), uniqueWatchId, watch))__            }__            _            resources.add(new WatcherExistsHttpResource(resourceOwnerName, clusterService,_                                                        new MultiHttpResource(resourceOwnerName, watchResources)))__        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,cluster,alerts,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,cluster,alerts,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,cluster,service,cluster,service,config,cluster,service,final,list,http,resource,watch,resources,new,array,list,final,list,string,blacklist,cluster,alerts,util,get,cluster,alerts,blacklist,config,for,final,string,watch,id,cluster,alerts,util,final,boolean,blacklisted,blacklist,contains,watch,id,final,supplier,string,unique,watch,id,cluster,alerts,util,create,unique,watch,id,cluster,service,watch,id,final,supplier,string,watch,blacklisted,null,cluster,alerts,util,load,watch,cluster,service,watch,id,watch,resources,add,new,cluster,alert,http,resource,resource,owner,name,config,license,state,unique,watch,id,watch,resources,add,new,watcher,exists,http,resource,resource,owner,name,cluster,service,new,multi,http,resource,resource,owner,name,watch,resources
HttpExporter -> static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener);1524684173;Create a {@link RestClientBuilder} from the HTTP Exporter's {@code config}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to log node failures_@return Never {@code null}._@throws SettingsException if any required setting is missing or any setting is malformed;static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener) {_        final RestClientBuilder builder = RestClient.builder(createHosts(config)).setFailureListener(listener)__        Setting<String> concreteSetting = PROXY_BASE_PATH_SETTING.getConcreteSettingForNamespace(config.name())__        final String proxyBasePath = concreteSetting.get(config.settings())___        _        if (Strings.isNullOrEmpty(proxyBasePath) == false) {_            try {_                builder.setPathPrefix(proxyBasePath)__            } catch (final IllegalArgumentException e) {_                throw new SettingsException("[" + concreteSetting.getKey() + "] is malformed [" + proxyBasePath + "]", e)__            }_        }__        _        configureHeaders(builder, config)__        _        configureSecurity(builder, config, sslService)__        _        configureTimeouts(builder, config)___        return builder.build()__    };create,a,link,rest,client,builder,from,the,http,exporter,s,code,config,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,log,node,failures,return,never,code,null,throws,settings,exception,if,any,required,setting,is,missing,or,any,setting,is,malformed;static,rest,client,create,rest,client,final,config,config,final,sslservice,ssl,service,final,node,failure,listener,listener,final,rest,client,builder,builder,rest,client,builder,create,hosts,config,set,failure,listener,listener,setting,string,concrete,setting,get,concrete,setting,for,namespace,config,name,final,string,proxy,base,path,concrete,setting,get,config,settings,if,strings,is,null,or,empty,proxy,base,path,false,try,builder,set,path,prefix,proxy,base,path,catch,final,illegal,argument,exception,e,throw,new,settings,exception,concrete,setting,get,key,is,malformed,proxy,base,path,e,configure,headers,builder,config,configure,security,builder,config,ssl,service,configure,timeouts,builder,config,return,builder,build
HttpExporter -> static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener);1527840262;Create a {@link RestClientBuilder} from the HTTP Exporter's {@code config}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to log node failures_@return Never {@code null}._@throws SettingsException if any required setting is missing or any setting is malformed;static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener) {_        final RestClientBuilder builder = RestClient.builder(createHosts(config)).setFailureListener(listener)__        Setting<String> concreteSetting = PROXY_BASE_PATH_SETTING.getConcreteSettingForNamespace(config.name())__        final String proxyBasePath = concreteSetting.get(config.settings())___        _        if (Strings.isNullOrEmpty(proxyBasePath) == false) {_            try {_                builder.setPathPrefix(proxyBasePath)__            } catch (final IllegalArgumentException e) {_                throw new SettingsException("[" + concreteSetting.getKey() + "] is malformed [" + proxyBasePath + "]", e)__            }_        }__        _        configureHeaders(builder, config)__        _        configureSecurity(builder, config, sslService)__        _        configureTimeouts(builder, config)___        return builder.build()__    };create,a,link,rest,client,builder,from,the,http,exporter,s,code,config,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,log,node,failures,return,never,code,null,throws,settings,exception,if,any,required,setting,is,missing,or,any,setting,is,malformed;static,rest,client,create,rest,client,final,config,config,final,sslservice,ssl,service,final,node,failure,listener,listener,final,rest,client,builder,builder,rest,client,builder,create,hosts,config,set,failure,listener,listener,setting,string,concrete,setting,get,concrete,setting,for,namespace,config,name,final,string,proxy,base,path,concrete,setting,get,config,settings,if,strings,is,null,or,empty,proxy,base,path,false,try,builder,set,path,prefix,proxy,base,path,catch,final,illegal,argument,exception,e,throw,new,settings,exception,concrete,setting,get,key,is,malformed,proxy,base,path,e,configure,headers,builder,config,configure,security,builder,config,ssl,service,configure,timeouts,builder,config,return,builder,build
HttpExporter -> static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener);1528762805;Create a {@link RestClientBuilder} from the HTTP Exporter's {@code config}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to log node failures_@return Never {@code null}._@throws SettingsException if any required setting is missing or any setting is malformed;static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener) {_        final RestClientBuilder builder = RestClient.builder(createHosts(config)).setFailureListener(listener)__        Setting<String> concreteSetting = PROXY_BASE_PATH_SETTING.getConcreteSettingForNamespace(config.name())__        final String proxyBasePath = concreteSetting.get(config.settings())___        _        if (Strings.isNullOrEmpty(proxyBasePath) == false) {_            try {_                builder.setPathPrefix(proxyBasePath)__            } catch (final IllegalArgumentException e) {_                throw new SettingsException("[" + concreteSetting.getKey() + "] is malformed [" + proxyBasePath + "]", e)__            }_        }__        _        configureHeaders(builder, config)__        _        configureSecurity(builder, config, sslService)__        _        configureTimeouts(builder, config)___        return builder.build()__    };create,a,link,rest,client,builder,from,the,http,exporter,s,code,config,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,log,node,failures,return,never,code,null,throws,settings,exception,if,any,required,setting,is,missing,or,any,setting,is,malformed;static,rest,client,create,rest,client,final,config,config,final,sslservice,ssl,service,final,node,failure,listener,listener,final,rest,client,builder,builder,rest,client,builder,create,hosts,config,set,failure,listener,listener,setting,string,concrete,setting,get,concrete,setting,for,namespace,config,name,final,string,proxy,base,path,concrete,setting,get,config,settings,if,strings,is,null,or,empty,proxy,base,path,false,try,builder,set,path,prefix,proxy,base,path,catch,final,illegal,argument,exception,e,throw,new,settings,exception,concrete,setting,get,key,is,malformed,proxy,base,path,e,configure,headers,builder,config,configure,security,builder,config,ssl,service,configure,timeouts,builder,config,return,builder,build
HttpExporter -> static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener);1531179852;Create a {@link RestClientBuilder} from the HTTP Exporter's {@code config}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to log node failures_@return Never {@code null}._@throws SettingsException if any required setting is missing or any setting is malformed;static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener) {_        final RestClientBuilder builder = RestClient.builder(createHosts(config)).setFailureListener(listener)__        Setting<String> concreteSetting = PROXY_BASE_PATH_SETTING.getConcreteSettingForNamespace(config.name())__        final String proxyBasePath = concreteSetting.get(config.settings())___        _        if (Strings.isNullOrEmpty(proxyBasePath) == false) {_            try {_                builder.setPathPrefix(proxyBasePath)__            } catch (final IllegalArgumentException e) {_                throw new SettingsException("[" + concreteSetting.getKey() + "] is malformed [" + proxyBasePath + "]", e)__            }_        }__        _        configureHeaders(builder, config)__        _        configureSecurity(builder, config, sslService)__        _        configureTimeouts(builder, config)___        return builder.build()__    };create,a,link,rest,client,builder,from,the,http,exporter,s,code,config,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,log,node,failures,return,never,code,null,throws,settings,exception,if,any,required,setting,is,missing,or,any,setting,is,malformed;static,rest,client,create,rest,client,final,config,config,final,sslservice,ssl,service,final,node,failure,listener,listener,final,rest,client,builder,builder,rest,client,builder,create,hosts,config,set,failure,listener,listener,setting,string,concrete,setting,get,concrete,setting,for,namespace,config,name,final,string,proxy,base,path,concrete,setting,get,config,settings,if,strings,is,null,or,empty,proxy,base,path,false,try,builder,set,path,prefix,proxy,base,path,catch,final,illegal,argument,exception,e,throw,new,settings,exception,concrete,setting,get,key,is,malformed,proxy,base,path,e,configure,headers,builder,config,configure,security,builder,config,ssl,service,configure,timeouts,builder,config,return,builder,build
HttpExporter -> static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener);1531729807;Create a {@link RestClientBuilder} from the HTTP Exporter's {@code config}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to log node failures_@return Never {@code null}._@throws SettingsException if any required setting is missing or any setting is malformed;static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener) {_        final RestClientBuilder builder = RestClient.builder(createHosts(config)).setFailureListener(listener)__        Setting<String> concreteSetting = PROXY_BASE_PATH_SETTING.getConcreteSettingForNamespace(config.name())__        final String proxyBasePath = concreteSetting.get(config.settings())___        _        if (Strings.isNullOrEmpty(proxyBasePath) == false) {_            try {_                builder.setPathPrefix(proxyBasePath)__            } catch (final IllegalArgumentException e) {_                throw new SettingsException("[" + concreteSetting.getKey() + "] is malformed [" + proxyBasePath + "]", e)__            }_        }__        _        configureHeaders(builder, config)__        _        configureSecurity(builder, config, sslService)__        _        configureTimeouts(builder, config)___        return builder.build()__    };create,a,link,rest,client,builder,from,the,http,exporter,s,code,config,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,log,node,failures,return,never,code,null,throws,settings,exception,if,any,required,setting,is,missing,or,any,setting,is,malformed;static,rest,client,create,rest,client,final,config,config,final,sslservice,ssl,service,final,node,failure,listener,listener,final,rest,client,builder,builder,rest,client,builder,create,hosts,config,set,failure,listener,listener,setting,string,concrete,setting,get,concrete,setting,for,namespace,config,name,final,string,proxy,base,path,concrete,setting,get,config,settings,if,strings,is,null,or,empty,proxy,base,path,false,try,builder,set,path,prefix,proxy,base,path,catch,final,illegal,argument,exception,e,throw,new,settings,exception,concrete,setting,get,key,is,malformed,proxy,base,path,e,configure,headers,builder,config,configure,security,builder,config,ssl,service,configure,timeouts,builder,config,return,builder,build
HttpExporter -> static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener);1540847035;Create a {@link RestClientBuilder} from the HTTP Exporter's {@code config}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to log node failures_@return Never {@code null}._@throws SettingsException if any required setting is missing or any setting is malformed;static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener) {_        final RestClientBuilder builder = RestClient.builder(createHosts(config)).setFailureListener(listener)__        Setting<String> concreteSetting = PROXY_BASE_PATH_SETTING.getConcreteSettingForNamespace(config.name())__        final String proxyBasePath = concreteSetting.get(config.settings())___        _        if (Strings.isNullOrEmpty(proxyBasePath) == false) {_            try {_                builder.setPathPrefix(proxyBasePath)__            } catch (final IllegalArgumentException e) {_                throw new SettingsException("[" + concreteSetting.getKey() + "] is malformed [" + proxyBasePath + "]", e)__            }_        }__        _        configureHeaders(builder, config)__        _        configureSecurity(builder, config, sslService)__        _        configureTimeouts(builder, config)___        return builder.build()__    };create,a,link,rest,client,builder,from,the,http,exporter,s,code,config,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,log,node,failures,return,never,code,null,throws,settings,exception,if,any,required,setting,is,missing,or,any,setting,is,malformed;static,rest,client,create,rest,client,final,config,config,final,sslservice,ssl,service,final,node,failure,listener,listener,final,rest,client,builder,builder,rest,client,builder,create,hosts,config,set,failure,listener,listener,setting,string,concrete,setting,get,concrete,setting,for,namespace,config,name,final,string,proxy,base,path,concrete,setting,get,config,settings,if,strings,is,null,or,empty,proxy,base,path,false,try,builder,set,path,prefix,proxy,base,path,catch,final,illegal,argument,exception,e,throw,new,settings,exception,concrete,setting,get,key,is,malformed,proxy,base,path,e,configure,headers,builder,config,configure,security,builder,config,ssl,service,configure,timeouts,builder,config,return,builder,build
HttpExporter -> static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener);1541592065;Create a {@link RestClientBuilder} from the HTTP Exporter's {@code config}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to log node failures_@return Never {@code null}._@throws SettingsException if any required setting is missing or any setting is malformed;static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener) {_        final RestClientBuilder builder = RestClient.builder(createHosts(config)).setFailureListener(listener)__        Setting<String> concreteSetting = PROXY_BASE_PATH_SETTING.getConcreteSettingForNamespace(config.name())__        final String proxyBasePath = concreteSetting.get(config.settings())___        _        if (Strings.isNullOrEmpty(proxyBasePath) == false) {_            try {_                builder.setPathPrefix(proxyBasePath)__            } catch (final IllegalArgumentException e) {_                throw new SettingsException("[" + concreteSetting.getKey() + "] is malformed [" + proxyBasePath + "]", e)__            }_        }__        _        configureHeaders(builder, config)__        _        configureSecurity(builder, config, sslService)__        _        configureTimeouts(builder, config)___        return builder.build()__    };create,a,link,rest,client,builder,from,the,http,exporter,s,code,config,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,log,node,failures,return,never,code,null,throws,settings,exception,if,any,required,setting,is,missing,or,any,setting,is,malformed;static,rest,client,create,rest,client,final,config,config,final,sslservice,ssl,service,final,node,failure,listener,listener,final,rest,client,builder,builder,rest,client,builder,create,hosts,config,set,failure,listener,listener,setting,string,concrete,setting,get,concrete,setting,for,namespace,config,name,final,string,proxy,base,path,concrete,setting,get,config,settings,if,strings,is,null,or,empty,proxy,base,path,false,try,builder,set,path,prefix,proxy,base,path,catch,final,illegal,argument,exception,e,throw,new,settings,exception,concrete,setting,get,key,is,malformed,proxy,base,path,e,configure,headers,builder,config,configure,security,builder,config,ssl,service,configure,timeouts,builder,config,return,builder,build
HttpExporter -> static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener);1543346894;Create a {@link RestClientBuilder} from the HTTP Exporter's {@code config}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to log node failures_@return Never {@code null}._@throws SettingsException if any required setting is missing or any setting is malformed;static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener) {_        final RestClientBuilder builder = RestClient.builder(createHosts(config)).setFailureListener(listener)__        Setting<String> concreteSetting = PROXY_BASE_PATH_SETTING.getConcreteSettingForNamespace(config.name())__        final String proxyBasePath = concreteSetting.get(config.settings())___        _        if (Strings.isNullOrEmpty(proxyBasePath) == false) {_            try {_                builder.setPathPrefix(proxyBasePath)__            } catch (final IllegalArgumentException e) {_                throw new SettingsException("[" + concreteSetting.getKey() + "] is malformed [" + proxyBasePath + "]", e)__            }_        }__        _        configureHeaders(builder, config)__        _        configureSecurity(builder, config, sslService)__        _        configureTimeouts(builder, config)___        return builder.build()__    };create,a,link,rest,client,builder,from,the,http,exporter,s,code,config,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,log,node,failures,return,never,code,null,throws,settings,exception,if,any,required,setting,is,missing,or,any,setting,is,malformed;static,rest,client,create,rest,client,final,config,config,final,sslservice,ssl,service,final,node,failure,listener,listener,final,rest,client,builder,builder,rest,client,builder,create,hosts,config,set,failure,listener,listener,setting,string,concrete,setting,get,concrete,setting,for,namespace,config,name,final,string,proxy,base,path,concrete,setting,get,config,settings,if,strings,is,null,or,empty,proxy,base,path,false,try,builder,set,path,prefix,proxy,base,path,catch,final,illegal,argument,exception,e,throw,new,settings,exception,concrete,setting,get,key,is,malformed,proxy,base,path,e,configure,headers,builder,config,configure,security,builder,config,ssl,service,configure,timeouts,builder,config,return,builder,build
HttpExporter -> static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener);1549288028;Create a {@link RestClientBuilder} from the HTTP Exporter's {@code config}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to log node failures_@return Never {@code null}._@throws SettingsException if any required setting is missing or any setting is malformed;static RestClient createRestClient(final Config config, final SSLService sslService, final NodeFailureListener listener) {_        final RestClientBuilder builder = RestClient.builder(createHosts(config)).setFailureListener(listener)__        Setting<String> concreteSetting = PROXY_BASE_PATH_SETTING.getConcreteSettingForNamespace(config.name())__        final String proxyBasePath = concreteSetting.get(config.settings())___        _        if (Strings.isNullOrEmpty(proxyBasePath) == false) {_            try {_                builder.setPathPrefix(proxyBasePath)__            } catch (final IllegalArgumentException e) {_                throw new SettingsException("[" + concreteSetting.getKey() + "] is malformed [" + proxyBasePath + "]", e)__            }_        }__        _        configureHeaders(builder, config)__        _        configureSecurity(builder, config, sslService)__        _        configureTimeouts(builder, config)___        return builder.build()__    };create,a,link,rest,client,builder,from,the,http,exporter,s,code,config,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,log,node,failures,return,never,code,null,throws,settings,exception,if,any,required,setting,is,missing,or,any,setting,is,malformed;static,rest,client,create,rest,client,final,config,config,final,sslservice,ssl,service,final,node,failure,listener,listener,final,rest,client,builder,builder,rest,client,builder,create,hosts,config,set,failure,listener,listener,setting,string,concrete,setting,get,concrete,setting,for,namespace,config,name,final,string,proxy,base,path,concrete,setting,get,config,settings,if,strings,is,null,or,empty,proxy,base,path,false,try,builder,set,path,prefix,proxy,base,path,catch,final,illegal,argument,exception,e,throw,new,settings,exception,concrete,setting,get,key,is,malformed,proxy,base,path,e,configure,headers,builder,config,configure,security,builder,config,ssl,service,configure,timeouts,builder,config,return,builder,build
HttpExporter -> boolean isExporterReady();1524684173;Determine if this {@link HttpExporter} is ready to use.__@return {@code true} if it is ready. {@code false} if not.;boolean isExporterReady() {_        final boolean canUseClusterAlerts = config.licenseState().isMonitoringClusterAlertsAllowed()___        _        if (clusterAlertsAllowed.compareAndSet(!canUseClusterAlerts, canUseClusterAlerts)) {_            resource.markDirty()__        }__        _        return resource.checkAndPublishIfDirty(client)__    };determine,if,this,link,http,exporter,is,ready,to,use,return,code,true,if,it,is,ready,code,false,if,not;boolean,is,exporter,ready,final,boolean,can,use,cluster,alerts,config,license,state,is,monitoring,cluster,alerts,allowed,if,cluster,alerts,allowed,compare,and,set,can,use,cluster,alerts,can,use,cluster,alerts,resource,mark,dirty,return,resource,check,and,publish,if,dirty,client
HttpExporter -> boolean isExporterReady();1527840262;Determine if this {@link HttpExporter} is ready to use.__@return {@code true} if it is ready. {@code false} if not.;boolean isExporterReady() {_        final boolean canUseClusterAlerts = config.licenseState().isMonitoringClusterAlertsAllowed()___        _        if (clusterAlertsAllowed.compareAndSet(!canUseClusterAlerts, canUseClusterAlerts)) {_            resource.markDirty()__        }__        _        return resource.checkAndPublishIfDirty(client)__    };determine,if,this,link,http,exporter,is,ready,to,use,return,code,true,if,it,is,ready,code,false,if,not;boolean,is,exporter,ready,final,boolean,can,use,cluster,alerts,config,license,state,is,monitoring,cluster,alerts,allowed,if,cluster,alerts,allowed,compare,and,set,can,use,cluster,alerts,can,use,cluster,alerts,resource,mark,dirty,return,resource,check,and,publish,if,dirty,client
HttpExporter -> boolean isExporterReady();1528762805;Determine if this {@link HttpExporter} is ready to use.__@return {@code true} if it is ready. {@code false} if not.;boolean isExporterReady() {_        final boolean canUseClusterAlerts = config.licenseState().isMonitoringClusterAlertsAllowed()___        _        if (clusterAlertsAllowed.compareAndSet(!canUseClusterAlerts, canUseClusterAlerts)) {_            resource.markDirty()__        }__        _        return resource.checkAndPublishIfDirty(client)__    };determine,if,this,link,http,exporter,is,ready,to,use,return,code,true,if,it,is,ready,code,false,if,not;boolean,is,exporter,ready,final,boolean,can,use,cluster,alerts,config,license,state,is,monitoring,cluster,alerts,allowed,if,cluster,alerts,allowed,compare,and,set,can,use,cluster,alerts,can,use,cluster,alerts,resource,mark,dirty,return,resource,check,and,publish,if,dirty,client
HttpExporter -> boolean isExporterReady();1531179852;Determine if this {@link HttpExporter} is ready to use.__@return {@code true} if it is ready. {@code false} if not.;boolean isExporterReady() {_        final boolean canUseClusterAlerts = config.licenseState().isMonitoringClusterAlertsAllowed()___        _        if (clusterAlertsAllowed.compareAndSet(!canUseClusterAlerts, canUseClusterAlerts)) {_            resource.markDirty()__        }__        _        return resource.checkAndPublishIfDirty(client)__    };determine,if,this,link,http,exporter,is,ready,to,use,return,code,true,if,it,is,ready,code,false,if,not;boolean,is,exporter,ready,final,boolean,can,use,cluster,alerts,config,license,state,is,monitoring,cluster,alerts,allowed,if,cluster,alerts,allowed,compare,and,set,can,use,cluster,alerts,can,use,cluster,alerts,resource,mark,dirty,return,resource,check,and,publish,if,dirty,client
HttpExporter -> boolean isExporterReady();1531729807;Determine if this {@link HttpExporter} is ready to use.__@return {@code true} if it is ready. {@code false} if not.;boolean isExporterReady() {_        final boolean canUseClusterAlerts = config.licenseState().isMonitoringClusterAlertsAllowed()___        _        if (clusterAlertsAllowed.compareAndSet(!canUseClusterAlerts, canUseClusterAlerts)) {_            resource.markDirty()__        }__        _        return resource.checkAndPublishIfDirty(client)__    };determine,if,this,link,http,exporter,is,ready,to,use,return,code,true,if,it,is,ready,code,false,if,not;boolean,is,exporter,ready,final,boolean,can,use,cluster,alerts,config,license,state,is,monitoring,cluster,alerts,allowed,if,cluster,alerts,allowed,compare,and,set,can,use,cluster,alerts,can,use,cluster,alerts,resource,mark,dirty,return,resource,check,and,publish,if,dirty,client
HttpExporter -> boolean isExporterReady();1540847035;Determine if this {@link HttpExporter} is ready to use.__@return {@code true} if it is ready. {@code false} if not.;boolean isExporterReady() {_        final boolean canUseClusterAlerts = config.licenseState().isMonitoringClusterAlertsAllowed()___        _        if (clusterAlertsAllowed.compareAndSet(!canUseClusterAlerts, canUseClusterAlerts)) {_            resource.markDirty()__        }__        _        return resource.checkAndPublishIfDirty(client)__    };determine,if,this,link,http,exporter,is,ready,to,use,return,code,true,if,it,is,ready,code,false,if,not;boolean,is,exporter,ready,final,boolean,can,use,cluster,alerts,config,license,state,is,monitoring,cluster,alerts,allowed,if,cluster,alerts,allowed,compare,and,set,can,use,cluster,alerts,can,use,cluster,alerts,resource,mark,dirty,return,resource,check,and,publish,if,dirty,client
HttpExporter -> boolean isExporterReady();1541592065;Determine if this {@link HttpExporter} is ready to use.__@return {@code true} if it is ready. {@code false} if not.;boolean isExporterReady() {_        final boolean canUseClusterAlerts = config.licenseState().isMonitoringClusterAlertsAllowed()___        _        if (clusterAlertsAllowed.compareAndSet(!canUseClusterAlerts, canUseClusterAlerts)) {_            resource.markDirty()__        }__        _        return resource.checkAndPublishIfDirty(client)__    };determine,if,this,link,http,exporter,is,ready,to,use,return,code,true,if,it,is,ready,code,false,if,not;boolean,is,exporter,ready,final,boolean,can,use,cluster,alerts,config,license,state,is,monitoring,cluster,alerts,allowed,if,cluster,alerts,allowed,compare,and,set,can,use,cluster,alerts,can,use,cluster,alerts,resource,mark,dirty,return,resource,check,and,publish,if,dirty,client
HttpExporter -> static MultiHttpResource createResources(final Config config);1524684173;Create a {@link MultiHttpResource} that can be used to block bulk exporting until all expected resources are available.__@param config The HTTP Exporter's configuration_@return Never {@code null}.;static MultiHttpResource createResources(final Config config) {_        final String resourceOwnerName = "xpack.monitoring.exporters." + config.name()__        _        final List<HttpResource> resources = new ArrayList<>()___        _        resources.add(new VersionHttpResource(resourceOwnerName, MIN_SUPPORTED_CLUSTER_VERSION))__        _        configureTemplateResources(config, resourceOwnerName, resources)__        _        configurePipelineResources(config, resourceOwnerName, resources)___        _        configureClusterAlertsResources(config, resourceOwnerName, resources)___        return new MultiHttpResource(resourceOwnerName, resources)__    };create,a,link,multi,http,resource,that,can,be,used,to,block,bulk,exporting,until,all,expected,resources,are,available,param,config,the,http,exporter,s,configuration,return,never,code,null;static,multi,http,resource,create,resources,final,config,config,final,string,resource,owner,name,xpack,monitoring,exporters,config,name,final,list,http,resource,resources,new,array,list,resources,add,new,version,http,resource,resource,owner,name,configure,template,resources,config,resource,owner,name,resources,configure,pipeline,resources,config,resource,owner,name,resources,configure,cluster,alerts,resources,config,resource,owner,name,resources,return,new,multi,http,resource,resource,owner,name,resources
HttpExporter -> static MultiHttpResource createResources(final Config config);1527840262;Create a {@link MultiHttpResource} that can be used to block bulk exporting until all expected resources are available.__@param config The HTTP Exporter's configuration_@return Never {@code null}.;static MultiHttpResource createResources(final Config config) {_        final String resourceOwnerName = "xpack.monitoring.exporters." + config.name()__        _        final List<HttpResource> resources = new ArrayList<>()___        _        resources.add(new VersionHttpResource(resourceOwnerName, MIN_SUPPORTED_CLUSTER_VERSION))__        _        configureTemplateResources(config, resourceOwnerName, resources)__        _        configurePipelineResources(config, resourceOwnerName, resources)___        _        configureClusterAlertsResources(config, resourceOwnerName, resources)___        return new MultiHttpResource(resourceOwnerName, resources)__    };create,a,link,multi,http,resource,that,can,be,used,to,block,bulk,exporting,until,all,expected,resources,are,available,param,config,the,http,exporter,s,configuration,return,never,code,null;static,multi,http,resource,create,resources,final,config,config,final,string,resource,owner,name,xpack,monitoring,exporters,config,name,final,list,http,resource,resources,new,array,list,resources,add,new,version,http,resource,resource,owner,name,configure,template,resources,config,resource,owner,name,resources,configure,pipeline,resources,config,resource,owner,name,resources,configure,cluster,alerts,resources,config,resource,owner,name,resources,return,new,multi,http,resource,resource,owner,name,resources
HttpExporter -> static MultiHttpResource createResources(final Config config);1528762805;Create a {@link MultiHttpResource} that can be used to block bulk exporting until all expected resources are available.__@param config The HTTP Exporter's configuration_@return Never {@code null}.;static MultiHttpResource createResources(final Config config) {_        final String resourceOwnerName = "xpack.monitoring.exporters." + config.name()__        _        final List<HttpResource> resources = new ArrayList<>()___        _        resources.add(new VersionHttpResource(resourceOwnerName, MIN_SUPPORTED_CLUSTER_VERSION))__        _        configureTemplateResources(config, resourceOwnerName, resources)__        _        configurePipelineResources(config, resourceOwnerName, resources)___        _        configureClusterAlertsResources(config, resourceOwnerName, resources)___        return new MultiHttpResource(resourceOwnerName, resources)__    };create,a,link,multi,http,resource,that,can,be,used,to,block,bulk,exporting,until,all,expected,resources,are,available,param,config,the,http,exporter,s,configuration,return,never,code,null;static,multi,http,resource,create,resources,final,config,config,final,string,resource,owner,name,xpack,monitoring,exporters,config,name,final,list,http,resource,resources,new,array,list,resources,add,new,version,http,resource,resource,owner,name,configure,template,resources,config,resource,owner,name,resources,configure,pipeline,resources,config,resource,owner,name,resources,configure,cluster,alerts,resources,config,resource,owner,name,resources,return,new,multi,http,resource,resource,owner,name,resources
HttpExporter -> static MultiHttpResource createResources(final Config config);1531179852;Create a {@link MultiHttpResource} that can be used to block bulk exporting until all expected resources are available.__@param config The HTTP Exporter's configuration_@return Never {@code null}.;static MultiHttpResource createResources(final Config config) {_        final String resourceOwnerName = "xpack.monitoring.exporters." + config.name()__        _        final List<HttpResource> resources = new ArrayList<>()___        _        resources.add(new VersionHttpResource(resourceOwnerName, MIN_SUPPORTED_CLUSTER_VERSION))__        _        configureTemplateResources(config, resourceOwnerName, resources)__        _        configurePipelineResources(config, resourceOwnerName, resources)___        _        configureClusterAlertsResources(config, resourceOwnerName, resources)___        return new MultiHttpResource(resourceOwnerName, resources)__    };create,a,link,multi,http,resource,that,can,be,used,to,block,bulk,exporting,until,all,expected,resources,are,available,param,config,the,http,exporter,s,configuration,return,never,code,null;static,multi,http,resource,create,resources,final,config,config,final,string,resource,owner,name,xpack,monitoring,exporters,config,name,final,list,http,resource,resources,new,array,list,resources,add,new,version,http,resource,resource,owner,name,configure,template,resources,config,resource,owner,name,resources,configure,pipeline,resources,config,resource,owner,name,resources,configure,cluster,alerts,resources,config,resource,owner,name,resources,return,new,multi,http,resource,resource,owner,name,resources
HttpExporter -> static MultiHttpResource createResources(final Config config);1531729807;Create a {@link MultiHttpResource} that can be used to block bulk exporting until all expected resources are available.__@param config The HTTP Exporter's configuration_@return Never {@code null}.;static MultiHttpResource createResources(final Config config) {_        final String resourceOwnerName = "xpack.monitoring.exporters." + config.name()__        _        final List<HttpResource> resources = new ArrayList<>()___        _        resources.add(new VersionHttpResource(resourceOwnerName, MIN_SUPPORTED_CLUSTER_VERSION))__        _        configureTemplateResources(config, resourceOwnerName, resources)__        _        configurePipelineResources(config, resourceOwnerName, resources)___        _        configureClusterAlertsResources(config, resourceOwnerName, resources)___        return new MultiHttpResource(resourceOwnerName, resources)__    };create,a,link,multi,http,resource,that,can,be,used,to,block,bulk,exporting,until,all,expected,resources,are,available,param,config,the,http,exporter,s,configuration,return,never,code,null;static,multi,http,resource,create,resources,final,config,config,final,string,resource,owner,name,xpack,monitoring,exporters,config,name,final,list,http,resource,resources,new,array,list,resources,add,new,version,http,resource,resource,owner,name,configure,template,resources,config,resource,owner,name,resources,configure,pipeline,resources,config,resource,owner,name,resources,configure,cluster,alerts,resources,config,resource,owner,name,resources,return,new,multi,http,resource,resource,owner,name,resources
HttpExporter -> static MultiHttpResource createResources(final Config config);1540847035;Create a {@link MultiHttpResource} that can be used to block bulk exporting until all expected resources are available.__@param config The HTTP Exporter's configuration_@return Never {@code null}.;static MultiHttpResource createResources(final Config config) {_        final String resourceOwnerName = "xpack.monitoring.exporters." + config.name()__        _        final List<HttpResource> resources = new ArrayList<>()___        _        resources.add(new VersionHttpResource(resourceOwnerName, MIN_SUPPORTED_CLUSTER_VERSION))__        _        configureTemplateResources(config, resourceOwnerName, resources)__        _        configurePipelineResources(config, resourceOwnerName, resources)___        _        configureClusterAlertsResources(config, resourceOwnerName, resources)___        return new MultiHttpResource(resourceOwnerName, resources)__    };create,a,link,multi,http,resource,that,can,be,used,to,block,bulk,exporting,until,all,expected,resources,are,available,param,config,the,http,exporter,s,configuration,return,never,code,null;static,multi,http,resource,create,resources,final,config,config,final,string,resource,owner,name,xpack,monitoring,exporters,config,name,final,list,http,resource,resources,new,array,list,resources,add,new,version,http,resource,resource,owner,name,configure,template,resources,config,resource,owner,name,resources,configure,pipeline,resources,config,resource,owner,name,resources,configure,cluster,alerts,resources,config,resource,owner,name,resources,return,new,multi,http,resource,resource,owner,name,resources
HttpExporter -> static MultiHttpResource createResources(final Config config);1541592065;Create a {@link MultiHttpResource} that can be used to block bulk exporting until all expected resources are available.__@param config The HTTP Exporter's configuration_@return Never {@code null}.;static MultiHttpResource createResources(final Config config) {_        final String resourceOwnerName = "xpack.monitoring.exporters." + config.name()__        _        final List<HttpResource> resources = new ArrayList<>()___        _        resources.add(new VersionHttpResource(resourceOwnerName, MIN_SUPPORTED_CLUSTER_VERSION))__        _        configureTemplateResources(config, resourceOwnerName, resources)__        _        configurePipelineResources(config, resourceOwnerName, resources)___        _        configureClusterAlertsResources(config, resourceOwnerName, resources)___        return new MultiHttpResource(resourceOwnerName, resources)__    };create,a,link,multi,http,resource,that,can,be,used,to,block,bulk,exporting,until,all,expected,resources,are,available,param,config,the,http,exporter,s,configuration,return,never,code,null;static,multi,http,resource,create,resources,final,config,config,final,string,resource,owner,name,xpack,monitoring,exporters,config,name,final,list,http,resource,resources,new,array,list,resources,add,new,version,http,resource,resource,owner,name,configure,template,resources,config,resource,owner,name,resources,configure,pipeline,resources,config,resource,owner,name,resources,configure,cluster,alerts,resources,config,resource,owner,name,resources,return,new,multi,http,resource,resource,owner,name,resources
HttpExporter -> static MultiHttpResource createResources(final Config config);1543346894;Create a {@link MultiHttpResource} that can be used to block bulk exporting until all expected resources are available.__@param config The HTTP Exporter's configuration_@return Never {@code null}.;static MultiHttpResource createResources(final Config config) {_        final String resourceOwnerName = "xpack.monitoring.exporters." + config.name()__        _        final List<HttpResource> resources = new ArrayList<>()___        _        resources.add(new VersionHttpResource(resourceOwnerName, MIN_SUPPORTED_CLUSTER_VERSION))__        _        configureTemplateResources(config, resourceOwnerName, resources)__        _        configurePipelineResources(config, resourceOwnerName, resources)___        _        configureClusterAlertsResources(config, resourceOwnerName, resources)___        return new MultiHttpResource(resourceOwnerName, resources)__    };create,a,link,multi,http,resource,that,can,be,used,to,block,bulk,exporting,until,all,expected,resources,are,available,param,config,the,http,exporter,s,configuration,return,never,code,null;static,multi,http,resource,create,resources,final,config,config,final,string,resource,owner,name,xpack,monitoring,exporters,config,name,final,list,http,resource,resources,new,array,list,resources,add,new,version,http,resource,resource,owner,name,configure,template,resources,config,resource,owner,name,resources,configure,pipeline,resources,config,resource,owner,name,resources,configure,cluster,alerts,resources,config,resource,owner,name,resources,return,new,multi,http,resource,resource,owner,name,resources
HttpExporter -> static MultiHttpResource createResources(final Config config);1549288028;Create a {@link MultiHttpResource} that can be used to block bulk exporting until all expected resources are available.__@param config The HTTP Exporter's configuration_@return Never {@code null}.;static MultiHttpResource createResources(final Config config) {_        final String resourceOwnerName = "xpack.monitoring.exporters." + config.name()__        _        final List<HttpResource> resources = new ArrayList<>()___        _        resources.add(new VersionHttpResource(resourceOwnerName, MIN_SUPPORTED_CLUSTER_VERSION))__        _        configureTemplateResources(config, resourceOwnerName, resources)__        _        configurePipelineResources(config, resourceOwnerName, resources)___        _        configureClusterAlertsResources(config, resourceOwnerName, resources)___        return new MultiHttpResource(resourceOwnerName, resources)__    };create,a,link,multi,http,resource,that,can,be,used,to,block,bulk,exporting,until,all,expected,resources,are,available,param,config,the,http,exporter,s,configuration,return,never,code,null;static,multi,http,resource,create,resources,final,config,config,final,string,resource,owner,name,xpack,monitoring,exporters,config,name,final,list,http,resource,resources,new,array,list,resources,add,new,version,http,resource,resource,owner,name,configure,template,resources,config,resource,owner,name,resources,configure,pipeline,resources,config,resource,owner,name,resources,configure,cluster,alerts,resources,config,resource,owner,name,resources,return,new,multi,http,resource,resource,owner,name,resources
HttpExporter -> static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener);1524684173;Create a {@link Sniffer} from the HTTP Exporter's {@code config} for the {@code client}.__@param config The HTTP Exporter's configuration_@param client The REST client to sniff_@param listener The node failure listener used to help improve sniffing_@return Can be {@code null} if the sniffer is disabled._@throws IndexOutOfBoundsException if no {@linkplain #HOST_SETTING hosts} are set;static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener) {_        Sniffer sniffer = null___        _        boolean sniffingEnabled = SNIFF_ENABLED_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (sniffingEnabled) {_            final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__            _            final Scheme scheme = hosts.get(0).startsWith("https") ? Scheme.HTTPS : Scheme.HTTP__            final ElasticsearchHostsSniffer hostsSniffer =_                    new ElasticsearchHostsSniffer(client, ElasticsearchHostsSniffer.DEFAULT_SNIFF_REQUEST_TIMEOUT, scheme)___            sniffer = Sniffer.builder(client).setHostsSniffer(hostsSniffer).build()___            _            listener.setSniffer(sniffer)___            logger.debug("exporter [{}] using host sniffing", config.name())__        }__        return sniffer__    };create,a,link,sniffer,from,the,http,exporter,s,code,config,for,the,code,client,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,to,sniff,param,listener,the,node,failure,listener,used,to,help,improve,sniffing,return,can,be,code,null,if,the,sniffer,is,disabled,throws,index,out,of,bounds,exception,if,no,linkplain,hosts,are,set;static,sniffer,create,sniffer,final,config,config,final,rest,client,client,final,node,failure,listener,listener,sniffer,sniffer,null,boolean,sniffing,enabled,get,concrete,setting,for,namespace,config,name,get,config,settings,if,sniffing,enabled,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,final,scheme,scheme,hosts,get,0,starts,with,https,scheme,https,scheme,http,final,elasticsearch,hosts,sniffer,hosts,sniffer,new,elasticsearch,hosts,sniffer,client,elasticsearch,hosts,sniffer,scheme,sniffer,sniffer,builder,client,set,hosts,sniffer,hosts,sniffer,build,listener,set,sniffer,sniffer,logger,debug,exporter,using,host,sniffing,config,name,return,sniffer
HttpExporter -> static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener);1527840262;Create a {@link Sniffer} from the HTTP Exporter's {@code config} for the {@code client}.__@param config The HTTP Exporter's configuration_@param client The REST client to sniff_@param listener The node failure listener used to help improve sniffing_@return Can be {@code null} if the sniffer is disabled._@throws IndexOutOfBoundsException if no {@linkplain #HOST_SETTING hosts} are set;static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener) {_        Sniffer sniffer = null___        _        boolean sniffingEnabled = SNIFF_ENABLED_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (sniffingEnabled) {_            final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__            _            final Scheme scheme = hosts.get(0).startsWith("https") ? Scheme.HTTPS : Scheme.HTTP__            final ElasticsearchHostsSniffer hostsSniffer =_                    new ElasticsearchHostsSniffer(client, ElasticsearchHostsSniffer.DEFAULT_SNIFF_REQUEST_TIMEOUT, scheme)___            sniffer = Sniffer.builder(client).setHostsSniffer(hostsSniffer).build()___            _            listener.setSniffer(sniffer)___            logger.debug("exporter [{}] using host sniffing", config.name())__        }__        return sniffer__    };create,a,link,sniffer,from,the,http,exporter,s,code,config,for,the,code,client,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,to,sniff,param,listener,the,node,failure,listener,used,to,help,improve,sniffing,return,can,be,code,null,if,the,sniffer,is,disabled,throws,index,out,of,bounds,exception,if,no,linkplain,hosts,are,set;static,sniffer,create,sniffer,final,config,config,final,rest,client,client,final,node,failure,listener,listener,sniffer,sniffer,null,boolean,sniffing,enabled,get,concrete,setting,for,namespace,config,name,get,config,settings,if,sniffing,enabled,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,final,scheme,scheme,hosts,get,0,starts,with,https,scheme,https,scheme,http,final,elasticsearch,hosts,sniffer,hosts,sniffer,new,elasticsearch,hosts,sniffer,client,elasticsearch,hosts,sniffer,scheme,sniffer,sniffer,builder,client,set,hosts,sniffer,hosts,sniffer,build,listener,set,sniffer,sniffer,logger,debug,exporter,using,host,sniffing,config,name,return,sniffer
HttpExporter -> static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener);1528762805;Create a {@link Sniffer} from the HTTP Exporter's {@code config} for the {@code client}.__@param config The HTTP Exporter's configuration_@param client The REST client to sniff_@param listener The node failure listener used to help improve sniffing_@return Can be {@code null} if the sniffer is disabled._@throws IndexOutOfBoundsException if no {@linkplain #HOST_SETTING hosts} are set;static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener) {_        Sniffer sniffer = null___        _        boolean sniffingEnabled = SNIFF_ENABLED_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (sniffingEnabled) {_            final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__            _            final ElasticsearchNodesSniffer.Scheme scheme = hosts.get(0).startsWith("https") ?_                    ElasticsearchNodesSniffer.Scheme.HTTPS : ElasticsearchNodesSniffer.Scheme.HTTP__            final ElasticsearchNodesSniffer hostsSniffer =_                    new ElasticsearchNodesSniffer(client, ElasticsearchNodesSniffer.DEFAULT_SNIFF_REQUEST_TIMEOUT, scheme)___            sniffer = Sniffer.builder(client).setNodesSniffer(hostsSniffer).build()___            _            listener.setSniffer(sniffer)___            logger.debug("exporter [{}] using host sniffing", config.name())__        }__        return sniffer__    };create,a,link,sniffer,from,the,http,exporter,s,code,config,for,the,code,client,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,to,sniff,param,listener,the,node,failure,listener,used,to,help,improve,sniffing,return,can,be,code,null,if,the,sniffer,is,disabled,throws,index,out,of,bounds,exception,if,no,linkplain,hosts,are,set;static,sniffer,create,sniffer,final,config,config,final,rest,client,client,final,node,failure,listener,listener,sniffer,sniffer,null,boolean,sniffing,enabled,get,concrete,setting,for,namespace,config,name,get,config,settings,if,sniffing,enabled,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,final,elasticsearch,nodes,sniffer,scheme,scheme,hosts,get,0,starts,with,https,elasticsearch,nodes,sniffer,scheme,https,elasticsearch,nodes,sniffer,scheme,http,final,elasticsearch,nodes,sniffer,hosts,sniffer,new,elasticsearch,nodes,sniffer,client,elasticsearch,nodes,sniffer,scheme,sniffer,sniffer,builder,client,set,nodes,sniffer,hosts,sniffer,build,listener,set,sniffer,sniffer,logger,debug,exporter,using,host,sniffing,config,name,return,sniffer
HttpExporter -> static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener);1531179852;Create a {@link Sniffer} from the HTTP Exporter's {@code config} for the {@code client}.__@param config The HTTP Exporter's configuration_@param client The REST client to sniff_@param listener The node failure listener used to help improve sniffing_@return Can be {@code null} if the sniffer is disabled._@throws IndexOutOfBoundsException if no {@linkplain #HOST_SETTING hosts} are set;static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener) {_        Sniffer sniffer = null___        _        boolean sniffingEnabled = SNIFF_ENABLED_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (sniffingEnabled) {_            final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__            _            final ElasticsearchNodesSniffer.Scheme scheme = hosts.get(0).startsWith("https") ?_                    ElasticsearchNodesSniffer.Scheme.HTTPS : ElasticsearchNodesSniffer.Scheme.HTTP__            final ElasticsearchNodesSniffer hostsSniffer =_                    new ElasticsearchNodesSniffer(client, ElasticsearchNodesSniffer.DEFAULT_SNIFF_REQUEST_TIMEOUT, scheme)___            sniffer = Sniffer.builder(client).setNodesSniffer(hostsSniffer).build()___            _            listener.setSniffer(sniffer)___            logger.debug("exporter [{}] using host sniffing", config.name())__        }__        return sniffer__    };create,a,link,sniffer,from,the,http,exporter,s,code,config,for,the,code,client,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,to,sniff,param,listener,the,node,failure,listener,used,to,help,improve,sniffing,return,can,be,code,null,if,the,sniffer,is,disabled,throws,index,out,of,bounds,exception,if,no,linkplain,hosts,are,set;static,sniffer,create,sniffer,final,config,config,final,rest,client,client,final,node,failure,listener,listener,sniffer,sniffer,null,boolean,sniffing,enabled,get,concrete,setting,for,namespace,config,name,get,config,settings,if,sniffing,enabled,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,final,elasticsearch,nodes,sniffer,scheme,scheme,hosts,get,0,starts,with,https,elasticsearch,nodes,sniffer,scheme,https,elasticsearch,nodes,sniffer,scheme,http,final,elasticsearch,nodes,sniffer,hosts,sniffer,new,elasticsearch,nodes,sniffer,client,elasticsearch,nodes,sniffer,scheme,sniffer,sniffer,builder,client,set,nodes,sniffer,hosts,sniffer,build,listener,set,sniffer,sniffer,logger,debug,exporter,using,host,sniffing,config,name,return,sniffer
HttpExporter -> static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener);1531729807;Create a {@link Sniffer} from the HTTP Exporter's {@code config} for the {@code client}.__@param config The HTTP Exporter's configuration_@param client The REST client to sniff_@param listener The node failure listener used to help improve sniffing_@return Can be {@code null} if the sniffer is disabled._@throws IndexOutOfBoundsException if no {@linkplain #HOST_SETTING hosts} are set;static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener) {_        Sniffer sniffer = null___        _        boolean sniffingEnabled = SNIFF_ENABLED_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (sniffingEnabled) {_            final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__            _            final ElasticsearchNodesSniffer.Scheme scheme = hosts.get(0).startsWith("https") ?_                    ElasticsearchNodesSniffer.Scheme.HTTPS : ElasticsearchNodesSniffer.Scheme.HTTP__            final ElasticsearchNodesSniffer hostsSniffer =_                    new ElasticsearchNodesSniffer(client, ElasticsearchNodesSniffer.DEFAULT_SNIFF_REQUEST_TIMEOUT, scheme)___            sniffer = Sniffer.builder(client).setNodesSniffer(hostsSniffer).build()___            _            listener.setSniffer(sniffer)___            logger.debug("exporter [{}] using host sniffing", config.name())__        }__        return sniffer__    };create,a,link,sniffer,from,the,http,exporter,s,code,config,for,the,code,client,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,to,sniff,param,listener,the,node,failure,listener,used,to,help,improve,sniffing,return,can,be,code,null,if,the,sniffer,is,disabled,throws,index,out,of,bounds,exception,if,no,linkplain,hosts,are,set;static,sniffer,create,sniffer,final,config,config,final,rest,client,client,final,node,failure,listener,listener,sniffer,sniffer,null,boolean,sniffing,enabled,get,concrete,setting,for,namespace,config,name,get,config,settings,if,sniffing,enabled,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,final,elasticsearch,nodes,sniffer,scheme,scheme,hosts,get,0,starts,with,https,elasticsearch,nodes,sniffer,scheme,https,elasticsearch,nodes,sniffer,scheme,http,final,elasticsearch,nodes,sniffer,hosts,sniffer,new,elasticsearch,nodes,sniffer,client,elasticsearch,nodes,sniffer,scheme,sniffer,sniffer,builder,client,set,nodes,sniffer,hosts,sniffer,build,listener,set,sniffer,sniffer,logger,debug,exporter,using,host,sniffing,config,name,return,sniffer
HttpExporter -> static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener);1540847035;Create a {@link Sniffer} from the HTTP Exporter's {@code config} for the {@code client}.__@param config The HTTP Exporter's configuration_@param client The REST client to sniff_@param listener The node failure listener used to help improve sniffing_@return Can be {@code null} if the sniffer is disabled._@throws IndexOutOfBoundsException if no {@linkplain #HOST_SETTING hosts} are set;static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener) {_        Sniffer sniffer = null___        _        boolean sniffingEnabled = SNIFF_ENABLED_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (sniffingEnabled) {_            final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__            _            final ElasticsearchNodesSniffer.Scheme scheme = hosts.get(0).startsWith("https") ?_                    ElasticsearchNodesSniffer.Scheme.HTTPS : ElasticsearchNodesSniffer.Scheme.HTTP__            final ElasticsearchNodesSniffer hostsSniffer =_                    new ElasticsearchNodesSniffer(client, ElasticsearchNodesSniffer.DEFAULT_SNIFF_REQUEST_TIMEOUT, scheme)___            sniffer = Sniffer.builder(client).setNodesSniffer(hostsSniffer).build()___            _            listener.setSniffer(sniffer)___            logger.debug("exporter [{}] using host sniffing", config.name())__        }__        return sniffer__    };create,a,link,sniffer,from,the,http,exporter,s,code,config,for,the,code,client,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,to,sniff,param,listener,the,node,failure,listener,used,to,help,improve,sniffing,return,can,be,code,null,if,the,sniffer,is,disabled,throws,index,out,of,bounds,exception,if,no,linkplain,hosts,are,set;static,sniffer,create,sniffer,final,config,config,final,rest,client,client,final,node,failure,listener,listener,sniffer,sniffer,null,boolean,sniffing,enabled,get,concrete,setting,for,namespace,config,name,get,config,settings,if,sniffing,enabled,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,final,elasticsearch,nodes,sniffer,scheme,scheme,hosts,get,0,starts,with,https,elasticsearch,nodes,sniffer,scheme,https,elasticsearch,nodes,sniffer,scheme,http,final,elasticsearch,nodes,sniffer,hosts,sniffer,new,elasticsearch,nodes,sniffer,client,elasticsearch,nodes,sniffer,scheme,sniffer,sniffer,builder,client,set,nodes,sniffer,hosts,sniffer,build,listener,set,sniffer,sniffer,logger,debug,exporter,using,host,sniffing,config,name,return,sniffer
HttpExporter -> static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener);1541592065;Create a {@link Sniffer} from the HTTP Exporter's {@code config} for the {@code client}.__@param config The HTTP Exporter's configuration_@param client The REST client to sniff_@param listener The node failure listener used to help improve sniffing_@return Can be {@code null} if the sniffer is disabled._@throws IndexOutOfBoundsException if no {@linkplain #HOST_SETTING hosts} are set;static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener) {_        Sniffer sniffer = null___        _        boolean sniffingEnabled = SNIFF_ENABLED_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (sniffingEnabled) {_            final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__            _            final ElasticsearchNodesSniffer.Scheme scheme = hosts.get(0).startsWith("https") ?_                    ElasticsearchNodesSniffer.Scheme.HTTPS : ElasticsearchNodesSniffer.Scheme.HTTP__            final ElasticsearchNodesSniffer hostsSniffer =_                    new ElasticsearchNodesSniffer(client, ElasticsearchNodesSniffer.DEFAULT_SNIFF_REQUEST_TIMEOUT, scheme)___            sniffer = Sniffer.builder(client).setNodesSniffer(hostsSniffer).build()___            _            listener.setSniffer(sniffer)___            logger.debug("exporter [{}] using host sniffing", config.name())__        }__        return sniffer__    };create,a,link,sniffer,from,the,http,exporter,s,code,config,for,the,code,client,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,to,sniff,param,listener,the,node,failure,listener,used,to,help,improve,sniffing,return,can,be,code,null,if,the,sniffer,is,disabled,throws,index,out,of,bounds,exception,if,no,linkplain,hosts,are,set;static,sniffer,create,sniffer,final,config,config,final,rest,client,client,final,node,failure,listener,listener,sniffer,sniffer,null,boolean,sniffing,enabled,get,concrete,setting,for,namespace,config,name,get,config,settings,if,sniffing,enabled,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,final,elasticsearch,nodes,sniffer,scheme,scheme,hosts,get,0,starts,with,https,elasticsearch,nodes,sniffer,scheme,https,elasticsearch,nodes,sniffer,scheme,http,final,elasticsearch,nodes,sniffer,hosts,sniffer,new,elasticsearch,nodes,sniffer,client,elasticsearch,nodes,sniffer,scheme,sniffer,sniffer,builder,client,set,nodes,sniffer,hosts,sniffer,build,listener,set,sniffer,sniffer,logger,debug,exporter,using,host,sniffing,config,name,return,sniffer
HttpExporter -> static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener);1543346894;Create a {@link Sniffer} from the HTTP Exporter's {@code config} for the {@code client}.__@param config The HTTP Exporter's configuration_@param client The REST client to sniff_@param listener The node failure listener used to help improve sniffing_@return Can be {@code null} if the sniffer is disabled._@throws IndexOutOfBoundsException if no {@linkplain #HOST_SETTING hosts} are set;static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener) {_        Sniffer sniffer = null___        _        boolean sniffingEnabled = SNIFF_ENABLED_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (sniffingEnabled) {_            final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__            _            final ElasticsearchNodesSniffer.Scheme scheme = hosts.get(0).startsWith("https") ?_                    ElasticsearchNodesSniffer.Scheme.HTTPS : ElasticsearchNodesSniffer.Scheme.HTTP__            final ElasticsearchNodesSniffer hostsSniffer =_                    new ElasticsearchNodesSniffer(client, ElasticsearchNodesSniffer.DEFAULT_SNIFF_REQUEST_TIMEOUT, scheme)___            sniffer = Sniffer.builder(client).setNodesSniffer(hostsSniffer).build()___            _            listener.setSniffer(sniffer)___            logger.debug("exporter [{}] using host sniffing", config.name())__        }__        return sniffer__    };create,a,link,sniffer,from,the,http,exporter,s,code,config,for,the,code,client,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,to,sniff,param,listener,the,node,failure,listener,used,to,help,improve,sniffing,return,can,be,code,null,if,the,sniffer,is,disabled,throws,index,out,of,bounds,exception,if,no,linkplain,hosts,are,set;static,sniffer,create,sniffer,final,config,config,final,rest,client,client,final,node,failure,listener,listener,sniffer,sniffer,null,boolean,sniffing,enabled,get,concrete,setting,for,namespace,config,name,get,config,settings,if,sniffing,enabled,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,final,elasticsearch,nodes,sniffer,scheme,scheme,hosts,get,0,starts,with,https,elasticsearch,nodes,sniffer,scheme,https,elasticsearch,nodes,sniffer,scheme,http,final,elasticsearch,nodes,sniffer,hosts,sniffer,new,elasticsearch,nodes,sniffer,client,elasticsearch,nodes,sniffer,scheme,sniffer,sniffer,builder,client,set,nodes,sniffer,hosts,sniffer,build,listener,set,sniffer,sniffer,logger,debug,exporter,using,host,sniffing,config,name,return,sniffer
HttpExporter -> static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener);1549288028;Create a {@link Sniffer} from the HTTP Exporter's {@code config} for the {@code client}.__@param config The HTTP Exporter's configuration_@param client The REST client to sniff_@param listener The node failure listener used to help improve sniffing_@return Can be {@code null} if the sniffer is disabled._@throws IndexOutOfBoundsException if no {@linkplain #HOST_SETTING hosts} are set;static Sniffer createSniffer(final Config config, final RestClient client, final NodeFailureListener listener) {_        Sniffer sniffer = null___        _        boolean sniffingEnabled = SNIFF_ENABLED_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (sniffingEnabled) {_            final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__            _            final ElasticsearchNodesSniffer.Scheme scheme = hosts.get(0).startsWith("https") ?_                    ElasticsearchNodesSniffer.Scheme.HTTPS : ElasticsearchNodesSniffer.Scheme.HTTP__            final ElasticsearchNodesSniffer hostsSniffer =_                    new ElasticsearchNodesSniffer(client, ElasticsearchNodesSniffer.DEFAULT_SNIFF_REQUEST_TIMEOUT, scheme)___            sniffer = Sniffer.builder(client).setNodesSniffer(hostsSniffer).build()___            _            listener.setSniffer(sniffer)___            logger.debug("exporter [{}] using host sniffing", config.name())__        }__        return sniffer__    };create,a,link,sniffer,from,the,http,exporter,s,code,config,for,the,code,client,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,to,sniff,param,listener,the,node,failure,listener,used,to,help,improve,sniffing,return,can,be,code,null,if,the,sniffer,is,disabled,throws,index,out,of,bounds,exception,if,no,linkplain,hosts,are,set;static,sniffer,create,sniffer,final,config,config,final,rest,client,client,final,node,failure,listener,listener,sniffer,sniffer,null,boolean,sniffing,enabled,get,concrete,setting,for,namespace,config,name,get,config,settings,if,sniffing,enabled,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,final,elasticsearch,nodes,sniffer,scheme,scheme,hosts,get,0,starts,with,https,elasticsearch,nodes,sniffer,scheme,https,elasticsearch,nodes,sniffer,scheme,http,final,elasticsearch,nodes,sniffer,hosts,sniffer,new,elasticsearch,nodes,sniffer,client,elasticsearch,nodes,sniffer,scheme,sniffer,sniffer,builder,client,set,nodes,sniffer,hosts,sniffer,build,listener,set,sniffer,sniffer,logger,debug,exporter,using,host,sniffing,config,name,return,sniffer
HttpExporter -> private static void configurePipelineResources(final Config config, final String resourceOwnerName,                                                    final List<HttpResource> resources);1524684173;Adds the {@code resources} necessary for checking and publishing monitoring pipelines.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configurePipelineResources(final Config config, final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final TimeValue pipelineTimeout =_                    PIPELINE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___            _            for (final String pipelineId : MonitoringTemplateUtils.PIPELINE_IDS) {_                final String pipelineName = MonitoringTemplateUtils.pipelineName(pipelineId)__                _                final Supplier<byte[]> pipeline =_                        () -> BytesReference.toBytes(BytesReference.bytes(MonitoringTemplateUtils.loadPipeline(pipelineId,_                                                XContentType.JSON)))___                resources.add(new PipelineHttpResource(resourceOwnerName, pipelineTimeout, pipelineName, pipeline))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,pipelines,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,pipeline,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,pipeline,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,pipeline,id,monitoring,template,utils,final,string,pipeline,name,monitoring,template,utils,pipeline,name,pipeline,id,final,supplier,byte,pipeline,bytes,reference,to,bytes,bytes,reference,bytes,monitoring,template,utils,load,pipeline,pipeline,id,xcontent,type,json,resources,add,new,pipeline,http,resource,resource,owner,name,pipeline,timeout,pipeline,name,pipeline
HttpExporter -> private static void configurePipelineResources(final Config config, final String resourceOwnerName,                                                    final List<HttpResource> resources);1527840262;Adds the {@code resources} necessary for checking and publishing monitoring pipelines.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configurePipelineResources(final Config config, final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final TimeValue pipelineTimeout =_                    PIPELINE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___            _            for (final String pipelineId : MonitoringTemplateUtils.PIPELINE_IDS) {_                final String pipelineName = MonitoringTemplateUtils.pipelineName(pipelineId)__                _                final Supplier<byte[]> pipeline =_                        () -> BytesReference.toBytes(BytesReference.bytes(MonitoringTemplateUtils.loadPipeline(pipelineId,_                                                XContentType.JSON)))___                resources.add(new PipelineHttpResource(resourceOwnerName, pipelineTimeout, pipelineName, pipeline))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,pipelines,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,pipeline,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,pipeline,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,pipeline,id,monitoring,template,utils,final,string,pipeline,name,monitoring,template,utils,pipeline,name,pipeline,id,final,supplier,byte,pipeline,bytes,reference,to,bytes,bytes,reference,bytes,monitoring,template,utils,load,pipeline,pipeline,id,xcontent,type,json,resources,add,new,pipeline,http,resource,resource,owner,name,pipeline,timeout,pipeline,name,pipeline
HttpExporter -> private static void configurePipelineResources(final Config config, final String resourceOwnerName,                                                    final List<HttpResource> resources);1528762805;Adds the {@code resources} necessary for checking and publishing monitoring pipelines.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configurePipelineResources(final Config config, final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final TimeValue pipelineTimeout =_                    PIPELINE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___            _            for (final String pipelineId : MonitoringTemplateUtils.PIPELINE_IDS) {_                final String pipelineName = MonitoringTemplateUtils.pipelineName(pipelineId)__                _                final Supplier<byte[]> pipeline =_                        () -> BytesReference.toBytes(BytesReference.bytes(MonitoringTemplateUtils.loadPipeline(pipelineId,_                                                XContentType.JSON)))___                resources.add(new PipelineHttpResource(resourceOwnerName, pipelineTimeout, pipelineName, pipeline))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,pipelines,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,pipeline,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,pipeline,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,pipeline,id,monitoring,template,utils,final,string,pipeline,name,monitoring,template,utils,pipeline,name,pipeline,id,final,supplier,byte,pipeline,bytes,reference,to,bytes,bytes,reference,bytes,monitoring,template,utils,load,pipeline,pipeline,id,xcontent,type,json,resources,add,new,pipeline,http,resource,resource,owner,name,pipeline,timeout,pipeline,name,pipeline
HttpExporter -> private static void configurePipelineResources(final Config config, final String resourceOwnerName,                                                    final List<HttpResource> resources);1531179852;Adds the {@code resources} necessary for checking and publishing monitoring pipelines.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configurePipelineResources(final Config config, final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final TimeValue pipelineTimeout =_                    PIPELINE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___            _            for (final String pipelineId : MonitoringTemplateUtils.PIPELINE_IDS) {_                final String pipelineName = MonitoringTemplateUtils.pipelineName(pipelineId)__                _                final Supplier<byte[]> pipeline =_                        () -> BytesReference.toBytes(BytesReference.bytes(MonitoringTemplateUtils.loadPipeline(pipelineId,_                                                XContentType.JSON)))___                resources.add(new PipelineHttpResource(resourceOwnerName, pipelineTimeout, pipelineName, pipeline))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,pipelines,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,pipeline,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,pipeline,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,pipeline,id,monitoring,template,utils,final,string,pipeline,name,monitoring,template,utils,pipeline,name,pipeline,id,final,supplier,byte,pipeline,bytes,reference,to,bytes,bytes,reference,bytes,monitoring,template,utils,load,pipeline,pipeline,id,xcontent,type,json,resources,add,new,pipeline,http,resource,resource,owner,name,pipeline,timeout,pipeline,name,pipeline
HttpExporter -> private static void configurePipelineResources(final Config config, final String resourceOwnerName,                                                    final List<HttpResource> resources);1531729807;Adds the {@code resources} necessary for checking and publishing monitoring pipelines.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configurePipelineResources(final Config config, final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final TimeValue pipelineTimeout =_                    PIPELINE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___            _            for (final String pipelineId : MonitoringTemplateUtils.PIPELINE_IDS) {_                final String pipelineName = MonitoringTemplateUtils.pipelineName(pipelineId)__                _                final Supplier<byte[]> pipeline =_                        () -> BytesReference.toBytes(BytesReference.bytes(MonitoringTemplateUtils.loadPipeline(pipelineId,_                                                XContentType.JSON)))___                resources.add(new PipelineHttpResource(resourceOwnerName, pipelineTimeout, pipelineName, pipeline))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,pipelines,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,pipeline,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,pipeline,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,pipeline,id,monitoring,template,utils,final,string,pipeline,name,monitoring,template,utils,pipeline,name,pipeline,id,final,supplier,byte,pipeline,bytes,reference,to,bytes,bytes,reference,bytes,monitoring,template,utils,load,pipeline,pipeline,id,xcontent,type,json,resources,add,new,pipeline,http,resource,resource,owner,name,pipeline,timeout,pipeline,name,pipeline
HttpExporter -> private static void configurePipelineResources(final Config config, final String resourceOwnerName,                                                    final List<HttpResource> resources);1540847035;Adds the {@code resources} necessary for checking and publishing monitoring pipelines.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configurePipelineResources(final Config config, final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final TimeValue pipelineTimeout =_                    PIPELINE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___            _            for (final String pipelineId : MonitoringTemplateUtils.PIPELINE_IDS) {_                final String pipelineName = MonitoringTemplateUtils.pipelineName(pipelineId)__                _                final Supplier<byte[]> pipeline =_                        () -> BytesReference.toBytes(BytesReference.bytes(MonitoringTemplateUtils.loadPipeline(pipelineId,_                                                XContentType.JSON)))___                resources.add(new PipelineHttpResource(resourceOwnerName, pipelineTimeout, pipelineName, pipeline))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,pipelines,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,pipeline,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,pipeline,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,pipeline,id,monitoring,template,utils,final,string,pipeline,name,monitoring,template,utils,pipeline,name,pipeline,id,final,supplier,byte,pipeline,bytes,reference,to,bytes,bytes,reference,bytes,monitoring,template,utils,load,pipeline,pipeline,id,xcontent,type,json,resources,add,new,pipeline,http,resource,resource,owner,name,pipeline,timeout,pipeline,name,pipeline
HttpExporter -> private static void configurePipelineResources(final Config config, final String resourceOwnerName,                                                    final List<HttpResource> resources);1541592065;Adds the {@code resources} necessary for checking and publishing monitoring pipelines.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configurePipelineResources(final Config config, final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final TimeValue pipelineTimeout =_                    PIPELINE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___            _            for (final String pipelineId : MonitoringTemplateUtils.PIPELINE_IDS) {_                final String pipelineName = MonitoringTemplateUtils.pipelineName(pipelineId)__                _                final Supplier<byte[]> pipeline =_                        () -> BytesReference.toBytes(BytesReference.bytes(MonitoringTemplateUtils.loadPipeline(pipelineId,_                                                XContentType.JSON)))___                resources.add(new PipelineHttpResource(resourceOwnerName, pipelineTimeout, pipelineName, pipeline))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,pipelines,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,pipeline,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,pipeline,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,pipeline,id,monitoring,template,utils,final,string,pipeline,name,monitoring,template,utils,pipeline,name,pipeline,id,final,supplier,byte,pipeline,bytes,reference,to,bytes,bytes,reference,bytes,monitoring,template,utils,load,pipeline,pipeline,id,xcontent,type,json,resources,add,new,pipeline,http,resource,resource,owner,name,pipeline,timeout,pipeline,name,pipeline
HttpExporter -> private static void configurePipelineResources(final Config config, final String resourceOwnerName,                                                    final List<HttpResource> resources);1543346894;Adds the {@code resources} necessary for checking and publishing monitoring pipelines.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configurePipelineResources(final Config config, final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final TimeValue pipelineTimeout =_                    PIPELINE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___            _            for (final String pipelineId : MonitoringTemplateUtils.PIPELINE_IDS) {_                final String pipelineName = MonitoringTemplateUtils.pipelineName(pipelineId)__                _                final Supplier<byte[]> pipeline =_                        () -> BytesReference.toBytes(BytesReference.bytes(MonitoringTemplateUtils.loadPipeline(pipelineId,_                                                XContentType.JSON)))___                resources.add(new PipelineHttpResource(resourceOwnerName, pipelineTimeout, pipelineName, pipeline))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,pipelines,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,pipeline,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,pipeline,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,pipeline,id,monitoring,template,utils,final,string,pipeline,name,monitoring,template,utils,pipeline,name,pipeline,id,final,supplier,byte,pipeline,bytes,reference,to,bytes,bytes,reference,bytes,monitoring,template,utils,load,pipeline,pipeline,id,xcontent,type,json,resources,add,new,pipeline,http,resource,resource,owner,name,pipeline,timeout,pipeline,name,pipeline
HttpExporter -> private static void configurePipelineResources(final Config config, final String resourceOwnerName,                                                    final List<HttpResource> resources);1549288028;Adds the {@code resources} necessary for checking and publishing monitoring pipelines.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configurePipelineResources(final Config config, final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        _        if (USE_INGEST_PIPELINE_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())) {_            final TimeValue pipelineTimeout =_                    PIPELINE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___            _            for (final String pipelineId : MonitoringTemplateUtils.PIPELINE_IDS) {_                final String pipelineName = MonitoringTemplateUtils.pipelineName(pipelineId)__                _                final Supplier<byte[]> pipeline =_                        () -> BytesReference.toBytes(BytesReference.bytes(MonitoringTemplateUtils.loadPipeline(pipelineId,_                                                XContentType.JSON)))___                resources.add(new PipelineHttpResource(resourceOwnerName, pipelineTimeout, pipelineName, pipeline))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,pipelines,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,pipeline,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,if,get,concrete,setting,for,namespace,config,name,get,config,settings,final,time,value,pipeline,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,pipeline,id,monitoring,template,utils,final,string,pipeline,name,monitoring,template,utils,pipeline,name,pipeline,id,final,supplier,byte,pipeline,bytes,reference,to,bytes,bytes,reference,bytes,monitoring,template,utils,load,pipeline,pipeline,id,xcontent,type,json,resources,add,new,pipeline,http,resource,resource,owner,name,pipeline,timeout,pipeline,name,pipeline
HttpExporter -> private static void configureHeaders(final RestClientBuilder builder, final Config config);1524684173;Configures the {@linkplain RestClientBuilder#setDefaultHeaders(Header[]) default headers} to use with <em>all</em> requests.__@param builder The REST client builder to configure_@param config The exporter's configuration_@throws SettingsException if any header is {@linkplain #BLACKLISTED_HEADERS blacklisted};private static void configureHeaders(final RestClientBuilder builder, final Config config) {_        Setting<Settings> concreteSetting = HEADERS_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings headerSettings = concreteSetting.get(config.settings())__        final Set<String> names = headerSettings.names()___        _        if (names.isEmpty()) {_            return__        }__        final List<Header> headers = new ArrayList<>()___        _        for (final String name : names) {_            if (BLACKLISTED_HEADERS.contains(name)) {_                throw new SettingsException("header cannot be overwritten via [" + concreteSetting.getKey() + name + "]")__            }__            final List<String> values = headerSettings.getAsList(name)___            if (values.isEmpty()) {_                throw new SettingsException("headers must have values, missing for setting [" + concreteSetting.getKey() + name + "]")__            }__            _            _            _            _            for (final String value : values) {_                headers.add(new BasicHeader(name, value))__            }_        }__        builder.setDefaultHeaders(headers.toArray(new Header[headers.size()]))__    };configures,the,linkplain,rest,client,builder,set,default,headers,header,default,headers,to,use,with,em,all,em,requests,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,throws,settings,exception,if,any,header,is,linkplain,blacklisted;private,static,void,configure,headers,final,rest,client,builder,builder,final,config,config,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,header,settings,concrete,setting,get,config,settings,final,set,string,names,header,settings,names,if,names,is,empty,return,final,list,header,headers,new,array,list,for,final,string,name,names,if,contains,name,throw,new,settings,exception,header,cannot,be,overwritten,via,concrete,setting,get,key,name,final,list,string,values,header,settings,get,as,list,name,if,values,is,empty,throw,new,settings,exception,headers,must,have,values,missing,for,setting,concrete,setting,get,key,name,for,final,string,value,values,headers,add,new,basic,header,name,value,builder,set,default,headers,headers,to,array,new,header,headers,size
HttpExporter -> private static void configureHeaders(final RestClientBuilder builder, final Config config);1527840262;Configures the {@linkplain RestClientBuilder#setDefaultHeaders(Header[]) default headers} to use with <em>all</em> requests.__@param builder The REST client builder to configure_@param config The exporter's configuration_@throws SettingsException if any header is {@linkplain #BLACKLISTED_HEADERS blacklisted};private static void configureHeaders(final RestClientBuilder builder, final Config config) {_        Setting<Settings> concreteSetting = HEADERS_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings headerSettings = concreteSetting.get(config.settings())__        final Set<String> names = headerSettings.names()___        _        if (names.isEmpty()) {_            return__        }__        final List<Header> headers = new ArrayList<>()___        _        for (final String name : names) {_            if (BLACKLISTED_HEADERS.contains(name)) {_                throw new SettingsException("header cannot be overwritten via [" + concreteSetting.getKey() + name + "]")__            }__            final List<String> values = headerSettings.getAsList(name)___            if (values.isEmpty()) {_                throw new SettingsException("headers must have values, missing for setting [" + concreteSetting.getKey() + name + "]")__            }__            _            _            _            _            for (final String value : values) {_                headers.add(new BasicHeader(name, value))__            }_        }__        builder.setDefaultHeaders(headers.toArray(new Header[headers.size()]))__    };configures,the,linkplain,rest,client,builder,set,default,headers,header,default,headers,to,use,with,em,all,em,requests,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,throws,settings,exception,if,any,header,is,linkplain,blacklisted;private,static,void,configure,headers,final,rest,client,builder,builder,final,config,config,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,header,settings,concrete,setting,get,config,settings,final,set,string,names,header,settings,names,if,names,is,empty,return,final,list,header,headers,new,array,list,for,final,string,name,names,if,contains,name,throw,new,settings,exception,header,cannot,be,overwritten,via,concrete,setting,get,key,name,final,list,string,values,header,settings,get,as,list,name,if,values,is,empty,throw,new,settings,exception,headers,must,have,values,missing,for,setting,concrete,setting,get,key,name,for,final,string,value,values,headers,add,new,basic,header,name,value,builder,set,default,headers,headers,to,array,new,header,headers,size
HttpExporter -> private static void configureHeaders(final RestClientBuilder builder, final Config config);1528762805;Configures the {@linkplain RestClientBuilder#setDefaultHeaders(Header[]) default headers} to use with <em>all</em> requests.__@param builder The REST client builder to configure_@param config The exporter's configuration_@throws SettingsException if any header is {@linkplain #BLACKLISTED_HEADERS blacklisted};private static void configureHeaders(final RestClientBuilder builder, final Config config) {_        Setting<Settings> concreteSetting = HEADERS_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings headerSettings = concreteSetting.get(config.settings())__        final Set<String> names = headerSettings.names()___        _        if (names.isEmpty()) {_            return__        }__        final List<Header> headers = new ArrayList<>()___        _        for (final String name : names) {_            if (BLACKLISTED_HEADERS.contains(name)) {_                throw new SettingsException("header cannot be overwritten via [" + concreteSetting.getKey() + name + "]")__            }__            final List<String> values = headerSettings.getAsList(name)___            if (values.isEmpty()) {_                throw new SettingsException("headers must have values, missing for setting [" + concreteSetting.getKey() + name + "]")__            }__            _            _            _            _            for (final String value : values) {_                headers.add(new BasicHeader(name, value))__            }_        }__        builder.setDefaultHeaders(headers.toArray(new Header[headers.size()]))__    };configures,the,linkplain,rest,client,builder,set,default,headers,header,default,headers,to,use,with,em,all,em,requests,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,throws,settings,exception,if,any,header,is,linkplain,blacklisted;private,static,void,configure,headers,final,rest,client,builder,builder,final,config,config,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,header,settings,concrete,setting,get,config,settings,final,set,string,names,header,settings,names,if,names,is,empty,return,final,list,header,headers,new,array,list,for,final,string,name,names,if,contains,name,throw,new,settings,exception,header,cannot,be,overwritten,via,concrete,setting,get,key,name,final,list,string,values,header,settings,get,as,list,name,if,values,is,empty,throw,new,settings,exception,headers,must,have,values,missing,for,setting,concrete,setting,get,key,name,for,final,string,value,values,headers,add,new,basic,header,name,value,builder,set,default,headers,headers,to,array,new,header,headers,size
HttpExporter -> private static void configureHeaders(final RestClientBuilder builder, final Config config);1531179852;Configures the {@linkplain RestClientBuilder#setDefaultHeaders(Header[]) default headers} to use with <em>all</em> requests.__@param builder The REST client builder to configure_@param config The exporter's configuration_@throws SettingsException if any header is {@linkplain #BLACKLISTED_HEADERS blacklisted};private static void configureHeaders(final RestClientBuilder builder, final Config config) {_        Setting<Settings> concreteSetting = HEADERS_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings headerSettings = concreteSetting.get(config.settings())__        final Set<String> names = headerSettings.names()___        _        if (names.isEmpty()) {_            return__        }__        final List<Header> headers = new ArrayList<>()___        _        for (final String name : names) {_            if (BLACKLISTED_HEADERS.contains(name)) {_                throw new SettingsException("header cannot be overwritten via [" + concreteSetting.getKey() + name + "]")__            }__            final List<String> values = headerSettings.getAsList(name)___            if (values.isEmpty()) {_                throw new SettingsException("headers must have values, missing for setting [" + concreteSetting.getKey() + name + "]")__            }__            _            _            _            _            for (final String value : values) {_                headers.add(new BasicHeader(name, value))__            }_        }__        builder.setDefaultHeaders(headers.toArray(new Header[headers.size()]))__    };configures,the,linkplain,rest,client,builder,set,default,headers,header,default,headers,to,use,with,em,all,em,requests,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,throws,settings,exception,if,any,header,is,linkplain,blacklisted;private,static,void,configure,headers,final,rest,client,builder,builder,final,config,config,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,header,settings,concrete,setting,get,config,settings,final,set,string,names,header,settings,names,if,names,is,empty,return,final,list,header,headers,new,array,list,for,final,string,name,names,if,contains,name,throw,new,settings,exception,header,cannot,be,overwritten,via,concrete,setting,get,key,name,final,list,string,values,header,settings,get,as,list,name,if,values,is,empty,throw,new,settings,exception,headers,must,have,values,missing,for,setting,concrete,setting,get,key,name,for,final,string,value,values,headers,add,new,basic,header,name,value,builder,set,default,headers,headers,to,array,new,header,headers,size
HttpExporter -> private static void configureHeaders(final RestClientBuilder builder, final Config config);1531729807;Configures the {@linkplain RestClientBuilder#setDefaultHeaders(Header[]) default headers} to use with <em>all</em> requests.__@param builder The REST client builder to configure_@param config The exporter's configuration_@throws SettingsException if any header is {@linkplain #BLACKLISTED_HEADERS blacklisted};private static void configureHeaders(final RestClientBuilder builder, final Config config) {_        Setting<Settings> concreteSetting = HEADERS_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings headerSettings = concreteSetting.get(config.settings())__        final Set<String> names = headerSettings.names()___        _        if (names.isEmpty()) {_            return__        }__        final List<Header> headers = new ArrayList<>()___        _        for (final String name : names) {_            if (BLACKLISTED_HEADERS.contains(name)) {_                throw new SettingsException("header cannot be overwritten via [" + concreteSetting.getKey() + name + "]")__            }__            final List<String> values = headerSettings.getAsList(name)___            if (values.isEmpty()) {_                throw new SettingsException("headers must have values, missing for setting [" + concreteSetting.getKey() + name + "]")__            }__            _            _            _            _            for (final String value : values) {_                headers.add(new BasicHeader(name, value))__            }_        }__        builder.setDefaultHeaders(headers.toArray(new Header[headers.size()]))__    };configures,the,linkplain,rest,client,builder,set,default,headers,header,default,headers,to,use,with,em,all,em,requests,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,throws,settings,exception,if,any,header,is,linkplain,blacklisted;private,static,void,configure,headers,final,rest,client,builder,builder,final,config,config,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,header,settings,concrete,setting,get,config,settings,final,set,string,names,header,settings,names,if,names,is,empty,return,final,list,header,headers,new,array,list,for,final,string,name,names,if,contains,name,throw,new,settings,exception,header,cannot,be,overwritten,via,concrete,setting,get,key,name,final,list,string,values,header,settings,get,as,list,name,if,values,is,empty,throw,new,settings,exception,headers,must,have,values,missing,for,setting,concrete,setting,get,key,name,for,final,string,value,values,headers,add,new,basic,header,name,value,builder,set,default,headers,headers,to,array,new,header,headers,size
HttpExporter -> private static void configureHeaders(final RestClientBuilder builder, final Config config);1540847035;Configures the {@linkplain RestClientBuilder#setDefaultHeaders(Header[]) default headers} to use with <em>all</em> requests.__@param builder The REST client builder to configure_@param config The exporter's configuration_@throws SettingsException if any header is {@linkplain #BLACKLISTED_HEADERS blacklisted};private static void configureHeaders(final RestClientBuilder builder, final Config config) {_        Setting<Settings> concreteSetting = HEADERS_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings headerSettings = concreteSetting.get(config.settings())__        final Set<String> names = headerSettings.names()___        _        if (names.isEmpty()) {_            return__        }__        final List<Header> headers = new ArrayList<>()___        _        for (final String name : names) {_            if (BLACKLISTED_HEADERS.contains(name)) {_                throw new SettingsException("header cannot be overwritten via [" + concreteSetting.getKey() + name + "]")__            }__            final List<String> values = headerSettings.getAsList(name)___            if (values.isEmpty()) {_                throw new SettingsException("headers must have values, missing for setting [" + concreteSetting.getKey() + name + "]")__            }__            _            _            _            _            for (final String value : values) {_                headers.add(new BasicHeader(name, value))__            }_        }__        builder.setDefaultHeaders(headers.toArray(new Header[headers.size()]))__    };configures,the,linkplain,rest,client,builder,set,default,headers,header,default,headers,to,use,with,em,all,em,requests,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,throws,settings,exception,if,any,header,is,linkplain,blacklisted;private,static,void,configure,headers,final,rest,client,builder,builder,final,config,config,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,header,settings,concrete,setting,get,config,settings,final,set,string,names,header,settings,names,if,names,is,empty,return,final,list,header,headers,new,array,list,for,final,string,name,names,if,contains,name,throw,new,settings,exception,header,cannot,be,overwritten,via,concrete,setting,get,key,name,final,list,string,values,header,settings,get,as,list,name,if,values,is,empty,throw,new,settings,exception,headers,must,have,values,missing,for,setting,concrete,setting,get,key,name,for,final,string,value,values,headers,add,new,basic,header,name,value,builder,set,default,headers,headers,to,array,new,header,headers,size
HttpExporter -> private static void configureHeaders(final RestClientBuilder builder, final Config config);1541592065;Configures the {@linkplain RestClientBuilder#setDefaultHeaders(Header[]) default headers} to use with <em>all</em> requests.__@param builder The REST client builder to configure_@param config The exporter's configuration_@throws SettingsException if any header is {@linkplain #BLACKLISTED_HEADERS blacklisted};private static void configureHeaders(final RestClientBuilder builder, final Config config) {_        Setting<Settings> concreteSetting = HEADERS_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings headerSettings = concreteSetting.get(config.settings())__        final Set<String> names = headerSettings.names()___        _        if (names.isEmpty()) {_            return__        }__        final List<Header> headers = new ArrayList<>()___        _        for (final String name : names) {_            if (BLACKLISTED_HEADERS.contains(name)) {_                throw new SettingsException("header cannot be overwritten via [" + concreteSetting.getKey() + name + "]")__            }__            final List<String> values = headerSettings.getAsList(name)___            if (values.isEmpty()) {_                throw new SettingsException("headers must have values, missing for setting [" + concreteSetting.getKey() + name + "]")__            }__            _            _            _            _            for (final String value : values) {_                headers.add(new BasicHeader(name, value))__            }_        }__        builder.setDefaultHeaders(headers.toArray(new Header[headers.size()]))__    };configures,the,linkplain,rest,client,builder,set,default,headers,header,default,headers,to,use,with,em,all,em,requests,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,throws,settings,exception,if,any,header,is,linkplain,blacklisted;private,static,void,configure,headers,final,rest,client,builder,builder,final,config,config,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,header,settings,concrete,setting,get,config,settings,final,set,string,names,header,settings,names,if,names,is,empty,return,final,list,header,headers,new,array,list,for,final,string,name,names,if,contains,name,throw,new,settings,exception,header,cannot,be,overwritten,via,concrete,setting,get,key,name,final,list,string,values,header,settings,get,as,list,name,if,values,is,empty,throw,new,settings,exception,headers,must,have,values,missing,for,setting,concrete,setting,get,key,name,for,final,string,value,values,headers,add,new,basic,header,name,value,builder,set,default,headers,headers,to,array,new,header,headers,size
HttpExporter -> private static void configureHeaders(final RestClientBuilder builder, final Config config);1543346894;Configures the {@linkplain RestClientBuilder#setDefaultHeaders(Header[]) default headers} to use with <em>all</em> requests.__@param builder The REST client builder to configure_@param config The exporter's configuration_@throws SettingsException if any header is {@linkplain #BLACKLISTED_HEADERS blacklisted};private static void configureHeaders(final RestClientBuilder builder, final Config config) {_        Setting<Settings> concreteSetting = HEADERS_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings headerSettings = concreteSetting.get(config.settings())__        final Set<String> names = headerSettings.names()___        _        if (names.isEmpty()) {_            return__        }__        final List<Header> headers = new ArrayList<>()___        _        for (final String name : names) {_            if (BLACKLISTED_HEADERS.contains(name)) {_                throw new SettingsException("header cannot be overwritten via [" + concreteSetting.getKey() + name + "]")__            }__            final List<String> values = headerSettings.getAsList(name)___            if (values.isEmpty()) {_                throw new SettingsException("headers must have values, missing for setting [" + concreteSetting.getKey() + name + "]")__            }__            _            _            _            _            for (final String value : values) {_                headers.add(new BasicHeader(name, value))__            }_        }__        builder.setDefaultHeaders(headers.toArray(new Header[headers.size()]))__    };configures,the,linkplain,rest,client,builder,set,default,headers,header,default,headers,to,use,with,em,all,em,requests,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,throws,settings,exception,if,any,header,is,linkplain,blacklisted;private,static,void,configure,headers,final,rest,client,builder,builder,final,config,config,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,header,settings,concrete,setting,get,config,settings,final,set,string,names,header,settings,names,if,names,is,empty,return,final,list,header,headers,new,array,list,for,final,string,name,names,if,contains,name,throw,new,settings,exception,header,cannot,be,overwritten,via,concrete,setting,get,key,name,final,list,string,values,header,settings,get,as,list,name,if,values,is,empty,throw,new,settings,exception,headers,must,have,values,missing,for,setting,concrete,setting,get,key,name,for,final,string,value,values,headers,add,new,basic,header,name,value,builder,set,default,headers,headers,to,array,new,header,headers,size
HttpExporter -> private static void configureHeaders(final RestClientBuilder builder, final Config config);1549288028;Configures the {@linkplain RestClientBuilder#setDefaultHeaders(Header[]) default headers} to use with <em>all</em> requests.__@param builder The REST client builder to configure_@param config The exporter's configuration_@throws SettingsException if any header is {@linkplain #BLACKLISTED_HEADERS blacklisted};private static void configureHeaders(final RestClientBuilder builder, final Config config) {_        Setting<Settings> concreteSetting = HEADERS_SETTING.getConcreteSettingForNamespace(config.name())__        final Settings headerSettings = concreteSetting.get(config.settings())__        final Set<String> names = headerSettings.names()___        _        if (names.isEmpty()) {_            return__        }__        final List<Header> headers = new ArrayList<>()___        _        for (final String name : names) {_            if (BLACKLISTED_HEADERS.contains(name)) {_                throw new SettingsException("header cannot be overwritten via [" + concreteSetting.getKey() + name + "]")__            }__            final List<String> values = headerSettings.getAsList(name)___            if (values.isEmpty()) {_                throw new SettingsException("headers must have values, missing for setting [" + concreteSetting.getKey() + name + "]")__            }__            _            _            _            _            for (final String value : values) {_                headers.add(new BasicHeader(name, value))__            }_        }__        builder.setDefaultHeaders(headers.toArray(new Header[headers.size()]))__    };configures,the,linkplain,rest,client,builder,set,default,headers,header,default,headers,to,use,with,em,all,em,requests,param,builder,the,rest,client,builder,to,configure,param,config,the,exporter,s,configuration,throws,settings,exception,if,any,header,is,linkplain,blacklisted;private,static,void,configure,headers,final,rest,client,builder,builder,final,config,config,setting,settings,concrete,setting,get,concrete,setting,for,namespace,config,name,final,settings,header,settings,concrete,setting,get,config,settings,final,set,string,names,header,settings,names,if,names,is,empty,return,final,list,header,headers,new,array,list,for,final,string,name,names,if,contains,name,throw,new,settings,exception,header,cannot,be,overwritten,via,concrete,setting,get,key,name,final,list,string,values,header,settings,get,as,list,name,if,values,is,empty,throw,new,settings,exception,headers,must,have,values,missing,for,setting,concrete,setting,get,key,name,for,final,string,value,values,headers,add,new,basic,header,name,value,builder,set,default,headers,headers,to,array,new,header,headers,size
HttpExporter -> public static void registerSettingValidators(ClusterService clusterService);1531729807;Adds a validator for the {@link #SSL_SETTING} to prevent dynamic updates when secure settings also exist within that setting_groups (ssl context)._Because it is not possible to re-read the secure settings during a dynamic update, we cannot rebuild the {@link SSLIOSessionStrategy}_(see {@link #configureSecurity(RestClientBuilder, Config, SSLService)} if this exporter has been configured with secure settings;public static void registerSettingValidators(ClusterService clusterService) {_        clusterService.getClusterSettings().addAffixUpdateConsumer(SSL_SETTING,_            (ignoreKey, ignoreSettings) -> {_            _            },_            (namespace, settings) -> {_                final List<String> secureSettings = SSLConfigurationSettings.withoutPrefix()_                    .getSecureSettingsInUse(settings)_                    .stream()_                    .map(Setting::getKey)_                    .collect(Collectors.toList())__                if (secureSettings.isEmpty() == false) {_                    throw new IllegalStateException("Cannot dynamically update SSL settings for the exporter [" + namespace_                        + "] as it depends on the secure setting(s) [" + Strings.collectionToCommaDelimitedString(secureSettings) + "]")__                }_            })__    };adds,a,validator,for,the,link,to,prevent,dynamic,updates,when,secure,settings,also,exist,within,that,setting,groups,ssl,context,because,it,is,not,possible,to,re,read,the,secure,settings,during,a,dynamic,update,we,cannot,rebuild,the,link,ssliosession,strategy,see,link,configure,security,rest,client,builder,config,sslservice,if,this,exporter,has,been,configured,with,secure,settings;public,static,void,register,setting,validators,cluster,service,cluster,service,cluster,service,get,cluster,settings,add,affix,update,consumer,ignore,key,ignore,settings,namespace,settings,final,list,string,secure,settings,sslconfiguration,settings,without,prefix,get,secure,settings,in,use,settings,stream,map,setting,get,key,collect,collectors,to,list,if,secure,settings,is,empty,false,throw,new,illegal,state,exception,cannot,dynamically,update,ssl,settings,for,the,exporter,namespace,as,it,depends,on,the,secure,setting,s,strings,collection,to,comma,delimited,string,secure,settings
HttpExporter -> public static void registerSettingValidators(ClusterService clusterService);1540847035;Adds a validator for the {@link #SSL_SETTING} to prevent dynamic updates when secure settings also exist within that setting_groups (ssl context)._Because it is not possible to re-read the secure settings during a dynamic update, we cannot rebuild the {@link SSLIOSessionStrategy}_(see {@link #configureSecurity(RestClientBuilder, Config, SSLService)} if this exporter has been configured with secure settings;public static void registerSettingValidators(ClusterService clusterService) {_        clusterService.getClusterSettings().addAffixUpdateConsumer(SSL_SETTING,_            (ignoreKey, ignoreSettings) -> {_            _            },_            (namespace, settings) -> {_                final List<String> secureSettings = SSLConfigurationSettings.withoutPrefix()_                    .getSecureSettingsInUse(settings)_                    .stream()_                    .map(Setting::getKey)_                    .collect(Collectors.toList())__                if (secureSettings.isEmpty() == false) {_                    throw new IllegalStateException("Cannot dynamically update SSL settings for the exporter [" + namespace_                        + "] as it depends on the secure setting(s) [" + Strings.collectionToCommaDelimitedString(secureSettings) + "]")__                }_            })__    };adds,a,validator,for,the,link,to,prevent,dynamic,updates,when,secure,settings,also,exist,within,that,setting,groups,ssl,context,because,it,is,not,possible,to,re,read,the,secure,settings,during,a,dynamic,update,we,cannot,rebuild,the,link,ssliosession,strategy,see,link,configure,security,rest,client,builder,config,sslservice,if,this,exporter,has,been,configured,with,secure,settings;public,static,void,register,setting,validators,cluster,service,cluster,service,cluster,service,get,cluster,settings,add,affix,update,consumer,ignore,key,ignore,settings,namespace,settings,final,list,string,secure,settings,sslconfiguration,settings,without,prefix,get,secure,settings,in,use,settings,stream,map,setting,get,key,collect,collectors,to,list,if,secure,settings,is,empty,false,throw,new,illegal,state,exception,cannot,dynamically,update,ssl,settings,for,the,exporter,namespace,as,it,depends,on,the,secure,setting,s,strings,collection,to,comma,delimited,string,secure,settings
HttpExporter -> public static void registerSettingValidators(ClusterService clusterService);1541592065;Adds a validator for the {@link #SSL_SETTING} to prevent dynamic updates when secure settings also exist within that setting_groups (ssl context)._Because it is not possible to re-read the secure settings during a dynamic update, we cannot rebuild the {@link SSLIOSessionStrategy}_(see {@link #configureSecurity(RestClientBuilder, Config, SSLService)} if this exporter has been configured with secure settings;public static void registerSettingValidators(ClusterService clusterService) {_        clusterService.getClusterSettings().addAffixUpdateConsumer(SSL_SETTING,_            (ignoreKey, ignoreSettings) -> {_            _            },_            (namespace, settings) -> {_                final List<String> secureSettings = SSLConfigurationSettings.withoutPrefix()_                    .getSecureSettingsInUse(settings)_                    .stream()_                    .map(Setting::getKey)_                    .collect(Collectors.toList())__                if (secureSettings.isEmpty() == false) {_                    throw new IllegalStateException("Cannot dynamically update SSL settings for the exporter [" + namespace_                        + "] as it depends on the secure setting(s) [" + Strings.collectionToCommaDelimitedString(secureSettings) + "]")__                }_            })__    };adds,a,validator,for,the,link,to,prevent,dynamic,updates,when,secure,settings,also,exist,within,that,setting,groups,ssl,context,because,it,is,not,possible,to,re,read,the,secure,settings,during,a,dynamic,update,we,cannot,rebuild,the,link,ssliosession,strategy,see,link,configure,security,rest,client,builder,config,sslservice,if,this,exporter,has,been,configured,with,secure,settings;public,static,void,register,setting,validators,cluster,service,cluster,service,cluster,service,get,cluster,settings,add,affix,update,consumer,ignore,key,ignore,settings,namespace,settings,final,list,string,secure,settings,sslconfiguration,settings,without,prefix,get,secure,settings,in,use,settings,stream,map,setting,get,key,collect,collectors,to,list,if,secure,settings,is,empty,false,throw,new,illegal,state,exception,cannot,dynamically,update,ssl,settings,for,the,exporter,namespace,as,it,depends,on,the,secure,setting,s,strings,collection,to,comma,delimited,string,secure,settings
HttpExporter -> public static void registerSettingValidators(ClusterService clusterService);1543346894;Adds a validator for the {@link #SSL_SETTING} to prevent dynamic updates when secure settings also exist within that setting_groups (ssl context)._Because it is not possible to re-read the secure settings during a dynamic update, we cannot rebuild the {@link SSLIOSessionStrategy}_(see {@link #configureSecurity(RestClientBuilder, Config, SSLService)} if this exporter has been configured with secure settings;public static void registerSettingValidators(ClusterService clusterService) {_        clusterService.getClusterSettings().addAffixUpdateConsumer(SSL_SETTING,_            (ignoreKey, ignoreSettings) -> {_            _            },_            (namespace, settings) -> {_                final List<String> secureSettings = SSLConfigurationSettings.withoutPrefix()_                    .getSecureSettingsInUse(settings)_                    .stream()_                    .map(Setting::getKey)_                    .collect(Collectors.toList())__                if (secureSettings.isEmpty() == false) {_                    throw new IllegalStateException("Cannot dynamically update SSL settings for the exporter [" + namespace_                        + "] as it depends on the secure setting(s) [" + Strings.collectionToCommaDelimitedString(secureSettings) + "]")__                }_            })__    };adds,a,validator,for,the,link,to,prevent,dynamic,updates,when,secure,settings,also,exist,within,that,setting,groups,ssl,context,because,it,is,not,possible,to,re,read,the,secure,settings,during,a,dynamic,update,we,cannot,rebuild,the,link,ssliosession,strategy,see,link,configure,security,rest,client,builder,config,sslservice,if,this,exporter,has,been,configured,with,secure,settings;public,static,void,register,setting,validators,cluster,service,cluster,service,cluster,service,get,cluster,settings,add,affix,update,consumer,ignore,key,ignore,settings,namespace,settings,final,list,string,secure,settings,sslconfiguration,settings,without,prefix,get,secure,settings,in,use,settings,stream,map,setting,get,key,collect,collectors,to,list,if,secure,settings,is,empty,false,throw,new,illegal,state,exception,cannot,dynamically,update,ssl,settings,for,the,exporter,namespace,as,it,depends,on,the,secure,setting,s,strings,collection,to,comma,delimited,string,secure,settings
HttpExporter -> public static void registerSettingValidators(ClusterService clusterService);1549288028;Adds a validator for the {@link #SSL_SETTING} to prevent dynamic updates when secure settings also exist within that setting_groups (ssl context)._Because it is not possible to re-read the secure settings during a dynamic update, we cannot rebuild the {@link SSLIOSessionStrategy}_(see {@link #configureSecurity(RestClientBuilder, Config, SSLService)} if this exporter has been configured with secure settings;public static void registerSettingValidators(ClusterService clusterService) {_        clusterService.getClusterSettings().addAffixUpdateConsumer(SSL_SETTING,_            (ignoreKey, ignoreSettings) -> {_            _            },_            (namespace, settings) -> {_                final List<String> secureSettings = SSLConfigurationSettings.withoutPrefix()_                    .getSecureSettingsInUse(settings)_                    .stream()_                    .map(Setting::getKey)_                    .collect(Collectors.toList())__                if (secureSettings.isEmpty() == false) {_                    throw new IllegalStateException("Cannot dynamically update SSL settings for the exporter [" + namespace_                        + "] as it depends on the secure setting(s) [" + Strings.collectionToCommaDelimitedString(secureSettings) + "]")__                }_            })__    };adds,a,validator,for,the,link,to,prevent,dynamic,updates,when,secure,settings,also,exist,within,that,setting,groups,ssl,context,because,it,is,not,possible,to,re,read,the,secure,settings,during,a,dynamic,update,we,cannot,rebuild,the,link,ssliosession,strategy,see,link,configure,security,rest,client,builder,config,sslservice,if,this,exporter,has,been,configured,with,secure,settings;public,static,void,register,setting,validators,cluster,service,cluster,service,cluster,service,get,cluster,settings,add,affix,update,consumer,ignore,key,ignore,settings,namespace,settings,final,list,string,secure,settings,sslconfiguration,settings,without,prefix,get,secure,settings,in,use,settings,stream,map,setting,get,key,collect,collectors,to,list,if,secure,settings,is,empty,false,throw,new,illegal,state,exception,cannot,dynamically,update,ssl,settings,for,the,exporter,namespace,as,it,depends,on,the,secure,setting,s,strings,collection,to,comma,delimited,string,secure,settings
HttpExporter -> public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext);1524684173;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting is malformed;public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext) {_        this(config, sslService, threadContext, new NodeFailureListener(), createResources(config))__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,is,malformed;public,http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,this,config,ssl,service,thread,context,new,node,failure,listener,create,resources,config
HttpExporter -> public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext);1527840262;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting is malformed;public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext) {_        this(config, sslService, threadContext, new NodeFailureListener(), createResources(config))__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,is,malformed;public,http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,this,config,ssl,service,thread,context,new,node,failure,listener,create,resources,config
HttpExporter -> public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext);1528762805;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting is malformed;public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext) {_        this(config, sslService, threadContext, new NodeFailureListener(), createResources(config))__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,is,malformed;public,http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,this,config,ssl,service,thread,context,new,node,failure,listener,create,resources,config
HttpExporter -> public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext);1531179852;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting is malformed;public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext) {_        this(config, sslService, threadContext, new NodeFailureListener(), createResources(config))__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,is,malformed;public,http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,this,config,ssl,service,thread,context,new,node,failure,listener,create,resources,config
HttpExporter -> public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext);1531729807;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting is malformed;public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext) {_        this(config, sslService, threadContext, new NodeFailureListener(), createResources(config))__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,is,malformed;public,http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,this,config,ssl,service,thread,context,new,node,failure,listener,create,resources,config
HttpExporter -> public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext);1540847035;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting is malformed;public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext) {_        this(config, sslService, threadContext, new NodeFailureListener(), createResources(config))__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,is,malformed;public,http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,this,config,ssl,service,thread,context,new,node,failure,listener,create,resources,config
HttpExporter -> public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext);1541592065;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting is malformed;public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext) {_        this(config, sslService, threadContext, new NodeFailureListener(), createResources(config))__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,is,malformed;public,http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,this,config,ssl,service,thread,context,new,node,failure,listener,create,resources,config
HttpExporter -> public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext);1543346894;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting is malformed;public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext) {_        this(config, sslService, threadContext, new NodeFailureListener(), createResources(config))__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,is,malformed;public,http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,this,config,ssl,service,thread,context,new,node,failure,listener,create,resources,config
HttpExporter -> public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext);1549288028;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@throws SettingsException if any setting is malformed;public HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext) {_        this(config, sslService, threadContext, new NodeFailureListener(), createResources(config))__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,throws,settings,exception,if,any,setting,is,malformed;public,http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,this,config,ssl,service,thread,context,new,node,failure,listener,create,resources,config
HttpExporter -> HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1524684173;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, client, createSniffer(config, client, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,client,create,sniffer,config,client,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1527840262;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, client, createSniffer(config, client, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,client,create,sniffer,config,client,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1528762805;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, client, createSniffer(config, client, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,client,create,sniffer,config,client,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1531179852;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, client, createSniffer(config, client, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,client,create,sniffer,config,client,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1531729807;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, client, createSniffer(config, client, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,client,create,sniffer,config,client,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1540847035;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, client, createSniffer(config, client, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,client,create,sniffer,config,client,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1541592065;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, client, createSniffer(config, client, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,client,create,sniffer,config,client,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1543346894;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, client, createSniffer(config, client, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,client,create,sniffer,config,client,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1549288028;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param client The REST Client used to make all requests to the remote Elasticsearch cluster_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final RestClient client, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, client, createSniffer(config, client, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,client,the,rest,client,used,to,make,all,requests,to,the,remote,elasticsearch,cluster,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,rest,client,client,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,client,create,sniffer,config,client,listener,thread,context,listener,resource
HttpExporter -> private static void configureTemplateResources(final Config config,                                                    final String resourceOwnerName,                                                    final List<HttpResource> resources);1524684173;Adds the {@code resources} necessary for checking and publishing monitoring templates.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureTemplateResources(final Config config,_                                                   final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        final TimeValue templateTimeout =_                TEMPLATE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        for (final String templateId : MonitoringTemplateUtils.TEMPLATE_IDS) {_            final String templateName = MonitoringTemplateUtils.templateName(templateId)__            final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.loadTemplate(templateId)___            resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__        }__        _        boolean createLegacyTemplates =_                TEMPLATE_CREATE_LEGACY_VERSIONS_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (createLegacyTemplates) {_            for (final String templateId : MonitoringTemplateUtils.OLD_TEMPLATE_IDS) {_                final String templateName = MonitoringTemplateUtils.oldTemplateName(templateId)__                final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.createEmptyTemplate(templateId)___                resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,templates,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,template,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,final,time,value,template,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,load,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader,boolean,create,legacy,templates,get,concrete,setting,for,namespace,config,name,get,config,settings,if,create,legacy,templates,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,old,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,create,empty,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader
HttpExporter -> private static void configureTemplateResources(final Config config,                                                    final String resourceOwnerName,                                                    final List<HttpResource> resources);1527840262;Adds the {@code resources} necessary for checking and publishing monitoring templates.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureTemplateResources(final Config config,_                                                   final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        final TimeValue templateTimeout =_                TEMPLATE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        for (final String templateId : MonitoringTemplateUtils.TEMPLATE_IDS) {_            final String templateName = MonitoringTemplateUtils.templateName(templateId)__            final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.loadTemplate(templateId)___            resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__        }__        _        boolean createLegacyTemplates =_                TEMPLATE_CREATE_LEGACY_VERSIONS_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (createLegacyTemplates) {_            for (final String templateId : MonitoringTemplateUtils.OLD_TEMPLATE_IDS) {_                final String templateName = MonitoringTemplateUtils.oldTemplateName(templateId)__                final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.createEmptyTemplate(templateId)___                resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,templates,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,template,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,final,time,value,template,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,load,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader,boolean,create,legacy,templates,get,concrete,setting,for,namespace,config,name,get,config,settings,if,create,legacy,templates,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,old,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,create,empty,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader
HttpExporter -> private static void configureTemplateResources(final Config config,                                                    final String resourceOwnerName,                                                    final List<HttpResource> resources);1528762805;Adds the {@code resources} necessary for checking and publishing monitoring templates.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureTemplateResources(final Config config,_                                                   final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        final TimeValue templateTimeout =_                TEMPLATE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        for (final String templateId : MonitoringTemplateUtils.TEMPLATE_IDS) {_            final String templateName = MonitoringTemplateUtils.templateName(templateId)__            final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.loadTemplate(templateId)___            resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__        }__        _        boolean createLegacyTemplates =_                TEMPLATE_CREATE_LEGACY_VERSIONS_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (createLegacyTemplates) {_            for (final String templateId : MonitoringTemplateUtils.OLD_TEMPLATE_IDS) {_                final String templateName = MonitoringTemplateUtils.oldTemplateName(templateId)__                final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.createEmptyTemplate(templateId)___                resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,templates,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,template,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,final,time,value,template,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,load,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader,boolean,create,legacy,templates,get,concrete,setting,for,namespace,config,name,get,config,settings,if,create,legacy,templates,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,old,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,create,empty,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader
HttpExporter -> private static void configureTemplateResources(final Config config,                                                    final String resourceOwnerName,                                                    final List<HttpResource> resources);1531179852;Adds the {@code resources} necessary for checking and publishing monitoring templates.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureTemplateResources(final Config config,_                                                   final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        final TimeValue templateTimeout =_                TEMPLATE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        for (final String templateId : MonitoringTemplateUtils.TEMPLATE_IDS) {_            final String templateName = MonitoringTemplateUtils.templateName(templateId)__            final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.loadTemplate(templateId)___            resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__        }__        _        boolean createLegacyTemplates =_                TEMPLATE_CREATE_LEGACY_VERSIONS_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (createLegacyTemplates) {_            for (final String templateId : MonitoringTemplateUtils.OLD_TEMPLATE_IDS) {_                final String templateName = MonitoringTemplateUtils.oldTemplateName(templateId)__                final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.createEmptyTemplate(templateId)___                resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,templates,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,template,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,final,time,value,template,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,load,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader,boolean,create,legacy,templates,get,concrete,setting,for,namespace,config,name,get,config,settings,if,create,legacy,templates,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,old,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,create,empty,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader
HttpExporter -> private static void configureTemplateResources(final Config config,                                                    final String resourceOwnerName,                                                    final List<HttpResource> resources);1531729807;Adds the {@code resources} necessary for checking and publishing monitoring templates.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureTemplateResources(final Config config,_                                                   final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        final TimeValue templateTimeout =_                TEMPLATE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        for (final String templateId : MonitoringTemplateUtils.TEMPLATE_IDS) {_            final String templateName = MonitoringTemplateUtils.templateName(templateId)__            final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.loadTemplate(templateId)___            resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__        }__        _        boolean createLegacyTemplates =_                TEMPLATE_CREATE_LEGACY_VERSIONS_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (createLegacyTemplates) {_            for (final String templateId : MonitoringTemplateUtils.OLD_TEMPLATE_IDS) {_                final String templateName = MonitoringTemplateUtils.oldTemplateName(templateId)__                final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.createEmptyTemplate(templateId)___                resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,templates,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,template,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,final,time,value,template,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,load,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader,boolean,create,legacy,templates,get,concrete,setting,for,namespace,config,name,get,config,settings,if,create,legacy,templates,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,old,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,create,empty,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader
HttpExporter -> private static void configureTemplateResources(final Config config,                                                    final String resourceOwnerName,                                                    final List<HttpResource> resources);1540847035;Adds the {@code resources} necessary for checking and publishing monitoring templates.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureTemplateResources(final Config config,_                                                   final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        final TimeValue templateTimeout =_                TEMPLATE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        for (final String templateId : MonitoringTemplateUtils.TEMPLATE_IDS) {_            final String templateName = MonitoringTemplateUtils.templateName(templateId)__            final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.loadTemplate(templateId)___            resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__        }__        _        boolean createLegacyTemplates =_                TEMPLATE_CREATE_LEGACY_VERSIONS_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (createLegacyTemplates) {_            for (final String templateId : MonitoringTemplateUtils.OLD_TEMPLATE_IDS) {_                final String templateName = MonitoringTemplateUtils.oldTemplateName(templateId)__                final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.createEmptyTemplate(templateId)___                resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,templates,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,template,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,final,time,value,template,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,load,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader,boolean,create,legacy,templates,get,concrete,setting,for,namespace,config,name,get,config,settings,if,create,legacy,templates,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,old,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,create,empty,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader
HttpExporter -> private static void configureTemplateResources(final Config config,                                                    final String resourceOwnerName,                                                    final List<HttpResource> resources);1541592065;Adds the {@code resources} necessary for checking and publishing monitoring templates.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureTemplateResources(final Config config,_                                                   final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        final TimeValue templateTimeout =_                TEMPLATE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        for (final String templateId : MonitoringTemplateUtils.TEMPLATE_IDS) {_            final String templateName = MonitoringTemplateUtils.templateName(templateId)__            final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.loadTemplate(templateId)___            resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__        }__        _        boolean createLegacyTemplates =_                TEMPLATE_CREATE_LEGACY_VERSIONS_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (createLegacyTemplates) {_            for (final String templateId : MonitoringTemplateUtils.OLD_TEMPLATE_IDS) {_                final String templateName = MonitoringTemplateUtils.oldTemplateName(templateId)__                final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.createEmptyTemplate(templateId)___                resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,templates,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,template,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,final,time,value,template,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,load,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader,boolean,create,legacy,templates,get,concrete,setting,for,namespace,config,name,get,config,settings,if,create,legacy,templates,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,old,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,create,empty,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader
HttpExporter -> private static void configureTemplateResources(final Config config,                                                    final String resourceOwnerName,                                                    final List<HttpResource> resources);1543346894;Adds the {@code resources} necessary for checking and publishing monitoring templates.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureTemplateResources(final Config config,_                                                   final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        final TimeValue templateTimeout =_                TEMPLATE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        for (final String templateId : MonitoringTemplateUtils.TEMPLATE_IDS) {_            final String templateName = MonitoringTemplateUtils.templateName(templateId)__            final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.loadTemplate(templateId)___            resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__        }__        _        boolean createLegacyTemplates =_                TEMPLATE_CREATE_LEGACY_VERSIONS_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (createLegacyTemplates) {_            for (final String templateId : MonitoringTemplateUtils.OLD_TEMPLATE_IDS) {_                final String templateName = MonitoringTemplateUtils.oldTemplateName(templateId)__                final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.createEmptyTemplate(templateId)___                resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,templates,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,template,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,final,time,value,template,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,load,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader,boolean,create,legacy,templates,get,concrete,setting,for,namespace,config,name,get,config,settings,if,create,legacy,templates,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,old,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,create,empty,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader
HttpExporter -> private static void configureTemplateResources(final Config config,                                                    final String resourceOwnerName,                                                    final List<HttpResource> resources);1549288028;Adds the {@code resources} necessary for checking and publishing monitoring templates.__@param config The HTTP Exporter's configuration_@param resourceOwnerName The resource owner name to display for any logging messages._@param resources The resources to add too.;private static void configureTemplateResources(final Config config,_                                                   final String resourceOwnerName,_                                                   final List<HttpResource> resources) {_        final TimeValue templateTimeout =_                TEMPLATE_CHECK_TIMEOUT_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        _        for (final String templateId : MonitoringTemplateUtils.TEMPLATE_IDS) {_            final String templateName = MonitoringTemplateUtils.templateName(templateId)__            final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.loadTemplate(templateId)___            resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__        }__        _        boolean createLegacyTemplates =_                TEMPLATE_CREATE_LEGACY_VERSIONS_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        if (createLegacyTemplates) {_            for (final String templateId : MonitoringTemplateUtils.OLD_TEMPLATE_IDS) {_                final String templateName = MonitoringTemplateUtils.oldTemplateName(templateId)__                final Supplier<String> templateLoader = () -> MonitoringTemplateUtils.createEmptyTemplate(templateId)___                resources.add(new TemplateHttpResource(resourceOwnerName, templateTimeout, templateName, templateLoader))__            }_        }_    };adds,the,code,resources,necessary,for,checking,and,publishing,monitoring,templates,param,config,the,http,exporter,s,configuration,param,resource,owner,name,the,resource,owner,name,to,display,for,any,logging,messages,param,resources,the,resources,to,add,too;private,static,void,configure,template,resources,final,config,config,final,string,resource,owner,name,final,list,http,resource,resources,final,time,value,template,timeout,get,concrete,setting,for,namespace,config,name,get,config,settings,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,load,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader,boolean,create,legacy,templates,get,concrete,setting,for,namespace,config,name,get,config,settings,if,create,legacy,templates,for,final,string,template,id,monitoring,template,utils,final,string,template,name,monitoring,template,utils,old,template,name,template,id,final,supplier,string,template,loader,monitoring,template,utils,create,empty,template,template,id,resources,add,new,template,http,resource,resource,owner,name,template,timeout,template,name,template,loader
HttpExporter -> private static HttpHost[] createHosts(final Config config);1524684173;Create the {@link HttpHost}s that will be connected too.__@param config The exporter's configuration_@return Never {@code null} or empty._@throws SettingsException if any setting is malformed or if no host is set;private static HttpHost[] createHosts(final Config config) {_        final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        String configKey = HOST_SETTING.getConcreteSettingForNamespace(config.name()).getKey()___        if (hosts.isEmpty()) {_            throw new SettingsException("missing required setting [" + configKey + "]")__        }__        final List<HttpHost> httpHosts = new ArrayList<>(hosts.size())__        boolean httpHostFound = false__        boolean httpsHostFound = false___        _        for (final String host : hosts) {_            final HttpHost httpHost___            try {_                httpHost = HttpHostBuilder.builder(host).build()__            } catch (IllegalArgumentException e) {_                throw new SettingsException("[" + configKey + "] invalid host: [" + host + "]", e)__            }__            if ("http".equals(httpHost.getSchemeName())) {_                httpHostFound = true__            } else {_                httpsHostFound = true__            }__            _            if (httpHostFound && httpsHostFound) {_                throw new SettingsException("[" + configKey + "] must use a consistent scheme: http or https")__            }__            httpHosts.add(httpHost)__        }__        logger.debug("exporter [{}] using hosts {}", config.name(), hosts)___        return httpHosts.toArray(new HttpHost[httpHosts.size()])__    };create,the,link,http,host,s,that,will,be,connected,too,param,config,the,exporter,s,configuration,return,never,code,null,or,empty,throws,settings,exception,if,any,setting,is,malformed,or,if,no,host,is,set;private,static,http,host,create,hosts,final,config,config,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,string,config,key,get,concrete,setting,for,namespace,config,name,get,key,if,hosts,is,empty,throw,new,settings,exception,missing,required,setting,config,key,final,list,http,host,http,hosts,new,array,list,hosts,size,boolean,http,host,found,false,boolean,https,host,found,false,for,final,string,host,hosts,final,http,host,http,host,try,http,host,http,host,builder,builder,host,build,catch,illegal,argument,exception,e,throw,new,settings,exception,config,key,invalid,host,host,e,if,http,equals,http,host,get,scheme,name,http,host,found,true,else,https,host,found,true,if,http,host,found,https,host,found,throw,new,settings,exception,config,key,must,use,a,consistent,scheme,http,or,https,http,hosts,add,http,host,logger,debug,exporter,using,hosts,config,name,hosts,return,http,hosts,to,array,new,http,host,http,hosts,size
HttpExporter -> private static HttpHost[] createHosts(final Config config);1527840262;Create the {@link HttpHost}s that will be connected too.__@param config The exporter's configuration_@return Never {@code null} or empty._@throws SettingsException if any setting is malformed or if no host is set;private static HttpHost[] createHosts(final Config config) {_        final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        String configKey = HOST_SETTING.getConcreteSettingForNamespace(config.name()).getKey()___        if (hosts.isEmpty()) {_            throw new SettingsException("missing required setting [" + configKey + "]")__        }__        final List<HttpHost> httpHosts = new ArrayList<>(hosts.size())__        boolean httpHostFound = false__        boolean httpsHostFound = false___        _        for (final String host : hosts) {_            final HttpHost httpHost___            try {_                httpHost = HttpHostBuilder.builder(host).build()__            } catch (IllegalArgumentException e) {_                throw new SettingsException("[" + configKey + "] invalid host: [" + host + "]", e)__            }__            if ("http".equals(httpHost.getSchemeName())) {_                httpHostFound = true__            } else {_                httpsHostFound = true__            }__            _            if (httpHostFound && httpsHostFound) {_                throw new SettingsException("[" + configKey + "] must use a consistent scheme: http or https")__            }__            httpHosts.add(httpHost)__        }__        logger.debug("exporter [{}] using hosts {}", config.name(), hosts)___        return httpHosts.toArray(new HttpHost[httpHosts.size()])__    };create,the,link,http,host,s,that,will,be,connected,too,param,config,the,exporter,s,configuration,return,never,code,null,or,empty,throws,settings,exception,if,any,setting,is,malformed,or,if,no,host,is,set;private,static,http,host,create,hosts,final,config,config,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,string,config,key,get,concrete,setting,for,namespace,config,name,get,key,if,hosts,is,empty,throw,new,settings,exception,missing,required,setting,config,key,final,list,http,host,http,hosts,new,array,list,hosts,size,boolean,http,host,found,false,boolean,https,host,found,false,for,final,string,host,hosts,final,http,host,http,host,try,http,host,http,host,builder,builder,host,build,catch,illegal,argument,exception,e,throw,new,settings,exception,config,key,invalid,host,host,e,if,http,equals,http,host,get,scheme,name,http,host,found,true,else,https,host,found,true,if,http,host,found,https,host,found,throw,new,settings,exception,config,key,must,use,a,consistent,scheme,http,or,https,http,hosts,add,http,host,logger,debug,exporter,using,hosts,config,name,hosts,return,http,hosts,to,array,new,http,host,http,hosts,size
HttpExporter -> private static HttpHost[] createHosts(final Config config);1528762805;Create the {@link HttpHost}s that will be connected too.__@param config The exporter's configuration_@return Never {@code null} or empty._@throws SettingsException if any setting is malformed or if no host is set;private static HttpHost[] createHosts(final Config config) {_        final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())___        String configKey = HOST_SETTING.getConcreteSettingForNamespace(config.name()).getKey()___        if (hosts.isEmpty()) {_            throw new SettingsException("missing required setting [" + configKey + "]")__        }__        final List<HttpHost> httpHosts = new ArrayList<>(hosts.size())__        boolean httpHostFound = false__        boolean httpsHostFound = false___        _        for (final String host : hosts) {_            final HttpHost httpHost___            try {_                httpHost = HttpHostBuilder.builder(host).build()__            } catch (IllegalArgumentException e) {_                throw new SettingsException("[" + configKey + "] invalid host: [" + host + "]", e)__            }__            if ("http".equals(httpHost.getSchemeName())) {_                httpHostFound = true__            } else {_                httpsHostFound = true__            }__            _            if (httpHostFound && httpsHostFound) {_                throw new SettingsException("[" + configKey + "] must use a consistent scheme: http or https")__            }__            httpHosts.add(httpHost)__        }__        logger.debug("exporter [{}] using hosts {}", config.name(), hosts)___        return httpHosts.toArray(new HttpHost[httpHosts.size()])__    };create,the,link,http,host,s,that,will,be,connected,too,param,config,the,exporter,s,configuration,return,never,code,null,or,empty,throws,settings,exception,if,any,setting,is,malformed,or,if,no,host,is,set;private,static,http,host,create,hosts,final,config,config,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,string,config,key,get,concrete,setting,for,namespace,config,name,get,key,if,hosts,is,empty,throw,new,settings,exception,missing,required,setting,config,key,final,list,http,host,http,hosts,new,array,list,hosts,size,boolean,http,host,found,false,boolean,https,host,found,false,for,final,string,host,hosts,final,http,host,http,host,try,http,host,http,host,builder,builder,host,build,catch,illegal,argument,exception,e,throw,new,settings,exception,config,key,invalid,host,host,e,if,http,equals,http,host,get,scheme,name,http,host,found,true,else,https,host,found,true,if,http,host,found,https,host,found,throw,new,settings,exception,config,key,must,use,a,consistent,scheme,http,or,https,http,hosts,add,http,host,logger,debug,exporter,using,hosts,config,name,hosts,return,http,hosts,to,array,new,http,host,http,hosts,size
HttpExporter -> private static HttpHost[] createHosts(final Config config);1531179852;Create the {@link HttpHost}s that will be connected too.__@param config The exporter's configuration_@return Never {@code null} or empty._@throws SettingsException if any setting is malformed or if no host is set;private static HttpHost[] createHosts(final Config config) {_        final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        String configKey = HOST_SETTING.getConcreteSettingForNamespace(config.name()).getKey()___        if (hosts.isEmpty()) {_            throw new SettingsException("missing required setting [" + configKey + "]")__        }__        final List<HttpHost> httpHosts = new ArrayList<>(hosts.size())__        boolean httpHostFound = false__        boolean httpsHostFound = false___        _        for (final String host : hosts) {_            final HttpHost httpHost___            try {_                httpHost = HttpHostBuilder.builder(host).build()__            } catch (IllegalArgumentException e) {_                throw new SettingsException("[" + configKey + "] invalid host: [" + host + "]", e)__            }__            if ("http".equals(httpHost.getSchemeName())) {_                httpHostFound = true__            } else {_                httpsHostFound = true__            }__            _            if (httpHostFound && httpsHostFound) {_                throw new SettingsException("[" + configKey + "] must use a consistent scheme: http or https")__            }__            httpHosts.add(httpHost)__        }__        logger.debug("exporter [{}] using hosts {}", config.name(), hosts)___        return httpHosts.toArray(new HttpHost[httpHosts.size()])__    };create,the,link,http,host,s,that,will,be,connected,too,param,config,the,exporter,s,configuration,return,never,code,null,or,empty,throws,settings,exception,if,any,setting,is,malformed,or,if,no,host,is,set;private,static,http,host,create,hosts,final,config,config,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,string,config,key,get,concrete,setting,for,namespace,config,name,get,key,if,hosts,is,empty,throw,new,settings,exception,missing,required,setting,config,key,final,list,http,host,http,hosts,new,array,list,hosts,size,boolean,http,host,found,false,boolean,https,host,found,false,for,final,string,host,hosts,final,http,host,http,host,try,http,host,http,host,builder,builder,host,build,catch,illegal,argument,exception,e,throw,new,settings,exception,config,key,invalid,host,host,e,if,http,equals,http,host,get,scheme,name,http,host,found,true,else,https,host,found,true,if,http,host,found,https,host,found,throw,new,settings,exception,config,key,must,use,a,consistent,scheme,http,or,https,http,hosts,add,http,host,logger,debug,exporter,using,hosts,config,name,hosts,return,http,hosts,to,array,new,http,host,http,hosts,size
HttpExporter -> private static HttpHost[] createHosts(final Config config);1531729807;Create the {@link HttpHost}s that will be connected too.__@param config The exporter's configuration_@return Never {@code null} or empty._@throws SettingsException if any setting is malformed or if no host is set;private static HttpHost[] createHosts(final Config config) {_        final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        String configKey = HOST_SETTING.getConcreteSettingForNamespace(config.name()).getKey()___        if (hosts.isEmpty()) {_            throw new SettingsException("missing required setting [" + configKey + "]")__        }__        final List<HttpHost> httpHosts = new ArrayList<>(hosts.size())__        boolean httpHostFound = false__        boolean httpsHostFound = false___        _        for (final String host : hosts) {_            final HttpHost httpHost___            try {_                httpHost = HttpHostBuilder.builder(host).build()__            } catch (IllegalArgumentException e) {_                throw new SettingsException("[" + configKey + "] invalid host: [" + host + "]", e)__            }__            if ("http".equals(httpHost.getSchemeName())) {_                httpHostFound = true__            } else {_                httpsHostFound = true__            }__            _            if (httpHostFound && httpsHostFound) {_                throw new SettingsException("[" + configKey + "] must use a consistent scheme: http or https")__            }__            httpHosts.add(httpHost)__        }__        logger.debug("exporter [{}] using hosts {}", config.name(), hosts)___        return httpHosts.toArray(new HttpHost[httpHosts.size()])__    };create,the,link,http,host,s,that,will,be,connected,too,param,config,the,exporter,s,configuration,return,never,code,null,or,empty,throws,settings,exception,if,any,setting,is,malformed,or,if,no,host,is,set;private,static,http,host,create,hosts,final,config,config,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,string,config,key,get,concrete,setting,for,namespace,config,name,get,key,if,hosts,is,empty,throw,new,settings,exception,missing,required,setting,config,key,final,list,http,host,http,hosts,new,array,list,hosts,size,boolean,http,host,found,false,boolean,https,host,found,false,for,final,string,host,hosts,final,http,host,http,host,try,http,host,http,host,builder,builder,host,build,catch,illegal,argument,exception,e,throw,new,settings,exception,config,key,invalid,host,host,e,if,http,equals,http,host,get,scheme,name,http,host,found,true,else,https,host,found,true,if,http,host,found,https,host,found,throw,new,settings,exception,config,key,must,use,a,consistent,scheme,http,or,https,http,hosts,add,http,host,logger,debug,exporter,using,hosts,config,name,hosts,return,http,hosts,to,array,new,http,host,http,hosts,size
HttpExporter -> private static HttpHost[] createHosts(final Config config);1540847035;Create the {@link HttpHost}s that will be connected too.__@param config The exporter's configuration_@return Never {@code null} or empty._@throws SettingsException if any setting is malformed or if no host is set;private static HttpHost[] createHosts(final Config config) {_        final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        String configKey = HOST_SETTING.getConcreteSettingForNamespace(config.name()).getKey()___        if (hosts.isEmpty()) {_            throw new SettingsException("missing required setting [" + configKey + "]")__        }__        final List<HttpHost> httpHosts = new ArrayList<>(hosts.size())__        boolean httpHostFound = false__        boolean httpsHostFound = false___        _        for (final String host : hosts) {_            final HttpHost httpHost___            try {_                httpHost = HttpHostBuilder.builder(host).build()__            } catch (IllegalArgumentException e) {_                throw new SettingsException("[" + configKey + "] invalid host: [" + host + "]", e)__            }__            if ("http".equals(httpHost.getSchemeName())) {_                httpHostFound = true__            } else {_                httpsHostFound = true__            }__            _            if (httpHostFound && httpsHostFound) {_                throw new SettingsException("[" + configKey + "] must use a consistent scheme: http or https")__            }__            httpHosts.add(httpHost)__        }__        logger.debug("exporter [{}] using hosts {}", config.name(), hosts)___        return httpHosts.toArray(new HttpHost[httpHosts.size()])__    };create,the,link,http,host,s,that,will,be,connected,too,param,config,the,exporter,s,configuration,return,never,code,null,or,empty,throws,settings,exception,if,any,setting,is,malformed,or,if,no,host,is,set;private,static,http,host,create,hosts,final,config,config,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,string,config,key,get,concrete,setting,for,namespace,config,name,get,key,if,hosts,is,empty,throw,new,settings,exception,missing,required,setting,config,key,final,list,http,host,http,hosts,new,array,list,hosts,size,boolean,http,host,found,false,boolean,https,host,found,false,for,final,string,host,hosts,final,http,host,http,host,try,http,host,http,host,builder,builder,host,build,catch,illegal,argument,exception,e,throw,new,settings,exception,config,key,invalid,host,host,e,if,http,equals,http,host,get,scheme,name,http,host,found,true,else,https,host,found,true,if,http,host,found,https,host,found,throw,new,settings,exception,config,key,must,use,a,consistent,scheme,http,or,https,http,hosts,add,http,host,logger,debug,exporter,using,hosts,config,name,hosts,return,http,hosts,to,array,new,http,host,http,hosts,size
HttpExporter -> private static HttpHost[] createHosts(final Config config);1541592065;Create the {@link HttpHost}s that will be connected too.__@param config The exporter's configuration_@return Never {@code null} or empty._@throws SettingsException if any setting is malformed or if no host is set;private static HttpHost[] createHosts(final Config config) {_        final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        String configKey = HOST_SETTING.getConcreteSettingForNamespace(config.name()).getKey()___        if (hosts.isEmpty()) {_            throw new SettingsException("missing required setting [" + configKey + "]")__        }__        final List<HttpHost> httpHosts = new ArrayList<>(hosts.size())__        boolean httpHostFound = false__        boolean httpsHostFound = false___        _        for (final String host : hosts) {_            final HttpHost httpHost___            try {_                httpHost = HttpHostBuilder.builder(host).build()__            } catch (IllegalArgumentException e) {_                throw new SettingsException("[" + configKey + "] invalid host: [" + host + "]", e)__            }__            if ("http".equals(httpHost.getSchemeName())) {_                httpHostFound = true__            } else {_                httpsHostFound = true__            }__            _            if (httpHostFound && httpsHostFound) {_                throw new SettingsException("[" + configKey + "] must use a consistent scheme: http or https")__            }__            httpHosts.add(httpHost)__        }__        logger.debug("exporter [{}] using hosts {}", config.name(), hosts)___        return httpHosts.toArray(new HttpHost[httpHosts.size()])__    };create,the,link,http,host,s,that,will,be,connected,too,param,config,the,exporter,s,configuration,return,never,code,null,or,empty,throws,settings,exception,if,any,setting,is,malformed,or,if,no,host,is,set;private,static,http,host,create,hosts,final,config,config,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,string,config,key,get,concrete,setting,for,namespace,config,name,get,key,if,hosts,is,empty,throw,new,settings,exception,missing,required,setting,config,key,final,list,http,host,http,hosts,new,array,list,hosts,size,boolean,http,host,found,false,boolean,https,host,found,false,for,final,string,host,hosts,final,http,host,http,host,try,http,host,http,host,builder,builder,host,build,catch,illegal,argument,exception,e,throw,new,settings,exception,config,key,invalid,host,host,e,if,http,equals,http,host,get,scheme,name,http,host,found,true,else,https,host,found,true,if,http,host,found,https,host,found,throw,new,settings,exception,config,key,must,use,a,consistent,scheme,http,or,https,http,hosts,add,http,host,logger,debug,exporter,using,hosts,config,name,hosts,return,http,hosts,to,array,new,http,host,http,hosts,size
HttpExporter -> private static HttpHost[] createHosts(final Config config);1543346894;Create the {@link HttpHost}s that will be connected too.__@param config The exporter's configuration_@return Never {@code null} or empty._@throws SettingsException if any setting is malformed or if no host is set;private static HttpHost[] createHosts(final Config config) {_        final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        String configKey = HOST_SETTING.getConcreteSettingForNamespace(config.name()).getKey()___        if (hosts.isEmpty()) {_            throw new SettingsException("missing required setting [" + configKey + "]")__        }__        final List<HttpHost> httpHosts = new ArrayList<>(hosts.size())__        boolean httpHostFound = false__        boolean httpsHostFound = false___        _        for (final String host : hosts) {_            final HttpHost httpHost___            try {_                httpHost = HttpHostBuilder.builder(host).build()__            } catch (IllegalArgumentException e) {_                throw new SettingsException("[" + configKey + "] invalid host: [" + host + "]", e)__            }__            if ("http".equals(httpHost.getSchemeName())) {_                httpHostFound = true__            } else {_                httpsHostFound = true__            }__            _            if (httpHostFound && httpsHostFound) {_                throw new SettingsException("[" + configKey + "] must use a consistent scheme: http or https")__            }__            httpHosts.add(httpHost)__        }__        logger.debug("exporter [{}] using hosts {}", config.name(), hosts)___        return httpHosts.toArray(new HttpHost[httpHosts.size()])__    };create,the,link,http,host,s,that,will,be,connected,too,param,config,the,exporter,s,configuration,return,never,code,null,or,empty,throws,settings,exception,if,any,setting,is,malformed,or,if,no,host,is,set;private,static,http,host,create,hosts,final,config,config,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,string,config,key,get,concrete,setting,for,namespace,config,name,get,key,if,hosts,is,empty,throw,new,settings,exception,missing,required,setting,config,key,final,list,http,host,http,hosts,new,array,list,hosts,size,boolean,http,host,found,false,boolean,https,host,found,false,for,final,string,host,hosts,final,http,host,http,host,try,http,host,http,host,builder,builder,host,build,catch,illegal,argument,exception,e,throw,new,settings,exception,config,key,invalid,host,host,e,if,http,equals,http,host,get,scheme,name,http,host,found,true,else,https,host,found,true,if,http,host,found,https,host,found,throw,new,settings,exception,config,key,must,use,a,consistent,scheme,http,or,https,http,hosts,add,http,host,logger,debug,exporter,using,hosts,config,name,hosts,return,http,hosts,to,array,new,http,host,http,hosts,size
HttpExporter -> private static HttpHost[] createHosts(final Config config);1549288028;Create the {@link HttpHost}s that will be connected too.__@param config The exporter's configuration_@return Never {@code null} or empty._@throws SettingsException if any setting is malformed or if no host is set;private static HttpHost[] createHosts(final Config config) {_        final List<String> hosts = HOST_SETTING.getConcreteSettingForNamespace(config.name()).get(config.settings())__        String configKey = HOST_SETTING.getConcreteSettingForNamespace(config.name()).getKey()___        if (hosts.isEmpty()) {_            throw new SettingsException("missing required setting [" + configKey + "]")__        }__        final List<HttpHost> httpHosts = new ArrayList<>(hosts.size())__        boolean httpHostFound = false__        boolean httpsHostFound = false___        _        for (final String host : hosts) {_            final HttpHost httpHost___            try {_                httpHost = HttpHostBuilder.builder(host).build()__            } catch (IllegalArgumentException e) {_                throw new SettingsException("[" + configKey + "] invalid host: [" + host + "]", e)__            }__            if ("http".equals(httpHost.getSchemeName())) {_                httpHostFound = true__            } else {_                httpsHostFound = true__            }__            _            if (httpHostFound && httpsHostFound) {_                throw new SettingsException("[" + configKey + "] must use a consistent scheme: http or https")__            }__            httpHosts.add(httpHost)__        }__        logger.debug("exporter [{}] using hosts {}", config.name(), hosts)___        return httpHosts.toArray(new HttpHost[httpHosts.size()])__    };create,the,link,http,host,s,that,will,be,connected,too,param,config,the,exporter,s,configuration,return,never,code,null,or,empty,throws,settings,exception,if,any,setting,is,malformed,or,if,no,host,is,set;private,static,http,host,create,hosts,final,config,config,final,list,string,hosts,get,concrete,setting,for,namespace,config,name,get,config,settings,string,config,key,get,concrete,setting,for,namespace,config,name,get,key,if,hosts,is,empty,throw,new,settings,exception,missing,required,setting,config,key,final,list,http,host,http,hosts,new,array,list,hosts,size,boolean,http,host,found,false,boolean,https,host,found,false,for,final,string,host,hosts,final,http,host,http,host,try,http,host,http,host,builder,builder,host,build,catch,illegal,argument,exception,e,throw,new,settings,exception,config,key,invalid,host,host,e,if,http,equals,http,host,get,scheme,name,http,host,found,true,else,https,host,found,true,if,http,host,found,https,host,found,throw,new,settings,exception,config,key,must,use,a,consistent,scheme,http,or,https,http,hosts,add,http,host,logger,debug,exporter,using,hosts,config,name,hosts,return,http,hosts,to,array,new,http,host,http,hosts,size
HttpExporter -> HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1524684173;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, createRestClient(config, sslService, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,create,rest,client,config,ssl,service,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1527840262;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, createRestClient(config, sslService, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,create,rest,client,config,ssl,service,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1528762805;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, createRestClient(config, sslService, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,create,rest,client,config,ssl,service,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1531179852;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, createRestClient(config, sslService, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,create,rest,client,config,ssl,service,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1531729807;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, createRestClient(config, sslService, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,create,rest,client,config,ssl,service,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1540847035;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, createRestClient(config, sslService, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,create,rest,client,config,ssl,service,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1541592065;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, createRestClient(config, sslService, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,create,rest,client,config,ssl,service,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1543346894;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, createRestClient(config, sslService, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,create,rest,client,config,ssl,service,listener,thread,context,listener,resource
HttpExporter -> HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,                  final HttpResource resource);1549288028;Create an {@link HttpExporter}.__@param config The HTTP Exporter's configuration_@param sslService The SSL Service used to create the SSL Context necessary for TLS / SSL communication_@param listener The node failure listener used to notify an optional sniffer and resources_@throws SettingsException if any setting is malformed;HttpExporter(final Config config, final SSLService sslService, final ThreadContext threadContext, final NodeFailureListener listener,_                 final HttpResource resource) {_        this(config, createRestClient(config, sslService, listener), threadContext, listener, resource)__    };create,an,link,http,exporter,param,config,the,http,exporter,s,configuration,param,ssl,service,the,ssl,service,used,to,create,the,ssl,context,necessary,for,tls,ssl,communication,param,listener,the,node,failure,listener,used,to,notify,an,optional,sniffer,and,resources,throws,settings,exception,if,any,setting,is,malformed;http,exporter,final,config,config,final,sslservice,ssl,service,final,thread,context,thread,context,final,node,failure,listener,listener,final,http,resource,resource,this,config,create,rest,client,config,ssl,service,listener,thread,context,listener,resource
