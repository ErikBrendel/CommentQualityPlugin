# id;timestamp;commentText;codeText;commentWords;codeWords
PublishableHttpResource -> protected boolean shouldReplaceResource(final Response response, final XContent xContent,                                             final String resourceName, final int minimumVersion)             throws IOException;1524684173;Determine if the current resource should replaced the checked one based on its version (or lack thereof)._<p>_This expects a response like (where {@code resourceName} is replaced with its value):_<pre><code>__"resourceName": {_"version": 6000002___</code></pre>__@param response The filtered response from the _template/{name} or _ingest/pipeline/{name} resource APIs_@param xContent The XContent parser to use_@param resourceName The name of the looked up resource, which is expected to be the top-level key_@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version)._@return {@code true} represents that it should be replaced. {@code false} that it should be left alone._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;protected boolean shouldReplaceResource(final Response response, final XContent xContent,_                                            final String resourceName, final int minimumVersion)_            throws IOException {_        _        final Map<String, Object> resources = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (resources.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> resource = (Map<String, Object>) resources.get(resourceName)__            final Object version = resource != null ? resource.get("version") : null___            _            if (version instanceof Number) {_                _                return ((Number)version).intValue() < minimumVersion__            }_        }__        return true__    };determine,if,the,current,resource,should,replaced,the,checked,one,based,on,its,version,or,lack,thereof,p,this,expects,a,response,like,where,code,resource,name,is,replaced,with,its,value,pre,code,resource,name,version,6000002,code,pre,param,response,the,filtered,response,from,the,name,or,pipeline,name,resource,apis,param,x,content,the,xcontent,parser,to,use,param,resource,name,the,name,of,the,looked,up,resource,which,is,expected,to,be,the,top,level,key,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version,return,code,true,represents,that,it,should,be,replaced,code,false,that,it,should,be,left,alone,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;protected,boolean,should,replace,resource,final,response,response,final,xcontent,x,content,final,string,resource,name,final,int,minimum,version,throws,ioexception,final,map,string,object,resources,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,resources,is,empty,false,suppress,warnings,unchecked,final,map,string,object,resource,map,string,object,resources,get,resource,name,final,object,version,resource,null,resource,get,version,null,if,version,instanceof,number,return,number,version,int,value,minimum,version,return,true
PublishableHttpResource -> protected boolean shouldReplaceResource(final Response response, final XContent xContent,                                             final String resourceName, final int minimumVersion)             throws IOException;1532434432;Determine if the current resource should replaced the checked one based on its version (or lack thereof)._<p>_This expects a response like (where {@code resourceName} is replaced with its value):_<pre><code>__"resourceName": {_"version": 6000002___</code></pre>__@param response The filtered response from the _template/{name} or _ingest/pipeline/{name} resource APIs_@param xContent The XContent parser to use_@param resourceName The name of the looked up resource, which is expected to be the top-level key_@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version)._@return {@code true} represents that it should be replaced. {@code false} that it should be left alone._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;protected boolean shouldReplaceResource(final Response response, final XContent xContent,_                                            final String resourceName, final int minimumVersion)_            throws IOException {_        _        final Map<String, Object> resources = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (resources.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> resource = (Map<String, Object>) resources.get(resourceName)__            final Object version = resource != null ? resource.get("version") : null___            _            if (version instanceof Number) {_                _                return ((Number)version).intValue() < minimumVersion__            }_        }__        return true__    };determine,if,the,current,resource,should,replaced,the,checked,one,based,on,its,version,or,lack,thereof,p,this,expects,a,response,like,where,code,resource,name,is,replaced,with,its,value,pre,code,resource,name,version,6000002,code,pre,param,response,the,filtered,response,from,the,name,or,pipeline,name,resource,apis,param,x,content,the,xcontent,parser,to,use,param,resource,name,the,name,of,the,looked,up,resource,which,is,expected,to,be,the,top,level,key,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version,return,code,true,represents,that,it,should,be,replaced,code,false,that,it,should,be,left,alone,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;protected,boolean,should,replace,resource,final,response,response,final,xcontent,x,content,final,string,resource,name,final,int,minimum,version,throws,ioexception,final,map,string,object,resources,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,resources,is,empty,false,suppress,warnings,unchecked,final,map,string,object,resource,map,string,object,resources,get,resource,name,final,object,version,resource,null,resource,get,version,null,if,version,instanceof,number,return,number,version,int,value,minimum,version,return,true
PublishableHttpResource -> protected boolean shouldReplaceResource(final Response response, final XContent xContent,                                             final String resourceName, final int minimumVersion)             throws IOException;1543346894;Determine if the current resource should replaced the checked one based on its version (or lack thereof)._<p>_This expects a response like (where {@code resourceName} is replaced with its value):_<pre><code>__"resourceName": {_"version": 6000002___</code></pre>__@param response The filtered response from the _template/{name} or _ingest/pipeline/{name} resource APIs_@param xContent The XContent parser to use_@param resourceName The name of the looked up resource, which is expected to be the top-level key_@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version)._@return {@code true} represents that it should be replaced. {@code false} that it should be left alone._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;protected boolean shouldReplaceResource(final Response response, final XContent xContent,_                                            final String resourceName, final int minimumVersion)_            throws IOException {_        _        final Map<String, Object> resources = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (resources.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> resource = (Map<String, Object>) resources.get(resourceName)__            final Object version = resource != null ? resource.get("version") : null___            _            if (version instanceof Number) {_                return ((Number) version).intValue() < minimumVersion__            }_        }__        return true__    };determine,if,the,current,resource,should,replaced,the,checked,one,based,on,its,version,or,lack,thereof,p,this,expects,a,response,like,where,code,resource,name,is,replaced,with,its,value,pre,code,resource,name,version,6000002,code,pre,param,response,the,filtered,response,from,the,name,or,pipeline,name,resource,apis,param,x,content,the,xcontent,parser,to,use,param,resource,name,the,name,of,the,looked,up,resource,which,is,expected,to,be,the,top,level,key,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version,return,code,true,represents,that,it,should,be,replaced,code,false,that,it,should,be,left,alone,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;protected,boolean,should,replace,resource,final,response,response,final,xcontent,x,content,final,string,resource,name,final,int,minimum,version,throws,ioexception,final,map,string,object,resources,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,resources,is,empty,false,suppress,warnings,unchecked,final,map,string,object,resource,map,string,object,resources,get,resource,name,final,object,version,resource,null,resource,get,version,null,if,version,instanceof,number,return,number,version,int,value,minimum,version,return,true
PublishableHttpResource -> protected boolean shouldReplaceResource(final Response response, final XContent xContent,                                             final String resourceName, final int minimumVersion)             throws IOException;1550177579;Determine if the current resource should replaced the checked one based on its version (or lack thereof)._<p>_This expects a response like (where {@code resourceName} is replaced with its value):_<pre><code>__"resourceName": {_"version": 6000002___</code></pre>__@param response The filtered response from the _template/{name} or _ingest/pipeline/{name} resource APIs_@param xContent The XContent parser to use_@param resourceName The name of the looked up resource, which is expected to be the top-level key_@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version)._@return {@code true} represents that it should be replaced. {@code false} that it should be left alone._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;protected boolean shouldReplaceResource(final Response response, final XContent xContent,_                                            final String resourceName, final int minimumVersion)_            throws IOException {_        _        final Map<String, Object> resources = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (resources.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> resource = (Map<String, Object>) resources.get(resourceName)__            final Object version = resource != null ? resource.get("version") : null___            _            if (version instanceof Number) {_                return ((Number) version).intValue() < minimumVersion__            }_        }__        return true__    };determine,if,the,current,resource,should,replaced,the,checked,one,based,on,its,version,or,lack,thereof,p,this,expects,a,response,like,where,code,resource,name,is,replaced,with,its,value,pre,code,resource,name,version,6000002,code,pre,param,response,the,filtered,response,from,the,name,or,pipeline,name,resource,apis,param,x,content,the,xcontent,parser,to,use,param,resource,name,the,name,of,the,looked,up,resource,which,is,expected,to,be,the,top,level,key,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version,return,code,true,represents,that,it,should,be,replaced,code,false,that,it,should,be,left,alone,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;protected,boolean,should,replace,resource,final,response,response,final,xcontent,x,content,final,string,resource,name,final,int,minimum,version,throws,ioexception,final,map,string,object,resources,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,resources,is,empty,false,suppress,warnings,unchecked,final,map,string,object,resource,map,string,object,resources,get,resource,name,final,object,version,resource,null,resource,get,version,null,if,version,instanceof,number,return,number,version,int,value,minimum,version,return,true
PublishableHttpResource -> protected boolean deleteResource(final RestClient client, final Logger logger,                                      final String resourceBasePath, final String resourceName,                                      final String resourceType,                                      final String resourceOwnerName, final String resourceOwnerType);1524684173;Delete the {@code resourceName} using the {@code resourceBasePath} endpoint._<p>_Note to callers: this will add an "ignore" parameter to the request so that 404 is not an exception and therefore considered_successful if it's not found. You can override this behavior by specifying any valid value for "ignore", at which point 404_responses will result in {@code false} and logged failure.__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@return {@code true} if it successfully deleted the item_ otherwise {@code false}.;protected boolean deleteResource(final RestClient client, final Logger logger,_                                     final String resourceBasePath, final String resourceName,_                                     final String resourceType,_                                     final String resourceOwnerName, final String resourceOwnerType) {_        logger.trace("deleting {} [{}] from the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___        boolean success = false___        _        final Map<String, String> deleteParameters = new HashMap<>(parameters)__        deleteParameters.putIfAbsent("ignore", Integer.toString(RestStatus.NOT_FOUND.getStatus()))___        try {_            final Response response = client.performRequest("DELETE", resourceBasePath + "/" + resourceName, deleteParameters)__            final int statusCode = response.getStatusLine().getStatusCode()___            _            if (statusCode == RestStatus.OK.getStatus() || statusCode == RestStatus.NOT_FOUND.getStatus()) {_                logger.debug("{} [{}] deleted from the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                success = true__            } else {_                throw new RuntimeException("[" + resourceBasePath + "/" + resourceName + "] responded with [" + statusCode + "]")__            }_        } catch (IOException | RuntimeException e) {_            logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to delete {} [{}] on the [{}] {}",_                                                                      resourceType, resourceName, resourceOwnerName, resourceOwnerType),_                         e)__        }__        return success__    };delete,the,code,resource,name,using,the,code,resource,base,path,endpoint,p,note,to,callers,this,will,add,an,ignore,parameter,to,the,request,so,that,404,is,not,an,exception,and,therefore,considered,successful,if,it,s,not,found,you,can,override,this,behavior,by,specifying,any,valid,value,for,ignore,at,which,point,404,responses,will,result,in,code,false,and,logged,failure,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,return,code,true,if,it,successfully,deleted,the,item,otherwise,code,false;protected,boolean,delete,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,logger,trace,deleting,from,the,resource,type,resource,name,resource,owner,name,resource,owner,type,boolean,success,false,final,map,string,string,delete,parameters,new,hash,map,parameters,delete,parameters,put,if,absent,ignore,integer,to,string,rest,status,get,status,try,final,response,response,client,perform,request,delete,resource,base,path,resource,name,delete,parameters,final,int,status,code,response,get,status,line,get,status,code,if,status,code,rest,status,ok,get,status,status,code,rest,status,get,status,logger,debug,deleted,from,the,resource,type,resource,name,resource,owner,name,resource,owner,type,success,true,else,throw,new,runtime,exception,resource,base,path,resource,name,responded,with,status,code,catch,ioexception,runtime,exception,e,logger,error,supplier,new,parameterized,message,failed,to,delete,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,e,return,success
PublishableHttpResource -> protected boolean deleteResource(final RestClient client, final Logger logger,                                      final String resourceBasePath, final String resourceName,                                      final String resourceType,                                      final String resourceOwnerName, final String resourceOwnerType);1532434432;Delete the {@code resourceName} using the {@code resourceBasePath} endpoint._<p>_Note to callers: this will add an "ignore" parameter to the request so that 404 is not an exception and therefore considered_successful if it's not found. You can override this behavior by specifying any valid value for "ignore", at which point 404_responses will result in {@code false} and logged failure.__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@return {@code true} if it successfully deleted the item_ otherwise {@code false}.;protected boolean deleteResource(final RestClient client, final Logger logger,_                                     final String resourceBasePath, final String resourceName,_                                     final String resourceType,_                                     final String resourceOwnerName, final String resourceOwnerType) {_        logger.trace("deleting {} [{}] from the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___        boolean success = false___        Request request = new Request("DELETE", resourceBasePath + "/" + resourceName)__        addParameters(request)__        if (false == parameters.containsKey("ignore")) {_            _            request.addParameter("ignore", Integer.toString(RestStatus.NOT_FOUND.getStatus()))__        }__        try {_            final Response response = client.performRequest(request)__            final int statusCode = response.getStatusLine().getStatusCode()___            _            if (statusCode == RestStatus.OK.getStatus() || statusCode == RestStatus.NOT_FOUND.getStatus()) {_                logger.debug("{} [{}] deleted from the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                success = true__            } else {_                throw new RuntimeException("[" + resourceBasePath + "/" + resourceName + "] responded with [" + statusCode + "]")__            }_        } catch (IOException | RuntimeException e) {_            logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to delete {} [{}] on the [{}] {}",_                                                                      resourceType, resourceName, resourceOwnerName, resourceOwnerType),_                         e)__        }__        return success__    };delete,the,code,resource,name,using,the,code,resource,base,path,endpoint,p,note,to,callers,this,will,add,an,ignore,parameter,to,the,request,so,that,404,is,not,an,exception,and,therefore,considered,successful,if,it,s,not,found,you,can,override,this,behavior,by,specifying,any,valid,value,for,ignore,at,which,point,404,responses,will,result,in,code,false,and,logged,failure,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,return,code,true,if,it,successfully,deleted,the,item,otherwise,code,false;protected,boolean,delete,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,logger,trace,deleting,from,the,resource,type,resource,name,resource,owner,name,resource,owner,type,boolean,success,false,request,request,new,request,delete,resource,base,path,resource,name,add,parameters,request,if,false,parameters,contains,key,ignore,request,add,parameter,ignore,integer,to,string,rest,status,get,status,try,final,response,response,client,perform,request,request,final,int,status,code,response,get,status,line,get,status,code,if,status,code,rest,status,ok,get,status,status,code,rest,status,get,status,logger,debug,deleted,from,the,resource,type,resource,name,resource,owner,name,resource,owner,type,success,true,else,throw,new,runtime,exception,resource,base,path,resource,name,responded,with,status,code,catch,ioexception,runtime,exception,e,logger,error,supplier,new,parameterized,message,failed,to,delete,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,e,return,success
PublishableHttpResource -> protected void deleteResource(final RestClient client,                                   final ActionListener<Boolean> listener,                                   final Logger logger,                                   final String resourceBasePath,                                   final String resourceName,                                   final String resourceType,                                   final String resourceOwnerName,                                   final String resourceOwnerType);1543346894;Delete the {@code resourceName} using the {@code resourceBasePath} endpoint._<p>_Note to callers: this will add an "ignore" parameter to the request so that 404 is not an exception and therefore considered_successful if it's not found. You can override this behavior by specifying any valid value for "ignore", at which point 404_responses will result in {@code false} and logged failure.__@param client The REST client to make the request(s)._@param listener Returns {@code true} if it successfully deleted the item_ <em>never</em> {@code false}._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster").;protected void deleteResource(final RestClient client,_                                  final ActionListener<Boolean> listener,_                                  final Logger logger,_                                  final String resourceBasePath,_                                  final String resourceName,_                                  final String resourceType,_                                  final String resourceOwnerName,_                                  final String resourceOwnerType) {_        logger.trace("deleting {} [{}] from the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___        final Request request = new Request("DELETE", resourceBasePath + "/" + resourceName)__        addParameters(request)___        if (false == parameters.containsKey("ignore")) {_            _            request.addParameter("ignore", Integer.toString(RestStatus.NOT_FOUND.getStatus()))__        }__        client.performRequestAsync(request, new ResponseListener() {__            @Override_            public void onSuccess(Response response) {_                final int statusCode = response.getStatusLine().getStatusCode()___                _                if (statusCode == RestStatus.OK.getStatus() || statusCode == RestStatus.NOT_FOUND.getStatus()) {_                    logger.debug("{} [{}] deleted from the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                    listener.onResponse(true)__                } else {_                    onFailure(new RuntimeException("[" + resourceBasePath + "/" + resourceName + "] responded with [" + statusCode + "]"))__                }_            }__            @Override_            public void onFailure(Exception exception) {_                logger.error((Supplier<?>) () ->_                             new ParameterizedMessage("failed to delete {} [{}] on the [{}] {}",_                                                      resourceType, resourceName, resourceOwnerName, resourceOwnerType),_                             exception)___                listener.onFailure(exception)__            }__        })__    };delete,the,code,resource,name,using,the,code,resource,base,path,endpoint,p,note,to,callers,this,will,add,an,ignore,parameter,to,the,request,so,that,404,is,not,an,exception,and,therefore,considered,successful,if,it,s,not,found,you,can,override,this,behavior,by,specifying,any,valid,value,for,ignore,at,which,point,404,responses,will,result,in,code,false,and,logged,failure,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,it,successfully,deleted,the,item,em,never,em,code,false,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster;protected,void,delete,resource,final,rest,client,client,final,action,listener,boolean,listener,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,logger,trace,deleting,from,the,resource,type,resource,name,resource,owner,name,resource,owner,type,final,request,request,new,request,delete,resource,base,path,resource,name,add,parameters,request,if,false,parameters,contains,key,ignore,request,add,parameter,ignore,integer,to,string,rest,status,get,status,client,perform,request,async,request,new,response,listener,override,public,void,on,success,response,response,final,int,status,code,response,get,status,line,get,status,code,if,status,code,rest,status,ok,get,status,status,code,rest,status,get,status,logger,debug,deleted,from,the,resource,type,resource,name,resource,owner,name,resource,owner,type,listener,on,response,true,else,on,failure,new,runtime,exception,resource,base,path,resource,name,responded,with,status,code,override,public,void,on,failure,exception,exception,logger,error,supplier,new,parameterized,message,failed,to,delete,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,exception,listener,on,failure,exception
PublishableHttpResource -> protected void deleteResource(final RestClient client,                                   final ActionListener<Boolean> listener,                                   final Logger logger,                                   final String resourceBasePath,                                   final String resourceName,                                   final String resourceType,                                   final String resourceOwnerName,                                   final String resourceOwnerType);1550177579;Delete the {@code resourceName} using the {@code resourceBasePath} endpoint._<p>_Note to callers: this will add an "ignore" parameter to the request so that 404 is not an exception and therefore considered_successful if it's not found. You can override this behavior by specifying any valid value for "ignore", at which point 404_responses will result in {@code false} and logged failure.__@param client The REST client to make the request(s)._@param listener Returns {@code true} if it successfully deleted the item_ <em>never</em> {@code false}._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster").;protected void deleteResource(final RestClient client,_                                  final ActionListener<Boolean> listener,_                                  final Logger logger,_                                  final String resourceBasePath,_                                  final String resourceName,_                                  final String resourceType,_                                  final String resourceOwnerName,_                                  final String resourceOwnerType) {_        logger.trace("deleting {} [{}] from the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___        final Request request = new Request("DELETE", resourceBasePath + "/" + resourceName)__        addDefaultParameters(request)___        if (false == defaultParameters.containsKey("ignore")) {_            _            request.addParameter("ignore", Integer.toString(RestStatus.NOT_FOUND.getStatus()))__        }__        client.performRequestAsync(request, new ResponseListener() {__            @Override_            public void onSuccess(Response response) {_                final int statusCode = response.getStatusLine().getStatusCode()___                _                if (statusCode == RestStatus.OK.getStatus() || statusCode == RestStatus.NOT_FOUND.getStatus()) {_                    logger.debug("{} [{}] deleted from the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                    listener.onResponse(true)__                } else {_                    onFailure(new RuntimeException("[" + resourceBasePath + "/" + resourceName + "] responded with [" + statusCode + "]"))__                }_            }__            @Override_            public void onFailure(Exception exception) {_                logger.error((Supplier<?>) () ->_                             new ParameterizedMessage("failed to delete {} [{}] on the [{}] {}",_                                                      resourceType, resourceName, resourceOwnerName, resourceOwnerType),_                             exception)___                listener.onFailure(exception)__            }__        })__    };delete,the,code,resource,name,using,the,code,resource,base,path,endpoint,p,note,to,callers,this,will,add,an,ignore,parameter,to,the,request,so,that,404,is,not,an,exception,and,therefore,considered,successful,if,it,s,not,found,you,can,override,this,behavior,by,specifying,any,valid,value,for,ignore,at,which,point,404,responses,will,result,in,code,false,and,logged,failure,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,it,successfully,deleted,the,item,em,never,em,code,false,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster;protected,void,delete,resource,final,rest,client,client,final,action,listener,boolean,listener,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,logger,trace,deleting,from,the,resource,type,resource,name,resource,owner,name,resource,owner,type,final,request,request,new,request,delete,resource,base,path,resource,name,add,default,parameters,request,if,false,default,parameters,contains,key,ignore,request,add,parameter,ignore,integer,to,string,rest,status,get,status,client,perform,request,async,request,new,response,listener,override,public,void,on,success,response,response,final,int,status,code,response,get,status,line,get,status,code,if,status,code,rest,status,ok,get,status,status,code,rest,status,get,status,logger,debug,deleted,from,the,resource,type,resource,name,resource,owner,name,resource,owner,type,listener,on,response,true,else,on,failure,new,runtime,exception,resource,base,path,resource,name,responded,with,status,code,override,public,void,on,failure,exception,exception,logger,error,supplier,new,parameterized,message,failed,to,delete,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,exception,listener,on,failure,exception
PublishableHttpResource -> protected boolean putResource(final RestClient client, final Logger logger,                                   final String resourceBasePath,                                   final String resourceName, final java.util.function.Supplier<HttpEntity> body,                                   final String resourceType,                                   final String resourceOwnerName, final String resourceOwnerType);1524684173;Upload the {@code resourceName} to the {@code resourceBasePath} endpoint.__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param body The {@link HttpEntity} that makes up the body of the request._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster").;protected boolean putResource(final RestClient client, final Logger logger,_                                  final String resourceBasePath,_                                  final String resourceName, final java.util.function.Supplier<HttpEntity> body,_                                  final String resourceType,_                                  final String resourceOwnerName, final String resourceOwnerType) {_        logger.trace("uploading {} [{}] to the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___        boolean success = false___        try {_            final Response response = client.performRequest("PUT", resourceBasePath + "/" + resourceName, parameters, body.get())__            final int statusCode = response.getStatusLine().getStatusCode()___            _            if (statusCode == RestStatus.OK.getStatus() || statusCode == RestStatus.CREATED.getStatus()) {_                logger.debug("{} [{}] uploaded to the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                success = true__            } else {_                throw new RuntimeException("[" + resourceBasePath + "/" + resourceName + "] responded with [" + statusCode + "]")__            }_        } catch (IOException | RuntimeException e) {_            logger.error((Supplier<?>) () ->_                    new ParameterizedMessage("failed to upload {} [{}] on the [{}] {}",_                                             resourceType, resourceName, resourceOwnerName, resourceOwnerType),_                    e)__        }__        return success__    };upload,the,code,resource,name,to,the,code,resource,base,path,endpoint,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,body,the,link,http,entity,that,makes,up,the,body,of,the,request,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster;protected,boolean,put,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,java,util,function,supplier,http,entity,body,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,logger,trace,uploading,to,the,resource,type,resource,name,resource,owner,name,resource,owner,type,boolean,success,false,try,final,response,response,client,perform,request,put,resource,base,path,resource,name,parameters,body,get,final,int,status,code,response,get,status,line,get,status,code,if,status,code,rest,status,ok,get,status,status,code,rest,status,created,get,status,logger,debug,uploaded,to,the,resource,type,resource,name,resource,owner,name,resource,owner,type,success,true,else,throw,new,runtime,exception,resource,base,path,resource,name,responded,with,status,code,catch,ioexception,runtime,exception,e,logger,error,supplier,new,parameterized,message,failed,to,upload,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,e,return,success
PublishableHttpResource -> protected boolean putResource(final RestClient client, final Logger logger,                                   final String resourceBasePath,                                   final String resourceName, final java.util.function.Supplier<HttpEntity> body,                                   final String resourceType,                                   final String resourceOwnerName, final String resourceOwnerType);1532434432;Upload the {@code resourceName} to the {@code resourceBasePath} endpoint.__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param body The {@link HttpEntity} that makes up the body of the request._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster").;protected boolean putResource(final RestClient client, final Logger logger,_                                  final String resourceBasePath,_                                  final String resourceName, final java.util.function.Supplier<HttpEntity> body,_                                  final String resourceType,_                                  final String resourceOwnerName, final String resourceOwnerType) {_        logger.trace("uploading {} [{}] to the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___        boolean success = false___        final Request request = new Request("PUT", resourceBasePath + "/" + resourceName)__        addParameters(request)__        request.setEntity(body.get())___        try {_            final Response response = client.performRequest(request)__            final int statusCode = response.getStatusLine().getStatusCode()___            _            if (statusCode == RestStatus.OK.getStatus() || statusCode == RestStatus.CREATED.getStatus()) {_                logger.debug("{} [{}] uploaded to the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                success = true__            } else {_                throw new RuntimeException("[" + resourceBasePath + "/" + resourceName + "] responded with [" + statusCode + "]")__            }_        } catch (IOException | RuntimeException e) {_            logger.error((Supplier<?>) () ->_                    new ParameterizedMessage("failed to upload {} [{}] on the [{}] {}",_                                             resourceType, resourceName, resourceOwnerName, resourceOwnerType),_                    e)__        }__        return success__    };upload,the,code,resource,name,to,the,code,resource,base,path,endpoint,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,body,the,link,http,entity,that,makes,up,the,body,of,the,request,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster;protected,boolean,put,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,java,util,function,supplier,http,entity,body,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,logger,trace,uploading,to,the,resource,type,resource,name,resource,owner,name,resource,owner,type,boolean,success,false,final,request,request,new,request,put,resource,base,path,resource,name,add,parameters,request,request,set,entity,body,get,try,final,response,response,client,perform,request,request,final,int,status,code,response,get,status,line,get,status,code,if,status,code,rest,status,ok,get,status,status,code,rest,status,created,get,status,logger,debug,uploaded,to,the,resource,type,resource,name,resource,owner,name,resource,owner,type,success,true,else,throw,new,runtime,exception,resource,base,path,resource,name,responded,with,status,code,catch,ioexception,runtime,exception,e,logger,error,supplier,new,parameterized,message,failed,to,upload,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,e,return,success
PublishableHttpResource -> protected void versionCheckForResource(final RestClient client,                                            final ActionListener<Boolean> listener,                                            final Logger logger,                                            final String resourceBasePath,                                            final String resourceName,                                            final String resourceType,                                            final String resourceOwnerName,                                            final String resourceOwnerType,                                            final XContent xContent,                                            final int minimumVersion);1543346894;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint with a version greater than or equal_to the expected version._<p>_This provides the base-level check for any resource that does not need to care about its response beyond existence (and likely does_not need to inspect its contents)._<p>_This expects responses in the form of:_<pre><code>__"resourceName": {_"version": 6000002___</code></pre>__@param client The REST client to make the request(s)._@param listener Returns {@code true} if the resource was successfully published. {@code false} otherwise._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@param xContent The XContent used to parse the response._@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version).;protected void versionCheckForResource(final RestClient client,_                                           final ActionListener<Boolean> listener,_                                           final Logger logger,_                                           final String resourceBasePath,_                                           final String resourceName,_                                           final String resourceType,_                                           final String resourceOwnerName,_                                           final String resourceOwnerType,_                                           final XContent xContent,_                                           final int minimumVersion) {_        final CheckedFunction<Response, Boolean, IOException> responseChecker =_            (response) -> shouldReplaceResource(response, xContent, resourceName, minimumVersion)___        checkForResource(client, listener, logger,_                         resourceBasePath, resourceName, resourceType, resourceOwnerName, resourceOwnerType,_                         GET_EXISTS, GET_DOES_NOT_EXIST, responseChecker, this::alwaysReplaceResource)__    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,with,a,version,greater,than,or,equal,to,the,expected,version,p,this,provides,the,base,level,check,for,any,resource,that,does,not,need,to,care,about,its,response,beyond,existence,and,likely,does,not,need,to,inspect,its,contents,p,this,expects,responses,in,the,form,of,pre,code,resource,name,version,6000002,code,pre,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,the,resource,was,successfully,published,code,false,otherwise,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,param,x,content,the,xcontent,used,to,parse,the,response,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version;protected,void,version,check,for,resource,final,rest,client,client,final,action,listener,boolean,listener,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,final,xcontent,x,content,final,int,minimum,version,final,checked,function,response,boolean,ioexception,response,checker,response,should,replace,resource,response,x,content,resource,name,minimum,version,check,for,resource,client,listener,logger,resource,base,path,resource,name,resource,type,resource,owner,name,resource,owner,type,response,checker,this,always,replace,resource
PublishableHttpResource -> protected void versionCheckForResource(final RestClient client,                                            final ActionListener<Boolean> listener,                                            final Logger logger,                                            final String resourceBasePath,                                            final String resourceName,                                            final String resourceType,                                            final String resourceOwnerName,                                            final String resourceOwnerType,                                            final XContent xContent,                                            final int minimumVersion);1550177579;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint with a version greater than or equal_to the expected version._<p>_This provides the base-level check for any resource that does not need to care about its response beyond existence (and likely does_not need to inspect its contents)._<p>_This expects responses in the form of:_<pre><code>__"resourceName": {_"version": 6000002___</code></pre>__@param client The REST client to make the request(s)._@param listener Returns {@code true} if the resource was successfully published. {@code false} otherwise._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@param xContent The XContent used to parse the response._@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version).;protected void versionCheckForResource(final RestClient client,_                                           final ActionListener<Boolean> listener,_                                           final Logger logger,_                                           final String resourceBasePath,_                                           final String resourceName,_                                           final String resourceType,_                                           final String resourceOwnerName,_                                           final String resourceOwnerType,_                                           final XContent xContent,_                                           final int minimumVersion) {_        final CheckedFunction<Response, Boolean, IOException> responseChecker =_            (response) -> shouldReplaceResource(response, xContent, resourceName, minimumVersion)___        checkForResource(client, listener, logger,_                         resourceBasePath, resourceName, resourceType, resourceOwnerName, resourceOwnerType,_                         GET_EXISTS, GET_DOES_NOT_EXIST, responseChecker, this::alwaysReplaceResource)__    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,with,a,version,greater,than,or,equal,to,the,expected,version,p,this,provides,the,base,level,check,for,any,resource,that,does,not,need,to,care,about,its,response,beyond,existence,and,likely,does,not,need,to,inspect,its,contents,p,this,expects,responses,in,the,form,of,pre,code,resource,name,version,6000002,code,pre,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,the,resource,was,successfully,published,code,false,otherwise,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,param,x,content,the,xcontent,used,to,parse,the,response,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version;protected,void,version,check,for,resource,final,rest,client,client,final,action,listener,boolean,listener,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,final,xcontent,x,content,final,int,minimum,version,final,checked,function,response,boolean,ioexception,response,checker,response,should,replace,resource,response,x,content,resource,name,minimum,version,check,for,resource,client,listener,logger,resource,base,path,resource,name,resource,type,resource,owner,name,resource,owner,type,response,checker,this,always,replace,resource
PublishableHttpResource -> protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                       final Map<String, String> baseParameters);1524684173;Create a new {@link PublishableHttpResource} that {@linkplain #isDirty() is dirty}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout Master timeout to use with any request._@param baseParameters The base parameters to specify for the request.;protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                      final Map<String, String> baseParameters) {_        this(resourceOwnerName, masterTimeout, baseParameters, true)__    };create,a,new,link,publishable,http,resource,that,linkplain,is,dirty,is,dirty,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,master,timeout,to,use,with,any,request,param,base,parameters,the,base,parameters,to,specify,for,the,request;protected,publishable,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,map,string,string,base,parameters,this,resource,owner,name,master,timeout,base,parameters,true
PublishableHttpResource -> protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                       final Map<String, String> baseParameters);1532434432;Create a new {@link PublishableHttpResource} that {@linkplain #isDirty() is dirty}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout Master timeout to use with any request._@param baseParameters The base parameters to specify for the request.;protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                      final Map<String, String> baseParameters) {_        this(resourceOwnerName, masterTimeout, baseParameters, true)__    };create,a,new,link,publishable,http,resource,that,linkplain,is,dirty,is,dirty,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,master,timeout,to,use,with,any,request,param,base,parameters,the,base,parameters,to,specify,for,the,request;protected,publishable,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,map,string,string,base,parameters,this,resource,owner,name,master,timeout,base,parameters,true
PublishableHttpResource -> protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                       final Map<String, String> baseParameters);1543346894;Create a new {@link PublishableHttpResource} that {@linkplain #isDirty() is dirty}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout Master timeout to use with any request._@param baseParameters The base parameters to specify for the request.;protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                      final Map<String, String> baseParameters) {_        this(resourceOwnerName, masterTimeout, baseParameters, true)__    };create,a,new,link,publishable,http,resource,that,linkplain,is,dirty,is,dirty,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,master,timeout,to,use,with,any,request,param,base,parameters,the,base,parameters,to,specify,for,the,request;protected,publishable,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,map,string,string,base,parameters,this,resource,owner,name,master,timeout,base,parameters,true
PublishableHttpResource -> protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                       final Map<String, String> baseParameters);1550177579;Create a new {@link PublishableHttpResource} that {@linkplain #isDirty() is dirty}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout Master timeout to use with any request._@param baseParameters The base parameters to specify for the request.;protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                      final Map<String, String> baseParameters) {_        this(resourceOwnerName, masterTimeout, baseParameters, true)__    };create,a,new,link,publishable,http,resource,that,linkplain,is,dirty,is,dirty,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,master,timeout,to,use,with,any,request,param,base,parameters,the,base,parameters,to,specify,for,the,request;protected,publishable,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,map,string,string,base,parameters,this,resource,owner,name,master,timeout,base,parameters,true
PublishableHttpResource -> protected abstract CheckResponse doCheck(RestClient client)_;1524684173;Determine if the current resource exists._<ul>_<li>_{@link CheckResponse#EXISTS EXISTS} will <em>not</em> run {@link #doPublish(RestClient)} and mark this as <em>not</em> dirty._</li>_<li>_{@link CheckResponse#DOES_NOT_EXIST DOES_NOT_EXIST} will run {@link #doPublish(RestClient)}, which determines the dirtiness._</li>_<li>{@link CheckResponse#ERROR ERROR} will <em>not</em> run {@link #doPublish(RestClient)} and mark this as dirty.</li>_</ul>__@param client The REST client to make the request(s)._@return Never {@code null}.;protected abstract CheckResponse doCheck(RestClient client)_;determine,if,the,current,resource,exists,ul,li,link,check,response,exists,exists,will,em,not,em,run,link,do,publish,rest,client,and,mark,this,as,em,not,em,dirty,li,li,link,check,response,will,run,link,do,publish,rest,client,which,determines,the,dirtiness,li,li,link,check,response,error,error,will,em,not,em,run,link,do,publish,rest,client,and,mark,this,as,dirty,li,ul,param,client,the,rest,client,to,make,the,request,s,return,never,code,null;protected,abstract,check,response,do,check,rest,client,client
PublishableHttpResource -> protected abstract CheckResponse doCheck(RestClient client)_;1532434432;Determine if the current resource exists._<ul>_<li>_{@link CheckResponse#EXISTS EXISTS} will <em>not</em> run {@link #doPublish(RestClient)} and mark this as <em>not</em> dirty._</li>_<li>_{@link CheckResponse#DOES_NOT_EXIST DOES_NOT_EXIST} will run {@link #doPublish(RestClient)}, which determines the dirtiness._</li>_<li>{@link CheckResponse#ERROR ERROR} will <em>not</em> run {@link #doPublish(RestClient)} and mark this as dirty.</li>_</ul>__@param client The REST client to make the request(s)._@return Never {@code null}.;protected abstract CheckResponse doCheck(RestClient client)_;determine,if,the,current,resource,exists,ul,li,link,check,response,exists,exists,will,em,not,em,run,link,do,publish,rest,client,and,mark,this,as,em,not,em,dirty,li,li,link,check,response,will,run,link,do,publish,rest,client,which,determines,the,dirtiness,li,li,link,check,response,error,error,will,em,not,em,run,link,do,publish,rest,client,and,mark,this,as,dirty,li,ul,param,client,the,rest,client,to,make,the,request,s,return,never,code,null;protected,abstract,check,response,do,check,rest,client,client
PublishableHttpResource -> protected abstract boolean doPublish(RestClient client)_;1524684173;Publish the current resource._<p>_This is only invoked if {@linkplain #doCheck(RestClient) the check} fails.__@param client The REST client to make the request(s)._@return {@code true} if it exists.;protected abstract boolean doPublish(RestClient client)_;publish,the,current,resource,p,this,is,only,invoked,if,linkplain,do,check,rest,client,the,check,fails,param,client,the,rest,client,to,make,the,request,s,return,code,true,if,it,exists;protected,abstract,boolean,do,publish,rest,client,client
PublishableHttpResource -> protected abstract boolean doPublish(RestClient client)_;1532434432;Publish the current resource._<p>_This is only invoked if {@linkplain #doCheck(RestClient) the check} fails.__@param client The REST client to make the request(s)._@return {@code true} if it exists.;protected abstract boolean doPublish(RestClient client)_;publish,the,current,resource,p,this,is,only,invoked,if,linkplain,do,check,rest,client,the,check,fails,param,client,the,rest,client,to,make,the,request,s,return,code,true,if,it,exists;protected,abstract,boolean,do,publish,rest,client,client
PublishableHttpResource -> protected abstract void doCheck(RestClient client, ActionListener<Boolean> listener)_;1543346894;Determine if the current resource exists.__@param client The REST client to make the request(s)._@param listener Returns {@code true} if the resource already available to use. {@code false} otherwise.;protected abstract void doCheck(RestClient client, ActionListener<Boolean> listener)_;determine,if,the,current,resource,exists,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,the,resource,already,available,to,use,code,false,otherwise;protected,abstract,void,do,check,rest,client,client,action,listener,boolean,listener
PublishableHttpResource -> protected abstract void doCheck(RestClient client, ActionListener<Boolean> listener)_;1550177579;Determine if the current resource exists.__@param client The REST client to make the request(s)._@param listener Returns {@code true} if the resource already available to use. {@code false} otherwise.;protected abstract void doCheck(RestClient client, ActionListener<Boolean> listener)_;determine,if,the,current,resource,exists,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,the,resource,already,available,to,use,code,false,otherwise;protected,abstract,void,do,check,rest,client,client,action,listener,boolean,listener
PublishableHttpResource -> protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                       final Map<String, String> baseParameters, final boolean dirty);1524684173;Create a new {@link PublishableHttpResource}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout timeout to use with any request._@param baseParameters The base parameters to specify for the request._@param dirty Whether the resource is dirty or not;protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                      final Map<String, String> baseParameters, final boolean dirty) {_        super(resourceOwnerName, dirty)___        if (masterTimeout != null && TimeValue.MINUS_ONE.equals(masterTimeout) == false) {_            final Map<String, String> parameters = new HashMap<>(baseParameters.size() + 1)___            parameters.putAll(baseParameters)__            parameters.put("master_timeout", masterTimeout.toString())___            this.parameters = Collections.unmodifiableMap(parameters)__        } else {_            this.parameters = baseParameters__        }_    };create,a,new,link,publishable,http,resource,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,timeout,to,use,with,any,request,param,base,parameters,the,base,parameters,to,specify,for,the,request,param,dirty,whether,the,resource,is,dirty,or,not;protected,publishable,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,map,string,string,base,parameters,final,boolean,dirty,super,resource,owner,name,dirty,if,master,timeout,null,time,value,equals,master,timeout,false,final,map,string,string,parameters,new,hash,map,base,parameters,size,1,parameters,put,all,base,parameters,parameters,put,master,timeout,to,string,this,parameters,collections,unmodifiable,map,parameters,else,this,parameters,base,parameters
PublishableHttpResource -> protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                       final Map<String, String> baseParameters, final boolean dirty);1532434432;Create a new {@link PublishableHttpResource}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout timeout to use with any request._@param baseParameters The base parameters to specify for the request._@param dirty Whether the resource is dirty or not;protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                      final Map<String, String> baseParameters, final boolean dirty) {_        super(resourceOwnerName, dirty)___        if (masterTimeout != null && TimeValue.MINUS_ONE.equals(masterTimeout) == false) {_            final Map<String, String> parameters = new HashMap<>(baseParameters.size() + 1)___            parameters.putAll(baseParameters)__            parameters.put("master_timeout", masterTimeout.toString())___            this.parameters = Collections.unmodifiableMap(parameters)__        } else {_            this.parameters = baseParameters__        }_    };create,a,new,link,publishable,http,resource,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,timeout,to,use,with,any,request,param,base,parameters,the,base,parameters,to,specify,for,the,request,param,dirty,whether,the,resource,is,dirty,or,not;protected,publishable,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,map,string,string,base,parameters,final,boolean,dirty,super,resource,owner,name,dirty,if,master,timeout,null,time,value,equals,master,timeout,false,final,map,string,string,parameters,new,hash,map,base,parameters,size,1,parameters,put,all,base,parameters,parameters,put,master,timeout,to,string,this,parameters,collections,unmodifiable,map,parameters,else,this,parameters,base,parameters
PublishableHttpResource -> protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                       final Map<String, String> baseParameters, final boolean dirty);1543346894;Create a new {@link PublishableHttpResource}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout timeout to use with any request._@param baseParameters The base parameters to specify for the request._@param dirty Whether the resource is dirty or not;protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                      final Map<String, String> baseParameters, final boolean dirty) {_        super(resourceOwnerName, dirty)___        if (masterTimeout != null && TimeValue.MINUS_ONE.equals(masterTimeout) == false) {_            final Map<String, String> parameters = new HashMap<>(baseParameters.size() + 1)___            parameters.putAll(baseParameters)__            parameters.put("master_timeout", masterTimeout.toString())___            this.parameters = Collections.unmodifiableMap(parameters)__        } else {_            this.parameters = baseParameters__        }_    };create,a,new,link,publishable,http,resource,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,timeout,to,use,with,any,request,param,base,parameters,the,base,parameters,to,specify,for,the,request,param,dirty,whether,the,resource,is,dirty,or,not;protected,publishable,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,map,string,string,base,parameters,final,boolean,dirty,super,resource,owner,name,dirty,if,master,timeout,null,time,value,equals,master,timeout,false,final,map,string,string,parameters,new,hash,map,base,parameters,size,1,parameters,put,all,base,parameters,parameters,put,master,timeout,to,string,this,parameters,collections,unmodifiable,map,parameters,else,this,parameters,base,parameters
PublishableHttpResource -> protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                       final Map<String, String> baseParameters, final boolean dirty);1550177579;Create a new {@link PublishableHttpResource}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout timeout to use with any request._@param baseParameters The base parameters to specify for the request._@param dirty Whether the resource is dirty or not;protected PublishableHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                      final Map<String, String> baseParameters, final boolean dirty) {_        super(resourceOwnerName, dirty)___        if (masterTimeout != null && TimeValue.MINUS_ONE.equals(masterTimeout) == false) {_            final Map<String, String> parameters = new HashMap<>(baseParameters.size() + 1)___            parameters.putAll(baseParameters)__            parameters.put("master_timeout", masterTimeout.toString())___            this.defaultParameters = Collections.unmodifiableMap(parameters)__        } else {_            this.defaultParameters = baseParameters__        }_    };create,a,new,link,publishable,http,resource,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,timeout,to,use,with,any,request,param,base,parameters,the,base,parameters,to,specify,for,the,request,param,dirty,whether,the,resource,is,dirty,or,not;protected,publishable,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,map,string,string,base,parameters,final,boolean,dirty,super,resource,owner,name,dirty,if,master,timeout,null,time,value,equals,master,timeout,false,final,map,string,string,parameters,new,hash,map,base,parameters,size,1,parameters,put,all,base,parameters,parameters,put,master,timeout,to,string,this,default,parameters,collections,unmodifiable,map,parameters,else,this,default,parameters,base,parameters
PublishableHttpResource -> protected abstract void doPublish(RestClient client, ActionListener<Boolean> listener)_;1543346894;Publish the current resource._<p>_This is only invoked if {@linkplain #doCheck(RestClient, ActionListener) the check} fails.__@param client The REST client to make the request(s)._@param listener Returns {@code true} if the resource is available to use. Otherwise {@code false}.;protected abstract void doPublish(RestClient client, ActionListener<Boolean> listener)_;publish,the,current,resource,p,this,is,only,invoked,if,linkplain,do,check,rest,client,action,listener,the,check,fails,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,the,resource,is,available,to,use,otherwise,code,false;protected,abstract,void,do,publish,rest,client,client,action,listener,boolean,listener
PublishableHttpResource -> protected abstract void doPublish(RestClient client, ActionListener<Boolean> listener)_;1550177579;Publish the current resource._<p>_This is only invoked if {@linkplain #doCheck(RestClient, ActionListener) the check} fails.__@param client The REST client to make the request(s)._@param listener Returns {@code true} if the resource is available to use. Otherwise {@code false}.;protected abstract void doPublish(RestClient client, ActionListener<Boolean> listener)_;publish,the,current,resource,p,this,is,only,invoked,if,linkplain,do,check,rest,client,action,listener,the,check,fails,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,the,resource,is,available,to,use,otherwise,code,false;protected,abstract,void,do,publish,rest,client,client,action,listener,boolean,listener
PublishableHttpResource -> protected boolean alwaysReplaceResource(final Response response);1543346894;A useful placeholder for {@link CheckedFunction}s that want to always return {@code true}.__@param response Unused._@return Always {@code true}.;protected boolean alwaysReplaceResource(final Response response) {_        return true__    };a,useful,placeholder,for,link,checked,function,s,that,want,to,always,return,code,true,param,response,unused,return,always,code,true;protected,boolean,always,replace,resource,final,response,response,return,true
PublishableHttpResource -> protected boolean alwaysReplaceResource(final Response response);1550177579;A useful placeholder for {@link CheckedFunction}s that want to always return {@code true}.__@param response Unused._@return Always {@code true}.;protected boolean alwaysReplaceResource(final Response response) {_        return true__    };a,useful,placeholder,for,link,checked,function,s,that,want,to,always,return,code,true,param,response,unused,return,always,code,true;protected,boolean,always,replace,resource,final,response,response,return,true
PublishableHttpResource -> protected void checkForResource(final RestClient client,                                     final ActionListener<Boolean> listener,                                     final Logger logger,                                     final String resourceBasePath,                                     final String resourceName,                                     final String resourceType,                                     final String resourceOwnerName,                                     final String resourceOwnerType,                                     final Set<Integer> exists,                                     final Set<Integer> doesNotExist,                                     final CheckedFunction<Response, Boolean, IOException> responseChecker,                                     final CheckedFunction<Response, Boolean, IOException> doesNotExistResponseChecker);1543346894;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint._<p>_This provides the base-level check for any resource that cares about existence and also its contents.__@param client The REST client to make the request(s)._@param listener Returns {@code true} if the resource was successfully published. {@code false} otherwise._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template"), if any._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@param exists Response codes that represent {@code EXISTS}._@param doesNotExist Response codes that represent {@code DOES_NOT_EXIST}._@param responseChecker Returns {@code true} if the resource should be replaced._@param doesNotExistResponseChecker Returns {@code true} if the resource should be replaced.;protected void checkForResource(final RestClient client,_                                    final ActionListener<Boolean> listener,_                                    final Logger logger,_                                    final String resourceBasePath,_                                    final String resourceName,_                                    final String resourceType,_                                    final String resourceOwnerName,_                                    final String resourceOwnerType,_                                    final Set<Integer> exists,_                                    final Set<Integer> doesNotExist,_                                    final CheckedFunction<Response, Boolean, IOException> responseChecker,_                                    final CheckedFunction<Response, Boolean, IOException> doesNotExistResponseChecker) {_        logger.trace("checking if {} [{}] exists on the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___        final Request request = new Request("GET", resourceBasePath + "/" + resourceName)__        addParameters(request)__        _        final Set<Integer> expectedResponseCodes = Sets.union(exists, doesNotExist)__        request.addParameter("ignore", expectedResponseCodes.stream().map(i -> i.toString()).collect(Collectors.joining(",")))___        client.performRequestAsync(request, new ResponseListener() {__            @Override_            public void onSuccess(final Response response) {_                try {_                    final int statusCode = response.getStatusLine().getStatusCode()___                    _                    if (exists.contains(statusCode)) {_                        logger.debug("{} [{}] found on the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                        _                        listener.onResponse(false == responseChecker.apply(response))___                    } else if (doesNotExist.contains(statusCode)) {_                        logger.debug("{} [{}] does not exist on the [{}] {}",_                                     resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                        _                        listener.onResponse(false == doesNotExistResponseChecker.apply(response))__                    } else {_                        onFailure(new ResponseException(response))__                    }_                } catch (Exception e) {_                    logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to parse [{}/{}] on the [{}]",_                                                                              resourceBasePath, resourceName, resourceOwnerName),_                                 e)___                    onFailure(e)__                }_            }__            @Override_            public void onFailure(final Exception exception) {_                if (exception instanceof ResponseException) {_                    final Response response = ((ResponseException)exception).getResponse()__                    final int statusCode = response.getStatusLine().getStatusCode()___                    logger.error((Supplier<?>) () ->_                                 new ParameterizedMessage("failed to verify {} [{}] on the [{}] {} with status code [{}]",_                                                          resourceType, resourceName, resourceOwnerName, resourceOwnerType, statusCode),_                                 exception)__                } else {_                    logger.error((Supplier<?>) () ->_                                 new ParameterizedMessage("failed to verify {} [{}] on the [{}] {}",_                                                          resourceType, resourceName, resourceOwnerName, resourceOwnerType),_                                 exception)__                }__                listener.onFailure(exception)__            }__        })__    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,p,this,provides,the,base,level,check,for,any,resource,that,cares,about,existence,and,also,its,contents,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,the,resource,was,successfully,published,code,false,otherwise,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,if,any,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,param,exists,response,codes,that,represent,code,exists,param,does,not,exist,response,codes,that,represent,code,param,response,checker,returns,code,true,if,the,resource,should,be,replaced,param,does,not,exist,response,checker,returns,code,true,if,the,resource,should,be,replaced;protected,void,check,for,resource,final,rest,client,client,final,action,listener,boolean,listener,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,final,set,integer,exists,final,set,integer,does,not,exist,final,checked,function,response,boolean,ioexception,response,checker,final,checked,function,response,boolean,ioexception,does,not,exist,response,checker,logger,trace,checking,if,exists,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,final,request,request,new,request,get,resource,base,path,resource,name,add,parameters,request,final,set,integer,expected,response,codes,sets,union,exists,does,not,exist,request,add,parameter,ignore,expected,response,codes,stream,map,i,i,to,string,collect,collectors,joining,client,perform,request,async,request,new,response,listener,override,public,void,on,success,final,response,response,try,final,int,status,code,response,get,status,line,get,status,code,if,exists,contains,status,code,logger,debug,found,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,listener,on,response,false,response,checker,apply,response,else,if,does,not,exist,contains,status,code,logger,debug,does,not,exist,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,listener,on,response,false,does,not,exist,response,checker,apply,response,else,on,failure,new,response,exception,response,catch,exception,e,logger,error,supplier,new,parameterized,message,failed,to,parse,on,the,resource,base,path,resource,name,resource,owner,name,e,on,failure,e,override,public,void,on,failure,final,exception,exception,if,exception,instanceof,response,exception,final,response,response,response,exception,exception,get,response,final,int,status,code,response,get,status,line,get,status,code,logger,error,supplier,new,parameterized,message,failed,to,verify,on,the,with,status,code,resource,type,resource,name,resource,owner,name,resource,owner,type,status,code,exception,else,logger,error,supplier,new,parameterized,message,failed,to,verify,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,exception,listener,on,failure,exception
PublishableHttpResource -> protected void checkForResource(final RestClient client,                                     final ActionListener<Boolean> listener,                                     final Logger logger,                                     final String resourceBasePath,                                     final String resourceName,                                     final String resourceType,                                     final String resourceOwnerName,                                     final String resourceOwnerType,                                     final Set<Integer> exists,                                     final Set<Integer> doesNotExist,                                     final CheckedFunction<Response, Boolean, IOException> responseChecker,                                     final CheckedFunction<Response, Boolean, IOException> doesNotExistResponseChecker);1550177579;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint._<p>_This provides the base-level check for any resource that cares about existence and also its contents.__@param client The REST client to make the request(s)._@param listener Returns {@code true} if the resource was successfully published. {@code false} otherwise._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template"), if any._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@param exists Response codes that represent {@code EXISTS}._@param doesNotExist Response codes that represent {@code DOES_NOT_EXIST}._@param responseChecker Returns {@code true} if the resource should be replaced._@param doesNotExistResponseChecker Returns {@code true} if the resource should be replaced.;protected void checkForResource(final RestClient client,_                                    final ActionListener<Boolean> listener,_                                    final Logger logger,_                                    final String resourceBasePath,_                                    final String resourceName,_                                    final String resourceType,_                                    final String resourceOwnerName,_                                    final String resourceOwnerType,_                                    final Set<Integer> exists,_                                    final Set<Integer> doesNotExist,_                                    final CheckedFunction<Response, Boolean, IOException> responseChecker,_                                    final CheckedFunction<Response, Boolean, IOException> doesNotExistResponseChecker) {_        logger.trace("checking if {} [{}] exists on the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___        final Request request = new Request("GET", resourceBasePath + "/" + resourceName)__        addDefaultParameters(request)___        _        final Set<Integer> expectedResponseCodes = Sets.union(exists, doesNotExist)__        request.addParameter("ignore", expectedResponseCodes.stream().map(i -> i.toString()).collect(Collectors.joining(",")))___        client.performRequestAsync(request, new ResponseListener() {__            @Override_            public void onSuccess(final Response response) {_                try {_                    final int statusCode = response.getStatusLine().getStatusCode()___                    _                    if (exists.contains(statusCode)) {_                        logger.debug("{} [{}] found on the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                        _                        listener.onResponse(false == responseChecker.apply(response))___                    } else if (doesNotExist.contains(statusCode)) {_                        logger.debug("{} [{}] does not exist on the [{}] {}",_                                     resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                        _                        listener.onResponse(false == doesNotExistResponseChecker.apply(response))__                    } else {_                        onFailure(new ResponseException(response))__                    }_                } catch (Exception e) {_                    logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to parse [{}/{}] on the [{}]",_                                                                              resourceBasePath, resourceName, resourceOwnerName),_                                 e)___                    onFailure(e)__                }_            }__            @Override_            public void onFailure(final Exception exception) {_                if (exception instanceof ResponseException) {_                    final Response response = ((ResponseException)exception).getResponse()__                    final int statusCode = response.getStatusLine().getStatusCode()___                    logger.error((Supplier<?>) () ->_                                 new ParameterizedMessage("failed to verify {} [{}] on the [{}] {} with status code [{}]",_                                                          resourceType, resourceName, resourceOwnerName, resourceOwnerType, statusCode),_                                 exception)__                } else {_                    logger.error((Supplier<?>) () ->_                                 new ParameterizedMessage("failed to verify {} [{}] on the [{}] {}",_                                                          resourceType, resourceName, resourceOwnerName, resourceOwnerType),_                                 exception)__                }__                listener.onFailure(exception)__            }__        })__    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,p,this,provides,the,base,level,check,for,any,resource,that,cares,about,existence,and,also,its,contents,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,the,resource,was,successfully,published,code,false,otherwise,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,if,any,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,param,exists,response,codes,that,represent,code,exists,param,does,not,exist,response,codes,that,represent,code,param,response,checker,returns,code,true,if,the,resource,should,be,replaced,param,does,not,exist,response,checker,returns,code,true,if,the,resource,should,be,replaced;protected,void,check,for,resource,final,rest,client,client,final,action,listener,boolean,listener,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,final,set,integer,exists,final,set,integer,does,not,exist,final,checked,function,response,boolean,ioexception,response,checker,final,checked,function,response,boolean,ioexception,does,not,exist,response,checker,logger,trace,checking,if,exists,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,final,request,request,new,request,get,resource,base,path,resource,name,add,default,parameters,request,final,set,integer,expected,response,codes,sets,union,exists,does,not,exist,request,add,parameter,ignore,expected,response,codes,stream,map,i,i,to,string,collect,collectors,joining,client,perform,request,async,request,new,response,listener,override,public,void,on,success,final,response,response,try,final,int,status,code,response,get,status,line,get,status,code,if,exists,contains,status,code,logger,debug,found,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,listener,on,response,false,response,checker,apply,response,else,if,does,not,exist,contains,status,code,logger,debug,does,not,exist,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,listener,on,response,false,does,not,exist,response,checker,apply,response,else,on,failure,new,response,exception,response,catch,exception,e,logger,error,supplier,new,parameterized,message,failed,to,parse,on,the,resource,base,path,resource,name,resource,owner,name,e,on,failure,e,override,public,void,on,failure,final,exception,exception,if,exception,instanceof,response,exception,final,response,response,response,exception,exception,get,response,final,int,status,code,response,get,status,line,get,status,code,logger,error,supplier,new,parameterized,message,failed,to,verify,on,the,with,status,code,resource,type,resource,name,resource,owner,name,resource,owner,type,status,code,exception,else,logger,error,supplier,new,parameterized,message,failed,to,verify,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,exception,listener,on,failure,exception
PublishableHttpResource -> protected CheckResponse versionCheckForResource(final RestClient client, final Logger logger,                                                     final String resourceBasePath,                                                     final String resourceName, final String resourceType,                                                     final String resourceOwnerName, final String resourceOwnerType,                                                     final XContent xContent, final int minimumVersion);1524684173;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint with a version greater than or equal_to the expected version._<p>_This provides the base-level check for any resource that does not need to care about its response beyond existence (and likely does_not need to inspect its contents)._<p>_This expects responses in the form of:_<pre><code>__"resourceName": {_"version": 6000002___</code></pre>__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@param xContent The XContent used to parse the response._@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version)._@return Never {@code null}.;protected CheckResponse versionCheckForResource(final RestClient client, final Logger logger,_                                                    final String resourceBasePath,_                                                    final String resourceName, final String resourceType,_                                                    final String resourceOwnerName, final String resourceOwnerType,_                                                    final XContent xContent, final int minimumVersion) {_        final CheckedFunction<Response, Boolean, IOException> responseChecker =_                (response) -> shouldReplaceResource(response, xContent, resourceName, minimumVersion)___        return versionCheckForResource(client, logger, resourceBasePath, resourceName, resourceType, resourceOwnerName, resourceOwnerType,_                                       responseChecker)__    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,with,a,version,greater,than,or,equal,to,the,expected,version,p,this,provides,the,base,level,check,for,any,resource,that,does,not,need,to,care,about,its,response,beyond,existence,and,likely,does,not,need,to,inspect,its,contents,p,this,expects,responses,in,the,form,of,pre,code,resource,name,version,6000002,code,pre,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,param,x,content,the,xcontent,used,to,parse,the,response,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version,return,never,code,null;protected,check,response,version,check,for,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,final,xcontent,x,content,final,int,minimum,version,final,checked,function,response,boolean,ioexception,response,checker,response,should,replace,resource,response,x,content,resource,name,minimum,version,return,version,check,for,resource,client,logger,resource,base,path,resource,name,resource,type,resource,owner,name,resource,owner,type,response,checker
PublishableHttpResource -> protected CheckResponse versionCheckForResource(final RestClient client, final Logger logger,                                                     final String resourceBasePath,                                                     final String resourceName, final String resourceType,                                                     final String resourceOwnerName, final String resourceOwnerType,                                                     final XContent xContent, final int minimumVersion);1532434432;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint with a version greater than or equal_to the expected version._<p>_This provides the base-level check for any resource that does not need to care about its response beyond existence (and likely does_not need to inspect its contents)._<p>_This expects responses in the form of:_<pre><code>__"resourceName": {_"version": 6000002___</code></pre>__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@param xContent The XContent used to parse the response._@param minimumVersion The minimum version allowed without being replaced (expected to be the last updated version)._@return Never {@code null}.;protected CheckResponse versionCheckForResource(final RestClient client, final Logger logger,_                                                    final String resourceBasePath,_                                                    final String resourceName, final String resourceType,_                                                    final String resourceOwnerName, final String resourceOwnerType,_                                                    final XContent xContent, final int minimumVersion) {_        final CheckedFunction<Response, Boolean, IOException> responseChecker =_                (response) -> shouldReplaceResource(response, xContent, resourceName, minimumVersion)___        return versionCheckForResource(client, logger, resourceBasePath, resourceName, resourceType, resourceOwnerName, resourceOwnerType,_                                       responseChecker)__    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,with,a,version,greater,than,or,equal,to,the,expected,version,p,this,provides,the,base,level,check,for,any,resource,that,does,not,need,to,care,about,its,response,beyond,existence,and,likely,does,not,need,to,inspect,its,contents,p,this,expects,responses,in,the,form,of,pre,code,resource,name,version,6000002,code,pre,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,param,x,content,the,xcontent,used,to,parse,the,response,param,minimum,version,the,minimum,version,allowed,without,being,replaced,expected,to,be,the,last,updated,version,return,never,code,null;protected,check,response,version,check,for,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,final,xcontent,x,content,final,int,minimum,version,final,checked,function,response,boolean,ioexception,response,checker,response,should,replace,resource,response,x,content,resource,name,minimum,version,return,version,check,for,resource,client,logger,resource,base,path,resource,name,resource,type,resource,owner,name,resource,owner,type,response,checker
PublishableHttpResource -> protected Tuple<CheckResponse, Response> checkForResource(final RestClient client, final Logger logger,                                                               final String resourceBasePath,                                                               final String resourceName, final String resourceType,                                                               final String resourceOwnerName, final String resourceOwnerType,                                                               final Set<Integer> exists, final Set<Integer> doesNotExist);1524684173;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint._<p>_This provides the base-level check for any resource that cares about existence and also its contents.__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template"), if any._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@param exists Response codes that represent {@code EXISTS}._@param doesNotExist Response codes that represent {@code DOES_NOT_EXIST}._@return Never {@code null} pair containing the checked response and the returned response._The response will only ever be {@code null} if none was returned._@see #simpleCheckForResource(RestClient, Logger, String, String, String, String, String);protected Tuple<CheckResponse, Response> checkForResource(final RestClient client, final Logger logger,_                                                              final String resourceBasePath,_                                                              final String resourceName, final String resourceType,_                                                              final String resourceOwnerName, final String resourceOwnerType,_                                                              final Set<Integer> exists, final Set<Integer> doesNotExist) {_        logger.trace("checking if {} [{}] exists on the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___        final Set<Integer> expectedResponseCodes = Sets.union(exists, doesNotExist)__        _        final Map<String, String> getParameters = new HashMap<>(parameters)__        getParameters.put("ignore", expectedResponseCodes.stream().map(i -> i.toString()).collect(Collectors.joining(",")))___        try {_            final Response response = client.performRequest("GET", resourceBasePath + "/" + resourceName, getParameters)__            final int statusCode = response.getStatusLine().getStatusCode()___            _            if (exists.contains(statusCode)) {_                logger.debug("{} [{}] found on the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                return new Tuple<>(CheckResponse.EXISTS, response)__            } else if (doesNotExist.contains(statusCode)) {_                logger.debug("{} [{}] does not exist on the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                return new Tuple<>(CheckResponse.DOES_NOT_EXIST, response)__            } else {_                throw new ResponseException(response)__            }_        } catch (final ResponseException e) {_            final Response response = e.getResponse()__            final int statusCode = response.getStatusLine().getStatusCode()___            logger.error((Supplier<?>) () ->_                    new ParameterizedMessage("failed to verify {} [{}] on the [{}] {} with status code [{}]",_                                             resourceType, resourceName, resourceOwnerName, resourceOwnerType, statusCode),_                    e)___            _            return new Tuple<>(CheckResponse.ERROR, response)__        } catch (IOException | RuntimeException e) {_            logger.error((Supplier<?>) () ->_                    new ParameterizedMessage("failed to verify {} [{}] on the [{}] {}",_                                             resourceType, resourceName, resourceOwnerName, resourceOwnerType),_                    e)___            _            return new Tuple<>(CheckResponse.ERROR, null)__        }_    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,p,this,provides,the,base,level,check,for,any,resource,that,cares,about,existence,and,also,its,contents,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,if,any,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,param,exists,response,codes,that,represent,code,exists,param,does,not,exist,response,codes,that,represent,code,return,never,code,null,pair,containing,the,checked,response,and,the,returned,response,the,response,will,only,ever,be,code,null,if,none,was,returned,see,simple,check,for,resource,rest,client,logger,string,string,string,string,string;protected,tuple,check,response,response,check,for,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,final,set,integer,exists,final,set,integer,does,not,exist,logger,trace,checking,if,exists,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,final,set,integer,expected,response,codes,sets,union,exists,does,not,exist,final,map,string,string,get,parameters,new,hash,map,parameters,get,parameters,put,ignore,expected,response,codes,stream,map,i,i,to,string,collect,collectors,joining,try,final,response,response,client,perform,request,get,resource,base,path,resource,name,get,parameters,final,int,status,code,response,get,status,line,get,status,code,if,exists,contains,status,code,logger,debug,found,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,return,new,tuple,check,response,exists,response,else,if,does,not,exist,contains,status,code,logger,debug,does,not,exist,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,return,new,tuple,check,response,response,else,throw,new,response,exception,response,catch,final,response,exception,e,final,response,response,e,get,response,final,int,status,code,response,get,status,line,get,status,code,logger,error,supplier,new,parameterized,message,failed,to,verify,on,the,with,status,code,resource,type,resource,name,resource,owner,name,resource,owner,type,status,code,e,return,new,tuple,check,response,error,response,catch,ioexception,runtime,exception,e,logger,error,supplier,new,parameterized,message,failed,to,verify,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,e,return,new,tuple,check,response,error,null
PublishableHttpResource -> protected Tuple<CheckResponse, Response> checkForResource(final RestClient client, final Logger logger,                                                               final String resourceBasePath,                                                               final String resourceName, final String resourceType,                                                               final String resourceOwnerName, final String resourceOwnerType,                                                               final Set<Integer> exists, final Set<Integer> doesNotExist);1532434432;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint._<p>_This provides the base-level check for any resource that cares about existence and also its contents.__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template"), if any._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@param exists Response codes that represent {@code EXISTS}._@param doesNotExist Response codes that represent {@code DOES_NOT_EXIST}._@return Never {@code null} pair containing the checked response and the returned response._The response will only ever be {@code null} if none was returned._@see #simpleCheckForResource(RestClient, Logger, String, String, String, String, String);protected Tuple<CheckResponse, Response> checkForResource(final RestClient client, final Logger logger,_                                                              final String resourceBasePath,_                                                              final String resourceName, final String resourceType,_                                                              final String resourceOwnerName, final String resourceOwnerType,_                                                              final Set<Integer> exists, final Set<Integer> doesNotExist) {_        logger.trace("checking if {} [{}] exists on the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)____        final Request request = new Request("GET", resourceBasePath + "/" + resourceName)__        addParameters(request)__        _        final Set<Integer> expectedResponseCodes = Sets.union(exists, doesNotExist)__        request.addParameter("ignore", expectedResponseCodes.stream().map(i -> i.toString()).collect(Collectors.joining(",")))___        try {_            final Response response = client.performRequest(request)__            final int statusCode = response.getStatusLine().getStatusCode()___            _            if (exists.contains(statusCode)) {_                logger.debug("{} [{}] found on the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                return new Tuple<>(CheckResponse.EXISTS, response)__            } else if (doesNotExist.contains(statusCode)) {_                logger.debug("{} [{}] does not exist on the [{}] {}", resourceType, resourceName, resourceOwnerName, resourceOwnerType)___                return new Tuple<>(CheckResponse.DOES_NOT_EXIST, response)__            } else {_                throw new ResponseException(response)__            }_        } catch (final ResponseException e) {_            final Response response = e.getResponse()__            final int statusCode = response.getStatusLine().getStatusCode()___            logger.error((Supplier<?>) () ->_                    new ParameterizedMessage("failed to verify {} [{}] on the [{}] {} with status code [{}]",_                                             resourceType, resourceName, resourceOwnerName, resourceOwnerType, statusCode),_                    e)___            _            return new Tuple<>(CheckResponse.ERROR, response)__        } catch (IOException | RuntimeException e) {_            logger.error((Supplier<?>) () ->_                    new ParameterizedMessage("failed to verify {} [{}] on the [{}] {}",_                                             resourceType, resourceName, resourceOwnerName, resourceOwnerType),_                    e)___            _            return new Tuple<>(CheckResponse.ERROR, null)__        }_    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,p,this,provides,the,base,level,check,for,any,resource,that,cares,about,existence,and,also,its,contents,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,if,any,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,param,exists,response,codes,that,represent,code,exists,param,does,not,exist,response,codes,that,represent,code,return,never,code,null,pair,containing,the,checked,response,and,the,returned,response,the,response,will,only,ever,be,code,null,if,none,was,returned,see,simple,check,for,resource,rest,client,logger,string,string,string,string,string;protected,tuple,check,response,response,check,for,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,final,set,integer,exists,final,set,integer,does,not,exist,logger,trace,checking,if,exists,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,final,request,request,new,request,get,resource,base,path,resource,name,add,parameters,request,final,set,integer,expected,response,codes,sets,union,exists,does,not,exist,request,add,parameter,ignore,expected,response,codes,stream,map,i,i,to,string,collect,collectors,joining,try,final,response,response,client,perform,request,request,final,int,status,code,response,get,status,line,get,status,code,if,exists,contains,status,code,logger,debug,found,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,return,new,tuple,check,response,exists,response,else,if,does,not,exist,contains,status,code,logger,debug,does,not,exist,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,return,new,tuple,check,response,response,else,throw,new,response,exception,response,catch,final,response,exception,e,final,response,response,e,get,response,final,int,status,code,response,get,status,line,get,status,code,logger,error,supplier,new,parameterized,message,failed,to,verify,on,the,with,status,code,resource,type,resource,name,resource,owner,name,resource,owner,type,status,code,e,return,new,tuple,check,response,error,response,catch,ioexception,runtime,exception,e,logger,error,supplier,new,parameterized,message,failed,to,verify,on,the,resource,type,resource,name,resource,owner,name,resource,owner,type,e,return,new,tuple,check,response,error,null
PublishableHttpResource -> protected CheckResponse simpleCheckForResource(final RestClient client, final Logger logger,                                                    final String resourceBasePath,                                                    final String resourceName, final String resourceType,                                                    final String resourceOwnerName, final String resourceOwnerType);1524684173;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint._<p>_This provides the base-level check for any resource that does not need to care about its response beyond existence (and likely does_not need to inspect its contents).__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@return Never {@code null}.;protected CheckResponse simpleCheckForResource(final RestClient client, final Logger logger,_                                                   final String resourceBasePath,_                                                   final String resourceName, final String resourceType,_                                                   final String resourceOwnerName, final String resourceOwnerType) {_        return checkForResource(client, logger, resourceBasePath, resourceName, resourceType, resourceOwnerName, resourceOwnerType,_                                GET_EXISTS, GET_DOES_NOT_EXIST)_                    .v1()__    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,p,this,provides,the,base,level,check,for,any,resource,that,does,not,need,to,care,about,its,response,beyond,existence,and,likely,does,not,need,to,inspect,its,contents,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,return,never,code,null;protected,check,response,simple,check,for,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,return,check,for,resource,client,logger,resource,base,path,resource,name,resource,type,resource,owner,name,resource,owner,type,v1
PublishableHttpResource -> protected CheckResponse simpleCheckForResource(final RestClient client, final Logger logger,                                                    final String resourceBasePath,                                                    final String resourceName, final String resourceType,                                                    final String resourceOwnerName, final String resourceOwnerType);1532434432;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint._<p>_This provides the base-level check for any resource that does not need to care about its response beyond existence (and likely does_not need to inspect its contents).__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@return Never {@code null}.;protected CheckResponse simpleCheckForResource(final RestClient client, final Logger logger,_                                                   final String resourceBasePath,_                                                   final String resourceName, final String resourceType,_                                                   final String resourceOwnerName, final String resourceOwnerType) {_        return checkForResource(client, logger, resourceBasePath, resourceName, resourceType, resourceOwnerName, resourceOwnerType,_                                GET_EXISTS, GET_DOES_NOT_EXIST)_                    .v1()__    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,p,this,provides,the,base,level,check,for,any,resource,that,does,not,need,to,care,about,its,response,beyond,existence,and,likely,does,not,need,to,inspect,its,contents,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,return,never,code,null;protected,check,response,simple,check,for,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,return,check,for,resource,client,logger,resource,base,path,resource,name,resource,type,resource,owner,name,resource,owner,type,v1
PublishableHttpResource -> @Override     protected final void doCheckAndPublish(final RestClient client, final ActionListener<Boolean> listener);1543346894;Perform whatever is necessary to check and publish this {@link PublishableHttpResource}.__@param client The REST client to make the request(s)._@param listener Returns {@code true} if the resource is available for use. {@code false} to stop.;@Override_    protected final void doCheckAndPublish(final RestClient client, final ActionListener<Boolean> listener) {_        doCheck(client, ActionListener.wrap(exists -> {_            if (exists) {_                _                listener.onResponse(true)__            } else {_                doPublish(client, listener)__            }_        }, listener::onFailure))__    };perform,whatever,is,necessary,to,check,and,publish,this,link,publishable,http,resource,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,the,resource,is,available,for,use,code,false,to,stop;override,protected,final,void,do,check,and,publish,final,rest,client,client,final,action,listener,boolean,listener,do,check,client,action,listener,wrap,exists,if,exists,listener,on,response,true,else,do,publish,client,listener,listener,on,failure
PublishableHttpResource -> @Override     protected final void doCheckAndPublish(final RestClient client, final ActionListener<Boolean> listener);1550177579;Perform whatever is necessary to check and publish this {@link PublishableHttpResource}.__@param client The REST client to make the request(s)._@param listener Returns {@code true} if the resource is available for use. {@code false} to stop.;@Override_    protected final void doCheckAndPublish(final RestClient client, final ActionListener<Boolean> listener) {_        doCheck(client, ActionListener.wrap(exists -> {_            if (exists) {_                _                listener.onResponse(true)__            } else {_                doPublish(client, listener)__            }_        }, listener::onFailure))__    };perform,whatever,is,necessary,to,check,and,publish,this,link,publishable,http,resource,param,client,the,rest,client,to,make,the,request,s,param,listener,returns,code,true,if,the,resource,is,available,for,use,code,false,to,stop;override,protected,final,void,do,check,and,publish,final,rest,client,client,final,action,listener,boolean,listener,do,check,client,action,listener,wrap,exists,if,exists,listener,on,response,true,else,do,publish,client,listener,listener,on,failure
PublishableHttpResource -> @Override     protected final boolean doCheckAndPublish(final RestClient client);1524684173;Perform whatever is necessary to check and publish this {@link PublishableHttpResource}.__@param client The REST client to make the request(s)._@return {@code true} if the resource is available for use. {@code false} to stop.;@Override_    protected final boolean doCheckAndPublish(final RestClient client) {_        final CheckResponse check = doCheck(client)___        _        return check != CheckResponse.ERROR && (check == CheckResponse.EXISTS || doPublish(client))__    };perform,whatever,is,necessary,to,check,and,publish,this,link,publishable,http,resource,param,client,the,rest,client,to,make,the,request,s,return,code,true,if,the,resource,is,available,for,use,code,false,to,stop;override,protected,final,boolean,do,check,and,publish,final,rest,client,client,final,check,response,check,do,check,client,return,check,check,response,error,check,check,response,exists,do,publish,client
PublishableHttpResource -> @Override     protected final boolean doCheckAndPublish(final RestClient client);1532434432;Perform whatever is necessary to check and publish this {@link PublishableHttpResource}.__@param client The REST client to make the request(s)._@return {@code true} if the resource is available for use. {@code false} to stop.;@Override_    protected final boolean doCheckAndPublish(final RestClient client) {_        final CheckResponse check = doCheck(client)___        _        return check != CheckResponse.ERROR && (check == CheckResponse.EXISTS || doPublish(client))__    };perform,whatever,is,necessary,to,check,and,publish,this,link,publishable,http,resource,param,client,the,rest,client,to,make,the,request,s,return,code,true,if,the,resource,is,available,for,use,code,false,to,stop;override,protected,final,boolean,do,check,and,publish,final,rest,client,client,final,check,response,check,do,check,client,return,check,check,response,error,check,check,response,exists,do,publish,client
PublishableHttpResource -> public Map<String, String> getParameters();1524684173;Get the default parameters to use with every request.__@return Never {@code null}.;public Map<String, String> getParameters() {_        return parameters__    };get,the,default,parameters,to,use,with,every,request,return,never,code,null;public,map,string,string,get,parameters,return,parameters
PublishableHttpResource -> public Map<String, String> getParameters();1532434432;Get the default parameters to use with every request.__@return Never {@code null}.;public Map<String, String> getParameters() {_        return parameters__    };get,the,default,parameters,to,use,with,every,request,return,never,code,null;public,map,string,string,get,parameters,return,parameters
PublishableHttpResource -> public Map<String, String> getParameters();1543346894;Get the default parameters to use with every request.__@return Never {@code null}.;public Map<String, String> getParameters() {_        return parameters__    };get,the,default,parameters,to,use,with,every,request,return,never,code,null;public,map,string,string,get,parameters,return,parameters
PublishableHttpResource -> protected CheckResponse versionCheckForResource(final RestClient client, final Logger logger,                                                     final String resourceBasePath,                                                     final String resourceName, final String resourceType,                                                     final String resourceOwnerName, final String resourceOwnerType,                                                     final CheckedFunction<Response, Boolean, IOException> responseChecker);1524684173;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint with a version greater than or equal_to the expected version._<p>_This provides the base-level check for any resource that does not need to care about its response beyond existence (and likely does_not need to inspect its contents)._<p>_This expects responses in the form of:_<pre><code>__"resourceName": {_"version": 6000002___</code></pre>__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@param responseChecker Determine if the resource should be replaced given the response._@return Never {@code null}.;protected CheckResponse versionCheckForResource(final RestClient client, final Logger logger,_                                                    final String resourceBasePath,_                                                    final String resourceName, final String resourceType,_                                                    final String resourceOwnerName, final String resourceOwnerType,_                                                    final CheckedFunction<Response, Boolean, IOException> responseChecker) {_        final Tuple<CheckResponse, Response> response =_                checkForResource(client, logger, resourceBasePath, resourceName, resourceType, resourceOwnerName, resourceOwnerType,_                                 GET_EXISTS, GET_DOES_NOT_EXIST)___        final CheckResponse checkResponse = response.v1()___        _        if (checkResponse == CheckResponse.EXISTS) {_            try {_                _                if (responseChecker.apply(response.v2())) {_                    return CheckResponse.DOES_NOT_EXIST__                }_            } catch (IOException | RuntimeException e) {_                logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to parse [{}/{}] on the [{}]",_                                                                          resourceBasePath, resourceName, resourceOwnerName), e)___                return CheckResponse.ERROR__            }_        }__        return checkResponse__    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,with,a,version,greater,than,or,equal,to,the,expected,version,p,this,provides,the,base,level,check,for,any,resource,that,does,not,need,to,care,about,its,response,beyond,existence,and,likely,does,not,need,to,inspect,its,contents,p,this,expects,responses,in,the,form,of,pre,code,resource,name,version,6000002,code,pre,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,param,response,checker,determine,if,the,resource,should,be,replaced,given,the,response,return,never,code,null;protected,check,response,version,check,for,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,final,checked,function,response,boolean,ioexception,response,checker,final,tuple,check,response,response,response,check,for,resource,client,logger,resource,base,path,resource,name,resource,type,resource,owner,name,resource,owner,type,final,check,response,check,response,response,v1,if,check,response,check,response,exists,try,if,response,checker,apply,response,v2,return,check,response,catch,ioexception,runtime,exception,e,logger,error,supplier,new,parameterized,message,failed,to,parse,on,the,resource,base,path,resource,name,resource,owner,name,e,return,check,response,error,return,check,response
PublishableHttpResource -> protected CheckResponse versionCheckForResource(final RestClient client, final Logger logger,                                                     final String resourceBasePath,                                                     final String resourceName, final String resourceType,                                                     final String resourceOwnerName, final String resourceOwnerType,                                                     final CheckedFunction<Response, Boolean, IOException> responseChecker);1532434432;Determine if the current {@code resourceName} exists at the {@code resourceBasePath} endpoint with a version greater than or equal_to the expected version._<p>_This provides the base-level check for any resource that does not need to care about its response beyond existence (and likely does_not need to inspect its contents)._<p>_This expects responses in the form of:_<pre><code>__"resourceName": {_"version": 6000002___</code></pre>__@param client The REST client to make the request(s)._@param logger The logger to use for status messages._@param resourceBasePath The base path/endpoint to check for the resource (e.g., "/_template")._@param resourceName The name of the resource (e.g., "template123")._@param resourceType The type of resource (e.g., "monitoring template")._@param resourceOwnerName The user-recognizeable resource owner._@param resourceOwnerType The type of resource owner being dealt with (e.g., "monitoring cluster")._@param responseChecker Determine if the resource should be replaced given the response._@return Never {@code null}.;protected CheckResponse versionCheckForResource(final RestClient client, final Logger logger,_                                                    final String resourceBasePath,_                                                    final String resourceName, final String resourceType,_                                                    final String resourceOwnerName, final String resourceOwnerType,_                                                    final CheckedFunction<Response, Boolean, IOException> responseChecker) {_        final Tuple<CheckResponse, Response> response =_                checkForResource(client, logger, resourceBasePath, resourceName, resourceType, resourceOwnerName, resourceOwnerType,_                                 GET_EXISTS, GET_DOES_NOT_EXIST)___        final CheckResponse checkResponse = response.v1()___        _        if (checkResponse == CheckResponse.EXISTS) {_            try {_                _                if (responseChecker.apply(response.v2())) {_                    return CheckResponse.DOES_NOT_EXIST__                }_            } catch (IOException | RuntimeException e) {_                logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to parse [{}/{}] on the [{}]",_                                                                          resourceBasePath, resourceName, resourceOwnerName), e)___                return CheckResponse.ERROR__            }_        }__        return checkResponse__    };determine,if,the,current,code,resource,name,exists,at,the,code,resource,base,path,endpoint,with,a,version,greater,than,or,equal,to,the,expected,version,p,this,provides,the,base,level,check,for,any,resource,that,does,not,need,to,care,about,its,response,beyond,existence,and,likely,does,not,need,to,inspect,its,contents,p,this,expects,responses,in,the,form,of,pre,code,resource,name,version,6000002,code,pre,param,client,the,rest,client,to,make,the,request,s,param,logger,the,logger,to,use,for,status,messages,param,resource,base,path,the,base,path,endpoint,to,check,for,the,resource,e,g,param,resource,name,the,name,of,the,resource,e,g,template123,param,resource,type,the,type,of,resource,e,g,monitoring,template,param,resource,owner,name,the,user,recognizeable,resource,owner,param,resource,owner,type,the,type,of,resource,owner,being,dealt,with,e,g,monitoring,cluster,param,response,checker,determine,if,the,resource,should,be,replaced,given,the,response,return,never,code,null;protected,check,response,version,check,for,resource,final,rest,client,client,final,logger,logger,final,string,resource,base,path,final,string,resource,name,final,string,resource,type,final,string,resource,owner,name,final,string,resource,owner,type,final,checked,function,response,boolean,ioexception,response,checker,final,tuple,check,response,response,response,check,for,resource,client,logger,resource,base,path,resource,name,resource,type,resource,owner,name,resource,owner,type,final,check,response,check,response,response,v1,if,check,response,check,response,exists,try,if,response,checker,apply,response,v2,return,check,response,catch,ioexception,runtime,exception,e,logger,error,supplier,new,parameterized,message,failed,to,parse,on,the,resource,base,path,resource,name,resource,owner,name,e,return,check,response,error,return,check,response
