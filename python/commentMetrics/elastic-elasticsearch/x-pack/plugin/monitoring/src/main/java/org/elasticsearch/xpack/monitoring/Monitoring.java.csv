commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;1;// overridable by tests ;// overridable by tests protected SSLService getSslService() {     return XPackPlugin.getSharedSslService(). }
false;protected;0;1;;protected XPackLicenseState getLicenseState() {     return XPackPlugin.getSharedLicenseState(). }
false;protected;0;1;;protected LicenseService getLicenseService() {     return XPackPlugin.getSharedLicenseService(). }
false;;0;3;;boolean isEnabled() {     return enabled. }
false;;0;3;;boolean isTransportClient() {     return transportClientMode. }
false;public;0;12;;@Override public Collection<Module> createGuiceModules() {     List<Module> modules = new ArrayList<>().     modules.add(b -> {         XPackPlugin.bindFeatureSet(b, MonitoringFeatureSet.class).         if (transportClientMode || enabled == false) {             b.bind(MonitoringService.class).toProvider(Providers.of(null)).             b.bind(Exporters.class).toProvider(Providers.of(null)).         }     }).     return modules. }
false;public;9;32;;@Override public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool, ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry, Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry) {     if (enabled == false) {         return Collections.emptyList().     }     final ClusterSettings clusterSettings = clusterService.getClusterSettings().     final CleanerService cleanerService = new CleanerService(settings, clusterSettings, threadPool, getLicenseState()).     final SSLService dynamicSSLService = getSslService().createDynamicSSLService().     Map<String, Exporter.Factory> exporterFactories = new HashMap<>().     exporterFactories.put(HttpExporter.TYPE, config -> new HttpExporter(config, dynamicSSLService, threadPool.getThreadContext())).     exporterFactories.put(LocalExporter.TYPE, config -> new LocalExporter(config, client, cleanerService)).     final Exporters exporters = new Exporters(settings, exporterFactories, clusterService, getLicenseState(), threadPool.getThreadContext()).     Set<Collector> collectors = new HashSet<>().     collectors.add(new IndexStatsCollector(clusterService, getLicenseState(), client)).     collectors.add(new ClusterStatsCollector(settings, clusterService, getLicenseState(), client, getLicenseService())).     collectors.add(new ShardsCollector(clusterService, getLicenseState())).     collectors.add(new NodeStatsCollector(clusterService, getLicenseState(), client)).     collectors.add(new IndexRecoveryCollector(clusterService, getLicenseState(), client)).     collectors.add(new JobStatsCollector(settings, clusterService, getLicenseState(), client)).     collectors.add(new StatsCollector(settings, clusterService, getLicenseState(), client)).     final MonitoringService monitoringService = new MonitoringService(settings, clusterService, threadPool, collectors, exporters).     return Arrays.asList(monitoringService, exporters, cleanerService). }
false;public;0;7;;@Override public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {     if (false == enabled) {         return emptyList().     }     return singletonList(new ActionHandler<>(MonitoringBulkAction.INSTANCE, TransportMonitoringBulkAction.class)). }
false;public;7;9;;@Override public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings, IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver, Supplier<DiscoveryNodes> nodesInCluster) {     if (false == enabled) {         return emptyList().     }     return singletonList(new RestMonitoringBulkAction(settings, restController)). }
false;public;0;19;;@Override public List<Setting<?>> getSettings() {     List<Setting<?>> settings = new ArrayList<>().     settings.add(MonitoringField.HISTORY_DURATION).     settings.add(CLEAN_WATCHER_HISTORY).     settings.add(MonitoringService.ENABLED).     settings.add(MonitoringService.ELASTICSEARCH_COLLECTION_ENABLED).     settings.add(MonitoringService.INTERVAL).     settings.add(Collector.INDICES).     settings.add(ClusterStatsCollector.CLUSTER_STATS_TIMEOUT).     settings.add(IndexRecoveryCollector.INDEX_RECOVERY_TIMEOUT).     settings.add(IndexRecoveryCollector.INDEX_RECOVERY_ACTIVE_ONLY).     settings.add(IndexStatsCollector.INDEX_STATS_TIMEOUT).     settings.add(JobStatsCollector.JOB_STATS_TIMEOUT).     settings.add(StatsCollector.CCR_STATS_TIMEOUT).     settings.add(NodeStatsCollector.NODE_STATS_TIMEOUT).     settings.addAll(Exporters.getSettings()).     return Collections.unmodifiableList(settings). }
false;public;0;5;;@Override public List<String> getSettingsFilter() {     final String exportersKey = "xpack.monitoring.exporters.".     return Collections.unmodifiableList(Arrays.asList(exportersKey + "*.auth.*", exportersKey + "*.ssl.*")). }
