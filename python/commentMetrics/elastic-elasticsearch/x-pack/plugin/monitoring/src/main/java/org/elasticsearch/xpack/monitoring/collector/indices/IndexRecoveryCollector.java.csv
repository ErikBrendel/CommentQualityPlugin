commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;boolean getActiveRecoveriesOnly() {     return clusterService.getClusterSettings().get(INDEX_RECOVERY_ACTIVE_ONLY). }
false;protected;1;4;;@Override protected boolean shouldCollect(final boolean isElectedMaster) {     return isElectedMaster && super.shouldCollect(isElectedMaster). }
false;protected;3;17;;@Override protected Collection<MonitoringDoc> doCollect(final MonitoringDoc.Node node, final long interval, final ClusterState clusterState) throws Exception {     List<MonitoringDoc> results = new ArrayList<>(1).     RecoveryResponse recoveryResponse = client.admin().indices().prepareRecoveries().setIndices(getCollectionIndices()).setIndicesOptions(IndicesOptions.lenientExpandOpen()).setActiveOnly(getActiveRecoveriesOnly()).get(getCollectionTimeout()).     if (recoveryResponse.hasRecoveries()) {         final String clusterUuid = clusterUuid(clusterState).         results.add(new IndexRecoveryMonitoringDoc(clusterUuid, timestamp(), interval, node, recoveryResponse)).     }     return Collections.unmodifiableCollection(results). }
