commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;8;;@Override protected boolean shouldCollect(final boolean isElectedMaster) {     // This can only run when monitoring is allowed + ML is enabled/allowed, but also only on the elected master node     return isElectedMaster && super.shouldCollect(isElectedMaster) && XPackSettings.MACHINE_LEARNING_ENABLED.get(settings) && licenseState.isMachineLearningAllowed(). }
false;protected;3;18;;@Override protected List<MonitoringDoc> doCollect(final MonitoringDoc.Node node, final long interval, final ClusterState clusterState) throws Exception {     // fetch details about all jobs     try (ThreadContext.StoredContext ignore = stashWithOrigin(threadContext, MONITORING_ORIGIN)) {         final GetJobsStatsAction.Response jobs = client.getJobsStats(new GetJobsStatsAction.Request(MetaData.ALL)).actionGet(getCollectionTimeout()).         final long timestamp = timestamp().         final String clusterUuid = clusterUuid(clusterState).         return jobs.getResponse().results().stream().map(jobStats -> new JobStatsMonitoringDoc(clusterUuid, timestamp, interval, node, jobStats)).collect(Collectors.toList()).     } }
