# id;timestamp;commentText;codeText;commentWords;codeWords
WatcherExistsHttpResource -> public WatcherExistsHttpResource(final String resourceOwnerName, final ClusterService clusterService, final MultiHttpResource watches);1524684173;Create a {@link WatcherExistsHttpResource}.__@param resourceOwnerName The user-recognizable name._@param watches The Watches to create if Watcher is available and enabled.;public WatcherExistsHttpResource(final String resourceOwnerName, final ClusterService clusterService, final MultiHttpResource watches) {_        _        super(resourceOwnerName, null, WATCHER_CHECK_PARAMETERS)___        this.clusterService = Objects.requireNonNull(clusterService)__        this.watches = Objects.requireNonNull(watches)__    };create,a,link,watcher,exists,http,resource,param,resource,owner,name,the,user,recognizable,name,param,watches,the,watches,to,create,if,watcher,is,available,and,enabled;public,watcher,exists,http,resource,final,string,resource,owner,name,final,cluster,service,cluster,service,final,multi,http,resource,watches,super,resource,owner,name,null,this,cluster,service,objects,require,non,null,cluster,service,this,watches,objects,require,non,null,watches
WatcherExistsHttpResource -> public WatcherExistsHttpResource(final String resourceOwnerName, final ClusterService clusterService, final MultiHttpResource watches);1540847035;Create a {@link WatcherExistsHttpResource}.__@param resourceOwnerName The user-recognizable name._@param watches The Watches to create if Watcher is available and enabled.;public WatcherExistsHttpResource(final String resourceOwnerName, final ClusterService clusterService, final MultiHttpResource watches) {_        _        super(resourceOwnerName, null, WATCHER_CHECK_PARAMETERS)___        this.clusterService = Objects.requireNonNull(clusterService)__        this.watches = Objects.requireNonNull(watches)__    };create,a,link,watcher,exists,http,resource,param,resource,owner,name,the,user,recognizable,name,param,watches,the,watches,to,create,if,watcher,is,available,and,enabled;public,watcher,exists,http,resource,final,string,resource,owner,name,final,cluster,service,cluster,service,final,multi,http,resource,watches,super,resource,owner,name,null,this,cluster,service,objects,require,non,null,cluster,service,this,watches,objects,require,non,null,watches
WatcherExistsHttpResource -> public WatcherExistsHttpResource(final String resourceOwnerName, final ClusterService clusterService, final MultiHttpResource watches);1543346894;Create a {@link WatcherExistsHttpResource}.__@param resourceOwnerName The user-recognizable name._@param watches The Watches to create if Watcher is available and enabled.;public WatcherExistsHttpResource(final String resourceOwnerName, final ClusterService clusterService, final MultiHttpResource watches) {_        _        super(resourceOwnerName, null, WATCHER_CHECK_PARAMETERS)___        this.clusterService = Objects.requireNonNull(clusterService)__        this.watches = Objects.requireNonNull(watches)__    };create,a,link,watcher,exists,http,resource,param,resource,owner,name,the,user,recognizable,name,param,watches,the,watches,to,create,if,watcher,is,available,and,enabled;public,watcher,exists,http,resource,final,string,resource,owner,name,final,cluster,service,cluster,service,final,multi,http,resource,watches,super,resource,owner,name,null,this,cluster,service,objects,require,non,null,cluster,service,this,watches,objects,require,non,null,watches
WatcherExistsHttpResource -> public MultiHttpResource getWatches();1524684173;Get the Watch resources that are managed by this resource.__@return Never {@code null}.;public MultiHttpResource getWatches() {_        return watches__    };get,the,watch,resources,that,are,managed,by,this,resource,return,never,code,null;public,multi,http,resource,get,watches,return,watches
WatcherExistsHttpResource -> public MultiHttpResource getWatches();1540847035;Get the Watch resources that are managed by this resource.__@return Never {@code null}.;public MultiHttpResource getWatches() {_        return watches__    };get,the,watch,resources,that,are,managed,by,this,resource,return,never,code,null;public,multi,http,resource,get,watches,return,watches
WatcherExistsHttpResource -> public MultiHttpResource getWatches();1543346894;Get the Watch resources that are managed by this resource.__@return Never {@code null}.;public MultiHttpResource getWatches() {_        return watches__    };get,the,watch,resources,that,are,managed,by,this,resource,return,never,code,null;public,multi,http,resource,get,watches,return,watches
WatcherExistsHttpResource -> private CheckResponse checkXPackForWatcher(final RestClient client);1524684173;Reach out to the remote cluster to determine the usability of Watcher.__@param client The REST client to make the request(s)._@return Never {@code null}.;private CheckResponse checkXPackForWatcher(final RestClient client) {_        final Tuple<CheckResponse, Response> response =_                checkForResource(client, logger,_                                 "", "_xpack", "watcher check",_                                 resourceOwnerName, "monitoring cluster",_                                 GET_EXISTS,_                                 Sets.newHashSet(RestStatus.NOT_FOUND.getStatus(), RestStatus.BAD_REQUEST.getStatus()))___        final CheckResponse checkResponse = response.v1()___        _        if (checkResponse == CheckResponse.EXISTS) {_            try {_                if (canUseWatcher(response.v2(), XContentType.JSON.xContent())) {_                    return CheckResponse.DOES_NOT_EXIST__                }_            } catch (final IOException | RuntimeException e) {_                logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to parse [_xpack] on the [{}]", resourceOwnerName), e)___                return CheckResponse.ERROR__            }_        } else if (checkResponse == CheckResponse.ERROR) {_            return CheckResponse.ERROR__        }__        _        return CheckResponse.EXISTS__    };reach,out,to,the,remote,cluster,to,determine,the,usability,of,watcher,param,client,the,rest,client,to,make,the,request,s,return,never,code,null;private,check,response,check,xpack,for,watcher,final,rest,client,client,final,tuple,check,response,response,response,check,for,resource,client,logger,watcher,check,resource,owner,name,monitoring,cluster,sets,new,hash,set,rest,status,get,status,rest,status,get,status,final,check,response,check,response,response,v1,if,check,response,check,response,exists,try,if,can,use,watcher,response,v2,xcontent,type,json,x,content,return,check,response,catch,final,ioexception,runtime,exception,e,logger,error,supplier,new,parameterized,message,failed,to,parse,on,the,resource,owner,name,e,return,check,response,error,else,if,check,response,check,response,error,return,check,response,error,return,check,response,exists
WatcherExistsHttpResource -> private CheckResponse checkXPackForWatcher(final RestClient client);1540847035;Reach out to the remote cluster to determine the usability of Watcher.__@param client The REST client to make the request(s)._@return Never {@code null}.;private CheckResponse checkXPackForWatcher(final RestClient client) {_        final Tuple<CheckResponse, Response> response =_                checkForResource(client, logger,_                                 "", "_xpack", "watcher check",_                                 resourceOwnerName, "monitoring cluster",_                                 GET_EXISTS,_                                 Sets.newHashSet(RestStatus.NOT_FOUND.getStatus(), RestStatus.BAD_REQUEST.getStatus()))___        final CheckResponse checkResponse = response.v1()___        _        if (checkResponse == CheckResponse.EXISTS) {_            try {_                if (canUseWatcher(response.v2(), XContentType.JSON.xContent())) {_                    return CheckResponse.DOES_NOT_EXIST__                }_            } catch (final IOException | RuntimeException e) {_                logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to parse [_xpack] on the [{}]", resourceOwnerName), e)___                return CheckResponse.ERROR__            }_        } else if (checkResponse == CheckResponse.ERROR) {_            return CheckResponse.ERROR__        }__        _        return CheckResponse.EXISTS__    };reach,out,to,the,remote,cluster,to,determine,the,usability,of,watcher,param,client,the,rest,client,to,make,the,request,s,return,never,code,null;private,check,response,check,xpack,for,watcher,final,rest,client,client,final,tuple,check,response,response,response,check,for,resource,client,logger,watcher,check,resource,owner,name,monitoring,cluster,sets,new,hash,set,rest,status,get,status,rest,status,get,status,final,check,response,check,response,response,v1,if,check,response,check,response,exists,try,if,can,use,watcher,response,v2,xcontent,type,json,x,content,return,check,response,catch,final,ioexception,runtime,exception,e,logger,error,supplier,new,parameterized,message,failed,to,parse,on,the,resource,owner,name,e,return,check,response,error,else,if,check,response,check,response,error,return,check,response,error,return,check,response,exists
WatcherExistsHttpResource -> private boolean canUseWatcher(final Response response, final XContent xContent) throws IOException;1524684173;Determine if Watcher exists ({@code EXISTS}) or does not exist ({@code DOES_NOT_EXIST}).__@param response The filtered response from the _xpack info API_@param xContent The XContent parser to use_@return {@code true} represents it can be used. {@code false} that it cannot be used._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;private boolean canUseWatcher(final Response response, final XContent xContent) throws IOException {_        _        final Map<String, Object> xpackInfo = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (xpackInfo.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> features = (Map<String, Object>) xpackInfo.get("features")__            @SuppressWarnings("unchecked")_            final Map<String, Object> watcher = (Map<String, Object>) features.get("watcher")___            _            if (Boolean.TRUE == watcher.get("available") && Boolean.TRUE == watcher.get("enabled")) {_                return true__            }_        }__        return false__    };determine,if,watcher,exists,code,exists,or,does,not,exist,code,param,response,the,filtered,response,from,the,info,api,param,x,content,the,xcontent,parser,to,use,return,code,true,represents,it,can,be,used,code,false,that,it,cannot,be,used,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;private,boolean,can,use,watcher,final,response,response,final,xcontent,x,content,throws,ioexception,final,map,string,object,xpack,info,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,xpack,info,is,empty,false,suppress,warnings,unchecked,final,map,string,object,features,map,string,object,xpack,info,get,features,suppress,warnings,unchecked,final,map,string,object,watcher,map,string,object,features,get,watcher,if,boolean,true,watcher,get,available,boolean,true,watcher,get,enabled,return,true,return,false
WatcherExistsHttpResource -> private boolean canUseWatcher(final Response response, final XContent xContent) throws IOException;1540847035;Determine if Watcher exists ({@code EXISTS}) or does not exist ({@code DOES_NOT_EXIST}).__@param response The filtered response from the _xpack info API_@param xContent The XContent parser to use_@return {@code true} represents it can be used. {@code false} that it cannot be used._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;private boolean canUseWatcher(final Response response, final XContent xContent) throws IOException {_        _        final Map<String, Object> xpackInfo = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (xpackInfo.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> features = (Map<String, Object>) xpackInfo.get("features")__            @SuppressWarnings("unchecked")_            final Map<String, Object> watcher = (Map<String, Object>) features.get("watcher")___            _            if (Boolean.TRUE == watcher.get("available") && Boolean.TRUE == watcher.get("enabled")) {_                return true__            }_        }__        return false__    };determine,if,watcher,exists,code,exists,or,does,not,exist,code,param,response,the,filtered,response,from,the,info,api,param,x,content,the,xcontent,parser,to,use,return,code,true,represents,it,can,be,used,code,false,that,it,cannot,be,used,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;private,boolean,can,use,watcher,final,response,response,final,xcontent,x,content,throws,ioexception,final,map,string,object,xpack,info,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,xpack,info,is,empty,false,suppress,warnings,unchecked,final,map,string,object,features,map,string,object,xpack,info,get,features,suppress,warnings,unchecked,final,map,string,object,watcher,map,string,object,features,get,watcher,if,boolean,true,watcher,get,available,boolean,true,watcher,get,enabled,return,true,return,false
WatcherExistsHttpResource -> private boolean canUseWatcher(final Response response, final XContent xContent) throws IOException;1543346894;Determine if Watcher exists ({@code EXISTS}) or does not exist ({@code DOES_NOT_EXIST}).__@param response The filtered response from the _xpack info API_@param xContent The XContent parser to use_@return {@code true} represents it can be used. {@code false} that it cannot be used._@throws IOException if any issue occurs while parsing the {@code xContent} {@code response}._@throws RuntimeException if the response format is changed.;private boolean canUseWatcher(final Response response, final XContent xContent) throws IOException {_        _        final Map<String, Object> xpackInfo = XContentHelper.convertToMap(xContent, response.getEntity().getContent(), false)___        _        if (xpackInfo.isEmpty() == false) {_            @SuppressWarnings("unchecked")_            final Map<String, Object> features = (Map<String, Object>) xpackInfo.get("features")__            @SuppressWarnings("unchecked")_            final Map<String, Object> watcher = (Map<String, Object>) features.get("watcher")___            _            return Boolean.TRUE == watcher.get("available") && Boolean.TRUE == watcher.get("enabled")__        }__        return false__    };determine,if,watcher,exists,code,exists,or,does,not,exist,code,param,response,the,filtered,response,from,the,info,api,param,x,content,the,xcontent,parser,to,use,return,code,true,represents,it,can,be,used,code,false,that,it,cannot,be,used,throws,ioexception,if,any,issue,occurs,while,parsing,the,code,x,content,code,response,throws,runtime,exception,if,the,response,format,is,changed;private,boolean,can,use,watcher,final,response,response,final,xcontent,x,content,throws,ioexception,final,map,string,object,xpack,info,xcontent,helper,convert,to,map,x,content,response,get,entity,get,content,false,if,xpack,info,is,empty,false,suppress,warnings,unchecked,final,map,string,object,features,map,string,object,xpack,info,get,features,suppress,warnings,unchecked,final,map,string,object,watcher,map,string,object,features,get,watcher,return,boolean,true,watcher,get,available,boolean,true,watcher,get,enabled,return,false
WatcherExistsHttpResource -> @Override     protected boolean doPublish(final RestClient client);1524684173;Add Watches to the remote cluster.;@Override_    protected boolean doPublish(final RestClient client) {_        return watches.checkAndPublish(client)__    };add,watches,to,the,remote,cluster;override,protected,boolean,do,publish,final,rest,client,client,return,watches,check,and,publish,client
WatcherExistsHttpResource -> @Override     protected boolean doPublish(final RestClient client);1540847035;Add Watches to the remote cluster.;@Override_    protected boolean doPublish(final RestClient client) {_        return watches.checkAndPublish(client)__    };add,watches,to,the,remote,cluster;override,protected,boolean,do,publish,final,rest,client,client,return,watches,check,and,publish,client
WatcherExistsHttpResource -> @Override     protected CheckResponse doCheck(final RestClient client);1524684173;Determine if X-Pack is installed and, if so, if Watcher is both available <em>and</em> enabled so that it can be used._<p>_If it is not both available and enabled, then we mark that it {@code EXISTS} so that no follow-on work is performed relative to_Watcher. We do the same thing if the current node is not the elected master node.;@Override_    protected CheckResponse doCheck(final RestClient client) {_        _        if (clusterService.state().nodes().isLocalNodeElectedMaster()) {_            return checkXPackForWatcher(client)__        }__        _        return CheckResponse.EXISTS__    };determine,if,x,pack,is,installed,and,if,so,if,watcher,is,both,available,em,and,em,enabled,so,that,it,can,be,used,p,if,it,is,not,both,available,and,enabled,then,we,mark,that,it,code,exists,so,that,no,follow,on,work,is,performed,relative,to,watcher,we,do,the,same,thing,if,the,current,node,is,not,the,elected,master,node;override,protected,check,response,do,check,final,rest,client,client,if,cluster,service,state,nodes,is,local,node,elected,master,return,check,xpack,for,watcher,client,return,check,response,exists
WatcherExistsHttpResource -> @Override     protected CheckResponse doCheck(final RestClient client);1540847035;Determine if X-Pack is installed and, if so, if Watcher is both available <em>and</em> enabled so that it can be used._<p>_If it is not both available and enabled, then we mark that it {@code EXISTS} so that no follow-on work is performed relative to_Watcher. We do the same thing if the current node is not the elected master node.;@Override_    protected CheckResponse doCheck(final RestClient client) {_        _        if (clusterService.state().nodes().isLocalNodeElectedMaster()) {_            return checkXPackForWatcher(client)__        }__        _        return CheckResponse.EXISTS__    };determine,if,x,pack,is,installed,and,if,so,if,watcher,is,both,available,em,and,em,enabled,so,that,it,can,be,used,p,if,it,is,not,both,available,and,enabled,then,we,mark,that,it,code,exists,so,that,no,follow,on,work,is,performed,relative,to,watcher,we,do,the,same,thing,if,the,current,node,is,not,the,elected,master,node;override,protected,check,response,do,check,final,rest,client,client,if,cluster,service,state,nodes,is,local,node,elected,master,return,check,xpack,for,watcher,client,return,check,response,exists
