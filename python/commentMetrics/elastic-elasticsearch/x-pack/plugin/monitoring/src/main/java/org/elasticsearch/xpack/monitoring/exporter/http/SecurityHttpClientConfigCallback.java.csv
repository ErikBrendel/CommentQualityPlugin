commented;modifiers;parameterAmount;loc;comment;code
true;;0;4;/**  * Get the {@link CredentialsProvider} that will be added to the HTTP client.  *  * @return Can be {@code null}.  */ ;/**  * Get the {@link CredentialsProvider} that will be added to the HTTP client.  *  * @return Can be {@code null}.  */ @Nullable CredentialsProvider getCredentialsProvider() {     return credentialsProvider. }
true;;0;3;/**  * Get the {@link SSLIOSessionStrategy} that will be added to the HTTP client.  *  * @return Never {@code null}.  */ ;/**  * Get the {@link SSLIOSessionStrategy} that will be added to the HTTP client.  *  * @return Never {@code null}.  */ SSLIOSessionStrategy getSSLStrategy() {     return sslStrategy. }
true;public;1;12;/**  * Sets the {@linkplain HttpAsyncClientBuilder#setDefaultCredentialsProvider(CredentialsProvider) credential provider},  * {@linkplain HttpAsyncClientBuilder#setSSLContext(SSLContext) SSL context}, and  * {@linkplain HttpAsyncClientBuilder#setSSLHostnameVerifier(HostnameVerifier) SSL Hostname Verifier}.  *  * @param httpClientBuilder The client to configure.  * @return Always {@code httpClientBuilder}.  */ ;/**  * Sets the {@linkplain HttpAsyncClientBuilder#setDefaultCredentialsProvider(CredentialsProvider) credential provider},  * {@linkplain HttpAsyncClientBuilder#setSSLContext(SSLContext) SSL context}, and  * {@linkplain HttpAsyncClientBuilder#setSSLHostnameVerifier(HostnameVerifier) SSL Hostname Verifier}.  *  * @param httpClientBuilder The client to configure.  * @return Always {@code httpClientBuilder}.  */ @Override public HttpAsyncClientBuilder customizeHttpClient(final HttpAsyncClientBuilder httpClientBuilder) {     // enable SSL / TLS     httpClientBuilder.setSSLStrategy(sslStrategy).     // enable user authentication     if (credentialsProvider != null) {         httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider).     }     return httpClientBuilder. }
