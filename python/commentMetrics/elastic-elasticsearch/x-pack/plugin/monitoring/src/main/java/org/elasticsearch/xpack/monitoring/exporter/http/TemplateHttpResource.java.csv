# id;timestamp;commentText;codeText;commentWords;codeWords
TemplateHttpResource -> @Override     protected void doCheck(final RestClient client, final ActionListener<Boolean> listener);1543346894;Determine if the current {@linkplain #templateName template} exists with a relevant version (&gt_= to expected).__@see MonitoringTemplateUtils#LAST_UPDATED_VERSION;@Override_    protected void doCheck(final RestClient client, final ActionListener<Boolean> listener) {_        versionCheckForResource(client, listener, logger,_                                "/_template", templateName, "monitoring template",_                                resourceOwnerName, "monitoring cluster",_                                XContentType.JSON.xContent(), MonitoringTemplateUtils.LAST_UPDATED_VERSION)__    };determine,if,the,current,linkplain,template,name,template,exists,with,a,relevant,version,gt,to,expected,see,monitoring,template,utils;override,protected,void,do,check,final,rest,client,client,final,action,listener,boolean,listener,version,check,for,resource,client,listener,logger,template,name,monitoring,template,resource,owner,name,monitoring,cluster,xcontent,type,json,x,content,monitoring,template,utils
TemplateHttpResource -> @Override     protected void doCheck(final RestClient client, final ActionListener<Boolean> listener);1547500081;Determine if the current {@linkplain #templateName template} exists with a relevant version (&gt_= to expected).__@see MonitoringTemplateUtils#LAST_UPDATED_VERSION;@Override_    protected void doCheck(final RestClient client, final ActionListener<Boolean> listener) {_        versionCheckForResource(client, listener, logger,_                                "/_template", templateName, "monitoring template",_                                resourceOwnerName, "monitoring cluster",_                                XContentType.JSON.xContent(), MonitoringTemplateUtils.LAST_UPDATED_VERSION)__    };determine,if,the,current,linkplain,template,name,template,exists,with,a,relevant,version,gt,to,expected,see,monitoring,template,utils;override,protected,void,do,check,final,rest,client,client,final,action,listener,boolean,listener,version,check,for,resource,client,listener,logger,template,name,monitoring,template,resource,owner,name,monitoring,cluster,xcontent,type,json,x,content,monitoring,template,utils
TemplateHttpResource -> @Override     protected void doCheck(final RestClient client, final ActionListener<Boolean> listener);1550177579;Determine if the current {@linkplain #templateName template} exists with a relevant version (&gt_= to expected).__@see MonitoringTemplateUtils#LAST_UPDATED_VERSION;@Override_    protected void doCheck(final RestClient client, final ActionListener<Boolean> listener) {_        versionCheckForResource(client, listener, logger,_                                "/_template", templateName, "monitoring template",_                                resourceOwnerName, "monitoring cluster",_                                XContentType.JSON.xContent(), MonitoringTemplateUtils.LAST_UPDATED_VERSION)__    };determine,if,the,current,linkplain,template,name,template,exists,with,a,relevant,version,gt,to,expected,see,monitoring,template,utils;override,protected,void,do,check,final,rest,client,client,final,action,listener,boolean,listener,version,check,for,resource,client,listener,logger,template,name,monitoring,template,resource,owner,name,monitoring,cluster,xcontent,type,json,x,content,monitoring,template,utils
TemplateHttpResource -> @Override     protected boolean doPublish(final RestClient client);1524684173;Publish the missing {@linkplain #templateName template}.;@Override_    protected boolean doPublish(final RestClient client) {_        return putResource(client, logger,_                           "/_template", templateName, this::templateToHttpEntity, "monitoring template",_                           resourceOwnerName, "monitoring cluster")__    };publish,the,missing,linkplain,template,name,template;override,protected,boolean,do,publish,final,rest,client,client,return,put,resource,client,logger,template,name,this,template,to,http,entity,monitoring,template,resource,owner,name,monitoring,cluster
TemplateHttpResource -> @Override     protected boolean doPublish(final RestClient client);1540847035;Publish the missing {@linkplain #templateName template}.;@Override_    protected boolean doPublish(final RestClient client) {_        return putResource(client, logger,_                           "/_template", templateName, this::templateToHttpEntity, "monitoring template",_                           resourceOwnerName, "monitoring cluster")__    };publish,the,missing,linkplain,template,name,template;override,protected,boolean,do,publish,final,rest,client,client,return,put,resource,client,logger,template,name,this,template,to,http,entity,monitoring,template,resource,owner,name,monitoring,cluster
TemplateHttpResource -> @Override     protected void doPublish(final RestClient client, final ActionListener<Boolean> listener);1543346894;Publish the missing {@linkplain #templateName template}.;@Override_    protected void doPublish(final RestClient client, final ActionListener<Boolean> listener) {_        putResource(client, listener, logger,_                    "/_template", templateName, this::templateToHttpEntity, "monitoring template",_                    resourceOwnerName, "monitoring cluster")__    };publish,the,missing,linkplain,template,name,template;override,protected,void,do,publish,final,rest,client,client,final,action,listener,boolean,listener,put,resource,client,listener,logger,template,name,this,template,to,http,entity,monitoring,template,resource,owner,name,monitoring,cluster
TemplateHttpResource -> @Override     protected void doPublish(final RestClient client, final ActionListener<Boolean> listener);1547500081;Publish the missing {@linkplain #templateName template}.;@Override_    protected void doPublish(final RestClient client, final ActionListener<Boolean> listener) {_        putResource(client, listener, logger,_                    "/_template", templateName, this::templateToHttpEntity, "monitoring template",_                    resourceOwnerName, "monitoring cluster")__    };publish,the,missing,linkplain,template,name,template;override,protected,void,do,publish,final,rest,client,client,final,action,listener,boolean,listener,put,resource,client,listener,logger,template,name,this,template,to,http,entity,monitoring,template,resource,owner,name,monitoring,cluster
TemplateHttpResource -> @Override     protected void doPublish(final RestClient client, final ActionListener<Boolean> listener);1550177579;Publish the missing {@linkplain #templateName template}.;@Override_    protected void doPublish(final RestClient client, final ActionListener<Boolean> listener) {_        Map<String, String> parameters = Collections.singletonMap(INCLUDE_TYPE_NAME_PARAMETER, "true")__        putResource(client, listener, logger,_                    "/_template", templateName, parameters, this::templateToHttpEntity, "monitoring template",_                    resourceOwnerName, "monitoring cluster")__    };publish,the,missing,linkplain,template,name,template;override,protected,void,do,publish,final,rest,client,client,final,action,listener,boolean,listener,map,string,string,parameters,collections,singleton,map,true,put,resource,client,listener,logger,template,name,parameters,this,template,to,http,entity,monitoring,template,resource,owner,name,monitoring,cluster
TemplateHttpResource -> public TemplateHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                 final String templateName, final Supplier<String> template);1524684173;Create a new {@link TemplateHttpResource}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout Master timeout to use with any request._@param templateName The name of the template (e.g., ".template123")._@param template The template provider.;public TemplateHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                final String templateName, final Supplier<String> template) {_        super(resourceOwnerName, masterTimeout, PublishableHttpResource.RESOURCE_VERSION_PARAMETERS)___        this.templateName = Objects.requireNonNull(templateName)__        this.template = Objects.requireNonNull(template)__    };create,a,new,link,template,http,resource,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,master,timeout,to,use,with,any,request,param,template,name,the,name,of,the,template,e,g,template123,param,template,the,template,provider;public,template,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,string,template,name,final,supplier,string,template,super,resource,owner,name,master,timeout,publishable,http,resource,this,template,name,objects,require,non,null,template,name,this,template,objects,require,non,null,template
TemplateHttpResource -> public TemplateHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                 final String templateName, final Supplier<String> template);1540847035;Create a new {@link TemplateHttpResource}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout Master timeout to use with any request._@param templateName The name of the template (e.g., ".template123")._@param template The template provider.;public TemplateHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                final String templateName, final Supplier<String> template) {_        super(resourceOwnerName, masterTimeout, PublishableHttpResource.RESOURCE_VERSION_PARAMETERS)___        this.templateName = Objects.requireNonNull(templateName)__        this.template = Objects.requireNonNull(template)__    };create,a,new,link,template,http,resource,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,master,timeout,to,use,with,any,request,param,template,name,the,name,of,the,template,e,g,template123,param,template,the,template,provider;public,template,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,string,template,name,final,supplier,string,template,super,resource,owner,name,master,timeout,publishable,http,resource,this,template,name,objects,require,non,null,template,name,this,template,objects,require,non,null,template
TemplateHttpResource -> public TemplateHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                 final String templateName, final Supplier<String> template);1543346894;Create a new {@link TemplateHttpResource}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout Master timeout to use with any request._@param templateName The name of the template (e.g., ".template123")._@param template The template provider.;public TemplateHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                final String templateName, final Supplier<String> template) {_        super(resourceOwnerName, masterTimeout, PublishableHttpResource.RESOURCE_VERSION_PARAMETERS)___        this.templateName = Objects.requireNonNull(templateName)__        this.template = Objects.requireNonNull(template)__    };create,a,new,link,template,http,resource,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,master,timeout,to,use,with,any,request,param,template,name,the,name,of,the,template,e,g,template123,param,template,the,template,provider;public,template,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,string,template,name,final,supplier,string,template,super,resource,owner,name,master,timeout,publishable,http,resource,this,template,name,objects,require,non,null,template,name,this,template,objects,require,non,null,template
TemplateHttpResource -> public TemplateHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                 final String templateName, final Supplier<String> template);1547500081;Create a new {@link TemplateHttpResource}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout Master timeout to use with any request._@param templateName The name of the template (e.g., ".template123")._@param template The template provider.;public TemplateHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                final String templateName, final Supplier<String> template) {_        super(resourceOwnerName, masterTimeout, PARAMETERS)___        this.templateName = Objects.requireNonNull(templateName)__        this.template = Objects.requireNonNull(template)__    };create,a,new,link,template,http,resource,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,master,timeout,to,use,with,any,request,param,template,name,the,name,of,the,template,e,g,template123,param,template,the,template,provider;public,template,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,string,template,name,final,supplier,string,template,super,resource,owner,name,master,timeout,parameters,this,template,name,objects,require,non,null,template,name,this,template,objects,require,non,null,template
TemplateHttpResource -> public TemplateHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,                                 final String templateName, final Supplier<String> template);1550177579;Create a new {@link TemplateHttpResource}.__@param resourceOwnerName The user-recognizable name._@param masterTimeout Master timeout to use with any request._@param templateName The name of the template (e.g., ".template123")._@param template The template provider.;public TemplateHttpResource(final String resourceOwnerName, @Nullable final TimeValue masterTimeout,_                                final String templateName, final Supplier<String> template) {_        super(resourceOwnerName, masterTimeout, PARAMETERS)___        this.templateName = Objects.requireNonNull(templateName)__        this.template = Objects.requireNonNull(template)__    };create,a,new,link,template,http,resource,param,resource,owner,name,the,user,recognizable,name,param,master,timeout,master,timeout,to,use,with,any,request,param,template,name,the,name,of,the,template,e,g,template123,param,template,the,template,provider;public,template,http,resource,final,string,resource,owner,name,nullable,final,time,value,master,timeout,final,string,template,name,final,supplier,string,template,super,resource,owner,name,master,timeout,parameters,this,template,name,objects,require,non,null,template,name,this,template,objects,require,non,null,template
TemplateHttpResource -> HttpEntity templateToHttpEntity();1524684173;Create a {@link HttpEntity} for the {@link #template}.__@return Never {@code null}.;HttpEntity templateToHttpEntity() {_        return new StringEntity(template.get(), ContentType.APPLICATION_JSON)__    };create,a,link,http,entity,for,the,link,template,return,never,code,null;http,entity,template,to,http,entity,return,new,string,entity,template,get,content,type
TemplateHttpResource -> HttpEntity templateToHttpEntity();1540847035;Create a {@link HttpEntity} for the {@link #template}.__@return Never {@code null}.;HttpEntity templateToHttpEntity() {_        return new StringEntity(template.get(), ContentType.APPLICATION_JSON)__    };create,a,link,http,entity,for,the,link,template,return,never,code,null;http,entity,template,to,http,entity,return,new,string,entity,template,get,content,type
TemplateHttpResource -> HttpEntity templateToHttpEntity();1543346894;Create a {@link HttpEntity} for the {@link #template}.__@return Never {@code null}.;HttpEntity templateToHttpEntity() {_        return new StringEntity(template.get(), ContentType.APPLICATION_JSON)__    };create,a,link,http,entity,for,the,link,template,return,never,code,null;http,entity,template,to,http,entity,return,new,string,entity,template,get,content,type
TemplateHttpResource -> HttpEntity templateToHttpEntity();1547500081;Create a {@link HttpEntity} for the {@link #template}.__@return Never {@code null}.;HttpEntity templateToHttpEntity() {_        return new StringEntity(template.get(), ContentType.APPLICATION_JSON)__    };create,a,link,http,entity,for,the,link,template,return,never,code,null;http,entity,template,to,http,entity,return,new,string,entity,template,get,content,type
TemplateHttpResource -> HttpEntity templateToHttpEntity();1550177579;Create a {@link HttpEntity} for the {@link #template}.__@return Never {@code null}.;HttpEntity templateToHttpEntity() {_        return new StringEntity(template.get(), ContentType.APPLICATION_JSON)__    };create,a,link,http,entity,for,the,link,template,return,never,code,null;http,entity,template,to,http,entity,return,new,string,entity,template,get,content,type
TemplateHttpResource -> @Override     protected CheckResponse doCheck(final RestClient client);1524684173;Determine if the current {@linkplain #templateName template} exists with a relevant version (&gt_= to expected).__@see MonitoringTemplateUtils#LAST_UPDATED_VERSION;@Override_    protected CheckResponse doCheck(final RestClient client) {_        return versionCheckForResource(client, logger,_                                       "/_template", templateName, "monitoring template",_                                       resourceOwnerName, "monitoring cluster",_                                       XContentType.JSON.xContent(), MonitoringTemplateUtils.LAST_UPDATED_VERSION)__    };determine,if,the,current,linkplain,template,name,template,exists,with,a,relevant,version,gt,to,expected,see,monitoring,template,utils;override,protected,check,response,do,check,final,rest,client,client,return,version,check,for,resource,client,logger,template,name,monitoring,template,resource,owner,name,monitoring,cluster,xcontent,type,json,x,content,monitoring,template,utils
TemplateHttpResource -> @Override     protected CheckResponse doCheck(final RestClient client);1540847035;Determine if the current {@linkplain #templateName template} exists with a relevant version (&gt_= to expected).__@see MonitoringTemplateUtils#LAST_UPDATED_VERSION;@Override_    protected CheckResponse doCheck(final RestClient client) {_        return versionCheckForResource(client, logger,_                                       "/_template", templateName, "monitoring template",_                                       resourceOwnerName, "monitoring cluster",_                                       XContentType.JSON.xContent(), MonitoringTemplateUtils.LAST_UPDATED_VERSION)__    };determine,if,the,current,linkplain,template,name,template,exists,with,a,relevant,version,gt,to,expected,see,monitoring,template,utils;override,protected,check,response,do,check,final,rest,client,client,return,version,check,for,resource,client,logger,template,name,monitoring,template,resource,owner,name,monitoring,cluster,xcontent,type,json,x,content,monitoring,template,utils
