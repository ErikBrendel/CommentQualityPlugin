commented;modifiers;parameterAmount;loc;comment;code
false;public;0;36;;public void testIndexUpgradeServiceMultipleCheck() throws Exception {     IndexUpgradeService service.     if (randomBoolean()) {         service = new IndexUpgradeService(Arrays.asList(upgradeBarCheck, reindexFooCheck, everythingIsFineCheck, // This one should never be called         unreachableCheck)).     } else {         service = new IndexUpgradeService(Arrays.asList(reindexFooCheck, upgradeBarCheck, everythingIsFineCheck, // This one should never be called         unreachableCheck)).     }     IndexMetaData fooIndex = newTestIndexMeta("bar", Settings.builder().put("test.setting", "bar").build()).     IndexMetaData barIndex = newTestIndexMeta("foo", Settings.builder().put("test.setting", "foo").build()).     IndexMetaData bazIndex = newTestIndexMeta("baz", Settings.EMPTY).     ClusterState clusterState = mockClusterState(fooIndex, barIndex, bazIndex).     Map<String, UpgradeActionRequired> result = service.upgradeInfo(new String[] { "bar", "foo", "baz" }, IndicesOptions.lenientExpandOpen(), clusterState).     assertThat(result.size(), equalTo(2)).     assertThat(result.get("bar"), equalTo(UpgradeActionRequired.UPGRADE)).     assertThat(result.get("foo"), equalTo(UpgradeActionRequired.REINDEX)).     result = service.upgradeInfo(new String[] { "b*" }, IndicesOptions.lenientExpandOpen(), clusterState).     assertThat(result.size(), equalTo(1)).     assertThat(result.get("bar"), equalTo(UpgradeActionRequired.UPGRADE)). }
false;public;0;19;;public void testNoMatchingChecks() throws Exception {     IndexUpgradeService service = new IndexUpgradeService(Arrays.asList(upgradeBarCheck, reindexFooCheck)).     IndexMetaData fooIndex = newTestIndexMeta("bar", Settings.builder().put("test.setting", "bar").build()).     IndexMetaData barIndex = newTestIndexMeta("foo", Settings.builder().put("test.setting", "foo").build()).     IndexMetaData bazIndex = newTestIndexMeta("baz", Settings.EMPTY).     ClusterState clusterState = mockClusterState(fooIndex, barIndex, bazIndex).     Map<String, UpgradeActionRequired> result = service.upgradeInfo(new String[] { "bar", "foo", "baz" }, IndicesOptions.lenientExpandOpen(), clusterState).     assertThat(result.size(), equalTo(2)).     assertThat(result.get("bar"), equalTo(UpgradeActionRequired.UPGRADE)).     assertThat(result.get("foo"), equalTo(UpgradeActionRequired.REINDEX)). }
false;public;0;18;;public void testEarlierChecksWin() throws Exception {     IndexUpgradeService service = new IndexUpgradeService(Arrays.asList(everythingIsFineCheck, upgradeBarCheck, reindexFooCheck)).     IndexMetaData fooIndex = newTestIndexMeta("bar", Settings.builder().put("test.setting", "bar").build()).     IndexMetaData barIndex = newTestIndexMeta("foo", Settings.builder().put("test.setting", "foo").build()).     IndexMetaData bazIndex = newTestIndexMeta("baz", Settings.EMPTY).     ClusterState clusterState = mockClusterState(fooIndex, barIndex, bazIndex).     Map<String, UpgradeActionRequired> result = service.upgradeInfo(new String[] { "bar", "foo", "baz" }, IndicesOptions.lenientExpandOpen(), clusterState).     // everything as the first checker should indicate that everything is fine     assertThat(result.size(), equalTo(0)). }
false;public;0;19;;public void testGenericTest() throws Exception {     IndexUpgradeService service = new IndexUpgradeService(Arrays.asList(upgradeBarCheck, reindexFooCheck)).     IndexMetaData goodIndex = newTestIndexMeta("good", Settings.EMPTY).     IndexMetaData badIndex = newTestIndexMeta("bad", Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.fromString("2.0.0")).build()).     ClusterState clusterState = mockClusterState(goodIndex, badIndex).     Map<String, UpgradeActionRequired> result = service.upgradeInfo(new String[] { "good", "bad" }, IndicesOptions.lenientExpandOpen(), clusterState).     assertThat(result.size(), equalTo(1)).     assertThat(result.get("bad"), equalTo(UpgradeActionRequired.REINDEX)). }
false;private;1;7;;private ClusterState mockClusterState(IndexMetaData... indices) {     MetaData.Builder metaDataBuilder = MetaData.builder().     for (IndexMetaData indexMetaData : indices) {         metaDataBuilder.put(indexMetaData, false).     }     return ClusterState.builder(ClusterName.DEFAULT).metaData(metaDataBuilder).build(). }
false;public,static;3;16;;public static IndexMetaData newTestIndexMeta(String name, String alias, Settings indexSettings) throws IOException {     Settings build = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_CREATION_DATE, 1).put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID()).put(IndexMetaData.SETTING_VERSION_UPGRADED, Version.V_6_0_0).put(indexSettings).build().     IndexMetaData.Builder builder = IndexMetaData.builder(name).settings(build).     if (alias != null) {         // Create alias         builder.putAlias(AliasMetaData.newAliasMetaDataBuilder(alias).build()).     }     return builder.build(). }
false;public,static;2;3;;public static IndexMetaData newTestIndexMeta(String name, Settings indexSettings) throws IOException {     return newTestIndexMeta(name, null, indexSettings). }
