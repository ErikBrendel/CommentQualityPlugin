commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean ignoreExternalCluster() {     return true. }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(MockUpgradePlugin.class, ReindexPlugin.class). }
false;public;2;4;;@Override public ScriptEngine getScriptEngine(Settings settings, Collection<ScriptContext<?>> contexts) {     return new MockScriptEngine(pluginScriptLang(), pluginScripts(), Collections.emptyMap()). }
false;public;0;3;;public String pluginScriptLang() {     return NAME. }
false;protected;0;13;;protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     Map<String, Function<Map<String, Object>, Object>> scripts = new HashMap<>().     scripts.put("block", map -> {         upgradeCalledLatch.countDown().         try {             assertThat(upgradeLatch.await(10, TimeUnit.SECONDS), equalTo(true)).         } catch (InterruptedException e) {             Thread.currentThread().interrupt().         }         return null.     }).     return scripts. }
false;public;1;12;;@Override public UpgradeActionRequired apply(IndexMetaData indexMetaData) {     if ("test".equals(indexMetaData.getIndex().getName())) {         if (UpgradeField.checkInternalIndexFormat(indexMetaData)) {             return UpgradeActionRequired.UP_TO_DATE.         } else {             return UpgradeActionRequired.UPGRADE.         }     } else {         return UpgradeActionRequired.NOT_APPLICABLE.     } }
false;public;9;25;;@Override public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool, ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry, Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry) {     return Arrays.asList(new IndexUpgradeService(Collections.singletonList(new IndexUpgradeCheck("test", new Function<IndexMetaData, UpgradeActionRequired>() {          @Override         public UpgradeActionRequired apply(IndexMetaData indexMetaData) {             if ("test".equals(indexMetaData.getIndex().getName())) {                 if (UpgradeField.checkInternalIndexFormat(indexMetaData)) {                     return UpgradeActionRequired.UP_TO_DATE.                 } else {                     return UpgradeActionRequired.UPGRADE.                 }             } else {                 return UpgradeActionRequired.NOT_APPLICABLE.             }         }     }, client, clusterService, Strings.EMPTY_ARRAY, new Script(ScriptType.INLINE, NAME, "block", Collections.emptyMap())))), new XPackLicenseState(settings)). }
false;public;0;4;;@Override public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {     return upgrade.getActions(). }
false;public;0;4;;@Override public Collection<String> getRestHeaders() {     return upgrade.getRestHeaders(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return nodePlugins(). }
false;public;0;41;;public void testParentTasksDuringUpgrade() throws Exception {     logger.info("before getInstance").     PluginsService pluginsService = internalCluster().getDataNodeInstance(PluginsService.class).     MockUpgradePlugin mockUpgradePlugin = pluginsService.filterPlugins(MockUpgradePlugin.class).get(0).     assertThat(mockUpgradePlugin, notNullValue()).     logger.info("after getInstance").     assertAcked(client().admin().indices().prepareCreate("test").get()).     client().prepareIndex("test", "doc", "1").setSource("{\"foo\": \"bar\"}", XContentType.JSON).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).get().     ensureYellow("test").     IndexUpgradeInfoResponse infoResponse = new IndexUpgradeInfoAction.RequestBuilder(client()).setIndices("test").get().     assertThat(infoResponse.getActions().keySet(), contains("test")).     assertThat(infoResponse.getActions().get("test"), equalTo(UpgradeActionRequired.UPGRADE)).     ActionFuture<BulkByScrollResponse> upgradeResponse = new IndexUpgradeAction.RequestBuilder(client()).setIndex("test").execute().     assertThat(mockUpgradePlugin.upgradeCalledLatch.await(10, TimeUnit.SECONDS), equalTo(true)).     ListTasksResponse response = client().admin().cluster().prepareListTasks().get().     mockUpgradePlugin.upgradeLatch.countDown().     // Find the upgrade task group     TaskGroup upgradeGroup = null.     for (TaskGroup group : response.getTaskGroups()) {         if (IndexUpgradeAction.NAME.equals(group.getTaskInfo().getAction())) {             assertThat(upgradeGroup, nullValue()).             upgradeGroup = group.         }     }     assertThat(upgradeGroup, notNullValue()).     // The task should be cancellable     assertThat(upgradeGroup.getTaskInfo().isCancellable(), equalTo(true)).     // The reindex task should be a child     assertThat(upgradeGroup.getChildTasks(), hasSize(1)).     assertThat(upgradeGroup.getChildTasks().get(0).getTaskInfo().getAction(), equalTo(ReindexAction.NAME)).     assertThat(upgradeResponse.get().getCreated(), equalTo(1L)). }
