commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean ignoreExternalCluster() {     return true. }
false;protected;0;5;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(LocalStateCompositeXPackPlugin.class, Upgrade.class, ReindexPlugin.class, MockPainlessScriptEngine.TestPlugin.class, CommonAnalysisPlugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return Arrays.asList(XPackClientPlugin.class, ReindexPlugin.class). }
false;private,static;0;3;;private static String randomValidLicenseType() {     return randomFrom("trial", "platinum", "gold", "standard", "basic"). }
false;private,static;0;3;;private static String randomInvalidLicenseType() {     return "missing". }
false;public;0;3;;public void disableLicensing() throws Exception {     updateLicensing(randomInvalidLicenseType()). }
false;public;0;3;;public void enableLicensing() throws Exception {     updateLicensing(randomValidLicenseType()). }
false;public;1;9;;public void updateLicensing(String licenseType) throws Exception {     wipeAllLicenses().     if (licenseType.equals("missing")) {         putLicenseTombstone().     } else {         License license = TestUtils.generateSignedLicense(licenseType, TimeValue.timeValueMinutes(1)).         putLicense(license).     } }
