# id;timestamp;commentText;codeText;commentWords;codeWords
IndexUpgradeCheck -> public IndexUpgradeCheck(String name, Settings settings,                              Function<IndexMetaData, UpgradeActionRequired> actionRequired,                              Client client, ClusterService clusterService, String[] types, Script updateScript);1524684173;Creates a new upgrade check__@param name           - the name of the check_@param settings       - system settings_@param actionRequired - return true if they can work with the index with specified name_@param client         - client_@param clusterService - cluster service_@param types          - a list of types that the reindexing should be limited to_@param updateScript   - the upgrade script that should be used during reindexing;public IndexUpgradeCheck(String name, Settings settings,_                             Function<IndexMetaData, UpgradeActionRequired> actionRequired,_                             Client client, ClusterService clusterService, String[] types, Script updateScript) {_        this(name, settings, actionRequired, client, clusterService, types, updateScript,_                listener -> listener.onResponse(null), (t, listener) -> listener.onResponse(TransportResponse.Empty.INSTANCE))__    };creates,a,new,upgrade,check,param,name,the,name,of,the,check,param,settings,system,settings,param,action,required,return,true,if,they,can,work,with,the,index,with,specified,name,param,client,client,param,cluster,service,cluster,service,param,types,a,list,of,types,that,the,reindexing,should,be,limited,to,param,update,script,the,upgrade,script,that,should,be,used,during,reindexing;public,index,upgrade,check,string,name,settings,settings,function,index,meta,data,upgrade,action,required,action,required,client,client,cluster,service,cluster,service,string,types,script,update,script,this,name,settings,action,required,client,cluster,service,types,update,script,listener,listener,on,response,null,t,listener,listener,on,response,transport,response,empty,instance
IndexUpgradeCheck -> public IndexUpgradeCheck(String name, Settings settings,                              Function<IndexMetaData, UpgradeActionRequired> actionRequired,                              Client client, ClusterService clusterService, String[] types, Script updateScript);1534176840;Creates a new upgrade check__@param name           - the name of the check_@param settings       - system settings_@param actionRequired - return true if they can work with the index with specified name_@param client         - client_@param clusterService - cluster service_@param types          - a list of types that the reindexing should be limited to_@param updateScript   - the upgrade script that should be used during reindexing;public IndexUpgradeCheck(String name, Settings settings,_                             Function<IndexMetaData, UpgradeActionRequired> actionRequired,_                             Client client, ClusterService clusterService, String[] types, Script updateScript) {_        this(name, settings, actionRequired, client, clusterService, types, updateScript,_                listener -> listener.onResponse(null), (t, listener) -> listener.onResponse(TransportResponse.Empty.INSTANCE))__    };creates,a,new,upgrade,check,param,name,the,name,of,the,check,param,settings,system,settings,param,action,required,return,true,if,they,can,work,with,the,index,with,specified,name,param,client,client,param,cluster,service,cluster,service,param,types,a,list,of,types,that,the,reindexing,should,be,limited,to,param,update,script,the,upgrade,script,that,should,be,used,during,reindexing;public,index,upgrade,check,string,name,settings,settings,function,index,meta,data,upgrade,action,required,action,required,client,client,cluster,service,cluster,service,string,types,script,update,script,this,name,settings,action,required,client,cluster,service,types,update,script,listener,listener,on,response,null,t,listener,listener,on,response,transport,response,empty,instance
IndexUpgradeCheck -> public IndexUpgradeCheck(String name,                              Function<IndexMetaData, UpgradeActionRequired> actionRequired,                              Client client, ClusterService clusterService, String[] types, Script updateScript,                              Consumer<ActionListener<T>> preUpgrade,                              BiConsumer<T, ActionListener<TransportResponse.Empty>> postUpgrade);1541092382;Creates a new upgrade check__@param name           - the name of the check_@param actionRequired - return true if they can work with the index with specified name_@param client         - client_@param clusterService - cluster service_@param types          - a list of types that the reindexing should be limited to_@param updateScript   - the upgrade script that should be used during reindexing_@param preUpgrade     - action that should be performed before upgrade_@param postUpgrade    - action that should be performed after upgrade;public IndexUpgradeCheck(String name,_                             Function<IndexMetaData, UpgradeActionRequired> actionRequired,_                             Client client, ClusterService clusterService, String[] types, Script updateScript,_                             Consumer<ActionListener<T>> preUpgrade,_                             BiConsumer<T, ActionListener<TransportResponse.Empty>> postUpgrade) {_        this.name = name__        this.actionRequired = actionRequired__        this.reindexer = new InternalIndexReindexer<>(client, clusterService, IndexUpgradeCheckVersion.UPRADE_VERSION, updateScript,_                types, preUpgrade, postUpgrade)__    };creates,a,new,upgrade,check,param,name,the,name,of,the,check,param,action,required,return,true,if,they,can,work,with,the,index,with,specified,name,param,client,client,param,cluster,service,cluster,service,param,types,a,list,of,types,that,the,reindexing,should,be,limited,to,param,update,script,the,upgrade,script,that,should,be,used,during,reindexing,param,pre,upgrade,action,that,should,be,performed,before,upgrade,param,post,upgrade,action,that,should,be,performed,after,upgrade;public,index,upgrade,check,string,name,function,index,meta,data,upgrade,action,required,action,required,client,client,cluster,service,cluster,service,string,types,script,update,script,consumer,action,listener,t,pre,upgrade,bi,consumer,t,action,listener,transport,response,empty,post,upgrade,this,name,name,this,action,required,action,required,this,reindexer,new,internal,index,reindexer,client,cluster,service,index,upgrade,check,version,update,script,types,pre,upgrade,post,upgrade
IndexUpgradeCheck -> public IndexUpgradeCheck(String name,                              Function<IndexMetaData, UpgradeActionRequired> actionRequired,                              Client client, ClusterService clusterService, String[] types, Script updateScript,                              Consumer<ActionListener<T>> preUpgrade,                              BiConsumer<T, ActionListener<TransportResponse.Empty>> postUpgrade);1543343306;Creates a new upgrade check__@param name           - the name of the check_@param actionRequired - return true if they can work with the index with specified name_@param client         - client_@param clusterService - cluster service_@param types          - a list of types that the reindexing should be limited to_@param updateScript   - the upgrade script that should be used during reindexing_@param preUpgrade     - action that should be performed before upgrade_@param postUpgrade    - action that should be performed after upgrade;public IndexUpgradeCheck(String name,_                             Function<IndexMetaData, UpgradeActionRequired> actionRequired,_                             Client client, ClusterService clusterService, String[] types, Script updateScript,_                             Consumer<ActionListener<T>> preUpgrade,_                             BiConsumer<T, ActionListener<TransportResponse.Empty>> postUpgrade) {_        this.name = name__        this.actionRequired = actionRequired__        this.reindexer = new InternalIndexReindexer<>(client, clusterService, IndexUpgradeCheckVersion.UPRADE_VERSION, updateScript,_                types, preUpgrade, postUpgrade)__    };creates,a,new,upgrade,check,param,name,the,name,of,the,check,param,action,required,return,true,if,they,can,work,with,the,index,with,specified,name,param,client,client,param,cluster,service,cluster,service,param,types,a,list,of,types,that,the,reindexing,should,be,limited,to,param,update,script,the,upgrade,script,that,should,be,used,during,reindexing,param,pre,upgrade,action,that,should,be,performed,before,upgrade,param,post,upgrade,action,that,should,be,performed,after,upgrade;public,index,upgrade,check,string,name,function,index,meta,data,upgrade,action,required,action,required,client,client,cluster,service,cluster,service,string,types,script,update,script,consumer,action,listener,t,pre,upgrade,bi,consumer,t,action,listener,transport,response,empty,post,upgrade,this,name,name,this,action,required,action,required,this,reindexer,new,internal,index,reindexer,client,cluster,service,index,upgrade,check,version,update,script,types,pre,upgrade,post,upgrade
IndexUpgradeCheck -> public IndexUpgradeCheck(String name, Settings settings,                              Function<IndexMetaData, UpgradeActionRequired> actionRequired,                              Client client, ClusterService clusterService, String[] types, Script updateScript,                              Consumer<ActionListener<T>> preUpgrade,                              BiConsumer<T, ActionListener<TransportResponse.Empty>> postUpgrade);1524684173;Creates a new upgrade check__@param name           - the name of the check_@param settings       - system settings_@param actionRequired - return true if they can work with the index with specified name_@param client         - client_@param clusterService - cluster service_@param types          - a list of types that the reindexing should be limited to_@param updateScript   - the upgrade script that should be used during reindexing_@param preUpgrade     - action that should be performed before upgrade_@param postUpgrade    - action that should be performed after upgrade;public IndexUpgradeCheck(String name, Settings settings,_                             Function<IndexMetaData, UpgradeActionRequired> actionRequired,_                             Client client, ClusterService clusterService, String[] types, Script updateScript,_                             Consumer<ActionListener<T>> preUpgrade,_                             BiConsumer<T, ActionListener<TransportResponse.Empty>> postUpgrade) {_        super(settings)__        this.name = name__        this.actionRequired = actionRequired__        this.reindexer = new InternalIndexReindexer<>(client, clusterService, IndexUpgradeCheckVersion.UPRADE_VERSION, updateScript,_                types, preUpgrade, postUpgrade)__    };creates,a,new,upgrade,check,param,name,the,name,of,the,check,param,settings,system,settings,param,action,required,return,true,if,they,can,work,with,the,index,with,specified,name,param,client,client,param,cluster,service,cluster,service,param,types,a,list,of,types,that,the,reindexing,should,be,limited,to,param,update,script,the,upgrade,script,that,should,be,used,during,reindexing,param,pre,upgrade,action,that,should,be,performed,before,upgrade,param,post,upgrade,action,that,should,be,performed,after,upgrade;public,index,upgrade,check,string,name,settings,settings,function,index,meta,data,upgrade,action,required,action,required,client,client,cluster,service,cluster,service,string,types,script,update,script,consumer,action,listener,t,pre,upgrade,bi,consumer,t,action,listener,transport,response,empty,post,upgrade,super,settings,this,name,name,this,action,required,action,required,this,reindexer,new,internal,index,reindexer,client,cluster,service,index,upgrade,check,version,update,script,types,pre,upgrade,post,upgrade
IndexUpgradeCheck -> public IndexUpgradeCheck(String name, Settings settings,                              Function<IndexMetaData, UpgradeActionRequired> actionRequired,                              Client client, ClusterService clusterService, String[] types, Script updateScript,                              Consumer<ActionListener<T>> preUpgrade,                              BiConsumer<T, ActionListener<TransportResponse.Empty>> postUpgrade);1534176840;Creates a new upgrade check__@param name           - the name of the check_@param settings       - system settings_@param actionRequired - return true if they can work with the index with specified name_@param client         - client_@param clusterService - cluster service_@param types          - a list of types that the reindexing should be limited to_@param updateScript   - the upgrade script that should be used during reindexing_@param preUpgrade     - action that should be performed before upgrade_@param postUpgrade    - action that should be performed after upgrade;public IndexUpgradeCheck(String name, Settings settings,_                             Function<IndexMetaData, UpgradeActionRequired> actionRequired,_                             Client client, ClusterService clusterService, String[] types, Script updateScript,_                             Consumer<ActionListener<T>> preUpgrade,_                             BiConsumer<T, ActionListener<TransportResponse.Empty>> postUpgrade) {_        super(settings)__        this.name = name__        this.actionRequired = actionRequired__        this.reindexer = new InternalIndexReindexer<>(client, clusterService, IndexUpgradeCheckVersion.UPRADE_VERSION, updateScript,_                types, preUpgrade, postUpgrade)__    };creates,a,new,upgrade,check,param,name,the,name,of,the,check,param,settings,system,settings,param,action,required,return,true,if,they,can,work,with,the,index,with,specified,name,param,client,client,param,cluster,service,cluster,service,param,types,a,list,of,types,that,the,reindexing,should,be,limited,to,param,update,script,the,upgrade,script,that,should,be,used,during,reindexing,param,pre,upgrade,action,that,should,be,performed,before,upgrade,param,post,upgrade,action,that,should,be,performed,after,upgrade;public,index,upgrade,check,string,name,settings,settings,function,index,meta,data,upgrade,action,required,action,required,client,client,cluster,service,cluster,service,string,types,script,update,script,consumer,action,listener,t,pre,upgrade,bi,consumer,t,action,listener,transport,response,empty,post,upgrade,super,settings,this,name,name,this,action,required,action,required,this,reindexer,new,internal,index,reindexer,client,cluster,service,index,upgrade,check,version,update,script,types,pre,upgrade,post,upgrade
IndexUpgradeCheck -> public void upgrade(TaskId task, IndexMetaData indexMetaData, ClusterState state,                         ActionListener<BulkByScrollResponse> listener);1524684173;Perform the index upgrade__@param task          the task that executes the upgrade operation_@param indexMetaData index metadata_@param state         current cluster state_@param listener      the listener that should be called upon completion of the upgrade;public void upgrade(TaskId task, IndexMetaData indexMetaData, ClusterState state,_                        ActionListener<BulkByScrollResponse> listener) {_        reindexer.upgrade(task, indexMetaData.getIndex().getName(), state, listener)__    };perform,the,index,upgrade,param,task,the,task,that,executes,the,upgrade,operation,param,index,meta,data,index,metadata,param,state,current,cluster,state,param,listener,the,listener,that,should,be,called,upon,completion,of,the,upgrade;public,void,upgrade,task,id,task,index,meta,data,index,meta,data,cluster,state,state,action,listener,bulk,by,scroll,response,listener,reindexer,upgrade,task,index,meta,data,get,index,get,name,state,listener
IndexUpgradeCheck -> public void upgrade(TaskId task, IndexMetaData indexMetaData, ClusterState state,                         ActionListener<BulkByScrollResponse> listener);1534176840;Perform the index upgrade__@param task          the task that executes the upgrade operation_@param indexMetaData index metadata_@param state         current cluster state_@param listener      the listener that should be called upon completion of the upgrade;public void upgrade(TaskId task, IndexMetaData indexMetaData, ClusterState state,_                        ActionListener<BulkByScrollResponse> listener) {_        reindexer.upgrade(task, indexMetaData.getIndex().getName(), state, listener)__    };perform,the,index,upgrade,param,task,the,task,that,executes,the,upgrade,operation,param,index,meta,data,index,metadata,param,state,current,cluster,state,param,listener,the,listener,that,should,be,called,upon,completion,of,the,upgrade;public,void,upgrade,task,id,task,index,meta,data,index,meta,data,cluster,state,state,action,listener,bulk,by,scroll,response,listener,reindexer,upgrade,task,index,meta,data,get,index,get,name,state,listener
IndexUpgradeCheck -> public void upgrade(TaskId task, IndexMetaData indexMetaData, ClusterState state,                         ActionListener<BulkByScrollResponse> listener);1541092382;Perform the index upgrade__@param task          the task that executes the upgrade operation_@param indexMetaData index metadata_@param state         current cluster state_@param listener      the listener that should be called upon completion of the upgrade;public void upgrade(TaskId task, IndexMetaData indexMetaData, ClusterState state,_                        ActionListener<BulkByScrollResponse> listener) {_        reindexer.upgrade(task, indexMetaData.getIndex().getName(), state, listener)__    };perform,the,index,upgrade,param,task,the,task,that,executes,the,upgrade,operation,param,index,meta,data,index,metadata,param,state,current,cluster,state,param,listener,the,listener,that,should,be,called,upon,completion,of,the,upgrade;public,void,upgrade,task,id,task,index,meta,data,index,meta,data,cluster,state,state,action,listener,bulk,by,scroll,response,listener,reindexer,upgrade,task,index,meta,data,get,index,get,name,state,listener
IndexUpgradeCheck -> public void upgrade(TaskId task, IndexMetaData indexMetaData, ClusterState state,                         ActionListener<BulkByScrollResponse> listener);1543343306;Perform the index upgrade__@param task          the task that executes the upgrade operation_@param indexMetaData index metadata_@param state         current cluster state_@param listener      the listener that should be called upon completion of the upgrade;public void upgrade(TaskId task, IndexMetaData indexMetaData, ClusterState state,_                        ActionListener<BulkByScrollResponse> listener) {_        reindexer.upgrade(task, indexMetaData.getIndex().getName(), state, listener)__    };perform,the,index,upgrade,param,task,the,task,that,executes,the,upgrade,operation,param,index,meta,data,index,metadata,param,state,current,cluster,state,param,listener,the,listener,that,should,be,called,upon,completion,of,the,upgrade;public,void,upgrade,task,id,task,index,meta,data,index,meta,data,cluster,state,state,action,listener,bulk,by,scroll,response,listener,reindexer,upgrade,task,index,meta,data,get,index,get,name,state,listener
IndexUpgradeCheck -> public IndexUpgradeCheck(String name,                              Function<IndexMetaData, UpgradeActionRequired> actionRequired,                              Client client, ClusterService clusterService, String[] types, Script updateScript);1541092382;Creates a new upgrade check__@param name           - the name of the check_@param actionRequired - return true if they can work with the index with specified name_@param client         - client_@param clusterService - cluster service_@param types          - a list of types that the reindexing should be limited to_@param updateScript   - the upgrade script that should be used during reindexing;public IndexUpgradeCheck(String name,_                             Function<IndexMetaData, UpgradeActionRequired> actionRequired,_                             Client client, ClusterService clusterService, String[] types, Script updateScript) {_        this(name, actionRequired, client, clusterService, types, updateScript,_                listener -> listener.onResponse(null), (t, listener) -> listener.onResponse(TransportResponse.Empty.INSTANCE))__    };creates,a,new,upgrade,check,param,name,the,name,of,the,check,param,action,required,return,true,if,they,can,work,with,the,index,with,specified,name,param,client,client,param,cluster,service,cluster,service,param,types,a,list,of,types,that,the,reindexing,should,be,limited,to,param,update,script,the,upgrade,script,that,should,be,used,during,reindexing;public,index,upgrade,check,string,name,function,index,meta,data,upgrade,action,required,action,required,client,client,cluster,service,cluster,service,string,types,script,update,script,this,name,action,required,client,cluster,service,types,update,script,listener,listener,on,response,null,t,listener,listener,on,response,transport,response,empty,instance
IndexUpgradeCheck -> public IndexUpgradeCheck(String name,                              Function<IndexMetaData, UpgradeActionRequired> actionRequired,                              Client client, ClusterService clusterService, String[] types, Script updateScript);1543343306;Creates a new upgrade check__@param name           - the name of the check_@param actionRequired - return true if they can work with the index with specified name_@param client         - client_@param clusterService - cluster service_@param types          - a list of types that the reindexing should be limited to_@param updateScript   - the upgrade script that should be used during reindexing;public IndexUpgradeCheck(String name,_                             Function<IndexMetaData, UpgradeActionRequired> actionRequired,_                             Client client, ClusterService clusterService, String[] types, Script updateScript) {_        this(name, actionRequired, client, clusterService, types, updateScript,_                listener -> listener.onResponse(null), (t, listener) -> listener.onResponse(TransportResponse.Empty.INSTANCE))__    };creates,a,new,upgrade,check,param,name,the,name,of,the,check,param,action,required,return,true,if,they,can,work,with,the,index,with,specified,name,param,client,client,param,cluster,service,cluster,service,param,types,a,list,of,types,that,the,reindexing,should,be,limited,to,param,update,script,the,upgrade,script,that,should,be,used,during,reindexing;public,index,upgrade,check,string,name,function,index,meta,data,upgrade,action,required,action,required,client,client,cluster,service,cluster,service,string,types,script,update,script,this,name,action,required,client,cluster,service,types,update,script,listener,listener,on,response,null,t,listener,listener,on,response,transport,response,empty,instance
IndexUpgradeCheck -> public String getName();1524684173;Returns the name of the check;public String getName() {_        return name__    };returns,the,name,of,the,check;public,string,get,name,return,name
IndexUpgradeCheck -> public String getName();1534176840;Returns the name of the check;public String getName() {_        return name__    };returns,the,name,of,the,check;public,string,get,name,return,name
IndexUpgradeCheck -> public String getName();1541092382;Returns the name of the check;public String getName() {_        return name__    };returns,the,name,of,the,check;public,string,get,name,return,name
IndexUpgradeCheck -> public String getName();1543343306;Returns the name of the check;public String getName() {_        return name__    };returns,the,name,of,the,check;public,string,get,name,return,name
IndexUpgradeCheck -> public UpgradeActionRequired actionRequired(IndexMetaData indexMetaData);1524684173;This method is called by Upgrade API to verify if upgrade or reindex for this index is required__@param indexMetaData index metadata_@return required action or UpgradeActionRequired.NOT_APPLICABLE if this check cannot be performed on the index;public UpgradeActionRequired actionRequired(IndexMetaData indexMetaData) {_        return actionRequired.apply(indexMetaData)__    };this,method,is,called,by,upgrade,api,to,verify,if,upgrade,or,reindex,for,this,index,is,required,param,index,meta,data,index,metadata,return,required,action,or,upgrade,action,required,if,this,check,cannot,be,performed,on,the,index;public,upgrade,action,required,action,required,index,meta,data,index,meta,data,return,action,required,apply,index,meta,data
IndexUpgradeCheck -> public UpgradeActionRequired actionRequired(IndexMetaData indexMetaData);1534176840;This method is called by Upgrade API to verify if upgrade or reindex for this index is required__@param indexMetaData index metadata_@return required action or UpgradeActionRequired.NOT_APPLICABLE if this check cannot be performed on the index;public UpgradeActionRequired actionRequired(IndexMetaData indexMetaData) {_        return actionRequired.apply(indexMetaData)__    };this,method,is,called,by,upgrade,api,to,verify,if,upgrade,or,reindex,for,this,index,is,required,param,index,meta,data,index,metadata,return,required,action,or,upgrade,action,required,if,this,check,cannot,be,performed,on,the,index;public,upgrade,action,required,action,required,index,meta,data,index,meta,data,return,action,required,apply,index,meta,data
IndexUpgradeCheck -> public UpgradeActionRequired actionRequired(IndexMetaData indexMetaData);1541092382;This method is called by Upgrade API to verify if upgrade or reindex for this index is required__@param indexMetaData index metadata_@return required action or UpgradeActionRequired.NOT_APPLICABLE if this check cannot be performed on the index;public UpgradeActionRequired actionRequired(IndexMetaData indexMetaData) {_        return actionRequired.apply(indexMetaData)__    };this,method,is,called,by,upgrade,api,to,verify,if,upgrade,or,reindex,for,this,index,is,required,param,index,meta,data,index,metadata,return,required,action,or,upgrade,action,required,if,this,check,cannot,be,performed,on,the,index;public,upgrade,action,required,action,required,index,meta,data,index,meta,data,return,action,required,apply,index,meta,data
IndexUpgradeCheck -> public UpgradeActionRequired actionRequired(IndexMetaData indexMetaData);1543343306;This method is called by Upgrade API to verify if upgrade or reindex for this index is required__@param indexMetaData index metadata_@return required action or UpgradeActionRequired.NOT_APPLICABLE if this check cannot be performed on the index;public UpgradeActionRequired actionRequired(IndexMetaData indexMetaData) {_        return actionRequired.apply(indexMetaData)__    };this,method,is,called,by,upgrade,api,to,verify,if,upgrade,or,reindex,for,this,index,is,required,param,index,meta,data,index,metadata,return,required,action,or,upgrade,action,required,if,this,check,cannot,be,performed,on,the,index;public,upgrade,action,required,action,required,index,meta,data,index,meta,data,return,action,required,apply,index,meta,data
