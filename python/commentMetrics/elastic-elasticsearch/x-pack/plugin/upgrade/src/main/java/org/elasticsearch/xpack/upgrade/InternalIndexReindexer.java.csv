commented;modifiers;parameterAmount;loc;comment;code
false;public;4;12;;public void upgrade(TaskId task, String index, ClusterState clusterState, ActionListener<BulkByScrollResponse> listener) {     ParentTaskAssigningClient parentAwareClient = new ParentTaskAssigningClient(client, task).     preUpgrade.accept(ActionListener.wrap(t -> innerUpgrade(parentAwareClient, index, clusterState, ActionListener.wrap(response -> postUpgrade.accept(t, ActionListener.wrap(empty -> listener.onResponse(response), listener::onFailure)), listener::onFailure)), listener::onFailure)). }
false;private;4;28;;private void innerUpgrade(ParentTaskAssigningClient parentAwareClient, String index, ClusterState clusterState, ActionListener<BulkByScrollResponse> listener) {     String newIndex = index + "-" + version.     try {         checkMasterAndDataNodeVersion(clusterState).         parentAwareClient.admin().indices().prepareCreate(newIndex).execute(ActionListener.wrap(createIndexResponse -> setReadOnlyBlock(index, ActionListener.wrap(setReadOnlyResponse -> reindex(parentAwareClient, index, newIndex, ActionListener.wrap(// Successful completion of reindexing - delete old index         bulkByScrollResponse -> removeReadOnlyBlock(parentAwareClient, index, ActionListener.wrap(unsetReadOnlyResponse -> parentAwareClient.admin().indices().prepareAliases().removeIndex(index).addAlias(newIndex, index).execute(ActionListener.wrap(deleteIndexResponse -> listener.onResponse(bulkByScrollResponse), listener::onFailure)), listener::onFailure)), // Something went wrong during reindexing - remove readonly flag and report the error         e -> removeReadOnlyBlock(parentAwareClient, index, ActionListener.wrap(unsetReadOnlyResponse -> {             listener.onFailure(e).         }, e1 -> {             listener.onFailure(e).         })))), listener::onFailure)), listener::onFailure)).     } catch (Exception ex) {         listener.onFailure(ex).     } }
false;private;1;5;;private void checkMasterAndDataNodeVersion(ClusterState clusterState) {     if (clusterState.nodes().getMinNodeVersion().before(Upgrade.UPGRADE_INTRODUCED)) {         throw new IllegalStateException("All nodes should have at least version [" + Upgrade.UPGRADE_INTRODUCED + "] to upgrade").     } }
false;private;3;5;;private void removeReadOnlyBlock(ParentTaskAssigningClient parentAwareClient, String index, ActionListener<AcknowledgedResponse> listener) {     Settings settings = Settings.builder().put(IndexMetaData.INDEX_READ_ONLY_SETTING.getKey(), false).build().     parentAwareClient.admin().indices().prepareUpdateSettings(index).setSettings(settings).execute(listener). }
false;private;4;10;;private void reindex(ParentTaskAssigningClient parentAwareClient, String index, String newIndex, ActionListener<BulkByScrollResponse> listener) {     ReindexRequest reindexRequest = new ReindexRequest().     reindexRequest.setSourceIndices(index).     reindexRequest.setSourceDocTypes(types).     reindexRequest.setDestIndex(newIndex).     reindexRequest.setRefresh(true).     reindexRequest.setScript(transformScript).     parentAwareClient.execute(ReindexAction.INSTANCE, reindexRequest, listener). }
false;public;1;30;;@Override public ClusterState execute(ClusterState currentState) throws Exception {     final IndexMetaData indexMetaData = currentState.metaData().index(index).     if (indexMetaData == null) {         throw new IndexNotFoundException(index).     }     if (indexMetaData.getState() != IndexMetaData.State.OPEN) {         throw new IllegalStateException("unable to upgrade a closed index[" + index + "]").     }     if (currentState.blocks().hasIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)) {         throw new IllegalStateException("unable to upgrade a read-only index[" + index + "]").     }     final Settings indexSettingsBuilder = Settings.builder().put(indexMetaData.getSettings()).put(IndexMetaData.INDEX_READ_ONLY_SETTING.getKey(), true).build().     final IndexMetaData.Builder builder = IndexMetaData.builder(indexMetaData).settings(indexSettingsBuilder).     assert same(indexMetaData.getSettings(), indexSettingsBuilder) == false.     builder.settingsVersion(1 + builder.settingsVersion()).     MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData()).put(builder).     ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks()).addIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK).     return ClusterState.builder(currentState).metaData(metaDataBuilder).blocks(blocks).build(). }
false;public;2;4;;@Override public void onFailure(String source, Exception e) {     listener.onFailure(e). }
false;public;3;4;;@Override public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {     listener.onResponse(TransportResponse.Empty.INSTANCE). }
true;private;2;45;/**  * Makes the index readonly if it's not set as a readonly yet  */ ;/**  * Makes the index readonly if it's not set as a readonly yet  */ private void setReadOnlyBlock(String index, ActionListener<TransportResponse.Empty> listener) {     clusterService.submitStateUpdateTask("lock-index-for-upgrade", new ClusterStateUpdateTask() {          @Override         public ClusterState execute(ClusterState currentState) throws Exception {             final IndexMetaData indexMetaData = currentState.metaData().index(index).             if (indexMetaData == null) {                 throw new IndexNotFoundException(index).             }             if (indexMetaData.getState() != IndexMetaData.State.OPEN) {                 throw new IllegalStateException("unable to upgrade a closed index[" + index + "]").             }             if (currentState.blocks().hasIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)) {                 throw new IllegalStateException("unable to upgrade a read-only index[" + index + "]").             }             final Settings indexSettingsBuilder = Settings.builder().put(indexMetaData.getSettings()).put(IndexMetaData.INDEX_READ_ONLY_SETTING.getKey(), true).build().             final IndexMetaData.Builder builder = IndexMetaData.builder(indexMetaData).settings(indexSettingsBuilder).             assert same(indexMetaData.getSettings(), indexSettingsBuilder) == false.             builder.settingsVersion(1 + builder.settingsVersion()).             MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData()).put(builder).             ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks()).addIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK).             return ClusterState.builder(currentState).metaData(metaDataBuilder).blocks(blocks).build().         }          @Override         public void onFailure(String source, Exception e) {             listener.onFailure(e).         }          @Override         public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {             listener.onResponse(TransportResponse.Empty.INSTANCE).         }     }). }
