# id;timestamp;commentText;codeText;commentWords;codeWords
InternalIndexReindexer -> private void setReadOnlyBlock(String index, ActionListener<TransportResponse.Empty> listener);1524684173;Makes the index readonly if it's not set as a readonly yet;private void setReadOnlyBlock(String index, ActionListener<TransportResponse.Empty> listener) {_        clusterService.submitStateUpdateTask("lock-index-for-upgrade", new ClusterStateUpdateTask() {__            @Override_            public ClusterState execute(ClusterState currentState) throws Exception {_                final IndexMetaData indexMetaData = currentState.metaData().index(index)__                if (indexMetaData == null) {_                    throw new IndexNotFoundException(index)__                }__                if (indexMetaData.getState() != IndexMetaData.State.OPEN) {_                    throw new IllegalStateException("unable to upgrade a closed index[" + index + "]")__                }_                if (currentState.blocks().hasIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)) {_                    throw new IllegalStateException("unable to upgrade a read-only index[" + index + "]")__                }__                Settings.Builder indexSettings = Settings.builder().put(indexMetaData.getSettings())_                        .put(IndexMetaData.INDEX_READ_ONLY_SETTING.getKey(), true)___                MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData())_                        .put(IndexMetaData.builder(indexMetaData).settings(indexSettings))___                ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())_                        .addIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)___                return ClusterState.builder(currentState).metaData(metaDataBuilder).blocks(blocks).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                listener.onFailure(e)__            }__            @Override_            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {_                listener.onResponse(TransportResponse.Empty.INSTANCE)__            }_        })__    };makes,the,index,readonly,if,it,s,not,set,as,a,readonly,yet;private,void,set,read,only,block,string,index,action,listener,transport,response,empty,listener,cluster,service,submit,state,update,task,lock,index,for,upgrade,new,cluster,state,update,task,override,public,cluster,state,execute,cluster,state,current,state,throws,exception,final,index,meta,data,index,meta,data,current,state,meta,data,index,index,if,index,meta,data,null,throw,new,index,not,found,exception,index,if,index,meta,data,get,state,index,meta,data,state,open,throw,new,illegal,state,exception,unable,to,upgrade,a,closed,index,index,if,current,state,blocks,has,index,block,index,index,meta,data,throw,new,illegal,state,exception,unable,to,upgrade,a,read,only,index,index,settings,builder,index,settings,settings,builder,put,index,meta,data,get,settings,put,index,meta,data,get,key,true,meta,data,builder,meta,data,builder,meta,data,builder,current,state,meta,data,put,index,meta,data,builder,index,meta,data,settings,index,settings,cluster,blocks,builder,blocks,cluster,blocks,builder,blocks,current,state,blocks,add,index,block,index,index,meta,data,return,cluster,state,builder,current,state,meta,data,meta,data,builder,blocks,blocks,build,override,public,void,on,failure,string,source,exception,e,listener,on,failure,e,override,public,void,cluster,state,processed,string,source,cluster,state,old,state,cluster,state,new,state,listener,on,response,transport,response,empty,instance
InternalIndexReindexer -> private void setReadOnlyBlock(String index, ActionListener<TransportResponse.Empty> listener);1534362961;Makes the index readonly if it's not set as a readonly yet;private void setReadOnlyBlock(String index, ActionListener<TransportResponse.Empty> listener) {_        clusterService.submitStateUpdateTask("lock-index-for-upgrade", new ClusterStateUpdateTask() {__            @Override_            public ClusterState execute(ClusterState currentState) throws Exception {_                final IndexMetaData indexMetaData = currentState.metaData().index(index)__                if (indexMetaData == null) {_                    throw new IndexNotFoundException(index)__                }__                if (indexMetaData.getState() != IndexMetaData.State.OPEN) {_                    throw new IllegalStateException("unable to upgrade a closed index[" + index + "]")__                }_                if (currentState.blocks().hasIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)) {_                    throw new IllegalStateException("unable to upgrade a read-only index[" + index + "]")__                }__                Settings.Builder indexSettings = Settings.builder().put(indexMetaData.getSettings())_                        .put(IndexMetaData.INDEX_READ_ONLY_SETTING.getKey(), true)___                MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData())_                        .put(IndexMetaData.builder(indexMetaData).settings(indexSettings))___                ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())_                        .addIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)___                return ClusterState.builder(currentState).metaData(metaDataBuilder).blocks(blocks).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                listener.onFailure(e)__            }__            @Override_            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {_                listener.onResponse(TransportResponse.Empty.INSTANCE)__            }_        })__    };makes,the,index,readonly,if,it,s,not,set,as,a,readonly,yet;private,void,set,read,only,block,string,index,action,listener,transport,response,empty,listener,cluster,service,submit,state,update,task,lock,index,for,upgrade,new,cluster,state,update,task,override,public,cluster,state,execute,cluster,state,current,state,throws,exception,final,index,meta,data,index,meta,data,current,state,meta,data,index,index,if,index,meta,data,null,throw,new,index,not,found,exception,index,if,index,meta,data,get,state,index,meta,data,state,open,throw,new,illegal,state,exception,unable,to,upgrade,a,closed,index,index,if,current,state,blocks,has,index,block,index,index,meta,data,throw,new,illegal,state,exception,unable,to,upgrade,a,read,only,index,index,settings,builder,index,settings,settings,builder,put,index,meta,data,get,settings,put,index,meta,data,get,key,true,meta,data,builder,meta,data,builder,meta,data,builder,current,state,meta,data,put,index,meta,data,builder,index,meta,data,settings,index,settings,cluster,blocks,builder,blocks,cluster,blocks,builder,blocks,current,state,blocks,add,index,block,index,index,meta,data,return,cluster,state,builder,current,state,meta,data,meta,data,builder,blocks,blocks,build,override,public,void,on,failure,string,source,exception,e,listener,on,failure,e,override,public,void,cluster,state,processed,string,source,cluster,state,old,state,cluster,state,new,state,listener,on,response,transport,response,empty,instance
InternalIndexReindexer -> private void setReadOnlyBlock(String index, ActionListener<TransportResponse.Empty> listener);1535552903;Makes the index readonly if it's not set as a readonly yet;private void setReadOnlyBlock(String index, ActionListener<TransportResponse.Empty> listener) {_        clusterService.submitStateUpdateTask("lock-index-for-upgrade", new ClusterStateUpdateTask() {__            @Override_            public ClusterState execute(ClusterState currentState) throws Exception {_                final IndexMetaData indexMetaData = currentState.metaData().index(index)__                if (indexMetaData == null) {_                    throw new IndexNotFoundException(index)__                }__                if (indexMetaData.getState() != IndexMetaData.State.OPEN) {_                    throw new IllegalStateException("unable to upgrade a closed index[" + index + "]")__                }_                if (currentState.blocks().hasIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)) {_                    throw new IllegalStateException("unable to upgrade a read-only index[" + index + "]")__                }__                Settings.Builder indexSettings = Settings.builder().put(indexMetaData.getSettings())_                        .put(IndexMetaData.INDEX_READ_ONLY_SETTING.getKey(), true)___                MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData())_                        .put(IndexMetaData.builder(indexMetaData).settings(indexSettings))___                ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())_                        .addIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)___                return ClusterState.builder(currentState).metaData(metaDataBuilder).blocks(blocks).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                listener.onFailure(e)__            }__            @Override_            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {_                listener.onResponse(TransportResponse.Empty.INSTANCE)__            }_        })__    };makes,the,index,readonly,if,it,s,not,set,as,a,readonly,yet;private,void,set,read,only,block,string,index,action,listener,transport,response,empty,listener,cluster,service,submit,state,update,task,lock,index,for,upgrade,new,cluster,state,update,task,override,public,cluster,state,execute,cluster,state,current,state,throws,exception,final,index,meta,data,index,meta,data,current,state,meta,data,index,index,if,index,meta,data,null,throw,new,index,not,found,exception,index,if,index,meta,data,get,state,index,meta,data,state,open,throw,new,illegal,state,exception,unable,to,upgrade,a,closed,index,index,if,current,state,blocks,has,index,block,index,index,meta,data,throw,new,illegal,state,exception,unable,to,upgrade,a,read,only,index,index,settings,builder,index,settings,settings,builder,put,index,meta,data,get,settings,put,index,meta,data,get,key,true,meta,data,builder,meta,data,builder,meta,data,builder,current,state,meta,data,put,index,meta,data,builder,index,meta,data,settings,index,settings,cluster,blocks,builder,blocks,cluster,blocks,builder,blocks,current,state,blocks,add,index,block,index,index,meta,data,return,cluster,state,builder,current,state,meta,data,meta,data,builder,blocks,blocks,build,override,public,void,on,failure,string,source,exception,e,listener,on,failure,e,override,public,void,cluster,state,processed,string,source,cluster,state,old,state,cluster,state,new,state,listener,on,response,transport,response,empty,instance
InternalIndexReindexer -> private void setReadOnlyBlock(String index, ActionListener<TransportResponse.Empty> listener);1539723533;Makes the index readonly if it's not set as a readonly yet;private void setReadOnlyBlock(String index, ActionListener<TransportResponse.Empty> listener) {_        clusterService.submitStateUpdateTask("lock-index-for-upgrade", new ClusterStateUpdateTask() {__            @Override_            public ClusterState execute(ClusterState currentState) throws Exception {_                final IndexMetaData indexMetaData = currentState.metaData().index(index)__                if (indexMetaData == null) {_                    throw new IndexNotFoundException(index)__                }__                if (indexMetaData.getState() != IndexMetaData.State.OPEN) {_                    throw new IllegalStateException("unable to upgrade a closed index[" + index + "]")__                }_                if (currentState.blocks().hasIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)) {_                    throw new IllegalStateException("unable to upgrade a read-only index[" + index + "]")__                }__                final Settings indexSettingsBuilder =_                        Settings.builder()_                                .put(indexMetaData.getSettings())_                                .put(IndexMetaData.INDEX_READ_ONLY_SETTING.getKey(), true)_                                .build()__                final IndexMetaData.Builder builder = IndexMetaData.builder(indexMetaData).settings(indexSettingsBuilder)__                assert same(indexMetaData.getSettings(), indexSettingsBuilder) == false__                builder.settingsVersion(1 + builder.settingsVersion())___                MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData()).put(builder)___                ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())_                        .addIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)___                return ClusterState.builder(currentState).metaData(metaDataBuilder).blocks(blocks).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                listener.onFailure(e)__            }__            @Override_            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {_                listener.onResponse(TransportResponse.Empty.INSTANCE)__            }_        })__    };makes,the,index,readonly,if,it,s,not,set,as,a,readonly,yet;private,void,set,read,only,block,string,index,action,listener,transport,response,empty,listener,cluster,service,submit,state,update,task,lock,index,for,upgrade,new,cluster,state,update,task,override,public,cluster,state,execute,cluster,state,current,state,throws,exception,final,index,meta,data,index,meta,data,current,state,meta,data,index,index,if,index,meta,data,null,throw,new,index,not,found,exception,index,if,index,meta,data,get,state,index,meta,data,state,open,throw,new,illegal,state,exception,unable,to,upgrade,a,closed,index,index,if,current,state,blocks,has,index,block,index,index,meta,data,throw,new,illegal,state,exception,unable,to,upgrade,a,read,only,index,index,final,settings,index,settings,builder,settings,builder,put,index,meta,data,get,settings,put,index,meta,data,get,key,true,build,final,index,meta,data,builder,builder,index,meta,data,builder,index,meta,data,settings,index,settings,builder,assert,same,index,meta,data,get,settings,index,settings,builder,false,builder,settings,version,1,builder,settings,version,meta,data,builder,meta,data,builder,meta,data,builder,current,state,meta,data,put,builder,cluster,blocks,builder,blocks,cluster,blocks,builder,blocks,current,state,blocks,add,index,block,index,index,meta,data,return,cluster,state,builder,current,state,meta,data,meta,data,builder,blocks,blocks,build,override,public,void,on,failure,string,source,exception,e,listener,on,failure,e,override,public,void,cluster,state,processed,string,source,cluster,state,old,state,cluster,state,new,state,listener,on,response,transport,response,empty,instance
