commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;public void testProcessRequestOneMatching() {     RollupJobConfig job = randomRollupJobConfig(random(), "foo").     TaskManager taskManager = mock(TaskManager.class).     RollupJobTask task = mock(RollupJobTask.class).     when(task.getDescription()).thenReturn("rollup_foo").     when(task.getConfig()).thenReturn(job).     Map<Long, Task> tasks = getRandomTasks().     tasks.put(1L, task).     when(taskManager.getTasks()).thenReturn(tasks).     Consumer<RollupJobTask> consumer = rollupJobTask -> {         assertThat(rollupJobTask.getDescription(), equalTo("rollup_foo")).         assertThat(rollupJobTask.getConfig().getId(), equalTo(job.getId())).     }.     TransportTaskHelper.doProcessTasks("foo", consumer, taskManager). }
false;public;0;10;;public void testProcessRequestNoMatching() {     TaskManager taskManager = mock(TaskManager.class).     Map<Long, Task> tasks = getRandomTasks().     when(taskManager.getTasks()).thenReturn(tasks).     Consumer<RollupJobTask> consumer = rollupJobTask -> {         fail("Should not have reached consumer").     }.     TransportTaskHelper.doProcessTasks("foo", consumer, taskManager). }
false;public;0;25;;public void testProcessRequestMultipleMatching() {     TaskManager taskManager = mock(TaskManager.class).     Map<Long, Task> tasks = getRandomTasks().     when(taskManager.getTasks()).thenReturn(tasks).     RollupJobConfig job = randomRollupJobConfig(random(), "foo").     RollupJobTask task = mock(RollupJobTask.class).     when(task.getDescription()).thenReturn("rollup_foo").     when(task.getConfig()).thenReturn(job).     tasks.put(1L, task).     RollupJobConfig job2 = randomRollupJobConfig(random(), "foo").     RollupJobTask task2 = mock(RollupJobTask.class).     when(task2.getDescription()).thenReturn("rollup_foo").     when(task2.getConfig()).thenReturn(job2).     tasks.put(2L, task2).     Consumer<RollupJobTask> consumer = rollupJobTask -> {         fail("Should not have reached consumer").     }.     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> TransportTaskHelper.doProcessTasks("foo", consumer, taskManager)).     assertThat(e.getMessage(), equalTo("Found more than one matching task for rollup job [foo] when " + "there should only be one.")). }
false;private;0;10;;private Map<Long, Task> getRandomTasks() {     int num = randomIntBetween(1, 10).     Map<Long, Task> tasks = new HashMap<>(num).     for (int i = 0. i < num. i++) {         Long taskId = randomLongBetween(10, Long.MAX_VALUE).         tasks.put(taskId, new TestTask(taskId, randomAlphaOfLength(10), "test_action", "test_description", new TaskId("node:123"), Collections.emptyMap())).     }     return tasks. }
