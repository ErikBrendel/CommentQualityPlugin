commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void init() {     licenseState = mock(XPackLicenseState.class). }
false;public;0;6;;public void testAvailable() {     RollupFeatureSet featureSet = new RollupFeatureSet(Settings.EMPTY, licenseState).     boolean available = randomBoolean().     when(licenseState.isRollupAllowed()).thenReturn(available).     assertThat(featureSet.available(), is(available)). }
false;public;0;7;;public void testEnabledSetting() {     boolean enabled = randomBoolean().     Settings.Builder settings = Settings.builder().     settings.put("xpack.rollup.enabled", enabled).     RollupFeatureSet featureSet = new RollupFeatureSet(settings.build(), licenseState).     assertThat(featureSet.enabled(), is(enabled)). }
false;public;0;4;;public void testEnabledDefault() {     RollupFeatureSet featureSet = new RollupFeatureSet(Settings.EMPTY, licenseState).     assertThat(featureSet.enabled(), is(true)). }
false;public;0;13;;public void testUsage() throws ExecutionException, InterruptedException, IOException {     RollupFeatureSet featureSet = new RollupFeatureSet(Settings.EMPTY, licenseState).     PlainActionFuture<XPackFeatureSet.Usage> future = new PlainActionFuture<>().     featureSet.usage(future).     XPackFeatureSet.Usage rollupUsage = future.get().     BytesStreamOutput out = new BytesStreamOutput().     rollupUsage.writeTo(out).     XPackFeatureSet.Usage serializedUsage = new RollupFeatureSetUsage(out.bytes().streamInput()).     for (XPackFeatureSet.Usage usage : Arrays.asList(rollupUsage, serializedUsage)) {         assertThat(usage.name(), is(featureSet.name())).         assertThat(usage.enabled(), is(featureSet.enabled())).     } }
