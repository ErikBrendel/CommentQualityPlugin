# id;timestamp;commentText;codeText;commentWords;codeWords
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1524684173;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHisto().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histo,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1532028790;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHisto().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histo,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1533295538;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHisto().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histo,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1533319589;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHisto().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histo,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1533641732;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHistogram().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histogram,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1533738061;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHistogram().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histogram,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1535666657;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHistogram().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histogram,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1538067637;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHistogram().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histogram,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1538170812;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHistogram().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histogram,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1540238977;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHistogram().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histogram,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1540486836;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHistogram().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histogram,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1544232221;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHistogram().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histogram,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1544600864;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHistogram().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histogram,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1548236405;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHistogram().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histogram,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,                                  Consumer<List<IndexRequest>> rollupConsumer) throws Exception;1550243561;Executes a rollup test case_@param docs The docs to index in the source_@param config The rollup job to execute_@param now The current time in milliseconds_@param rollupConsumer The consumer that checks the created rollup documents for the job;private void executeTestCase(List<Map<String, Object>> docs, RollupJobConfig config, long now,_                                 Consumer<List<IndexRequest>> rollupConsumer) throws Exception {_        Map<String, MappedFieldType> fieldTypeLookup = createFieldTypes(config)__        Directory dir = index(docs, fieldTypeLookup)__        IndexReader reader = DirectoryReader.open(dir)__        IndexSearcher searcher = new IndexSearcher(reader)__        String dateHistoField = config.getGroupConfig().getDateHistogram().getField()__        final ExecutorService executor = Executors.newFixedThreadPool(1)__        try {_            RollupJob job = new RollupJob(config, Collections.emptyMap())__            final SyncRollupIndexer action = new SyncRollupIndexer(executor, job, searcher,_                    fieldTypeLookup.values().toArray(new MappedFieldType[0]), fieldTypeLookup.get(dateHistoField))__            rollupConsumer.accept(action.triggerAndWaitForCompletion(now))__        } finally {_            executor.shutdownNow()__            reader.close()__            dir.close()__        }_    };executes,a,rollup,test,case,param,docs,the,docs,to,index,in,the,source,param,config,the,rollup,job,to,execute,param,now,the,current,time,in,milliseconds,param,rollup,consumer,the,consumer,that,checks,the,created,rollup,documents,for,the,job;private,void,execute,test,case,list,map,string,object,docs,rollup,job,config,config,long,now,consumer,list,index,request,rollup,consumer,throws,exception,map,string,mapped,field,type,field,type,lookup,create,field,types,config,directory,dir,index,docs,field,type,lookup,index,reader,reader,directory,reader,open,dir,index,searcher,searcher,new,index,searcher,reader,string,date,histo,field,config,get,group,config,get,date,histogram,get,field,final,executor,service,executor,executors,new,fixed,thread,pool,1,try,rollup,job,job,new,rollup,job,config,collections,empty,map,final,sync,rollup,indexer,action,new,sync,rollup,indexer,executor,job,searcher,field,type,lookup,values,to,array,new,mapped,field,type,0,field,type,lookup,get,date,histo,field,rollup,consumer,accept,action,trigger,and,wait,for,completion,now,finally,executor,shutdown,now,reader,close,dir,close
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1524684173;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHisto().getField())_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHisto() != null) {_            for (String field : job.getGroupConfig().getHisto().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histo,get,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histo,null,for,string,field,job,get,group,config,get,histo,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1532028790;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHisto().getField())_                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHisto() != null) {_            for (String field : job.getGroupConfig().getHisto().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histo,get,field,date,time,formatter,joda,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histo,null,for,string,field,job,get,group,config,get,histo,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1533295538;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHisto().getField())_                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHisto() != null) {_            for (String field : job.getGroupConfig().getHisto().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histo,get,field,date,time,formatter,joda,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histo,null,for,string,field,job,get,group,config,get,histo,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1533319589;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHisto().getField())_                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHisto() != null) {_            for (String field : job.getGroupConfig().getHisto().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histo,get,field,date,time,formatter,joda,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histo,null,for,string,field,job,get,group,config,get,histo,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1533641732;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHistogram().getField())_                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHistogram() != null) {_            for (String field : job.getGroupConfig().getHistogram().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histogram,get,field,date,time,formatter,joda,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histogram,null,for,string,field,job,get,group,config,get,histogram,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1533738061;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHistogram().getField())_                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHistogram() != null) {_            for (String field : job.getGroupConfig().getHistogram().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histogram,get,field,date,time,formatter,joda,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histogram,null,for,string,field,job,get,group,config,get,histogram,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1535666657;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHistogram().getField())_                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHistogram() != null) {_            for (String field : job.getGroupConfig().getHistogram().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histogram,get,field,date,time,formatter,joda,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histogram,null,for,string,field,job,get,group,config,get,histogram,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1538067637;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHistogram().getField())_                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHistogram() != null) {_            for (String field : job.getGroupConfig().getHistogram().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histogram,get,field,date,time,formatter,joda,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histogram,null,for,string,field,job,get,group,config,get,histogram,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1538170812;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHistogram().getField())_                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHistogram() != null) {_            for (String field : job.getGroupConfig().getHistogram().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histogram,get,field,date,time,formatter,joda,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histogram,null,for,string,field,job,get,group,config,get,histogram,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1540238977;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHistogram().getField())_                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHistogram() != null) {_            for (String field : job.getGroupConfig().getHistogram().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histogram,get,field,date,time,formatter,joda,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histogram,null,for,string,field,job,get,group,config,get,histogram,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1540486836;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHistogram().getField())_                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHistogram() != null) {_            for (String field : job.getGroupConfig().getHistogram().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histogram,get,field,date,time,formatter,joda,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histogram,null,for,string,field,job,get,group,config,get,histogram,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1544232221;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHistogram().getField())_                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHistogram() != null) {_            for (String field : job.getGroupConfig().getHistogram().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histogram,get,field,date,time,formatter,joda,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histogram,null,for,string,field,job,get,group,config,get,histogram,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1544600864;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHistogram().getField())_                .dateTimeFormatter(DateFormatter.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second")))_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHistogram() != null) {_            for (String field : job.getGroupConfig().getHistogram().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histogram,get,field,date,time,formatter,date,formatter,for,pattern,random,from,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histogram,null,for,string,field,job,get,group,config,get,histogram,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1548236405;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHistogram().getField())_                .format(randomFrom("basic_date", "date_optional_time", "epoch_second"))_                .locale(Locale.ROOT)_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHistogram() != null) {_            for (String field : job.getGroupConfig().getHistogram().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histogram,get,field,format,random,from,locale,locale,root,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histogram,null,for,string,field,job,get,group,config,get,histogram,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
RollupIndexerIndexingTests -> private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job);1550243561;Creates {@link MappedFieldType} from the provided <code>job</code>._For simplicity all numbers are considered as longs.__@return A map containing all created field types accessible by their names;private Map<String, MappedFieldType> createFieldTypes(RollupJobConfig job) {_        Map<String, MappedFieldType> fieldTypes = new HashMap<>()__        MappedFieldType fieldType = new DateFieldMapper.Builder(job.getGroupConfig().getDateHistogram().getField())_                .format(randomFrom("basic_date", "date_optional_time", "epoch_second"))_                .locale(Locale.ROOT)_                .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                .fieldType()__        fieldTypes.put(fieldType.name(), fieldType)___        if (job.getGroupConfig().getHistogram() != null) {_            for (String field : job.getGroupConfig().getHistogram().getFields()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(field, NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getGroupConfig().getTerms() != null) {_            for (String field : job.getGroupConfig().getTerms().getFields()) {_                MappedFieldType ft = new KeywordFieldMapper.Builder(field)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }__        if (job.getMetricsConfig() != null) {_            for (MetricConfig metric : job.getMetricsConfig()) {_                MappedFieldType ft = new NumberFieldMapper.Builder(metric.getField(), NumberFieldMapper.NumberType.LONG)_                        .build(new Mapper.BuilderContext(settings.getSettings(), new ContentPath(0)))_                        .fieldType()__                fieldTypes.put(ft.name(), ft)__            }_        }_        return fieldTypes__    };creates,link,mapped,field,type,from,the,provided,code,job,code,for,simplicity,all,numbers,are,considered,as,longs,return,a,map,containing,all,created,field,types,accessible,by,their,names;private,map,string,mapped,field,type,create,field,types,rollup,job,config,job,map,string,mapped,field,type,field,types,new,hash,map,mapped,field,type,field,type,new,date,field,mapper,builder,job,get,group,config,get,date,histogram,get,field,format,random,from,locale,locale,root,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,field,type,name,field,type,if,job,get,group,config,get,histogram,null,for,string,field,job,get,group,config,get,histogram,get,fields,mapped,field,type,ft,new,number,field,mapper,builder,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,group,config,get,terms,null,for,string,field,job,get,group,config,get,terms,get,fields,mapped,field,type,ft,new,keyword,field,mapper,builder,field,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,if,job,get,metrics,config,null,for,metric,config,metric,job,get,metrics,config,mapped,field,type,ft,new,number,field,mapper,builder,metric,get,field,number,field,mapper,number,type,long,build,new,mapper,builder,context,settings,get,settings,new,content,path,0,field,type,field,types,put,ft,name,ft,return,field,types
