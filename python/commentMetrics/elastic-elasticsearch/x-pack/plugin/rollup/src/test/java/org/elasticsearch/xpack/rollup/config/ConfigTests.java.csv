commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testEmptyField() {     Exception e = expectThrows(IllegalArgumentException.class, () -> new MetricConfig(null, singletonList("max"))).     assertThat(e.getMessage(), equalTo("Field must be a non-null, non-empty string")).     e = expectThrows(IllegalArgumentException.class, () -> new MetricConfig("", singletonList("max"))).     assertThat(e.getMessage(), equalTo("Field must be a non-null, non-empty string")). }
false;public;0;7;;public void testEmptyMetrics() {     Exception e = expectThrows(IllegalArgumentException.class, () -> new MetricConfig("foo", emptyList())).     assertThat(e.getMessage(), equalTo("Metrics must be a non-null, non-empty array of strings")).     e = expectThrows(IllegalArgumentException.class, () -> new MetricConfig("foo", null)).     assertThat(e.getMessage(), equalTo("Metrics must be a non-null, non-empty array of strings")). }
false;public;0;4;;public void testEmptyGroup() {     Exception e = expectThrows(IllegalArgumentException.class, () -> new GroupConfig(null, null, null)).     assertThat(e.getMessage(), equalTo("Date histogram must not be null")). }
false;public;0;5;;public void testNoDateHisto() {     Exception e = expectThrows(IllegalArgumentException.class, () -> new GroupConfig(null, randomHistogramGroupConfig(random()), randomTermsGroupConfig(random()))).     assertThat(e.getMessage(), equalTo("Date histogram must not be null")). }
false;public;0;8;;public void testEmptyDateHistoField() {     Exception e = expectThrows(IllegalArgumentException.class, () -> new DateHistogramGroupConfig(null, DateHistogramInterval.HOUR)).     assertThat(e.getMessage(), equalTo("Field must be a non-null, non-empty string")).     e = expectThrows(IllegalArgumentException.class, () -> new DateHistogramGroupConfig("", DateHistogramInterval.HOUR)).     assertThat(e.getMessage(), equalTo("Field must be a non-null, non-empty string")). }
false;public;0;4;;public void testEmptyDateHistoInterval() {     Exception e = expectThrows(IllegalArgumentException.class, () -> new DateHistogramGroupConfig("foo", null)).     assertThat(e.getMessage(), equalTo("Interval must be non-null")). }
false;public;0;4;;public void testNullTimeZone() {     DateHistogramGroupConfig config = new DateHistogramGroupConfig("foo", DateHistogramInterval.HOUR, null, null).     assertThat(config.getTimeZone(), equalTo(DateTimeZone.UTC.getID())). }
false;public;0;4;;public void testEmptyTimeZone() {     DateHistogramGroupConfig config = new DateHistogramGroupConfig("foo", DateHistogramInterval.HOUR, null, "").     assertThat(config.getTimeZone(), equalTo(DateTimeZone.UTC.getID())). }
false;public;0;4;;public void testDefaultTimeZone() {     DateHistogramGroupConfig config = new DateHistogramGroupConfig("foo", DateHistogramInterval.HOUR).     assertThat(config.getTimeZone(), equalTo(DateTimeZone.UTC.getID())). }
false;public;0;5;;public void testUnknownTimeZone() {     Exception e = expectThrows(ZoneRulesException.class, () -> new DateHistogramGroupConfig("foo", DateHistogramInterval.HOUR, null, "FOO")).     assertThat(e.getMessage(), equalTo("Unknown time-zone ID: FOO")). }
false;public;0;7;;public void testEmptyHistoField() {     Exception e = expectThrows(IllegalArgumentException.class, () -> new HistogramGroupConfig(1L, (String[]) null)).     assertThat(e.getMessage(), equalTo("Fields must have at least one value")).     e = expectThrows(IllegalArgumentException.class, () -> new HistogramGroupConfig(1L, new String[0])).     assertThat(e.getMessage(), equalTo("Fields must have at least one value")). }
false;public;0;7;;public void testBadHistoIntervals() {     Exception e = expectThrows(IllegalArgumentException.class, () -> new HistogramGroupConfig(0L, "foo", "bar")).     assertThat(e.getMessage(), equalTo("Interval must be a positive long")).     e = expectThrows(IllegalArgumentException.class, () -> new HistogramGroupConfig(-1L, "foo", "bar")).     assertThat(e.getMessage(), equalTo("Interval must be a positive long")). }
false;public;0;5;;public void testEmptyTermsField() {     final String[] fields = randomBoolean() ? new String[0] : null.     Exception e = expectThrows(IllegalArgumentException.class, () -> new TermsGroupConfig(fields)).     assertThat(e.getMessage(), equalTo("Fields must have at least one value")). }
false;public;0;9;;public void testNoHeadersInJSON() {     Map<String, String> headers = new HashMap<>(1).     headers.put("es-security-runas-user", "foo").     headers.put("_xpack_security_authentication", "bar").     RollupJob job = new RollupJob(randomRollupJobConfig(random()), headers).     String json = job.toString().     assertFalse(json.contains("authentication")).     assertFalse(json.contains("security")). }
