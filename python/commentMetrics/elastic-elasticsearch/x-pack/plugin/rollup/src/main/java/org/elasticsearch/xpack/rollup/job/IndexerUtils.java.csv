# id;timestamp;commentText;codeText;commentWords;codeWords
IndexerUtils -> static List<IndexRequest> processBuckets(CompositeAggregation agg, String rollupIndex, RollupJobStats stats,                                              GroupConfig groupConfig, String jobId, boolean isUpgradedDocID);1533319589;The only entry point in this class.  You hand this method an aggregation and an index_pattern, and it returns a list of rolled documents that you can index__@param agg              The aggregation response that you want to rollup_@param rollupIndex      The index that holds rollups for this job_@param stats            The stats accumulator for this job's task_@param groupConfig      The grouping configuration for the job_@param jobId            The ID for the job_@param isUpgradedDocID  `true` if this job is using the new ID scheme_@return             A list of rolled documents derived from the response;static List<IndexRequest> processBuckets(CompositeAggregation agg, String rollupIndex, RollupJobStats stats,_                                             GroupConfig groupConfig, String jobId, boolean isUpgradedDocID) {__        logger.debug("Buckets: [" + agg.getBuckets().size() + "][" + jobId + "]")__        return agg.getBuckets().stream().map(b ->{_            stats.incrementNumDocuments(b.getDocCount())___            _            _            TreeMap<String, Object> keys = new TreeMap<>(b.getKey())__            List<Aggregation> metrics = b.getAggregations().asList()___            RollupIDGenerator idGenerator__            if (isUpgradedDocID) {_                idGenerator = new RollupIDGenerator.Murmur3(jobId)__            } else  {_                idGenerator = new RollupIDGenerator.CRC()__            }_            Map<String, Object> doc = new HashMap<>(keys.size() + metrics.size())___            processKeys(keys, doc, b.getDocCount(), groupConfig, idGenerator)__            idGenerator.add(jobId)__            processMetrics(metrics, doc)___            doc.put(RollupField.ROLLUP_META + "." + RollupField.VERSION_FIELD,_                isUpgradedDocID ? Rollup.CURRENT_ROLLUP_VERSION : Rollup.ROLLUP_VERSION_V1)__            doc.put(RollupField.ROLLUP_META + "." + RollupField.ID.getPreferredName(), jobId)___            IndexRequest request = new IndexRequest(rollupIndex, RollupField.TYPE_NAME, idGenerator.getID())__            request.source(doc)__            return request__        }).collect(Collectors.toList())__    };the,only,entry,point,in,this,class,you,hand,this,method,an,aggregation,and,an,index,pattern,and,it,returns,a,list,of,rolled,documents,that,you,can,index,param,agg,the,aggregation,response,that,you,want,to,rollup,param,rollup,index,the,index,that,holds,rollups,for,this,job,param,stats,the,stats,accumulator,for,this,job,s,task,param,group,config,the,grouping,configuration,for,the,job,param,job,id,the,id,for,the,job,param,is,upgraded,doc,id,true,if,this,job,is,using,the,new,id,scheme,return,a,list,of,rolled,documents,derived,from,the,response;static,list,index,request,process,buckets,composite,aggregation,agg,string,rollup,index,rollup,job,stats,stats,group,config,group,config,string,job,id,boolean,is,upgraded,doc,id,logger,debug,buckets,agg,get,buckets,size,job,id,return,agg,get,buckets,stream,map,b,stats,increment,num,documents,b,get,doc,count,tree,map,string,object,keys,new,tree,map,b,get,key,list,aggregation,metrics,b,get,aggregations,as,list,rollup,idgenerator,id,generator,if,is,upgraded,doc,id,id,generator,new,rollup,idgenerator,murmur3,job,id,else,id,generator,new,rollup,idgenerator,crc,map,string,object,doc,new,hash,map,keys,size,metrics,size,process,keys,keys,doc,b,get,doc,count,group,config,id,generator,id,generator,add,job,id,process,metrics,metrics,doc,doc,put,rollup,field,rollup,field,is,upgraded,doc,id,rollup,rollup,doc,put,rollup,field,rollup,field,id,get,preferred,name,job,id,index,request,request,new,index,request,rollup,index,rollup,field,id,generator,get,id,request,source,doc,return,request,collect,collectors,to,list
IndexerUtils -> static List<IndexRequest> processBuckets(CompositeAggregation agg, String rollupIndex, RollupJobStats stats,                                              GroupConfig groupConfig, String jobId, boolean isUpgradedDocID);1533641732;The only entry point in this class.  You hand this method an aggregation and an index_pattern, and it returns a list of rolled documents that you can index__@param agg              The aggregation response that you want to rollup_@param rollupIndex      The index that holds rollups for this job_@param stats            The stats accumulator for this job's task_@param groupConfig      The grouping configuration for the job_@param jobId            The ID for the job_@param isUpgradedDocID  `true` if this job is using the new ID scheme_@return             A list of rolled documents derived from the response;static List<IndexRequest> processBuckets(CompositeAggregation agg, String rollupIndex, RollupJobStats stats,_                                             GroupConfig groupConfig, String jobId, boolean isUpgradedDocID) {__        logger.debug("Buckets: [" + agg.getBuckets().size() + "][" + jobId + "]")__        return agg.getBuckets().stream().map(b ->{_            stats.incrementNumDocuments(b.getDocCount())___            _            _            TreeMap<String, Object> keys = new TreeMap<>(b.getKey())__            List<Aggregation> metrics = b.getAggregations().asList()___            RollupIDGenerator idGenerator__            if (isUpgradedDocID) {_                idGenerator = new RollupIDGenerator.Murmur3(jobId)__            } else  {_                idGenerator = new RollupIDGenerator.CRC()__            }_            Map<String, Object> doc = new HashMap<>(keys.size() + metrics.size())___            processKeys(keys, doc, b.getDocCount(), groupConfig, idGenerator)__            idGenerator.add(jobId)__            processMetrics(metrics, doc)___            doc.put(RollupField.ROLLUP_META + "." + RollupField.VERSION_FIELD,_                isUpgradedDocID ? Rollup.CURRENT_ROLLUP_VERSION : Rollup.ROLLUP_VERSION_V1)__            doc.put(RollupField.ROLLUP_META + "." + RollupField.ID.getPreferredName(), jobId)___            IndexRequest request = new IndexRequest(rollupIndex, RollupField.TYPE_NAME, idGenerator.getID())__            request.source(doc)__            return request__        }).collect(Collectors.toList())__    };the,only,entry,point,in,this,class,you,hand,this,method,an,aggregation,and,an,index,pattern,and,it,returns,a,list,of,rolled,documents,that,you,can,index,param,agg,the,aggregation,response,that,you,want,to,rollup,param,rollup,index,the,index,that,holds,rollups,for,this,job,param,stats,the,stats,accumulator,for,this,job,s,task,param,group,config,the,grouping,configuration,for,the,job,param,job,id,the,id,for,the,job,param,is,upgraded,doc,id,true,if,this,job,is,using,the,new,id,scheme,return,a,list,of,rolled,documents,derived,from,the,response;static,list,index,request,process,buckets,composite,aggregation,agg,string,rollup,index,rollup,job,stats,stats,group,config,group,config,string,job,id,boolean,is,upgraded,doc,id,logger,debug,buckets,agg,get,buckets,size,job,id,return,agg,get,buckets,stream,map,b,stats,increment,num,documents,b,get,doc,count,tree,map,string,object,keys,new,tree,map,b,get,key,list,aggregation,metrics,b,get,aggregations,as,list,rollup,idgenerator,id,generator,if,is,upgraded,doc,id,id,generator,new,rollup,idgenerator,murmur3,job,id,else,id,generator,new,rollup,idgenerator,crc,map,string,object,doc,new,hash,map,keys,size,metrics,size,process,keys,keys,doc,b,get,doc,count,group,config,id,generator,id,generator,add,job,id,process,metrics,metrics,doc,doc,put,rollup,field,rollup,field,is,upgraded,doc,id,rollup,rollup,doc,put,rollup,field,rollup,field,id,get,preferred,name,job,id,index,request,request,new,index,request,rollup,index,rollup,field,id,generator,get,id,request,source,doc,return,request,collect,collectors,to,list
IndexerUtils -> static List<IndexRequest> processBuckets(CompositeAggregation agg, String rollupIndex, RollupJobStats stats,                                               GroupConfig groupConfig, String jobId);1524684173;The only entry point in this class.  You hand this method an aggregation and an index_pattern, and it returns a list of rolled documents that you can index__@param agg          The aggregation response that you want to rollup_@param rollupIndex  The index that holds rollups for this job_@return             A list of rolled documents derived from the response;static List<IndexRequest> processBuckets(CompositeAggregation agg, String rollupIndex, RollupJobStats stats, _                                             GroupConfig groupConfig, String jobId) {__        logger.debug("Buckets: [" + agg.getBuckets().size() + "][" + jobId + "]")__        return agg.getBuckets().stream().map(b ->{_            stats.incrementNumDocuments(b.getDocCount())___            _            _            TreeMap<String, Object> keys = new TreeMap<>(b.getKey())__            List<Aggregation> metrics = b.getAggregations().asList()___            Map<String, Object> doc = new HashMap<>(keys.size() + metrics.size())__            CRC32 docId = processKeys(keys, doc, b.getDocCount(), groupConfig)__            byte[] vs = jobId.getBytes(StandardCharsets.UTF_8)__            docId.update(vs, 0, vs.length)__            processMetrics(metrics, doc)___            doc.put(RollupField.ROLLUP_META + "." + RollupField.VERSION_FIELD, Rollup.ROLLUP_VERSION)__            doc.put(RollupField.ROLLUP_META + "." + RollupField.ID.getPreferredName(), jobId)___            IndexRequest request = new IndexRequest(rollupIndex, RollupField.TYPE_NAME, String.valueOf(docId.getValue()))__            request.source(doc)__            return request__        }).collect(Collectors.toList())__    };the,only,entry,point,in,this,class,you,hand,this,method,an,aggregation,and,an,index,pattern,and,it,returns,a,list,of,rolled,documents,that,you,can,index,param,agg,the,aggregation,response,that,you,want,to,rollup,param,rollup,index,the,index,that,holds,rollups,for,this,job,return,a,list,of,rolled,documents,derived,from,the,response;static,list,index,request,process,buckets,composite,aggregation,agg,string,rollup,index,rollup,job,stats,stats,group,config,group,config,string,job,id,logger,debug,buckets,agg,get,buckets,size,job,id,return,agg,get,buckets,stream,map,b,stats,increment,num,documents,b,get,doc,count,tree,map,string,object,keys,new,tree,map,b,get,key,list,aggregation,metrics,b,get,aggregations,as,list,map,string,object,doc,new,hash,map,keys,size,metrics,size,crc32,doc,id,process,keys,keys,doc,b,get,doc,count,group,config,byte,vs,job,id,get,bytes,standard,charsets,doc,id,update,vs,0,vs,length,process,metrics,metrics,doc,doc,put,rollup,field,rollup,field,rollup,doc,put,rollup,field,rollup,field,id,get,preferred,name,job,id,index,request,request,new,index,request,rollup,index,rollup,field,string,value,of,doc,id,get,value,request,source,doc,return,request,collect,collectors,to,list
IndexerUtils -> static List<IndexRequest> processBuckets(CompositeAggregation agg, String rollupIndex, RollupJobStats stats,                                               GroupConfig groupConfig, String jobId);1528762805;The only entry point in this class.  You hand this method an aggregation and an index_pattern, and it returns a list of rolled documents that you can index__@param agg          The aggregation response that you want to rollup_@param rollupIndex  The index that holds rollups for this job_@return             A list of rolled documents derived from the response;static List<IndexRequest> processBuckets(CompositeAggregation agg, String rollupIndex, RollupJobStats stats, _                                             GroupConfig groupConfig, String jobId) {__        logger.debug("Buckets: [" + agg.getBuckets().size() + "][" + jobId + "]")__        return agg.getBuckets().stream().map(b ->{_            stats.incrementNumDocuments(b.getDocCount())___            _            _            TreeMap<String, Object> keys = new TreeMap<>(b.getKey())__            List<Aggregation> metrics = b.getAggregations().asList()___            Map<String, Object> doc = new HashMap<>(keys.size() + metrics.size())__            CRC32 docId = processKeys(keys, doc, b.getDocCount(), groupConfig)__            byte[] vs = jobId.getBytes(StandardCharsets.UTF_8)__            docId.update(vs, 0, vs.length)__            processMetrics(metrics, doc)___            doc.put(RollupField.ROLLUP_META + "." + RollupField.VERSION_FIELD, Rollup.ROLLUP_VERSION)__            doc.put(RollupField.ROLLUP_META + "." + RollupField.ID.getPreferredName(), jobId)___            IndexRequest request = new IndexRequest(rollupIndex, RollupField.TYPE_NAME, String.valueOf(docId.getValue()))__            request.source(doc)__            return request__        }).collect(Collectors.toList())__    };the,only,entry,point,in,this,class,you,hand,this,method,an,aggregation,and,an,index,pattern,and,it,returns,a,list,of,rolled,documents,that,you,can,index,param,agg,the,aggregation,response,that,you,want,to,rollup,param,rollup,index,the,index,that,holds,rollups,for,this,job,return,a,list,of,rolled,documents,derived,from,the,response;static,list,index,request,process,buckets,composite,aggregation,agg,string,rollup,index,rollup,job,stats,stats,group,config,group,config,string,job,id,logger,debug,buckets,agg,get,buckets,size,job,id,return,agg,get,buckets,stream,map,b,stats,increment,num,documents,b,get,doc,count,tree,map,string,object,keys,new,tree,map,b,get,key,list,aggregation,metrics,b,get,aggregations,as,list,map,string,object,doc,new,hash,map,keys,size,metrics,size,crc32,doc,id,process,keys,keys,doc,b,get,doc,count,group,config,byte,vs,job,id,get,bytes,standard,charsets,doc,id,update,vs,0,vs,length,process,metrics,metrics,doc,doc,put,rollup,field,rollup,field,rollup,doc,put,rollup,field,rollup,field,id,get,preferred,name,job,id,index,request,request,new,index,request,rollup,index,rollup,field,string,value,of,doc,id,get,value,request,source,doc,return,request,collect,collectors,to,list
