commented;modifiers;parameterAmount;loc;comment;code
false;public;9;7;;@Override public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool, ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry, Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry) {     return emptyList(). }
false;public;0;10;;@Override public Collection<Module> createGuiceModules() {     List<Module> modules = new ArrayList<>().     if (transportClientMode) {         return modules.     }     modules.add(b -> XPackPlugin.bindFeatureSet(b, RollupFeatureSet.class)).     return modules. }
false;protected;0;1;;protected XPackLicenseState getLicenseState() {     return XPackPlugin.getSharedLicenseState(). }
false;public;7;21;;@Override public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings, IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver, Supplier<DiscoveryNodes> nodesInCluster) {     if (!enabled) {         return emptyList().     }     return Arrays.asList(new RestRollupSearchAction(settings, restController), new RestPutRollupJobAction(settings, restController), new RestStartRollupJobAction(settings, restController), new RestStopRollupJobAction(settings, restController), new RestDeleteRollupJobAction(settings, restController), new RestGetRollupJobsAction(settings, restController), new RestGetRollupCapsAction(settings, restController), new RestGetRollupIndexCapsAction(settings, restController)). }
false;public;0;16;;@Override public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {     if (!enabled) {         return emptyList().     }     return Arrays.asList(new ActionHandler<>(RollupSearchAction.INSTANCE, TransportRollupSearchAction.class), new ActionHandler<>(PutRollupJobAction.INSTANCE, TransportPutRollupJobAction.class), new ActionHandler<>(StartRollupJobAction.INSTANCE, TransportStartRollupAction.class), new ActionHandler<>(StopRollupJobAction.INSTANCE, TransportStopRollupAction.class), new ActionHandler<>(DeleteRollupJobAction.INSTANCE, TransportDeleteRollupJobAction.class), new ActionHandler<>(GetRollupJobsAction.INSTANCE, TransportGetRollupJobAction.class), new ActionHandler<>(GetRollupCapsAction.INSTANCE, TransportGetRollupCapsAction.class), new ActionHandler<>(GetRollupIndexCapsAction.INSTANCE, TransportGetRollupIndexCapsAction.class)). }
false;public;1;11;;@Override public List<ExecutorBuilder<?>> getExecutorBuilders(Settings settings) {     if (false == enabled || transportClientMode) {         return emptyList().     }     FixedExecutorBuilder indexing = new FixedExecutorBuilder(settings, Rollup.TASK_THREAD_POOL_NAME, 4, 4, "xpack.rollup.task_thread_pool").     return Collections.singletonList(indexing). }
false;public;4;12;;@Override public List<PersistentTasksExecutor<?>> getPersistentTasksExecutor(ClusterService clusterService, ThreadPool threadPool, Client client, SettingsModule settingsModule) {     if (enabled == false || transportClientMode) {         return emptyList().     }     schedulerEngine.set(new SchedulerEngine(settings, getClock())).     return Collections.singletonList(new RollupJobTask.RollupJobPersistentTasksExecutor(client, schedulerEngine.get(), threadPool)). }
true;protected;0;3;// overridable by tests ;// overridable by tests protected Clock getClock() {     return Clock.systemUTC(). }
false;public;0;6;;@Override public void close() {     if (schedulerEngine.get() != null) {         schedulerEngine.get().stop().     } }
