commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;27;;@Override protected void doExecute(Task task, DeleteRollupJobAction.Request request, ActionListener<DeleteRollupJobAction.Response> listener) {     final ClusterState state = clusterService.state().     final DiscoveryNodes nodes = state.nodes().     if (nodes.isLocalNodeElectedMaster()) {         PersistentTasksCustomMetaData pTasksMeta = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE).         if (pTasksMeta != null && pTasksMeta.getTask(request.getId()) != null) {             super.doExecute(task, request, listener).         } else {             // If we couldn't find the job in the persistent task CS, it means it was deleted prior to this call,             // no need to go looking for the allocated task             listener.onFailure(new ResourceNotFoundException("the task with id [" + request.getId() + "] doesn't exist")).         }     } else {         // on the master, which makes testing difficult.         if (nodes.getMasterNode() == null) {             listener.onFailure(new MasterNotDiscoveredException("no known master nodes")).         } else {             transportService.sendRequest(nodes.getMasterNode(), actionName, request, new ActionListenerResponseHandler<>(listener, DeleteRollupJobAction.Response::new)).         }     } }
false;protected;3;14;;@Override protected void taskOperation(DeleteRollupJobAction.Request request, RollupJobTask jobTask, ActionListener<DeleteRollupJobAction.Response> listener) {     assert jobTask.getConfig().getId().equals(request.getId()).     IndexerState state = ((RollupJobStatus) jobTask.getStatus()).getIndexerState().     if (state.equals(IndexerState.STOPPED)) {         jobTask.onCancelled().         listener.onResponse(new DeleteRollupJobAction.Response(true)).     } else {         listener.onFailure(new IllegalStateException("Could not delete job [" + request.getId() + "] because " + "indexer state is [" + state + "].  Job must be [" + IndexerState.STOPPED + "] before deletion.")).     } }
false;protected;4;11;;@Override protected DeleteRollupJobAction.Response newResponse(DeleteRollupJobAction.Request request, List<DeleteRollupJobAction.Response> tasks, List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {     // But in testing we'd like to know there were more than one hence the assert     assert tasks.size() + taskOperationFailures.size() == 1.     boolean cancelled = tasks.size() > 0 && tasks.stream().allMatch(DeleteRollupJobAction.Response::isDeleted).     return new DeleteRollupJobAction.Response(cancelled, taskOperationFailures, failedNodeExceptions). }
