# id;timestamp;commentText;codeText;commentWords;codeWords
TransportStopRollupAction -> private static boolean awaitBusy(BooleanSupplier breakSupplier, TimeValue maxWaitTime) throws InterruptedException;1542145037;Lifted from ESTestCase, must stay private and do not reuse!  This is temporary until_the Rollup state refactor makes it unnecessary to await on a status change;private static boolean awaitBusy(BooleanSupplier breakSupplier, TimeValue maxWaitTime) throws InterruptedException {_        long maxTimeInMillis = maxWaitTime.getMillis()__        long timeInMillis = 1__        long sum = 0__        while (sum + timeInMillis < maxTimeInMillis) {_            if (breakSupplier.getAsBoolean()) {_                return true__            }_            Thread.sleep(timeInMillis)__            sum += timeInMillis__            timeInMillis = Math.min(1000L, timeInMillis * 2)__        }_        timeInMillis = maxTimeInMillis - sum__        Thread.sleep(Math.max(timeInMillis, 0))__        return breakSupplier.getAsBoolean()__    };lifted,from,estest,case,must,stay,private,and,do,not,reuse,this,is,temporary,until,the,rollup,state,refactor,makes,it,unnecessary,to,await,on,a,status,change;private,static,boolean,await,busy,boolean,supplier,break,supplier,time,value,max,wait,time,throws,interrupted,exception,long,max,time,in,millis,max,wait,time,get,millis,long,time,in,millis,1,long,sum,0,while,sum,time,in,millis,max,time,in,millis,if,break,supplier,get,as,boolean,return,true,thread,sleep,time,in,millis,sum,time,in,millis,time,in,millis,math,min,1000l,time,in,millis,2,time,in,millis,max,time,in,millis,sum,thread,sleep,math,max,time,in,millis,0,return,break,supplier,get,as,boolean
TransportStopRollupAction -> private static boolean awaitBusy(BooleanSupplier breakSupplier, TimeValue maxWaitTime) throws InterruptedException;1544012050;Lifted from ESTestCase, must stay private and do not reuse!  This is temporary until_the Rollup state refactor makes it unnecessary to await on a status change;private static boolean awaitBusy(BooleanSupplier breakSupplier, TimeValue maxWaitTime) throws InterruptedException {_        long maxTimeInMillis = maxWaitTime.getMillis()__        long timeInMillis = 1__        long sum = 0__        while (sum + timeInMillis < maxTimeInMillis) {_            if (breakSupplier.getAsBoolean()) {_                return true__            }_            Thread.sleep(timeInMillis)__            sum += timeInMillis__            timeInMillis = Math.min(1000L, timeInMillis * 2)__        }_        timeInMillis = maxTimeInMillis - sum__        Thread.sleep(Math.max(timeInMillis, 0))__        return breakSupplier.getAsBoolean()__    };lifted,from,estest,case,must,stay,private,and,do,not,reuse,this,is,temporary,until,the,rollup,state,refactor,makes,it,unnecessary,to,await,on,a,status,change;private,static,boolean,await,busy,boolean,supplier,break,supplier,time,value,max,wait,time,throws,interrupted,exception,long,max,time,in,millis,max,wait,time,get,millis,long,time,in,millis,1,long,sum,0,while,sum,time,in,millis,max,time,in,millis,if,break,supplier,get,as,boolean,return,true,thread,sleep,time,in,millis,sum,time,in,millis,time,in,millis,math,min,1000l,time,in,millis,2,time,in,millis,max,time,in,millis,sum,thread,sleep,math,max,time,in,millis,0,return,break,supplier,get,as,boolean
TransportStopRollupAction -> private static boolean awaitBusy(BooleanSupplier breakSupplier, TimeValue maxWaitTime) throws InterruptedException;1547234098;Lifted from ESTestCase, must stay private and do not reuse!  This is temporary until_the Rollup state refactor makes it unnecessary to await on a status change;private static boolean awaitBusy(BooleanSupplier breakSupplier, TimeValue maxWaitTime) throws InterruptedException {_        long maxTimeInMillis = maxWaitTime.getMillis()__        long timeInMillis = 1__        long sum = 0__        while (sum + timeInMillis < maxTimeInMillis) {_            if (breakSupplier.getAsBoolean()) {_                return true__            }_            Thread.sleep(timeInMillis)__            sum += timeInMillis__            timeInMillis = Math.min(1000L, timeInMillis * 2)__        }_        timeInMillis = maxTimeInMillis - sum__        Thread.sleep(Math.max(timeInMillis, 0))__        return breakSupplier.getAsBoolean()__    };lifted,from,estest,case,must,stay,private,and,do,not,reuse,this,is,temporary,until,the,rollup,state,refactor,makes,it,unnecessary,to,await,on,a,status,change;private,static,boolean,await,busy,boolean,supplier,break,supplier,time,value,max,wait,time,throws,interrupted,exception,long,max,time,in,millis,max,wait,time,get,millis,long,time,in,millis,1,long,sum,0,while,sum,time,in,millis,max,time,in,millis,if,break,supplier,get,as,boolean,return,true,thread,sleep,time,in,millis,sum,time,in,millis,time,in,millis,math,min,1000l,time,in,millis,2,time,in,millis,max,time,in,millis,sum,thread,sleep,math,max,time,in,millis,0,return,break,supplier,get,as,boolean
