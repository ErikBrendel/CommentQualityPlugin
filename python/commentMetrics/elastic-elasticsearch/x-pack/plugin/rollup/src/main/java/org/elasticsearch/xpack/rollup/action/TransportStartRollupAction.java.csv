commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected void processTasks(StartRollupJobAction.Request request, Consumer<RollupJobTask> operation) {     TransportTaskHelper.doProcessTasks(request.getId(), operation, taskManager). }
false;protected;3;10;;@Override protected void doExecute(Task task, StartRollupJobAction.Request request, ActionListener<StartRollupJobAction.Response> listener) {     if (!licenseState.isRollupAllowed()) {         listener.onFailure(LicenseUtils.newComplianceException(XPackField.ROLLUP)).         return.     }     super.doExecute(task, request, listener). }
false;protected;3;11;;@Override protected void taskOperation(StartRollupJobAction.Request request, RollupJobTask jobTask, ActionListener<StartRollupJobAction.Response> listener) {     if (jobTask.getConfig().getId().equals(request.getId())) {         jobTask.start(listener).     } else {         listener.onFailure(new RuntimeException("ID of rollup task [" + jobTask.getConfig().getId() + "] does not match request's ID [" + request.getId() + "]")).     } }
false;protected;4;24;;@Override protected StartRollupJobAction.Response newResponse(StartRollupJobAction.Request request, List<StartRollupJobAction.Response> tasks, List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {     if (taskOperationFailures.isEmpty() == false) {         throw org.elasticsearch.ExceptionsHelper.convertToElastic(taskOperationFailures.get(0).getCause()).     } else if (failedNodeExceptions.isEmpty() == false) {         throw org.elasticsearch.ExceptionsHelper.convertToElastic(failedNodeExceptions.get(0)).     }     // In either case, let the user know     if (tasks.size() == 0) {         throw new ResourceNotFoundException("Task for Rollup Job [" + request.getId() + "] not found").     }     assert tasks.size() == 1.     boolean allStarted = tasks.stream().allMatch(StartRollupJobAction.Response::isStarted).     return new StartRollupJobAction.Response(allStarted). }
