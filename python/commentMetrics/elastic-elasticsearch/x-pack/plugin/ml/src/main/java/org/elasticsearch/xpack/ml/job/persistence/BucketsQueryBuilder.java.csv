commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public BucketsQueryBuilder from(int from) {     this.from = from.     return this. }
false;public;1;4;;public BucketsQueryBuilder size(int size) {     this.size = size.     return this. }
false;public;1;4;;public BucketsQueryBuilder expand(boolean expand) {     this.expand = expand.     return this. }
false;public;0;3;;public boolean isExpand() {     return expand. }
false;public;1;4;;public BucketsQueryBuilder includeInterim(boolean include) {     this.includeInterim = include.     return this. }
false;public;0;3;;public boolean isIncludeInterim() {     return includeInterim. }
false;public;1;6;;public BucketsQueryBuilder anomalyScoreThreshold(Double anomalyScoreFilter) {     if (anomalyScoreFilter != null) {         this.anomalyScoreFilter = anomalyScoreFilter.     }     return this. }
false;public;1;4;;public BucketsQueryBuilder sortField(String sortField) {     this.sortField = sortField.     return this. }
false;public;1;4;;public BucketsQueryBuilder sortDescending(boolean sortDescending) {     this.sortDescending = sortDescending.     return this. }
true;public;1;4;/**  * If startTime &lt.= 0 the parameter is not set  */ ;/**  * If startTime &lt.= 0 the parameter is not set  */ public BucketsQueryBuilder start(String startTime) {     this.start = startTime.     return this. }
true;public;1;4;/**  * If endTime &lt.= 0 the parameter is not set  */ ;/**  * If endTime &lt.= 0 the parameter is not set  */ public BucketsQueryBuilder end(String endTime) {     this.end = endTime.     return this. }
false;public;1;5;;public BucketsQueryBuilder timestamp(String timestamp) {     this.timestamp = timestamp.     this.size = 1.     return this. }
false;public;0;3;;public boolean hasTimestamp() {     return timestamp != null. }
false;public;0;34;;public SearchSourceBuilder build() {     if (timestamp != null && (start != null || end != null)) {         throw new IllegalStateException("Either specify timestamp or start/end").     }     ResultsFilterBuilder rfb = new ResultsFilterBuilder().     if (hasTimestamp()) {         rfb.timeRange(Result.TIMESTAMP.getPreferredName(), timestamp).     } else {         rfb.timeRange(Result.TIMESTAMP.getPreferredName(), start, end).score(Bucket.ANOMALY_SCORE.getPreferredName(), anomalyScoreFilter).interim(includeInterim).     }     SortBuilder<?> sortBuilder = new FieldSortBuilder(sortField).order(sortDescending ? SortOrder.DESC : SortOrder.ASC).     QueryBuilder boolQuery = new BoolQueryBuilder().filter(rfb.build()).filter(QueryBuilders.termQuery(Result.RESULT_TYPE.getPreferredName(), Bucket.RESULT_TYPE_VALUE)).     SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().     searchSourceBuilder.sort(sortBuilder).     searchSourceBuilder.query(boolQuery).     searchSourceBuilder.from(from).     searchSourceBuilder.size(size).     // If not using the default sort field (timestamp) add it as a secondary sort     if (Result.TIMESTAMP.getPreferredName().equals(sortField) == false) {         searchSourceBuilder.sort(Result.TIMESTAMP.getPreferredName(), sortDescending ? SortOrder.DESC : SortOrder.ASC).     }     return searchSourceBuilder. }
