commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "ml_open_job_action". }
false;public;2;7;;@Override public RestResponse buildResponse(AcknowledgedResponse r, XContentBuilder builder) throws Exception {     builder.startObject().     builder.field("opened", r.isAcknowledged()).     builder.endObject().     return new BytesRestResponse(RestStatus.OK, builder). }
false;protected;2;26;;@Override protected RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     OpenJobAction.Request request.     if (restRequest.hasContentOrSourceParam()) {         request = OpenJobAction.Request.parseRequest(restRequest.param(Job.ID.getPreferredName()), restRequest.contentParser()).     } else {         OpenJobAction.JobParams jobParams = new OpenJobAction.JobParams(restRequest.param(Job.ID.getPreferredName())).         if (restRequest.hasParam(OpenJobAction.JobParams.TIMEOUT.getPreferredName())) {             TimeValue openTimeout = restRequest.paramAsTime(OpenJobAction.JobParams.TIMEOUT.getPreferredName(), TimeValue.timeValueSeconds(20)).             jobParams.setTimeout(openTimeout).         }         request = new OpenJobAction.Request(jobParams).     }     return channel -> {         client.execute(OpenJobAction.INSTANCE, request, new RestBuilderListener<AcknowledgedResponse>(channel) {              @Override             public RestResponse buildResponse(AcknowledgedResponse r, XContentBuilder builder) throws Exception {                 builder.startObject().                 builder.field("opened", r.isAcknowledged()).                 builder.endObject().                 return new BytesRestResponse(RestStatus.OK, builder).             }         }).     }. }
