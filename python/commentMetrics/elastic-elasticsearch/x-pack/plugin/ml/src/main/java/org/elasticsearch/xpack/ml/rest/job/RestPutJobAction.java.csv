commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "ml_put_job_action". }
false;protected;2;10;;@Override protected RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     String jobId = restRequest.param(Job.ID.getPreferredName()).     XContentParser parser = restRequest.contentParser().     PutJobAction.Request putJobRequest = PutJobAction.Request.parseRequest(jobId, parser).     putJobRequest.timeout(restRequest.paramAsTime("timeout", putJobRequest.timeout())).     putJobRequest.masterNodeTimeout(restRequest.paramAsTime("master_timeout", putJobRequest.masterNodeTimeout())).     return channel -> client.execute(PutJobAction.INSTANCE, putJobRequest, new RestToXContentListener<>(channel)). }
