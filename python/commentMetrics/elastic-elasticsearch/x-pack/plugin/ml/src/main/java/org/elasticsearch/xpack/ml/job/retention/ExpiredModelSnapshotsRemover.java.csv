commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Long getRetentionDays(Job job) {     return job.getModelSnapshotRetentionDays(). }
false;protected;3;25;;@Override protected void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Boolean> listener) {     if (job.getModelSnapshotId() == null) {         // No snapshot to remove         listener.onResponse(true).         return.     }     LOGGER.debug("Removing model snapshots of job [{}] that have a timestamp before [{}]", job.getId(), cutoffEpochMs).     SearchRequest searchRequest = new SearchRequest().     searchRequest.indices(AnomalyDetectorsIndex.jobResultsAliasedName(job.getId())).     QueryBuilder activeSnapshotFilter = QueryBuilders.termQuery(ModelSnapshotField.SNAPSHOT_ID.getPreferredName(), job.getModelSnapshotId()).     QueryBuilder retainFilter = QueryBuilders.termQuery(ModelSnapshot.RETAIN.getPreferredName(), true).     QueryBuilder query = createQuery(job.getId(), cutoffEpochMs).filter(QueryBuilders.existsQuery(ModelSnapshot.SNAPSHOT_DOC_COUNT.getPreferredName())).mustNot(activeSnapshotFilter).mustNot(retainFilter).     searchRequest.source(new SearchSourceBuilder().query(query).size(MODEL_SNAPSHOT_SEARCH_SIZE)).     client.execute(SearchAction.INSTANCE, searchRequest, new ThreadedActionListener<>(LOGGER, threadPool, MachineLearning.UTILITY_THREAD_POOL_NAME, expiredSnapshotsListener(job.getId(), listener), false)). }
false;public;1;12;;@Override public void onResponse(SearchResponse searchResponse) {     try {         List<ModelSnapshot> modelSnapshots = new ArrayList<>().         for (SearchHit hit : searchResponse.getHits()) {             modelSnapshots.add(ModelSnapshot.fromJson(hit.getSourceRef())).         }         deleteModelSnapshots(new VolatileCursorIterator<>(modelSnapshots), listener).     } catch (Exception e) {         onFailure(e).     } }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(new ElasticsearchException("[" + jobId + "] Search for expired snapshots failed", e)). }
false;private;2;21;;private ActionListener<SearchResponse> expiredSnapshotsListener(String jobId, ActionListener<Boolean> listener) {     return new ActionListener<SearchResponse>() {          @Override         public void onResponse(SearchResponse searchResponse) {             try {                 List<ModelSnapshot> modelSnapshots = new ArrayList<>().                 for (SearchHit hit : searchResponse.getHits()) {                     modelSnapshots.add(ModelSnapshot.fromJson(hit.getSourceRef())).                 }                 deleteModelSnapshots(new VolatileCursorIterator<>(modelSnapshots), listener).             } catch (Exception e) {                 onFailure(e).             }         }          @Override         public void onFailure(Exception e) {             listener.onFailure(new ElasticsearchException("[" + jobId + "] Search for expired snapshots failed", e)).         }     }. }
false;public;1;8;;@Override public void onResponse(AcknowledgedResponse response) {     try {         deleteModelSnapshots(modelSnapshotIterator, listener).     } catch (Exception e) {         onFailure(e).     } }
false;public;1;5;;@Override public void onFailure(Exception e) {     listener.onFailure(new ElasticsearchException("[" + modelSnapshot.getJobId() + "] Failed to delete snapshot [" + modelSnapshot.getSnapshotId() + "]", e)). }
false;private;2;25;;private void deleteModelSnapshots(Iterator<ModelSnapshot> modelSnapshotIterator, ActionListener<Boolean> listener) {     if (modelSnapshotIterator.hasNext() == false) {         listener.onResponse(true).         return.     }     ModelSnapshot modelSnapshot = modelSnapshotIterator.next().     DeleteModelSnapshotAction.Request deleteSnapshotRequest = new DeleteModelSnapshotAction.Request(modelSnapshot.getJobId(), modelSnapshot.getSnapshotId()).     client.execute(DeleteModelSnapshotAction.INSTANCE, deleteSnapshotRequest, new ActionListener<AcknowledgedResponse>() {          @Override         public void onResponse(AcknowledgedResponse response) {             try {                 deleteModelSnapshots(modelSnapshotIterator, listener).             } catch (Exception e) {                 onFailure(e).             }         }          @Override         public void onFailure(Exception e) {             listener.onFailure(new ElasticsearchException("[" + modelSnapshot.getJobId() + "] Failed to delete snapshot [" + modelSnapshot.getSnapshotId() + "]", e)).         }     }). }
