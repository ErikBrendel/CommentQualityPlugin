commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void onMaster() {     installDailyMaintenanceService(). }
false;public;0;4;;@Override public void offMaster() {     uninstallDailyMaintenanceService(). }
false;public;1;23;;@Override public void clusterChanged(ClusterChangedEvent event) {     if (event.state().blocks().hasGlobalBlock(GatewayService.STATE_NOT_RECOVERED_BLOCK)) {         // Wait until the gateway has recovered from disk.         return.     }     // index if there is a flurry of cluster state updates in quick succession     if (event.localNodeMaster() && isIndexCreationInProgress.compareAndSet(false, true)) {         AnnotationIndex.createAnnotationsIndexIfNecessary(settings, client, event.state(), ActionListener.wrap(r -> {             isIndexCreationInProgress.set(false).             if (r) {                 logger.info("Created ML annotations index and aliases").             }         }, e -> {             isIndexCreationInProgress.set(false).             logger.error("Error creating ML annotations index or aliases", e).         })).     } }
false;public;0;4;;@Override public String executorName() {     return ThreadPool.Names.GENERIC. }
false;public;0;4;;@Override public void beforeStop() {     uninstallDailyMaintenanceService(). }
false;private;0;12;;private void installDailyMaintenanceService() {     if (mlDailyMaintenanceService == null) {         mlDailyMaintenanceService = new MlDailyMaintenanceService(clusterService.getClusterName(), threadPool, client).         mlDailyMaintenanceService.start().         clusterService.addLifecycleListener(new LifecycleListener() {              @Override             public void beforeStop() {                 uninstallDailyMaintenanceService().             }         }).     } }
false;private;0;6;;private void uninstallDailyMaintenanceService() {     if (mlDailyMaintenanceService != null) {         mlDailyMaintenanceService.stop().         mlDailyMaintenanceService = null.     } }
true;;0;3;/**  * For testing  */ ;/**  * For testing  */ MlDailyMaintenanceService getDailyMaintenanceService() {     return mlDailyMaintenanceService. }
true;;1;3;/**  * For testing  */ ;/**  * For testing  */ void setDailyMaintenanceService(MlDailyMaintenanceService service) {     mlDailyMaintenanceService = service. }
