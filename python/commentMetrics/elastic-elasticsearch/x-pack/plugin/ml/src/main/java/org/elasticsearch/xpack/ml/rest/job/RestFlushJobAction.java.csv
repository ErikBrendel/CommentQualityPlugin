commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "ml_flush_job_action". }
false;protected;2;19;;@Override protected RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     String jobId = restRequest.param(Job.ID.getPreferredName()).     final FlushJobAction.Request request.     if (restRequest.hasContentOrSourceParam()) {         XContentParser parser = restRequest.contentOrSourceParamParser().         request = FlushJobAction.Request.parseRequest(jobId, parser).     } else {         request = new FlushJobAction.Request(restRequest.param(Job.ID.getPreferredName())).         request.setCalcInterim(restRequest.paramAsBoolean(FlushJobAction.Request.CALC_INTERIM.getPreferredName(), DEFAULT_CALC_INTERIM)).         request.setStart(restRequest.param(FlushJobAction.Request.START.getPreferredName(), DEFAULT_START)).         request.setEnd(restRequest.param(FlushJobAction.Request.END.getPreferredName(), DEFAULT_END)).         request.setAdvanceTime(restRequest.param(FlushJobAction.Request.ADVANCE_TIME.getPreferredName(), DEFAULT_ADVANCE_TIME)).         request.setSkipTime(restRequest.param(FlushJobAction.Request.SKIP_TIME.getPreferredName(), DEFAULT_SKIP_TIME)).     }     return channel -> client.execute(FlushJobAction.INSTANCE, request, new RestToXContentListener<>(channel)). }
