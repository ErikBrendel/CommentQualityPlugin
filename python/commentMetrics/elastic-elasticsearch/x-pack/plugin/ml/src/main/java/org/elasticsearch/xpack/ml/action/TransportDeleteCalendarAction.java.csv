commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;28;;@Override protected void doExecute(Task task, DeleteCalendarAction.Request request, ActionListener<AcknowledgedResponse> listener) {     final String calendarId = request.getCalendarId().     ActionListener<Calendar> calendarListener = ActionListener.wrap(calendar -> {         // Delete calendar and events         DeleteByQueryRequest dbqRequest = buildDeleteByQuery(calendarId).         executeAsyncWithOrigin(client, ML_ORIGIN, DeleteByQueryAction.INSTANCE, dbqRequest, ActionListener.wrap(response -> {             if (response.getDeleted() == 0) {                 listener.onFailure(new ResourceNotFoundException("No calendar with id [" + calendarId + "]")).                 return.             }             jobManager.updateProcessOnCalendarChanged(calendar.getJobIds(), ActionListener.wrap(r -> listener.onResponse(new AcknowledgedResponse(true)), listener::onFailure)).         }, listener::onFailure)).     }, listener::onFailure).     jobResultsProvider.calendar(calendarId, calendarListener). }
false;private;1;9;;private DeleteByQueryRequest buildDeleteByQuery(String calendarId) {     DeleteByQueryRequest request = new DeleteByQueryRequest(MlMetaIndex.INDEX_NAME).     request.setSlices(5).     request.setRefresh(true).     QueryBuilder query = QueryBuilders.termsQuery(Calendar.ID.getPreferredName(), calendarId).     request.setQuery(query).     return request. }
