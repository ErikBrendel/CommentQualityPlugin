commented;modifiers;parameterAmount;loc;comment;code
false;;2;12;;@Nullable FlushAcknowledgement waitForFlush(String flushId, Duration timeout) throws InterruptedException {     if (onClear.hasRun()) {         return null.     }     FlushAcknowledgementHolder holder = awaitingFlushed.computeIfAbsent(flushId, (key) -> new FlushAcknowledgementHolder(flushId)).     if (holder.latch.await(timeout.toMillis(), TimeUnit.MILLISECONDS)) {         return holder.flushAcknowledgement.     }     return null. }
false;;1;9;;void acknowledgeFlush(FlushAcknowledgement flushAcknowledgement) {     // acknowledgeFlush(...) could be called before waitForFlush(...)     // a flush api call writes a flush command to the analytical process and then via a different thread the     // result reader then reads whether the flush has been acked.     String flushId = flushAcknowledgement.getId().     FlushAcknowledgementHolder holder = awaitingFlushed.computeIfAbsent(flushId, (key) -> new FlushAcknowledgementHolder(flushId)).     holder.flushAcknowledgement = flushAcknowledgement.     holder.latch.countDown(). }
false;;1;3;;void clear(String flushId) {     awaitingFlushed.remove(flushId). }
false;;0;3;;void clear() {     onClear.run(). }
