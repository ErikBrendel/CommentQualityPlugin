commented;modifiers;parameterAmount;loc;comment;code
false;public;1;28;;public List<OverallBucket> computeOverallBuckets(Histogram histogram) {     List<OverallBucket> overallBuckets = new ArrayList<>().     for (Histogram.Bucket histogramBucket : histogram.getBuckets()) {         Aggregations histogramBucketAggs = histogramBucket.getAggregations().         Terms jobsAgg = histogramBucketAggs.get(Job.ID.getPreferredName()).         int jobsCount = jobsAgg.getBuckets().size().         int bucketTopN = Math.min(topN, jobsCount).         Set<OverallBucket.JobInfo> jobs = new TreeSet<>().         TopNScores topNScores = new TopNScores(bucketTopN).         for (Terms.Bucket jobsBucket : jobsAgg.getBuckets()) {             Max maxScore = jobsBucket.getAggregations().get(OverallBucket.OVERALL_SCORE.getPreferredName()).             topNScores.insertWithOverflow(maxScore.getValue()).             jobs.add(new OverallBucket.JobInfo((String) jobsBucket.getKey(), maxScore.getValue())).         }         double overallScore = topNScores.overallScore().         if (overallScore < minOverallScore) {             continue.         }         Max interimAgg = histogramBucketAggs.get(Result.IS_INTERIM.getPreferredName()).         boolean isInterim = interimAgg.getValue() > 0.         overallBuckets.add(new OverallBucket(getHistogramBucketTimestamp(histogramBucket), maxJobBucketSpanSeconds, overallScore, new ArrayList<>(jobs), isInterim)).     }     return overallBuckets. }
false;private,static;1;4;;private static Date getHistogramBucketTimestamp(Histogram.Bucket bucket) {     ZonedDateTime bucketTimestamp = (ZonedDateTime) bucket.getKey().     return new Date(bucketTimestamp.toInstant().toEpochMilli()). }
false;protected;2;4;;@Override protected boolean lessThan(Double a, Double b) {     return a < b. }
false;;0;7;;double overallScore() {     double overallScore = 0.0.     for (double score : this) {         overallScore += score.     }     return size() > 0 ? overallScore / size() : 0.0. }
