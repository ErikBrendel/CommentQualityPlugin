commented;modifiers;parameterAmount;loc;comment;code
false;;2;1;;DataExtractor newExtractor(long start, long end).
true;static;4;42;/**  * Creates a {@code DataExtractorFactory} for the given datafeed-job combination.  */ ;/**  * Creates a {@code DataExtractorFactory} for the given datafeed-job combination.  */ static void create(Client client, DatafeedConfig datafeed, Job job, ActionListener<DataExtractorFactory> listener) {     ActionListener<DataExtractorFactory> factoryHandler = ActionListener.wrap(factory -> listener.onResponse(datafeed.getChunkingConfig().isEnabled() ? new ChunkedDataExtractorFactory(client, datafeed, job, factory) : factory), listener::onFailure).     ActionListener<GetRollupIndexCapsAction.Response> getRollupIndexCapsActionHandler = ActionListener.wrap(response -> {         if (response.getJobs().isEmpty()) {             // This means no rollup indexes are in the config             if (datafeed.hasAggregations()) {                 factoryHandler.onResponse(new AggregationDataExtractorFactory(client, datafeed, job)).             } else {                 ScrollDataExtractorFactory.create(client, datafeed, job, factoryHandler).             }         } else {             if (datafeed.hasAggregations()) {                 // Rollup indexes require aggregations                 RollupDataExtractorFactory.create(client, datafeed, job, response.getJobs(), factoryHandler).             } else {                 listener.onFailure(new IllegalArgumentException("Aggregations are required when using Rollup indices")).             }         }     }, e -> {         if (e instanceof IndexNotFoundException) {             listener.onFailure(new ResourceNotFoundException("datafeed [" + datafeed.getId() + "] cannot retrieve data because index " + ((IndexNotFoundException) e).getIndex() + " does not exist")).         } else {             listener.onFailure(e).         }     }).     GetRollupIndexCapsAction.Request request = new GetRollupIndexCapsAction.Request(datafeed.getIndices().toArray(new String[0])).     ClientHelper.executeAsyncWithOrigin(client, ClientHelper.ML_ORIGIN, GetRollupIndexCapsAction.INSTANCE, request, getRollupIndexCapsActionHandler). }
