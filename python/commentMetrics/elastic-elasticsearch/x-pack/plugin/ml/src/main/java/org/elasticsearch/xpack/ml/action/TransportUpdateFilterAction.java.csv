commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;8;;@Override protected void doExecute(Task task, UpdateFilterAction.Request request, ActionListener<PutFilterAction.Response> listener) {     ActionListener<FilterWithSeqNo> filterListener = ActionListener.wrap(filterWithVersion -> {         updateFilter(filterWithVersion, request, listener).     }, listener::onFailure).     getFilterWithVersion(request.getFilterId(), filterListener). }
false;private;3;27;;private void updateFilter(FilterWithSeqNo filterWithVersion, UpdateFilterAction.Request request, ActionListener<PutFilterAction.Response> listener) {     MlFilter filter = filterWithVersion.filter.     if (request.isNoop()) {         listener.onResponse(new PutFilterAction.Response(filter)).         return.     }     String description = request.getDescription() == null ? filter.getDescription() : request.getDescription().     SortedSet<String> items = new TreeSet<>(filter.getItems()).     items.addAll(request.getAddItems()).     // Check if removed items are present to avoid typos     for (String toRemove : request.getRemoveItems()) {         boolean wasPresent = items.remove(toRemove).         if (wasPresent == false) {             listener.onFailure(ExceptionsHelper.badRequestException("Cannot remove item [" + toRemove + "] as it is not present in filter [" + filter.getId() + "]")).             return.         }     }     MlFilter updatedFilter = MlFilter.builder(filter.getId()).setDescription(description).setItems(items).build().     indexUpdatedFilter(updatedFilter, filterWithVersion.seqNo, filterWithVersion.primaryTerm, request, listener). }
false;public;1;7;;@Override public void onResponse(IndexResponse indexResponse) {     jobManager.notifyFilterChanged(filter, request.getAddItems(), request.getRemoveItems(), ActionListener.wrap(response -> listener.onResponse(new PutFilterAction.Response(filter)), listener::onFailure)). }
false;public;1;11;;@Override public void onFailure(Exception e) {     Exception reportedException.     if (e instanceof VersionConflictEngineException) {         reportedException = ExceptionsHelper.conflictStatusException("Error updating filter with id [" + filter.getId() + "] because it was modified while the update was in progress", e).     } else {         reportedException = ExceptionsHelper.serverError("Error updating filter with id [" + filter.getId() + "]", e).     }     listener.onFailure(reportedException). }
false;private;5;37;;private void indexUpdatedFilter(MlFilter filter, final long seqNo, final long primaryTerm, UpdateFilterAction.Request request, ActionListener<PutFilterAction.Response> listener) {     IndexRequest indexRequest = new IndexRequest(MlMetaIndex.INDEX_NAME).id(filter.documentId()).     indexRequest.setIfSeqNo(seqNo).     indexRequest.setIfPrimaryTerm(primaryTerm).     indexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).     try (XContentBuilder builder = XContentFactory.jsonBuilder()) {         ToXContent.MapParams params = new ToXContent.MapParams(Collections.singletonMap(ToXContentParams.INCLUDE_TYPE, "true")).         indexRequest.source(filter.toXContent(builder, params)).     } catch (IOException e) {         throw new IllegalStateException("Failed to serialise filter with id [" + filter.getId() + "]", e).     }     executeAsyncWithOrigin(client, ML_ORIGIN, IndexAction.INSTANCE, indexRequest, new ActionListener<IndexResponse>() {          @Override         public void onResponse(IndexResponse indexResponse) {             jobManager.notifyFilterChanged(filter, request.getAddItems(), request.getRemoveItems(), ActionListener.wrap(response -> listener.onResponse(new PutFilterAction.Response(filter)), listener::onFailure)).         }          @Override         public void onFailure(Exception e) {             Exception reportedException.             if (e instanceof VersionConflictEngineException) {                 reportedException = ExceptionsHelper.conflictStatusException("Error updating filter with id [" + filter.getId() + "] because it was modified while the update was in progress", e).             } else {                 reportedException = ExceptionsHelper.serverError("Error updating filter with id [" + filter.getId() + "]", e).             }             listener.onFailure(reportedException).         }     }). }
false;public;1;18;;@Override public void onResponse(GetResponse getDocResponse) {     try {         if (getDocResponse.isExists()) {             BytesReference docSource = getDocResponse.getSourceAsBytesRef().             try (InputStream stream = docSource.streamInput().                 XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {                 MlFilter filter = MlFilter.LENIENT_PARSER.apply(parser, null).build().                 listener.onResponse(new FilterWithSeqNo(filter, getDocResponse)).             }         } else {             this.onFailure(new ResourceNotFoundException(Messages.getMessage(Messages.FILTER_NOT_FOUND, filterId))).         }     } catch (Exception e) {         this.onFailure(e).     } }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;private;2;28;;private void getFilterWithVersion(String filterId, ActionListener<FilterWithSeqNo> listener) {     GetRequest getRequest = new GetRequest(MlMetaIndex.INDEX_NAME, MlFilter.documentId(filterId)).     executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {          @Override         public void onResponse(GetResponse getDocResponse) {             try {                 if (getDocResponse.isExists()) {                     BytesReference docSource = getDocResponse.getSourceAsBytesRef().                     try (InputStream stream = docSource.streamInput().                         XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {                         MlFilter filter = MlFilter.LENIENT_PARSER.apply(parser, null).build().                         listener.onResponse(new FilterWithSeqNo(filter, getDocResponse)).                     }                 } else {                     this.onFailure(new ResourceNotFoundException(Messages.getMessage(Messages.FILTER_NOT_FOUND, filterId))).                 }             } catch (Exception e) {                 this.onFailure(e).             }         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }). }
