commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Page the query result  * @param params The page parameters  * @return this  */ ;/**  * Page the query result  * @param params The page parameters  * @return this  */ public CalendarQueryBuilder pageParams(PageParams params) {     this.pageParams = params.     return this. }
true;public;1;4;/**  * Query only calendars used by this job  * @param jobId The job Id  * @return this  */ ;/**  * Query only calendars used by this job  * @param jobId The job Id  * @return this  */ public CalendarQueryBuilder jobId(String jobId) {     this.jobId = jobId.     return this. }
false;public;1;4;;public CalendarQueryBuilder jobGroups(List<String> jobGroups) {     this.jobGroups = jobGroups.     return this. }
true;public;1;4;/**  * Sort results by calendar_id  * @param sort Sort if true  * @return this  */ ;/**  * Sort results by calendar_id  * @param sort Sort if true  * @return this  */ public CalendarQueryBuilder sort(boolean sort) {     this.sort = sort.     return this. }
false;public;0;25;;public SearchSourceBuilder build() {     QueryBuilder qb.     List<String> jobIdAndGroups = new ArrayList<>(jobGroups).     if (jobId != null) {         jobIdAndGroups.add(jobId).     }     if (jobIdAndGroups.isEmpty() == false) {         qb = new BoolQueryBuilder().filter(new TermsQueryBuilder(Calendar.TYPE.getPreferredName(), Calendar.CALENDAR_TYPE)).filter(new TermsQueryBuilder(Calendar.JOB_IDS.getPreferredName(), jobIdAndGroups)).     } else {         qb = new TermsQueryBuilder(Calendar.TYPE.getPreferredName(), Calendar.CALENDAR_TYPE).     }     SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(qb).     if (sort) {         sourceBuilder.sort(Calendar.ID.getPreferredName()).     }     sourceBuilder.from(pageParams.getFrom()).size(pageParams.getSize()).     return sourceBuilder. }
