commented;modifiers;parameterAmount;loc;comment;code
false;public;3;13;;public ResultsFilterBuilder timeRange(String field, Object start, Object end) {     if (start != null || end != null) {         RangeQueryBuilder timeRange = QueryBuilders.rangeQuery(field).         if (start != null) {             timeRange.gte(start).         }         if (end != null) {             timeRange.lt(end).         }         addQuery(timeRange).     }     return this. }
false;public;2;4;;public ResultsFilterBuilder timeRange(String field, String timestamp) {     addQuery(QueryBuilders.matchQuery(field, timestamp)).     return this. }
false;public;2;8;;public ResultsFilterBuilder score(String fieldName, double threshold) {     if (threshold > 0.0) {         RangeQueryBuilder scoreFilter = QueryBuilders.rangeQuery(fieldName).         scoreFilter.gte(threshold).         addQuery(scoreFilter).     }     return this. }
false;public;1;17;;public ResultsFilterBuilder interim(boolean includeInterim) {     if (includeInterim) {         // isInterim field         return this.     }     // Implemented as "NOT isInterim == true" so that not present and null     // are equivalent to false.  This improves backwards compatibility.     // Also, note how for a boolean field, unlike numeric term queries, the     // term value is supplied as a string.     TermQueryBuilder interimFilter = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true).     QueryBuilder notInterimFilter = QueryBuilders.boolQuery().mustNot(interimFilter).     addQuery(notInterimFilter).     return this. }
false;public;2;9;;public ResultsFilterBuilder term(String fieldName, String fieldValue) {     if (Strings.isNullOrEmpty(fieldName) || Strings.isNullOrEmpty(fieldValue)) {         return this.     }     TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(fieldName, fieldValue).     addQuery(termQueryBuilder).     return this. }
false;public;1;3;;public ResultsFilterBuilder resultType(String resultType) {     return term(Result.RESULT_TYPE.getPreferredName(), resultType). }
false;private;1;3;;private void addQuery(QueryBuilder fb) {     queries.add(fb). }
false;public;0;13;;public QueryBuilder build() {     if (queries.isEmpty()) {         return QueryBuilders.matchAllQuery().     }     if (queries.size() == 1) {         return queries.get(0).     }     BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder().     for (QueryBuilder query : queries) {         boolQueryBuilder.filter(query).     }     return boolQueryBuilder. }
