commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "ml_get_records_action". }
false;protected;2;26;;@Override protected RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     String jobId = restRequest.param(Job.ID.getPreferredName()).     final GetRecordsAction.Request request.     if (restRequest.hasContentOrSourceParam()) {         XContentParser parser = restRequest.contentOrSourceParamParser().         request = GetRecordsAction.Request.parseRequest(jobId, parser).     } else {         request = new GetRecordsAction.Request(jobId).         request.setStart(restRequest.param(GetRecordsAction.Request.START.getPreferredName())).         request.setEnd(restRequest.param(GetRecordsAction.Request.END.getPreferredName())).         request.setExcludeInterim(restRequest.paramAsBoolean(GetRecordsAction.Request.EXCLUDE_INTERIM.getPreferredName(), request.isExcludeInterim())).         request.setPageParams(new PageParams(restRequest.paramAsInt(PageParams.FROM.getPreferredName(), PageParams.DEFAULT_FROM), restRequest.paramAsInt(PageParams.SIZE.getPreferredName(), PageParams.DEFAULT_SIZE))).         request.setRecordScore(Double.parseDouble(restRequest.param(GetRecordsAction.Request.RECORD_SCORE_FILTER.getPreferredName(), String.valueOf(request.getRecordScoreFilter())))).         request.setSort(restRequest.param(GetRecordsAction.Request.SORT.getPreferredName(), request.getSort())).         request.setDescending(restRequest.paramAsBoolean(GetRecordsAction.Request.DESCENDING.getPreferredName(), request.isDescending())).     }     return channel -> client.execute(GetRecordsAction.INSTANCE, request, new RestToXContentListener<>(channel)). }
