# id;timestamp;commentText;codeText;commentWords;codeWords
DomainSplitFunction -> public static List<String> domainSplit(String host);1539951844;Split {@code host} into sub domain and highest registered domain._The result is a list containing exactly 2 items the first is the sub domain_and the second the highest registered domain.__@param host The hostname to split_@return The sub domain and highest registered domain;public static List<String> domainSplit(String host) {_        host = host.trim()__        if (host.contains(":")) {_            return Arrays.asList("", host)__        }_        boolean tentativeIP = true__        for(int i = 0_ i < host.length()_ i++) {_            if (!(Character.isDigit(host.charAt(i)) || host.charAt(i) == '.')) {_                tentativeIP = false__            break__            }_        }_        if (tentativeIP) {_            _            if (host.equals(".")) {_                return Arrays.asList("","")__            }_            return Arrays.asList("", host)__        }_        String normalizedHost = host__        normalizedHost = normalizedHost.toLowerCase(Locale.ROOT)__        List<String> parts = splitDomain(normalizedHost)__        int publicSuffixIndex = findPublicSuffix(parts)__        if (publicSuffixIndex == 0) {_            return Arrays.asList("", host)__        }_        String highestRegistered = ""__        _        if (publicSuffixIndex == -1) {_            if (!parts.isEmpty()) {_                if (parts.size() == 1) {_                    return Arrays.asList("", host)__                }_                if (parts.size() > 2) {_                    boolean allNumeric = true__                    String value = parts.get(parts.size() - 1)__                    for (int i = 0_ i < value.length()_ i++) {_                        if (!Character.isDigit(value.charAt(i))) {_                            allNumeric = false__                            break__                        }_                    }_                    if (allNumeric) {_                        highestRegistered = parts.get(parts.size() - 2) + '.' + parts.get(parts.size() - 1)__                    } else {_                        highestRegistered = parts.get(parts.size() - 1)__                    }__                } else {_                    highestRegistered = parts.get(parts.size() - 1)__                }_            }_        } else {_            _            highestRegistered = topPrivateDomain(normalizedHost, parts, publicSuffixIndex)__        }_        String subDomain = host.substring(0, host.length() - highestRegistered.length())__        if (subDomain.endsWith(".")) {_            subDomain = subDomain.substring(0, subDomain.length() - 1)__        }_        return Arrays.asList(subDomain, highestRegistered)__    };split,code,host,into,sub,domain,and,highest,registered,domain,the,result,is,a,list,containing,exactly,2,items,the,first,is,the,sub,domain,and,the,second,the,highest,registered,domain,param,host,the,hostname,to,split,return,the,sub,domain,and,highest,registered,domain;public,static,list,string,domain,split,string,host,host,host,trim,if,host,contains,return,arrays,as,list,host,boolean,tentative,ip,true,for,int,i,0,i,host,length,i,if,character,is,digit,host,char,at,i,host,char,at,i,tentative,ip,false,break,if,tentative,ip,if,host,equals,return,arrays,as,list,return,arrays,as,list,host,string,normalized,host,host,normalized,host,normalized,host,to,lower,case,locale,root,list,string,parts,split,domain,normalized,host,int,public,suffix,index,find,public,suffix,parts,if,public,suffix,index,0,return,arrays,as,list,host,string,highest,registered,if,public,suffix,index,1,if,parts,is,empty,if,parts,size,1,return,arrays,as,list,host,if,parts,size,2,boolean,all,numeric,true,string,value,parts,get,parts,size,1,for,int,i,0,i,value,length,i,if,character,is,digit,value,char,at,i,all,numeric,false,break,if,all,numeric,highest,registered,parts,get,parts,size,2,parts,get,parts,size,1,else,highest,registered,parts,get,parts,size,1,else,highest,registered,parts,get,parts,size,1,else,highest,registered,top,private,domain,normalized,host,parts,public,suffix,index,string,sub,domain,host,substring,0,host,length,highest,registered,length,if,sub,domain,ends,with,sub,domain,sub,domain,substring,0,sub,domain,length,1,return,arrays,as,list,sub,domain,highest,registered
DomainSplitFunction -> public static List<String> domainSplit(String host);1540583181;Split {@code host} into sub domain and highest registered domain._The result is a list containing exactly 2 items the first is the sub domain_and the second the highest registered domain.__@param host The hostname to split_@return The sub domain and highest registered domain;public static List<String> domainSplit(String host) {_        host = host.trim()__        if (host.contains(":")) {_            return Arrays.asList("", host)__        }_        boolean tentativeIP = true__        for(int i = 0_ i < host.length()_ i++) {_            if (!(Character.isDigit(host.charAt(i)) || host.charAt(i) == '.')) {_                tentativeIP = false__            break__            }_        }_        if (tentativeIP) {_            _            if (host.equals(".")) {_                return Arrays.asList("","")__            }_            return Arrays.asList("", host)__        }_        String normalizedHost = host__        normalizedHost = normalizedHost.toLowerCase(Locale.ROOT)__        List<String> parts = splitDomain(normalizedHost)__        int publicSuffixIndex = findPublicSuffix(parts)__        if (publicSuffixIndex == 0) {_            return Arrays.asList("", host)__        }_        String highestRegistered = ""__        _        if (publicSuffixIndex == -1) {_            if (!parts.isEmpty()) {_                if (parts.size() == 1) {_                    return Arrays.asList("", host)__                }_                if (parts.size() > 2) {_                    boolean allNumeric = true__                    String value = parts.get(parts.size() - 1)__                    for (int i = 0_ i < value.length()_ i++) {_                        if (!Character.isDigit(value.charAt(i))) {_                            allNumeric = false__                            break__                        }_                    }_                    if (allNumeric) {_                        highestRegistered = parts.get(parts.size() - 2) + '.' + parts.get(parts.size() - 1)__                    } else {_                        highestRegistered = parts.get(parts.size() - 1)__                    }__                } else {_                    highestRegistered = parts.get(parts.size() - 1)__                }_            }_        } else {_            _            highestRegistered = topPrivateDomain(normalizedHost, parts, publicSuffixIndex)__        }_        String subDomain = host.substring(0, host.length() - highestRegistered.length())__        if (subDomain.endsWith(".")) {_            subDomain = subDomain.substring(0, subDomain.length() - 1)__        }_        return Arrays.asList(subDomain, highestRegistered)__    };split,code,host,into,sub,domain,and,highest,registered,domain,the,result,is,a,list,containing,exactly,2,items,the,first,is,the,sub,domain,and,the,second,the,highest,registered,domain,param,host,the,hostname,to,split,return,the,sub,domain,and,highest,registered,domain;public,static,list,string,domain,split,string,host,host,host,trim,if,host,contains,return,arrays,as,list,host,boolean,tentative,ip,true,for,int,i,0,i,host,length,i,if,character,is,digit,host,char,at,i,host,char,at,i,tentative,ip,false,break,if,tentative,ip,if,host,equals,return,arrays,as,list,return,arrays,as,list,host,string,normalized,host,host,normalized,host,normalized,host,to,lower,case,locale,root,list,string,parts,split,domain,normalized,host,int,public,suffix,index,find,public,suffix,parts,if,public,suffix,index,0,return,arrays,as,list,host,string,highest,registered,if,public,suffix,index,1,if,parts,is,empty,if,parts,size,1,return,arrays,as,list,host,if,parts,size,2,boolean,all,numeric,true,string,value,parts,get,parts,size,1,for,int,i,0,i,value,length,i,if,character,is,digit,value,char,at,i,all,numeric,false,break,if,all,numeric,highest,registered,parts,get,parts,size,2,parts,get,parts,size,1,else,highest,registered,parts,get,parts,size,1,else,highest,registered,parts,get,parts,size,1,else,highest,registered,top,private,domain,normalized,host,parts,public,suffix,index,string,sub,domain,host,substring,0,host,length,highest,registered,length,if,sub,domain,ends,with,sub,domain,sub,domain,substring,0,sub,domain,length,1,return,arrays,as,list,sub,domain,highest,registered
