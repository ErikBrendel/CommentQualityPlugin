commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;16;/**  * This will build the appropriate detector given the parameters.  *  * If {@link DatafeedConfig#getDelayedDataCheckConfig()} is not `isEnabled()`, then a {@link NullDelayedDataDetector} is returned, which  * does not do any checks, and only supplies an empty collection.  *  * @param job The {@link Job} object for the given `datafeedConfig`  * @param datafeedConfig The {@link DatafeedConfig} for which to create the {@link DelayedDataDetector}  * @param client The {@link Client} capable of taking action against the ES Cluster.  * @return A new {@link DelayedDataDetector}  */ ;/**  * This will build the appropriate detector given the parameters.  *  * If {@link DatafeedConfig#getDelayedDataCheckConfig()} is not `isEnabled()`, then a {@link NullDelayedDataDetector} is returned, which  * does not do any checks, and only supplies an empty collection.  *  * @param job The {@link Job} object for the given `datafeedConfig`  * @param datafeedConfig The {@link DatafeedConfig} for which to create the {@link DelayedDataDetector}  * @param client The {@link Client} capable of taking action against the ES Cluster.  * @return A new {@link DelayedDataDetector}  */ public static DelayedDataDetector buildDetector(Job job, DatafeedConfig datafeedConfig, Client client) {     if (datafeedConfig.getDelayedDataCheckConfig().isEnabled()) {         long window = validateAndCalculateWindowLength(job.getAnalysisConfig().getBucketSpan(), datafeedConfig.getDelayedDataCheckConfig().getCheckWindow()).         long bucketSpan = job.getAnalysisConfig().getBucketSpan() == null ? 0 : job.getAnalysisConfig().getBucketSpan().millis().         return new DatafeedDelayedDataDetector(bucketSpan, window, job.getId(), job.getDataDescription().getTimeField(), datafeedConfig.getParsedQuery(), datafeedConfig.getIndices().toArray(new String[0]), client).     } else {         return new NullDelayedDataDetector().     } }
false;private,static;2;18;;private static long validateAndCalculateWindowLength(TimeValue bucketSpan, TimeValue currentWindow) {     if (bucketSpan == null) {         return 0.     }     if (currentWindow == null) {         // we should provide a good default as the user did not specify a window         return Math.max(DEFAULT_CHECK_WINDOW_MS, DEFAULT_NUMBER_OF_BUCKETS_TO_SPAN * bucketSpan.millis()).     }     if (currentWindow.compareTo(bucketSpan) < 0) {         throw new IllegalArgumentException(Messages.getMessage(Messages.DATAFEED_CONFIG_DELAYED_DATA_CHECK_TOO_SMALL, currentWindow.getStringRep(), bucketSpan.getStringRep())).     } else if (currentWindow.millis() > bucketSpan.millis() * DelayedDataCheckConfig.MAX_NUMBER_SPANABLE_BUCKETS) {         throw new IllegalArgumentException(Messages.getMessage(Messages.DATAFEED_CONFIG_DELAYED_DATA_CHECK_SPANS_TOO_MANY_BUCKETS, currentWindow.getStringRep(), bucketSpan.getStringRep())).     }     return currentWindow.millis(). }
false;public,static;2;3;;public static BucketWithMissingData fromMissingAndBucket(long missingDocumentCount, Bucket bucket) {     return new BucketWithMissingData(missingDocumentCount, bucket). }
false;public;0;3;;public long getTimeStamp() {     return bucket.getEpoch(). }
false;public;0;3;;public Bucket getBucket() {     return bucket. }
false;public;0;3;;public long getMissingDocumentCount() {     return missingDocumentCount. }
false;public;1;14;;@Override public boolean equals(Object other) {     if (other == this) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     BucketWithMissingData that = (BucketWithMissingData) other.     return Objects.equals(that.bucket, bucket) && Objects.equals(that.missingDocumentCount, missingDocumentCount). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(bucket, missingDocumentCount). }
