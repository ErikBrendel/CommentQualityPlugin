commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;13;;@Override protected void taskOperation(KillProcessAction.Request request, TransportOpenJobAction.JobTask jobTask, ActionListener<KillProcessAction.Response> listener) {     logger.info("[{}] Killing job", jobTask.getJobId()).     auditor.info(jobTask.getJobId(), Messages.JOB_AUDIT_KILLING).     try {         processManager.killProcess(jobTask, true, null).         listener.onResponse(new KillProcessAction.Response(true)).     } catch (Exception e) {         listener.onFailure(e).     } }
false;protected;3;20;;@Override protected void doExecute(Task task, KillProcessAction.Request request, ActionListener<KillProcessAction.Response> listener) {     DiscoveryNodes nodes = clusterService.state().nodes().     PersistentTasksCustomMetaData tasks = clusterService.state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE).     PersistentTasksCustomMetaData.PersistentTask<?> jobTask = MlTasks.getJobTask(request.getJobId(), tasks).     if (jobTask == null || jobTask.getExecutorNode() == null) {         logger.debug("[{}] Cannot kill the process because job is not open", request.getJobId()).         listener.onResponse(new KillProcessAction.Response(false)).         return.     }     DiscoveryNode executorNode = nodes.get(jobTask.getExecutorNode()).     if (executorNode == null) {         listener.onFailure(ExceptionsHelper.conflictStatusException("Cannot kill process for job {} as" + "executor node {} cannot be found", request.getJobId(), jobTask.getExecutorNode())).         return.     }     super.doExecute(task, request, listener). }
