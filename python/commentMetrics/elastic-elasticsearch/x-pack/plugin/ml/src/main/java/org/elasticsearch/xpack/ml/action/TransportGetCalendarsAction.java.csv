commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;13;;@Override protected void doExecute(Task task, GetCalendarsAction.Request request, ActionListener<GetCalendarsAction.Response> listener) {     final String calendarId = request.getCalendarId().     if (request.getCalendarId() != null && GetCalendarsAction.Request.ALL.equals(request.getCalendarId()) == false) {         getCalendar(calendarId, listener).     } else {         PageParams pageParams = request.getPageParams().         if (pageParams == null) {             pageParams = PageParams.defaultParams().         }         getCalendars(pageParams, listener).     } }
false;private;2;10;;private void getCalendar(String calendarId, ActionListener<GetCalendarsAction.Response> listener) {     jobResultsProvider.calendar(calendarId, ActionListener.wrap(calendar -> {         QueryPage<Calendar> page = new QueryPage<>(Collections.singletonList(calendar), 1, Calendar.RESULTS_FIELD).         listener.onResponse(new GetCalendarsAction.Response(page)).     }, listener::onFailure)). }
false;private;2;9;;private void getCalendars(PageParams pageParams, ActionListener<GetCalendarsAction.Response> listener) {     CalendarQueryBuilder query = new CalendarQueryBuilder().pageParams(pageParams).sort(true).     jobResultsProvider.calendars(query, ActionListener.wrap(calendars -> {         listener.onResponse(new GetCalendarsAction.Response(calendars)).     }, listener::onFailure)). }
