commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;13;/**  * Get a reference to the singleton native process controller.  *  * The NativeController is created lazily to allow time for the C++ process to be started before connection is attempted.  *  * <code>null</code> is returned to tests where xpack.ml.autodetect_process=false.  *  * Calls may throw an exception if initial connection to the C++ process fails.  */ ;/**  * Get a reference to the singleton native process controller.  *  * The NativeController is created lazily to allow time for the C++ process to be started before connection is attempted.  *  * <code>null</code> is returned to tests where xpack.ml.autodetect_process=false.  *  * Calls may throw an exception if initial connection to the C++ process fails.  */ public static NativeController getNativeController(Environment environment) throws IOException {     if (MachineLearningField.AUTODETECT_PROCESS.get(environment.settings())) {         synchronized (lock) {             if (nativeController == null) {                 nativeController = new NativeController(environment, new NamedPipeHelper()).                 nativeController.tailLogsInThread().             }         }         return nativeController.     }     return null. }
true;public,static;0;3;/**  * Get a reference to the singleton native process controller.  *  * Assumes that if it is possible for a native controller to exist that it will already have been created.  * Designed for use by objects that don't have access to the environment but know a native controller must exist  * for the object calling this method to exist.  */ ;/**  * Get a reference to the singleton native process controller.  *  * Assumes that if it is possible for a native controller to exist that it will already have been created.  * Designed for use by objects that don't have access to the environment but know a native controller must exist  * for the object calling this method to exist.  */ public static NativeController getNativeController() {     return nativeController. }
