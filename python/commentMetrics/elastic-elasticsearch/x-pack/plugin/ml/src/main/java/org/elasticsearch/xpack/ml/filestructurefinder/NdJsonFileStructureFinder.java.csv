commented;modifiers;parameterAmount;loc;comment;code
false;static;6;54;;static NdJsonFileStructureFinder makeNdJsonFileStructureFinder(List<String> explanation, String sample, String charsetName, Boolean hasByteOrderMarker, FileStructureOverrides overrides, TimeoutChecker timeoutChecker) throws IOException {     List<Map<String, ?>> sampleRecords = new ArrayList<>().     List<String> sampleMessages = Arrays.asList(sample.split("\n")).     for (String sampleMessage : sampleMessages) {         XContentParser parser = jsonXContent.createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, sampleMessage).         sampleRecords.add(parser.mapOrdered()).         timeoutChecker.check("NDJSON parsing").     }     FileStructure.Builder structureBuilder = new FileStructure.Builder(FileStructure.Format.NDJSON).setCharset(charsetName).setHasByteOrderMarker(hasByteOrderMarker).setSampleStart(sampleMessages.stream().limit(2).collect(Collectors.joining("\n", "", "\n"))).setNumLinesAnalyzed(sampleMessages.size()).setNumMessagesAnalyzed(sampleRecords.size()).     Tuple<String, TimestampMatch> timeField = FileStructureUtils.guessTimestampField(explanation, sampleRecords, overrides, timeoutChecker).     if (timeField != null) {         boolean needClientTimeZone = timeField.v2().hasTimezoneDependentParsing().         structureBuilder.setTimestampField(timeField.v1()).setJodaTimestampFormats(timeField.v2().jodaTimestampFormats).setJavaTimestampFormats(timeField.v2().javaTimestampFormats).setNeedClientTimezone(needClientTimeZone).setIngestPipeline(FileStructureUtils.makeIngestPipelineDefinition(null, timeField.v1(), timeField.v2().javaTimestampFormats, needClientTimeZone)).     }     Tuple<SortedMap<String, Object>, SortedMap<String, FieldStats>> mappingsAndFieldStats = FileStructureUtils.guessMappingsAndCalculateFieldStats(explanation, sampleRecords, timeoutChecker).     SortedMap<String, Object> mappings = mappingsAndFieldStats.v1().     if (timeField != null) {         mappings.put(FileStructureUtils.DEFAULT_TIMESTAMP_FIELD, Collections.singletonMap(FileStructureUtils.MAPPING_TYPE_SETTING, "date")).     }     if (mappingsAndFieldStats.v2() != null) {         structureBuilder.setFieldStats(mappingsAndFieldStats.v2()).     }     FileStructure structure = structureBuilder.setMappings(mappings).setExplanation(explanation).build().     return new NdJsonFileStructureFinder(sampleMessages, structure). }
false;public;0;4;;@Override public List<String> getSampleMessages() {     return sampleMessages. }
false;public;0;4;;@Override public FileStructure getStructure() {     return structure. }
