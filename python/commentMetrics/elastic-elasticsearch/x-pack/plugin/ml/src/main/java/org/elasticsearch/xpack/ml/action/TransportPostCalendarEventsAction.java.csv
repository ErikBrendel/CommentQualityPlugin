commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void onResponse(BulkResponse response) {     jobManager.updateProcessOnCalendarChanged(calendar.getJobIds(), ActionListener.wrap(r -> listener.onResponse(new PostCalendarEventsAction.Response(events)), listener::onFailure)). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(ExceptionsHelper.serverError("Error indexing event", e)). }
false;protected;3;43;;@Override protected void doExecute(Task task, PostCalendarEventsAction.Request request, ActionListener<PostCalendarEventsAction.Response> listener) {     List<ScheduledEvent> events = request.getScheduledEvents().     ActionListener<Calendar> calendarListener = ActionListener.wrap(calendar -> {         BulkRequestBuilder bulkRequestBuilder = client.prepareBulk().         for (ScheduledEvent event : events) {             IndexRequest indexRequest = new IndexRequest(MlMetaIndex.INDEX_NAME).             try (XContentBuilder builder = XContentFactory.jsonBuilder()) {                 indexRequest.source(event.toXContent(builder, new ToXContent.MapParams(Collections.singletonMap(ToXContentParams.INCLUDE_TYPE, "true")))).             } catch (IOException e) {                 throw new IllegalStateException("Failed to serialise event", e).             }             bulkRequestBuilder.add(indexRequest).         }         bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).         executeAsyncWithOrigin(client, ML_ORIGIN, BulkAction.INSTANCE, bulkRequestBuilder.request(), new ActionListener<BulkResponse>() {              @Override             public void onResponse(BulkResponse response) {                 jobManager.updateProcessOnCalendarChanged(calendar.getJobIds(), ActionListener.wrap(r -> listener.onResponse(new PostCalendarEventsAction.Response(events)), listener::onFailure)).             }              @Override             public void onFailure(Exception e) {                 listener.onFailure(ExceptionsHelper.serverError("Error indexing event", e)).             }         }).     }, listener::onFailure).     jobResultsProvider.calendar(request.getCalendarId(), calendarListener). }
