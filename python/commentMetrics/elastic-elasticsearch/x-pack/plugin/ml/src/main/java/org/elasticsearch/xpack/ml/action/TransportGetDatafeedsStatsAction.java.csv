commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected GetDatafeedsStatsAction.Response newResponse() {     return new GetDatafeedsStatsAction.Response(). }
false;protected;3;18;;@Override protected void masterOperation(GetDatafeedsStatsAction.Request request, ClusterState state, ActionListener<GetDatafeedsStatsAction.Response> listener) throws Exception {     logger.debug("Get stats for datafeed '{}'", request.getDatafeedId()).     datafeedConfigProvider.expandDatafeedIds(request.getDatafeedId(), request.allowNoDatafeeds(), ActionListener.wrap(expandedDatafeedIds -> {         PersistentTasksCustomMetaData tasksInProgress = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE).         List<GetDatafeedsStatsAction.Response.DatafeedStats> results = expandedDatafeedIds.stream().map(datafeedId -> getDatafeedStats(datafeedId, state, tasksInProgress)).collect(Collectors.toList()).         QueryPage<GetDatafeedsStatsAction.Response.DatafeedStats> statsPage = new QueryPage<>(results, results.size(), DatafeedConfig.RESULTS_FIELD).         listener.onResponse(new GetDatafeedsStatsAction.Response(statsPage)).     }, listener::onFailure)). }
false;private,static;3;12;;private static GetDatafeedsStatsAction.Response.DatafeedStats getDatafeedStats(String datafeedId, ClusterState state, PersistentTasksCustomMetaData tasks) {     PersistentTasksCustomMetaData.PersistentTask<?> task = MlTasks.getDatafeedTask(datafeedId, tasks).     DatafeedState datafeedState = MlTasks.getDatafeedState(datafeedId, tasks).     DiscoveryNode node = null.     String explanation = null.     if (task != null) {         node = state.nodes().get(task.getExecutorNode()).         explanation = task.getAssignment().getExplanation().     }     return new GetDatafeedsStatsAction.Response.DatafeedStats(datafeedId, datafeedState, node, explanation). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(GetDatafeedsStatsAction.Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ). }
