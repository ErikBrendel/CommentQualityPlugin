# id;timestamp;commentText;codeText;commentWords;codeWords
DelimitedFileStructureFinderFactory -> @Override     public boolean canCreateFromSample(List<String> explanation, String sample);1536314350;Rules are:_- It must contain at least two complete records_- There must be a minimum number of fields per record (otherwise files with no commas could be treated as CSV!)_- Every record except the last must have the same number of fields_The reason the last record is allowed to have fewer fields than the others is that_it could have been truncated when the file was sampled.;@Override_    public boolean canCreateFromSample(List<String> explanation, String sample) {_        String formatName__        switch ((char) csvPreference.getDelimiterChar()) {_            case ',':_                formatName = "CSV"__                break__            case '\t':_                formatName = "TSV"__                break__            default:_                formatName = Character.getName(csvPreference.getDelimiterChar()).toLowerCase(Locale.ROOT) + " delimited values"__                break__        }_        return DelimitedFileStructureFinder.canCreateFromSample(explanation, sample, minFieldsPerRow, csvPreference, formatName)__    };rules,are,it,must,contain,at,least,two,complete,records,there,must,be,a,minimum,number,of,fields,per,record,otherwise,files,with,no,commas,could,be,treated,as,csv,every,record,except,the,last,must,have,the,same,number,of,fields,the,reason,the,last,record,is,allowed,to,have,fewer,fields,than,the,others,is,that,it,could,have,been,truncated,when,the,file,was,sampled;override,public,boolean,can,create,from,sample,list,string,explanation,string,sample,string,format,name,switch,char,csv,preference,get,delimiter,char,case,format,name,csv,break,case,t,format,name,tsv,break,default,format,name,character,get,name,csv,preference,get,delimiter,char,to,lower,case,locale,root,delimited,values,break,return,delimited,file,structure,finder,can,create,from,sample,explanation,sample,min,fields,per,row,csv,preference,format,name
DelimitedFileStructureFinderFactory -> @Override     public boolean canCreateFromSample(List<String> explanation, String sample);1536964057;Rules are:_- It must contain at least two complete records_- There must be a minimum number of fields per record (otherwise files with no commas could be treated as CSV!)_- Every record except the last must have the same number of fields_The reason the last record is allowed to have fewer fields than the others is that_it could have been truncated when the file was sampled.;@Override_    public boolean canCreateFromSample(List<String> explanation, String sample) {_        String formatName__        switch ((char) csvPreference.getDelimiterChar()) {_            case ',':_                formatName = "CSV"__                break__            case '\t':_                formatName = "TSV"__                break__            default:_                formatName = Character.getName(csvPreference.getDelimiterChar()).toLowerCase(Locale.ROOT) + " delimited values"__                break__        }_        return DelimitedFileStructureFinder.canCreateFromSample(explanation, sample, minFieldsPerRow, csvPreference, formatName)__    };rules,are,it,must,contain,at,least,two,complete,records,there,must,be,a,minimum,number,of,fields,per,record,otherwise,files,with,no,commas,could,be,treated,as,csv,every,record,except,the,last,must,have,the,same,number,of,fields,the,reason,the,last,record,is,allowed,to,have,fewer,fields,than,the,others,is,that,it,could,have,been,truncated,when,the,file,was,sampled;override,public,boolean,can,create,from,sample,list,string,explanation,string,sample,string,format,name,switch,char,csv,preference,get,delimiter,char,case,format,name,csv,break,case,t,format,name,tsv,break,default,format,name,character,get,name,csv,preference,get,delimiter,char,to,lower,case,locale,root,delimited,values,break,return,delimited,file,structure,finder,can,create,from,sample,explanation,sample,min,fields,per,row,csv,preference,format,name
DelimitedFileStructureFinderFactory -> @Override     public boolean canCreateFromSample(List<String> explanation, String sample);1538170812;Rules are:_- It must contain at least two complete records_- There must be a minimum number of fields per record (otherwise files with no commas could be treated as CSV!)_- Every record except the last must have the same number of fields_The reason the last record is allowed to have fewer fields than the others is that_it could have been truncated when the file was sampled.;@Override_    public boolean canCreateFromSample(List<String> explanation, String sample) {_        String formatName__        switch ((char) csvPreference.getDelimiterChar()) {_            case ',':_                formatName = "CSV"__                break__            case '\t':_                formatName = "TSV"__                break__            default:_                formatName = Character.getName(csvPreference.getDelimiterChar()).toLowerCase(Locale.ROOT) + " delimited values"__                break__        }_        return DelimitedFileStructureFinder.canCreateFromSample(explanation, sample, minFieldsPerRow, csvPreference, formatName)__    };rules,are,it,must,contain,at,least,two,complete,records,there,must,be,a,minimum,number,of,fields,per,record,otherwise,files,with,no,commas,could,be,treated,as,csv,every,record,except,the,last,must,have,the,same,number,of,fields,the,reason,the,last,record,is,allowed,to,have,fewer,fields,than,the,others,is,that,it,could,have,been,truncated,when,the,file,was,sampled;override,public,boolean,can,create,from,sample,list,string,explanation,string,sample,string,format,name,switch,char,csv,preference,get,delimiter,char,case,format,name,csv,break,case,t,format,name,tsv,break,default,format,name,character,get,name,csv,preference,get,delimiter,char,to,lower,case,locale,root,delimited,values,break,return,delimited,file,structure,finder,can,create,from,sample,explanation,sample,min,fields,per,row,csv,preference,format,name
