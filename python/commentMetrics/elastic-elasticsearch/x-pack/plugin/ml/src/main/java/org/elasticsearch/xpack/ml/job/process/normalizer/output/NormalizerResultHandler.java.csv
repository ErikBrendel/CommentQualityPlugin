commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<NormalizerResult> getNormalizedResults() {     return normalizedResults. }
false;public;0;14;;public void process() throws IOException {     XContent xContent = XContentFactory.xContent(XContentType.JSON).     BytesReference bytesRef = null.     byte[] readBuf = new byte[READ_BUF_SIZE].     for (int bytesRead = inputStream.read(readBuf). bytesRead != -1. bytesRead = inputStream.read(readBuf)) {         if (bytesRef == null) {             bytesRef = new BytesArray(readBuf, 0, bytesRead).         } else {             bytesRef = new CompositeBytesReference(bytesRef, new BytesArray(readBuf, 0, bytesRead)).         }         bytesRef = parseResults(xContent, bytesRef).         readBuf = new byte[READ_BUF_SIZE].     } }
false;private;2;20;;private BytesReference parseResults(XContent xContent, BytesReference bytesRef) throws IOException {     byte marker = xContent.streamSeparator().     int from = 0.     while (true) {         int nextMarker = findNextMarker(marker, bytesRef, from).         if (nextMarker == -1) {             // No more markers in this block             break.         }         // Ignore blank lines         if (nextMarker > from) {             parseResult(xContent, bytesRef.slice(from, nextMarker - from)).         }         from = nextMarker + 1.     }     if (from >= bytesRef.length()) {         return null.     }     return bytesRef.slice(from, bytesRef.length() - from). }
false;private;2;8;;private void parseResult(XContent xContent, BytesReference bytesRef) throws IOException {     try (InputStream stream = bytesRef.streamInput().         XContentParser parser = xContent.createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {         NormalizerResult result = NormalizerResult.PARSER.apply(parser, null).         normalizedResults.add(result).     } }
false;private,static;3;8;;private static int findNextMarker(byte marker, BytesReference bytesRef, int from) {     for (int i = from. i < bytesRef.length(). ++i) {         if (bytesRef.get(i) == marker) {             return i.         }     }     return -1. }
