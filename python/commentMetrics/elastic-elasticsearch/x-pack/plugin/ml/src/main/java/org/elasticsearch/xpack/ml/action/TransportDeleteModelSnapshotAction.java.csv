commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void onResponse(BulkByScrollResponse bulkResponse) {     String msg = Messages.getMessage(Messages.JOB_AUDIT_SNAPSHOT_DELETED, deleteCandidate.getSnapshotId(), deleteCandidate.getDescription()).     auditor.info(request.getJobId(), msg).     logger.debug("[{}] {}", request.getJobId(), msg).     // We don't care about the bulk response, just that it succeeded     listener.onResponse(new AcknowledgedResponse(true)). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;protected;3;57;;@Override protected void doExecute(Task task, DeleteModelSnapshotAction.Request request, ActionListener<AcknowledgedResponse> listener) {     // Verify the snapshot exists     jobResultsProvider.modelSnapshots(request.getJobId(), 0, 1, null, null, null, true, request.getSnapshotId(), page -> {         List<ModelSnapshot> deleteCandidates = page.results().         if (deleteCandidates.size() > 1) {             logger.warn("More than one model found for [job_id: " + request.getJobId() + ", snapshot_id: " + request.getSnapshotId() + "] tuple.").         }         if (deleteCandidates.isEmpty()) {             listener.onFailure(new ResourceNotFoundException(Messages.getMessage(Messages.REST_NO_SUCH_MODEL_SNAPSHOT, request.getSnapshotId(), request.getJobId()))).             return.         }         ModelSnapshot deleteCandidate = deleteCandidates.get(0).         // Verify the snapshot is not being used         jobManager.getJob(request.getJobId(), ActionListener.wrap(job -> {             String currentModelInUse = job.getModelSnapshotId().             if (currentModelInUse != null && currentModelInUse.equals(request.getSnapshotId())) {                 listener.onFailure(new IllegalArgumentException(Messages.getMessage(Messages.REST_CANNOT_DELETE_HIGHEST_PRIORITY, request.getSnapshotId(), request.getJobId()))).                 return.             }             // Delete the snapshot and any associated state files             JobDataDeleter deleter = new JobDataDeleter(client, request.getJobId()).             deleter.deleteModelSnapshots(Collections.singletonList(deleteCandidate), new ActionListener<BulkByScrollResponse>() {                  @Override                 public void onResponse(BulkByScrollResponse bulkResponse) {                     String msg = Messages.getMessage(Messages.JOB_AUDIT_SNAPSHOT_DELETED, deleteCandidate.getSnapshotId(), deleteCandidate.getDescription()).                     auditor.info(request.getJobId(), msg).                     logger.debug("[{}] {}", request.getJobId(), msg).                     // We don't care about the bulk response, just that it succeeded                     listener.onResponse(new AcknowledgedResponse(true)).                 }                  @Override                 public void onFailure(Exception e) {                     listener.onFailure(e).                 }             }).         }, listener::onFailure)).     }, listener::onFailure). }
