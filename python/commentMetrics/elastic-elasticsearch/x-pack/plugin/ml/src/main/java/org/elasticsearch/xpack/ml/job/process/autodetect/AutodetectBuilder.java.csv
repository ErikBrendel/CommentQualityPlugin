# id;timestamp;commentText;codeText;commentWords;codeWords
AutodetectBuilder -> static int calculateStaggeringInterval(String jobId);1533921794;This random time of up to 1 hour is added to intervals at which we_tell the C++ process to perform periodic operations.  This means that_when there are many jobs there is a certain amount of staggering of_their periodic operations.  A given job will always be given the same_staggering interval (for a given JVM implementation).__@param jobId The ID of the job to calculate the staggering interval for_@return The staggering interval;static int calculateStaggeringInterval(String jobId) {_        Random rng = new Random(jobId.hashCode())__        return rng.nextInt(SECONDS_IN_HOUR)__    };this,random,time,of,up,to,1,hour,is,added,to,intervals,at,which,we,tell,the,c,process,to,perform,periodic,operations,this,means,that,when,there,are,many,jobs,there,is,a,certain,amount,of,staggering,of,their,periodic,operations,a,given,job,will,always,be,given,the,same,staggering,interval,for,a,given,jvm,implementation,param,job,id,the,id,of,the,job,to,calculate,the,staggering,interval,for,return,the,staggering,interval;static,int,calculate,staggering,interval,string,job,id,random,rng,new,random,job,id,hash,code,return,rng,next,int
AutodetectBuilder -> static int calculateStaggeringInterval(String jobId);1534338685;This random time of up to 1 hour is added to intervals at which we_tell the C++ process to perform periodic operations.  This means that_when there are many jobs there is a certain amount of staggering of_their periodic operations.  A given job will always be given the same_staggering interval (for a given JVM implementation).__@param jobId The ID of the job to calculate the staggering interval for_@return The staggering interval;static int calculateStaggeringInterval(String jobId) {_        Random rng = new Random(jobId.hashCode())__        return rng.nextInt(SECONDS_IN_HOUR)__    };this,random,time,of,up,to,1,hour,is,added,to,intervals,at,which,we,tell,the,c,process,to,perform,periodic,operations,this,means,that,when,there,are,many,jobs,there,is,a,certain,amount,of,staggering,of,their,periodic,operations,a,given,job,will,always,be,given,the,same,staggering,interval,for,a,given,jvm,implementation,param,job,id,the,id,of,the,job,to,calculate,the,staggering,interval,for,return,the,staggering,interval;static,int,calculate,staggering,interval,string,job,id,random,rng,new,random,job,id,hash,code,return,rng,next,int
AutodetectBuilder -> static int calculateStaggeringInterval(String jobId);1538067637;This random time of up to 1 hour is added to intervals at which we_tell the C++ process to perform periodic operations.  This means that_when there are many jobs there is a certain amount of staggering of_their periodic operations.  A given job will always be given the same_staggering interval (for a given JVM implementation).__@param jobId The ID of the job to calculate the staggering interval for_@return The staggering interval;static int calculateStaggeringInterval(String jobId) {_        Random rng = new Random(jobId.hashCode())__        return rng.nextInt(SECONDS_IN_HOUR)__    };this,random,time,of,up,to,1,hour,is,added,to,intervals,at,which,we,tell,the,c,process,to,perform,periodic,operations,this,means,that,when,there,are,many,jobs,there,is,a,certain,amount,of,staggering,of,their,periodic,operations,a,given,job,will,always,be,given,the,same,staggering,interval,for,a,given,jvm,implementation,param,job,id,the,id,of,the,job,to,calculate,the,staggering,interval,for,return,the,staggering,interval;static,int,calculate,staggering,interval,string,job,id,random,rng,new,random,job,id,hash,code,return,rng,next,int
AutodetectBuilder -> static int calculateStaggeringInterval(String jobId);1540583181;This random time of up to 1 hour is added to intervals at which we_tell the C++ process to perform periodic operations.  This means that_when there are many jobs there is a certain amount of staggering of_their periodic operations.  A given job will always be given the same_staggering interval (for a given JVM implementation).__@param jobId The ID of the job to calculate the staggering interval for_@return The staggering interval;static int calculateStaggeringInterval(String jobId) {_        Random rng = new Random(jobId.hashCode())__        return rng.nextInt(SECONDS_IN_HOUR)__    };this,random,time,of,up,to,1,hour,is,added,to,intervals,at,which,we,tell,the,c,process,to,perform,periodic,operations,this,means,that,when,there,are,many,jobs,there,is,a,certain,amount,of,staggering,of,their,periodic,operations,a,given,job,will,always,be,given,the,same,staggering,interval,for,a,given,jvm,implementation,param,job,id,the,id,of,the,job,to,calculate,the,staggering,interval,for,return,the,staggering,interval;static,int,calculate,staggering,interval,string,job,id,random,rng,new,random,job,id,hash,code,return,rng,next,int
AutodetectBuilder -> static int calculateStaggeringInterval(String jobId);1542637793;This random time of up to 1 hour is added to intervals at which we_tell the C++ process to perform periodic operations.  This means that_when there are many jobs there is a certain amount of staggering of_their periodic operations.  A given job will always be given the same_staggering interval (for a given JVM implementation).__@param jobId The ID of the job to calculate the staggering interval for_@return The staggering interval;static int calculateStaggeringInterval(String jobId) {_        Random rng = new Random(jobId.hashCode())__        return rng.nextInt(SECONDS_IN_HOUR)__    };this,random,time,of,up,to,1,hour,is,added,to,intervals,at,which,we,tell,the,c,process,to,perform,periodic,operations,this,means,that,when,there,are,many,jobs,there,is,a,certain,amount,of,staggering,of,their,periodic,operations,a,given,job,will,always,be,given,the,same,staggering,interval,for,a,given,jvm,implementation,param,job,id,the,id,of,the,job,to,calculate,the,staggering,interval,for,return,the,staggering,interval;static,int,calculate,staggering,interval,string,job,id,random,rng,new,random,job,id,hash,code,return,rng,next,int
AutodetectBuilder -> static int calculateStaggeringInterval(String jobId);1545310197;This random time of up to 1 hour is added to intervals at which we_tell the C++ process to perform periodic operations.  This means that_when there are many jobs there is a certain amount of staggering of_their periodic operations.  A given job will always be given the same_staggering interval (for a given JVM implementation).__@param jobId The ID of the job to calculate the staggering interval for_@return The staggering interval;static int calculateStaggeringInterval(String jobId) {_        Random rng = new Random(jobId.hashCode())__        return rng.nextInt(SECONDS_IN_HOUR)__    };this,random,time,of,up,to,1,hour,is,added,to,intervals,at,which,we,tell,the,c,process,to,perform,periodic,operations,this,means,that,when,there,are,many,jobs,there,is,a,certain,amount,of,staggering,of,their,periodic,operations,a,given,job,will,always,be,given,the,same,staggering,interval,for,a,given,jvm,implementation,param,job,id,the,id,of,the,job,to,calculate,the,staggering,interval,for,return,the,staggering,interval;static,int,calculate,staggering,interval,string,job,id,random,rng,new,random,job,id,hash,code,return,rng,next,int
AutodetectBuilder -> public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,                              NativeController controller, ProcessPipes processPipes);1524684173;Constructs an autodetect process builder__@param job           The job configuration_@param filesToDelete This method will append File objects that need to be_deleted when the process completes_@param logger        The job's logger;public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,_                             NativeController controller, ProcessPipes processPipes) {_        this.env = env__        this.settings = settings__        this.controller = controller__        this.processPipes = processPipes__        this.job = Objects.requireNonNull(job)__        this.filesToDelete = Objects.requireNonNull(filesToDelete)__        this.logger = Objects.requireNonNull(logger)__        referencedFilters = new HashSet<>()__        scheduledEvents = Collections.emptyList()__    };constructs,an,autodetect,process,builder,param,job,the,job,configuration,param,files,to,delete,this,method,will,append,file,objects,that,need,to,be,deleted,when,the,process,completes,param,logger,the,job,s,logger;public,autodetect,builder,job,job,list,path,files,to,delete,logger,logger,environment,env,settings,settings,native,controller,controller,process,pipes,process,pipes,this,env,env,this,settings,settings,this,controller,controller,this,process,pipes,process,pipes,this,job,objects,require,non,null,job,this,files,to,delete,objects,require,non,null,files,to,delete,this,logger,objects,require,non,null,logger,referenced,filters,new,hash,set,scheduled,events,collections,empty,list
AutodetectBuilder -> public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,                              NativeController controller, ProcessPipes processPipes);1533921794;Constructs an autodetect process builder__@param job           The job configuration_@param filesToDelete This method will append File objects that need to be_deleted when the process completes_@param logger        The job's logger;public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,_                             NativeController controller, ProcessPipes processPipes) {_        this.env = env__        this.settings = settings__        this.controller = controller__        this.processPipes = processPipes__        this.job = Objects.requireNonNull(job)__        this.filesToDelete = Objects.requireNonNull(filesToDelete)__        this.logger = Objects.requireNonNull(logger)__        referencedFilters = new HashSet<>()__        scheduledEvents = Collections.emptyList()__    };constructs,an,autodetect,process,builder,param,job,the,job,configuration,param,files,to,delete,this,method,will,append,file,objects,that,need,to,be,deleted,when,the,process,completes,param,logger,the,job,s,logger;public,autodetect,builder,job,job,list,path,files,to,delete,logger,logger,environment,env,settings,settings,native,controller,controller,process,pipes,process,pipes,this,env,env,this,settings,settings,this,controller,controller,this,process,pipes,process,pipes,this,job,objects,require,non,null,job,this,files,to,delete,objects,require,non,null,files,to,delete,this,logger,objects,require,non,null,logger,referenced,filters,new,hash,set,scheduled,events,collections,empty,list
AutodetectBuilder -> public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,                              NativeController controller, ProcessPipes processPipes);1534338685;Constructs an autodetect process builder__@param job           The job configuration_@param filesToDelete This method will append File objects that need to be_deleted when the process completes_@param logger        The job's logger;public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,_                             NativeController controller, ProcessPipes processPipes) {_        this.env = env__        this.settings = settings__        this.controller = controller__        this.processPipes = processPipes__        this.job = Objects.requireNonNull(job)__        this.filesToDelete = Objects.requireNonNull(filesToDelete)__        this.logger = Objects.requireNonNull(logger)__        referencedFilters = new HashSet<>()__        scheduledEvents = Collections.emptyList()__    };constructs,an,autodetect,process,builder,param,job,the,job,configuration,param,files,to,delete,this,method,will,append,file,objects,that,need,to,be,deleted,when,the,process,completes,param,logger,the,job,s,logger;public,autodetect,builder,job,job,list,path,files,to,delete,logger,logger,environment,env,settings,settings,native,controller,controller,process,pipes,process,pipes,this,env,env,this,settings,settings,this,controller,controller,this,process,pipes,process,pipes,this,job,objects,require,non,null,job,this,files,to,delete,objects,require,non,null,files,to,delete,this,logger,objects,require,non,null,logger,referenced,filters,new,hash,set,scheduled,events,collections,empty,list
AutodetectBuilder -> public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,                              NativeController controller, ProcessPipes processPipes);1538067637;Constructs an autodetect process builder__@param job           The job configuration_@param filesToDelete This method will append File objects that need to be_deleted when the process completes_@param logger        The job's logger;public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,_                             NativeController controller, ProcessPipes processPipes) {_        this.env = env__        this.settings = settings__        this.controller = controller__        this.processPipes = processPipes__        this.job = Objects.requireNonNull(job)__        this.filesToDelete = Objects.requireNonNull(filesToDelete)__        this.logger = Objects.requireNonNull(logger)__        referencedFilters = new HashSet<>()__        scheduledEvents = Collections.emptyList()__    };constructs,an,autodetect,process,builder,param,job,the,job,configuration,param,files,to,delete,this,method,will,append,file,objects,that,need,to,be,deleted,when,the,process,completes,param,logger,the,job,s,logger;public,autodetect,builder,job,job,list,path,files,to,delete,logger,logger,environment,env,settings,settings,native,controller,controller,process,pipes,process,pipes,this,env,env,this,settings,settings,this,controller,controller,this,process,pipes,process,pipes,this,job,objects,require,non,null,job,this,files,to,delete,objects,require,non,null,files,to,delete,this,logger,objects,require,non,null,logger,referenced,filters,new,hash,set,scheduled,events,collections,empty,list
AutodetectBuilder -> public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,                              NativeController controller, ProcessPipes processPipes);1540583181;Constructs an autodetect process builder__@param job           The job configuration_@param filesToDelete This method will append File objects that need to be_deleted when the process completes_@param logger        The job's logger;public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,_                             NativeController controller, ProcessPipes processPipes) {_        this.env = env__        this.settings = settings__        this.controller = controller__        this.processPipes = processPipes__        this.job = Objects.requireNonNull(job)__        this.filesToDelete = Objects.requireNonNull(filesToDelete)__        this.logger = Objects.requireNonNull(logger)__        referencedFilters = new HashSet<>()__        scheduledEvents = Collections.emptyList()__    };constructs,an,autodetect,process,builder,param,job,the,job,configuration,param,files,to,delete,this,method,will,append,file,objects,that,need,to,be,deleted,when,the,process,completes,param,logger,the,job,s,logger;public,autodetect,builder,job,job,list,path,files,to,delete,logger,logger,environment,env,settings,settings,native,controller,controller,process,pipes,process,pipes,this,env,env,this,settings,settings,this,controller,controller,this,process,pipes,process,pipes,this,job,objects,require,non,null,job,this,files,to,delete,objects,require,non,null,files,to,delete,this,logger,objects,require,non,null,logger,referenced,filters,new,hash,set,scheduled,events,collections,empty,list
AutodetectBuilder -> public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,                              NativeController controller, ProcessPipes processPipes);1542637793;Constructs an autodetect process builder__@param job           The job configuration_@param filesToDelete This method will append File objects that need to be_deleted when the process completes_@param logger        The job's logger;public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,_                             NativeController controller, ProcessPipes processPipes) {_        this.env = env__        this.settings = settings__        this.controller = controller__        this.processPipes = processPipes__        this.job = Objects.requireNonNull(job)__        this.filesToDelete = Objects.requireNonNull(filesToDelete)__        this.logger = Objects.requireNonNull(logger)__        referencedFilters = new HashSet<>()__        scheduledEvents = Collections.emptyList()__    };constructs,an,autodetect,process,builder,param,job,the,job,configuration,param,files,to,delete,this,method,will,append,file,objects,that,need,to,be,deleted,when,the,process,completes,param,logger,the,job,s,logger;public,autodetect,builder,job,job,list,path,files,to,delete,logger,logger,environment,env,settings,settings,native,controller,controller,process,pipes,process,pipes,this,env,env,this,settings,settings,this,controller,controller,this,process,pipes,process,pipes,this,job,objects,require,non,null,job,this,files,to,delete,objects,require,non,null,files,to,delete,this,logger,objects,require,non,null,logger,referenced,filters,new,hash,set,scheduled,events,collections,empty,list
AutodetectBuilder -> public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,                              NativeController controller, ProcessPipes processPipes);1545310197;Constructs an autodetect process builder__@param job           The job configuration_@param filesToDelete This method will append File objects that need to be_deleted when the process completes_@param logger        The job's logger;public AutodetectBuilder(Job job, List<Path> filesToDelete, Logger logger, Environment env, Settings settings,_                             NativeController controller, ProcessPipes processPipes) {_        this.env = env__        this.settings = settings__        this.controller = controller__        this.processPipes = processPipes__        this.job = Objects.requireNonNull(job)__        this.filesToDelete = Objects.requireNonNull(filesToDelete)__        this.logger = Objects.requireNonNull(logger)__        referencedFilters = new HashSet<>()__        scheduledEvents = Collections.emptyList()__    };constructs,an,autodetect,process,builder,param,job,the,job,configuration,param,files,to,delete,this,method,will,append,file,objects,that,need,to,be,deleted,when,the,process,completes,param,logger,the,job,s,logger;public,autodetect,builder,job,job,list,path,files,to,delete,logger,logger,environment,env,settings,settings,native,controller,controller,process,pipes,process,pipes,this,env,env,this,settings,settings,this,controller,controller,this,process,pipes,process,pipes,this,job,objects,require,non,null,job,this,files,to,delete,objects,require,non,null,files,to,delete,this,logger,objects,require,non,null,logger,referenced,filters,new,hash,set,scheduled,events,collections,empty,list
AutodetectBuilder -> public AutodetectBuilder quantiles(Quantiles quantiles);1524684173;Set quantiles to restore the normalizer state if any.__@param quantiles the quantiles;public AutodetectBuilder quantiles(Quantiles quantiles) {_        this.quantiles = quantiles__        return this__    };set,quantiles,to,restore,the,normalizer,state,if,any,param,quantiles,the,quantiles;public,autodetect,builder,quantiles,quantiles,quantiles,this,quantiles,quantiles,return,this
AutodetectBuilder -> public AutodetectBuilder quantiles(Quantiles quantiles);1533921794;Set quantiles to restore the normalizer state if any.__@param quantiles the quantiles;public AutodetectBuilder quantiles(Quantiles quantiles) {_        this.quantiles = quantiles__        return this__    };set,quantiles,to,restore,the,normalizer,state,if,any,param,quantiles,the,quantiles;public,autodetect,builder,quantiles,quantiles,quantiles,this,quantiles,quantiles,return,this
AutodetectBuilder -> public AutodetectBuilder quantiles(Quantiles quantiles);1534338685;Set quantiles to restore the normalizer state if any.__@param quantiles the quantiles;public AutodetectBuilder quantiles(Quantiles quantiles) {_        this.quantiles = quantiles__        return this__    };set,quantiles,to,restore,the,normalizer,state,if,any,param,quantiles,the,quantiles;public,autodetect,builder,quantiles,quantiles,quantiles,this,quantiles,quantiles,return,this
AutodetectBuilder -> public AutodetectBuilder quantiles(Quantiles quantiles);1538067637;Set quantiles to restore the normalizer state if any.__@param quantiles the quantiles;public AutodetectBuilder quantiles(Quantiles quantiles) {_        this.quantiles = quantiles__        return this__    };set,quantiles,to,restore,the,normalizer,state,if,any,param,quantiles,the,quantiles;public,autodetect,builder,quantiles,quantiles,quantiles,this,quantiles,quantiles,return,this
AutodetectBuilder -> public AutodetectBuilder quantiles(Quantiles quantiles);1540583181;Set quantiles to restore the normalizer state if any.__@param quantiles the quantiles;public AutodetectBuilder quantiles(Quantiles quantiles) {_        this.quantiles = quantiles__        return this__    };set,quantiles,to,restore,the,normalizer,state,if,any,param,quantiles,the,quantiles;public,autodetect,builder,quantiles,quantiles,quantiles,this,quantiles,quantiles,return,this
AutodetectBuilder -> public AutodetectBuilder quantiles(Quantiles quantiles);1542637793;Set quantiles to restore the normalizer state if any.__@param quantiles the quantiles;public AutodetectBuilder quantiles(Quantiles quantiles) {_        this.quantiles = quantiles__        return this__    };set,quantiles,to,restore,the,normalizer,state,if,any,param,quantiles,the,quantiles;public,autodetect,builder,quantiles,quantiles,quantiles,this,quantiles,quantiles,return,this
AutodetectBuilder -> public AutodetectBuilder quantiles(Quantiles quantiles);1545310197;Set quantiles to restore the normalizer state if any.__@param quantiles the quantiles;public AutodetectBuilder quantiles(Quantiles quantiles) {_        this.quantiles = quantiles__        return this__    };set,quantiles,to,restore,the,normalizer,state,if,any,param,quantiles,the,quantiles;public,autodetect,builder,quantiles,quantiles,quantiles,this,quantiles,quantiles,return,this
AutodetectBuilder -> public void build() throws IOException;1524684173;Requests that the controller daemon start an autodetect process.;public void build() throws IOException {__        List<String> command = ProcessCtrl.buildAutodetectCommand(env, settings, job, logger)___        buildLimits(command)__        buildModelPlotConfig(command)___        buildQuantiles(command)__        buildFieldConfig(command)__        processPipes.addArgs(command)__        controller.startProcess(command)__    };requests,that,the,controller,daemon,start,an,autodetect,process;public,void,build,throws,ioexception,list,string,command,process,ctrl,build,autodetect,command,env,settings,job,logger,build,limits,command,build,model,plot,config,command,build,quantiles,command,build,field,config,command,process,pipes,add,args,command,controller,start,process,command
AutodetectBuilder -> public void build() throws IOException;1533921794;Requests that the controller daemon start an autodetect process.;public void build() throws IOException {__        List<String> command = buildAutodetectCommand()___        buildLimits(command)__        buildModelPlotConfig(command)___        buildQuantiles(command)__        buildFieldConfig(command)__        processPipes.addArgs(command)__        controller.startProcess(command)__    };requests,that,the,controller,daemon,start,an,autodetect,process;public,void,build,throws,ioexception,list,string,command,build,autodetect,command,build,limits,command,build,model,plot,config,command,build,quantiles,command,build,field,config,command,process,pipes,add,args,command,controller,start,process,command
AutodetectBuilder -> public void build() throws IOException;1534338685;Requests that the controller daemon start an autodetect process.;public void build() throws IOException {__        List<String> command = buildAutodetectCommand()___        buildLimits(command)__        buildModelPlotConfig(command)___        buildQuantiles(command)__        buildFieldConfig(command)__        processPipes.addArgs(command)__        controller.startProcess(command)__    };requests,that,the,controller,daemon,start,an,autodetect,process;public,void,build,throws,ioexception,list,string,command,build,autodetect,command,build,limits,command,build,model,plot,config,command,build,quantiles,command,build,field,config,command,process,pipes,add,args,command,controller,start,process,command
AutodetectBuilder -> public void build() throws IOException;1538067637;Requests that the controller daemon start an autodetect process.;public void build() throws IOException {__        List<String> command = buildAutodetectCommand()___        buildLimits(command)__        buildModelPlotConfig(command)___        buildQuantiles(command)__        buildFieldConfig(command)__        processPipes.addArgs(command)__        controller.startProcess(command)__    };requests,that,the,controller,daemon,start,an,autodetect,process;public,void,build,throws,ioexception,list,string,command,build,autodetect,command,build,limits,command,build,model,plot,config,command,build,quantiles,command,build,field,config,command,process,pipes,add,args,command,controller,start,process,command
AutodetectBuilder -> public void build() throws IOException;1540583181;Requests that the controller daemon start an autodetect process.;public void build() throws IOException {__        List<String> command = buildAutodetectCommand()___        buildLimits(command)__        buildModelPlotConfig(command)___        buildQuantiles(command)__        buildFieldConfig(command)__        processPipes.addArgs(command)__        controller.startProcess(command)__    };requests,that,the,controller,daemon,start,an,autodetect,process;public,void,build,throws,ioexception,list,string,command,build,autodetect,command,build,limits,command,build,model,plot,config,command,build,quantiles,command,build,field,config,command,process,pipes,add,args,command,controller,start,process,command
AutodetectBuilder -> public void build() throws IOException;1542637793;Requests that the controller daemon start an autodetect process.;public void build() throws IOException {__        List<String> command = buildAutodetectCommand()___        buildLimits(command)__        buildModelPlotConfig(command)___        buildQuantiles(command)__        buildFieldConfig(command)__        processPipes.addArgs(command)__        controller.startProcess(command)__    };requests,that,the,controller,daemon,start,an,autodetect,process;public,void,build,throws,ioexception,list,string,command,build,autodetect,command,build,limits,command,build,model,plot,config,command,build,quantiles,command,build,field,config,command,process,pipes,add,args,command,controller,start,process,command
AutodetectBuilder -> public void build() throws IOException;1545310197;Requests that the controller daemon start an autodetect process.;public void build() throws IOException {__        List<String> command = buildAutodetectCommand()___        buildLimits(command)__        buildModelPlotConfig(command)___        buildQuantiles(command)__        buildFieldConfig(command)__        processPipes.addArgs(command)__        controller.startProcess(command)__    };requests,that,the,controller,daemon,start,an,autodetect,process;public,void,build,throws,ioexception,list,string,command,build,autodetect,command,build,limits,command,build,model,plot,config,command,build,quantiles,command,build,field,config,command,process,pipes,add,args,command,controller,start,process,command
AutodetectBuilder -> List<String> buildAutodetectCommand();1533921794;Visible for testing;List<String> buildAutodetectCommand() {_        List<String> command = new ArrayList<>()__        command.add(AUTODETECT_PATH)___        command.add(JOB_ID_ARG + job.getId())___        AnalysisConfig analysisConfig = job.getAnalysisConfig()__        if (analysisConfig != null) {_            addIfNotNull(analysisConfig.getBucketSpan(), BUCKET_SPAN_ARG, command)__            addIfNotNull(analysisConfig.getLatency(), LATENCY_ARG, command)__            addIfNotNull(analysisConfig.getSummaryCountFieldName(),_                    SUMMARY_COUNT_FIELD_ARG, command)__            if (Boolean.TRUE.equals(analysisConfig.getOverlappingBuckets())) {_                Long window = analysisConfig.getResultFinalizationWindow()__                if (window == null) {_                    window = AnalysisConfig.DEFAULT_RESULT_FINALIZATION_WINDOW__                }_                command.add(RESULT_FINALIZATION_WINDOW_ARG + window)__            }_            if (Boolean.TRUE.equals(analysisConfig.getMultivariateByFields())) {_                command.add(MULTIVARIATE_BY_FIELDS_ARG)__            }__            if (analysisConfig.getUsePerPartitionNormalization()) {_                command.add(PER_PARTITION_NORMALIZATION)__            }_        }__        _        command.add(LENGTH_ENCODED_INPUT_ARG)___        _        command.add(maxAnomalyRecordsArg(settings))___        _        String timeFieldArg = TIME_FIELD_ARG + getTimeFieldOrDefault(job)__        command.add(timeFieldArg)___        int intervalStagger = calculateStaggeringInterval(job.getId())__        logger.debug("[{}] Periodic operations staggered by {} seconds", job.getId(), intervalStagger)___        _        _        if (DONT_PERSIST_MODEL_STATE_SETTING.get(settings)) {_            logger.info("[{}] Will not persist model state - {} setting was set", job.getId(), DONT_PERSIST_MODEL_STATE_SETTING)__        } else {_            _            long persistInterval = (job.getBackgroundPersistInterval() == null) ?_                    (DEFAULT_BASE_PERSIST_INTERVAL + intervalStagger) :_                    job.getBackgroundPersistInterval().getSeconds()__            command.add(PERSIST_INTERVAL_ARG + persistInterval)__        }__        int maxQuantileInterval = BASE_MAX_QUANTILE_INTERVAL + intervalStagger__        command.add(MAX_QUANTILE_INTERVAL_ARG + maxQuantileInterval)___        if (ProcessBuilderUtils.modelConfigFilePresent(env)) {_            String modelConfigFile = XPackPlugin.resolveConfigFile(env, ProcessBuilderUtils.ML_MODEL_CONF).toString()__            command.add(MODEL_CONFIG_ARG + modelConfigFile)__        }__        return command__    };visible,for,testing;list,string,build,autodetect,command,list,string,command,new,array,list,command,add,command,add,job,get,id,analysis,config,analysis,config,job,get,analysis,config,if,analysis,config,null,add,if,not,null,analysis,config,get,bucket,span,command,add,if,not,null,analysis,config,get,latency,command,add,if,not,null,analysis,config,get,summary,count,field,name,command,if,boolean,true,equals,analysis,config,get,overlapping,buckets,long,window,analysis,config,get,result,finalization,window,if,window,null,window,analysis,config,command,add,window,if,boolean,true,equals,analysis,config,get,multivariate,by,fields,command,add,if,analysis,config,get,use,per,partition,normalization,command,add,command,add,command,add,max,anomaly,records,arg,settings,string,time,field,arg,get,time,field,or,default,job,command,add,time,field,arg,int,interval,stagger,calculate,staggering,interval,job,get,id,logger,debug,periodic,operations,staggered,by,seconds,job,get,id,interval,stagger,if,get,settings,logger,info,will,not,persist,model,state,setting,was,set,job,get,id,else,long,persist,interval,job,get,background,persist,interval,null,interval,stagger,job,get,background,persist,interval,get,seconds,command,add,persist,interval,int,max,quantile,interval,interval,stagger,command,add,max,quantile,interval,if,process,builder,utils,model,config,file,present,env,string,model,config,file,xpack,plugin,resolve,config,file,env,process,builder,utils,to,string,command,add,model,config,file,return,command
AutodetectBuilder -> List<String> buildAutodetectCommand();1534338685;Visible for testing;List<String> buildAutodetectCommand() {_        List<String> command = new ArrayList<>()__        command.add(AUTODETECT_PATH)___        command.add(JOB_ID_ARG + job.getId())___        AnalysisConfig analysisConfig = job.getAnalysisConfig()__        if (analysisConfig != null) {_            addIfNotNull(analysisConfig.getBucketSpan(), BUCKET_SPAN_ARG, command)__            addIfNotNull(analysisConfig.getLatency(), LATENCY_ARG, command)__            addIfNotNull(analysisConfig.getSummaryCountFieldName(),_                    SUMMARY_COUNT_FIELD_ARG, command)__            if (Boolean.TRUE.equals(analysisConfig.getOverlappingBuckets())) {_                Long window = analysisConfig.getResultFinalizationWindow()__                if (window == null) {_                    window = AnalysisConfig.DEFAULT_RESULT_FINALIZATION_WINDOW__                }_                command.add(RESULT_FINALIZATION_WINDOW_ARG + window)__            }_            if (Boolean.TRUE.equals(analysisConfig.getMultivariateByFields())) {_                command.add(MULTIVARIATE_BY_FIELDS_ARG)__            }_        }__        _        command.add(LENGTH_ENCODED_INPUT_ARG)___        _        command.add(maxAnomalyRecordsArg(settings))___        _        String timeFieldArg = TIME_FIELD_ARG + getTimeFieldOrDefault(job)__        command.add(timeFieldArg)___        int intervalStagger = calculateStaggeringInterval(job.getId())__        logger.debug("[{}] Periodic operations staggered by {} seconds", job.getId(), intervalStagger)___        _        _        if (DONT_PERSIST_MODEL_STATE_SETTING.get(settings)) {_            logger.info("[{}] Will not persist model state - {} setting was set", job.getId(), DONT_PERSIST_MODEL_STATE_SETTING)__        } else {_            _            long persistInterval = (job.getBackgroundPersistInterval() == null) ?_                    (DEFAULT_BASE_PERSIST_INTERVAL + intervalStagger) :_                    job.getBackgroundPersistInterval().getSeconds()__            command.add(PERSIST_INTERVAL_ARG + persistInterval)__        }__        int maxQuantileInterval = BASE_MAX_QUANTILE_INTERVAL + intervalStagger__        command.add(MAX_QUANTILE_INTERVAL_ARG + maxQuantileInterval)___        if (ProcessBuilderUtils.modelConfigFilePresent(env)) {_            String modelConfigFile = XPackPlugin.resolveConfigFile(env, ProcessBuilderUtils.ML_MODEL_CONF).toString()__            command.add(MODEL_CONFIG_ARG + modelConfigFile)__        }__        return command__    };visible,for,testing;list,string,build,autodetect,command,list,string,command,new,array,list,command,add,command,add,job,get,id,analysis,config,analysis,config,job,get,analysis,config,if,analysis,config,null,add,if,not,null,analysis,config,get,bucket,span,command,add,if,not,null,analysis,config,get,latency,command,add,if,not,null,analysis,config,get,summary,count,field,name,command,if,boolean,true,equals,analysis,config,get,overlapping,buckets,long,window,analysis,config,get,result,finalization,window,if,window,null,window,analysis,config,command,add,window,if,boolean,true,equals,analysis,config,get,multivariate,by,fields,command,add,command,add,command,add,max,anomaly,records,arg,settings,string,time,field,arg,get,time,field,or,default,job,command,add,time,field,arg,int,interval,stagger,calculate,staggering,interval,job,get,id,logger,debug,periodic,operations,staggered,by,seconds,job,get,id,interval,stagger,if,get,settings,logger,info,will,not,persist,model,state,setting,was,set,job,get,id,else,long,persist,interval,job,get,background,persist,interval,null,interval,stagger,job,get,background,persist,interval,get,seconds,command,add,persist,interval,int,max,quantile,interval,interval,stagger,command,add,max,quantile,interval,if,process,builder,utils,model,config,file,present,env,string,model,config,file,xpack,plugin,resolve,config,file,env,process,builder,utils,to,string,command,add,model,config,file,return,command
AutodetectBuilder -> List<String> buildAutodetectCommand();1538067637;Visible for testing;List<String> buildAutodetectCommand() {_        List<String> command = new ArrayList<>()__        command.add(AUTODETECT_PATH)___        command.add(JOB_ID_ARG + job.getId())___        AnalysisConfig analysisConfig = job.getAnalysisConfig()__        if (analysisConfig != null) {_            addIfNotNull(analysisConfig.getBucketSpan(), BUCKET_SPAN_ARG, command)__            addIfNotNull(analysisConfig.getLatency(), LATENCY_ARG, command)__            addIfNotNull(analysisConfig.getSummaryCountFieldName(),_                    SUMMARY_COUNT_FIELD_ARG, command)__            if (Boolean.TRUE.equals(analysisConfig.getOverlappingBuckets())) {_                Long window = analysisConfig.getResultFinalizationWindow()__                if (window == null) {_                    window = AnalysisConfig.DEFAULT_RESULT_FINALIZATION_WINDOW__                }_                command.add(RESULT_FINALIZATION_WINDOW_ARG + window)__            }_            if (Boolean.TRUE.equals(analysisConfig.getMultivariateByFields())) {_                command.add(MULTIVARIATE_BY_FIELDS_ARG)__            }_        }__        _        command.add(LENGTH_ENCODED_INPUT_ARG)___        _        command.add(maxAnomalyRecordsArg(settings))___        _        String timeFieldArg = TIME_FIELD_ARG + getTimeFieldOrDefault(job)__        command.add(timeFieldArg)___        int intervalStagger = calculateStaggeringInterval(job.getId())__        logger.debug("[{}] Periodic operations staggered by {} seconds", job.getId(), intervalStagger)___        _        _        if (DONT_PERSIST_MODEL_STATE_SETTING.get(settings)) {_            logger.info("[{}] Will not persist model state - {} setting was set", job.getId(), DONT_PERSIST_MODEL_STATE_SETTING)__        } else {_            _            long persistInterval = (job.getBackgroundPersistInterval() == null) ?_                    (DEFAULT_BASE_PERSIST_INTERVAL + intervalStagger) :_                    job.getBackgroundPersistInterval().getSeconds()__            command.add(PERSIST_INTERVAL_ARG + persistInterval)__        }__        int maxQuantileInterval = BASE_MAX_QUANTILE_INTERVAL + intervalStagger__        command.add(MAX_QUANTILE_INTERVAL_ARG + maxQuantileInterval)___        if (ProcessBuilderUtils.modelConfigFilePresent(env)) {_            String modelConfigFile = XPackPlugin.resolveConfigFile(env, ProcessBuilderUtils.ML_MODEL_CONF).toString()__            command.add(MODEL_CONFIG_ARG + modelConfigFile)__        }__        return command__    };visible,for,testing;list,string,build,autodetect,command,list,string,command,new,array,list,command,add,command,add,job,get,id,analysis,config,analysis,config,job,get,analysis,config,if,analysis,config,null,add,if,not,null,analysis,config,get,bucket,span,command,add,if,not,null,analysis,config,get,latency,command,add,if,not,null,analysis,config,get,summary,count,field,name,command,if,boolean,true,equals,analysis,config,get,overlapping,buckets,long,window,analysis,config,get,result,finalization,window,if,window,null,window,analysis,config,command,add,window,if,boolean,true,equals,analysis,config,get,multivariate,by,fields,command,add,command,add,command,add,max,anomaly,records,arg,settings,string,time,field,arg,get,time,field,or,default,job,command,add,time,field,arg,int,interval,stagger,calculate,staggering,interval,job,get,id,logger,debug,periodic,operations,staggered,by,seconds,job,get,id,interval,stagger,if,get,settings,logger,info,will,not,persist,model,state,setting,was,set,job,get,id,else,long,persist,interval,job,get,background,persist,interval,null,interval,stagger,job,get,background,persist,interval,get,seconds,command,add,persist,interval,int,max,quantile,interval,interval,stagger,command,add,max,quantile,interval,if,process,builder,utils,model,config,file,present,env,string,model,config,file,xpack,plugin,resolve,config,file,env,process,builder,utils,to,string,command,add,model,config,file,return,command
AutodetectBuilder -> List<String> buildAutodetectCommand();1540583181;Visible for testing;List<String> buildAutodetectCommand() {_        List<String> command = new ArrayList<>()__        command.add(AUTODETECT_PATH)___        command.add(JOB_ID_ARG + job.getId())___        AnalysisConfig analysisConfig = job.getAnalysisConfig()__        if (analysisConfig != null) {_            addIfNotNull(analysisConfig.getBucketSpan(), BUCKET_SPAN_ARG, command)__            addIfNotNull(analysisConfig.getLatency(), LATENCY_ARG, command)__            addIfNotNull(analysisConfig.getSummaryCountFieldName(),_                    SUMMARY_COUNT_FIELD_ARG, command)__            if (Boolean.TRUE.equals(analysisConfig.getOverlappingBuckets())) {_                Long window = analysisConfig.getResultFinalizationWindow()__                if (window == null) {_                    window = AnalysisConfig.DEFAULT_RESULT_FINALIZATION_WINDOW__                }_                command.add(RESULT_FINALIZATION_WINDOW_ARG + window)__            }_            if (Boolean.TRUE.equals(analysisConfig.getMultivariateByFields())) {_                command.add(MULTIVARIATE_BY_FIELDS_ARG)__            }_        }__        _        command.add(LENGTH_ENCODED_INPUT_ARG)___        _        command.add(maxAnomalyRecordsArg(settings))___        _        String timeFieldArg = TIME_FIELD_ARG + getTimeFieldOrDefault(job)__        command.add(timeFieldArg)___        int intervalStagger = calculateStaggeringInterval(job.getId())__        logger.debug("[{}] Periodic operations staggered by {} seconds", job.getId(), intervalStagger)___        _        _        if (DONT_PERSIST_MODEL_STATE_SETTING.get(settings)) {_            logger.info("[{}] Will not persist model state - {} setting was set", job.getId(), DONT_PERSIST_MODEL_STATE_SETTING)__        } else {_            _            long persistInterval = (job.getBackgroundPersistInterval() == null) ?_                    (DEFAULT_BASE_PERSIST_INTERVAL + intervalStagger) :_                    job.getBackgroundPersistInterval().getSeconds()__            command.add(PERSIST_INTERVAL_ARG + persistInterval)__        }__        int maxQuantileInterval = BASE_MAX_QUANTILE_INTERVAL + intervalStagger__        command.add(MAX_QUANTILE_INTERVAL_ARG + maxQuantileInterval)___        if (ProcessBuilderUtils.modelConfigFilePresent(env)) {_            String modelConfigFile = XPackPlugin.resolveConfigFile(env, ProcessBuilderUtils.ML_MODEL_CONF).toString()__            command.add(MODEL_CONFIG_ARG + modelConfigFile)__        }__        return command__    };visible,for,testing;list,string,build,autodetect,command,list,string,command,new,array,list,command,add,command,add,job,get,id,analysis,config,analysis,config,job,get,analysis,config,if,analysis,config,null,add,if,not,null,analysis,config,get,bucket,span,command,add,if,not,null,analysis,config,get,latency,command,add,if,not,null,analysis,config,get,summary,count,field,name,command,if,boolean,true,equals,analysis,config,get,overlapping,buckets,long,window,analysis,config,get,result,finalization,window,if,window,null,window,analysis,config,command,add,window,if,boolean,true,equals,analysis,config,get,multivariate,by,fields,command,add,command,add,command,add,max,anomaly,records,arg,settings,string,time,field,arg,get,time,field,or,default,job,command,add,time,field,arg,int,interval,stagger,calculate,staggering,interval,job,get,id,logger,debug,periodic,operations,staggered,by,seconds,job,get,id,interval,stagger,if,get,settings,logger,info,will,not,persist,model,state,setting,was,set,job,get,id,else,long,persist,interval,job,get,background,persist,interval,null,interval,stagger,job,get,background,persist,interval,get,seconds,command,add,persist,interval,int,max,quantile,interval,interval,stagger,command,add,max,quantile,interval,if,process,builder,utils,model,config,file,present,env,string,model,config,file,xpack,plugin,resolve,config,file,env,process,builder,utils,to,string,command,add,model,config,file,return,command
AutodetectBuilder -> List<String> buildAutodetectCommand();1542637793;Visible for testing;List<String> buildAutodetectCommand() {_        List<String> command = new ArrayList<>()__        command.add(AUTODETECT_PATH)___        command.add(JOB_ID_ARG + job.getId())___        AnalysisConfig analysisConfig = job.getAnalysisConfig()__        if (analysisConfig != null) {_            addIfNotNull(analysisConfig.getBucketSpan(), BUCKET_SPAN_ARG, command)__            addIfNotNull(analysisConfig.getLatency(), LATENCY_ARG, command)__            addIfNotNull(analysisConfig.getSummaryCountFieldName(), SUMMARY_COUNT_FIELD_ARG, command)__            if (Boolean.TRUE.equals(analysisConfig.getMultivariateByFields())) {_                command.add(MULTIVARIATE_BY_FIELDS_ARG)__            }_        }__        _        command.add(LENGTH_ENCODED_INPUT_ARG)___        _        command.add(maxAnomalyRecordsArg(settings))___        _        String timeFieldArg = TIME_FIELD_ARG + getTimeFieldOrDefault(job)__        command.add(timeFieldArg)___        int intervalStagger = calculateStaggeringInterval(job.getId())__        logger.debug("[{}] Periodic operations staggered by {} seconds", job.getId(), intervalStagger)___        _        _        if (DONT_PERSIST_MODEL_STATE_SETTING.get(settings)) {_            logger.info("[{}] Will not persist model state - {} setting was set", job.getId(), DONT_PERSIST_MODEL_STATE_SETTING)__        } else {_            _            long persistInterval = (job.getBackgroundPersistInterval() == null) ?_                    (DEFAULT_BASE_PERSIST_INTERVAL + intervalStagger) :_                    job.getBackgroundPersistInterval().getSeconds()__            command.add(PERSIST_INTERVAL_ARG + persistInterval)__        }__        int maxQuantileInterval = BASE_MAX_QUANTILE_INTERVAL + intervalStagger__        command.add(MAX_QUANTILE_INTERVAL_ARG + maxQuantileInterval)___        if (ProcessBuilderUtils.modelConfigFilePresent(env)) {_            String modelConfigFile = XPackPlugin.resolveConfigFile(env, ProcessBuilderUtils.ML_MODEL_CONF).toString()__            command.add(MODEL_CONFIG_ARG + modelConfigFile)__        }__        return command__    };visible,for,testing;list,string,build,autodetect,command,list,string,command,new,array,list,command,add,command,add,job,get,id,analysis,config,analysis,config,job,get,analysis,config,if,analysis,config,null,add,if,not,null,analysis,config,get,bucket,span,command,add,if,not,null,analysis,config,get,latency,command,add,if,not,null,analysis,config,get,summary,count,field,name,command,if,boolean,true,equals,analysis,config,get,multivariate,by,fields,command,add,command,add,command,add,max,anomaly,records,arg,settings,string,time,field,arg,get,time,field,or,default,job,command,add,time,field,arg,int,interval,stagger,calculate,staggering,interval,job,get,id,logger,debug,periodic,operations,staggered,by,seconds,job,get,id,interval,stagger,if,get,settings,logger,info,will,not,persist,model,state,setting,was,set,job,get,id,else,long,persist,interval,job,get,background,persist,interval,null,interval,stagger,job,get,background,persist,interval,get,seconds,command,add,persist,interval,int,max,quantile,interval,interval,stagger,command,add,max,quantile,interval,if,process,builder,utils,model,config,file,present,env,string,model,config,file,xpack,plugin,resolve,config,file,env,process,builder,utils,to,string,command,add,model,config,file,return,command
AutodetectBuilder -> List<String> buildAutodetectCommand();1545310197;Visible for testing;List<String> buildAutodetectCommand() {_        List<String> command = new ArrayList<>()__        command.add(AUTODETECT_PATH)___        command.add(JOB_ID_ARG + job.getId())___        AnalysisConfig analysisConfig = job.getAnalysisConfig()__        if (analysisConfig != null) {_            addIfNotNull(analysisConfig.getBucketSpan(), BUCKET_SPAN_ARG, command)__            addIfNotNull(analysisConfig.getLatency(), LATENCY_ARG, command)__            addIfNotNull(analysisConfig.getSummaryCountFieldName(), SUMMARY_COUNT_FIELD_ARG, command)__            if (Boolean.TRUE.equals(analysisConfig.getMultivariateByFields())) {_                command.add(MULTIVARIATE_BY_FIELDS_ARG)__            }_        }__        _        command.add(LENGTH_ENCODED_INPUT_ARG)___        _        command.add(maxAnomalyRecordsArg(settings))___        _        String timeFieldArg = TIME_FIELD_ARG + getTimeFieldOrDefault(job)__        command.add(timeFieldArg)___        int intervalStagger = calculateStaggeringInterval(job.getId())__        logger.debug("[{}] Periodic operations staggered by {} seconds", job.getId(), intervalStagger)___        _        _        if (DONT_PERSIST_MODEL_STATE_SETTING.get(settings)) {_            logger.info("[{}] Will not persist model state - {} setting was set", job.getId(), DONT_PERSIST_MODEL_STATE_SETTING)__        } else {_            _            long persistInterval = (job.getBackgroundPersistInterval() == null) ?_                    (DEFAULT_BASE_PERSIST_INTERVAL + intervalStagger) :_                    job.getBackgroundPersistInterval().getSeconds()__            command.add(PERSIST_INTERVAL_ARG + persistInterval)__        }__        int maxQuantileInterval = BASE_MAX_QUANTILE_INTERVAL + intervalStagger__        command.add(MAX_QUANTILE_INTERVAL_ARG + maxQuantileInterval)___        if (ProcessBuilderUtils.modelConfigFilePresent(env)) {_            String modelConfigFile = XPackPlugin.resolveConfigFile(env, ProcessBuilderUtils.ML_MODEL_CONF).toString()__            command.add(MODEL_CONFIG_ARG + modelConfigFile)__        }__        return command__    };visible,for,testing;list,string,build,autodetect,command,list,string,command,new,array,list,command,add,command,add,job,get,id,analysis,config,analysis,config,job,get,analysis,config,if,analysis,config,null,add,if,not,null,analysis,config,get,bucket,span,command,add,if,not,null,analysis,config,get,latency,command,add,if,not,null,analysis,config,get,summary,count,field,name,command,if,boolean,true,equals,analysis,config,get,multivariate,by,fields,command,add,command,add,command,add,max,anomaly,records,arg,settings,string,time,field,arg,get,time,field,or,default,job,command,add,time,field,arg,int,interval,stagger,calculate,staggering,interval,job,get,id,logger,debug,periodic,operations,staggered,by,seconds,job,get,id,interval,stagger,if,get,settings,logger,info,will,not,persist,model,state,setting,was,set,job,get,id,else,long,persist,interval,job,get,background,persist,interval,null,interval,stagger,job,get,background,persist,interval,get,seconds,command,add,persist,interval,int,max,quantile,interval,interval,stagger,command,add,max,quantile,interval,if,process,builder,utils,model,config,file,present,env,string,model,config,file,xpack,plugin,resolve,config,file,env,process,builder,utils,to,string,command,add,model,config,file,return,command
AutodetectBuilder -> public static Path writeNormalizerInitState(String jobId, String state, Environment env)             throws IOException;1533921794;Write the normalizer init state to file.;public static Path writeNormalizerInitState(String jobId, String state, Environment env)_            throws IOException {_        _        _        _        Path stateFile = Files.createTempFile(env.tmpFile(), jobId + "_quantiles_" + Thread.currentThread().getId(),_                QUANTILES_FILE_EXTENSION)___        try (BufferedWriter osw = Files.newBufferedWriter(stateFile, StandardCharsets.UTF_8)) {_            osw.write(state)__        }__        return stateFile__    };write,the,normalizer,init,state,to,file;public,static,path,write,normalizer,init,state,string,job,id,string,state,environment,env,throws,ioexception,path,state,file,files,create,temp,file,env,tmp,file,job,id,thread,current,thread,get,id,try,buffered,writer,osw,files,new,buffered,writer,state,file,standard,charsets,osw,write,state,return,state,file
AutodetectBuilder -> public static Path writeNormalizerInitState(String jobId, String state, Environment env)             throws IOException;1534338685;Write the normalizer init state to file.;public static Path writeNormalizerInitState(String jobId, String state, Environment env)_            throws IOException {_        _        _        _        Path stateFile = Files.createTempFile(env.tmpFile(), jobId + "_quantiles_" + Thread.currentThread().getId(),_                QUANTILES_FILE_EXTENSION)___        try (BufferedWriter osw = Files.newBufferedWriter(stateFile, StandardCharsets.UTF_8)) {_            osw.write(state)__        }__        return stateFile__    };write,the,normalizer,init,state,to,file;public,static,path,write,normalizer,init,state,string,job,id,string,state,environment,env,throws,ioexception,path,state,file,files,create,temp,file,env,tmp,file,job,id,thread,current,thread,get,id,try,buffered,writer,osw,files,new,buffered,writer,state,file,standard,charsets,osw,write,state,return,state,file
AutodetectBuilder -> public static Path writeNormalizerInitState(String jobId, String state, Environment env)             throws IOException;1538067637;Write the normalizer init state to file.;public static Path writeNormalizerInitState(String jobId, String state, Environment env)_            throws IOException {_        _        _        _        Path stateFile = Files.createTempFile(env.tmpFile(), jobId + "_quantiles_" + Thread.currentThread().getId(),_                QUANTILES_FILE_EXTENSION)___        try (BufferedWriter osw = Files.newBufferedWriter(stateFile, StandardCharsets.UTF_8)) {_            osw.write(state)__        }__        return stateFile__    };write,the,normalizer,init,state,to,file;public,static,path,write,normalizer,init,state,string,job,id,string,state,environment,env,throws,ioexception,path,state,file,files,create,temp,file,env,tmp,file,job,id,thread,current,thread,get,id,try,buffered,writer,osw,files,new,buffered,writer,state,file,standard,charsets,osw,write,state,return,state,file
AutodetectBuilder -> public static Path writeNormalizerInitState(String jobId, String state, Environment env)             throws IOException;1540583181;Write the normalizer init state to file.;public static Path writeNormalizerInitState(String jobId, String state, Environment env)_            throws IOException {_        _        _        _        Path stateFile = Files.createTempFile(env.tmpFile(), jobId + "_quantiles_" + Thread.currentThread().getId(),_                QUANTILES_FILE_EXTENSION)___        try (BufferedWriter osw = Files.newBufferedWriter(stateFile, StandardCharsets.UTF_8)) {_            osw.write(state)__        }__        return stateFile__    };write,the,normalizer,init,state,to,file;public,static,path,write,normalizer,init,state,string,job,id,string,state,environment,env,throws,ioexception,path,state,file,files,create,temp,file,env,tmp,file,job,id,thread,current,thread,get,id,try,buffered,writer,osw,files,new,buffered,writer,state,file,standard,charsets,osw,write,state,return,state,file
AutodetectBuilder -> public static Path writeNormalizerInitState(String jobId, String state, Environment env)             throws IOException;1542637793;Write the normalizer init state to file.;public static Path writeNormalizerInitState(String jobId, String state, Environment env)_            throws IOException {_        _        _        _        Path stateFile = Files.createTempFile(env.tmpFile(), jobId + "_quantiles_" + Thread.currentThread().getId(),_                QUANTILES_FILE_EXTENSION)___        try (BufferedWriter osw = Files.newBufferedWriter(stateFile, StandardCharsets.UTF_8)) {_            osw.write(state)__        }__        return stateFile__    };write,the,normalizer,init,state,to,file;public,static,path,write,normalizer,init,state,string,job,id,string,state,environment,env,throws,ioexception,path,state,file,files,create,temp,file,env,tmp,file,job,id,thread,current,thread,get,id,try,buffered,writer,osw,files,new,buffered,writer,state,file,standard,charsets,osw,write,state,return,state,file
AutodetectBuilder -> public static Path writeNormalizerInitState(String jobId, String state, Environment env)             throws IOException;1545310197;Write the normalizer init state to file.;public static Path writeNormalizerInitState(String jobId, String state, Environment env)_            throws IOException {_        _        _        _        Path stateFile = Files.createTempFile(env.tmpFile(), jobId + "_quantiles_" + Thread.currentThread().getId(),_                QUANTILES_FILE_EXTENSION)___        try (BufferedWriter osw = Files.newBufferedWriter(stateFile, StandardCharsets.UTF_8)) {_            osw.write(state)__        }__        return stateFile__    };write,the,normalizer,init,state,to,file;public,static,path,write,normalizer,init,state,string,job,id,string,state,environment,env,throws,ioexception,path,state,file,files,create,temp,file,env,tmp,file,job,id,thread,current,thread,get,id,try,buffered,writer,osw,files,new,buffered,writer,state,file,standard,charsets,osw,write,state,return,state,file
AutodetectBuilder -> private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException;1524684173;Write the Ml autodetect model options to <code>emptyConfFile</code>.;private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException {__        try (OutputStreamWriter osw = new OutputStreamWriter(Files.newOutputStream(emptyConfFile), StandardCharsets.UTF_8)) {_            new AnalysisLimitsWriter(options, osw).write()__        }_    };write,the,ml,autodetect,model,options,to,code,empty,conf,file,code;private,static,void,write,limits,analysis,limits,options,path,empty,conf,file,throws,ioexception,try,output,stream,writer,osw,new,output,stream,writer,files,new,output,stream,empty,conf,file,standard,charsets,new,analysis,limits,writer,options,osw,write
AutodetectBuilder -> private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException;1533921794;Write the Ml autodetect model options to <code>emptyConfFile</code>.;private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException {__        try (OutputStreamWriter osw = new OutputStreamWriter(Files.newOutputStream(emptyConfFile), StandardCharsets.UTF_8)) {_            new AnalysisLimitsWriter(options, osw).write()__        }_    };write,the,ml,autodetect,model,options,to,code,empty,conf,file,code;private,static,void,write,limits,analysis,limits,options,path,empty,conf,file,throws,ioexception,try,output,stream,writer,osw,new,output,stream,writer,files,new,output,stream,empty,conf,file,standard,charsets,new,analysis,limits,writer,options,osw,write
AutodetectBuilder -> private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException;1534338685;Write the Ml autodetect model options to <code>emptyConfFile</code>.;private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException {__        try (OutputStreamWriter osw = new OutputStreamWriter(Files.newOutputStream(emptyConfFile), StandardCharsets.UTF_8)) {_            new AnalysisLimitsWriter(options, osw).write()__        }_    };write,the,ml,autodetect,model,options,to,code,empty,conf,file,code;private,static,void,write,limits,analysis,limits,options,path,empty,conf,file,throws,ioexception,try,output,stream,writer,osw,new,output,stream,writer,files,new,output,stream,empty,conf,file,standard,charsets,new,analysis,limits,writer,options,osw,write
AutodetectBuilder -> private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException;1538067637;Write the Ml autodetect model options to <code>emptyConfFile</code>.;private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException {__        try (OutputStreamWriter osw = new OutputStreamWriter(Files.newOutputStream(emptyConfFile), StandardCharsets.UTF_8)) {_            new AnalysisLimitsWriter(options, osw).write()__        }_    };write,the,ml,autodetect,model,options,to,code,empty,conf,file,code;private,static,void,write,limits,analysis,limits,options,path,empty,conf,file,throws,ioexception,try,output,stream,writer,osw,new,output,stream,writer,files,new,output,stream,empty,conf,file,standard,charsets,new,analysis,limits,writer,options,osw,write
AutodetectBuilder -> private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException;1540583181;Write the Ml autodetect model options to <code>emptyConfFile</code>.;private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException {__        try (OutputStreamWriter osw = new OutputStreamWriter(Files.newOutputStream(emptyConfFile), StandardCharsets.UTF_8)) {_            new AnalysisLimitsWriter(options, osw).write()__        }_    };write,the,ml,autodetect,model,options,to,code,empty,conf,file,code;private,static,void,write,limits,analysis,limits,options,path,empty,conf,file,throws,ioexception,try,output,stream,writer,osw,new,output,stream,writer,files,new,output,stream,empty,conf,file,standard,charsets,new,analysis,limits,writer,options,osw,write
AutodetectBuilder -> private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException;1542637793;Write the Ml autodetect model options to <code>emptyConfFile</code>.;private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException {__        try (OutputStreamWriter osw = new OutputStreamWriter(Files.newOutputStream(emptyConfFile), StandardCharsets.UTF_8)) {_            new AnalysisLimitsWriter(options, osw).write()__        }_    };write,the,ml,autodetect,model,options,to,code,empty,conf,file,code;private,static,void,write,limits,analysis,limits,options,path,empty,conf,file,throws,ioexception,try,output,stream,writer,osw,new,output,stream,writer,files,new,output,stream,empty,conf,file,standard,charsets,new,analysis,limits,writer,options,osw,write
AutodetectBuilder -> private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException;1545310197;Write the Ml autodetect model options to <code>emptyConfFile</code>.;private static void writeLimits(AnalysisLimits options, Path emptyConfFile) throws IOException {__        try (OutputStreamWriter osw = new OutputStreamWriter(Files.newOutputStream(emptyConfFile), StandardCharsets.UTF_8)) {_            new AnalysisLimitsWriter(options, osw).write()__        }_    };write,the,ml,autodetect,model,options,to,code,empty,conf,file,code;private,static,void,write,limits,analysis,limits,options,path,empty,conf,file,throws,ioexception,try,output,stream,writer,osw,new,output,stream,writer,files,new,output,stream,empty,conf,file,standard,charsets,new,analysis,limits,writer,options,osw,write
