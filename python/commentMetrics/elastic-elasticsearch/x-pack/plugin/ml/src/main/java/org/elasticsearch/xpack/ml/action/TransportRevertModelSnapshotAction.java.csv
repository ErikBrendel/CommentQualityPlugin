commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected RevertModelSnapshotAction.Response newResponse() {     return new RevertModelSnapshotAction.Response(). }
false;protected;3;44;;@Override protected void masterOperation(RevertModelSnapshotAction.Request request, ClusterState state, ActionListener<RevertModelSnapshotAction.Response> listener) {     if (migrationEligibilityCheck.jobIsEligibleForMigration(request.getJobId(), state)) {         listener.onFailure(ExceptionsHelper.configHasNotBeenMigrated("revert model snapshot", request.getJobId())).         return.     }     logger.debug("Received request to revert to snapshot id '{}' for job '{}', deleting intervening results: {}", request.getSnapshotId(), request.getJobId(), request.getDeleteInterveningResults()).     // 3. Revert the state     ActionListener<Boolean> jobExistsListener = ActionListener.wrap(exists -> {         PersistentTasksCustomMetaData tasks = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE).         JobState jobState = MlTasks.getJobState(request.getJobId(), tasks).         if (jobState.equals(JobState.CLOSED) == false) {             throw ExceptionsHelper.conflictStatusException(Messages.getMessage(Messages.REST_JOB_NOT_CLOSED_REVERT)).         }         getModelSnapshot(request, jobResultsProvider, modelSnapshot -> {             ActionListener<RevertModelSnapshotAction.Response> wrappedListener = listener.             if (request.getDeleteInterveningResults()) {                 wrappedListener = wrapDeleteOldDataListener(wrappedListener, modelSnapshot, request.getJobId()).                 wrappedListener = wrapRevertDataCountsListener(wrappedListener, modelSnapshot, request.getJobId()).             }             jobManager.revertSnapshot(request, wrappedListener, modelSnapshot).         }, listener::onFailure).     }, listener::onFailure).     // 2. Verify the job exists     ActionListener<Boolean> createStateIndexListener = ActionListener.wrap(r -> jobManager.jobExists(request.getJobId(), jobExistsListener), listener::onFailure).     // 1. Verify/Create the state index and its alias exists     AnomalyDetectorsIndex.createStateIndexAndAliasIfNecessary(client, state, createStateIndexListener). }
false;private;4;12;;private void getModelSnapshot(RevertModelSnapshotAction.Request request, JobResultsProvider provider, Consumer<ModelSnapshot> handler, Consumer<Exception> errorHandler) {     logger.info("Reverting to snapshot '" + request.getSnapshotId() + "'").     provider.getModelSnapshot(request.getJobId(), request.getSnapshotId(), modelSnapshot -> {         if (modelSnapshot == null) {             throw new ResourceNotFoundException(Messages.getMessage(Messages.REST_NO_SUCH_MODEL_SNAPSHOT, request.getSnapshotId(), request.getJobId())).         }         handler.accept(modelSnapshot.result).     }, errorHandler). }
false;public;1;4;;@Override public void onResponse(Boolean success) {     listener.onResponse(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;private;3;28;;private ActionListener<RevertModelSnapshotAction.Response> wrapDeleteOldDataListener(ActionListener<RevertModelSnapshotAction.Response> listener, ModelSnapshot modelSnapshot, String jobId) {     // acknowledged responses     return ActionListener.wrap(response -> {         Date deleteAfter = modelSnapshot.getLatestResultTimeStamp().         logger.debug("Removing intervening records: last record: " + deleteAfter + ", last result: " + modelSnapshot.getLatestResultTimeStamp()).         logger.info("Deleting results after '" + deleteAfter + "'").         JobDataDeleter dataDeleter = new JobDataDeleter(client, jobId).         dataDeleter.deleteResultsFromTime(deleteAfter.getTime() + 1, new ActionListener<Boolean>() {              @Override             public void onResponse(Boolean success) {                 listener.onResponse(response).             }              @Override             public void onFailure(Exception e) {                 listener.onFailure(e).             }         }).     }, listener::onFailure). }
false;public;1;4;;@Override public void onResponse(Boolean aBoolean) {     listener.onResponse(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;private;3;22;;private ActionListener<RevertModelSnapshotAction.Response> wrapRevertDataCountsListener(ActionListener<RevertModelSnapshotAction.Response> listener, ModelSnapshot modelSnapshot, String jobId) {     return ActionListener.wrap(response -> {         jobResultsProvider.dataCounts(jobId, counts -> {             counts.setLatestRecordTimeStamp(modelSnapshot.getLatestRecordTimeStamp()).             jobDataCountsPersister.persistDataCounts(jobId, counts, new ActionListener<Boolean>() {                  @Override                 public void onResponse(Boolean aBoolean) {                     listener.onResponse(response).                 }                  @Override                 public void onFailure(Exception e) {                     listener.onFailure(e).                 }             }).         }, listener::onFailure).     }, listener::onFailure). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(RevertModelSnapshotAction.Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
