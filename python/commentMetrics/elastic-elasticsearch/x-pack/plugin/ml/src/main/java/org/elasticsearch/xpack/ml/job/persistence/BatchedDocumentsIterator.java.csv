commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns {@code true} if the iteration has more elements.  * (In other words, returns {@code true} if {@link #next} would  * return an element rather than throwing an exception.)  *  * @return {@code true} if the iteration has more elements  */ ;/**  * Returns {@code true} if the iteration has more elements.  * (In other words, returns {@code true} if {@link #next} would  * return an element rather than throwing an exception.)  *  * @return {@code true} if the iteration has more elements  */ public boolean hasNext() {     return !isScrollInitialised || count != totalHits. }
true;public;0;15;/**  * The first time next() is called, the search will be performed and the first  * batch will be returned. Any subsequent call will return the following batches.  * <p>  * Note that in some implementations it is possible that when there are no  * results at all, the first time this method is called an empty {@code Deque} is returned.  *  * @return a {@code Deque} with the next batch of documents  * @throws NoSuchElementException if the iteration has no more elements  */ ;/**  * The first time next() is called, the search will be performed and the first  * batch will be returned. Any subsequent call will return the following batches.  * <p>  * Note that in some implementations it is possible that when there are no  * results at all, the first time this method is called an empty {@code Deque} is returned.  *  * @return a {@code Deque} with the next batch of documents  * @throws NoSuchElementException if the iteration has no more elements  */ public Deque<T> next() {     if (!hasNext()) {         throw new NoSuchElementException().     }     SearchResponse searchResponse.     if (scrollId == null) {         searchResponse = initScroll().     } else {         SearchScrollRequest searchScrollRequest = new SearchScrollRequest(scrollId).scroll(CONTEXT_ALIVE_DURATION).         searchResponse = client.searchScroll(searchScrollRequest).actionGet().     }     scrollId = searchResponse.getScrollId().     return mapHits(searchResponse). }
false;private;0;20;;private SearchResponse initScroll() {     LOGGER.trace("ES API CALL: search index {}", index).     isScrollInitialised = true.     SearchRequest searchRequest = new SearchRequest(index).     searchRequest.indicesOptions(MlIndicesUtils.addIgnoreUnavailable(SearchRequest.DEFAULT_INDICES_OPTIONS)).     searchRequest.scroll(CONTEXT_ALIVE_DURATION).     searchRequest.source(new SearchSourceBuilder().size(BATCH_SIZE).query(getQuery()).fetchSource(shouldFetchSource()).trackTotalHits(true).sort(SortBuilders.fieldSort(ElasticsearchMappings.ES_DOC))).     SearchResponse searchResponse = client.search(searchRequest).actionGet().     totalHits = searchResponse.getHits().getTotalHits().value.     scrollId = searchResponse.getScrollId().     return searchResponse. }
false;private;1;17;;private Deque<T> mapHits(SearchResponse searchResponse) {     Deque<T> results = new ArrayDeque<>().     SearchHit[] hits = searchResponse.getHits().getHits().     for (SearchHit hit : hits) {         T mapped = map(hit).         if (mapped != null) {             results.add(mapped).         }     }     count += hits.length.     if (!hasNext() && scrollId != null) {         client.prepareClearScroll().setScrollIds(Collections.singletonList(scrollId)).get().     }     return results. }
true;protected;0;3;/**  * Should fetch source? Defaults to {@code true}  * @return whether the source should be fetched  */ ;/**  * Should fetch source? Defaults to {@code true}  * @return whether the source should be fetched  */ protected boolean shouldFetchSource() {     return true. }
true;protected,abstract;0;1;/**  * Get the query to use for the search  * @return the search query  */ ;/**  * Get the query to use for the search  * @return the search query  */ protected abstract QueryBuilder getQuery().
true;protected,abstract;1;1;/**  * Maps the search hit to the document type  * @param hit  *            the search hit  * @return The mapped document or {@code null} if the mapping failed  */ ;/**  * Maps the search hit to the document type  * @param hit  *            the search hit  * @return The mapped document or {@code null} if the mapping failed  */ protected abstract T map(SearchHit hit).
