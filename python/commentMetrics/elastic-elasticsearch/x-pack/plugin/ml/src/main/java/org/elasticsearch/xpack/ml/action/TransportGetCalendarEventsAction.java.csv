commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;53;;@Override protected void doExecute(Task task, GetCalendarEventsAction.Request request, ActionListener<GetCalendarEventsAction.Response> listener) {     ActionListener<Boolean> calendarExistsListener = ActionListener.wrap(r -> {         ScheduledEventsQueryBuilder query = new ScheduledEventsQueryBuilder().start(request.getStart()).end(request.getEnd()).from(request.getPageParams().getFrom()).size(request.getPageParams().getSize()).         if (GetCalendarsAction.Request.ALL.equals(request.getCalendarId()) == false) {             query.calendarIds(Collections.singletonList(request.getCalendarId())).         }         ActionListener<QueryPage<ScheduledEvent>> eventsListener = ActionListener.wrap(events -> {             listener.onResponse(new GetCalendarEventsAction.Response(events)).         }, listener::onFailure).         if (request.getJobId() != null) {             jobConfigProvider.getJob(request.getJobId(), ActionListener.wrap(jobBuiler -> {                 Job job = jobBuiler.build().                 jobResultsProvider.scheduledEventsForJob(request.getJobId(), job.getGroups(), query, eventsListener).             }, jobNotFound -> {                 // is the request Id a group?                 jobConfigProvider.groupExists(request.getJobId(), ActionListener.wrap(groupExists -> {                     if (groupExists) {                         jobResultsProvider.scheduledEventsForJob(null, Collections.singletonList(request.getJobId()), query, eventsListener).                     } else {                         listener.onFailure(ExceptionsHelper.missingJobException(request.getJobId())).                     }                 }, listener::onFailure)).             })).         } else {             jobResultsProvider.scheduledEvents(query, eventsListener).         }     }, listener::onFailure).     checkCalendarExists(request.getCalendarId(), calendarExistsListener). }
false;private;2;11;;private void checkCalendarExists(String calendarId, ActionListener<Boolean> listener) {     if (GetCalendarsAction.Request.ALL.equals(calendarId)) {         listener.onResponse(true).         return.     }     jobResultsProvider.calendar(calendarId, ActionListener.wrap(c -> listener.onResponse(true), listener::onFailure)). }
