commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "ml_get_overall_buckets_action". }
false;protected;2;26;;@Override protected RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     String jobId = restRequest.param(Job.ID.getPreferredName()).     final Request request.     if (restRequest.hasContentOrSourceParam()) {         XContentParser parser = restRequest.contentOrSourceParamParser().         request = Request.parseRequest(jobId, parser).     } else {         request = new Request(jobId).         request.setTopN(restRequest.paramAsInt(Request.TOP_N.getPreferredName(), request.getTopN())).         if (restRequest.hasParam(Request.BUCKET_SPAN.getPreferredName())) {             request.setBucketSpan(restRequest.param(Request.BUCKET_SPAN.getPreferredName())).         }         request.setOverallScore(Double.parseDouble(restRequest.param(Request.OVERALL_SCORE.getPreferredName(), "0.0"))).         request.setExcludeInterim(restRequest.paramAsBoolean(Request.EXCLUDE_INTERIM.getPreferredName(), request.isExcludeInterim())).         if (restRequest.hasParam(Request.START.getPreferredName())) {             request.setStart(restRequest.param(Request.START.getPreferredName())).         }         if (restRequest.hasParam(Request.END.getPreferredName())) {             request.setEnd(restRequest.param(Request.END.getPreferredName())).         }         request.setAllowNoJobs(restRequest.paramAsBoolean(Request.ALLOW_NO_JOBS.getPreferredName(), request.allowNoJobs())).     }     return channel -> client.execute(GetOverallBucketsAction.INSTANCE, request, new RestToXContentListener<>(channel)). }
