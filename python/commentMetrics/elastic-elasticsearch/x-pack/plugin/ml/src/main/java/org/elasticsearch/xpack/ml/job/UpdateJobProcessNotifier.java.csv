commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void beforeStart() {     start(). }
false;public;0;4;;@Override public void beforeStop() {     stop(). }
false;;2;3;;boolean submitJobUpdate(UpdateParams update, ActionListener<Boolean> listener) {     return orderedJobUpdates.offer(new UpdateHolder(update, listener)). }
false;private;0;3;;private void start() {     cancellable = threadPool.scheduleWithFixedDelay(this::processNextUpdate, TimeValue.timeValueSeconds(1), ThreadPool.Names.GENERIC). }
false;private;0;8;;private void stop() {     orderedJobUpdates.clear().     ThreadPool.Cancellable cancellable = this.cancellable.     if (cancellable != null) {         cancellable.cancel().     } }
false;private;0;9;;private void processNextUpdate() {     List<UpdateHolder> updates = new ArrayList<>(orderedJobUpdates.size()).     try {         orderedJobUpdates.drainTo(updates).         executeProcessUpdates(new VolatileCursorIterator<>(updates)).     } catch (Exception e) {         logger.error("Error while processing next job update", e).     } }
false;public;1;12;;@Override public void onResponse(Response response) {     if (response.isUpdated()) {         logger.info("Successfully updated remote job [{}]", update.getJobId()).         updateHolder.listener.onResponse(true).     } else {         String msg = "Failed to update remote job [" + update.getJobId() + "]".         logger.error(msg).         updateHolder.listener.onFailure(ExceptionsHelper.serverError(msg)).     }     executeProcessUpdates(updatesIterator). }
false;public;1;13;;@Override public void onFailure(Exception e) {     if (e instanceof ResourceNotFoundException) {         logger.debug("Remote job [{}] not updated as it has been deleted", update.getJobId()).     } else if (e.getMessage().contains("because job [" + update.getJobId() + "] is not open") && e instanceof ElasticsearchStatusException) {         logger.debug("Remote job [{}] not updated as it is no longer open", update.getJobId()).     } else {         logger.error("Failed to update remote job [" + update.getJobId() + "]", e).     }     updateHolder.listener.onFailure(e).     executeProcessUpdates(updatesIterator). }
false;;1;48;;void executeProcessUpdates(Iterator<UpdateHolder> updatesIterator) {     if (updatesIterator.hasNext() == false) {         return.     }     UpdateHolder updateHolder = updatesIterator.next().     UpdateParams update = updateHolder.update.     if (update.isJobUpdate() && clusterService.localNode().isMasterNode() == false) {         assert clusterService.localNode().isMasterNode().         logger.error("Job update was submitted to non-master node [" + clusterService.getNodeName() + "]. update for job [" + update.getJobId() + "] will be ignored").         executeProcessUpdates(updatesIterator).         return.     }     Request request = new Request(update.getJobId(), update.getModelPlotConfig(), update.getDetectorUpdates(), update.getFilter(), update.isUpdateScheduledEvents()).     executeAsyncWithOrigin(client, ML_ORIGIN, UpdateProcessAction.INSTANCE, request, new ActionListener<Response>() {          @Override         public void onResponse(Response response) {             if (response.isUpdated()) {                 logger.info("Successfully updated remote job [{}]", update.getJobId()).                 updateHolder.listener.onResponse(true).             } else {                 String msg = "Failed to update remote job [" + update.getJobId() + "]".                 logger.error(msg).                 updateHolder.listener.onFailure(ExceptionsHelper.serverError(msg)).             }             executeProcessUpdates(updatesIterator).         }          @Override         public void onFailure(Exception e) {             if (e instanceof ResourceNotFoundException) {                 logger.debug("Remote job [{}] not updated as it has been deleted", update.getJobId()).             } else if (e.getMessage().contains("because job [" + update.getJobId() + "] is not open") && e instanceof ElasticsearchStatusException) {                 logger.debug("Remote job [{}] not updated as it is no longer open", update.getJobId()).             } else {                 logger.error("Failed to update remote job [" + update.getJobId() + "]", e).             }             updateHolder.listener.onFailure(e).             executeProcessUpdates(updatesIterator).         }     }). }
