commented;modifiers;parameterAmount;loc;comment;code
false;public;2;14;;@Override public DataExtractor newExtractor(long start, long end) {     ScrollDataExtractorContext dataExtractorContext = new ScrollDataExtractorContext(job.getId(), extractedFields, datafeedConfig.getIndices(), datafeedConfig.getParsedQuery(), datafeedConfig.getScriptFields(), datafeedConfig.getScrollSize(), start, end, datafeedConfig.getHeaders()).     return new ScrollDataExtractor(client, dataExtractorContext). }
false;public,static;4;33;;public static void create(Client client, DatafeedConfig datafeed, Job job, ActionListener<DataExtractorFactory> listener) {     // Step 2. Contruct the factory and notify listener     ActionListener<FieldCapabilitiesResponse> fieldCapabilitiesHandler = ActionListener.wrap(fieldCapabilitiesResponse -> {         TimeBasedExtractedFields extractedFields = TimeBasedExtractedFields.build(job, datafeed, fieldCapabilitiesResponse).         listener.onResponse(new ScrollDataExtractorFactory(client, datafeed, job, extractedFields)).     }, e -> {         if (e instanceof IndexNotFoundException) {             listener.onFailure(new ResourceNotFoundException("datafeed [" + datafeed.getId() + "] cannot retrieve data because index " + ((IndexNotFoundException) e).getIndex() + " does not exist")).         } else if (e instanceof IllegalArgumentException) {             listener.onFailure(ExceptionsHelper.badRequestException("[" + datafeed.getId() + "] " + e.getMessage())).         } else {             listener.onFailure(e).         }     }).     // Step 1. Get field capabilities necessary to build the information of how to extract fields     FieldCapabilitiesRequest fieldCapabilitiesRequest = new FieldCapabilitiesRequest().     fieldCapabilitiesRequest.indices(datafeed.getIndices().toArray(new String[datafeed.getIndices().size()])).     // We need capabilities for all fields matching the requested fields' parents so that we can work around     // multi-fields that are not in source.     String[] requestFields = job.allInputFields().stream().map(f -> MlStrings.getParentField(f) + "*").toArray(size -> new String[size]).     fieldCapabilitiesRequest.fields(requestFields).     ClientHelper.<FieldCapabilitiesResponse>executeWithHeaders(datafeed.getHeaders(), ClientHelper.ML_ORIGIN, client, () -> {         client.execute(FieldCapabilitiesAction.INSTANCE, fieldCapabilitiesRequest, fieldCapabilitiesHandler).         // This response gets discarded - the listener handles the real response         return null.     }). }
