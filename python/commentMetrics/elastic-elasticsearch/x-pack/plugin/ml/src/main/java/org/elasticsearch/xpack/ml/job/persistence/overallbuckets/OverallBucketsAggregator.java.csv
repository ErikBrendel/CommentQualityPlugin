commented;modifiers;parameterAmount;loc;comment;code
false;public,synchronized;1;18;;@Override public synchronized void process(List<OverallBucket> buckets) {     if (buckets.isEmpty()) {         return.     }     if (startTime == null) {         startTime = Intervals.alignToFloor(buckets.get(0).getTimestamp().getTime(), bucketSpanMillis).     }     long bucketTime.     for (OverallBucket bucket : buckets) {         bucketTime = bucket.getTimestamp().getTime().         if (bucketTime >= startTime + bucketSpanMillis) {             aggregated.add(outputBucket()).             startNextBucket(bucketTime).         }         processBucket(bucket).     } }
false;private;0;6;;private OverallBucket outputBucket() {     List<OverallBucket.JobInfo> jobs = new ArrayList<>(maxScoreByJob.size()).     maxScoreByJob.entrySet().stream().forEach(entry -> jobs.add(new OverallBucket.JobInfo(entry.getKey(), entry.getValue()))).     return new OverallBucket(new Date(startTime), bucketSpanSeconds, maxOverallScore, jobs, isInterim). }
false;private;1;6;;private void startNextBucket(long bucketTime) {     maxOverallScore = 0.0.     maxScoreByJob.clear().     isInterim = false.     startTime = Intervals.alignToFloor(bucketTime, bucketSpanMillis). }
false;private;1;10;;private void processBucket(OverallBucket bucket) {     maxOverallScore = Math.max(maxOverallScore, bucket.getOverallScore()).     bucket.getJobs().stream().forEach(j -> {         double currentMax = maxScoreByJob.computeIfAbsent(j.getJobId(), k -> 0.0).         if (j.getMaxAnomalyScore() > currentMax) {             maxScoreByJob.put(j.getJobId(), j.getMaxAnomalyScore()).         }     }).     isInterim |= bucket.isInterim(). }
false;public,synchronized;0;7;;@Override public synchronized List<OverallBucket> finish() {     if (startTime != null) {         aggregated.add(outputBucket()).     }     return aggregated. }
false;public,synchronized;0;4;;@Override public synchronized int size() {     return aggregated.size(). }
