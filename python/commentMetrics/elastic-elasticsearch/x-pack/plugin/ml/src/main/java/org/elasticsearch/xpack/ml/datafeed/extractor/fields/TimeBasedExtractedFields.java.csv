commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String timeField() {     return timeField.getName(). }
false;public;1;11;;public Long timeFieldValue(SearchHit hit) {     Object[] value = timeField.value(hit).     if (value.length != 1) {         throw new RuntimeException("Time field [" + timeField.getAlias() + "] expected a single value. actual was: " + Arrays.toString(value)).     }     if (value[0] instanceof Long) {         return (Long) value[0].     }     throw new RuntimeException("Time field [" + timeField.getAlias() + "] expected a long value. actual was: " + value[0]). }
false;public,static;3;15;;public static TimeBasedExtractedFields build(Job job, DatafeedConfig datafeed, FieldCapabilitiesResponse fieldsCapabilities) {     Set<String> scriptFields = datafeed.getScriptFields().stream().map(sf -> sf.fieldName()).collect(Collectors.toSet()).     ExtractionMethodDetector extractionMethodDetector = new ExtractionMethodDetector(scriptFields, fieldsCapabilities).     String timeField = job.getDataDescription().getTimeField().     if (scriptFields.contains(timeField) == false && extractionMethodDetector.isAggregatable(timeField) == false) {         throw new IllegalArgumentException("cannot retrieve time field [" + timeField + "] because it is not aggregatable").     }     ExtractedField timeExtractedField = ExtractedField.newTimeField(timeField, scriptFields.contains(timeField) ? ExtractedField.ExtractionMethod.SCRIPT_FIELD : ExtractedField.ExtractionMethod.DOC_VALUE).     List<String> remainingFields = job.allInputFields().stream().filter(f -> !f.equals(timeField)).collect(Collectors.toList()).     List<ExtractedField> allExtractedFields = new ArrayList<>(remainingFields.size() + 1).     allExtractedFields.add(timeExtractedField).     remainingFields.stream().forEach(field -> allExtractedFields.add(extractionMethodDetector.detect(field))).     return new TimeBasedExtractedFields(timeExtractedField, allExtractedFields). }
