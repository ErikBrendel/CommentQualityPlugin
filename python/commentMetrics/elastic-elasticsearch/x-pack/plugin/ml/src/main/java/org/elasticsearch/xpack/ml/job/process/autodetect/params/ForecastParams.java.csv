commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getForecastId() {     return forecastId. }
true;public;0;3;/**  * The forecast create time in seconds from the epoch  * @return The create time in seconds from the epoch  */ ;/**  * The forecast create time in seconds from the epoch  * @return The create time in seconds from the epoch  */ public long getCreateTime() {     return createTime. }
true;public;0;3;/**  * The forecast duration in seconds  * @return The duration in seconds  */ ;/**  * The forecast duration in seconds  * @return The duration in seconds  */ public long getDuration() {     return duration. }
true;public;0;3;/**  * The forecast expiration in seconds (duration added to start time)  * @return The expiration in seconds  */ ;/**  * The forecast expiration in seconds (duration added to start time)  * @return The expiration in seconds  */ public long getExpiresIn() {     return expiresIn. }
true;public;0;3;/**  * Temporary storage forecast is allowed to use for persisting models.  *  * @return path to tmp storage  */ ;/**  * Temporary storage forecast is allowed to use for persisting models.  *  * @return path to tmp storage  */ public String getTmpStorage() {     return tmpStorage. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(forecastId, createTime, duration, expiresIn, tmpStorage). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ForecastParams other = (ForecastParams) obj.     return Objects.equals(forecastId, other.forecastId) && Objects.equals(createTime, other.createTime) && Objects.equals(duration, other.duration) && Objects.equals(expiresIn, other.expiresIn) && Objects.equals(tmpStorage, other.tmpStorage). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;1;4;;public Builder duration(TimeValue duration) {     durationSecs = duration.seconds().     return this. }
false;public;1;4;;public Builder expiresIn(TimeValue expiresIn) {     expiresInSecs = expiresIn.seconds().     return this. }
false;public;1;4;;public Builder tmpStorage(String tmpStorage) {     this.tmpStorage = tmpStorage.     return this. }
false;public;0;3;;public ForecastParams build() {     return new ForecastParams(forecastId, createTimeEpochSecs, durationSecs, expiresInSecs, tmpStorage). }
