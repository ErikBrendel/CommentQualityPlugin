# id;timestamp;commentText;codeText;commentWords;codeWords
AutodetectCommunicator -> public void close(boolean restart, String reason);1524684173;Closes job this communicator is encapsulating.__@param restart   Whether the job should be restarted by persistent tasks_@param reason    The reason for closing the job;public void close(boolean restart, String reason) {_        Future<?> future = autodetectWorkerExecutor.submit(() -> {_            checkProcessIsAlive()__            try {_                if (autodetectProcess.isReady()) {_                    autodetectProcess.close()__                } else {_                    killProcess(false, false)__                    stateStreamer.cancel()__                }_                autoDetectResultProcessor.awaitCompletion()__            } finally {_                onFinishHandler.accept(restart ? new ElasticsearchException(reason) : null)__            }_            LOGGER.info("[{}] job closed", job.getId())__            return null__        })__        try {_            future.get()__            autodetectWorkerExecutor.shutdown()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__        } catch (ExecutionException e) {_            if (processKilled) {_                _                throw ExceptionsHelper.conflictStatusException("Close job interrupted by kill request")__            } else {_                throw new ElasticsearchException(e)__            }_        } finally {_            destroyCategorizationAnalyzer()__        }_    };closes,job,this,communicator,is,encapsulating,param,restart,whether,the,job,should,be,restarted,by,persistent,tasks,param,reason,the,reason,for,closing,the,job;public,void,close,boolean,restart,string,reason,future,future,autodetect,worker,executor,submit,check,process,is,alive,try,if,autodetect,process,is,ready,autodetect,process,close,else,kill,process,false,false,state,streamer,cancel,auto,detect,result,processor,await,completion,finally,on,finish,handler,accept,restart,new,elasticsearch,exception,reason,null,logger,info,job,closed,job,get,id,return,null,try,future,get,autodetect,worker,executor,shutdown,catch,interrupted,exception,e,thread,current,thread,interrupt,catch,execution,exception,e,if,process,killed,throw,exceptions,helper,conflict,status,exception,close,job,interrupted,by,kill,request,else,throw,new,elasticsearch,exception,e,finally,destroy,categorization,analyzer
AutodetectCommunicator -> public void close(boolean restart, String reason);1531179852;Closes job this communicator is encapsulating.__@param restart   Whether the job should be restarted by persistent tasks_@param reason    The reason for closing the job;public void close(boolean restart, String reason) {_        Future<?> future = autodetectWorkerExecutor.submit(() -> {_            checkProcessIsAlive()__            try {_                if (autodetectProcess.isReady()) {_                    autodetectProcess.close()__                } else {_                    killProcess(false, false)__                    stateStreamer.cancel()__                }_                autoDetectResultProcessor.awaitCompletion()__            } finally {_                onFinishHandler.accept(restart ? new ElasticsearchException(reason) : null)__            }_            LOGGER.info("[{}] job closed", job.getId())__            return null__        })__        try {_            future.get()__            autodetectWorkerExecutor.shutdown()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__        } catch (ExecutionException e) {_            if (processKilled) {_                _                throw ExceptionsHelper.conflictStatusException("Close job interrupted by kill request")__            } else {_                throw FutureUtils.rethrowExecutionException(e)__            }_        } finally {_            destroyCategorizationAnalyzer()__        }_    };closes,job,this,communicator,is,encapsulating,param,restart,whether,the,job,should,be,restarted,by,persistent,tasks,param,reason,the,reason,for,closing,the,job;public,void,close,boolean,restart,string,reason,future,future,autodetect,worker,executor,submit,check,process,is,alive,try,if,autodetect,process,is,ready,autodetect,process,close,else,kill,process,false,false,state,streamer,cancel,auto,detect,result,processor,await,completion,finally,on,finish,handler,accept,restart,new,elasticsearch,exception,reason,null,logger,info,job,closed,job,get,id,return,null,try,future,get,autodetect,worker,executor,shutdown,catch,interrupted,exception,e,thread,current,thread,interrupt,catch,execution,exception,e,if,process,killed,throw,exceptions,helper,conflict,status,exception,close,job,interrupted,by,kill,request,else,throw,future,utils,rethrow,execution,exception,e,finally,destroy,categorization,analyzer
AutodetectCommunicator -> public void close(boolean restart, String reason);1533143718;Closes job this communicator is encapsulating.__@param restart   Whether the job should be restarted by persistent tasks_@param reason    The reason for closing the job;public void close(boolean restart, String reason) {_        Future<?> future = autodetectWorkerExecutor.submit(() -> {_            checkProcessIsAlive()__            try {_                if (autodetectProcess.isReady()) {_                    autodetectProcess.close()__                } else {_                    killProcess(false, false)__                    stateStreamer.cancel()__                }_                autoDetectResultProcessor.awaitCompletion()__            } finally {_                onFinishHandler.accept(restart ? new ElasticsearchException(reason) : null)__            }_            LOGGER.info("[{}] job closed", job.getId())__            return null__        })__        try {_            future.get()__            autodetectWorkerExecutor.shutdown()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__        } catch (ExecutionException e) {_            if (processKilled) {_                _                throw ExceptionsHelper.conflictStatusException("Close job interrupted by kill request")__            } else {_                throw FutureUtils.rethrowExecutionException(e)__            }_        } finally {_            destroyCategorizationAnalyzer()__        }_    };closes,job,this,communicator,is,encapsulating,param,restart,whether,the,job,should,be,restarted,by,persistent,tasks,param,reason,the,reason,for,closing,the,job;public,void,close,boolean,restart,string,reason,future,future,autodetect,worker,executor,submit,check,process,is,alive,try,if,autodetect,process,is,ready,autodetect,process,close,else,kill,process,false,false,state,streamer,cancel,auto,detect,result,processor,await,completion,finally,on,finish,handler,accept,restart,new,elasticsearch,exception,reason,null,logger,info,job,closed,job,get,id,return,null,try,future,get,autodetect,worker,executor,shutdown,catch,interrupted,exception,e,thread,current,thread,interrupt,catch,execution,exception,e,if,process,killed,throw,exceptions,helper,conflict,status,exception,close,job,interrupted,by,kill,request,else,throw,future,utils,rethrow,execution,exception,e,finally,destroy,categorization,analyzer
AutodetectCommunicator -> public void close(boolean restart, String reason);1540583181;Closes job this communicator is encapsulating.__@param restart   Whether the job should be restarted by persistent tasks_@param reason    The reason for closing the job;public void close(boolean restart, String reason) {_        Future<?> future = autodetectWorkerExecutor.submit(() -> {_            checkProcessIsAlive()__            try {_                if (autodetectProcess.isReady()) {_                    autodetectProcess.close()__                } else {_                    killProcess(false, false)__                    stateStreamer.cancel()__                }_                autoDetectResultProcessor.awaitCompletion()__            } finally {_                onFinishHandler.accept(restart ? new ElasticsearchException(reason) : null)__            }_            LOGGER.info("[{}] job closed", job.getId())__            return null__        })__        try {_            future.get()__            autodetectWorkerExecutor.shutdown()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__        } catch (ExecutionException e) {_            if (processKilled) {_                _                throw ExceptionsHelper.conflictStatusException("Close job interrupted by kill request")__            } else {_                throw FutureUtils.rethrowExecutionException(e)__            }_        } finally {_            destroyCategorizationAnalyzer()__        }_    };closes,job,this,communicator,is,encapsulating,param,restart,whether,the,job,should,be,restarted,by,persistent,tasks,param,reason,the,reason,for,closing,the,job;public,void,close,boolean,restart,string,reason,future,future,autodetect,worker,executor,submit,check,process,is,alive,try,if,autodetect,process,is,ready,autodetect,process,close,else,kill,process,false,false,state,streamer,cancel,auto,detect,result,processor,await,completion,finally,on,finish,handler,accept,restart,new,elasticsearch,exception,reason,null,logger,info,job,closed,job,get,id,return,null,try,future,get,autodetect,worker,executor,shutdown,catch,interrupted,exception,e,thread,current,thread,interrupt,catch,execution,exception,e,if,process,killed,throw,exceptions,helper,conflict,status,exception,close,job,interrupted,by,kill,request,else,throw,future,utils,rethrow,execution,exception,e,finally,destroy,categorization,analyzer
AutodetectCommunicator -> public void close(boolean restart, String reason);1540847035;Closes job this communicator is encapsulating.__@param restart   Whether the job should be restarted by persistent tasks_@param reason    The reason for closing the job;public void close(boolean restart, String reason) {_        Future<?> future = autodetectWorkerExecutor.submit(() -> {_            checkProcessIsAlive()__            try {_                if (autodetectProcess.isReady()) {_                    autodetectProcess.close()__                } else {_                    killProcess(false, false)__                    stateStreamer.cancel()__                }_                autoDetectResultProcessor.awaitCompletion()__            } finally {_                onFinishHandler.accept(restart ? new ElasticsearchException(reason) : null)__            }_            LOGGER.info("[{}] job closed", job.getId())__            return null__        })__        try {_            future.get()__            autodetectWorkerExecutor.shutdown()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__        } catch (ExecutionException e) {_            if (processKilled) {_                _                throw ExceptionsHelper.conflictStatusException("Close job interrupted by kill request")__            } else {_                throw FutureUtils.rethrowExecutionException(e)__            }_        } finally {_            destroyCategorizationAnalyzer()__        }_    };closes,job,this,communicator,is,encapsulating,param,restart,whether,the,job,should,be,restarted,by,persistent,tasks,param,reason,the,reason,for,closing,the,job;public,void,close,boolean,restart,string,reason,future,future,autodetect,worker,executor,submit,check,process,is,alive,try,if,autodetect,process,is,ready,autodetect,process,close,else,kill,process,false,false,state,streamer,cancel,auto,detect,result,processor,await,completion,finally,on,finish,handler,accept,restart,new,elasticsearch,exception,reason,null,logger,info,job,closed,job,get,id,return,null,try,future,get,autodetect,worker,executor,shutdown,catch,interrupted,exception,e,thread,current,thread,interrupt,catch,execution,exception,e,if,process,killed,throw,exceptions,helper,conflict,status,exception,close,job,interrupted,by,kill,request,else,throw,future,utils,rethrow,execution,exception,e,finally,destroy,categorization,analyzer
AutodetectCommunicator -> public void close(boolean restart, String reason);1548688050;Closes job this communicator is encapsulating.__@param restart   Whether the job should be restarted by persistent tasks_@param reason    The reason for closing the job;public void close(boolean restart, String reason) {_        Future<?> future = autodetectWorkerExecutor.submit(() -> {_            checkProcessIsAlive()__            try {_                if (autodetectProcess.isReady()) {_                    autodetectProcess.close()__                } else {_                    killProcess(false, false)__                    stateStreamer.cancel()__                }_                autoDetectResultProcessor.awaitCompletion()__            } finally {_                onFinishHandler.accept(restart ? new ElasticsearchException(reason) : null, true)__            }_            LOGGER.info("[{}] job closed", job.getId())__            return null__        })__        try {_            future.get()__            autodetectWorkerExecutor.shutdown()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__        } catch (ExecutionException e) {_            if (processKilled) {_                _                throw ExceptionsHelper.conflictStatusException("Close job interrupted by kill request")__            } else {_                throw FutureUtils.rethrowExecutionException(e)__            }_        } finally {_            destroyCategorizationAnalyzer()__        }_    };closes,job,this,communicator,is,encapsulating,param,restart,whether,the,job,should,be,restarted,by,persistent,tasks,param,reason,the,reason,for,closing,the,job;public,void,close,boolean,restart,string,reason,future,future,autodetect,worker,executor,submit,check,process,is,alive,try,if,autodetect,process,is,ready,autodetect,process,close,else,kill,process,false,false,state,streamer,cancel,auto,detect,result,processor,await,completion,finally,on,finish,handler,accept,restart,new,elasticsearch,exception,reason,null,true,logger,info,job,closed,job,get,id,return,null,try,future,get,autodetect,worker,executor,shutdown,catch,interrupted,exception,e,thread,current,thread,interrupt,catch,execution,exception,e,if,process,killed,throw,exceptions,helper,conflict,status,exception,close,job,interrupted,by,kill,request,else,throw,future,utils,rethrow,execution,exception,e,finally,destroy,categorization,analyzer
AutodetectCommunicator -> private void checkProcessIsAlive();1524684173;Throws an exception if the process has exited;private void checkProcessIsAlive() {_        if (!autodetectProcess.isProcessAlive()) {_            _            throw new ElasticsearchException("[{}] Unexpected death of autodetect: {}", job.getId(), autodetectProcess.readError())__        }_    };throws,an,exception,if,the,process,has,exited;private,void,check,process,is,alive,if,autodetect,process,is,process,alive,throw,new,elasticsearch,exception,unexpected,death,of,autodetect,job,get,id,autodetect,process,read,error
AutodetectCommunicator -> private void checkProcessIsAlive();1531179852;Throws an exception if the process has exited;private void checkProcessIsAlive() {_        if (!autodetectProcess.isProcessAlive()) {_            _            throw new ElasticsearchException("[{}] Unexpected death of autodetect: {}", job.getId(), autodetectProcess.readError())__        }_    };throws,an,exception,if,the,process,has,exited;private,void,check,process,is,alive,if,autodetect,process,is,process,alive,throw,new,elasticsearch,exception,unexpected,death,of,autodetect,job,get,id,autodetect,process,read,error
AutodetectCommunicator -> private void checkProcessIsAlive();1533143718;Throws an exception if the process has exited;private void checkProcessIsAlive() {_        if (!autodetectProcess.isProcessAlive()) {_            _            throw new ElasticsearchException("[{}] Unexpected death of autodetect: {}", job.getId(), autodetectProcess.readError())__        }_    };throws,an,exception,if,the,process,has,exited;private,void,check,process,is,alive,if,autodetect,process,is,process,alive,throw,new,elasticsearch,exception,unexpected,death,of,autodetect,job,get,id,autodetect,process,read,error
AutodetectCommunicator -> private void checkProcessIsAlive();1540583181;Throws an exception if the process has exited;private void checkProcessIsAlive() {_        if (!autodetectProcess.isProcessAlive()) {_            _            throw new ElasticsearchException("[{}] Unexpected death of autodetect: {}", job.getId(), autodetectProcess.readError())__        }_    };throws,an,exception,if,the,process,has,exited;private,void,check,process,is,alive,if,autodetect,process,is,process,alive,throw,new,elasticsearch,exception,unexpected,death,of,autodetect,job,get,id,autodetect,process,read,error
AutodetectCommunicator -> private void checkProcessIsAlive();1540847035;Throws an exception if the process has exited;private void checkProcessIsAlive() {_        if (!autodetectProcess.isProcessAlive()) {_            _            throw new ElasticsearchException("[{}] Unexpected death of autodetect: {}", job.getId(), autodetectProcess.readError())__        }_    };throws,an,exception,if,the,process,has,exited;private,void,check,process,is,alive,if,autodetect,process,is,process,alive,throw,new,elasticsearch,exception,unexpected,death,of,autodetect,job,get,id,autodetect,process,read,error
AutodetectCommunicator -> private void checkProcessIsAlive();1548688050;Throws an exception if the process has exited;private void checkProcessIsAlive() {_        if (!autodetectProcess.isProcessAlive()) {_            _            throw new ElasticsearchException("[{}] Unexpected death of autodetect: {}", job.getId(), autodetectProcess.readError())__        }_    };throws,an,exception,if,the,process,has,exited;private,void,check,process,is,alive,if,autodetect,process,is,process,alive,throw,new,elasticsearch,exception,unexpected,death,of,autodetect,job,get,id,autodetect,process,read,error
AutodetectCommunicator -> void destroyCategorizationAnalyzer();1524684173;Care must be taken to ensure this method is not called while data is being posted._The methods in this class that call it wait for all processing to complete first._The expectation is that external calls are only made when cleaning up after a fatal_error.;void destroyCategorizationAnalyzer() {_        if (categorizationAnalyzer != null) {_            categorizationAnalyzer.close()__            categorizationAnalyzer = null__        }_    };care,must,be,taken,to,ensure,this,method,is,not,called,while,data,is,being,posted,the,methods,in,this,class,that,call,it,wait,for,all,processing,to,complete,first,the,expectation,is,that,external,calls,are,only,made,when,cleaning,up,after,a,fatal,error;void,destroy,categorization,analyzer,if,categorization,analyzer,null,categorization,analyzer,close,categorization,analyzer,null
AutodetectCommunicator -> void destroyCategorizationAnalyzer();1531179852;Care must be taken to ensure this method is not called while data is being posted._The methods in this class that call it wait for all processing to complete first._The expectation is that external calls are only made when cleaning up after a fatal_error.;void destroyCategorizationAnalyzer() {_        if (categorizationAnalyzer != null) {_            categorizationAnalyzer.close()__            categorizationAnalyzer = null__        }_    };care,must,be,taken,to,ensure,this,method,is,not,called,while,data,is,being,posted,the,methods,in,this,class,that,call,it,wait,for,all,processing,to,complete,first,the,expectation,is,that,external,calls,are,only,made,when,cleaning,up,after,a,fatal,error;void,destroy,categorization,analyzer,if,categorization,analyzer,null,categorization,analyzer,close,categorization,analyzer,null
AutodetectCommunicator -> void destroyCategorizationAnalyzer();1533143718;Care must be taken to ensure this method is not called while data is being posted._The methods in this class that call it wait for all processing to complete first._The expectation is that external calls are only made when cleaning up after a fatal_error.;void destroyCategorizationAnalyzer() {_        if (categorizationAnalyzer != null) {_            categorizationAnalyzer.close()__            categorizationAnalyzer = null__        }_    };care,must,be,taken,to,ensure,this,method,is,not,called,while,data,is,being,posted,the,methods,in,this,class,that,call,it,wait,for,all,processing,to,complete,first,the,expectation,is,that,external,calls,are,only,made,when,cleaning,up,after,a,fatal,error;void,destroy,categorization,analyzer,if,categorization,analyzer,null,categorization,analyzer,close,categorization,analyzer,null
AutodetectCommunicator -> void destroyCategorizationAnalyzer();1540583181;Care must be taken to ensure this method is not called while data is being posted._The methods in this class that call it wait for all processing to complete first._The expectation is that external calls are only made when cleaning up after a fatal_error.;void destroyCategorizationAnalyzer() {_        if (categorizationAnalyzer != null) {_            categorizationAnalyzer.close()__            categorizationAnalyzer = null__        }_    };care,must,be,taken,to,ensure,this,method,is,not,called,while,data,is,being,posted,the,methods,in,this,class,that,call,it,wait,for,all,processing,to,complete,first,the,expectation,is,that,external,calls,are,only,made,when,cleaning,up,after,a,fatal,error;void,destroy,categorization,analyzer,if,categorization,analyzer,null,categorization,analyzer,close,categorization,analyzer,null
AutodetectCommunicator -> void destroyCategorizationAnalyzer();1540847035;Care must be taken to ensure this method is not called while data is being posted._The methods in this class that call it wait for all processing to complete first._The expectation is that external calls are only made when cleaning up after a fatal_error.;void destroyCategorizationAnalyzer() {_        if (categorizationAnalyzer != null) {_            categorizationAnalyzer.close()__            categorizationAnalyzer = null__        }_    };care,must,be,taken,to,ensure,this,method,is,not,called,while,data,is,being,posted,the,methods,in,this,class,that,call,it,wait,for,all,processing,to,complete,first,the,expectation,is,that,external,calls,are,only,made,when,cleaning,up,after,a,fatal,error;void,destroy,categorization,analyzer,if,categorization,analyzer,null,categorization,analyzer,close,categorization,analyzer,null
AutodetectCommunicator -> void destroyCategorizationAnalyzer();1548688050;Care must be taken to ensure this method is not called while data is being posted._The methods in this class that call it wait for all processing to complete first._The expectation is that external calls are only made when cleaning up after a fatal_error.;void destroyCategorizationAnalyzer() {_        if (categorizationAnalyzer != null) {_            categorizationAnalyzer.close()__            categorizationAnalyzer = null__        }_    };care,must,be,taken,to,ensure,this,method,is,not,called,while,data,is,being,posted,the,methods,in,this,class,that,call,it,wait,for,all,processing,to,complete,first,the,expectation,is,that,external,calls,are,only,made,when,cleaning,up,after,a,fatal,error;void,destroy,categorization,analyzer,if,categorization,analyzer,null,categorization,analyzer,close,categorization,analyzer,null
