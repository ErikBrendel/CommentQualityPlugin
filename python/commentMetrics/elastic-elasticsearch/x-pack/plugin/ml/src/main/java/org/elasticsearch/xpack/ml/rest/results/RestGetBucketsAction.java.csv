commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "ml_get_buckets_action". }
false;protected;2;50;;@Override protected RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     String jobId = restRequest.param(Job.ID.getPreferredName()).     String timestamp = restRequest.param(GetBucketsAction.Request.TIMESTAMP.getPreferredName()).     final GetBucketsAction.Request request.     if (restRequest.hasContentOrSourceParam()) {         XContentParser parser = restRequest.contentOrSourceParamParser().         request = GetBucketsAction.Request.parseRequest(jobId, parser).         // A timestamp in the URL overrides any timestamp that may also have been set in the body         if (!Strings.isNullOrEmpty(timestamp)) {             request.setTimestamp(timestamp).         }     } else {         request = new GetBucketsAction.Request(jobId).         // options will cause an error if set         if (!Strings.isNullOrEmpty(timestamp)) {             request.setTimestamp(timestamp).         }         // multiple bucket options         if (restRequest.hasParam(PageParams.FROM.getPreferredName()) || restRequest.hasParam(PageParams.SIZE.getPreferredName())) {             request.setPageParams(new PageParams(restRequest.paramAsInt(PageParams.FROM.getPreferredName(), PageParams.DEFAULT_FROM), restRequest.paramAsInt(PageParams.SIZE.getPreferredName(), PageParams.DEFAULT_SIZE))).         }         if (restRequest.hasParam(GetBucketsAction.Request.START.getPreferredName())) {             request.setStart(restRequest.param(GetBucketsAction.Request.START.getPreferredName())).         }         if (restRequest.hasParam(GetBucketsAction.Request.END.getPreferredName())) {             request.setEnd(restRequest.param(GetBucketsAction.Request.END.getPreferredName())).         }         if (restRequest.hasParam(GetBucketsAction.Request.ANOMALY_SCORE.getPreferredName())) {             request.setAnomalyScore(Double.parseDouble(restRequest.param(GetBucketsAction.Request.ANOMALY_SCORE.getPreferredName(), "0.0"))).         }         if (restRequest.hasParam(GetBucketsAction.Request.SORT.getPreferredName())) {             request.setSort(restRequest.param(GetBucketsAction.Request.SORT.getPreferredName())).         }         request.setDescending(restRequest.paramAsBoolean(GetBucketsAction.Request.DESCENDING.getPreferredName(), request.isDescending())).         // single and multiple bucket options         request.setExpand(restRequest.paramAsBoolean(GetBucketsAction.Request.EXPAND.getPreferredName(), false)).         request.setExcludeInterim(restRequest.paramAsBoolean(GetBucketsAction.Request.EXCLUDE_INTERIM.getPreferredName(), false)).     }     return channel -> client.execute(GetBucketsAction.INSTANCE, request, new RestToXContentListener<>(channel)). }
