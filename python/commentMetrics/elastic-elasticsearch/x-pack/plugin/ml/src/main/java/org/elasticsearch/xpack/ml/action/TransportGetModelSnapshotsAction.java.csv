commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;20;;@Override protected void doExecute(Task task, GetModelSnapshotsAction.Request request, ActionListener<GetModelSnapshotsAction.Response> listener) {     logger.debug("Get model snapshots for job {} snapshot ID {}. from = {}, size = {}" + " start = '{}', end='{}', sort={} descending={}", request.getJobId(), request.getSnapshotId(), request.getPageParams().getFrom(), request.getPageParams().getSize(), request.getStart(), request.getEnd(), request.getSort(), request.getDescOrder()).     jobManager.jobExists(request.getJobId(), ActionListener.wrap(ok -> {         jobResultsProvider.modelSnapshots(request.getJobId(), request.getPageParams().getFrom(), request.getPageParams().getSize(), request.getStart(), request.getEnd(), request.getSort(), request.getDescOrder(), request.getSnapshotId(), page -> {             listener.onResponse(new GetModelSnapshotsAction.Response(clearQuantiles(page))).         }, listener::onFailure).     }, listener::onFailure)). }
false;public,static;1;8;;public static QueryPage<ModelSnapshot> clearQuantiles(QueryPage<ModelSnapshot> page) {     if (page.results() == null) {         return page.     }     return new QueryPage<>(page.results().stream().map(snapshot -> new ModelSnapshot.Builder(snapshot).setQuantiles(null).build()).collect(Collectors.toList()), page.count(), page.getResultsField()). }
