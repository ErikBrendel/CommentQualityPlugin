# id;timestamp;commentText;codeText;commentWords;codeWords
Normalizable -> abstract boolean isContainerOnly()_;1524684173;A {@code Normalizable} may be the owner of scores or just a_container of other {@code Normalizable} objects. A container only_{@code Normalizable} does not have any scores to be normalized._It contains scores that are aggregates of its children.__@return true if this {@code Normalizable} is only a container;abstract boolean isContainerOnly()_;a,code,normalizable,may,be,the,owner,of,scores,or,just,a,container,of,other,code,normalizable,objects,a,container,only,code,normalizable,does,not,have,any,scores,to,be,normalized,it,contains,scores,that,are,aggregates,of,its,children,return,true,if,this,code,normalizable,is,only,a,container;abstract,boolean,is,container,only
Normalizable -> abstract boolean isContainerOnly()_;1534176840;A {@code Normalizable} may be the owner of scores or just a_container of other {@code Normalizable} objects. A container only_{@code Normalizable} does not have any scores to be normalized._It contains scores that are aggregates of its children.__@return true if this {@code Normalizable} is only a container;abstract boolean isContainerOnly()_;a,code,normalizable,may,be,the,owner,of,scores,or,just,a,container,of,other,code,normalizable,objects,a,container,only,code,normalizable,does,not,have,any,scores,to,be,normalized,it,contains,scores,that,are,aggregates,of,its,children,return,true,if,this,code,normalizable,is,only,a,container;abstract,boolean,is,container,only
Normalizable -> abstract boolean isContainerOnly()_;1534338685;A {@code Normalizable} may be the owner of scores or just a_container of other {@code Normalizable} objects. A container only_{@code Normalizable} does not have any scores to be normalized._It contains scores that are aggregates of its children.__@return true if this {@code Normalizable} is only a container;abstract boolean isContainerOnly()_;a,code,normalizable,may,be,the,owner,of,scores,or,just,a,container,of,other,code,normalizable,objects,a,container,only,code,normalizable,does,not,have,any,scores,to,be,normalized,it,contains,scores,that,are,aggregates,of,its,children,return,true,if,this,code,normalizable,is,only,a,container;abstract,boolean,is,container,only
Normalizable -> abstract boolean isContainerOnly()_;1548422582;A {@code Normalizable} may be the owner of scores or just a_container of other {@code Normalizable} objects. A container only_{@code Normalizable} does not have any scores to be normalized._It contains scores that are aggregates of its children.__@return true if this {@code Normalizable} is only a container;abstract boolean isContainerOnly()_;a,code,normalizable,may,be,the,owner,of,scores,or,just,a,container,of,other,code,normalizable,objects,a,container,only,code,normalizable,does,not,have,any,scores,to,be,normalized,it,contains,scores,that,are,aggregates,of,its,children,return,true,if,this,code,normalizable,is,only,a,container;abstract,boolean,is,container,only
Normalizable -> abstract void setParentScore(double parentScore)_;1524684173;If this {@code Normalizable} holds the score of its parent,_set the parent score__@param parentScore the score of the parent {@code Normalizable};abstract void setParentScore(double parentScore)_;if,this,code,normalizable,holds,the,score,of,its,parent,set,the,parent,score,param,parent,score,the,score,of,the,parent,code,normalizable;abstract,void,set,parent,score,double,parent,score
Normalizable -> abstract void setParentScore(double parentScore)_;1534176840;If this {@code Normalizable} holds the score of its parent,_set the parent score__@param parentScore the score of the parent {@code Normalizable};abstract void setParentScore(double parentScore)_;if,this,code,normalizable,holds,the,score,of,its,parent,set,the,parent,score,param,parent,score,the,score,of,the,parent,code,normalizable;abstract,void,set,parent,score,double,parent,score
Normalizable -> abstract void setParentScore(double parentScore)_;1534338685;If this {@code Normalizable} holds the score of its parent,_set the parent score__@param parentScore the score of the parent {@code Normalizable};abstract void setParentScore(double parentScore)_;if,this,code,normalizable,holds,the,score,of,its,parent,set,the,parent,score,param,parent,score,the,score,of,the,parent,code,normalizable;abstract,void,set,parent,score,double,parent,score
Normalizable -> abstract void setParentScore(double parentScore)_;1548422582;If this {@code Normalizable} holds the score of its parent,_set the parent score__@param parentScore the score of the parent {@code Normalizable};abstract void setParentScore(double parentScore)_;if,this,code,normalizable,holds,the,score,of,its,parent,set,the,parent,score,param,parent,score,the,score,of,the,parent,code,normalizable;abstract,void,set,parent,score,double,parent,score
Normalizable -> public abstract String getId()_;1524684173;The document ID of the underlying result._@return The document Id string;public abstract String getId()_;the,document,id,of,the,underlying,result,return,the,document,id,string;public,abstract,string,get,id
Normalizable -> public abstract String getId()_;1534176840;The document ID of the underlying result._@return The document Id string;public abstract String getId()_;the,document,id,of,the,underlying,result,return,the,document,id,string;public,abstract,string,get,id
Normalizable -> public abstract String getId()_;1534338685;The document ID of the underlying result._@return The document Id string;public abstract String getId()_;the,document,id,of,the,underlying,result,return,the,document,id,string;public,abstract,string,get,id
Normalizable -> public abstract String getId()_;1548422582;The document ID of the underlying result._@return The document Id string;public abstract String getId()_;the,document,id,of,the,underlying,result,return,the,document,id,string;public,abstract,string,get,id
Normalizable -> abstract boolean setMaxChildrenScore(ChildType type, double maxScore)_;1524684173;Set the aggregate normalized score for a type of children__@param type         the child type_@param maxScore     the aggregate normalized score of the children_@return true if the score has changed or false otherwise;abstract boolean setMaxChildrenScore(ChildType type, double maxScore)_;set,the,aggregate,normalized,score,for,a,type,of,children,param,type,the,child,type,param,max,score,the,aggregate,normalized,score,of,the,children,return,true,if,the,score,has,changed,or,false,otherwise;abstract,boolean,set,max,children,score,child,type,type,double,max,score
Normalizable -> abstract boolean setMaxChildrenScore(ChildType type, double maxScore)_;1534176840;Set the aggregate normalized score for a type of children__@param type         the child type_@param maxScore     the aggregate normalized score of the children_@return true if the score has changed or false otherwise;abstract boolean setMaxChildrenScore(ChildType type, double maxScore)_;set,the,aggregate,normalized,score,for,a,type,of,children,param,type,the,child,type,param,max,score,the,aggregate,normalized,score,of,the,children,return,true,if,the,score,has,changed,or,false,otherwise;abstract,boolean,set,max,children,score,child,type,type,double,max,score
Normalizable -> abstract boolean setMaxChildrenScore(ChildType type, double maxScore)_;1534338685;Set the aggregate normalized score for a type of children__@param type         the child type_@param maxScore     the aggregate normalized score of the children_@return true if the score has changed or false otherwise;abstract boolean setMaxChildrenScore(ChildType type, double maxScore)_;set,the,aggregate,normalized,score,for,a,type,of,children,param,type,the,child,type,param,max,score,the,aggregate,normalized,score,of,the,children,return,true,if,the,score,has,changed,or,false,otherwise;abstract,boolean,set,max,children,score,child,type,type,double,max,score
Normalizable -> abstract boolean setMaxChildrenScore(ChildType type, double maxScore)_;1548422582;Set the aggregate normalized score for a type of children__@param type         the child type_@param maxScore     the aggregate normalized score of the children_@return true if the score has changed or false otherwise;abstract boolean setMaxChildrenScore(ChildType type, double maxScore)_;set,the,aggregate,normalized,score,for,a,type,of,children,param,type,the,child,type,param,max,score,the,aggregate,normalized,score,of,the,children,return,true,if,the,score,has,changed,or,false,otherwise;abstract,boolean,set,max,children,score,child,type,type,double,max,score
