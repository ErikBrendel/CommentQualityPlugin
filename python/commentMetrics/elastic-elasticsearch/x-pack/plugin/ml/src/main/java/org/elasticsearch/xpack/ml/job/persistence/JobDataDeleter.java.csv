# id;timestamp;commentText;codeText;commentWords;codeWords
JobDataDeleter -> public void deleteInterimResults();1537806831;Delete all results marked as interim;public void deleteInterimResults() {_        DeleteByQueryHolder deleteByQueryHolder = new DeleteByQueryHolder(AnomalyDetectorsIndex.jobResultsAliasedName(jobId))__        deleteByQueryHolder.dbqRequest.setRefresh(false)___        deleteByQueryHolder.dbqRequest.setIndicesOptions(IndicesOptions.lenientExpandOpen())__        QueryBuilder qb = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true)__        deleteByQueryHolder.dbqRequest.setQuery(new ConstantScoreQueryBuilder(qb))___        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.execute(DeleteByQueryAction.INSTANCE, deleteByQueryHolder.dbqRequest).get()__        } catch (Exception e) {_            LOGGER.error("[" + jobId + "] An error occurred while deleting interim results", e)__        }_    };delete,all,results,marked,as,interim;public,void,delete,interim,results,delete,by,query,holder,delete,by,query,holder,new,delete,by,query,holder,anomaly,detectors,index,job,results,aliased,name,job,id,delete,by,query,holder,dbq,request,set,refresh,false,delete,by,query,holder,dbq,request,set,indices,options,indices,options,lenient,expand,open,query,builder,qb,query,builders,term,query,result,get,preferred,name,true,delete,by,query,holder,dbq,request,set,query,new,constant,score,query,builder,qb,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,execute,delete,by,query,action,instance,delete,by,query,holder,dbq,request,get,catch,exception,e,logger,error,job,id,an,error,occurred,while,deleting,interim,results,e
JobDataDeleter -> public void deleteInterimResults();1540847035;Delete all results marked as interim;public void deleteInterimResults() {_        DeleteByQueryHolder deleteByQueryHolder = new DeleteByQueryHolder(AnomalyDetectorsIndex.jobResultsAliasedName(jobId))__        deleteByQueryHolder.dbqRequest.setRefresh(false)___        deleteByQueryHolder.dbqRequest.setIndicesOptions(IndicesOptions.lenientExpandOpen())__        QueryBuilder qb = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true)__        deleteByQueryHolder.dbqRequest.setQuery(new ConstantScoreQueryBuilder(qb))___        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.execute(DeleteByQueryAction.INSTANCE, deleteByQueryHolder.dbqRequest).get()__        } catch (Exception e) {_            LOGGER.error("[" + jobId + "] An error occurred while deleting interim results", e)__        }_    };delete,all,results,marked,as,interim;public,void,delete,interim,results,delete,by,query,holder,delete,by,query,holder,new,delete,by,query,holder,anomaly,detectors,index,job,results,aliased,name,job,id,delete,by,query,holder,dbq,request,set,refresh,false,delete,by,query,holder,dbq,request,set,indices,options,indices,options,lenient,expand,open,query,builder,qb,query,builders,term,query,result,get,preferred,name,true,delete,by,query,holder,dbq,request,set,query,new,constant,score,query,builder,qb,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,execute,delete,by,query,action,instance,delete,by,query,holder,dbq,request,get,catch,exception,e,logger,error,job,id,an,error,occurred,while,deleting,interim,results,e
JobDataDeleter -> public void deleteInterimResults();1545310197;Delete all results marked as interim;public void deleteInterimResults() {_        DeleteByQueryHolder deleteByQueryHolder = new DeleteByQueryHolder(AnomalyDetectorsIndex.jobResultsAliasedName(jobId))__        deleteByQueryHolder.dbqRequest.setRefresh(false)___        deleteByQueryHolder.dbqRequest.setIndicesOptions(IndicesOptions.lenientExpandOpen())__        QueryBuilder qb = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true)__        deleteByQueryHolder.dbqRequest.setQuery(new ConstantScoreQueryBuilder(qb))___        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.execute(DeleteByQueryAction.INSTANCE, deleteByQueryHolder.dbqRequest).get()__        } catch (Exception e) {_            LOGGER.error("[" + jobId + "] An error occurred while deleting interim results", e)__        }_    };delete,all,results,marked,as,interim;public,void,delete,interim,results,delete,by,query,holder,delete,by,query,holder,new,delete,by,query,holder,anomaly,detectors,index,job,results,aliased,name,job,id,delete,by,query,holder,dbq,request,set,refresh,false,delete,by,query,holder,dbq,request,set,indices,options,indices,options,lenient,expand,open,query,builder,qb,query,builders,term,query,result,get,preferred,name,true,delete,by,query,holder,dbq,request,set,query,new,constant,score,query,builder,qb,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,execute,delete,by,query,action,instance,delete,by,query,holder,dbq,request,get,catch,exception,e,logger,error,job,id,an,error,occurred,while,deleting,interim,results,e
JobDataDeleter -> public void deleteInterimResults();1547215421;Delete all results marked as interim;public void deleteInterimResults() {_        DeleteByQueryHolder deleteByQueryHolder = new DeleteByQueryHolder(AnomalyDetectorsIndex.jobResultsAliasedName(jobId))__        deleteByQueryHolder.dbqRequest.setRefresh(false)___        deleteByQueryHolder.dbqRequest.setIndicesOptions(IndicesOptions.lenientExpandOpen())__        QueryBuilder qb = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true)__        deleteByQueryHolder.dbqRequest.setQuery(new ConstantScoreQueryBuilder(qb))___        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.execute(DeleteByQueryAction.INSTANCE, deleteByQueryHolder.dbqRequest).get()__        } catch (Exception e) {_            LOGGER.error("[" + jobId + "] An error occurred while deleting interim results", e)__        }_    };delete,all,results,marked,as,interim;public,void,delete,interim,results,delete,by,query,holder,delete,by,query,holder,new,delete,by,query,holder,anomaly,detectors,index,job,results,aliased,name,job,id,delete,by,query,holder,dbq,request,set,refresh,false,delete,by,query,holder,dbq,request,set,indices,options,indices,options,lenient,expand,open,query,builder,qb,query,builders,term,query,result,get,preferred,name,true,delete,by,query,holder,dbq,request,set,query,new,constant,score,query,builder,qb,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,execute,delete,by,query,action,instance,delete,by,query,holder,dbq,request,get,catch,exception,e,logger,error,job,id,an,error,occurred,while,deleting,interim,results,e
JobDataDeleter -> public void deleteModelSnapshots(List<ModelSnapshot> modelSnapshots, ActionListener<BulkResponse> listener);1537806831;Delete a list of model snapshots and their corresponding state documents.__@param modelSnapshots the model snapshots to delete;public void deleteModelSnapshots(List<ModelSnapshot> modelSnapshots, ActionListener<BulkResponse> listener) {_        if (modelSnapshots.isEmpty()) {_            listener.onResponse(new BulkResponse(new BulkItemResponse[0], 0L))__            return__        }__        String stateIndexName = AnomalyDetectorsIndex.jobStateIndexName()___        _        ActionListener<BulkResponse> docDeleteListener = ActionListener.wrap(_                response -> {_                    _                    if (response.hasFailures() == false) {_                        listener.onResponse(response)__                        return__                    }_                    BulkRequestBuilder bulkRequestBuilder = client.prepareBulk()__                    for (ModelSnapshot modelSnapshot : modelSnapshots) {_                        for (String stateDocId : modelSnapshot.legacyStateDocumentIds()) {_                            bulkRequestBuilder.add(client.prepareDelete(stateIndexName, ModelState.TYPE, stateDocId))__                        }__                        bulkRequestBuilder.add(client.prepareDelete(AnomalyDetectorsIndex.jobResultsAliasedName(modelSnapshot.getJobId()),_                                ModelSnapshot.TYPE.getPreferredName(), ModelSnapshot.v54DocumentId(modelSnapshot)))__                    }__                    bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)__                    try {_                        bulkRequestBuilder.execute(ActionListener.wrap(_                                listener::onResponse,_                                _                                _                                e -> {_                                    if (e instanceof IllegalArgumentException_                                            && e.getMessage().contains("as the final mapping would have more than 1 type")) {_                                        listener.onResponse(response)__                                    }_                                    listener.onFailure(e)__                                }_                        ))__                    } catch (Exception e) {_                        listener.onFailure(e)__                    }_                },_                listener::onFailure_        )___        BulkRequestBuilder bulkRequestBuilder = client.prepareBulk()__        for (ModelSnapshot modelSnapshot : modelSnapshots) {_            for (String stateDocId : modelSnapshot.stateDocumentIds()) {_                bulkRequestBuilder.add(client.prepareDelete(stateIndexName, ElasticsearchMappings.DOC_TYPE, stateDocId))__            }__            bulkRequestBuilder.add(client.prepareDelete(AnomalyDetectorsIndex.jobResultsAliasedName(modelSnapshot.getJobId()),_                    ElasticsearchMappings.DOC_TYPE, ModelSnapshot.documentId(modelSnapshot)))__        }__        bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)__        try {_            executeAsyncWithOrigin(client, ML_ORIGIN, BulkAction.INSTANCE, bulkRequestBuilder.request(), docDeleteListener)__        } catch (Exception e) {_            listener.onFailure(e)__        }_    };delete,a,list,of,model,snapshots,and,their,corresponding,state,documents,param,model,snapshots,the,model,snapshots,to,delete;public,void,delete,model,snapshots,list,model,snapshot,model,snapshots,action,listener,bulk,response,listener,if,model,snapshots,is,empty,listener,on,response,new,bulk,response,new,bulk,item,response,0,0l,return,string,state,index,name,anomaly,detectors,index,job,state,index,name,action,listener,bulk,response,doc,delete,listener,action,listener,wrap,response,if,response,has,failures,false,listener,on,response,response,return,bulk,request,builder,bulk,request,builder,client,prepare,bulk,for,model,snapshot,model,snapshot,model,snapshots,for,string,state,doc,id,model,snapshot,legacy,state,document,ids,bulk,request,builder,add,client,prepare,delete,state,index,name,model,state,type,state,doc,id,bulk,request,builder,add,client,prepare,delete,anomaly,detectors,index,job,results,aliased,name,model,snapshot,get,job,id,model,snapshot,type,get,preferred,name,model,snapshot,v54document,id,model,snapshot,bulk,request,builder,set,refresh,policy,write,request,refresh,policy,immediate,try,bulk,request,builder,execute,action,listener,wrap,listener,on,response,e,if,e,instanceof,illegal,argument,exception,e,get,message,contains,as,the,final,mapping,would,have,more,than,1,type,listener,on,response,response,listener,on,failure,e,catch,exception,e,listener,on,failure,e,listener,on,failure,bulk,request,builder,bulk,request,builder,client,prepare,bulk,for,model,snapshot,model,snapshot,model,snapshots,for,string,state,doc,id,model,snapshot,state,document,ids,bulk,request,builder,add,client,prepare,delete,state,index,name,elasticsearch,mappings,state,doc,id,bulk,request,builder,add,client,prepare,delete,anomaly,detectors,index,job,results,aliased,name,model,snapshot,get,job,id,elasticsearch,mappings,model,snapshot,document,id,model,snapshot,bulk,request,builder,set,refresh,policy,write,request,refresh,policy,immediate,try,execute,async,with,origin,client,bulk,action,instance,bulk,request,builder,request,doc,delete,listener,catch,exception,e,listener,on,failure,e
JobDataDeleter -> public void deleteModelSnapshots(List<ModelSnapshot> modelSnapshots, ActionListener<BulkResponse> listener);1540847035;Delete a list of model snapshots and their corresponding state documents.__@param modelSnapshots the model snapshots to delete;public void deleteModelSnapshots(List<ModelSnapshot> modelSnapshots, ActionListener<BulkResponse> listener) {_        if (modelSnapshots.isEmpty()) {_            listener.onResponse(new BulkResponse(new BulkItemResponse[0], 0L))__            return__        }__        String stateIndexName = AnomalyDetectorsIndex.jobStateIndexName()___        _        ActionListener<BulkResponse> docDeleteListener = ActionListener.wrap(_                response -> {_                    _                    if (response.hasFailures() == false) {_                        listener.onResponse(response)__                        return__                    }_                    BulkRequestBuilder bulkRequestBuilder = client.prepareBulk()__                    for (ModelSnapshot modelSnapshot : modelSnapshots) {_                        for (String stateDocId : modelSnapshot.legacyStateDocumentIds()) {_                            bulkRequestBuilder.add(client.prepareDelete(stateIndexName, ModelState.TYPE, stateDocId))__                        }__                        bulkRequestBuilder.add(client.prepareDelete(AnomalyDetectorsIndex.jobResultsAliasedName(modelSnapshot.getJobId()),_                                ModelSnapshot.TYPE.getPreferredName(), ModelSnapshot.v54DocumentId(modelSnapshot)))__                    }__                    bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)__                    try {_                        bulkRequestBuilder.execute(ActionListener.wrap(_                                listener::onResponse,_                                _                                _                                e -> {_                                    if (e instanceof IllegalArgumentException_                                            && e.getMessage().contains("as the final mapping would have more than 1 type")) {_                                        listener.onResponse(response)__                                    }_                                    listener.onFailure(e)__                                }_                        ))__                    } catch (Exception e) {_                        listener.onFailure(e)__                    }_                },_                listener::onFailure_        )___        BulkRequestBuilder bulkRequestBuilder = client.prepareBulk()__        for (ModelSnapshot modelSnapshot : modelSnapshots) {_            for (String stateDocId : modelSnapshot.stateDocumentIds()) {_                bulkRequestBuilder.add(client.prepareDelete(stateIndexName, ElasticsearchMappings.DOC_TYPE, stateDocId))__            }__            bulkRequestBuilder.add(client.prepareDelete(AnomalyDetectorsIndex.jobResultsAliasedName(modelSnapshot.getJobId()),_                    ElasticsearchMappings.DOC_TYPE, ModelSnapshot.documentId(modelSnapshot)))__        }__        bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)__        try {_            executeAsyncWithOrigin(client, ML_ORIGIN, BulkAction.INSTANCE, bulkRequestBuilder.request(), docDeleteListener)__        } catch (Exception e) {_            listener.onFailure(e)__        }_    };delete,a,list,of,model,snapshots,and,their,corresponding,state,documents,param,model,snapshots,the,model,snapshots,to,delete;public,void,delete,model,snapshots,list,model,snapshot,model,snapshots,action,listener,bulk,response,listener,if,model,snapshots,is,empty,listener,on,response,new,bulk,response,new,bulk,item,response,0,0l,return,string,state,index,name,anomaly,detectors,index,job,state,index,name,action,listener,bulk,response,doc,delete,listener,action,listener,wrap,response,if,response,has,failures,false,listener,on,response,response,return,bulk,request,builder,bulk,request,builder,client,prepare,bulk,for,model,snapshot,model,snapshot,model,snapshots,for,string,state,doc,id,model,snapshot,legacy,state,document,ids,bulk,request,builder,add,client,prepare,delete,state,index,name,model,state,type,state,doc,id,bulk,request,builder,add,client,prepare,delete,anomaly,detectors,index,job,results,aliased,name,model,snapshot,get,job,id,model,snapshot,type,get,preferred,name,model,snapshot,v54document,id,model,snapshot,bulk,request,builder,set,refresh,policy,write,request,refresh,policy,immediate,try,bulk,request,builder,execute,action,listener,wrap,listener,on,response,e,if,e,instanceof,illegal,argument,exception,e,get,message,contains,as,the,final,mapping,would,have,more,than,1,type,listener,on,response,response,listener,on,failure,e,catch,exception,e,listener,on,failure,e,listener,on,failure,bulk,request,builder,bulk,request,builder,client,prepare,bulk,for,model,snapshot,model,snapshot,model,snapshots,for,string,state,doc,id,model,snapshot,state,document,ids,bulk,request,builder,add,client,prepare,delete,state,index,name,elasticsearch,mappings,state,doc,id,bulk,request,builder,add,client,prepare,delete,anomaly,detectors,index,job,results,aliased,name,model,snapshot,get,job,id,elasticsearch,mappings,model,snapshot,document,id,model,snapshot,bulk,request,builder,set,refresh,policy,write,request,refresh,policy,immediate,try,execute,async,with,origin,client,bulk,action,instance,bulk,request,builder,request,doc,delete,listener,catch,exception,e,listener,on,failure,e
JobDataDeleter -> public void deleteModelSnapshots(List<ModelSnapshot> modelSnapshots, ActionListener<BulkResponse> listener);1545310197;Delete a list of model snapshots and their corresponding state documents.__@param modelSnapshots the model snapshots to delete;public void deleteModelSnapshots(List<ModelSnapshot> modelSnapshots, ActionListener<BulkResponse> listener) {_        if (modelSnapshots.isEmpty()) {_            listener.onResponse(new BulkResponse(new BulkItemResponse[0], 0L))__            return__        }__        String stateIndexName = AnomalyDetectorsIndex.jobStateIndexName()___        BulkRequestBuilder bulkRequestBuilder = client.prepareBulk()__        for (ModelSnapshot modelSnapshot : modelSnapshots) {_            for (String stateDocId : modelSnapshot.stateDocumentIds()) {_                bulkRequestBuilder.add(client.prepareDelete(stateIndexName, ElasticsearchMappings.DOC_TYPE, stateDocId))__            }__            bulkRequestBuilder.add(client.prepareDelete(AnomalyDetectorsIndex.jobResultsAliasedName(modelSnapshot.getJobId()),_                    ElasticsearchMappings.DOC_TYPE, ModelSnapshot.documentId(modelSnapshot)))__        }__        bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)__        try {_            executeAsyncWithOrigin(client, ML_ORIGIN, BulkAction.INSTANCE, bulkRequestBuilder.request(), listener)__        } catch (Exception e) {_            listener.onFailure(e)__        }_    };delete,a,list,of,model,snapshots,and,their,corresponding,state,documents,param,model,snapshots,the,model,snapshots,to,delete;public,void,delete,model,snapshots,list,model,snapshot,model,snapshots,action,listener,bulk,response,listener,if,model,snapshots,is,empty,listener,on,response,new,bulk,response,new,bulk,item,response,0,0l,return,string,state,index,name,anomaly,detectors,index,job,state,index,name,bulk,request,builder,bulk,request,builder,client,prepare,bulk,for,model,snapshot,model,snapshot,model,snapshots,for,string,state,doc,id,model,snapshot,state,document,ids,bulk,request,builder,add,client,prepare,delete,state,index,name,elasticsearch,mappings,state,doc,id,bulk,request,builder,add,client,prepare,delete,anomaly,detectors,index,job,results,aliased,name,model,snapshot,get,job,id,elasticsearch,mappings,model,snapshot,document,id,model,snapshot,bulk,request,builder,set,refresh,policy,write,request,refresh,policy,immediate,try,execute,async,with,origin,client,bulk,action,instance,bulk,request,builder,request,listener,catch,exception,e,listener,on,failure,e
JobDataDeleter -> public void deleteResultsFromTime(long cutoffEpochMs, ActionListener<Boolean> listener);1537806831;Asynchronously delete all result types (Buckets, Records, Influencers) from {@code cutOffTime}__@param cutoffEpochMs Results at and after this time will be deleted_@param listener Response listener;public void deleteResultsFromTime(long cutoffEpochMs, ActionListener<Boolean> listener) {_        DeleteByQueryHolder deleteByQueryHolder = new DeleteByQueryHolder(AnomalyDetectorsIndex.jobResultsAliasedName(jobId))__        deleteByQueryHolder.dbqRequest.setRefresh(true)___        QueryBuilder query = QueryBuilders.boolQuery()_                .filter(QueryBuilders.existsQuery(Result.RESULT_TYPE.getPreferredName()))_                .filter(QueryBuilders.rangeQuery(Result.TIMESTAMP.getPreferredName()).gte(cutoffEpochMs))__        deleteByQueryHolder.dbqRequest.setIndicesOptions(IndicesOptions.lenientExpandOpen())__        deleteByQueryHolder.dbqRequest.setQuery(query)__        executeAsyncWithOrigin(client, ML_ORIGIN, DeleteByQueryAction.INSTANCE, deleteByQueryHolder.dbqRequest,_                ActionListener.wrap(r -> listener.onResponse(true), listener::onFailure))__    };asynchronously,delete,all,result,types,buckets,records,influencers,from,code,cut,off,time,param,cutoff,epoch,ms,results,at,and,after,this,time,will,be,deleted,param,listener,response,listener;public,void,delete,results,from,time,long,cutoff,epoch,ms,action,listener,boolean,listener,delete,by,query,holder,delete,by,query,holder,new,delete,by,query,holder,anomaly,detectors,index,job,results,aliased,name,job,id,delete,by,query,holder,dbq,request,set,refresh,true,query,builder,query,query,builders,bool,query,filter,query,builders,exists,query,result,get,preferred,name,filter,query,builders,range,query,result,timestamp,get,preferred,name,gte,cutoff,epoch,ms,delete,by,query,holder,dbq,request,set,indices,options,indices,options,lenient,expand,open,delete,by,query,holder,dbq,request,set,query,query,execute,async,with,origin,client,delete,by,query,action,instance,delete,by,query,holder,dbq,request,action,listener,wrap,r,listener,on,response,true,listener,on,failure
JobDataDeleter -> public void deleteResultsFromTime(long cutoffEpochMs, ActionListener<Boolean> listener);1540847035;Asynchronously delete all result types (Buckets, Records, Influencers) from {@code cutOffTime}__@param cutoffEpochMs Results at and after this time will be deleted_@param listener Response listener;public void deleteResultsFromTime(long cutoffEpochMs, ActionListener<Boolean> listener) {_        DeleteByQueryHolder deleteByQueryHolder = new DeleteByQueryHolder(AnomalyDetectorsIndex.jobResultsAliasedName(jobId))__        deleteByQueryHolder.dbqRequest.setRefresh(true)___        QueryBuilder query = QueryBuilders.boolQuery()_                .filter(QueryBuilders.existsQuery(Result.RESULT_TYPE.getPreferredName()))_                .filter(QueryBuilders.rangeQuery(Result.TIMESTAMP.getPreferredName()).gte(cutoffEpochMs))__        deleteByQueryHolder.dbqRequest.setIndicesOptions(IndicesOptions.lenientExpandOpen())__        deleteByQueryHolder.dbqRequest.setQuery(query)__        executeAsyncWithOrigin(client, ML_ORIGIN, DeleteByQueryAction.INSTANCE, deleteByQueryHolder.dbqRequest,_                ActionListener.wrap(r -> listener.onResponse(true), listener::onFailure))__    };asynchronously,delete,all,result,types,buckets,records,influencers,from,code,cut,off,time,param,cutoff,epoch,ms,results,at,and,after,this,time,will,be,deleted,param,listener,response,listener;public,void,delete,results,from,time,long,cutoff,epoch,ms,action,listener,boolean,listener,delete,by,query,holder,delete,by,query,holder,new,delete,by,query,holder,anomaly,detectors,index,job,results,aliased,name,job,id,delete,by,query,holder,dbq,request,set,refresh,true,query,builder,query,query,builders,bool,query,filter,query,builders,exists,query,result,get,preferred,name,filter,query,builders,range,query,result,timestamp,get,preferred,name,gte,cutoff,epoch,ms,delete,by,query,holder,dbq,request,set,indices,options,indices,options,lenient,expand,open,delete,by,query,holder,dbq,request,set,query,query,execute,async,with,origin,client,delete,by,query,action,instance,delete,by,query,holder,dbq,request,action,listener,wrap,r,listener,on,response,true,listener,on,failure
JobDataDeleter -> public void deleteResultsFromTime(long cutoffEpochMs, ActionListener<Boolean> listener);1545310197;Asynchronously delete all result types (Buckets, Records, Influencers) from {@code cutOffTime}__@param cutoffEpochMs Results at and after this time will be deleted_@param listener Response listener;public void deleteResultsFromTime(long cutoffEpochMs, ActionListener<Boolean> listener) {_        DeleteByQueryHolder deleteByQueryHolder = new DeleteByQueryHolder(AnomalyDetectorsIndex.jobResultsAliasedName(jobId))__        deleteByQueryHolder.dbqRequest.setRefresh(true)___        QueryBuilder query = QueryBuilders.boolQuery()_                .filter(QueryBuilders.existsQuery(Result.RESULT_TYPE.getPreferredName()))_                .filter(QueryBuilders.rangeQuery(Result.TIMESTAMP.getPreferredName()).gte(cutoffEpochMs))__        deleteByQueryHolder.dbqRequest.setIndicesOptions(IndicesOptions.lenientExpandOpen())__        deleteByQueryHolder.dbqRequest.setQuery(query)__        executeAsyncWithOrigin(client, ML_ORIGIN, DeleteByQueryAction.INSTANCE, deleteByQueryHolder.dbqRequest,_                ActionListener.wrap(r -> listener.onResponse(true), listener::onFailure))__    };asynchronously,delete,all,result,types,buckets,records,influencers,from,code,cut,off,time,param,cutoff,epoch,ms,results,at,and,after,this,time,will,be,deleted,param,listener,response,listener;public,void,delete,results,from,time,long,cutoff,epoch,ms,action,listener,boolean,listener,delete,by,query,holder,delete,by,query,holder,new,delete,by,query,holder,anomaly,detectors,index,job,results,aliased,name,job,id,delete,by,query,holder,dbq,request,set,refresh,true,query,builder,query,query,builders,bool,query,filter,query,builders,exists,query,result,get,preferred,name,filter,query,builders,range,query,result,timestamp,get,preferred,name,gte,cutoff,epoch,ms,delete,by,query,holder,dbq,request,set,indices,options,indices,options,lenient,expand,open,delete,by,query,holder,dbq,request,set,query,query,execute,async,with,origin,client,delete,by,query,action,instance,delete,by,query,holder,dbq,request,action,listener,wrap,r,listener,on,response,true,listener,on,failure
JobDataDeleter -> public void deleteResultsFromTime(long cutoffEpochMs, ActionListener<Boolean> listener);1547215421;Asynchronously delete all result types (Buckets, Records, Influencers) from {@code cutOffTime}__@param cutoffEpochMs Results at and after this time will be deleted_@param listener Response listener;public void deleteResultsFromTime(long cutoffEpochMs, ActionListener<Boolean> listener) {_        DeleteByQueryHolder deleteByQueryHolder = new DeleteByQueryHolder(AnomalyDetectorsIndex.jobResultsAliasedName(jobId))__        deleteByQueryHolder.dbqRequest.setRefresh(true)___        QueryBuilder query = QueryBuilders.boolQuery()_                .filter(QueryBuilders.existsQuery(Result.RESULT_TYPE.getPreferredName()))_                .filter(QueryBuilders.rangeQuery(Result.TIMESTAMP.getPreferredName()).gte(cutoffEpochMs))__        deleteByQueryHolder.dbqRequest.setIndicesOptions(IndicesOptions.lenientExpandOpen())__        deleteByQueryHolder.dbqRequest.setQuery(query)__        executeAsyncWithOrigin(client, ML_ORIGIN, DeleteByQueryAction.INSTANCE, deleteByQueryHolder.dbqRequest,_                ActionListener.wrap(r -> listener.onResponse(true), listener::onFailure))__    };asynchronously,delete,all,result,types,buckets,records,influencers,from,code,cut,off,time,param,cutoff,epoch,ms,results,at,and,after,this,time,will,be,deleted,param,listener,response,listener;public,void,delete,results,from,time,long,cutoff,epoch,ms,action,listener,boolean,listener,delete,by,query,holder,delete,by,query,holder,new,delete,by,query,holder,anomaly,detectors,index,job,results,aliased,name,job,id,delete,by,query,holder,dbq,request,set,refresh,true,query,builder,query,query,builders,bool,query,filter,query,builders,exists,query,result,get,preferred,name,filter,query,builders,range,query,result,timestamp,get,preferred,name,gte,cutoff,epoch,ms,delete,by,query,holder,dbq,request,set,indices,options,indices,options,lenient,expand,open,delete,by,query,holder,dbq,request,set,query,query,execute,async,with,origin,client,delete,by,query,action,instance,delete,by,query,holder,dbq,request,action,listener,wrap,r,listener,on,response,true,listener,on,failure
