commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getAlias() {     return alias. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public ExtractionMethod getExtractionMethod() {     return extractionMethod. }
false;public,abstract;1;1;;public abstract Object[] value(SearchHit hit).
false;public;0;3;;public String getDocValueFormat() {     return null. }
false;public,static;2;6;;public static ExtractedField newTimeField(String name, ExtractionMethod extractionMethod) {     if (extractionMethod == ExtractionMethod.SOURCE) {         throw new IllegalArgumentException("time field cannot be extracted from source").     }     return new TimeField(name, extractionMethod). }
false;public,static;2;3;;public static ExtractedField newField(String name, ExtractionMethod extractionMethod) {     return newField(name, name, extractionMethod). }
false;public,static;3;11;;public static ExtractedField newField(String alias, String name, ExtractionMethod extractionMethod) {     switch(extractionMethod) {         case DOC_VALUE:         case SCRIPT_FIELD:             return new FromFields(alias, name, extractionMethod).         case SOURCE:             return new FromSource(alias, name, extractionMethod).         default:             throw new IllegalArgumentException("Invalid extraction method [" + extractionMethod + "]").     } }
false;public;1;9;;@Override public Object[] value(SearchHit hit) {     DocumentField keyValue = hit.field(name).     if (keyValue != null) {         List<Object> values = keyValue.getValues().         return values.toArray(new Object[values.size()]).     }     return new Object[0]. }
false;public;1;13;;@Override public Object[] value(SearchHit hit) {     Object[] value = super.value(hit).     if (value.length != 1) {         return value.     }     if (value[0] instanceof String) {         // doc_value field with the epoch_millis format         value[0] = Long.parseLong((String) value[0]).     } else if (value[0] instanceof Long == false) {         // pre-6.0 field         throw new IllegalStateException("Unexpected value for a time field: " + value[0].getClass()).     }     return value. }
false;public;0;4;;@Override public String getDocValueFormat() {     return EPOCH_MILLIS_FORMAT. }
false;public;1;22;;@Override public Object[] value(SearchHit hit) {     Map<String, Object> source = hit.getSourceAsMap().     int level = 0.     while (source != null && level < namePath.length - 1) {         source = getNextLevel(source, namePath[level]).         level++.     }     if (source != null) {         Object values = source.get(namePath[level]).         if (values != null) {             if (values instanceof List<?>) {                 @SuppressWarnings("unchecked")                 List<Object> asList = (List<Object>) values.                 return asList.toArray(new Object[asList.size()]).             } else {                 return new Object[] { values }.             }         }     }     return new Object[0]. }
false;private,static;2;8;;@SuppressWarnings("unchecked") private static Map<String, Object> getNextLevel(Map<String, Object> source, String key) {     Object nextLevel = source.get(key).     if (nextLevel instanceof Map<?, ?>) {         return (Map<String, Object>) source.get(key).     }     return null. }
