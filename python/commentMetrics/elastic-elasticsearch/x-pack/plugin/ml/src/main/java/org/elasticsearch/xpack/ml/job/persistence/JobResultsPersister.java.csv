# id;timestamp;commentText;codeText;commentWords;codeWords
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,                                       ActionListener<IndexResponse> listener);1524684173;Persist the memory usage data;public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,_                                      ActionListener<IndexResponse> listener) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId), listener)__    };persist,the,memory,usage,data;public,void,persist,model,size,stats,model,size,stats,model,size,stats,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,listener
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,                                       ActionListener<IndexResponse> listener);1537806831;Persist the memory usage data;public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,_                                      ActionListener<IndexResponse> listener) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId), listener)__    };persist,the,memory,usage,data;public,void,persist,model,size,stats,model,size,stats,model,size,stats,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,listener
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,                                       ActionListener<IndexResponse> listener);1541092382;Persist the memory usage data;public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,_                                      ActionListener<IndexResponse> listener) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId), listener)__    };persist,the,memory,usage,data;public,void,persist,model,size,stats,model,size,stats,model,size,stats,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,listener
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,                                       ActionListener<IndexResponse> listener);1543343306;Persist the memory usage data;public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,_                                      ActionListener<IndexResponse> listener) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId), listener)__    };persist,the,memory,usage,data;public,void,persist,model,size,stats,model,size,stats,model,size,stats,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,listener
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,                                       ActionListener<IndexResponse> listener);1545155131;Persist the memory usage data;public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,_                                      ActionListener<IndexResponse> listener) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId), listener)__    };persist,the,memory,usage,data;public,void,persist,model,size,stats,model,size,stats,model,size,stats,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,listener
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,                                       ActionListener<IndexResponse> listener);1547215421;Persist the memory usage data;public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,_                                      ActionListener<IndexResponse> listener) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId), listener)__    };persist,the,memory,usage,data;public,void,persist,model,size,stats,model,size,stats,model,size,stats,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,listener
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,                                       ActionListener<IndexResponse> listener);1547843554;Persist the memory usage data;public void persistModelSizeStats(ModelSizeStats modelSizeStats, WriteRequest.RefreshPolicy refreshPolicy,_                                      ActionListener<IndexResponse> listener) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId), listener)__    };persist,the,memory,usage,data;public,void,persist,model,size,stats,model,size,stats,model,size,stats,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,listener
JobResultsPersister -> public IndexResponse persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy);1545155131;Persist a model snapshot description;public IndexResponse persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy) {_        Persistable persistable = new Persistable(modelSnapshot.getJobId(), modelSnapshot, ModelSnapshot.documentId(modelSnapshot))__        persistable.setRefreshPolicy(refreshPolicy)__        return persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(modelSnapshot.getJobId())).actionGet()__    };persist,a,model,snapshot,description;public,index,response,persist,model,snapshot,model,snapshot,model,snapshot,write,request,refresh,policy,refresh,policy,persistable,persistable,new,persistable,model,snapshot,get,job,id,model,snapshot,model,snapshot,document,id,model,snapshot,persistable,set,refresh,policy,refresh,policy,return,persistable,persist,anomaly,detectors,index,results,write,alias,model,snapshot,get,job,id,action,get
JobResultsPersister -> public IndexResponse persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy);1547215421;Persist a model snapshot description;public IndexResponse persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy) {_        Persistable persistable = new Persistable(modelSnapshot.getJobId(), modelSnapshot, ModelSnapshot.documentId(modelSnapshot))__        persistable.setRefreshPolicy(refreshPolicy)__        return persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(modelSnapshot.getJobId())).actionGet()__    };persist,a,model,snapshot,description;public,index,response,persist,model,snapshot,model,snapshot,model,snapshot,write,request,refresh,policy,refresh,policy,persistable,persistable,new,persistable,model,snapshot,get,job,id,model,snapshot,model,snapshot,document,id,model,snapshot,persistable,set,refresh,policy,refresh,policy,return,persistable,persist,anomaly,detectors,index,results,write,alias,model,snapshot,get,job,id,action,get
JobResultsPersister -> public IndexResponse persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy);1547843554;Persist a model snapshot description;public IndexResponse persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy) {_        Persistable persistable = new Persistable(modelSnapshot.getJobId(), modelSnapshot, ModelSnapshot.documentId(modelSnapshot))__        persistable.setRefreshPolicy(refreshPolicy)__        return persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(modelSnapshot.getJobId())).actionGet()__    };persist,a,model,snapshot,description;public,index,response,persist,model,snapshot,model,snapshot,model,snapshot,write,request,refresh,policy,refresh,policy,persistable,persistable,new,persistable,model,snapshot,get,job,id,model,snapshot,model,snapshot,document,id,model,snapshot,persistable,set,refresh,policy,refresh,policy,return,persistable,persist,anomaly,detectors,index,results,write,alias,model,snapshot,get,job,id,action,get
JobResultsPersister -> public void persistCategoryDefinition(CategoryDefinition category);1524684173;Persist the category definition__@param category The category to be persisted;public void persistCategoryDefinition(CategoryDefinition category) {_        Persistable persistable = new Persistable(category.getJobId(), category, category.getId())___        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(category.getJobId())).actionGet()__        _        _    };persist,the,category,definition,param,category,the,category,to,be,persisted;public,void,persist,category,definition,category,definition,category,persistable,persistable,new,persistable,category,get,job,id,category,category,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,category,get,job,id,action,get
JobResultsPersister -> public void persistCategoryDefinition(CategoryDefinition category);1537806831;Persist the category definition__@param category The category to be persisted;public void persistCategoryDefinition(CategoryDefinition category) {_        Persistable persistable = new Persistable(category.getJobId(), category, category.getId())___        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(category.getJobId())).actionGet()__        _        _    };persist,the,category,definition,param,category,the,category,to,be,persisted;public,void,persist,category,definition,category,definition,category,persistable,persistable,new,persistable,category,get,job,id,category,category,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,category,get,job,id,action,get
JobResultsPersister -> public void persistCategoryDefinition(CategoryDefinition category);1541092382;Persist the category definition__@param category The category to be persisted;public void persistCategoryDefinition(CategoryDefinition category) {_        Persistable persistable = new Persistable(category.getJobId(), category, category.getId())___        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(category.getJobId())).actionGet()__        _        _    };persist,the,category,definition,param,category,the,category,to,be,persisted;public,void,persist,category,definition,category,definition,category,persistable,persistable,new,persistable,category,get,job,id,category,category,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,category,get,job,id,action,get
JobResultsPersister -> public void persistCategoryDefinition(CategoryDefinition category);1543343306;Persist the category definition__@param category The category to be persisted;public void persistCategoryDefinition(CategoryDefinition category) {_        Persistable persistable = new Persistable(category.getJobId(), category, category.getId())___        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(category.getJobId())).actionGet()__        _        _    };persist,the,category,definition,param,category,the,category,to,be,persisted;public,void,persist,category,definition,category,definition,category,persistable,persistable,new,persistable,category,get,job,id,category,category,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,category,get,job,id,action,get
JobResultsPersister -> public void persistCategoryDefinition(CategoryDefinition category);1545155131;Persist the category definition__@param category The category to be persisted;public void persistCategoryDefinition(CategoryDefinition category) {_        Persistable persistable = new Persistable(category.getJobId(), category, category.getId())___        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(category.getJobId())).actionGet()__        _        _    };persist,the,category,definition,param,category,the,category,to,be,persisted;public,void,persist,category,definition,category,definition,category,persistable,persistable,new,persistable,category,get,job,id,category,category,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,category,get,job,id,action,get
JobResultsPersister -> public void persistCategoryDefinition(CategoryDefinition category);1547215421;Persist the category definition__@param category The category to be persisted;public void persistCategoryDefinition(CategoryDefinition category) {_        Persistable persistable = new Persistable(category.getJobId(), category, category.getId())___        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(category.getJobId())).actionGet()__        _        _    };persist,the,category,definition,param,category,the,category,to,be,persisted;public,void,persist,category,definition,category,definition,category,persistable,persistable,new,persistable,category,get,job,id,category,category,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,category,get,job,id,action,get
JobResultsPersister -> public void persistCategoryDefinition(CategoryDefinition category);1547843554;Persist the category definition__@param category The category to be persisted;public void persistCategoryDefinition(CategoryDefinition category) {_        Persistable persistable = new Persistable(category.getJobId(), category, category.getId())___        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(category.getJobId())).actionGet()__        _        _    };persist,the,category,definition,param,category,the,category,to,be,persisted;public,void,persist,category,definition,category,definition,category,persistable,persistable,new,persistable,category,get,job,id,category,category,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,category,get,job,id,action,get
JobResultsPersister -> Builder -> public void executeRequest();1524684173;Execute the bulk action;public void executeRequest() {_            if (bulkRequest.numberOfActions() == 0) {_                return__            }_            logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions())___            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_                BulkResponse addRecordsResponse = client.bulk(bulkRequest).actionGet()__                if (addRecordsResponse.hasFailures()) {_                    logger.error("[{}] Bulk index of results has errors: {}", jobId, addRecordsResponse.buildFailureMessage())__                }_            }__            bulkRequest = new BulkRequest()__        };execute,the,bulk,action;public,void,execute,request,if,bulk,request,number,of,actions,0,return,logger,trace,es,api,call,bulk,request,with,actions,job,id,bulk,request,number,of,actions,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,bulk,response,add,records,response,client,bulk,bulk,request,action,get,if,add,records,response,has,failures,logger,error,bulk,index,of,results,has,errors,job,id,add,records,response,build,failure,message,bulk,request,new,bulk,request
JobResultsPersister -> Builder -> public void executeRequest();1537806831;Execute the bulk action;public void executeRequest() {_            if (bulkRequest.numberOfActions() == 0) {_                return__            }_            logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions())___            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_                BulkResponse addRecordsResponse = client.bulk(bulkRequest).actionGet()__                if (addRecordsResponse.hasFailures()) {_                    logger.error("[{}] Bulk index of results has errors: {}", jobId, addRecordsResponse.buildFailureMessage())__                }_            }__            bulkRequest = new BulkRequest()__        };execute,the,bulk,action;public,void,execute,request,if,bulk,request,number,of,actions,0,return,logger,trace,es,api,call,bulk,request,with,actions,job,id,bulk,request,number,of,actions,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,bulk,response,add,records,response,client,bulk,bulk,request,action,get,if,add,records,response,has,failures,logger,error,bulk,index,of,results,has,errors,job,id,add,records,response,build,failure,message,bulk,request,new,bulk,request
JobResultsPersister -> Builder -> public void executeRequest();1541092382;Execute the bulk action;public void executeRequest() {_            if (bulkRequest.numberOfActions() == 0) {_                return__            }_            logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions())___            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_                BulkResponse addRecordsResponse = client.bulk(bulkRequest).actionGet()__                if (addRecordsResponse.hasFailures()) {_                    logger.error("[{}] Bulk index of results has errors: {}", jobId, addRecordsResponse.buildFailureMessage())__                }_            }__            bulkRequest = new BulkRequest()__        };execute,the,bulk,action;public,void,execute,request,if,bulk,request,number,of,actions,0,return,logger,trace,es,api,call,bulk,request,with,actions,job,id,bulk,request,number,of,actions,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,bulk,response,add,records,response,client,bulk,bulk,request,action,get,if,add,records,response,has,failures,logger,error,bulk,index,of,results,has,errors,job,id,add,records,response,build,failure,message,bulk,request,new,bulk,request
JobResultsPersister -> Builder -> public void executeRequest();1543343306;Execute the bulk action;public void executeRequest() {_            if (bulkRequest.numberOfActions() == 0) {_                return__            }_            logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions())___            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_                BulkResponse addRecordsResponse = client.bulk(bulkRequest).actionGet()__                if (addRecordsResponse.hasFailures()) {_                    logger.error("[{}] Bulk index of results has errors: {}", jobId, addRecordsResponse.buildFailureMessage())__                }_            }__            bulkRequest = new BulkRequest()__        };execute,the,bulk,action;public,void,execute,request,if,bulk,request,number,of,actions,0,return,logger,trace,es,api,call,bulk,request,with,actions,job,id,bulk,request,number,of,actions,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,bulk,response,add,records,response,client,bulk,bulk,request,action,get,if,add,records,response,has,failures,logger,error,bulk,index,of,results,has,errors,job,id,add,records,response,build,failure,message,bulk,request,new,bulk,request
JobResultsPersister -> Builder -> public void executeRequest();1545155131;Execute the bulk action;public void executeRequest() {_            if (bulkRequest.numberOfActions() == 0) {_                return__            }_            logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions())___            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_                BulkResponse addRecordsResponse = client.bulk(bulkRequest).actionGet()__                if (addRecordsResponse.hasFailures()) {_                    logger.error("[{}] Bulk index of results has errors: {}", jobId, addRecordsResponse.buildFailureMessage())__                }_            }__            bulkRequest = new BulkRequest()__        };execute,the,bulk,action;public,void,execute,request,if,bulk,request,number,of,actions,0,return,logger,trace,es,api,call,bulk,request,with,actions,job,id,bulk,request,number,of,actions,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,bulk,response,add,records,response,client,bulk,bulk,request,action,get,if,add,records,response,has,failures,logger,error,bulk,index,of,results,has,errors,job,id,add,records,response,build,failure,message,bulk,request,new,bulk,request
JobResultsPersister -> Builder -> public void executeRequest();1547215421;Execute the bulk action;public void executeRequest() {_            if (bulkRequest.numberOfActions() == 0) {_                return__            }_            logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions())___            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_                BulkResponse addRecordsResponse = client.bulk(bulkRequest).actionGet()__                if (addRecordsResponse.hasFailures()) {_                    logger.error("[{}] Bulk index of results has errors: {}", jobId, addRecordsResponse.buildFailureMessage())__                }_            }__            bulkRequest = new BulkRequest()__        };execute,the,bulk,action;public,void,execute,request,if,bulk,request,number,of,actions,0,return,logger,trace,es,api,call,bulk,request,with,actions,job,id,bulk,request,number,of,actions,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,bulk,response,add,records,response,client,bulk,bulk,request,action,get,if,add,records,response,has,failures,logger,error,bulk,index,of,results,has,errors,job,id,add,records,response,build,failure,message,bulk,request,new,bulk,request
JobResultsPersister -> Builder -> public void executeRequest();1547843554;Execute the bulk action;public void executeRequest() {_            if (bulkRequest.numberOfActions() == 0) {_                return__            }_            logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, bulkRequest.numberOfActions())___            try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_                BulkResponse addRecordsResponse = client.bulk(bulkRequest).actionGet()__                if (addRecordsResponse.hasFailures()) {_                    logger.error("[{}] Bulk index of results has errors: {}", jobId, addRecordsResponse.buildFailureMessage())__                }_            }__            bulkRequest = new BulkRequest()__        };execute,the,bulk,action;public,void,execute,request,if,bulk,request,number,of,actions,0,return,logger,trace,es,api,call,bulk,request,with,actions,job,id,bulk,request,number,of,actions,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,bulk,response,add,records,response,client,bulk,bulk,request,action,get,if,add,records,response,has,failures,logger,error,bulk,index,of,results,has,errors,job,id,add,records,response,build,failure,message,bulk,request,new,bulk,request
JobResultsPersister -> public void commitStateWrites(String jobId);1524684173;Once the job state has been written calling this function makes it_immediately searchable.__@param jobId The job Id;public void commitStateWrites(String jobId) {_        String indexName = AnomalyDetectorsIndex.jobStateIndexName()__        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,the,job,state,has,been,written,calling,this,function,makes,it,immediately,searchable,param,job,id,the,job,id;public,void,commit,state,writes,string,job,id,string,index,name,anomaly,detectors,index,job,state,index,name,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitStateWrites(String jobId);1537806831;Once the job state has been written calling this function makes it_immediately searchable.__@param jobId The job Id;public void commitStateWrites(String jobId) {_        String indexName = AnomalyDetectorsIndex.jobStateIndexName()__        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,the,job,state,has,been,written,calling,this,function,makes,it,immediately,searchable,param,job,id,the,job,id;public,void,commit,state,writes,string,job,id,string,index,name,anomaly,detectors,index,job,state,index,name,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitStateWrites(String jobId);1541092382;Once the job state has been written calling this function makes it_immediately searchable.__@param jobId The job Id;public void commitStateWrites(String jobId) {_        String indexName = AnomalyDetectorsIndex.jobStateIndexName()__        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,the,job,state,has,been,written,calling,this,function,makes,it,immediately,searchable,param,job,id,the,job,id;public,void,commit,state,writes,string,job,id,string,index,name,anomaly,detectors,index,job,state,index,name,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitStateWrites(String jobId);1543343306;Once the job state has been written calling this function makes it_immediately searchable.__@param jobId The job Id;public void commitStateWrites(String jobId) {_        String indexName = AnomalyDetectorsIndex.jobStateIndexName()__        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,the,job,state,has,been,written,calling,this,function,makes,it,immediately,searchable,param,job,id,the,job,id;public,void,commit,state,writes,string,job,id,string,index,name,anomaly,detectors,index,job,state,index,name,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitStateWrites(String jobId);1545155131;Once the job state has been written calling this function makes it_immediately searchable.__@param jobId The job Id;public void commitStateWrites(String jobId) {_        String indexName = AnomalyDetectorsIndex.jobStateIndexName()__        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,the,job,state,has,been,written,calling,this,function,makes,it,immediately,searchable,param,job,id,the,job,id;public,void,commit,state,writes,string,job,id,string,index,name,anomaly,detectors,index,job,state,index,name,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitStateWrites(String jobId);1547215421;Once the job state has been written calling this function makes it_immediately searchable.__@param jobId The job Id;public void commitStateWrites(String jobId) {_        String indexName = AnomalyDetectorsIndex.jobStateIndexPattern()__        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,the,job,state,has,been,written,calling,this,function,makes,it,immediately,searchable,param,job,id,the,job,id;public,void,commit,state,writes,string,job,id,string,index,name,anomaly,detectors,index,job,state,index,pattern,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitStateWrites(String jobId);1547843554;Once the job state has been written calling this function makes it_immediately searchable.__@param jobId The job Id;public void commitStateWrites(String jobId) {_        String indexName = AnomalyDetectorsIndex.jobStateIndexPattern()__        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,the,job,state,has,been,written,calling,this,function,makes,it,immediately,searchable,param,job,id,the,job,id;public,void,commit,state,writes,string,job,id,string,index,name,anomaly,detectors,index,job,state,index,pattern,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitResultWrites(String jobId);1524684173;Once all the job data has been written this function will be_called to commit the writes to the datastore.__@param jobId The job Id;public void commitResultWrites(String jobId) {_        _        _        String indexName = AnomalyDetectorsIndex.jobResultsAliasedName(jobId)___        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,all,the,job,data,has,been,written,this,function,will,be,called,to,commit,the,writes,to,the,datastore,param,job,id,the,job,id;public,void,commit,result,writes,string,job,id,string,index,name,anomaly,detectors,index,job,results,aliased,name,job,id,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitResultWrites(String jobId);1537806831;Once all the job data has been written this function will be_called to commit the writes to the datastore.__@param jobId The job Id;public void commitResultWrites(String jobId) {_        _        _        String indexName = AnomalyDetectorsIndex.jobResultsAliasedName(jobId)___        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,all,the,job,data,has,been,written,this,function,will,be,called,to,commit,the,writes,to,the,datastore,param,job,id,the,job,id;public,void,commit,result,writes,string,job,id,string,index,name,anomaly,detectors,index,job,results,aliased,name,job,id,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitResultWrites(String jobId);1541092382;Once all the job data has been written this function will be_called to commit the writes to the datastore.__@param jobId The job Id;public void commitResultWrites(String jobId) {_        _        _        String indexName = AnomalyDetectorsIndex.jobResultsAliasedName(jobId)___        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,all,the,job,data,has,been,written,this,function,will,be,called,to,commit,the,writes,to,the,datastore,param,job,id,the,job,id;public,void,commit,result,writes,string,job,id,string,index,name,anomaly,detectors,index,job,results,aliased,name,job,id,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitResultWrites(String jobId);1543343306;Once all the job data has been written this function will be_called to commit the writes to the datastore.__@param jobId The job Id;public void commitResultWrites(String jobId) {_        _        _        String indexName = AnomalyDetectorsIndex.jobResultsAliasedName(jobId)___        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,all,the,job,data,has,been,written,this,function,will,be,called,to,commit,the,writes,to,the,datastore,param,job,id,the,job,id;public,void,commit,result,writes,string,job,id,string,index,name,anomaly,detectors,index,job,results,aliased,name,job,id,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitResultWrites(String jobId);1545155131;Once all the job data has been written this function will be_called to commit the writes to the datastore.__@param jobId The job Id;public void commitResultWrites(String jobId) {_        _        _        String indexName = AnomalyDetectorsIndex.jobResultsAliasedName(jobId)___        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,all,the,job,data,has,been,written,this,function,will,be,called,to,commit,the,writes,to,the,datastore,param,job,id,the,job,id;public,void,commit,result,writes,string,job,id,string,index,name,anomaly,detectors,index,job,results,aliased,name,job,id,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitResultWrites(String jobId);1547215421;Once all the job data has been written this function will be_called to commit the writes to the datastore.__@param jobId The job Id;public void commitResultWrites(String jobId) {_        _        _        String indexName = AnomalyDetectorsIndex.jobResultsAliasedName(jobId)___        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,all,the,job,data,has,been,written,this,function,will,be,called,to,commit,the,writes,to,the,datastore,param,job,id,the,job,id;public,void,commit,result,writes,string,job,id,string,index,name,anomaly,detectors,index,job,results,aliased,name,job,id,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void commitResultWrites(String jobId);1547843554;Once all the job data has been written this function will be_called to commit the writes to the datastore.__@param jobId The job Id;public void commitResultWrites(String jobId) {_        _        _        String indexName = AnomalyDetectorsIndex.jobResultsAliasedName(jobId)___        _        logger.trace("[{}] ES API CALL: refresh index {}", jobId, indexName)__        RefreshRequest refreshRequest = new RefreshRequest(indexName)__        refreshRequest.indicesOptions(IndicesOptions.lenientExpandOpen())__        try (ThreadContext.StoredContext ignore = stashWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN)) {_            client.admin().indices().refresh(refreshRequest).actionGet()__        }_    };once,all,the,job,data,has,been,written,this,function,will,be,called,to,commit,the,writes,to,the,datastore,param,job,id,the,job,id;public,void,commit,result,writes,string,job,id,string,index,name,anomaly,detectors,index,job,results,aliased,name,job,id,logger,trace,es,api,call,refresh,index,job,id,index,name,refresh,request,refresh,request,new,refresh,request,index,name,refresh,request,indices,options,indices,options,lenient,expand,open,try,thread,context,stored,context,ignore,stash,with,origin,client,thread,pool,get,thread,context,client,admin,indices,refresh,refresh,request,action,get
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener);1524684173;Persist the quantiles (async);public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName(), listener)__    };persist,the,quantiles,async;public,void,persist,quantiles,quantiles,quantiles,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,job,state,index,name,listener
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener);1537806831;Persist the quantiles (async);public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName(), listener)__    };persist,the,quantiles,async;public,void,persist,quantiles,quantiles,quantiles,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,job,state,index,name,listener
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener);1541092382;Persist the quantiles (async);public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName(), listener)__    };persist,the,quantiles,async;public,void,persist,quantiles,quantiles,quantiles,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,job,state,index,name,listener
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener);1543343306;Persist the quantiles (async);public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName(), listener)__    };persist,the,quantiles,async;public,void,persist,quantiles,quantiles,quantiles,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,job,state,index,name,listener
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener);1545155131;Persist the quantiles (async);public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName(), listener)__    };persist,the,quantiles,async;public,void,persist,quantiles,quantiles,quantiles,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,job,state,index,name,listener
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener);1547215421;Persist the quantiles (async);public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName(), listener)__    };persist,the,quantiles,async;public,void,persist,quantiles,quantiles,quantiles,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,job,state,index,name,listener
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener);1547843554;Persist the quantiles (async);public void persistQuantiles(Quantiles quantiles, WriteRequest.RefreshPolicy refreshPolicy, ActionListener<IndexResponse> listener) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexWriteAlias(), listener)__    };persist,the,quantiles,async;public,void,persist,quantiles,quantiles,quantiles,write,request,refresh,policy,refresh,policy,action,listener,index,response,listener,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,job,state,index,write,alias,listener
JobResultsPersister -> Builder -> public Builder persistRecords(List<AnomalyRecord> records);1524684173;Persist a list of anomaly records__@param records the records to persist_@return this;public Builder persistRecords(List<AnomalyRecord> records) {_            for (AnomalyRecord record : records) {_                logger.trace("[{}] ES BULK ACTION: index record to index [{}] with ID [{}]", jobId, indexName, record.getId())__                indexResult(record.getId(), record, "record")__            }__            return this__        };persist,a,list,of,anomaly,records,param,records,the,records,to,persist,return,this;public,builder,persist,records,list,anomaly,record,records,for,anomaly,record,record,records,logger,trace,es,bulk,action,index,record,to,index,with,id,job,id,index,name,record,get,id,index,result,record,get,id,record,record,return,this
JobResultsPersister -> Builder -> public Builder persistRecords(List<AnomalyRecord> records);1537806831;Persist a list of anomaly records__@param records the records to persist_@return this;public Builder persistRecords(List<AnomalyRecord> records) {_            for (AnomalyRecord record : records) {_                logger.trace("[{}] ES BULK ACTION: index record to index [{}] with ID [{}]", jobId, indexName, record.getId())__                indexResult(record.getId(), record, "record")__            }__            return this__        };persist,a,list,of,anomaly,records,param,records,the,records,to,persist,return,this;public,builder,persist,records,list,anomaly,record,records,for,anomaly,record,record,records,logger,trace,es,bulk,action,index,record,to,index,with,id,job,id,index,name,record,get,id,index,result,record,get,id,record,record,return,this
JobResultsPersister -> Builder -> public Builder persistRecords(List<AnomalyRecord> records);1541092382;Persist a list of anomaly records__@param records the records to persist_@return this;public Builder persistRecords(List<AnomalyRecord> records) {_            for (AnomalyRecord record : records) {_                logger.trace("[{}] ES BULK ACTION: index record to index [{}] with ID [{}]", jobId, indexName, record.getId())__                indexResult(record.getId(), record, "record")__            }__            return this__        };persist,a,list,of,anomaly,records,param,records,the,records,to,persist,return,this;public,builder,persist,records,list,anomaly,record,records,for,anomaly,record,record,records,logger,trace,es,bulk,action,index,record,to,index,with,id,job,id,index,name,record,get,id,index,result,record,get,id,record,record,return,this
JobResultsPersister -> Builder -> public Builder persistRecords(List<AnomalyRecord> records);1543343306;Persist a list of anomaly records__@param records the records to persist_@return this;public Builder persistRecords(List<AnomalyRecord> records) {_            for (AnomalyRecord record : records) {_                logger.trace("[{}] ES BULK ACTION: index record to index [{}] with ID [{}]", jobId, indexName, record.getId())__                indexResult(record.getId(), record, "record")__            }__            return this__        };persist,a,list,of,anomaly,records,param,records,the,records,to,persist,return,this;public,builder,persist,records,list,anomaly,record,records,for,anomaly,record,record,records,logger,trace,es,bulk,action,index,record,to,index,with,id,job,id,index,name,record,get,id,index,result,record,get,id,record,record,return,this
JobResultsPersister -> Builder -> public Builder persistRecords(List<AnomalyRecord> records);1545155131;Persist a list of anomaly records__@param records the records to persist_@return this;public Builder persistRecords(List<AnomalyRecord> records) {_            for (AnomalyRecord record : records) {_                logger.trace("[{}] ES BULK ACTION: index record to index [{}] with ID [{}]", jobId, indexName, record.getId())__                indexResult(record.getId(), record, "record")__            }__            return this__        };persist,a,list,of,anomaly,records,param,records,the,records,to,persist,return,this;public,builder,persist,records,list,anomaly,record,records,for,anomaly,record,record,records,logger,trace,es,bulk,action,index,record,to,index,with,id,job,id,index,name,record,get,id,index,result,record,get,id,record,record,return,this
JobResultsPersister -> Builder -> public Builder persistRecords(List<AnomalyRecord> records);1547215421;Persist a list of anomaly records__@param records the records to persist_@return this;public Builder persistRecords(List<AnomalyRecord> records) {_            for (AnomalyRecord record : records) {_                logger.trace("[{}] ES BULK ACTION: index record to index [{}] with ID [{}]", jobId, indexName, record.getId())__                indexResult(record.getId(), record, "record")__            }__            return this__        };persist,a,list,of,anomaly,records,param,records,the,records,to,persist,return,this;public,builder,persist,records,list,anomaly,record,records,for,anomaly,record,record,records,logger,trace,es,bulk,action,index,record,to,index,with,id,job,id,index,name,record,get,id,index,result,record,get,id,record,record,return,this
JobResultsPersister -> Builder -> public Builder persistRecords(List<AnomalyRecord> records);1547843554;Persist a list of anomaly records__@param records the records to persist_@return this;public Builder persistRecords(List<AnomalyRecord> records) {_            for (AnomalyRecord record : records) {_                logger.trace("[{}] ES BULK ACTION: index record to index [{}] with ID [{}]", jobId, indexName, record.getId())__                indexResult(record.getId(), record, "record")__            }__            return this__        };persist,a,list,of,anomaly,records,param,records,the,records,to,persist,return,this;public,builder,persist,records,list,anomaly,record,records,for,anomaly,record,record,records,logger,trace,es,bulk,action,index,record,to,index,with,id,job,id,index,name,record,get,id,index,result,record,get,id,record,record,return,this
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats);1524684173;Persist the memory usage data (blocking);public void persistModelSizeStats(ModelSizeStats modelSizeStats) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId)).actionGet()__    };persist,the,memory,usage,data,blocking;public,void,persist,model,size,stats,model,size,stats,model,size,stats,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,action,get
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats);1537806831;Persist the memory usage data (blocking);public void persistModelSizeStats(ModelSizeStats modelSizeStats) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId)).actionGet()__    };persist,the,memory,usage,data,blocking;public,void,persist,model,size,stats,model,size,stats,model,size,stats,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,action,get
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats);1541092382;Persist the memory usage data (blocking);public void persistModelSizeStats(ModelSizeStats modelSizeStats) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId)).actionGet()__    };persist,the,memory,usage,data,blocking;public,void,persist,model,size,stats,model,size,stats,model,size,stats,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,action,get
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats);1543343306;Persist the memory usage data (blocking);public void persistModelSizeStats(ModelSizeStats modelSizeStats) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId)).actionGet()__    };persist,the,memory,usage,data,blocking;public,void,persist,model,size,stats,model,size,stats,model,size,stats,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,action,get
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats);1545155131;Persist the memory usage data (blocking);public void persistModelSizeStats(ModelSizeStats modelSizeStats) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId)).actionGet()__    };persist,the,memory,usage,data,blocking;public,void,persist,model,size,stats,model,size,stats,model,size,stats,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,action,get
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats);1547215421;Persist the memory usage data (blocking);public void persistModelSizeStats(ModelSizeStats modelSizeStats) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId)).actionGet()__    };persist,the,memory,usage,data,blocking;public,void,persist,model,size,stats,model,size,stats,model,size,stats,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,action,get
JobResultsPersister -> public void persistModelSizeStats(ModelSizeStats modelSizeStats);1547843554;Persist the memory usage data (blocking);public void persistModelSizeStats(ModelSizeStats modelSizeStats) {_        String jobId = modelSizeStats.getJobId()__        logger.trace("[{}] Persisting model size stats, for size {}", jobId, modelSizeStats.getModelBytes())__        Persistable persistable = new Persistable(jobId, modelSizeStats, modelSizeStats.getId())__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(jobId)).actionGet()__    };persist,the,memory,usage,data,blocking;public,void,persist,model,size,stats,model,size,stats,model,size,stats,string,job,id,model,size,stats,get,job,id,logger,trace,persisting,model,size,stats,for,size,job,id,model,size,stats,get,model,bytes,persistable,persistable,new,persistable,job,id,model,size,stats,model,size,stats,get,id,persistable,persist,anomaly,detectors,index,results,write,alias,job,id,action,get
JobResultsPersister -> public void deleteInterimResults(String jobId);1524684173;Delete any existing interim results synchronously;public void deleteInterimResults(String jobId) {_        new JobDataDeleter(client, jobId).deleteInterimResults()__    };delete,any,existing,interim,results,synchronously;public,void,delete,interim,results,string,job,id,new,job,data,deleter,client,job,id,delete,interim,results
JobResultsPersister -> public void deleteInterimResults(String jobId);1537806831;Delete any existing interim results synchronously;public void deleteInterimResults(String jobId) {_        new JobDataDeleter(client, jobId).deleteInterimResults()__    };delete,any,existing,interim,results,synchronously;public,void,delete,interim,results,string,job,id,new,job,data,deleter,client,job,id,delete,interim,results
JobResultsPersister -> public void deleteInterimResults(String jobId);1541092382;Delete any existing interim results synchronously;public void deleteInterimResults(String jobId) {_        new JobDataDeleter(client, jobId).deleteInterimResults()__    };delete,any,existing,interim,results,synchronously;public,void,delete,interim,results,string,job,id,new,job,data,deleter,client,job,id,delete,interim,results
JobResultsPersister -> public void deleteInterimResults(String jobId);1543343306;Delete any existing interim results synchronously;public void deleteInterimResults(String jobId) {_        new JobDataDeleter(client, jobId).deleteInterimResults()__    };delete,any,existing,interim,results,synchronously;public,void,delete,interim,results,string,job,id,new,job,data,deleter,client,job,id,delete,interim,results
JobResultsPersister -> public void deleteInterimResults(String jobId);1545155131;Delete any existing interim results synchronously;public void deleteInterimResults(String jobId) {_        new JobDataDeleter(client, jobId).deleteInterimResults()__    };delete,any,existing,interim,results,synchronously;public,void,delete,interim,results,string,job,id,new,job,data,deleter,client,job,id,delete,interim,results
JobResultsPersister -> public void deleteInterimResults(String jobId);1547215421;Delete any existing interim results synchronously;public void deleteInterimResults(String jobId) {_        new JobDataDeleter(client, jobId).deleteInterimResults()__    };delete,any,existing,interim,results,synchronously;public,void,delete,interim,results,string,job,id,new,job,data,deleter,client,job,id,delete,interim,results
JobResultsPersister -> public void deleteInterimResults(String jobId);1547843554;Delete any existing interim results synchronously;public void deleteInterimResults(String jobId) {_        new JobDataDeleter(client, jobId).deleteInterimResults()__    };delete,any,existing,interim,results,synchronously;public,void,delete,interim,results,string,job,id,new,job,data,deleter,client,job,id,delete,interim,results
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles);1524684173;Persist the quantiles (blocking);public void persistQuantiles(Quantiles quantiles) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName()).actionGet()__    };persist,the,quantiles,blocking;public,void,persist,quantiles,quantiles,quantiles,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,persist,anomaly,detectors,index,job,state,index,name,action,get
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles);1537806831;Persist the quantiles (blocking);public void persistQuantiles(Quantiles quantiles) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName()).actionGet()__    };persist,the,quantiles,blocking;public,void,persist,quantiles,quantiles,quantiles,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,persist,anomaly,detectors,index,job,state,index,name,action,get
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles);1541092382;Persist the quantiles (blocking);public void persistQuantiles(Quantiles quantiles) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName()).actionGet()__    };persist,the,quantiles,blocking;public,void,persist,quantiles,quantiles,quantiles,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,persist,anomaly,detectors,index,job,state,index,name,action,get
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles);1543343306;Persist the quantiles (blocking);public void persistQuantiles(Quantiles quantiles) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName()).actionGet()__    };persist,the,quantiles,blocking;public,void,persist,quantiles,quantiles,quantiles,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,persist,anomaly,detectors,index,job,state,index,name,action,get
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles);1545155131;Persist the quantiles (blocking);public void persistQuantiles(Quantiles quantiles) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName()).actionGet()__    };persist,the,quantiles,blocking;public,void,persist,quantiles,quantiles,quantiles,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,persist,anomaly,detectors,index,job,state,index,name,action,get
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles);1547215421;Persist the quantiles (blocking);public void persistQuantiles(Quantiles quantiles) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName()).actionGet()__    };persist,the,quantiles,blocking;public,void,persist,quantiles,quantiles,quantiles,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,persist,anomaly,detectors,index,job,state,index,name,action,get
JobResultsPersister -> public void persistQuantiles(Quantiles quantiles);1547843554;Persist the quantiles (blocking);public void persistQuantiles(Quantiles quantiles) {_        Persistable persistable = new Persistable(quantiles.getJobId(), quantiles, Quantiles.documentId(quantiles.getJobId()))__        persistable.persist(AnomalyDetectorsIndex.jobStateIndexWriteAlias()).actionGet()__    };persist,the,quantiles,blocking;public,void,persist,quantiles,quantiles,quantiles,persistable,persistable,new,persistable,quantiles,get,job,id,quantiles,quantiles,document,id,quantiles,get,job,id,persistable,persist,anomaly,detectors,index,job,state,index,write,alias,action,get
JobResultsPersister -> Builder -> public Builder persistBucket(Bucket bucket);1524684173;Persist the result bucket and its bucket influencers_Buckets are persisted with a consistent ID__@param bucket The bucket to persist_@return this;public Builder persistBucket(Bucket bucket) {_            _            _            Bucket bucketWithoutRecords = bucket__            if (!bucketWithoutRecords.getRecords().isEmpty()) {_                bucketWithoutRecords = new Bucket(bucket)__                bucketWithoutRecords.setRecords(Collections.emptyList())__            }_            String id = bucketWithoutRecords.getId()__            logger.trace("[{}] ES API CALL: index bucket to index [{}] with ID [{}]", jobId, indexName, id)__            indexResult(id, bucketWithoutRecords, "bucket")___            persistBucketInfluencersStandalone(jobId, bucketWithoutRecords.getBucketInfluencers())___            return this__        };persist,the,result,bucket,and,its,bucket,influencers,buckets,are,persisted,with,a,consistent,id,param,bucket,the,bucket,to,persist,return,this;public,builder,persist,bucket,bucket,bucket,bucket,bucket,without,records,bucket,if,bucket,without,records,get,records,is,empty,bucket,without,records,new,bucket,bucket,bucket,without,records,set,records,collections,empty,list,string,id,bucket,without,records,get,id,logger,trace,es,api,call,index,bucket,to,index,with,id,job,id,index,name,id,index,result,id,bucket,without,records,bucket,persist,bucket,influencers,standalone,job,id,bucket,without,records,get,bucket,influencers,return,this
JobResultsPersister -> Builder -> public Builder persistBucket(Bucket bucket);1537806831;Persist the result bucket and its bucket influencers_Buckets are persisted with a consistent ID__@param bucket The bucket to persist_@return this;public Builder persistBucket(Bucket bucket) {_            _            _            Bucket bucketWithoutRecords = bucket__            if (!bucketWithoutRecords.getRecords().isEmpty()) {_                bucketWithoutRecords = new Bucket(bucket)__                bucketWithoutRecords.setRecords(Collections.emptyList())__            }_            String id = bucketWithoutRecords.getId()__            logger.trace("[{}] ES API CALL: index bucket to index [{}] with ID [{}]", jobId, indexName, id)__            indexResult(id, bucketWithoutRecords, "bucket")___            persistBucketInfluencersStandalone(jobId, bucketWithoutRecords.getBucketInfluencers())___            return this__        };persist,the,result,bucket,and,its,bucket,influencers,buckets,are,persisted,with,a,consistent,id,param,bucket,the,bucket,to,persist,return,this;public,builder,persist,bucket,bucket,bucket,bucket,bucket,without,records,bucket,if,bucket,without,records,get,records,is,empty,bucket,without,records,new,bucket,bucket,bucket,without,records,set,records,collections,empty,list,string,id,bucket,without,records,get,id,logger,trace,es,api,call,index,bucket,to,index,with,id,job,id,index,name,id,index,result,id,bucket,without,records,bucket,persist,bucket,influencers,standalone,job,id,bucket,without,records,get,bucket,influencers,return,this
JobResultsPersister -> Builder -> public Builder persistBucket(Bucket bucket);1541092382;Persist the result bucket and its bucket influencers_Buckets are persisted with a consistent ID__@param bucket The bucket to persist_@return this;public Builder persistBucket(Bucket bucket) {_            _            _            Bucket bucketWithoutRecords = bucket__            if (!bucketWithoutRecords.getRecords().isEmpty()) {_                bucketWithoutRecords = new Bucket(bucket)__                bucketWithoutRecords.setRecords(Collections.emptyList())__            }_            String id = bucketWithoutRecords.getId()__            logger.trace("[{}] ES API CALL: index bucket to index [{}] with ID [{}]", jobId, indexName, id)__            indexResult(id, bucketWithoutRecords, "bucket")___            persistBucketInfluencersStandalone(jobId, bucketWithoutRecords.getBucketInfluencers())___            return this__        };persist,the,result,bucket,and,its,bucket,influencers,buckets,are,persisted,with,a,consistent,id,param,bucket,the,bucket,to,persist,return,this;public,builder,persist,bucket,bucket,bucket,bucket,bucket,without,records,bucket,if,bucket,without,records,get,records,is,empty,bucket,without,records,new,bucket,bucket,bucket,without,records,set,records,collections,empty,list,string,id,bucket,without,records,get,id,logger,trace,es,api,call,index,bucket,to,index,with,id,job,id,index,name,id,index,result,id,bucket,without,records,bucket,persist,bucket,influencers,standalone,job,id,bucket,without,records,get,bucket,influencers,return,this
JobResultsPersister -> Builder -> public Builder persistBucket(Bucket bucket);1543343306;Persist the result bucket and its bucket influencers_Buckets are persisted with a consistent ID__@param bucket The bucket to persist_@return this;public Builder persistBucket(Bucket bucket) {_            _            _            Bucket bucketWithoutRecords = bucket__            if (!bucketWithoutRecords.getRecords().isEmpty()) {_                bucketWithoutRecords = new Bucket(bucket)__                bucketWithoutRecords.setRecords(Collections.emptyList())__            }_            String id = bucketWithoutRecords.getId()__            logger.trace("[{}] ES API CALL: index bucket to index [{}] with ID [{}]", jobId, indexName, id)__            indexResult(id, bucketWithoutRecords, "bucket")___            persistBucketInfluencersStandalone(jobId, bucketWithoutRecords.getBucketInfluencers())___            return this__        };persist,the,result,bucket,and,its,bucket,influencers,buckets,are,persisted,with,a,consistent,id,param,bucket,the,bucket,to,persist,return,this;public,builder,persist,bucket,bucket,bucket,bucket,bucket,without,records,bucket,if,bucket,without,records,get,records,is,empty,bucket,without,records,new,bucket,bucket,bucket,without,records,set,records,collections,empty,list,string,id,bucket,without,records,get,id,logger,trace,es,api,call,index,bucket,to,index,with,id,job,id,index,name,id,index,result,id,bucket,without,records,bucket,persist,bucket,influencers,standalone,job,id,bucket,without,records,get,bucket,influencers,return,this
JobResultsPersister -> Builder -> public Builder persistBucket(Bucket bucket);1545155131;Persist the result bucket and its bucket influencers_Buckets are persisted with a consistent ID__@param bucket The bucket to persist_@return this;public Builder persistBucket(Bucket bucket) {_            _            _            Bucket bucketWithoutRecords = bucket__            if (!bucketWithoutRecords.getRecords().isEmpty()) {_                bucketWithoutRecords = new Bucket(bucket)__                bucketWithoutRecords.setRecords(Collections.emptyList())__            }_            String id = bucketWithoutRecords.getId()__            logger.trace("[{}] ES API CALL: index bucket to index [{}] with ID [{}]", jobId, indexName, id)__            indexResult(id, bucketWithoutRecords, "bucket")___            persistBucketInfluencersStandalone(jobId, bucketWithoutRecords.getBucketInfluencers())___            return this__        };persist,the,result,bucket,and,its,bucket,influencers,buckets,are,persisted,with,a,consistent,id,param,bucket,the,bucket,to,persist,return,this;public,builder,persist,bucket,bucket,bucket,bucket,bucket,without,records,bucket,if,bucket,without,records,get,records,is,empty,bucket,without,records,new,bucket,bucket,bucket,without,records,set,records,collections,empty,list,string,id,bucket,without,records,get,id,logger,trace,es,api,call,index,bucket,to,index,with,id,job,id,index,name,id,index,result,id,bucket,without,records,bucket,persist,bucket,influencers,standalone,job,id,bucket,without,records,get,bucket,influencers,return,this
JobResultsPersister -> Builder -> public Builder persistBucket(Bucket bucket);1547215421;Persist the result bucket and its bucket influencers_Buckets are persisted with a consistent ID__@param bucket The bucket to persist_@return this;public Builder persistBucket(Bucket bucket) {_            _            _            Bucket bucketWithoutRecords = bucket__            if (!bucketWithoutRecords.getRecords().isEmpty()) {_                bucketWithoutRecords = new Bucket(bucket)__                bucketWithoutRecords.setRecords(Collections.emptyList())__            }_            String id = bucketWithoutRecords.getId()__            logger.trace("[{}] ES API CALL: index bucket to index [{}] with ID [{}]", jobId, indexName, id)__            indexResult(id, bucketWithoutRecords, "bucket")___            persistBucketInfluencersStandalone(jobId, bucketWithoutRecords.getBucketInfluencers())___            return this__        };persist,the,result,bucket,and,its,bucket,influencers,buckets,are,persisted,with,a,consistent,id,param,bucket,the,bucket,to,persist,return,this;public,builder,persist,bucket,bucket,bucket,bucket,bucket,without,records,bucket,if,bucket,without,records,get,records,is,empty,bucket,without,records,new,bucket,bucket,bucket,without,records,set,records,collections,empty,list,string,id,bucket,without,records,get,id,logger,trace,es,api,call,index,bucket,to,index,with,id,job,id,index,name,id,index,result,id,bucket,without,records,bucket,persist,bucket,influencers,standalone,job,id,bucket,without,records,get,bucket,influencers,return,this
JobResultsPersister -> Builder -> public Builder persistBucket(Bucket bucket);1547843554;Persist the result bucket and its bucket influencers_Buckets are persisted with a consistent ID__@param bucket The bucket to persist_@return this;public Builder persistBucket(Bucket bucket) {_            _            _            Bucket bucketWithoutRecords = bucket__            if (!bucketWithoutRecords.getRecords().isEmpty()) {_                bucketWithoutRecords = new Bucket(bucket)__                bucketWithoutRecords.setRecords(Collections.emptyList())__            }_            String id = bucketWithoutRecords.getId()__            logger.trace("[{}] ES API CALL: index bucket to index [{}] with ID [{}]", jobId, indexName, id)__            indexResult(id, bucketWithoutRecords, "bucket")___            persistBucketInfluencersStandalone(jobId, bucketWithoutRecords.getBucketInfluencers())___            return this__        };persist,the,result,bucket,and,its,bucket,influencers,buckets,are,persisted,with,a,consistent,id,param,bucket,the,bucket,to,persist,return,this;public,builder,persist,bucket,bucket,bucket,bucket,bucket,without,records,bucket,if,bucket,without,records,get,records,is,empty,bucket,without,records,new,bucket,bucket,bucket,without,records,set,records,collections,empty,list,string,id,bucket,without,records,get,id,logger,trace,es,api,call,index,bucket,to,index,with,id,job,id,index,name,id,index,result,id,bucket,without,records,bucket,persist,bucket,influencers,standalone,job,id,bucket,without,records,get,bucket,influencers,return,this
JobResultsPersister -> public void persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy);1524684173;Persist a model snapshot description;public void persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy) {_        Persistable persistable = new Persistable(modelSnapshot.getJobId(), modelSnapshot, ModelSnapshot.documentId(modelSnapshot))__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(modelSnapshot.getJobId())).actionGet()__    };persist,a,model,snapshot,description;public,void,persist,model,snapshot,model,snapshot,model,snapshot,write,request,refresh,policy,refresh,policy,persistable,persistable,new,persistable,model,snapshot,get,job,id,model,snapshot,model,snapshot,document,id,model,snapshot,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,results,write,alias,model,snapshot,get,job,id,action,get
JobResultsPersister -> public void persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy);1537806831;Persist a model snapshot description;public void persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy) {_        Persistable persistable = new Persistable(modelSnapshot.getJobId(), modelSnapshot, ModelSnapshot.documentId(modelSnapshot))__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(modelSnapshot.getJobId())).actionGet()__    };persist,a,model,snapshot,description;public,void,persist,model,snapshot,model,snapshot,model,snapshot,write,request,refresh,policy,refresh,policy,persistable,persistable,new,persistable,model,snapshot,get,job,id,model,snapshot,model,snapshot,document,id,model,snapshot,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,results,write,alias,model,snapshot,get,job,id,action,get
JobResultsPersister -> public void persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy);1541092382;Persist a model snapshot description;public void persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy) {_        Persistable persistable = new Persistable(modelSnapshot.getJobId(), modelSnapshot, ModelSnapshot.documentId(modelSnapshot))__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(modelSnapshot.getJobId())).actionGet()__    };persist,a,model,snapshot,description;public,void,persist,model,snapshot,model,snapshot,model,snapshot,write,request,refresh,policy,refresh,policy,persistable,persistable,new,persistable,model,snapshot,get,job,id,model,snapshot,model,snapshot,document,id,model,snapshot,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,results,write,alias,model,snapshot,get,job,id,action,get
JobResultsPersister -> public void persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy);1543343306;Persist a model snapshot description;public void persistModelSnapshot(ModelSnapshot modelSnapshot, WriteRequest.RefreshPolicy refreshPolicy) {_        Persistable persistable = new Persistable(modelSnapshot.getJobId(), modelSnapshot, ModelSnapshot.documentId(modelSnapshot))__        persistable.setRefreshPolicy(refreshPolicy)__        persistable.persist(AnomalyDetectorsIndex.resultsWriteAlias(modelSnapshot.getJobId())).actionGet()__    };persist,a,model,snapshot,description;public,void,persist,model,snapshot,model,snapshot,model,snapshot,write,request,refresh,policy,refresh,policy,persistable,persistable,new,persistable,model,snapshot,get,job,id,model,snapshot,model,snapshot,document,id,model,snapshot,persistable,set,refresh,policy,refresh,policy,persistable,persist,anomaly,detectors,index,results,write,alias,model,snapshot,get,job,id,action,get
JobResultsPersister -> Builder -> public Builder persistInfluencers(List<Influencer> influencers);1524684173;Persist a list of influencers optionally using each influencer's ID or_an auto generated ID__@param influencers the influencers to persist_@return this;public Builder persistInfluencers(List<Influencer> influencers) {_            for (Influencer influencer : influencers) {_                logger.trace("[{}] ES BULK ACTION: index influencer to index [{}] with ID [{}]", jobId, indexName, influencer.getId())__                indexResult(influencer.getId(), influencer, "influencer")__            }__            return this__        };persist,a,list,of,influencers,optionally,using,each,influencer,s,id,or,an,auto,generated,id,param,influencers,the,influencers,to,persist,return,this;public,builder,persist,influencers,list,influencer,influencers,for,influencer,influencer,influencers,logger,trace,es,bulk,action,index,influencer,to,index,with,id,job,id,index,name,influencer,get,id,index,result,influencer,get,id,influencer,influencer,return,this
JobResultsPersister -> Builder -> public Builder persistInfluencers(List<Influencer> influencers);1537806831;Persist a list of influencers optionally using each influencer's ID or_an auto generated ID__@param influencers the influencers to persist_@return this;public Builder persistInfluencers(List<Influencer> influencers) {_            for (Influencer influencer : influencers) {_                logger.trace("[{}] ES BULK ACTION: index influencer to index [{}] with ID [{}]", jobId, indexName, influencer.getId())__                indexResult(influencer.getId(), influencer, "influencer")__            }__            return this__        };persist,a,list,of,influencers,optionally,using,each,influencer,s,id,or,an,auto,generated,id,param,influencers,the,influencers,to,persist,return,this;public,builder,persist,influencers,list,influencer,influencers,for,influencer,influencer,influencers,logger,trace,es,bulk,action,index,influencer,to,index,with,id,job,id,index,name,influencer,get,id,index,result,influencer,get,id,influencer,influencer,return,this
JobResultsPersister -> Builder -> public Builder persistInfluencers(List<Influencer> influencers);1541092382;Persist a list of influencers optionally using each influencer's ID or_an auto generated ID__@param influencers the influencers to persist_@return this;public Builder persistInfluencers(List<Influencer> influencers) {_            for (Influencer influencer : influencers) {_                logger.trace("[{}] ES BULK ACTION: index influencer to index [{}] with ID [{}]", jobId, indexName, influencer.getId())__                indexResult(influencer.getId(), influencer, "influencer")__            }__            return this__        };persist,a,list,of,influencers,optionally,using,each,influencer,s,id,or,an,auto,generated,id,param,influencers,the,influencers,to,persist,return,this;public,builder,persist,influencers,list,influencer,influencers,for,influencer,influencer,influencers,logger,trace,es,bulk,action,index,influencer,to,index,with,id,job,id,index,name,influencer,get,id,index,result,influencer,get,id,influencer,influencer,return,this
JobResultsPersister -> Builder -> public Builder persistInfluencers(List<Influencer> influencers);1543343306;Persist a list of influencers optionally using each influencer's ID or_an auto generated ID__@param influencers the influencers to persist_@return this;public Builder persistInfluencers(List<Influencer> influencers) {_            for (Influencer influencer : influencers) {_                logger.trace("[{}] ES BULK ACTION: index influencer to index [{}] with ID [{}]", jobId, indexName, influencer.getId())__                indexResult(influencer.getId(), influencer, "influencer")__            }__            return this__        };persist,a,list,of,influencers,optionally,using,each,influencer,s,id,or,an,auto,generated,id,param,influencers,the,influencers,to,persist,return,this;public,builder,persist,influencers,list,influencer,influencers,for,influencer,influencer,influencers,logger,trace,es,bulk,action,index,influencer,to,index,with,id,job,id,index,name,influencer,get,id,index,result,influencer,get,id,influencer,influencer,return,this
JobResultsPersister -> Builder -> public Builder persistInfluencers(List<Influencer> influencers);1545155131;Persist a list of influencers optionally using each influencer's ID or_an auto generated ID__@param influencers the influencers to persist_@return this;public Builder persistInfluencers(List<Influencer> influencers) {_            for (Influencer influencer : influencers) {_                logger.trace("[{}] ES BULK ACTION: index influencer to index [{}] with ID [{}]", jobId, indexName, influencer.getId())__                indexResult(influencer.getId(), influencer, "influencer")__            }__            return this__        };persist,a,list,of,influencers,optionally,using,each,influencer,s,id,or,an,auto,generated,id,param,influencers,the,influencers,to,persist,return,this;public,builder,persist,influencers,list,influencer,influencers,for,influencer,influencer,influencers,logger,trace,es,bulk,action,index,influencer,to,index,with,id,job,id,index,name,influencer,get,id,index,result,influencer,get,id,influencer,influencer,return,this
JobResultsPersister -> Builder -> public Builder persistInfluencers(List<Influencer> influencers);1547215421;Persist a list of influencers optionally using each influencer's ID or_an auto generated ID__@param influencers the influencers to persist_@return this;public Builder persistInfluencers(List<Influencer> influencers) {_            for (Influencer influencer : influencers) {_                logger.trace("[{}] ES BULK ACTION: index influencer to index [{}] with ID [{}]", jobId, indexName, influencer.getId())__                indexResult(influencer.getId(), influencer, "influencer")__            }__            return this__        };persist,a,list,of,influencers,optionally,using,each,influencer,s,id,or,an,auto,generated,id,param,influencers,the,influencers,to,persist,return,this;public,builder,persist,influencers,list,influencer,influencers,for,influencer,influencer,influencers,logger,trace,es,bulk,action,index,influencer,to,index,with,id,job,id,index,name,influencer,get,id,index,result,influencer,get,id,influencer,influencer,return,this
JobResultsPersister -> Builder -> public Builder persistInfluencers(List<Influencer> influencers);1547843554;Persist a list of influencers optionally using each influencer's ID or_an auto generated ID__@param influencers the influencers to persist_@return this;public Builder persistInfluencers(List<Influencer> influencers) {_            for (Influencer influencer : influencers) {_                logger.trace("[{}] ES BULK ACTION: index influencer to index [{}] with ID [{}]", jobId, indexName, influencer.getId())__                indexResult(influencer.getId(), influencer, "influencer")__            }__            return this__        };persist,a,list,of,influencers,optionally,using,each,influencer,s,id,or,an,auto,generated,id,param,influencers,the,influencers,to,persist,return,this;public,builder,persist,influencers,list,influencer,influencers,for,influencer,influencer,influencers,logger,trace,es,bulk,action,index,influencer,to,index,with,id,job,id,index,name,influencer,get,id,index,result,influencer,get,id,influencer,influencer,return,this
