commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Reports as analysis problem if it is different than the last seen problem  *  * @param problemMessage the problem message  */ ;/**  * Reports as analysis problem if it is different than the last seen problem  *  * @param problemMessage the problem message  */ public void reportAnalysisProblem(String problemMessage) {     reportProblem(Messages.JOB_AUDIT_DATAFEED_DATA_ANALYSIS_ERROR, problemMessage). }
true;public;1;3;/**  * Reports as extraction problem if it is different than the last seen problem  *  * @param problemMessage the problem message  */ ;/**  * Reports as extraction problem if it is different than the last seen problem  *  * @param problemMessage the problem message  */ public void reportExtractionProblem(String problemMessage) {     reportProblem(Messages.JOB_AUDIT_DATAFEED_DATA_EXTRACTION_ERROR, problemMessage). }
true;private;2;7;/**  * Reports the problem if it is different than the last seen problem  *  * @param problemMessage the problem message  */ ;/**  * Reports the problem if it is different than the last seen problem  *  * @param problemMessage the problem message  */ private void reportProblem(String template, String problemMessage) {     hasProblems = true.     if (!Objects.equals(previousProblem, problemMessage)) {         previousProblem = problemMessage.         auditor.error(jobId, Messages.getMessage(template, problemMessage)).     } }
true;public;0;8;/**  * Updates the tracking of empty data cycles. If the number of consecutive empty data  * cycles reaches {@code EMPTY_DATA_WARN_COUNT}, a warning is reported.  */ ;/**  * Updates the tracking of empty data cycles. If the number of consecutive empty data  * cycles reaches {@code EMPTY_DATA_WARN_COUNT}, a warning is reported.  */ public void reportEmptyDataCount() {     if (emptyDataCount < EMPTY_DATA_WARN_COUNT) {         emptyDataCount++.         if (emptyDataCount == EMPTY_DATA_WARN_COUNT) {             auditor.warning(jobId, Messages.getMessage(Messages.JOB_AUDIT_DATAFEED_NO_DATA)).         }     } }
false;public;0;6;;public void reportNoneEmptyCount() {     if (emptyDataCount >= EMPTY_DATA_WARN_COUNT) {         auditor.info(jobId, Messages.getMessage(Messages.JOB_AUDIT_DATAFEED_DATA_SEEN_AGAIN)).     }     emptyDataCount = 0. }
false;public;0;3;;public boolean hasProblems() {     return hasProblems. }
true;public;0;8;/**  * Issues a recovery message if appropriate and prepares for next report  */ ;/**  * Issues a recovery message if appropriate and prepares for next report  */ public void finishReport() {     if (!hasProblems && hadProblems) {         auditor.info(jobId, Messages.getMessage(Messages.JOB_AUDIT_DATAFEED_RECOVERED)).     }     hadProblems = hasProblems.     hasProblems = false. }
