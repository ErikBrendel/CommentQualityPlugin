commented;modifiers;parameterAmount;loc;comment;code
false;private;1;4;;private XContentBuilder serialiseCounts(DataCounts counts) throws IOException {     XContentBuilder builder = jsonBuilder().     return counts.toXContent(builder, ToXContent.EMPTY_PARAMS). }
false;public;1;4;;@Override public void onResponse(IndexResponse indexResponse) {     listener.onResponse(true). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
true;public;3;20;/**  * Update the job's data counts stats and figures.  *  * @param jobId Job to update  * @param counts The counts  * @param listener Action response listener  */ ;/**  * Update the job's data counts stats and figures.  *  * @param jobId Job to update  * @param counts The counts  * @param listener Action response listener  */ public void persistDataCounts(String jobId, DataCounts counts, ActionListener<Boolean> listener) {     try (XContentBuilder content = serialiseCounts(counts)) {         final IndexRequest request = new IndexRequest(AnomalyDetectorsIndex.resultsWriteAlias(jobId)).id(DataCounts.documentId(jobId)).source(content).         executeAsyncWithOrigin(client, ML_ORIGIN, IndexAction.INSTANCE, request, new ActionListener<IndexResponse>() {              @Override             public void onResponse(IndexResponse indexResponse) {                 listener.onResponse(true).             }              @Override             public void onFailure(Exception e) {                 listener.onFailure(e).             }         }).     } catch (IOException ioe) {         logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] Error serialising DataCounts stats", jobId), ioe).     } }
