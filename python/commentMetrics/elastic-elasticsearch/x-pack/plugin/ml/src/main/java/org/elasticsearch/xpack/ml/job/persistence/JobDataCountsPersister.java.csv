# id;timestamp;commentText;codeText;commentWords;codeWords
JobDataCountsPersister -> public void persistDataCounts(String jobId, DataCounts counts, ActionListener<Boolean> listener);1524684173;Update the job's data counts stats and figures.__@param jobId Job to update_@param counts The counts_@param listener Action response listener;public void persistDataCounts(String jobId, DataCounts counts, ActionListener<Boolean> listener) {_        try (XContentBuilder content = serialiseCounts(counts)) {_            final IndexRequest request = client.prepareIndex(AnomalyDetectorsIndex.resultsWriteAlias(jobId), ElasticsearchMappings.DOC_TYPE,_                    DataCounts.documentId(jobId))_                    .setSource(content)_                    .request()__            executeAsyncWithOrigin(client, ML_ORIGIN, IndexAction.INSTANCE, request, new ActionListener<IndexResponse>() {_                @Override_                public void onResponse(IndexResponse indexResponse) {_                    listener.onResponse(true)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        } catch (IOException ioe) {_            logger.warn((Supplier<?>)() -> new ParameterizedMessage("[{}] Error serialising DataCounts stats", jobId), ioe)__        }_    };update,the,job,s,data,counts,stats,and,figures,param,job,id,job,to,update,param,counts,the,counts,param,listener,action,response,listener;public,void,persist,data,counts,string,job,id,data,counts,counts,action,listener,boolean,listener,try,xcontent,builder,content,serialise,counts,counts,final,index,request,request,client,prepare,index,anomaly,detectors,index,results,write,alias,job,id,elasticsearch,mappings,data,counts,document,id,job,id,set,source,content,request,execute,async,with,origin,client,index,action,instance,request,new,action,listener,index,response,override,public,void,on,response,index,response,index,response,listener,on,response,true,override,public,void,on,failure,exception,e,listener,on,failure,e,catch,ioexception,ioe,logger,warn,supplier,new,parameterized,message,error,serialising,data,counts,stats,job,id,ioe
JobDataCountsPersister -> public void persistDataCounts(String jobId, DataCounts counts, ActionListener<Boolean> listener);1541092382;Update the job's data counts stats and figures.__@param jobId Job to update_@param counts The counts_@param listener Action response listener;public void persistDataCounts(String jobId, DataCounts counts, ActionListener<Boolean> listener) {_        try (XContentBuilder content = serialiseCounts(counts)) {_            final IndexRequest request = client.prepareIndex(AnomalyDetectorsIndex.resultsWriteAlias(jobId), ElasticsearchMappings.DOC_TYPE,_                    DataCounts.documentId(jobId))_                    .setSource(content)_                    .request()__            executeAsyncWithOrigin(client, ML_ORIGIN, IndexAction.INSTANCE, request, new ActionListener<IndexResponse>() {_                @Override_                public void onResponse(IndexResponse indexResponse) {_                    listener.onResponse(true)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        } catch (IOException ioe) {_            logger.warn((Supplier<?>)() -> new ParameterizedMessage("[{}] Error serialising DataCounts stats", jobId), ioe)__        }_    };update,the,job,s,data,counts,stats,and,figures,param,job,id,job,to,update,param,counts,the,counts,param,listener,action,response,listener;public,void,persist,data,counts,string,job,id,data,counts,counts,action,listener,boolean,listener,try,xcontent,builder,content,serialise,counts,counts,final,index,request,request,client,prepare,index,anomaly,detectors,index,results,write,alias,job,id,elasticsearch,mappings,data,counts,document,id,job,id,set,source,content,request,execute,async,with,origin,client,index,action,instance,request,new,action,listener,index,response,override,public,void,on,response,index,response,index,response,listener,on,response,true,override,public,void,on,failure,exception,e,listener,on,failure,e,catch,ioexception,ioe,logger,warn,supplier,new,parameterized,message,error,serialising,data,counts,stats,job,id,ioe
JobDataCountsPersister -> public void persistDataCounts(String jobId, DataCounts counts, ActionListener<Boolean> listener);1543343306;Update the job's data counts stats and figures.__@param jobId Job to update_@param counts The counts_@param listener Action response listener;public void persistDataCounts(String jobId, DataCounts counts, ActionListener<Boolean> listener) {_        try (XContentBuilder content = serialiseCounts(counts)) {_            final IndexRequest request = client.prepareIndex(AnomalyDetectorsIndex.resultsWriteAlias(jobId), ElasticsearchMappings.DOC_TYPE,_                    DataCounts.documentId(jobId))_                    .setSource(content)_                    .request()__            executeAsyncWithOrigin(client, ML_ORIGIN, IndexAction.INSTANCE, request, new ActionListener<IndexResponse>() {_                @Override_                public void onResponse(IndexResponse indexResponse) {_                    listener.onResponse(true)__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__                }_            })__        } catch (IOException ioe) {_            logger.warn((Supplier<?>)() -> new ParameterizedMessage("[{}] Error serialising DataCounts stats", jobId), ioe)__        }_    };update,the,job,s,data,counts,stats,and,figures,param,job,id,job,to,update,param,counts,the,counts,param,listener,action,response,listener;public,void,persist,data,counts,string,job,id,data,counts,counts,action,listener,boolean,listener,try,xcontent,builder,content,serialise,counts,counts,final,index,request,request,client,prepare,index,anomaly,detectors,index,results,write,alias,job,id,elasticsearch,mappings,data,counts,document,id,job,id,set,source,content,request,execute,async,with,origin,client,index,action,instance,request,new,action,listener,index,response,override,public,void,on,response,index,response,index,response,listener,on,response,true,override,public,void,on,failure,exception,e,listener,on,failure,e,catch,ioexception,ioe,logger,warn,supplier,new,parameterized,message,error,serialising,data,counts,stats,job,id,ioe
