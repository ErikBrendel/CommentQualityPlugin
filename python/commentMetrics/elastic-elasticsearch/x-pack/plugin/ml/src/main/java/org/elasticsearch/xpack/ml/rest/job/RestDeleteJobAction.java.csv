commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "ml_delete_job_action". }
false;protected;2;24;;@Override protected RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     DeleteJobAction.Request deleteJobRequest = new DeleteJobAction.Request(restRequest.param(Job.ID.getPreferredName())).     deleteJobRequest.setForce(restRequest.paramAsBoolean(CloseJobAction.Request.FORCE.getPreferredName(), deleteJobRequest.isForce())).     deleteJobRequest.timeout(restRequest.paramAsTime("timeout", deleteJobRequest.timeout())).     deleteJobRequest.masterNodeTimeout(restRequest.paramAsTime("master_timeout", deleteJobRequest.masterNodeTimeout())).     if (restRequest.paramAsBoolean("wait_for_completion", true)) {         return channel -> client.execute(DeleteJobAction.INSTANCE, deleteJobRequest, new RestToXContentListener<>(channel)).     } else {         deleteJobRequest.setShouldStoreResult(true).         Task task = client.executeLocally(DeleteJobAction.INSTANCE, deleteJobRequest, nullTaskListener()).         // Send task description id instead of waiting for the message         return channel -> {             try (XContentBuilder builder = channel.newBuilder()) {                 builder.startObject().                 builder.field("task", client.getLocalNodeId() + ":" + task.getId()).                 builder.endObject().                 channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder)).             }         }.     } }
false;public;2;2;;@Override public void onResponse(Task task, Object o) { }
false;public;2;2;;@Override public void onFailure(Task task, Throwable e) { }
true;private,static;0;9;// or it will be stored in the task result when called asynchronously ;// We do not want to log anything due to a delete action // The response or error will be returned to the client when called synchronously // or it will be stored in the task result when called asynchronously private static TaskListener nullTaskListener() {     return new TaskListener() {          @Override         public void onResponse(Task task, Object o) {         }          @Override         public void onFailure(Task task, Throwable e) {         }     }. }
