# id;timestamp;commentText;codeText;commentWords;codeWords
TransportCloseJobAction -> static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,                                         List<String> closingJobIds);1524684173;Resolve the requested jobs and add their IDs to one of the list arguments_depending on job state.__Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added_to {@code openJobIds} if allowFailed is set otherwise an exception is thrown._@param request The close job request_@param state Cluster state_@param openJobIds Opened or failed jobs are added to this list_@param closingJobIds Closing jobs are added to this list;static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,_                                        List<String> closingJobIds) {_        PersistentTasksCustomMetaData tasksMetaData = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        MlMetadata maybeNull = state.metaData().custom(MLMetadataField.TYPE)__        final MlMetadata mlMetadata = (maybeNull == null) ? MlMetadata.EMPTY_METADATA : maybeNull___        List<String> failedJobs = new ArrayList<>()___        Consumer<String> jobIdProcessor = id -> {_            validateJobAndTaskState(id, mlMetadata, tasksMetaData)__            Job job = mlMetadata.getJobs().get(id)__            if (job.isDeleted()) {_                return__            }_            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs)__        }___        Set<String> expandedJobIds = mlMetadata.expandJobIds(request.getJobId(), request.allowNoJobs())__        expandedJobIds.stream().forEach(jobIdProcessor::accept)__        if (request.isForce() == false && failedJobs.size() > 0) {_            if (expandedJobIds.size() == 1) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                        expandedJobIds.iterator().next())__            }_            throw ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close")__        }__        _        openJobIds.addAll(failedJobs)__    };resolve,the,requested,jobs,and,add,their,ids,to,one,of,the,list,arguments,depending,on,job,state,opened,jobs,are,added,to,code,open,job,ids,and,closing,jobs,added,to,code,closing,job,ids,failed,jobs,are,added,to,code,open,job,ids,if,allow,failed,is,set,otherwise,an,exception,is,thrown,param,request,the,close,job,request,param,state,cluster,state,param,open,job,ids,opened,or,failed,jobs,are,added,to,this,list,param,closing,job,ids,closing,jobs,are,added,to,this,list;static,void,resolve,and,validate,job,id,close,job,action,request,request,cluster,state,state,list,string,open,job,ids,list,string,closing,job,ids,persistent,tasks,custom,meta,data,tasks,meta,data,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,ml,metadata,maybe,null,state,meta,data,custom,mlmetadata,field,type,final,ml,metadata,ml,metadata,maybe,null,null,ml,metadata,maybe,null,list,string,failed,jobs,new,array,list,consumer,string,job,id,processor,id,validate,job,and,task,state,id,ml,metadata,tasks,meta,data,job,job,ml,metadata,get,jobs,get,id,if,job,is,deleted,return,add,job,according,to,state,id,tasks,meta,data,open,job,ids,closing,job,ids,failed,jobs,set,string,expanded,job,ids,ml,metadata,expand,job,ids,request,get,job,id,request,allow,no,jobs,expanded,job,ids,stream,for,each,job,id,processor,accept,if,request,is,force,false,failed,jobs,size,0,if,expanded,job,ids,size,1,throw,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,throw,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,open,job,ids,add,all,failed,jobs
TransportCloseJobAction -> static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,                                         List<String> closingJobIds);1526981569;Resolve the requested jobs and add their IDs to one of the list arguments_depending on job state.__Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added_to {@code openJobIds} if allowFailed is set otherwise an exception is thrown._@param request The close job request_@param state Cluster state_@param openJobIds Opened or failed jobs are added to this list_@param closingJobIds Closing jobs are added to this list;static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,_                                        List<String> closingJobIds) {_        PersistentTasksCustomMetaData tasksMetaData = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        final MlMetadata mlMetadata = MlMetadata.getMlMetadata(state)___        List<String> failedJobs = new ArrayList<>()___        Consumer<String> jobIdProcessor = id -> {_            validateJobAndTaskState(id, mlMetadata, tasksMetaData)__            Job job = mlMetadata.getJobs().get(id)__            if (job.isDeleted()) {_                return__            }_            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs)__        }___        Set<String> expandedJobIds = mlMetadata.expandJobIds(request.getJobId(), request.allowNoJobs())__        expandedJobIds.forEach(jobIdProcessor::accept)__        if (request.isForce() == false && failedJobs.size() > 0) {_            if (expandedJobIds.size() == 1) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                        expandedJobIds.iterator().next())__            }_            throw ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close")__        }__        _        openJobIds.addAll(failedJobs)__    };resolve,the,requested,jobs,and,add,their,ids,to,one,of,the,list,arguments,depending,on,job,state,opened,jobs,are,added,to,code,open,job,ids,and,closing,jobs,added,to,code,closing,job,ids,failed,jobs,are,added,to,code,open,job,ids,if,allow,failed,is,set,otherwise,an,exception,is,thrown,param,request,the,close,job,request,param,state,cluster,state,param,open,job,ids,opened,or,failed,jobs,are,added,to,this,list,param,closing,job,ids,closing,jobs,are,added,to,this,list;static,void,resolve,and,validate,job,id,close,job,action,request,request,cluster,state,state,list,string,open,job,ids,list,string,closing,job,ids,persistent,tasks,custom,meta,data,tasks,meta,data,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,final,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,state,list,string,failed,jobs,new,array,list,consumer,string,job,id,processor,id,validate,job,and,task,state,id,ml,metadata,tasks,meta,data,job,job,ml,metadata,get,jobs,get,id,if,job,is,deleted,return,add,job,according,to,state,id,tasks,meta,data,open,job,ids,closing,job,ids,failed,jobs,set,string,expanded,job,ids,ml,metadata,expand,job,ids,request,get,job,id,request,allow,no,jobs,expanded,job,ids,for,each,job,id,processor,accept,if,request,is,force,false,failed,jobs,size,0,if,expanded,job,ids,size,1,throw,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,throw,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,open,job,ids,add,all,failed,jobs
TransportCloseJobAction -> static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,                                         List<String> closingJobIds);1527773340;Resolve the requested jobs and add their IDs to one of the list arguments_depending on job state.__Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added_to {@code openJobIds} if allowFailed is set otherwise an exception is thrown._@param request The close job request_@param state Cluster state_@param openJobIds Opened or failed jobs are added to this list_@param closingJobIds Closing jobs are added to this list;static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,_                                        List<String> closingJobIds) {_        PersistentTasksCustomMetaData tasksMetaData = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        final MlMetadata mlMetadata = MlMetadata.getMlMetadata(state)___        List<String> failedJobs = new ArrayList<>()___        Consumer<String> jobIdProcessor = id -> {_            validateJobAndTaskState(id, mlMetadata, tasksMetaData)__            Job job = mlMetadata.getJobs().get(id)__            if (job.isDeleted()) {_                return__            }_            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs)__        }___        Set<String> expandedJobIds = mlMetadata.expandJobIds(request.getJobId(), request.allowNoJobs())__        expandedJobIds.forEach(jobIdProcessor::accept)__        if (request.isForce() == false && failedJobs.size() > 0) {_            if (expandedJobIds.size() == 1) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                        expandedJobIds.iterator().next())__            }_            throw ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close")__        }__        _        openJobIds.addAll(failedJobs)__    };resolve,the,requested,jobs,and,add,their,ids,to,one,of,the,list,arguments,depending,on,job,state,opened,jobs,are,added,to,code,open,job,ids,and,closing,jobs,added,to,code,closing,job,ids,failed,jobs,are,added,to,code,open,job,ids,if,allow,failed,is,set,otherwise,an,exception,is,thrown,param,request,the,close,job,request,param,state,cluster,state,param,open,job,ids,opened,or,failed,jobs,are,added,to,this,list,param,closing,job,ids,closing,jobs,are,added,to,this,list;static,void,resolve,and,validate,job,id,close,job,action,request,request,cluster,state,state,list,string,open,job,ids,list,string,closing,job,ids,persistent,tasks,custom,meta,data,tasks,meta,data,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,final,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,state,list,string,failed,jobs,new,array,list,consumer,string,job,id,processor,id,validate,job,and,task,state,id,ml,metadata,tasks,meta,data,job,job,ml,metadata,get,jobs,get,id,if,job,is,deleted,return,add,job,according,to,state,id,tasks,meta,data,open,job,ids,closing,job,ids,failed,jobs,set,string,expanded,job,ids,ml,metadata,expand,job,ids,request,get,job,id,request,allow,no,jobs,expanded,job,ids,for,each,job,id,processor,accept,if,request,is,force,false,failed,jobs,size,0,if,expanded,job,ids,size,1,throw,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,throw,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,open,job,ids,add,all,failed,jobs
TransportCloseJobAction -> static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,                                         List<String> closingJobIds);1529076503;Resolve the requested jobs and add their IDs to one of the list arguments_depending on job state.__Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added_to {@code openJobIds} if allowFailed is set otherwise an exception is thrown._@param request The close job request_@param state Cluster state_@param openJobIds Opened or failed jobs are added to this list_@param closingJobIds Closing jobs are added to this list;static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,_                                        List<String> closingJobIds) {_        PersistentTasksCustomMetaData tasksMetaData = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        final MlMetadata mlMetadata = MlMetadata.getMlMetadata(state)___        List<String> failedJobs = new ArrayList<>()___        Consumer<String> jobIdProcessor = id -> {_            validateJobAndTaskState(id, mlMetadata, tasksMetaData)__            Job job = mlMetadata.getJobs().get(id)__            if (job.isDeleted()) {_                return__            }_            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs)__        }___        Set<String> expandedJobIds = mlMetadata.expandJobIds(request.getJobId(), request.allowNoJobs())__        expandedJobIds.forEach(jobIdProcessor::accept)__        if (request.isForce() == false && failedJobs.size() > 0) {_            if (expandedJobIds.size() == 1) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                        expandedJobIds.iterator().next())__            }_            throw ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close")__        }__        _        openJobIds.addAll(failedJobs)__    };resolve,the,requested,jobs,and,add,their,ids,to,one,of,the,list,arguments,depending,on,job,state,opened,jobs,are,added,to,code,open,job,ids,and,closing,jobs,added,to,code,closing,job,ids,failed,jobs,are,added,to,code,open,job,ids,if,allow,failed,is,set,otherwise,an,exception,is,thrown,param,request,the,close,job,request,param,state,cluster,state,param,open,job,ids,opened,or,failed,jobs,are,added,to,this,list,param,closing,job,ids,closing,jobs,are,added,to,this,list;static,void,resolve,and,validate,job,id,close,job,action,request,request,cluster,state,state,list,string,open,job,ids,list,string,closing,job,ids,persistent,tasks,custom,meta,data,tasks,meta,data,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,final,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,state,list,string,failed,jobs,new,array,list,consumer,string,job,id,processor,id,validate,job,and,task,state,id,ml,metadata,tasks,meta,data,job,job,ml,metadata,get,jobs,get,id,if,job,is,deleted,return,add,job,according,to,state,id,tasks,meta,data,open,job,ids,closing,job,ids,failed,jobs,set,string,expanded,job,ids,ml,metadata,expand,job,ids,request,get,job,id,request,allow,no,jobs,expanded,job,ids,for,each,job,id,processor,accept,if,request,is,force,false,failed,jobs,size,0,if,expanded,job,ids,size,1,throw,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,throw,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,open,job,ids,add,all,failed,jobs
TransportCloseJobAction -> static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,                                         List<String> closingJobIds);1529487105;Resolve the requested jobs and add their IDs to one of the list arguments_depending on job state.__Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added_to {@code openJobIds} if allowFailed is set otherwise an exception is thrown._@param request The close job request_@param state Cluster state_@param openJobIds Opened or failed jobs are added to this list_@param closingJobIds Closing jobs are added to this list;static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,_                                        List<String> closingJobIds) {_        PersistentTasksCustomMetaData tasksMetaData = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        final MlMetadata mlMetadata = MlMetadata.getMlMetadata(state)___        List<String> failedJobs = new ArrayList<>()___        Consumer<String> jobIdProcessor = id -> {_            validateJobAndTaskState(id, mlMetadata, tasksMetaData)__            Job job = mlMetadata.getJobs().get(id)__            if (job.isDeleted()) {_                return__            }_            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs)__        }___        Set<String> expandedJobIds = mlMetadata.expandJobIds(request.getJobId(), request.allowNoJobs())__        expandedJobIds.forEach(jobIdProcessor::accept)__        if (request.isForce() == false && failedJobs.size() > 0) {_            if (expandedJobIds.size() == 1) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                        expandedJobIds.iterator().next())__            }_            throw ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close")__        }__        _        openJobIds.addAll(failedJobs)__    };resolve,the,requested,jobs,and,add,their,ids,to,one,of,the,list,arguments,depending,on,job,state,opened,jobs,are,added,to,code,open,job,ids,and,closing,jobs,added,to,code,closing,job,ids,failed,jobs,are,added,to,code,open,job,ids,if,allow,failed,is,set,otherwise,an,exception,is,thrown,param,request,the,close,job,request,param,state,cluster,state,param,open,job,ids,opened,or,failed,jobs,are,added,to,this,list,param,closing,job,ids,closing,jobs,are,added,to,this,list;static,void,resolve,and,validate,job,id,close,job,action,request,request,cluster,state,state,list,string,open,job,ids,list,string,closing,job,ids,persistent,tasks,custom,meta,data,tasks,meta,data,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,final,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,state,list,string,failed,jobs,new,array,list,consumer,string,job,id,processor,id,validate,job,and,task,state,id,ml,metadata,tasks,meta,data,job,job,ml,metadata,get,jobs,get,id,if,job,is,deleted,return,add,job,according,to,state,id,tasks,meta,data,open,job,ids,closing,job,ids,failed,jobs,set,string,expanded,job,ids,ml,metadata,expand,job,ids,request,get,job,id,request,allow,no,jobs,expanded,job,ids,for,each,job,id,processor,accept,if,request,is,force,false,failed,jobs,size,0,if,expanded,job,ids,size,1,throw,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,throw,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,open,job,ids,add,all,failed,jobs
TransportCloseJobAction -> static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,                                         List<String> closingJobIds);1529658035;Resolve the requested jobs and add their IDs to one of the list arguments_depending on job state.__Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added_to {@code openJobIds} if allowFailed is set otherwise an exception is thrown._@param request The close job request_@param state Cluster state_@param openJobIds Opened or failed jobs are added to this list_@param closingJobIds Closing jobs are added to this list;static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,_                                        List<String> closingJobIds) {_        PersistentTasksCustomMetaData tasksMetaData = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        final MlMetadata mlMetadata = MlMetadata.getMlMetadata(state)___        List<String> failedJobs = new ArrayList<>()___        Consumer<String> jobIdProcessor = id -> {_            validateJobAndTaskState(id, mlMetadata, tasksMetaData)__            Job job = mlMetadata.getJobs().get(id)__            if (job.isDeleted()) {_                return__            }_            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs)__        }___        Set<String> expandedJobIds = mlMetadata.expandJobIds(request.getJobId(), request.allowNoJobs())__        expandedJobIds.forEach(jobIdProcessor::accept)__        if (request.isForce() == false && failedJobs.size() > 0) {_            if (expandedJobIds.size() == 1) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                        expandedJobIds.iterator().next())__            }_            throw ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close")__        }__        _        openJobIds.addAll(failedJobs)__    };resolve,the,requested,jobs,and,add,their,ids,to,one,of,the,list,arguments,depending,on,job,state,opened,jobs,are,added,to,code,open,job,ids,and,closing,jobs,added,to,code,closing,job,ids,failed,jobs,are,added,to,code,open,job,ids,if,allow,failed,is,set,otherwise,an,exception,is,thrown,param,request,the,close,job,request,param,state,cluster,state,param,open,job,ids,opened,or,failed,jobs,are,added,to,this,list,param,closing,job,ids,closing,jobs,are,added,to,this,list;static,void,resolve,and,validate,job,id,close,job,action,request,request,cluster,state,state,list,string,open,job,ids,list,string,closing,job,ids,persistent,tasks,custom,meta,data,tasks,meta,data,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,final,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,state,list,string,failed,jobs,new,array,list,consumer,string,job,id,processor,id,validate,job,and,task,state,id,ml,metadata,tasks,meta,data,job,job,ml,metadata,get,jobs,get,id,if,job,is,deleted,return,add,job,according,to,state,id,tasks,meta,data,open,job,ids,closing,job,ids,failed,jobs,set,string,expanded,job,ids,ml,metadata,expand,job,ids,request,get,job,id,request,allow,no,jobs,expanded,job,ids,for,each,job,id,processor,accept,if,request,is,force,false,failed,jobs,size,0,if,expanded,job,ids,size,1,throw,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,throw,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,open,job,ids,add,all,failed,jobs
TransportCloseJobAction -> static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,                                         List<String> closingJobIds);1532456624;Resolve the requested jobs and add their IDs to one of the list arguments_depending on job state.__Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added_to {@code openJobIds} if allowFailed is set otherwise an exception is thrown._@param request The close job request_@param state Cluster state_@param openJobIds Opened or failed jobs are added to this list_@param closingJobIds Closing jobs are added to this list;static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,_                                        List<String> closingJobIds) {_        PersistentTasksCustomMetaData tasksMetaData = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        final MlMetadata mlMetadata = MlMetadata.getMlMetadata(state)___        List<String> failedJobs = new ArrayList<>()___        Consumer<String> jobIdProcessor = id -> {_            validateJobAndTaskState(id, mlMetadata, tasksMetaData)__            Job job = mlMetadata.getJobs().get(id)__            if (job.isDeleted()) {_                return__            }_            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs)__        }___        Set<String> expandedJobIds = mlMetadata.expandJobIds(request.getJobId(), request.allowNoJobs())__        expandedJobIds.forEach(jobIdProcessor::accept)__        if (request.isForce() == false && failedJobs.size() > 0) {_            if (expandedJobIds.size() == 1) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                        expandedJobIds.iterator().next())__            }_            throw ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close")__        }__        _        openJobIds.addAll(failedJobs)__    };resolve,the,requested,jobs,and,add,their,ids,to,one,of,the,list,arguments,depending,on,job,state,opened,jobs,are,added,to,code,open,job,ids,and,closing,jobs,added,to,code,closing,job,ids,failed,jobs,are,added,to,code,open,job,ids,if,allow,failed,is,set,otherwise,an,exception,is,thrown,param,request,the,close,job,request,param,state,cluster,state,param,open,job,ids,opened,or,failed,jobs,are,added,to,this,list,param,closing,job,ids,closing,jobs,are,added,to,this,list;static,void,resolve,and,validate,job,id,close,job,action,request,request,cluster,state,state,list,string,open,job,ids,list,string,closing,job,ids,persistent,tasks,custom,meta,data,tasks,meta,data,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,final,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,state,list,string,failed,jobs,new,array,list,consumer,string,job,id,processor,id,validate,job,and,task,state,id,ml,metadata,tasks,meta,data,job,job,ml,metadata,get,jobs,get,id,if,job,is,deleted,return,add,job,according,to,state,id,tasks,meta,data,open,job,ids,closing,job,ids,failed,jobs,set,string,expanded,job,ids,ml,metadata,expand,job,ids,request,get,job,id,request,allow,no,jobs,expanded,job,ids,for,each,job,id,processor,accept,if,request,is,force,false,failed,jobs,size,0,if,expanded,job,ids,size,1,throw,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,throw,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,open,job,ids,add,all,failed,jobs
TransportCloseJobAction -> static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,                                         List<String> closingJobIds);1539615817;Resolve the requested jobs and add their IDs to one of the list arguments_depending on job state.__Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added_to {@code openJobIds} if allowFailed is set otherwise an exception is thrown._@param request The close job request_@param state Cluster state_@param openJobIds Opened or failed jobs are added to this list_@param closingJobIds Closing jobs are added to this list;static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,_                                        List<String> closingJobIds) {_        PersistentTasksCustomMetaData tasksMetaData = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        final MlMetadata mlMetadata = MlMetadata.getMlMetadata(state)___        List<String> failedJobs = new ArrayList<>()___        Consumer<String> jobIdProcessor = id -> {_            validateJobAndTaskState(id, mlMetadata, tasksMetaData)__            Job job = mlMetadata.getJobs().get(id)__            if (job.isDeleting()) {_                return__            }_            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs)__        }___        Set<String> expandedJobIds = mlMetadata.expandJobIds(request.getJobId(), request.allowNoJobs())__        expandedJobIds.forEach(jobIdProcessor::accept)__        if (request.isForce() == false && failedJobs.size() > 0) {_            if (expandedJobIds.size() == 1) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                        expandedJobIds.iterator().next())__            }_            throw ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close")__        }__        _        openJobIds.addAll(failedJobs)__    };resolve,the,requested,jobs,and,add,their,ids,to,one,of,the,list,arguments,depending,on,job,state,opened,jobs,are,added,to,code,open,job,ids,and,closing,jobs,added,to,code,closing,job,ids,failed,jobs,are,added,to,code,open,job,ids,if,allow,failed,is,set,otherwise,an,exception,is,thrown,param,request,the,close,job,request,param,state,cluster,state,param,open,job,ids,opened,or,failed,jobs,are,added,to,this,list,param,closing,job,ids,closing,jobs,are,added,to,this,list;static,void,resolve,and,validate,job,id,close,job,action,request,request,cluster,state,state,list,string,open,job,ids,list,string,closing,job,ids,persistent,tasks,custom,meta,data,tasks,meta,data,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,final,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,state,list,string,failed,jobs,new,array,list,consumer,string,job,id,processor,id,validate,job,and,task,state,id,ml,metadata,tasks,meta,data,job,job,ml,metadata,get,jobs,get,id,if,job,is,deleting,return,add,job,according,to,state,id,tasks,meta,data,open,job,ids,closing,job,ids,failed,jobs,set,string,expanded,job,ids,ml,metadata,expand,job,ids,request,get,job,id,request,allow,no,jobs,expanded,job,ids,for,each,job,id,processor,accept,if,request,is,force,false,failed,jobs,size,0,if,expanded,job,ids,size,1,throw,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,throw,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,open,job,ids,add,all,failed,jobs
TransportCloseJobAction -> static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,                                         List<String> closingJobIds);1541419698;Resolve the requested jobs and add their IDs to one of the list arguments_depending on job state.__Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added_to {@code openJobIds} if allowFailed is set otherwise an exception is thrown._@param request The close job request_@param state Cluster state_@param openJobIds Opened or failed jobs are added to this list_@param closingJobIds Closing jobs are added to this list;static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,_                                        List<String> closingJobIds) {_        PersistentTasksCustomMetaData tasksMetaData = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        final MlMetadata mlMetadata = MlMetadata.getMlMetadata(state)___        List<String> failedJobs = new ArrayList<>()___        Consumer<String> jobIdProcessor = id -> {_            validateJobAndTaskState(id, mlMetadata, tasksMetaData)__            Job job = mlMetadata.getJobs().get(id)__            if (job.isDeleting()) {_                return__            }_            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs)__        }___        Set<String> expandedJobIds = mlMetadata.expandJobIds(request.getJobId(), request.allowNoJobs())__        expandedJobIds.forEach(jobIdProcessor::accept)__        if (request.isForce() == false && failedJobs.size() > 0) {_            if (expandedJobIds.size() == 1) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                        expandedJobIds.iterator().next())__            }_            throw ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close")__        }__        _        openJobIds.addAll(failedJobs)__    };resolve,the,requested,jobs,and,add,their,ids,to,one,of,the,list,arguments,depending,on,job,state,opened,jobs,are,added,to,code,open,job,ids,and,closing,jobs,added,to,code,closing,job,ids,failed,jobs,are,added,to,code,open,job,ids,if,allow,failed,is,set,otherwise,an,exception,is,thrown,param,request,the,close,job,request,param,state,cluster,state,param,open,job,ids,opened,or,failed,jobs,are,added,to,this,list,param,closing,job,ids,closing,jobs,are,added,to,this,list;static,void,resolve,and,validate,job,id,close,job,action,request,request,cluster,state,state,list,string,open,job,ids,list,string,closing,job,ids,persistent,tasks,custom,meta,data,tasks,meta,data,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,final,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,state,list,string,failed,jobs,new,array,list,consumer,string,job,id,processor,id,validate,job,and,task,state,id,ml,metadata,tasks,meta,data,job,job,ml,metadata,get,jobs,get,id,if,job,is,deleting,return,add,job,according,to,state,id,tasks,meta,data,open,job,ids,closing,job,ids,failed,jobs,set,string,expanded,job,ids,ml,metadata,expand,job,ids,request,get,job,id,request,allow,no,jobs,expanded,job,ids,for,each,job,id,processor,accept,if,request,is,force,false,failed,jobs,size,0,if,expanded,job,ids,size,1,throw,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,throw,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,open,job,ids,add,all,failed,jobs
TransportCloseJobAction -> static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,                                         List<String> closingJobIds);1544012050;Resolve the requested jobs and add their IDs to one of the list arguments_depending on job state.__Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added_to {@code openJobIds} if allowFailed is set otherwise an exception is thrown._@param request The close job request_@param state Cluster state_@param openJobIds Opened or failed jobs are added to this list_@param closingJobIds Closing jobs are added to this list;static void resolveAndValidateJobId(CloseJobAction.Request request, ClusterState state, List<String> openJobIds,_                                        List<String> closingJobIds) {_        PersistentTasksCustomMetaData tasksMetaData = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        final MlMetadata mlMetadata = MlMetadata.getMlMetadata(state)___        List<String> failedJobs = new ArrayList<>()___        Consumer<String> jobIdProcessor = id -> {_            validateJobAndTaskState(id, mlMetadata, tasksMetaData)__            Job job = mlMetadata.getJobs().get(id)__            if (job.isDeleting()) {_                return__            }_            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs)__        }___        Set<String> expandedJobIds = mlMetadata.expandJobIds(request.getJobId(), request.allowNoJobs())__        expandedJobIds.forEach(jobIdProcessor::accept)__        if (request.isForce() == false && failedJobs.size() > 0) {_            if (expandedJobIds.size() == 1) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                        expandedJobIds.iterator().next())__            }_            throw ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close")__        }__        _        openJobIds.addAll(failedJobs)__    };resolve,the,requested,jobs,and,add,their,ids,to,one,of,the,list,arguments,depending,on,job,state,opened,jobs,are,added,to,code,open,job,ids,and,closing,jobs,added,to,code,closing,job,ids,failed,jobs,are,added,to,code,open,job,ids,if,allow,failed,is,set,otherwise,an,exception,is,thrown,param,request,the,close,job,request,param,state,cluster,state,param,open,job,ids,opened,or,failed,jobs,are,added,to,this,list,param,closing,job,ids,closing,jobs,are,added,to,this,list;static,void,resolve,and,validate,job,id,close,job,action,request,request,cluster,state,state,list,string,open,job,ids,list,string,closing,job,ids,persistent,tasks,custom,meta,data,tasks,meta,data,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,final,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,state,list,string,failed,jobs,new,array,list,consumer,string,job,id,processor,id,validate,job,and,task,state,id,ml,metadata,tasks,meta,data,job,job,ml,metadata,get,jobs,get,id,if,job,is,deleting,return,add,job,according,to,state,id,tasks,meta,data,open,job,ids,closing,job,ids,failed,jobs,set,string,expanded,job,ids,ml,metadata,expand,job,ids,request,get,job,id,request,allow,no,jobs,expanded,job,ids,for,each,job,id,processor,accept,if,request,is,force,false,failed,jobs,size,0,if,expanded,job,ids,size,1,throw,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,throw,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,open,job,ids,add,all,failed,jobs
TransportCloseJobAction -> static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks);1524684173;Validate the close request. Throws an exception on any of these conditions:_<ul>_<li>If the job does not exist</li>_<li>If the job has a data feed the feed must be closed first</li>_<li>If the job is opening</li>_</ul>__@param jobId Job Id_@param mlMetadata ML MetaData_@param tasks Persistent tasks;static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks) {_        Job job = mlMetadata.getJobs().get(jobId)__        if (job == null) {_            throw new ResourceNotFoundException("cannot close job, because job [" + jobId + "] does not exist")__        }__        Optional<DatafeedConfig> datafeed = mlMetadata.getDatafeedByJobId(jobId)__        if (datafeed.isPresent()) {_            DatafeedState datafeedState = MlMetadata.getDatafeedState(datafeed.get().getId(), tasks)__            if (datafeedState != DatafeedState.STOPPED) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}], datafeed hasn't been stopped", jobId)__            }_        }_    };validate,the,close,request,throws,an,exception,on,any,of,these,conditions,ul,li,if,the,job,does,not,exist,li,li,if,the,job,has,a,data,feed,the,feed,must,be,closed,first,li,li,if,the,job,is,opening,li,ul,param,job,id,job,id,param,ml,metadata,ml,meta,data,param,tasks,persistent,tasks;static,void,validate,job,and,task,state,string,job,id,ml,metadata,ml,metadata,persistent,tasks,custom,meta,data,tasks,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,throw,new,resource,not,found,exception,cannot,close,job,because,job,job,id,does,not,exist,optional,datafeed,config,datafeed,ml,metadata,get,datafeed,by,job,id,job,id,if,datafeed,is,present,datafeed,state,datafeed,state,ml,metadata,get,datafeed,state,datafeed,get,get,id,tasks,if,datafeed,state,datafeed,state,stopped,throw,exceptions,helper,conflict,status,exception,cannot,close,job,datafeed,hasn,t,been,stopped,job,id
TransportCloseJobAction -> static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks);1526981569;Validate the close request. Throws an exception on any of these conditions:_<ul>_<li>If the job does not exist</li>_<li>If the job has a data feed the feed must be closed first</li>_<li>If the job is opening</li>_</ul>__@param jobId Job Id_@param mlMetadata ML MetaData_@param tasks Persistent tasks;static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks) {_        Job job = mlMetadata.getJobs().get(jobId)__        if (job == null) {_            throw new ResourceNotFoundException("cannot close job, because job [" + jobId + "] does not exist")__        }__        Optional<DatafeedConfig> datafeed = mlMetadata.getDatafeedByJobId(jobId)__        if (datafeed.isPresent()) {_            DatafeedState datafeedState = MlMetadata.getDatafeedState(datafeed.get().getId(), tasks)__            if (datafeedState != DatafeedState.STOPPED) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}], datafeed hasn't been stopped", jobId)__            }_        }_    };validate,the,close,request,throws,an,exception,on,any,of,these,conditions,ul,li,if,the,job,does,not,exist,li,li,if,the,job,has,a,data,feed,the,feed,must,be,closed,first,li,li,if,the,job,is,opening,li,ul,param,job,id,job,id,param,ml,metadata,ml,meta,data,param,tasks,persistent,tasks;static,void,validate,job,and,task,state,string,job,id,ml,metadata,ml,metadata,persistent,tasks,custom,meta,data,tasks,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,throw,new,resource,not,found,exception,cannot,close,job,because,job,job,id,does,not,exist,optional,datafeed,config,datafeed,ml,metadata,get,datafeed,by,job,id,job,id,if,datafeed,is,present,datafeed,state,datafeed,state,ml,metadata,get,datafeed,state,datafeed,get,get,id,tasks,if,datafeed,state,datafeed,state,stopped,throw,exceptions,helper,conflict,status,exception,cannot,close,job,datafeed,hasn,t,been,stopped,job,id
TransportCloseJobAction -> static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks);1527773340;Validate the close request. Throws an exception on any of these conditions:_<ul>_<li>If the job does not exist</li>_<li>If the job has a data feed the feed must be closed first</li>_<li>If the job is opening</li>_</ul>__@param jobId Job Id_@param mlMetadata ML MetaData_@param tasks Persistent tasks;static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks) {_        Job job = mlMetadata.getJobs().get(jobId)__        if (job == null) {_            throw new ResourceNotFoundException("cannot close job, because job [" + jobId + "] does not exist")__        }__        Optional<DatafeedConfig> datafeed = mlMetadata.getDatafeedByJobId(jobId)__        if (datafeed.isPresent()) {_            DatafeedState datafeedState = MlMetadata.getDatafeedState(datafeed.get().getId(), tasks)__            if (datafeedState != DatafeedState.STOPPED) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}], datafeed hasn't been stopped", jobId)__            }_        }_    };validate,the,close,request,throws,an,exception,on,any,of,these,conditions,ul,li,if,the,job,does,not,exist,li,li,if,the,job,has,a,data,feed,the,feed,must,be,closed,first,li,li,if,the,job,is,opening,li,ul,param,job,id,job,id,param,ml,metadata,ml,meta,data,param,tasks,persistent,tasks;static,void,validate,job,and,task,state,string,job,id,ml,metadata,ml,metadata,persistent,tasks,custom,meta,data,tasks,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,throw,new,resource,not,found,exception,cannot,close,job,because,job,job,id,does,not,exist,optional,datafeed,config,datafeed,ml,metadata,get,datafeed,by,job,id,job,id,if,datafeed,is,present,datafeed,state,datafeed,state,ml,metadata,get,datafeed,state,datafeed,get,get,id,tasks,if,datafeed,state,datafeed,state,stopped,throw,exceptions,helper,conflict,status,exception,cannot,close,job,datafeed,hasn,t,been,stopped,job,id
TransportCloseJobAction -> static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks);1529076503;Validate the close request. Throws an exception on any of these conditions:_<ul>_<li>If the job does not exist</li>_<li>If the job has a data feed the feed must be closed first</li>_<li>If the job is opening</li>_</ul>__@param jobId Job Id_@param mlMetadata ML MetaData_@param tasks Persistent tasks;static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks) {_        Job job = mlMetadata.getJobs().get(jobId)__        if (job == null) {_            throw new ResourceNotFoundException("cannot close job, because job [" + jobId + "] does not exist")__        }__        Optional<DatafeedConfig> datafeed = mlMetadata.getDatafeedByJobId(jobId)__        if (datafeed.isPresent()) {_            DatafeedState datafeedState = MlMetadata.getDatafeedState(datafeed.get().getId(), tasks)__            if (datafeedState != DatafeedState.STOPPED) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}], datafeed hasn't been stopped", jobId)__            }_        }_    };validate,the,close,request,throws,an,exception,on,any,of,these,conditions,ul,li,if,the,job,does,not,exist,li,li,if,the,job,has,a,data,feed,the,feed,must,be,closed,first,li,li,if,the,job,is,opening,li,ul,param,job,id,job,id,param,ml,metadata,ml,meta,data,param,tasks,persistent,tasks;static,void,validate,job,and,task,state,string,job,id,ml,metadata,ml,metadata,persistent,tasks,custom,meta,data,tasks,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,throw,new,resource,not,found,exception,cannot,close,job,because,job,job,id,does,not,exist,optional,datafeed,config,datafeed,ml,metadata,get,datafeed,by,job,id,job,id,if,datafeed,is,present,datafeed,state,datafeed,state,ml,metadata,get,datafeed,state,datafeed,get,get,id,tasks,if,datafeed,state,datafeed,state,stopped,throw,exceptions,helper,conflict,status,exception,cannot,close,job,datafeed,hasn,t,been,stopped,job,id
TransportCloseJobAction -> static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks);1529487105;Validate the close request. Throws an exception on any of these conditions:_<ul>_<li>If the job does not exist</li>_<li>If the job has a data feed the feed must be closed first</li>_<li>If the job is opening</li>_</ul>__@param jobId Job Id_@param mlMetadata ML MetaData_@param tasks Persistent tasks;static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks) {_        Job job = mlMetadata.getJobs().get(jobId)__        if (job == null) {_            throw new ResourceNotFoundException("cannot close job, because job [" + jobId + "] does not exist")__        }__        Optional<DatafeedConfig> datafeed = mlMetadata.getDatafeedByJobId(jobId)__        if (datafeed.isPresent()) {_            DatafeedState datafeedState = MlMetadata.getDatafeedState(datafeed.get().getId(), tasks)__            if (datafeedState != DatafeedState.STOPPED) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}], datafeed hasn't been stopped", jobId)__            }_        }_    };validate,the,close,request,throws,an,exception,on,any,of,these,conditions,ul,li,if,the,job,does,not,exist,li,li,if,the,job,has,a,data,feed,the,feed,must,be,closed,first,li,li,if,the,job,is,opening,li,ul,param,job,id,job,id,param,ml,metadata,ml,meta,data,param,tasks,persistent,tasks;static,void,validate,job,and,task,state,string,job,id,ml,metadata,ml,metadata,persistent,tasks,custom,meta,data,tasks,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,throw,new,resource,not,found,exception,cannot,close,job,because,job,job,id,does,not,exist,optional,datafeed,config,datafeed,ml,metadata,get,datafeed,by,job,id,job,id,if,datafeed,is,present,datafeed,state,datafeed,state,ml,metadata,get,datafeed,state,datafeed,get,get,id,tasks,if,datafeed,state,datafeed,state,stopped,throw,exceptions,helper,conflict,status,exception,cannot,close,job,datafeed,hasn,t,been,stopped,job,id
TransportCloseJobAction -> static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks);1529658035;Validate the close request. Throws an exception on any of these conditions:_<ul>_<li>If the job does not exist</li>_<li>If the job has a data feed the feed must be closed first</li>_<li>If the job is opening</li>_</ul>__@param jobId Job Id_@param mlMetadata ML MetaData_@param tasks Persistent tasks;static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks) {_        Job job = mlMetadata.getJobs().get(jobId)__        if (job == null) {_            throw new ResourceNotFoundException("cannot close job, because job [" + jobId + "] does not exist")__        }__        Optional<DatafeedConfig> datafeed = mlMetadata.getDatafeedByJobId(jobId)__        if (datafeed.isPresent()) {_            DatafeedState datafeedState = MlMetadata.getDatafeedState(datafeed.get().getId(), tasks)__            if (datafeedState != DatafeedState.STOPPED) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}], datafeed hasn't been stopped", jobId)__            }_        }_    };validate,the,close,request,throws,an,exception,on,any,of,these,conditions,ul,li,if,the,job,does,not,exist,li,li,if,the,job,has,a,data,feed,the,feed,must,be,closed,first,li,li,if,the,job,is,opening,li,ul,param,job,id,job,id,param,ml,metadata,ml,meta,data,param,tasks,persistent,tasks;static,void,validate,job,and,task,state,string,job,id,ml,metadata,ml,metadata,persistent,tasks,custom,meta,data,tasks,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,throw,new,resource,not,found,exception,cannot,close,job,because,job,job,id,does,not,exist,optional,datafeed,config,datafeed,ml,metadata,get,datafeed,by,job,id,job,id,if,datafeed,is,present,datafeed,state,datafeed,state,ml,metadata,get,datafeed,state,datafeed,get,get,id,tasks,if,datafeed,state,datafeed,state,stopped,throw,exceptions,helper,conflict,status,exception,cannot,close,job,datafeed,hasn,t,been,stopped,job,id
TransportCloseJobAction -> static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks);1532456624;Validate the close request. Throws an exception on any of these conditions:_<ul>_<li>If the job does not exist</li>_<li>If the job has a data feed the feed must be closed first</li>_<li>If the job is opening</li>_</ul>__@param jobId Job Id_@param mlMetadata ML MetaData_@param tasks Persistent tasks;static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks) {_        Job job = mlMetadata.getJobs().get(jobId)__        if (job == null) {_            throw new ResourceNotFoundException("cannot close job, because job [" + jobId + "] does not exist")__        }__        Optional<DatafeedConfig> datafeed = mlMetadata.getDatafeedByJobId(jobId)__        if (datafeed.isPresent()) {_            DatafeedState datafeedState = MlTasks.getDatafeedState(datafeed.get().getId(), tasks)__            if (datafeedState != DatafeedState.STOPPED) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}], datafeed hasn't been stopped", jobId)__            }_        }_    };validate,the,close,request,throws,an,exception,on,any,of,these,conditions,ul,li,if,the,job,does,not,exist,li,li,if,the,job,has,a,data,feed,the,feed,must,be,closed,first,li,li,if,the,job,is,opening,li,ul,param,job,id,job,id,param,ml,metadata,ml,meta,data,param,tasks,persistent,tasks;static,void,validate,job,and,task,state,string,job,id,ml,metadata,ml,metadata,persistent,tasks,custom,meta,data,tasks,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,throw,new,resource,not,found,exception,cannot,close,job,because,job,job,id,does,not,exist,optional,datafeed,config,datafeed,ml,metadata,get,datafeed,by,job,id,job,id,if,datafeed,is,present,datafeed,state,datafeed,state,ml,tasks,get,datafeed,state,datafeed,get,get,id,tasks,if,datafeed,state,datafeed,state,stopped,throw,exceptions,helper,conflict,status,exception,cannot,close,job,datafeed,hasn,t,been,stopped,job,id
TransportCloseJobAction -> static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks);1539615817;Validate the close request. Throws an exception on any of these conditions:_<ul>_<li>If the job does not exist</li>_<li>If the job has a data feed the feed must be closed first</li>_<li>If the job is opening</li>_</ul>__@param jobId Job Id_@param mlMetadata ML MetaData_@param tasks Persistent tasks;static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks) {_        Job job = mlMetadata.getJobs().get(jobId)__        if (job == null) {_            throw new ResourceNotFoundException("cannot close job, because job [" + jobId + "] does not exist")__        }__        Optional<DatafeedConfig> datafeed = mlMetadata.getDatafeedByJobId(jobId)__        if (datafeed.isPresent()) {_            DatafeedState datafeedState = MlTasks.getDatafeedState(datafeed.get().getId(), tasks)__            if (datafeedState != DatafeedState.STOPPED) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}], datafeed hasn't been stopped", jobId)__            }_        }_    };validate,the,close,request,throws,an,exception,on,any,of,these,conditions,ul,li,if,the,job,does,not,exist,li,li,if,the,job,has,a,data,feed,the,feed,must,be,closed,first,li,li,if,the,job,is,opening,li,ul,param,job,id,job,id,param,ml,metadata,ml,meta,data,param,tasks,persistent,tasks;static,void,validate,job,and,task,state,string,job,id,ml,metadata,ml,metadata,persistent,tasks,custom,meta,data,tasks,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,throw,new,resource,not,found,exception,cannot,close,job,because,job,job,id,does,not,exist,optional,datafeed,config,datafeed,ml,metadata,get,datafeed,by,job,id,job,id,if,datafeed,is,present,datafeed,state,datafeed,state,ml,tasks,get,datafeed,state,datafeed,get,get,id,tasks,if,datafeed,state,datafeed,state,stopped,throw,exceptions,helper,conflict,status,exception,cannot,close,job,datafeed,hasn,t,been,stopped,job,id
TransportCloseJobAction -> static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks);1541419698;Validate the close request. Throws an exception on any of these conditions:_<ul>_<li>If the job does not exist</li>_<li>If the job has a data feed the feed must be closed first</li>_<li>If the job is opening</li>_</ul>__@param jobId Job Id_@param mlMetadata ML MetaData_@param tasks Persistent tasks;static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks) {_        Job job = mlMetadata.getJobs().get(jobId)__        if (job == null) {_            throw new ResourceNotFoundException("cannot close job, because job [" + jobId + "] does not exist")__        }__        Optional<DatafeedConfig> datafeed = mlMetadata.getDatafeedByJobId(jobId)__        if (datafeed.isPresent()) {_            DatafeedState datafeedState = MlTasks.getDatafeedState(datafeed.get().getId(), tasks)__            if (datafeedState != DatafeedState.STOPPED) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}], datafeed hasn't been stopped", jobId)__            }_        }_    };validate,the,close,request,throws,an,exception,on,any,of,these,conditions,ul,li,if,the,job,does,not,exist,li,li,if,the,job,has,a,data,feed,the,feed,must,be,closed,first,li,li,if,the,job,is,opening,li,ul,param,job,id,job,id,param,ml,metadata,ml,meta,data,param,tasks,persistent,tasks;static,void,validate,job,and,task,state,string,job,id,ml,metadata,ml,metadata,persistent,tasks,custom,meta,data,tasks,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,throw,new,resource,not,found,exception,cannot,close,job,because,job,job,id,does,not,exist,optional,datafeed,config,datafeed,ml,metadata,get,datafeed,by,job,id,job,id,if,datafeed,is,present,datafeed,state,datafeed,state,ml,tasks,get,datafeed,state,datafeed,get,get,id,tasks,if,datafeed,state,datafeed,state,stopped,throw,exceptions,helper,conflict,status,exception,cannot,close,job,datafeed,hasn,t,been,stopped,job,id
TransportCloseJobAction -> static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks);1544012050;Validate the close request. Throws an exception on any of these conditions:_<ul>_<li>If the job does not exist</li>_<li>If the job has a data feed the feed must be closed first</li>_<li>If the job is opening</li>_</ul>__@param jobId Job Id_@param mlMetadata ML MetaData_@param tasks Persistent tasks;static void validateJobAndTaskState(String jobId, MlMetadata mlMetadata, PersistentTasksCustomMetaData tasks) {_        Job job = mlMetadata.getJobs().get(jobId)__        if (job == null) {_            throw new ResourceNotFoundException("cannot close job, because job [" + jobId + "] does not exist")__        }__        Optional<DatafeedConfig> datafeed = mlMetadata.getDatafeedByJobId(jobId)__        if (datafeed.isPresent()) {_            DatafeedState datafeedState = MlTasks.getDatafeedState(datafeed.get().getId(), tasks)__            if (datafeedState != DatafeedState.STOPPED) {_                throw ExceptionsHelper.conflictStatusException("cannot close job [{}], datafeed hasn't been stopped", jobId)__            }_        }_    };validate,the,close,request,throws,an,exception,on,any,of,these,conditions,ul,li,if,the,job,does,not,exist,li,li,if,the,job,has,a,data,feed,the,feed,must,be,closed,first,li,li,if,the,job,is,opening,li,ul,param,job,id,job,id,param,ml,metadata,ml,meta,data,param,tasks,persistent,tasks;static,void,validate,job,and,task,state,string,job,id,ml,metadata,ml,metadata,persistent,tasks,custom,meta,data,tasks,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,throw,new,resource,not,found,exception,cannot,close,job,because,job,job,id,does,not,exist,optional,datafeed,config,datafeed,ml,metadata,get,datafeed,by,job,id,job,id,if,datafeed,is,present,datafeed,state,datafeed,state,ml,tasks,get,datafeed,state,datafeed,get,get,id,tasks,if,datafeed,state,datafeed,state,stopped,throw,exceptions,helper,conflict,status,exception,cannot,close,job,datafeed,hasn,t,been,stopped,job,id
TransportCloseJobAction -> void validate(Collection<String> expandedJobIds, boolean forceClose, PersistentTasksCustomMetaData tasksMetaData,                           ActionListener<OpenAndClosingIds> listener);1545155131;Separate the job Ids into open and closing job Ids and validate._If a job is failed it is will not be closed unless the force parameter_in request is true._It is an error if the datafeed the job uses is not stopped__@param expandedJobIds The job ids_@param forceClose Force close the job(s)_@param tasksMetaData Persistent tasks_@param listener Resolved job Ids listener;void validate(Collection<String> expandedJobIds, boolean forceClose, PersistentTasksCustomMetaData tasksMetaData,_                          ActionListener<OpenAndClosingIds> listener) {__        checkDatafeedsHaveStopped(expandedJobIds, tasksMetaData, ActionListener.wrap(_                response -> {_                    OpenAndClosingIds ids = new OpenAndClosingIds()__                    List<String> failedJobs = new ArrayList<>()___                    for (String jobId : expandedJobIds) {_                        addJobAccordingToState(jobId, tasksMetaData, ids.openJobIds, ids.closingJobIds, failedJobs)__                    }__                    if (forceClose == false && failedJobs.size() > 0) {_                        if (expandedJobIds.size() == 1) {_                            listener.onFailure(_                                    ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                                            expandedJobIds.iterator().next()))__                            return__                        }_                        listener.onFailure(_                                ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close"))__                        return__                    }__                    _                    ids.openJobIds.addAll(failedJobs)__                    listener.onResponse(ids)__                },_                listener::onFailure_        ))__    };separate,the,job,ids,into,open,and,closing,job,ids,and,validate,if,a,job,is,failed,it,is,will,not,be,closed,unless,the,force,parameter,in,request,is,true,it,is,an,error,if,the,datafeed,the,job,uses,is,not,stopped,param,expanded,job,ids,the,job,ids,param,force,close,force,close,the,job,s,param,tasks,meta,data,persistent,tasks,param,listener,resolved,job,ids,listener;void,validate,collection,string,expanded,job,ids,boolean,force,close,persistent,tasks,custom,meta,data,tasks,meta,data,action,listener,open,and,closing,ids,listener,check,datafeeds,have,stopped,expanded,job,ids,tasks,meta,data,action,listener,wrap,response,open,and,closing,ids,ids,new,open,and,closing,ids,list,string,failed,jobs,new,array,list,for,string,job,id,expanded,job,ids,add,job,according,to,state,job,id,tasks,meta,data,ids,open,job,ids,ids,closing,job,ids,failed,jobs,if,force,close,false,failed,jobs,size,0,if,expanded,job,ids,size,1,listener,on,failure,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,return,listener,on,failure,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,return,ids,open,job,ids,add,all,failed,jobs,listener,on,response,ids,listener,on,failure
TransportCloseJobAction -> void validate(Collection<String> expandedJobIds, boolean forceClose, PersistentTasksCustomMetaData tasksMetaData,                           ActionListener<OpenAndClosingIds> listener);1548870984;Separate the job Ids into open and closing job Ids and validate._If a job is failed it is will not be closed unless the force parameter_in request is true._It is an error if the datafeed the job uses is not stopped__@param expandedJobIds The job ids_@param forceClose Force close the job(s)_@param tasksMetaData Persistent tasks_@param listener Resolved job Ids listener;void validate(Collection<String> expandedJobIds, boolean forceClose, PersistentTasksCustomMetaData tasksMetaData,_                          ActionListener<OpenAndClosingIds> listener) {__        checkDatafeedsHaveStopped(expandedJobIds, tasksMetaData, ActionListener.wrap(_                response -> {_                    OpenAndClosingIds ids = new OpenAndClosingIds()__                    List<String> failedJobs = new ArrayList<>()___                    for (String jobId : expandedJobIds) {_                        addJobAccordingToState(jobId, tasksMetaData, ids.openJobIds, ids.closingJobIds, failedJobs)__                    }__                    if (forceClose == false && failedJobs.size() > 0) {_                        if (expandedJobIds.size() == 1) {_                            listener.onFailure(_                                    ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                                            expandedJobIds.iterator().next()))__                            return__                        }_                        listener.onFailure(_                                ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close"))__                        return__                    }__                    _                    ids.openJobIds.addAll(failedJobs)__                    listener.onResponse(ids)__                },_                listener::onFailure_        ))__    };separate,the,job,ids,into,open,and,closing,job,ids,and,validate,if,a,job,is,failed,it,is,will,not,be,closed,unless,the,force,parameter,in,request,is,true,it,is,an,error,if,the,datafeed,the,job,uses,is,not,stopped,param,expanded,job,ids,the,job,ids,param,force,close,force,close,the,job,s,param,tasks,meta,data,persistent,tasks,param,listener,resolved,job,ids,listener;void,validate,collection,string,expanded,job,ids,boolean,force,close,persistent,tasks,custom,meta,data,tasks,meta,data,action,listener,open,and,closing,ids,listener,check,datafeeds,have,stopped,expanded,job,ids,tasks,meta,data,action,listener,wrap,response,open,and,closing,ids,ids,new,open,and,closing,ids,list,string,failed,jobs,new,array,list,for,string,job,id,expanded,job,ids,add,job,according,to,state,job,id,tasks,meta,data,ids,open,job,ids,ids,closing,job,ids,failed,jobs,if,force,close,false,failed,jobs,size,0,if,expanded,job,ids,size,1,listener,on,failure,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,return,listener,on,failure,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,return,ids,open,job,ids,add,all,failed,jobs,listener,on,response,ids,listener,on,failure
TransportCloseJobAction -> void validate(Collection<String> expandedJobIds, boolean forceClose, PersistentTasksCustomMetaData tasksMetaData,                           ActionListener<OpenAndClosingIds> listener);1549041395;Separate the job Ids into open and closing job Ids and validate._If a job is failed it is will not be closed unless the force parameter_in request is true._It is an error if the datafeed the job uses is not stopped__@param expandedJobIds The job ids_@param forceClose Force close the job(s)_@param tasksMetaData Persistent tasks_@param listener Resolved job Ids listener;void validate(Collection<String> expandedJobIds, boolean forceClose, PersistentTasksCustomMetaData tasksMetaData,_                          ActionListener<OpenAndClosingIds> listener) {__        checkDatafeedsHaveStopped(expandedJobIds, tasksMetaData, ActionListener.wrap(_                response -> {_                    OpenAndClosingIds ids = new OpenAndClosingIds()__                    List<String> failedJobs = new ArrayList<>()___                    for (String jobId : expandedJobIds) {_                        addJobAccordingToState(jobId, tasksMetaData, ids.openJobIds, ids.closingJobIds, failedJobs)__                    }__                    if (forceClose == false && failedJobs.size() > 0) {_                        if (expandedJobIds.size() == 1) {_                            listener.onFailure(_                                    ExceptionsHelper.conflictStatusException("cannot close job [{}] because it failed, use force close",_                                            expandedJobIds.iterator().next()))__                            return__                        }_                        listener.onFailure(_                                ExceptionsHelper.conflictStatusException("one or more jobs have state failed, use force close"))__                        return__                    }__                    _                    ids.openJobIds.addAll(failedJobs)__                    listener.onResponse(ids)__                },_                listener::onFailure_        ))__    };separate,the,job,ids,into,open,and,closing,job,ids,and,validate,if,a,job,is,failed,it,is,will,not,be,closed,unless,the,force,parameter,in,request,is,true,it,is,an,error,if,the,datafeed,the,job,uses,is,not,stopped,param,expanded,job,ids,the,job,ids,param,force,close,force,close,the,job,s,param,tasks,meta,data,persistent,tasks,param,listener,resolved,job,ids,listener;void,validate,collection,string,expanded,job,ids,boolean,force,close,persistent,tasks,custom,meta,data,tasks,meta,data,action,listener,open,and,closing,ids,listener,check,datafeeds,have,stopped,expanded,job,ids,tasks,meta,data,action,listener,wrap,response,open,and,closing,ids,ids,new,open,and,closing,ids,list,string,failed,jobs,new,array,list,for,string,job,id,expanded,job,ids,add,job,according,to,state,job,id,tasks,meta,data,ids,open,job,ids,ids,closing,job,ids,failed,jobs,if,force,close,false,failed,jobs,size,0,if,expanded,job,ids,size,1,listener,on,failure,exceptions,helper,conflict,status,exception,cannot,close,job,because,it,failed,use,force,close,expanded,job,ids,iterator,next,return,listener,on,failure,exceptions,helper,conflict,status,exception,one,or,more,jobs,have,state,failed,use,force,close,return,ids,open,job,ids,add,all,failed,jobs,listener,on,response,ids,listener,on,failure
