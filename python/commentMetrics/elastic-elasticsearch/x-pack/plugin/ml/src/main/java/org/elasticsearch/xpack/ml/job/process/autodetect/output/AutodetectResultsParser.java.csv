commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;public Iterator<AutodetectResult> parseResults(InputStream in) throws ElasticsearchParseException {     try {         XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, in).         XContentParser.Token token = parser.nextToken().         // if start of an array ignore it, we expect an array of results         if (token != XContentParser.Token.START_ARRAY) {             throw new ElasticsearchParseException("unexpected token [" + token + "]").         }         return new AutodetectResultIterator(in, parser).     } catch (IOException e) {         throw new ElasticsearchParseException(e.getMessage(), e).     } }
false;public;0;16;;@Override public boolean hasNext() {     try {         token = parser.nextToken().     } catch (IOException e) {         logger.debug("io error while parsing", e).         return false.     }     if (token == XContentParser.Token.END_ARRAY) {         return false.     } else if (token != XContentParser.Token.START_OBJECT) {         logger.error("Expecting Json Field name token after the Start Object token").         throw new ElasticsearchParseException("unexpected token [" + token + "]").     }     return true. }
false;public;0;4;;@Override public AutodetectResult next() {     return AutodetectResult.PARSER.apply(parser, null). }
