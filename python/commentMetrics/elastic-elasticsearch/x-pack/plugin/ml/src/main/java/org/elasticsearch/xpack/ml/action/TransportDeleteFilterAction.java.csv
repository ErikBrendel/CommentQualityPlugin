commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;17;;@Override protected void doExecute(Task task, DeleteFilterAction.Request request, ActionListener<AcknowledgedResponse> listener) {     final String filterId = request.getFilterId().     jobConfigProvider.findJobsWithCustomRules(ActionListener.wrap(jobs -> {         List<String> currentlyUsedBy = findJobsUsingFilter(jobs, filterId).         if (!currentlyUsedBy.isEmpty()) {             listener.onFailure(ExceptionsHelper.conflictStatusException(Messages.getMessage(Messages.FILTER_CANNOT_DELETE, filterId, currentlyUsedBy))).         } else {             deleteFilter(filterId, listener).         }     }, listener::onFailure)). }
false;private,static;2;13;;private static List<String> findJobsUsingFilter(List<Job> jobs, String filterId) {     List<String> currentlyUsedBy = new ArrayList<>().     for (Job job : jobs) {         List<Detector> detectors = job.getAnalysisConfig().getDetectors().         for (Detector detector : detectors) {             if (detector.extractReferencedFilters().contains(filterId)) {                 currentlyUsedBy.add(job.getId()).                 break.             }         }     }     return currentlyUsedBy. }
false;public;1;9;;@Override public void onResponse(BulkResponse bulkResponse) {     if (bulkResponse.getItems()[0].status() == RestStatus.NOT_FOUND) {         listener.onFailure(new ResourceNotFoundException("Could not delete filter with ID [" + filterId + "] because it does not exist")).     } else {         listener.onResponse(new AcknowledgedResponse(true)).     } }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(ExceptionsHelper.serverError("Could not delete filter with ID [" + filterId + "]", e)). }
false;private;2;23;;private void deleteFilter(String filterId, ActionListener<AcknowledgedResponse> listener) {     DeleteRequest deleteRequest = new DeleteRequest(MlMetaIndex.INDEX_NAME, MlFilter.documentId(filterId)).     BulkRequestBuilder bulkRequestBuilder = client.prepareBulk().     bulkRequestBuilder.add(deleteRequest).     bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).     executeAsyncWithOrigin(client, ML_ORIGIN, BulkAction.INSTANCE, bulkRequestBuilder.request(), new ActionListener<BulkResponse>() {          @Override         public void onResponse(BulkResponse bulkResponse) {             if (bulkResponse.getItems()[0].status() == RestStatus.NOT_FOUND) {                 listener.onFailure(new ResourceNotFoundException("Could not delete filter with ID [" + filterId + "] because it does not exist")).             } else {                 listener.onResponse(new AcknowledgedResponse(true)).             }         }          @Override         public void onFailure(Exception e) {             listener.onFailure(ExceptionsHelper.serverError("Could not delete filter with ID [" + filterId + "]", e)).         }     }). }
