# id;timestamp;commentText;codeText;commentWords;codeWords
DatafeedConfigProvider -> public void putDatafeedConfig(DatafeedConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener);1545155131;Persist the datafeed configuration to the config index._It is an error if a datafeed with the same Id already exists -_the config will not be overwritten.__@param config The datafeed configuration_@param listener Index response listener;public void putDatafeedConfig(DatafeedConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener) {__        if (headers.isEmpty() == false) {_            _            DatafeedConfig.Builder builder = new DatafeedConfig.Builder(config)__            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__            config = builder.build()__        }__        final String datafeedId = config.getId()___        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_            XContentBuilder source = config.toXContent(builder, new ToXContent.MapParams(TO_XCONTENT_PARAMS))___            IndexRequest indexRequest =  client.prepareIndex(AnomalyDetectorsIndex.configIndexName(),_                    ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))_                    .setSource(source)_                    .setOpType(DocWriteRequest.OpType.CREATE)_                    .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)_                    .request()___            executeAsyncWithOrigin(client, ML_ORIGIN, IndexAction.INSTANCE, indexRequest, ActionListener.wrap(_                    listener::onResponse,_                    e -> {_                        if (e instanceof VersionConflictEngineException) {_                            _                            listener.onFailure(ExceptionsHelper.datafeedAlreadyExists(datafeedId))__                        } else {_                            listener.onFailure(e)__                        }_                    }_            ))___        } catch (IOException e) {_            listener.onFailure(new ElasticsearchParseException("Failed to serialise datafeed config with id [" + config.getId() + "]", e))__        }_    };persist,the,datafeed,configuration,to,the,config,index,it,is,an,error,if,a,datafeed,with,the,same,id,already,exists,the,config,will,not,be,overwritten,param,config,the,datafeed,configuration,param,listener,index,response,listener;public,void,put,datafeed,config,datafeed,config,config,map,string,string,headers,action,listener,index,response,listener,if,headers,is,empty,false,datafeed,config,builder,builder,new,datafeed,config,builder,config,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,config,builder,build,final,string,datafeed,id,config,get,id,try,xcontent,builder,builder,xcontent,factory,json,builder,xcontent,builder,source,config,to,xcontent,builder,new,to,xcontent,map,params,index,request,index,request,client,prepare,index,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,set,source,source,set,op,type,doc,write,request,op,type,create,set,refresh,policy,write,request,refresh,policy,immediate,request,execute,async,with,origin,client,index,action,instance,index,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,version,conflict,engine,exception,listener,on,failure,exceptions,helper,datafeed,already,exists,datafeed,id,else,listener,on,failure,e,catch,ioexception,e,listener,on,failure,new,elasticsearch,parse,exception,failed,to,serialise,datafeed,config,with,id,config,get,id,e
DatafeedConfigProvider -> public void putDatafeedConfig(DatafeedConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener);1545227023;Persist the datafeed configuration to the config index._It is an error if a datafeed with the same Id already exists -_the config will not be overwritten.__@param config The datafeed configuration_@param listener Index response listener;public void putDatafeedConfig(DatafeedConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener) {__        if (headers.isEmpty() == false) {_            _            DatafeedConfig.Builder builder = new DatafeedConfig.Builder(config)__            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__            config = builder.build()__        }__        final String datafeedId = config.getId()___        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_            XContentBuilder source = config.toXContent(builder, new ToXContent.MapParams(TO_XCONTENT_PARAMS))___            IndexRequest indexRequest =  client.prepareIndex(AnomalyDetectorsIndex.configIndexName(),_                    ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))_                    .setSource(source)_                    .setOpType(DocWriteRequest.OpType.CREATE)_                    .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)_                    .request()___            executeAsyncWithOrigin(client, ML_ORIGIN, IndexAction.INSTANCE, indexRequest, ActionListener.wrap(_                    listener::onResponse,_                    e -> {_                        if (e instanceof VersionConflictEngineException) {_                            _                            listener.onFailure(ExceptionsHelper.datafeedAlreadyExists(datafeedId))__                        } else {_                            listener.onFailure(e)__                        }_                    }_            ))___        } catch (IOException e) {_            listener.onFailure(new ElasticsearchParseException("Failed to serialise datafeed config with id [" + config.getId() + "]", e))__        }_    };persist,the,datafeed,configuration,to,the,config,index,it,is,an,error,if,a,datafeed,with,the,same,id,already,exists,the,config,will,not,be,overwritten,param,config,the,datafeed,configuration,param,listener,index,response,listener;public,void,put,datafeed,config,datafeed,config,config,map,string,string,headers,action,listener,index,response,listener,if,headers,is,empty,false,datafeed,config,builder,builder,new,datafeed,config,builder,config,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,config,builder,build,final,string,datafeed,id,config,get,id,try,xcontent,builder,builder,xcontent,factory,json,builder,xcontent,builder,source,config,to,xcontent,builder,new,to,xcontent,map,params,index,request,index,request,client,prepare,index,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,set,source,source,set,op,type,doc,write,request,op,type,create,set,refresh,policy,write,request,refresh,policy,immediate,request,execute,async,with,origin,client,index,action,instance,index,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,version,conflict,engine,exception,listener,on,failure,exceptions,helper,datafeed,already,exists,datafeed,id,else,listener,on,failure,e,catch,ioexception,e,listener,on,failure,new,elasticsearch,parse,exception,failed,to,serialise,datafeed,config,with,id,config,get,id,e
DatafeedConfigProvider -> public void putDatafeedConfig(DatafeedConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener);1548840711;Persist the datafeed configuration to the config index._It is an error if a datafeed with the same Id already exists -_the config will not be overwritten.__@param config The datafeed configuration_@param listener Index response listener;public void putDatafeedConfig(DatafeedConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener) {__        if (headers.isEmpty() == false) {_            _            DatafeedConfig.Builder builder = new DatafeedConfig.Builder(config)__            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__            config = builder.build()__        }__        final String datafeedId = config.getId()___        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_            XContentBuilder source = config.toXContent(builder, new ToXContent.MapParams(TO_XCONTENT_PARAMS))___            IndexRequest indexRequest =  client.prepareIndex(AnomalyDetectorsIndex.configIndexName(),_                    ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))_                    .setSource(source)_                    .setOpType(DocWriteRequest.OpType.CREATE)_                    .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)_                    .request()___            executeAsyncWithOrigin(client, ML_ORIGIN, IndexAction.INSTANCE, indexRequest, ActionListener.wrap(_                    listener::onResponse,_                    e -> {_                        if (e instanceof VersionConflictEngineException) {_                            _                            listener.onFailure(ExceptionsHelper.datafeedAlreadyExists(datafeedId))__                        } else {_                            listener.onFailure(e)__                        }_                    }_            ))___        } catch (IOException e) {_            listener.onFailure(new ElasticsearchParseException("Failed to serialise datafeed config with id [" + config.getId() + "]", e))__        }_    };persist,the,datafeed,configuration,to,the,config,index,it,is,an,error,if,a,datafeed,with,the,same,id,already,exists,the,config,will,not,be,overwritten,param,config,the,datafeed,configuration,param,listener,index,response,listener;public,void,put,datafeed,config,datafeed,config,config,map,string,string,headers,action,listener,index,response,listener,if,headers,is,empty,false,datafeed,config,builder,builder,new,datafeed,config,builder,config,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,config,builder,build,final,string,datafeed,id,config,get,id,try,xcontent,builder,builder,xcontent,factory,json,builder,xcontent,builder,source,config,to,xcontent,builder,new,to,xcontent,map,params,index,request,index,request,client,prepare,index,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,set,source,source,set,op,type,doc,write,request,op,type,create,set,refresh,policy,write,request,refresh,policy,immediate,request,execute,async,with,origin,client,index,action,instance,index,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,version,conflict,engine,exception,listener,on,failure,exceptions,helper,datafeed,already,exists,datafeed,id,else,listener,on,failure,e,catch,ioexception,e,listener,on,failure,new,elasticsearch,parse,exception,failed,to,serialise,datafeed,config,with,id,config,get,id,e
DatafeedConfigProvider -> public void putDatafeedConfig(DatafeedConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener);1549273268;Persist the datafeed configuration to the config index._It is an error if a datafeed with the same Id already exists -_the config will not be overwritten.__@param config The datafeed configuration_@param listener Index response listener;public void putDatafeedConfig(DatafeedConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener) {__        if (headers.isEmpty() == false) {_            _            DatafeedConfig.Builder builder = new DatafeedConfig.Builder(config)__            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__            config = builder.build()__        }__        final String datafeedId = config.getId()___        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_            XContentBuilder source = config.toXContent(builder, new ToXContent.MapParams(TO_XCONTENT_PARAMS))___            IndexRequest indexRequest =  client.prepareIndex(AnomalyDetectorsIndex.configIndexName(),_                    ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))_                    .setSource(source)_                    .setOpType(DocWriteRequest.OpType.CREATE)_                    .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)_                    .request()___            executeAsyncWithOrigin(client, ML_ORIGIN, IndexAction.INSTANCE, indexRequest, ActionListener.wrap(_                    listener::onResponse,_                    e -> {_                        if (e instanceof VersionConflictEngineException) {_                            _                            listener.onFailure(ExceptionsHelper.datafeedAlreadyExists(datafeedId))__                        } else {_                            listener.onFailure(e)__                        }_                    }_            ))___        } catch (IOException e) {_            listener.onFailure(new ElasticsearchParseException("Failed to serialise datafeed config with id [" + config.getId() + "]", e))__        }_    };persist,the,datafeed,configuration,to,the,config,index,it,is,an,error,if,a,datafeed,with,the,same,id,already,exists,the,config,will,not,be,overwritten,param,config,the,datafeed,configuration,param,listener,index,response,listener;public,void,put,datafeed,config,datafeed,config,config,map,string,string,headers,action,listener,index,response,listener,if,headers,is,empty,false,datafeed,config,builder,builder,new,datafeed,config,builder,config,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,config,builder,build,final,string,datafeed,id,config,get,id,try,xcontent,builder,builder,xcontent,factory,json,builder,xcontent,builder,source,config,to,xcontent,builder,new,to,xcontent,map,params,index,request,index,request,client,prepare,index,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,set,source,source,set,op,type,doc,write,request,op,type,create,set,refresh,policy,write,request,refresh,policy,immediate,request,execute,async,with,origin,client,index,action,instance,index,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,version,conflict,engine,exception,listener,on,failure,exceptions,helper,datafeed,already,exists,datafeed,id,else,listener,on,failure,e,catch,ioexception,e,listener,on,failure,new,elasticsearch,parse,exception,failed,to,serialise,datafeed,config,with,id,config,get,id,e
DatafeedConfigProvider -> public void putDatafeedConfig(DatafeedConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener);1549396415;Persist the datafeed configuration to the config index._It is an error if a datafeed with the same Id already exists -_the config will not be overwritten.__@param config The datafeed configuration_@param listener Index response listener;public void putDatafeedConfig(DatafeedConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener) {__        if (headers.isEmpty() == false) {_            _            DatafeedConfig.Builder builder = new DatafeedConfig.Builder(config)__            Map<String, String> securityHeaders = headers.entrySet().stream()_                    .filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey()))_                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))__            builder.setHeaders(securityHeaders)__            config = builder.build()__        }__        final String datafeedId = config.getId()___        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {_            XContentBuilder source = config.toXContent(builder, new ToXContent.MapParams(TO_XCONTENT_PARAMS))___            IndexRequest indexRequest =  client.prepareIndex(AnomalyDetectorsIndex.configIndexName(),_                    ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))_                    .setSource(source)_                    .setOpType(DocWriteRequest.OpType.CREATE)_                    .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)_                    .request()___            executeAsyncWithOrigin(client, ML_ORIGIN, IndexAction.INSTANCE, indexRequest, ActionListener.wrap(_                    listener::onResponse,_                    e -> {_                        if (e instanceof VersionConflictEngineException) {_                            _                            listener.onFailure(ExceptionsHelper.datafeedAlreadyExists(datafeedId))__                        } else {_                            listener.onFailure(e)__                        }_                    }_            ))___        } catch (IOException e) {_            listener.onFailure(new ElasticsearchParseException("Failed to serialise datafeed config with id [" + config.getId() + "]", e))__        }_    };persist,the,datafeed,configuration,to,the,config,index,it,is,an,error,if,a,datafeed,with,the,same,id,already,exists,the,config,will,not,be,overwritten,param,config,the,datafeed,configuration,param,listener,index,response,listener;public,void,put,datafeed,config,datafeed,config,config,map,string,string,headers,action,listener,index,response,listener,if,headers,is,empty,false,datafeed,config,builder,builder,new,datafeed,config,builder,config,map,string,string,security,headers,headers,entry,set,stream,filter,e,client,helper,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,builder,set,headers,security,headers,config,builder,build,final,string,datafeed,id,config,get,id,try,xcontent,builder,builder,xcontent,factory,json,builder,xcontent,builder,source,config,to,xcontent,builder,new,to,xcontent,map,params,index,request,index,request,client,prepare,index,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,set,source,source,set,op,type,doc,write,request,op,type,create,set,refresh,policy,write,request,refresh,policy,immediate,request,execute,async,with,origin,client,index,action,instance,index,request,action,listener,wrap,listener,on,response,e,if,e,instanceof,version,conflict,engine,exception,listener,on,failure,exceptions,helper,datafeed,already,exists,datafeed,id,else,listener,on,failure,e,catch,ioexception,e,listener,on,failure,new,elasticsearch,parse,exception,failed,to,serialise,datafeed,config,with,id,config,get,id,e
DatafeedConfigProvider -> public void deleteDatafeedConfig(String datafeedId,  ActionListener<DeleteResponse> actionListener);1545155131;Delete the datafeed config document__@param datafeedId The datafeed id_@param actionListener Deleted datafeed listener;public void deleteDatafeedConfig(String datafeedId,  ActionListener<DeleteResponse> actionListener) {_        DeleteRequest request = new DeleteRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))__        request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)__        executeAsyncWithOrigin(client, ML_ORIGIN, DeleteAction.INSTANCE, request, new ActionListener<DeleteResponse>() {_            @Override_            public void onResponse(DeleteResponse deleteResponse) {_                if (deleteResponse.getResult() == DocWriteResponse.Result.NOT_FOUND) {_                    actionListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                assert deleteResponse.getResult() == DocWriteResponse.Result.DELETED__                actionListener.onResponse(deleteResponse)__            }_            @Override_            public void onFailure(Exception e) {_                actionListener.onFailure(e)__            }_        })__    };delete,the,datafeed,config,document,param,datafeed,id,the,datafeed,id,param,action,listener,deleted,datafeed,listener;public,void,delete,datafeed,config,string,datafeed,id,action,listener,delete,response,action,listener,delete,request,request,new,delete,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,request,set,refresh,policy,write,request,refresh,policy,immediate,execute,async,with,origin,client,delete,action,instance,request,new,action,listener,delete,response,override,public,void,on,response,delete,response,delete,response,if,delete,response,get,result,doc,write,response,result,action,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,assert,delete,response,get,result,doc,write,response,result,deleted,action,listener,on,response,delete,response,override,public,void,on,failure,exception,e,action,listener,on,failure,e
DatafeedConfigProvider -> public void deleteDatafeedConfig(String datafeedId,  ActionListener<DeleteResponse> actionListener);1545227023;Delete the datafeed config document__@param datafeedId The datafeed id_@param actionListener Deleted datafeed listener;public void deleteDatafeedConfig(String datafeedId,  ActionListener<DeleteResponse> actionListener) {_        DeleteRequest request = new DeleteRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))__        request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)__        executeAsyncWithOrigin(client, ML_ORIGIN, DeleteAction.INSTANCE, request, new ActionListener<DeleteResponse>() {_            @Override_            public void onResponse(DeleteResponse deleteResponse) {_                if (deleteResponse.getResult() == DocWriteResponse.Result.NOT_FOUND) {_                    actionListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                assert deleteResponse.getResult() == DocWriteResponse.Result.DELETED__                actionListener.onResponse(deleteResponse)__            }_            @Override_            public void onFailure(Exception e) {_                actionListener.onFailure(e)__            }_        })__    };delete,the,datafeed,config,document,param,datafeed,id,the,datafeed,id,param,action,listener,deleted,datafeed,listener;public,void,delete,datafeed,config,string,datafeed,id,action,listener,delete,response,action,listener,delete,request,request,new,delete,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,request,set,refresh,policy,write,request,refresh,policy,immediate,execute,async,with,origin,client,delete,action,instance,request,new,action,listener,delete,response,override,public,void,on,response,delete,response,delete,response,if,delete,response,get,result,doc,write,response,result,action,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,assert,delete,response,get,result,doc,write,response,result,deleted,action,listener,on,response,delete,response,override,public,void,on,failure,exception,e,action,listener,on,failure,e
DatafeedConfigProvider -> public void deleteDatafeedConfig(String datafeedId,  ActionListener<DeleteResponse> actionListener);1548840711;Delete the datafeed config document__@param datafeedId The datafeed id_@param actionListener Deleted datafeed listener;public void deleteDatafeedConfig(String datafeedId,  ActionListener<DeleteResponse> actionListener) {_        DeleteRequest request = new DeleteRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))__        request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)__        executeAsyncWithOrigin(client, ML_ORIGIN, DeleteAction.INSTANCE, request, new ActionListener<DeleteResponse>() {_            @Override_            public void onResponse(DeleteResponse deleteResponse) {_                if (deleteResponse.getResult() == DocWriteResponse.Result.NOT_FOUND) {_                    actionListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                assert deleteResponse.getResult() == DocWriteResponse.Result.DELETED__                actionListener.onResponse(deleteResponse)__            }_            @Override_            public void onFailure(Exception e) {_                actionListener.onFailure(e)__            }_        })__    };delete,the,datafeed,config,document,param,datafeed,id,the,datafeed,id,param,action,listener,deleted,datafeed,listener;public,void,delete,datafeed,config,string,datafeed,id,action,listener,delete,response,action,listener,delete,request,request,new,delete,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,request,set,refresh,policy,write,request,refresh,policy,immediate,execute,async,with,origin,client,delete,action,instance,request,new,action,listener,delete,response,override,public,void,on,response,delete,response,delete,response,if,delete,response,get,result,doc,write,response,result,action,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,assert,delete,response,get,result,doc,write,response,result,deleted,action,listener,on,response,delete,response,override,public,void,on,failure,exception,e,action,listener,on,failure,e
DatafeedConfigProvider -> public void deleteDatafeedConfig(String datafeedId,  ActionListener<DeleteResponse> actionListener);1549273268;Delete the datafeed config document__@param datafeedId The datafeed id_@param actionListener Deleted datafeed listener;public void deleteDatafeedConfig(String datafeedId,  ActionListener<DeleteResponse> actionListener) {_        DeleteRequest request = new DeleteRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))__        request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)__        executeAsyncWithOrigin(client, ML_ORIGIN, DeleteAction.INSTANCE, request, new ActionListener<DeleteResponse>() {_            @Override_            public void onResponse(DeleteResponse deleteResponse) {_                if (deleteResponse.getResult() == DocWriteResponse.Result.NOT_FOUND) {_                    actionListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                assert deleteResponse.getResult() == DocWriteResponse.Result.DELETED__                actionListener.onResponse(deleteResponse)__            }_            @Override_            public void onFailure(Exception e) {_                actionListener.onFailure(e)__            }_        })__    };delete,the,datafeed,config,document,param,datafeed,id,the,datafeed,id,param,action,listener,deleted,datafeed,listener;public,void,delete,datafeed,config,string,datafeed,id,action,listener,delete,response,action,listener,delete,request,request,new,delete,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,request,set,refresh,policy,write,request,refresh,policy,immediate,execute,async,with,origin,client,delete,action,instance,request,new,action,listener,delete,response,override,public,void,on,response,delete,response,delete,response,if,delete,response,get,result,doc,write,response,result,action,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,assert,delete,response,get,result,doc,write,response,result,deleted,action,listener,on,response,delete,response,override,public,void,on,failure,exception,e,action,listener,on,failure,e
DatafeedConfigProvider -> public void deleteDatafeedConfig(String datafeedId,  ActionListener<DeleteResponse> actionListener);1549396415;Delete the datafeed config document__@param datafeedId The datafeed id_@param actionListener Deleted datafeed listener;public void deleteDatafeedConfig(String datafeedId,  ActionListener<DeleteResponse> actionListener) {_        DeleteRequest request = new DeleteRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))__        request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)__        executeAsyncWithOrigin(client, ML_ORIGIN, DeleteAction.INSTANCE, request, new ActionListener<DeleteResponse>() {_            @Override_            public void onResponse(DeleteResponse deleteResponse) {_                if (deleteResponse.getResult() == DocWriteResponse.Result.NOT_FOUND) {_                    actionListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                assert deleteResponse.getResult() == DocWriteResponse.Result.DELETED__                actionListener.onResponse(deleteResponse)__            }_            @Override_            public void onFailure(Exception e) {_                actionListener.onFailure(e)__            }_        })__    };delete,the,datafeed,config,document,param,datafeed,id,the,datafeed,id,param,action,listener,deleted,datafeed,listener;public,void,delete,datafeed,config,string,datafeed,id,action,listener,delete,response,action,listener,delete,request,request,new,delete,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,request,set,refresh,policy,write,request,refresh,policy,immediate,execute,async,with,origin,client,delete,action,instance,request,new,action,listener,delete,response,override,public,void,on,response,delete,response,delete,response,if,delete,response,get,result,doc,write,response,result,action,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,assert,delete,response,get,result,doc,write,response,result,deleted,action,listener,on,response,delete,response,override,public,void,on,failure,exception,e,action,listener,on,failure,e
DatafeedConfigProvider -> public void getDatafeedConfig(String datafeedId, ActionListener<DatafeedConfig.Builder> datafeedConfigListener);1545155131;Get the datafeed config specified by {@code datafeedId}._If the datafeed document is missing a {@code ResourceNotFoundException}_is returned via the listener.__If the .ml-config index does not exist it is treated as a missing datafeed_error.__@param datafeedId The datafeed ID_@param datafeedConfigListener The config listener;public void getDatafeedConfig(String datafeedId, ActionListener<DatafeedConfig.Builder> datafeedConfigListener) {_        GetRequest getRequest = new GetRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))__        executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                if (getResponse.isExists() == false) {_                    datafeedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                BytesReference source = getResponse.getSourceAsBytesRef()__                parseLenientlyFromSource(source, datafeedConfigListener)__            }_            @Override_            public void onFailure(Exception e) {_                if (e.getClass() == IndexNotFoundException.class) {_                    datafeedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                } else {_                    datafeedConfigListener.onFailure(e)__                }_            }_        })__    };get,the,datafeed,config,specified,by,code,datafeed,id,if,the,datafeed,document,is,missing,a,code,resource,not,found,exception,is,returned,via,the,listener,if,the,ml,config,index,does,not,exist,it,is,treated,as,a,missing,datafeed,error,param,datafeed,id,the,datafeed,id,param,datafeed,config,listener,the,config,listener;public,void,get,datafeed,config,string,datafeed,id,action,listener,datafeed,config,builder,datafeed,config,listener,get,request,get,request,new,get,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,execute,async,with,origin,client,get,action,instance,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,if,get,response,is,exists,false,datafeed,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,bytes,reference,source,get,response,get,source,as,bytes,ref,parse,leniently,from,source,source,datafeed,config,listener,override,public,void,on,failure,exception,e,if,e,get,class,index,not,found,exception,class,datafeed,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,else,datafeed,config,listener,on,failure,e
DatafeedConfigProvider -> public void getDatafeedConfig(String datafeedId, ActionListener<DatafeedConfig.Builder> datafeedConfigListener);1545227023;Get the datafeed config specified by {@code datafeedId}._If the datafeed document is missing a {@code ResourceNotFoundException}_is returned via the listener.__If the .ml-config index does not exist it is treated as a missing datafeed_error.__@param datafeedId The datafeed ID_@param datafeedConfigListener The config listener;public void getDatafeedConfig(String datafeedId, ActionListener<DatafeedConfig.Builder> datafeedConfigListener) {_        GetRequest getRequest = new GetRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))__        executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                if (getResponse.isExists() == false) {_                    datafeedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                BytesReference source = getResponse.getSourceAsBytesRef()__                parseLenientlyFromSource(source, datafeedConfigListener)__            }_            @Override_            public void onFailure(Exception e) {_                if (e.getClass() == IndexNotFoundException.class) {_                    datafeedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                } else {_                    datafeedConfigListener.onFailure(e)__                }_            }_        })__    };get,the,datafeed,config,specified,by,code,datafeed,id,if,the,datafeed,document,is,missing,a,code,resource,not,found,exception,is,returned,via,the,listener,if,the,ml,config,index,does,not,exist,it,is,treated,as,a,missing,datafeed,error,param,datafeed,id,the,datafeed,id,param,datafeed,config,listener,the,config,listener;public,void,get,datafeed,config,string,datafeed,id,action,listener,datafeed,config,builder,datafeed,config,listener,get,request,get,request,new,get,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,execute,async,with,origin,client,get,action,instance,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,if,get,response,is,exists,false,datafeed,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,bytes,reference,source,get,response,get,source,as,bytes,ref,parse,leniently,from,source,source,datafeed,config,listener,override,public,void,on,failure,exception,e,if,e,get,class,index,not,found,exception,class,datafeed,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,else,datafeed,config,listener,on,failure,e
DatafeedConfigProvider -> public void getDatafeedConfig(String datafeedId, ActionListener<DatafeedConfig.Builder> datafeedConfigListener);1548840711;Get the datafeed config specified by {@code datafeedId}._If the datafeed document is missing a {@code ResourceNotFoundException}_is returned via the listener.__If the .ml-config index does not exist it is treated as a missing datafeed_error.__@param datafeedId The datafeed ID_@param datafeedConfigListener The config listener;public void getDatafeedConfig(String datafeedId, ActionListener<DatafeedConfig.Builder> datafeedConfigListener) {_        GetRequest getRequest = new GetRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))__        executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                if (getResponse.isExists() == false) {_                    datafeedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                BytesReference source = getResponse.getSourceAsBytesRef()__                parseLenientlyFromSource(source, datafeedConfigListener)__            }_            @Override_            public void onFailure(Exception e) {_                if (e.getClass() == IndexNotFoundException.class) {_                    datafeedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                } else {_                    datafeedConfigListener.onFailure(e)__                }_            }_        })__    };get,the,datafeed,config,specified,by,code,datafeed,id,if,the,datafeed,document,is,missing,a,code,resource,not,found,exception,is,returned,via,the,listener,if,the,ml,config,index,does,not,exist,it,is,treated,as,a,missing,datafeed,error,param,datafeed,id,the,datafeed,id,param,datafeed,config,listener,the,config,listener;public,void,get,datafeed,config,string,datafeed,id,action,listener,datafeed,config,builder,datafeed,config,listener,get,request,get,request,new,get,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,execute,async,with,origin,client,get,action,instance,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,if,get,response,is,exists,false,datafeed,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,bytes,reference,source,get,response,get,source,as,bytes,ref,parse,leniently,from,source,source,datafeed,config,listener,override,public,void,on,failure,exception,e,if,e,get,class,index,not,found,exception,class,datafeed,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,else,datafeed,config,listener,on,failure,e
DatafeedConfigProvider -> public void getDatafeedConfig(String datafeedId, ActionListener<DatafeedConfig.Builder> datafeedConfigListener);1549273268;Get the datafeed config specified by {@code datafeedId}._If the datafeed document is missing a {@code ResourceNotFoundException}_is returned via the listener.__If the .ml-config index does not exist it is treated as a missing datafeed_error.__@param datafeedId The datafeed ID_@param datafeedConfigListener The config listener;public void getDatafeedConfig(String datafeedId, ActionListener<DatafeedConfig.Builder> datafeedConfigListener) {_        GetRequest getRequest = new GetRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))__        executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                if (getResponse.isExists() == false) {_                    datafeedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                BytesReference source = getResponse.getSourceAsBytesRef()__                parseLenientlyFromSource(source, datafeedConfigListener)__            }_            @Override_            public void onFailure(Exception e) {_                if (e.getClass() == IndexNotFoundException.class) {_                    datafeedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                } else {_                    datafeedConfigListener.onFailure(e)__                }_            }_        })__    };get,the,datafeed,config,specified,by,code,datafeed,id,if,the,datafeed,document,is,missing,a,code,resource,not,found,exception,is,returned,via,the,listener,if,the,ml,config,index,does,not,exist,it,is,treated,as,a,missing,datafeed,error,param,datafeed,id,the,datafeed,id,param,datafeed,config,listener,the,config,listener;public,void,get,datafeed,config,string,datafeed,id,action,listener,datafeed,config,builder,datafeed,config,listener,get,request,get,request,new,get,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,execute,async,with,origin,client,get,action,instance,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,if,get,response,is,exists,false,datafeed,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,bytes,reference,source,get,response,get,source,as,bytes,ref,parse,leniently,from,source,source,datafeed,config,listener,override,public,void,on,failure,exception,e,if,e,get,class,index,not,found,exception,class,datafeed,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,else,datafeed,config,listener,on,failure,e
DatafeedConfigProvider -> public void getDatafeedConfig(String datafeedId, ActionListener<DatafeedConfig.Builder> datafeedConfigListener);1549396415;Get the datafeed config specified by {@code datafeedId}._If the datafeed document is missing a {@code ResourceNotFoundException}_is returned via the listener.__If the .ml-config index does not exist it is treated as a missing datafeed_error.__@param datafeedId The datafeed ID_@param datafeedConfigListener The config listener;public void getDatafeedConfig(String datafeedId, ActionListener<DatafeedConfig.Builder> datafeedConfigListener) {_        GetRequest getRequest = new GetRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))__        executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                if (getResponse.isExists() == false) {_                    datafeedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                BytesReference source = getResponse.getSourceAsBytesRef()__                parseLenientlyFromSource(source, datafeedConfigListener)__            }_            @Override_            public void onFailure(Exception e) {_                if (e.getClass() == IndexNotFoundException.class) {_                    datafeedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                } else {_                    datafeedConfigListener.onFailure(e)__                }_            }_        })__    };get,the,datafeed,config,specified,by,code,datafeed,id,if,the,datafeed,document,is,missing,a,code,resource,not,found,exception,is,returned,via,the,listener,if,the,ml,config,index,does,not,exist,it,is,treated,as,a,missing,datafeed,error,param,datafeed,id,the,datafeed,id,param,datafeed,config,listener,the,config,listener;public,void,get,datafeed,config,string,datafeed,id,action,listener,datafeed,config,builder,datafeed,config,listener,get,request,get,request,new,get,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,execute,async,with,origin,client,get,action,instance,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,if,get,response,is,exists,false,datafeed,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,bytes,reference,source,get,response,get,source,as,bytes,ref,parse,leniently,from,source,source,datafeed,config,listener,override,public,void,on,failure,exception,e,if,e,get,class,index,not,found,exception,class,datafeed,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,else,datafeed,config,listener,on,failure,e
DatafeedConfigProvider -> public void expandDatafeedConfigs(String expression, boolean allowNoDatafeeds, ActionListener<List<DatafeedConfig.Builder>> listener);1545155131;The same logic as {@link #expandDatafeedIds(String, boolean, ActionListener)} but_the full datafeed configuration is returned.__See {@link #expandDatafeedIds(String, boolean, ActionListener)}__@param expression the expression to resolve_@param allowNoDatafeeds if {@code false}, an error is thrown when no name matches the {@code expression}._This only applies to wild card expressions, if {@code expression} is not a_wildcard then setting this true will not suppress the exception_@param listener The expanded datafeed config listener;public void expandDatafeedConfigs(String expression, boolean allowNoDatafeeds, ActionListener<List<DatafeedConfig.Builder>> listener) {_        String [] tokens = ExpandedIdsMatcher.tokenizeExpression(expression)__        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedIdQuery(tokens))__        sourceBuilder.sort(DatafeedConfig.ID.getPreferredName())___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSource(sourceBuilder)_                .setSize(searchSize)_                .request()___        ExpandedIdsMatcher requiredMatches = new ExpandedIdsMatcher(tokens, allowNoDatafeeds)___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            List<DatafeedConfig.Builder> datafeeds = new ArrayList<>()__                            Set<String> datafeedIds = new HashSet<>()__                            SearchHit[] hits = response.getHits().getHits()__                            for (SearchHit hit : hits) {_                                try {_                                    BytesReference source = hit.getSourceRef()__                                    DatafeedConfig.Builder datafeed = parseLenientlyFromSource(source)__                                    datafeeds.add(datafeed)__                                    datafeedIds.add(datafeed.getId())__                                } catch (IOException e) {_                                    _                                    logger.error("Error parsing datafeed configuration [" + hit.getId() + "]", e)__                                }_                            }__                            requiredMatches.filterMatchedIds(datafeedIds)__                            if (requiredMatches.hasUnmatchedIds()) {_                                _                                listener.onFailure(ExceptionsHelper.missingDatafeedException(requiredMatches.unmatchedIdsString()))__                                return__                            }__                            listener.onResponse(datafeeds)__                        },_                        listener::onFailure)_                , client::search)___    };the,same,logic,as,link,expand,datafeed,ids,string,boolean,action,listener,but,the,full,datafeed,configuration,is,returned,see,link,expand,datafeed,ids,string,boolean,action,listener,param,expression,the,expression,to,resolve,param,allow,no,datafeeds,if,code,false,an,error,is,thrown,when,no,name,matches,the,code,expression,this,only,applies,to,wild,card,expressions,if,code,expression,is,not,a,wildcard,then,setting,this,true,will,not,suppress,the,exception,param,listener,the,expanded,datafeed,config,listener;public,void,expand,datafeed,configs,string,expression,boolean,allow,no,datafeeds,action,listener,list,datafeed,config,builder,listener,string,tokens,expanded,ids,matcher,tokenize,expression,expression,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,id,query,tokens,source,builder,sort,datafeed,config,id,get,preferred,name,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,source,source,builder,set,size,search,size,request,expanded,ids,matcher,required,matches,new,expanded,ids,matcher,tokens,allow,no,datafeeds,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,list,datafeed,config,builder,datafeeds,new,array,list,set,string,datafeed,ids,new,hash,set,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,try,bytes,reference,source,hit,get,source,ref,datafeed,config,builder,datafeed,parse,leniently,from,source,source,datafeeds,add,datafeed,datafeed,ids,add,datafeed,get,id,catch,ioexception,e,logger,error,error,parsing,datafeed,configuration,hit,get,id,e,required,matches,filter,matched,ids,datafeed,ids,if,required,matches,has,unmatched,ids,listener,on,failure,exceptions,helper,missing,datafeed,exception,required,matches,unmatched,ids,string,return,listener,on,response,datafeeds,listener,on,failure,client,search
DatafeedConfigProvider -> public void expandDatafeedConfigs(String expression, boolean allowNoDatafeeds, ActionListener<List<DatafeedConfig.Builder>> listener);1545227023;The same logic as {@link #expandDatafeedIds(String, boolean, ActionListener)} but_the full datafeed configuration is returned.__See {@link #expandDatafeedIds(String, boolean, ActionListener)}__@param expression the expression to resolve_@param allowNoDatafeeds if {@code false}, an error is thrown when no name matches the {@code expression}._This only applies to wild card expressions, if {@code expression} is not a_wildcard then setting this true will not suppress the exception_@param listener The expanded datafeed config listener;public void expandDatafeedConfigs(String expression, boolean allowNoDatafeeds, ActionListener<List<DatafeedConfig.Builder>> listener) {_        String [] tokens = ExpandedIdsMatcher.tokenizeExpression(expression)__        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedIdQuery(tokens))__        sourceBuilder.sort(DatafeedConfig.ID.getPreferredName())___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSource(sourceBuilder)_                .setSize(AnomalyDetectorsIndex.CONFIG_INDEX_MAX_RESULTS_WINDOW)_                .request()___        ExpandedIdsMatcher requiredMatches = new ExpandedIdsMatcher(tokens, allowNoDatafeeds)___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            List<DatafeedConfig.Builder> datafeeds = new ArrayList<>()__                            Set<String> datafeedIds = new HashSet<>()__                            SearchHit[] hits = response.getHits().getHits()__                            for (SearchHit hit : hits) {_                                try {_                                    BytesReference source = hit.getSourceRef()__                                    DatafeedConfig.Builder datafeed = parseLenientlyFromSource(source)__                                    datafeeds.add(datafeed)__                                    datafeedIds.add(datafeed.getId())__                                } catch (IOException e) {_                                    _                                    logger.error("Error parsing datafeed configuration [" + hit.getId() + "]", e)__                                }_                            }__                            requiredMatches.filterMatchedIds(datafeedIds)__                            if (requiredMatches.hasUnmatchedIds()) {_                                _                                listener.onFailure(ExceptionsHelper.missingDatafeedException(requiredMatches.unmatchedIdsString()))__                                return__                            }__                            listener.onResponse(datafeeds)__                        },_                        listener::onFailure)_                , client::search)___    };the,same,logic,as,link,expand,datafeed,ids,string,boolean,action,listener,but,the,full,datafeed,configuration,is,returned,see,link,expand,datafeed,ids,string,boolean,action,listener,param,expression,the,expression,to,resolve,param,allow,no,datafeeds,if,code,false,an,error,is,thrown,when,no,name,matches,the,code,expression,this,only,applies,to,wild,card,expressions,if,code,expression,is,not,a,wildcard,then,setting,this,true,will,not,suppress,the,exception,param,listener,the,expanded,datafeed,config,listener;public,void,expand,datafeed,configs,string,expression,boolean,allow,no,datafeeds,action,listener,list,datafeed,config,builder,listener,string,tokens,expanded,ids,matcher,tokenize,expression,expression,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,id,query,tokens,source,builder,sort,datafeed,config,id,get,preferred,name,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,source,source,builder,set,size,anomaly,detectors,index,request,expanded,ids,matcher,required,matches,new,expanded,ids,matcher,tokens,allow,no,datafeeds,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,list,datafeed,config,builder,datafeeds,new,array,list,set,string,datafeed,ids,new,hash,set,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,try,bytes,reference,source,hit,get,source,ref,datafeed,config,builder,datafeed,parse,leniently,from,source,source,datafeeds,add,datafeed,datafeed,ids,add,datafeed,get,id,catch,ioexception,e,logger,error,error,parsing,datafeed,configuration,hit,get,id,e,required,matches,filter,matched,ids,datafeed,ids,if,required,matches,has,unmatched,ids,listener,on,failure,exceptions,helper,missing,datafeed,exception,required,matches,unmatched,ids,string,return,listener,on,response,datafeeds,listener,on,failure,client,search
DatafeedConfigProvider -> public void expandDatafeedConfigs(String expression, boolean allowNoDatafeeds, ActionListener<List<DatafeedConfig.Builder>> listener);1548840711;The same logic as {@link #expandDatafeedIds(String, boolean, ActionListener)} but_the full datafeed configuration is returned.__See {@link #expandDatafeedIds(String, boolean, ActionListener)}__@param expression the expression to resolve_@param allowNoDatafeeds if {@code false}, an error is thrown when no name matches the {@code expression}._This only applies to wild card expressions, if {@code expression} is not a_wildcard then setting this true will not suppress the exception_@param listener The expanded datafeed config listener;public void expandDatafeedConfigs(String expression, boolean allowNoDatafeeds, ActionListener<List<DatafeedConfig.Builder>> listener) {_        String [] tokens = ExpandedIdsMatcher.tokenizeExpression(expression)__        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedIdQuery(tokens))__        sourceBuilder.sort(DatafeedConfig.ID.getPreferredName())___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSource(sourceBuilder)_                .setSize(AnomalyDetectorsIndex.CONFIG_INDEX_MAX_RESULTS_WINDOW)_                .request()___        ExpandedIdsMatcher requiredMatches = new ExpandedIdsMatcher(tokens, allowNoDatafeeds)___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            List<DatafeedConfig.Builder> datafeeds = new ArrayList<>()__                            Set<String> datafeedIds = new HashSet<>()__                            SearchHit[] hits = response.getHits().getHits()__                            for (SearchHit hit : hits) {_                                try {_                                    BytesReference source = hit.getSourceRef()__                                    DatafeedConfig.Builder datafeed = parseLenientlyFromSource(source)__                                    datafeeds.add(datafeed)__                                    datafeedIds.add(datafeed.getId())__                                } catch (IOException e) {_                                    _                                    logger.error("Error parsing datafeed configuration [" + hit.getId() + "]", e)__                                }_                            }__                            requiredMatches.filterMatchedIds(datafeedIds)__                            if (requiredMatches.hasUnmatchedIds()) {_                                _                                listener.onFailure(ExceptionsHelper.missingDatafeedException(requiredMatches.unmatchedIdsString()))__                                return__                            }__                            listener.onResponse(datafeeds)__                        },_                        listener::onFailure)_                , client::search)___    };the,same,logic,as,link,expand,datafeed,ids,string,boolean,action,listener,but,the,full,datafeed,configuration,is,returned,see,link,expand,datafeed,ids,string,boolean,action,listener,param,expression,the,expression,to,resolve,param,allow,no,datafeeds,if,code,false,an,error,is,thrown,when,no,name,matches,the,code,expression,this,only,applies,to,wild,card,expressions,if,code,expression,is,not,a,wildcard,then,setting,this,true,will,not,suppress,the,exception,param,listener,the,expanded,datafeed,config,listener;public,void,expand,datafeed,configs,string,expression,boolean,allow,no,datafeeds,action,listener,list,datafeed,config,builder,listener,string,tokens,expanded,ids,matcher,tokenize,expression,expression,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,id,query,tokens,source,builder,sort,datafeed,config,id,get,preferred,name,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,source,source,builder,set,size,anomaly,detectors,index,request,expanded,ids,matcher,required,matches,new,expanded,ids,matcher,tokens,allow,no,datafeeds,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,list,datafeed,config,builder,datafeeds,new,array,list,set,string,datafeed,ids,new,hash,set,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,try,bytes,reference,source,hit,get,source,ref,datafeed,config,builder,datafeed,parse,leniently,from,source,source,datafeeds,add,datafeed,datafeed,ids,add,datafeed,get,id,catch,ioexception,e,logger,error,error,parsing,datafeed,configuration,hit,get,id,e,required,matches,filter,matched,ids,datafeed,ids,if,required,matches,has,unmatched,ids,listener,on,failure,exceptions,helper,missing,datafeed,exception,required,matches,unmatched,ids,string,return,listener,on,response,datafeeds,listener,on,failure,client,search
DatafeedConfigProvider -> public void expandDatafeedConfigs(String expression, boolean allowNoDatafeeds, ActionListener<List<DatafeedConfig.Builder>> listener);1549273268;The same logic as {@link #expandDatafeedIds(String, boolean, ActionListener)} but_the full datafeed configuration is returned.__See {@link #expandDatafeedIds(String, boolean, ActionListener)}__@param expression the expression to resolve_@param allowNoDatafeeds if {@code false}, an error is thrown when no name matches the {@code expression}._This only applies to wild card expressions, if {@code expression} is not a_wildcard then setting this true will not suppress the exception_@param listener The expanded datafeed config listener;public void expandDatafeedConfigs(String expression, boolean allowNoDatafeeds, ActionListener<List<DatafeedConfig.Builder>> listener) {_        String [] tokens = ExpandedIdsMatcher.tokenizeExpression(expression)__        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedIdQuery(tokens))__        sourceBuilder.sort(DatafeedConfig.ID.getPreferredName())___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSource(sourceBuilder)_                .setSize(AnomalyDetectorsIndex.CONFIG_INDEX_MAX_RESULTS_WINDOW)_                .request()___        ExpandedIdsMatcher requiredMatches = new ExpandedIdsMatcher(tokens, allowNoDatafeeds)___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            List<DatafeedConfig.Builder> datafeeds = new ArrayList<>()__                            Set<String> datafeedIds = new HashSet<>()__                            SearchHit[] hits = response.getHits().getHits()__                            for (SearchHit hit : hits) {_                                try {_                                    BytesReference source = hit.getSourceRef()__                                    DatafeedConfig.Builder datafeed = parseLenientlyFromSource(source)__                                    datafeeds.add(datafeed)__                                    datafeedIds.add(datafeed.getId())__                                } catch (IOException e) {_                                    _                                    logger.error("Error parsing datafeed configuration [" + hit.getId() + "]", e)__                                }_                            }__                            requiredMatches.filterMatchedIds(datafeedIds)__                            if (requiredMatches.hasUnmatchedIds()) {_                                _                                listener.onFailure(ExceptionsHelper.missingDatafeedException(requiredMatches.unmatchedIdsString()))__                                return__                            }__                            listener.onResponse(datafeeds)__                        },_                        listener::onFailure)_                , client::search)___    };the,same,logic,as,link,expand,datafeed,ids,string,boolean,action,listener,but,the,full,datafeed,configuration,is,returned,see,link,expand,datafeed,ids,string,boolean,action,listener,param,expression,the,expression,to,resolve,param,allow,no,datafeeds,if,code,false,an,error,is,thrown,when,no,name,matches,the,code,expression,this,only,applies,to,wild,card,expressions,if,code,expression,is,not,a,wildcard,then,setting,this,true,will,not,suppress,the,exception,param,listener,the,expanded,datafeed,config,listener;public,void,expand,datafeed,configs,string,expression,boolean,allow,no,datafeeds,action,listener,list,datafeed,config,builder,listener,string,tokens,expanded,ids,matcher,tokenize,expression,expression,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,id,query,tokens,source,builder,sort,datafeed,config,id,get,preferred,name,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,source,source,builder,set,size,anomaly,detectors,index,request,expanded,ids,matcher,required,matches,new,expanded,ids,matcher,tokens,allow,no,datafeeds,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,list,datafeed,config,builder,datafeeds,new,array,list,set,string,datafeed,ids,new,hash,set,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,try,bytes,reference,source,hit,get,source,ref,datafeed,config,builder,datafeed,parse,leniently,from,source,source,datafeeds,add,datafeed,datafeed,ids,add,datafeed,get,id,catch,ioexception,e,logger,error,error,parsing,datafeed,configuration,hit,get,id,e,required,matches,filter,matched,ids,datafeed,ids,if,required,matches,has,unmatched,ids,listener,on,failure,exceptions,helper,missing,datafeed,exception,required,matches,unmatched,ids,string,return,listener,on,response,datafeeds,listener,on,failure,client,search
DatafeedConfigProvider -> public void expandDatafeedConfigs(String expression, boolean allowNoDatafeeds, ActionListener<List<DatafeedConfig.Builder>> listener);1549396415;The same logic as {@link #expandDatafeedIds(String, boolean, ActionListener)} but_the full datafeed configuration is returned.__See {@link #expandDatafeedIds(String, boolean, ActionListener)}__@param expression the expression to resolve_@param allowNoDatafeeds if {@code false}, an error is thrown when no name matches the {@code expression}._This only applies to wild card expressions, if {@code expression} is not a_wildcard then setting this true will not suppress the exception_@param listener The expanded datafeed config listener;public void expandDatafeedConfigs(String expression, boolean allowNoDatafeeds, ActionListener<List<DatafeedConfig.Builder>> listener) {_        String [] tokens = ExpandedIdsMatcher.tokenizeExpression(expression)__        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedIdQuery(tokens))__        sourceBuilder.sort(DatafeedConfig.ID.getPreferredName())___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSource(sourceBuilder)_                .setSize(AnomalyDetectorsIndex.CONFIG_INDEX_MAX_RESULTS_WINDOW)_                .request()___        ExpandedIdsMatcher requiredMatches = new ExpandedIdsMatcher(tokens, allowNoDatafeeds)___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            List<DatafeedConfig.Builder> datafeeds = new ArrayList<>()__                            Set<String> datafeedIds = new HashSet<>()__                            SearchHit[] hits = response.getHits().getHits()__                            for (SearchHit hit : hits) {_                                try {_                                    BytesReference source = hit.getSourceRef()__                                    DatafeedConfig.Builder datafeed = parseLenientlyFromSource(source)__                                    datafeeds.add(datafeed)__                                    datafeedIds.add(datafeed.getId())__                                } catch (IOException e) {_                                    _                                    logger.error("Error parsing datafeed configuration [" + hit.getId() + "]", e)__                                }_                            }__                            requiredMatches.filterMatchedIds(datafeedIds)__                            if (requiredMatches.hasUnmatchedIds()) {_                                _                                listener.onFailure(ExceptionsHelper.missingDatafeedException(requiredMatches.unmatchedIdsString()))__                                return__                            }__                            listener.onResponse(datafeeds)__                        },_                        listener::onFailure)_                , client::search)___    };the,same,logic,as,link,expand,datafeed,ids,string,boolean,action,listener,but,the,full,datafeed,configuration,is,returned,see,link,expand,datafeed,ids,string,boolean,action,listener,param,expression,the,expression,to,resolve,param,allow,no,datafeeds,if,code,false,an,error,is,thrown,when,no,name,matches,the,code,expression,this,only,applies,to,wild,card,expressions,if,code,expression,is,not,a,wildcard,then,setting,this,true,will,not,suppress,the,exception,param,listener,the,expanded,datafeed,config,listener;public,void,expand,datafeed,configs,string,expression,boolean,allow,no,datafeeds,action,listener,list,datafeed,config,builder,listener,string,tokens,expanded,ids,matcher,tokenize,expression,expression,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,id,query,tokens,source,builder,sort,datafeed,config,id,get,preferred,name,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,source,source,builder,set,size,anomaly,detectors,index,request,expanded,ids,matcher,required,matches,new,expanded,ids,matcher,tokens,allow,no,datafeeds,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,list,datafeed,config,builder,datafeeds,new,array,list,set,string,datafeed,ids,new,hash,set,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,try,bytes,reference,source,hit,get,source,ref,datafeed,config,builder,datafeed,parse,leniently,from,source,source,datafeeds,add,datafeed,datafeed,ids,add,datafeed,get,id,catch,ioexception,e,logger,error,error,parsing,datafeed,configuration,hit,get,id,e,required,matches,filter,matched,ids,datafeed,ids,if,required,matches,has,unmatched,ids,listener,on,failure,exceptions,helper,missing,datafeed,exception,required,matches,unmatched,ids,string,return,listener,on,response,datafeeds,listener,on,failure,client,search
DatafeedConfigProvider -> public void updateDatefeedConfig(String datafeedId, DatafeedUpdate update, Map<String, String> headers,                           BiConsumer<DatafeedConfig, ActionListener<Boolean>> validator,                           ActionListener<DatafeedConfig> updatedConfigListener);1545155131;Get the datafeed config and apply the {@code update}_then index the modified config setting the version in the request.__The {@code validator} consumer can be used to perform extra validation_but it must call the passed ActionListener. For example a no-op validator_would be {@code (updatedConfig, listener) -> listener.onResponse(Boolean.TRUE)}__@param datafeedId The Id of the datafeed to update_@param update The update_@param headers Datafeed headers applied with the update_@param validator BiConsumer that accepts the updated config and can perform_extra validations. {@code validator} must call the passed listener_@param updatedConfigListener Updated datafeed config listener;public void updateDatefeedConfig(String datafeedId, DatafeedUpdate update, Map<String, String> headers,_                          BiConsumer<DatafeedConfig, ActionListener<Boolean>> validator,_                          ActionListener<DatafeedConfig> updatedConfigListener) {_        GetRequest getRequest = new GetRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))___        executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                if (getResponse.isExists() == false) {_                    updatedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                long version = getResponse.getVersion()__                BytesReference source = getResponse.getSourceAsBytesRef()__                DatafeedConfig.Builder configBuilder__                try {_                    configBuilder = parseLenientlyFromSource(source)__                } catch (IOException e) {_                    updatedConfigListener.onFailure(_                            new ElasticsearchParseException("Failed to parse datafeed config [" + datafeedId + "]", e))__                    return__                }__                DatafeedConfig updatedConfig__                try {_                    updatedConfig = update.apply(configBuilder.build(), headers)__                } catch (Exception e) {_                    updatedConfigListener.onFailure(e)__                    return__                }__                ActionListener<Boolean> validatedListener = ActionListener.wrap(_                        ok -> {_                            indexUpdatedConfig(updatedConfig, version, ActionListener.wrap(_                                    indexResponse -> {_                                        assert indexResponse.getResult() == DocWriteResponse.Result.UPDATED__                                        updatedConfigListener.onResponse(updatedConfig)__                                    },_                                    updatedConfigListener::onFailure))__                        },_                        updatedConfigListener::onFailure_                )___                validator.accept(updatedConfig, validatedListener)__            }__            @Override_            public void onFailure(Exception e) {_                updatedConfigListener.onFailure(e)__            }_        })__    };get,the,datafeed,config,and,apply,the,code,update,then,index,the,modified,config,setting,the,version,in,the,request,the,code,validator,consumer,can,be,used,to,perform,extra,validation,but,it,must,call,the,passed,action,listener,for,example,a,no,op,validator,would,be,code,updated,config,listener,listener,on,response,boolean,true,param,datafeed,id,the,id,of,the,datafeed,to,update,param,update,the,update,param,headers,datafeed,headers,applied,with,the,update,param,validator,bi,consumer,that,accepts,the,updated,config,and,can,perform,extra,validations,code,validator,must,call,the,passed,listener,param,updated,config,listener,updated,datafeed,config,listener;public,void,update,datefeed,config,string,datafeed,id,datafeed,update,update,map,string,string,headers,bi,consumer,datafeed,config,action,listener,boolean,validator,action,listener,datafeed,config,updated,config,listener,get,request,get,request,new,get,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,execute,async,with,origin,client,get,action,instance,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,if,get,response,is,exists,false,updated,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,long,version,get,response,get,version,bytes,reference,source,get,response,get,source,as,bytes,ref,datafeed,config,builder,config,builder,try,config,builder,parse,leniently,from,source,source,catch,ioexception,e,updated,config,listener,on,failure,new,elasticsearch,parse,exception,failed,to,parse,datafeed,config,datafeed,id,e,return,datafeed,config,updated,config,try,updated,config,update,apply,config,builder,build,headers,catch,exception,e,updated,config,listener,on,failure,e,return,action,listener,boolean,validated,listener,action,listener,wrap,ok,index,updated,config,updated,config,version,action,listener,wrap,index,response,assert,index,response,get,result,doc,write,response,result,updated,updated,config,listener,on,response,updated,config,updated,config,listener,on,failure,updated,config,listener,on,failure,validator,accept,updated,config,validated,listener,override,public,void,on,failure,exception,e,updated,config,listener,on,failure,e
DatafeedConfigProvider -> public void updateDatefeedConfig(String datafeedId, DatafeedUpdate update, Map<String, String> headers,                           BiConsumer<DatafeedConfig, ActionListener<Boolean>> validator,                           ActionListener<DatafeedConfig> updatedConfigListener);1545227023;Get the datafeed config and apply the {@code update}_then index the modified config setting the version in the request.__The {@code validator} consumer can be used to perform extra validation_but it must call the passed ActionListener. For example a no-op validator_would be {@code (updatedConfig, listener) -> listener.onResponse(Boolean.TRUE)}__@param datafeedId The Id of the datafeed to update_@param update The update_@param headers Datafeed headers applied with the update_@param validator BiConsumer that accepts the updated config and can perform_extra validations. {@code validator} must call the passed listener_@param updatedConfigListener Updated datafeed config listener;public void updateDatefeedConfig(String datafeedId, DatafeedUpdate update, Map<String, String> headers,_                          BiConsumer<DatafeedConfig, ActionListener<Boolean>> validator,_                          ActionListener<DatafeedConfig> updatedConfigListener) {_        GetRequest getRequest = new GetRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))___        executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                if (getResponse.isExists() == false) {_                    updatedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                long version = getResponse.getVersion()__                BytesReference source = getResponse.getSourceAsBytesRef()__                DatafeedConfig.Builder configBuilder__                try {_                    configBuilder = parseLenientlyFromSource(source)__                } catch (IOException e) {_                    updatedConfigListener.onFailure(_                            new ElasticsearchParseException("Failed to parse datafeed config [" + datafeedId + "]", e))__                    return__                }__                DatafeedConfig updatedConfig__                try {_                    updatedConfig = update.apply(configBuilder.build(), headers)__                } catch (Exception e) {_                    updatedConfigListener.onFailure(e)__                    return__                }__                ActionListener<Boolean> validatedListener = ActionListener.wrap(_                        ok -> {_                            indexUpdatedConfig(updatedConfig, version, ActionListener.wrap(_                                    indexResponse -> {_                                        assert indexResponse.getResult() == DocWriteResponse.Result.UPDATED__                                        updatedConfigListener.onResponse(updatedConfig)__                                    },_                                    updatedConfigListener::onFailure))__                        },_                        updatedConfigListener::onFailure_                )___                validator.accept(updatedConfig, validatedListener)__            }__            @Override_            public void onFailure(Exception e) {_                updatedConfigListener.onFailure(e)__            }_        })__    };get,the,datafeed,config,and,apply,the,code,update,then,index,the,modified,config,setting,the,version,in,the,request,the,code,validator,consumer,can,be,used,to,perform,extra,validation,but,it,must,call,the,passed,action,listener,for,example,a,no,op,validator,would,be,code,updated,config,listener,listener,on,response,boolean,true,param,datafeed,id,the,id,of,the,datafeed,to,update,param,update,the,update,param,headers,datafeed,headers,applied,with,the,update,param,validator,bi,consumer,that,accepts,the,updated,config,and,can,perform,extra,validations,code,validator,must,call,the,passed,listener,param,updated,config,listener,updated,datafeed,config,listener;public,void,update,datefeed,config,string,datafeed,id,datafeed,update,update,map,string,string,headers,bi,consumer,datafeed,config,action,listener,boolean,validator,action,listener,datafeed,config,updated,config,listener,get,request,get,request,new,get,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,execute,async,with,origin,client,get,action,instance,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,if,get,response,is,exists,false,updated,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,long,version,get,response,get,version,bytes,reference,source,get,response,get,source,as,bytes,ref,datafeed,config,builder,config,builder,try,config,builder,parse,leniently,from,source,source,catch,ioexception,e,updated,config,listener,on,failure,new,elasticsearch,parse,exception,failed,to,parse,datafeed,config,datafeed,id,e,return,datafeed,config,updated,config,try,updated,config,update,apply,config,builder,build,headers,catch,exception,e,updated,config,listener,on,failure,e,return,action,listener,boolean,validated,listener,action,listener,wrap,ok,index,updated,config,updated,config,version,action,listener,wrap,index,response,assert,index,response,get,result,doc,write,response,result,updated,updated,config,listener,on,response,updated,config,updated,config,listener,on,failure,updated,config,listener,on,failure,validator,accept,updated,config,validated,listener,override,public,void,on,failure,exception,e,updated,config,listener,on,failure,e
DatafeedConfigProvider -> public void updateDatefeedConfig(String datafeedId, DatafeedUpdate update, Map<String, String> headers,                           BiConsumer<DatafeedConfig, ActionListener<Boolean>> validator,                           ActionListener<DatafeedConfig> updatedConfigListener);1548840711;Get the datafeed config and apply the {@code update}_then index the modified config setting the version in the request.__The {@code validator} consumer can be used to perform extra validation_but it must call the passed ActionListener. For example a no-op validator_would be {@code (updatedConfig, listener) -> listener.onResponse(Boolean.TRUE)}__@param datafeedId The Id of the datafeed to update_@param update The update_@param headers Datafeed headers applied with the update_@param validator BiConsumer that accepts the updated config and can perform_extra validations. {@code validator} must call the passed listener_@param updatedConfigListener Updated datafeed config listener;public void updateDatefeedConfig(String datafeedId, DatafeedUpdate update, Map<String, String> headers,_                          BiConsumer<DatafeedConfig, ActionListener<Boolean>> validator,_                          ActionListener<DatafeedConfig> updatedConfigListener) {_        GetRequest getRequest = new GetRequest(AnomalyDetectorsIndex.configIndexName(),_                ElasticsearchMappings.DOC_TYPE, DatafeedConfig.documentId(datafeedId))___        executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {_            @Override_            public void onResponse(GetResponse getResponse) {_                if (getResponse.isExists() == false) {_                    updatedConfigListener.onFailure(ExceptionsHelper.missingDatafeedException(datafeedId))__                    return__                }_                long version = getResponse.getVersion()__                BytesReference source = getResponse.getSourceAsBytesRef()__                DatafeedConfig.Builder configBuilder__                try {_                    configBuilder = parseLenientlyFromSource(source)__                } catch (IOException e) {_                    updatedConfigListener.onFailure(_                            new ElasticsearchParseException("Failed to parse datafeed config [" + datafeedId + "]", e))__                    return__                }__                DatafeedConfig updatedConfig__                try {_                    updatedConfig = update.apply(configBuilder.build(), headers)__                } catch (Exception e) {_                    updatedConfigListener.onFailure(e)__                    return__                }__                ActionListener<Boolean> validatedListener = ActionListener.wrap(_                        ok -> {_                            indexUpdatedConfig(updatedConfig, version, ActionListener.wrap(_                                    indexResponse -> {_                                        assert indexResponse.getResult() == DocWriteResponse.Result.UPDATED__                                        updatedConfigListener.onResponse(updatedConfig)__                                    },_                                    updatedConfigListener::onFailure))__                        },_                        updatedConfigListener::onFailure_                )___                validator.accept(updatedConfig, validatedListener)__            }__            @Override_            public void onFailure(Exception e) {_                updatedConfigListener.onFailure(e)__            }_        })__    };get,the,datafeed,config,and,apply,the,code,update,then,index,the,modified,config,setting,the,version,in,the,request,the,code,validator,consumer,can,be,used,to,perform,extra,validation,but,it,must,call,the,passed,action,listener,for,example,a,no,op,validator,would,be,code,updated,config,listener,listener,on,response,boolean,true,param,datafeed,id,the,id,of,the,datafeed,to,update,param,update,the,update,param,headers,datafeed,headers,applied,with,the,update,param,validator,bi,consumer,that,accepts,the,updated,config,and,can,perform,extra,validations,code,validator,must,call,the,passed,listener,param,updated,config,listener,updated,datafeed,config,listener;public,void,update,datefeed,config,string,datafeed,id,datafeed,update,update,map,string,string,headers,bi,consumer,datafeed,config,action,listener,boolean,validator,action,listener,datafeed,config,updated,config,listener,get,request,get,request,new,get,request,anomaly,detectors,index,config,index,name,elasticsearch,mappings,datafeed,config,document,id,datafeed,id,execute,async,with,origin,client,get,action,instance,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,get,response,if,get,response,is,exists,false,updated,config,listener,on,failure,exceptions,helper,missing,datafeed,exception,datafeed,id,return,long,version,get,response,get,version,bytes,reference,source,get,response,get,source,as,bytes,ref,datafeed,config,builder,config,builder,try,config,builder,parse,leniently,from,source,source,catch,ioexception,e,updated,config,listener,on,failure,new,elasticsearch,parse,exception,failed,to,parse,datafeed,config,datafeed,id,e,return,datafeed,config,updated,config,try,updated,config,update,apply,config,builder,build,headers,catch,exception,e,updated,config,listener,on,failure,e,return,action,listener,boolean,validated,listener,action,listener,wrap,ok,index,updated,config,updated,config,version,action,listener,wrap,index,response,assert,index,response,get,result,doc,write,response,result,updated,updated,config,listener,on,response,updated,config,updated,config,listener,on,failure,updated,config,listener,on,failure,validator,accept,updated,config,validated,listener,override,public,void,on,failure,exception,e,updated,config,listener,on,failure,e
DatafeedConfigProvider -> public void findDatafeedsForJobIds(Collection<String> jobIds, ActionListener<Set<String>> listener);1545155131;Find any datafeeds that are used by jobs {@code jobIds} i.e. the_datafeeds that references any of the jobs in {@code jobIds}.__In theory there should never be more than one datafeed referencing a_particular job.__@param jobIds    The jobs to find the datafeeds of_@param listener  Datafeed Id listener;public void findDatafeedsForJobIds(Collection<String> jobIds, ActionListener<Set<String>> listener) {_        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedJobIdsQuery(jobIds))__        sourceBuilder.fetchSource(false)__        sourceBuilder.docValueField(DatafeedConfig.ID.getPreferredName(), DocValueFieldsContext.USE_DEFAULT_FORMAT)___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSize(jobIds.size())_                .setSource(sourceBuilder).request()___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            Set<String> datafeedIds = new HashSet<>()__                            _                            assert response.getHits().getTotalHits().value <= jobIds.size()__                            SearchHit[] hits = response.getHits().getHits()___                            for (SearchHit hit : hits) {_                                datafeedIds.add(hit.field(DatafeedConfig.ID.getPreferredName()).getValue())__                            }__                            listener.onResponse(datafeedIds)__                        },_                        listener::onFailure)_                , client::search)__    };find,any,datafeeds,that,are,used,by,jobs,code,job,ids,i,e,the,datafeeds,that,references,any,of,the,jobs,in,code,job,ids,in,theory,there,should,never,be,more,than,one,datafeed,referencing,a,particular,job,param,job,ids,the,jobs,to,find,the,datafeeds,of,param,listener,datafeed,id,listener;public,void,find,datafeeds,for,job,ids,collection,string,job,ids,action,listener,set,string,listener,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,job,ids,query,job,ids,source,builder,fetch,source,false,source,builder,doc,value,field,datafeed,config,id,get,preferred,name,doc,value,fields,context,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,size,job,ids,size,set,source,source,builder,request,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,set,string,datafeed,ids,new,hash,set,assert,response,get,hits,get,total,hits,value,job,ids,size,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,datafeed,ids,add,hit,field,datafeed,config,id,get,preferred,name,get,value,listener,on,response,datafeed,ids,listener,on,failure,client,search
DatafeedConfigProvider -> public void findDatafeedsForJobIds(Collection<String> jobIds, ActionListener<Set<String>> listener);1545227023;Find any datafeeds that are used by jobs {@code jobIds} i.e. the_datafeeds that references any of the jobs in {@code jobIds}.__In theory there should never be more than one datafeed referencing a_particular job.__@param jobIds    The jobs to find the datafeeds of_@param listener  Datafeed Id listener;public void findDatafeedsForJobIds(Collection<String> jobIds, ActionListener<Set<String>> listener) {_        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedJobIdsQuery(jobIds))__        sourceBuilder.fetchSource(false)__        sourceBuilder.docValueField(DatafeedConfig.ID.getPreferredName(), DocValueFieldsContext.USE_DEFAULT_FORMAT)___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSize(jobIds.size())_                .setSource(sourceBuilder).request()___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            Set<String> datafeedIds = new HashSet<>()__                            _                            assert response.getHits().getTotalHits().value <= jobIds.size()__                            SearchHit[] hits = response.getHits().getHits()___                            for (SearchHit hit : hits) {_                                datafeedIds.add(hit.field(DatafeedConfig.ID.getPreferredName()).getValue())__                            }__                            listener.onResponse(datafeedIds)__                        },_                        listener::onFailure)_                , client::search)__    };find,any,datafeeds,that,are,used,by,jobs,code,job,ids,i,e,the,datafeeds,that,references,any,of,the,jobs,in,code,job,ids,in,theory,there,should,never,be,more,than,one,datafeed,referencing,a,particular,job,param,job,ids,the,jobs,to,find,the,datafeeds,of,param,listener,datafeed,id,listener;public,void,find,datafeeds,for,job,ids,collection,string,job,ids,action,listener,set,string,listener,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,job,ids,query,job,ids,source,builder,fetch,source,false,source,builder,doc,value,field,datafeed,config,id,get,preferred,name,doc,value,fields,context,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,size,job,ids,size,set,source,source,builder,request,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,set,string,datafeed,ids,new,hash,set,assert,response,get,hits,get,total,hits,value,job,ids,size,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,datafeed,ids,add,hit,field,datafeed,config,id,get,preferred,name,get,value,listener,on,response,datafeed,ids,listener,on,failure,client,search
DatafeedConfigProvider -> public void findDatafeedsForJobIds(Collection<String> jobIds, ActionListener<Set<String>> listener);1548840711;Find any datafeeds that are used by jobs {@code jobIds} i.e. the_datafeeds that references any of the jobs in {@code jobIds}.__In theory there should never be more than one datafeed referencing a_particular job.__@param jobIds    The jobs to find the datafeeds of_@param listener  Datafeed Id listener;public void findDatafeedsForJobIds(Collection<String> jobIds, ActionListener<Set<String>> listener) {_        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedJobIdsQuery(jobIds))__        sourceBuilder.fetchSource(false)__        sourceBuilder.docValueField(DatafeedConfig.ID.getPreferredName(), null)___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSize(jobIds.size())_                .setSource(sourceBuilder).request()___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            Set<String> datafeedIds = new HashSet<>()__                            _                            assert response.getHits().getTotalHits().value <= jobIds.size()__                            SearchHit[] hits = response.getHits().getHits()___                            for (SearchHit hit : hits) {_                                datafeedIds.add(hit.field(DatafeedConfig.ID.getPreferredName()).getValue())__                            }__                            listener.onResponse(datafeedIds)__                        },_                        listener::onFailure)_                , client::search)__    };find,any,datafeeds,that,are,used,by,jobs,code,job,ids,i,e,the,datafeeds,that,references,any,of,the,jobs,in,code,job,ids,in,theory,there,should,never,be,more,than,one,datafeed,referencing,a,particular,job,param,job,ids,the,jobs,to,find,the,datafeeds,of,param,listener,datafeed,id,listener;public,void,find,datafeeds,for,job,ids,collection,string,job,ids,action,listener,set,string,listener,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,job,ids,query,job,ids,source,builder,fetch,source,false,source,builder,doc,value,field,datafeed,config,id,get,preferred,name,null,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,size,job,ids,size,set,source,source,builder,request,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,set,string,datafeed,ids,new,hash,set,assert,response,get,hits,get,total,hits,value,job,ids,size,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,datafeed,ids,add,hit,field,datafeed,config,id,get,preferred,name,get,value,listener,on,response,datafeed,ids,listener,on,failure,client,search
DatafeedConfigProvider -> public void findDatafeedsForJobIds(Collection<String> jobIds, ActionListener<Set<String>> listener);1549273268;Find any datafeeds that are used by jobs {@code jobIds} i.e. the_datafeeds that references any of the jobs in {@code jobIds}.__In theory there should never be more than one datafeed referencing a_particular job.__@param jobIds    The jobs to find the datafeeds of_@param listener  Datafeed Id listener;public void findDatafeedsForJobIds(Collection<String> jobIds, ActionListener<Set<String>> listener) {_        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedJobIdsQuery(jobIds))__        sourceBuilder.fetchSource(false)__        sourceBuilder.docValueField(DatafeedConfig.ID.getPreferredName(), null)___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSize(jobIds.size())_                .setSource(sourceBuilder).request()___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            Set<String> datafeedIds = new HashSet<>()__                            _                            assert response.getHits().getTotalHits().value <= jobIds.size()__                            SearchHit[] hits = response.getHits().getHits()___                            for (SearchHit hit : hits) {_                                datafeedIds.add(hit.field(DatafeedConfig.ID.getPreferredName()).getValue())__                            }__                            listener.onResponse(datafeedIds)__                        },_                        listener::onFailure)_                , client::search)__    };find,any,datafeeds,that,are,used,by,jobs,code,job,ids,i,e,the,datafeeds,that,references,any,of,the,jobs,in,code,job,ids,in,theory,there,should,never,be,more,than,one,datafeed,referencing,a,particular,job,param,job,ids,the,jobs,to,find,the,datafeeds,of,param,listener,datafeed,id,listener;public,void,find,datafeeds,for,job,ids,collection,string,job,ids,action,listener,set,string,listener,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,job,ids,query,job,ids,source,builder,fetch,source,false,source,builder,doc,value,field,datafeed,config,id,get,preferred,name,null,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,size,job,ids,size,set,source,source,builder,request,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,set,string,datafeed,ids,new,hash,set,assert,response,get,hits,get,total,hits,value,job,ids,size,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,datafeed,ids,add,hit,field,datafeed,config,id,get,preferred,name,get,value,listener,on,response,datafeed,ids,listener,on,failure,client,search
DatafeedConfigProvider -> public void findDatafeedsForJobIds(Collection<String> jobIds, ActionListener<Set<String>> listener);1549396415;Find any datafeeds that are used by jobs {@code jobIds} i.e. the_datafeeds that references any of the jobs in {@code jobIds}.__In theory there should never be more than one datafeed referencing a_particular job.__@param jobIds    The jobs to find the datafeeds of_@param listener  Datafeed Id listener;public void findDatafeedsForJobIds(Collection<String> jobIds, ActionListener<Set<String>> listener) {_        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedJobIdsQuery(jobIds))__        sourceBuilder.fetchSource(false)__        sourceBuilder.docValueField(DatafeedConfig.ID.getPreferredName(), null)___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSize(jobIds.size())_                .setSource(sourceBuilder).request()___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            Set<String> datafeedIds = new HashSet<>()__                            _                            assert response.getHits().getTotalHits().value <= jobIds.size()__                            SearchHit[] hits = response.getHits().getHits()___                            for (SearchHit hit : hits) {_                                datafeedIds.add(hit.field(DatafeedConfig.ID.getPreferredName()).getValue())__                            }__                            listener.onResponse(datafeedIds)__                        },_                        listener::onFailure)_                , client::search)__    };find,any,datafeeds,that,are,used,by,jobs,code,job,ids,i,e,the,datafeeds,that,references,any,of,the,jobs,in,code,job,ids,in,theory,there,should,never,be,more,than,one,datafeed,referencing,a,particular,job,param,job,ids,the,jobs,to,find,the,datafeeds,of,param,listener,datafeed,id,listener;public,void,find,datafeeds,for,job,ids,collection,string,job,ids,action,listener,set,string,listener,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,job,ids,query,job,ids,source,builder,fetch,source,false,source,builder,doc,value,field,datafeed,config,id,get,preferred,name,null,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,size,job,ids,size,set,source,source,builder,request,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,set,string,datafeed,ids,new,hash,set,assert,response,get,hits,get,total,hits,value,job,ids,size,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,datafeed,ids,add,hit,field,datafeed,config,id,get,preferred,name,get,value,listener,on,response,datafeed,ids,listener,on,failure,client,search
DatafeedConfigProvider -> public void expandDatafeedIds(String expression, boolean allowNoDatafeeds, ActionListener<SortedSet<String>> listener);1545155131;Expands an expression into the set of matching names. {@code expresssion}_may be a wildcard, a datafeed ID or a list of those._If {@code expression} == 'ALL', '*' or the empty string then all_datafeed IDs are returned.__For example, given a set of names ["foo-1", "foo-2", "bar-1", bar-2"],_expressions resolve follows:_<ul>_<li>"foo-1" : ["foo-1"]</li>_<li>"bar-1" : ["bar-1"]</li>_<li>"foo-1,foo-2" : ["foo-1", "foo-2"]</li>_<li>"foo-*" : ["foo-1", "foo-2"]</li>_<li>"*-1" : ["bar-1", "foo-1"]</li>_<li>"*" : ["bar-1", "bar-2", "foo-1", "foo-2"]</li>_<li>"_all" : ["bar-1", "bar-2", "foo-1", "foo-2"]</li>_</ul>__@param expression the expression to resolve_@param allowNoDatafeeds if {@code false}, an error is thrown when no name matches the {@code expression}._This only applies to wild card expressions, if {@code expression} is not a_wildcard then setting this true will not suppress the exception_@param listener The expanded datafeed IDs listener;public void expandDatafeedIds(String expression, boolean allowNoDatafeeds, ActionListener<SortedSet<String>> listener) {_        String [] tokens = ExpandedIdsMatcher.tokenizeExpression(expression)__        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedIdQuery(tokens))__        sourceBuilder.sort(DatafeedConfig.ID.getPreferredName())__        sourceBuilder.fetchSource(false)__        sourceBuilder.docValueField(DatafeedConfig.ID.getPreferredName(), DocValueFieldsContext.USE_DEFAULT_FORMAT)___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSource(sourceBuilder).request()___        ExpandedIdsMatcher requiredMatches = new ExpandedIdsMatcher(tokens, allowNoDatafeeds)___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            SortedSet<String> datafeedIds = new TreeSet<>()__                            SearchHit[] hits = response.getHits().getHits()__                            for (SearchHit hit : hits) {_                                datafeedIds.add(hit.field(DatafeedConfig.ID.getPreferredName()).getValue())__                            }__                            requiredMatches.filterMatchedIds(datafeedIds)__                            if (requiredMatches.hasUnmatchedIds()) {_                                _                                listener.onFailure(ExceptionsHelper.missingDatafeedException(requiredMatches.unmatchedIdsString()))__                                return__                            }__                            listener.onResponse(datafeedIds)__                        },_                        listener::onFailure)_                , client::search)___    };expands,an,expression,into,the,set,of,matching,names,code,expresssion,may,be,a,wildcard,a,datafeed,id,or,a,list,of,those,if,code,expression,all,or,the,empty,string,then,all,datafeed,ids,are,returned,for,example,given,a,set,of,names,foo,1,foo,2,bar,1,bar,2,expressions,resolve,follows,ul,li,foo,1,foo,1,li,li,bar,1,bar,1,li,li,foo,1,foo,2,foo,1,foo,2,li,li,foo,foo,1,foo,2,li,li,1,bar,1,foo,1,li,li,bar,1,bar,2,foo,1,foo,2,li,li,bar,1,bar,2,foo,1,foo,2,li,ul,param,expression,the,expression,to,resolve,param,allow,no,datafeeds,if,code,false,an,error,is,thrown,when,no,name,matches,the,code,expression,this,only,applies,to,wild,card,expressions,if,code,expression,is,not,a,wildcard,then,setting,this,true,will,not,suppress,the,exception,param,listener,the,expanded,datafeed,ids,listener;public,void,expand,datafeed,ids,string,expression,boolean,allow,no,datafeeds,action,listener,sorted,set,string,listener,string,tokens,expanded,ids,matcher,tokenize,expression,expression,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,id,query,tokens,source,builder,sort,datafeed,config,id,get,preferred,name,source,builder,fetch,source,false,source,builder,doc,value,field,datafeed,config,id,get,preferred,name,doc,value,fields,context,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,source,source,builder,request,expanded,ids,matcher,required,matches,new,expanded,ids,matcher,tokens,allow,no,datafeeds,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,sorted,set,string,datafeed,ids,new,tree,set,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,datafeed,ids,add,hit,field,datafeed,config,id,get,preferred,name,get,value,required,matches,filter,matched,ids,datafeed,ids,if,required,matches,has,unmatched,ids,listener,on,failure,exceptions,helper,missing,datafeed,exception,required,matches,unmatched,ids,string,return,listener,on,response,datafeed,ids,listener,on,failure,client,search
DatafeedConfigProvider -> public void expandDatafeedIds(String expression, boolean allowNoDatafeeds, ActionListener<SortedSet<String>> listener);1545227023;Expands an expression into the set of matching names. {@code expresssion}_may be a wildcard, a datafeed ID or a list of those._If {@code expression} == 'ALL', '*' or the empty string then all_datafeed IDs are returned.__For example, given a set of names ["foo-1", "foo-2", "bar-1", bar-2"],_expressions resolve follows:_<ul>_<li>"foo-1" : ["foo-1"]</li>_<li>"bar-1" : ["bar-1"]</li>_<li>"foo-1,foo-2" : ["foo-1", "foo-2"]</li>_<li>"foo-*" : ["foo-1", "foo-2"]</li>_<li>"*-1" : ["bar-1", "foo-1"]</li>_<li>"*" : ["bar-1", "bar-2", "foo-1", "foo-2"]</li>_<li>"_all" : ["bar-1", "bar-2", "foo-1", "foo-2"]</li>_</ul>__@param expression the expression to resolve_@param allowNoDatafeeds if {@code false}, an error is thrown when no name matches the {@code expression}._This only applies to wild card expressions, if {@code expression} is not a_wildcard then setting this true will not suppress the exception_@param listener The expanded datafeed IDs listener;public void expandDatafeedIds(String expression, boolean allowNoDatafeeds, ActionListener<SortedSet<String>> listener) {_        String [] tokens = ExpandedIdsMatcher.tokenizeExpression(expression)__        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedIdQuery(tokens))__        sourceBuilder.sort(DatafeedConfig.ID.getPreferredName())__        sourceBuilder.fetchSource(false)__        sourceBuilder.docValueField(DatafeedConfig.ID.getPreferredName(), DocValueFieldsContext.USE_DEFAULT_FORMAT)___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSource(sourceBuilder)_                .setSize(AnomalyDetectorsIndex.CONFIG_INDEX_MAX_RESULTS_WINDOW)_                .request()___        ExpandedIdsMatcher requiredMatches = new ExpandedIdsMatcher(tokens, allowNoDatafeeds)___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            SortedSet<String> datafeedIds = new TreeSet<>()__                            SearchHit[] hits = response.getHits().getHits()__                            for (SearchHit hit : hits) {_                                datafeedIds.add(hit.field(DatafeedConfig.ID.getPreferredName()).getValue())__                            }__                            requiredMatches.filterMatchedIds(datafeedIds)__                            if (requiredMatches.hasUnmatchedIds()) {_                                _                                listener.onFailure(ExceptionsHelper.missingDatafeedException(requiredMatches.unmatchedIdsString()))__                                return__                            }__                            listener.onResponse(datafeedIds)__                        },_                        listener::onFailure)_                , client::search)___    };expands,an,expression,into,the,set,of,matching,names,code,expresssion,may,be,a,wildcard,a,datafeed,id,or,a,list,of,those,if,code,expression,all,or,the,empty,string,then,all,datafeed,ids,are,returned,for,example,given,a,set,of,names,foo,1,foo,2,bar,1,bar,2,expressions,resolve,follows,ul,li,foo,1,foo,1,li,li,bar,1,bar,1,li,li,foo,1,foo,2,foo,1,foo,2,li,li,foo,foo,1,foo,2,li,li,1,bar,1,foo,1,li,li,bar,1,bar,2,foo,1,foo,2,li,li,bar,1,bar,2,foo,1,foo,2,li,ul,param,expression,the,expression,to,resolve,param,allow,no,datafeeds,if,code,false,an,error,is,thrown,when,no,name,matches,the,code,expression,this,only,applies,to,wild,card,expressions,if,code,expression,is,not,a,wildcard,then,setting,this,true,will,not,suppress,the,exception,param,listener,the,expanded,datafeed,ids,listener;public,void,expand,datafeed,ids,string,expression,boolean,allow,no,datafeeds,action,listener,sorted,set,string,listener,string,tokens,expanded,ids,matcher,tokenize,expression,expression,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,id,query,tokens,source,builder,sort,datafeed,config,id,get,preferred,name,source,builder,fetch,source,false,source,builder,doc,value,field,datafeed,config,id,get,preferred,name,doc,value,fields,context,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,source,source,builder,set,size,anomaly,detectors,index,request,expanded,ids,matcher,required,matches,new,expanded,ids,matcher,tokens,allow,no,datafeeds,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,sorted,set,string,datafeed,ids,new,tree,set,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,datafeed,ids,add,hit,field,datafeed,config,id,get,preferred,name,get,value,required,matches,filter,matched,ids,datafeed,ids,if,required,matches,has,unmatched,ids,listener,on,failure,exceptions,helper,missing,datafeed,exception,required,matches,unmatched,ids,string,return,listener,on,response,datafeed,ids,listener,on,failure,client,search
DatafeedConfigProvider -> public void expandDatafeedIds(String expression, boolean allowNoDatafeeds, ActionListener<SortedSet<String>> listener);1548840711;Expands an expression into the set of matching names. {@code expresssion}_may be a wildcard, a datafeed ID or a list of those._If {@code expression} == 'ALL', '*' or the empty string then all_datafeed IDs are returned.__For example, given a set of names ["foo-1", "foo-2", "bar-1", bar-2"],_expressions resolve follows:_<ul>_<li>"foo-1" : ["foo-1"]</li>_<li>"bar-1" : ["bar-1"]</li>_<li>"foo-1,foo-2" : ["foo-1", "foo-2"]</li>_<li>"foo-*" : ["foo-1", "foo-2"]</li>_<li>"*-1" : ["bar-1", "foo-1"]</li>_<li>"*" : ["bar-1", "bar-2", "foo-1", "foo-2"]</li>_<li>"_all" : ["bar-1", "bar-2", "foo-1", "foo-2"]</li>_</ul>__@param expression the expression to resolve_@param allowNoDatafeeds if {@code false}, an error is thrown when no name matches the {@code expression}._This only applies to wild card expressions, if {@code expression} is not a_wildcard then setting this true will not suppress the exception_@param listener The expanded datafeed IDs listener;public void expandDatafeedIds(String expression, boolean allowNoDatafeeds, ActionListener<SortedSet<String>> listener) {_        String [] tokens = ExpandedIdsMatcher.tokenizeExpression(expression)__        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedIdQuery(tokens))__        sourceBuilder.sort(DatafeedConfig.ID.getPreferredName())__        sourceBuilder.fetchSource(false)__        sourceBuilder.docValueField(DatafeedConfig.ID.getPreferredName(), null)___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSource(sourceBuilder)_                .setSize(AnomalyDetectorsIndex.CONFIG_INDEX_MAX_RESULTS_WINDOW)_                .request()___        ExpandedIdsMatcher requiredMatches = new ExpandedIdsMatcher(tokens, allowNoDatafeeds)___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            SortedSet<String> datafeedIds = new TreeSet<>()__                            SearchHit[] hits = response.getHits().getHits()__                            for (SearchHit hit : hits) {_                                datafeedIds.add(hit.field(DatafeedConfig.ID.getPreferredName()).getValue())__                            }__                            requiredMatches.filterMatchedIds(datafeedIds)__                            if (requiredMatches.hasUnmatchedIds()) {_                                _                                listener.onFailure(ExceptionsHelper.missingDatafeedException(requiredMatches.unmatchedIdsString()))__                                return__                            }__                            listener.onResponse(datafeedIds)__                        },_                        listener::onFailure)_                , client::search)___    };expands,an,expression,into,the,set,of,matching,names,code,expresssion,may,be,a,wildcard,a,datafeed,id,or,a,list,of,those,if,code,expression,all,or,the,empty,string,then,all,datafeed,ids,are,returned,for,example,given,a,set,of,names,foo,1,foo,2,bar,1,bar,2,expressions,resolve,follows,ul,li,foo,1,foo,1,li,li,bar,1,bar,1,li,li,foo,1,foo,2,foo,1,foo,2,li,li,foo,foo,1,foo,2,li,li,1,bar,1,foo,1,li,li,bar,1,bar,2,foo,1,foo,2,li,li,bar,1,bar,2,foo,1,foo,2,li,ul,param,expression,the,expression,to,resolve,param,allow,no,datafeeds,if,code,false,an,error,is,thrown,when,no,name,matches,the,code,expression,this,only,applies,to,wild,card,expressions,if,code,expression,is,not,a,wildcard,then,setting,this,true,will,not,suppress,the,exception,param,listener,the,expanded,datafeed,ids,listener;public,void,expand,datafeed,ids,string,expression,boolean,allow,no,datafeeds,action,listener,sorted,set,string,listener,string,tokens,expanded,ids,matcher,tokenize,expression,expression,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,id,query,tokens,source,builder,sort,datafeed,config,id,get,preferred,name,source,builder,fetch,source,false,source,builder,doc,value,field,datafeed,config,id,get,preferred,name,null,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,source,source,builder,set,size,anomaly,detectors,index,request,expanded,ids,matcher,required,matches,new,expanded,ids,matcher,tokens,allow,no,datafeeds,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,sorted,set,string,datafeed,ids,new,tree,set,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,datafeed,ids,add,hit,field,datafeed,config,id,get,preferred,name,get,value,required,matches,filter,matched,ids,datafeed,ids,if,required,matches,has,unmatched,ids,listener,on,failure,exceptions,helper,missing,datafeed,exception,required,matches,unmatched,ids,string,return,listener,on,response,datafeed,ids,listener,on,failure,client,search
DatafeedConfigProvider -> public void expandDatafeedIds(String expression, boolean allowNoDatafeeds, ActionListener<SortedSet<String>> listener);1549273268;Expands an expression into the set of matching names. {@code expresssion}_may be a wildcard, a datafeed ID or a list of those._If {@code expression} == 'ALL', '*' or the empty string then all_datafeed IDs are returned.__For example, given a set of names ["foo-1", "foo-2", "bar-1", bar-2"],_expressions resolve follows:_<ul>_<li>"foo-1" : ["foo-1"]</li>_<li>"bar-1" : ["bar-1"]</li>_<li>"foo-1,foo-2" : ["foo-1", "foo-2"]</li>_<li>"foo-*" : ["foo-1", "foo-2"]</li>_<li>"*-1" : ["bar-1", "foo-1"]</li>_<li>"*" : ["bar-1", "bar-2", "foo-1", "foo-2"]</li>_<li>"_all" : ["bar-1", "bar-2", "foo-1", "foo-2"]</li>_</ul>__@param expression the expression to resolve_@param allowNoDatafeeds if {@code false}, an error is thrown when no name matches the {@code expression}._This only applies to wild card expressions, if {@code expression} is not a_wildcard then setting this true will not suppress the exception_@param listener The expanded datafeed IDs listener;public void expandDatafeedIds(String expression, boolean allowNoDatafeeds, ActionListener<SortedSet<String>> listener) {_        String [] tokens = ExpandedIdsMatcher.tokenizeExpression(expression)__        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedIdQuery(tokens))__        sourceBuilder.sort(DatafeedConfig.ID.getPreferredName())__        sourceBuilder.fetchSource(false)__        sourceBuilder.docValueField(DatafeedConfig.ID.getPreferredName(), null)___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSource(sourceBuilder)_                .setSize(AnomalyDetectorsIndex.CONFIG_INDEX_MAX_RESULTS_WINDOW)_                .request()___        ExpandedIdsMatcher requiredMatches = new ExpandedIdsMatcher(tokens, allowNoDatafeeds)___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            SortedSet<String> datafeedIds = new TreeSet<>()__                            SearchHit[] hits = response.getHits().getHits()__                            for (SearchHit hit : hits) {_                                datafeedIds.add(hit.field(DatafeedConfig.ID.getPreferredName()).getValue())__                            }__                            requiredMatches.filterMatchedIds(datafeedIds)__                            if (requiredMatches.hasUnmatchedIds()) {_                                _                                listener.onFailure(ExceptionsHelper.missingDatafeedException(requiredMatches.unmatchedIdsString()))__                                return__                            }__                            listener.onResponse(datafeedIds)__                        },_                        listener::onFailure)_                , client::search)___    };expands,an,expression,into,the,set,of,matching,names,code,expresssion,may,be,a,wildcard,a,datafeed,id,or,a,list,of,those,if,code,expression,all,or,the,empty,string,then,all,datafeed,ids,are,returned,for,example,given,a,set,of,names,foo,1,foo,2,bar,1,bar,2,expressions,resolve,follows,ul,li,foo,1,foo,1,li,li,bar,1,bar,1,li,li,foo,1,foo,2,foo,1,foo,2,li,li,foo,foo,1,foo,2,li,li,1,bar,1,foo,1,li,li,bar,1,bar,2,foo,1,foo,2,li,li,bar,1,bar,2,foo,1,foo,2,li,ul,param,expression,the,expression,to,resolve,param,allow,no,datafeeds,if,code,false,an,error,is,thrown,when,no,name,matches,the,code,expression,this,only,applies,to,wild,card,expressions,if,code,expression,is,not,a,wildcard,then,setting,this,true,will,not,suppress,the,exception,param,listener,the,expanded,datafeed,ids,listener;public,void,expand,datafeed,ids,string,expression,boolean,allow,no,datafeeds,action,listener,sorted,set,string,listener,string,tokens,expanded,ids,matcher,tokenize,expression,expression,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,id,query,tokens,source,builder,sort,datafeed,config,id,get,preferred,name,source,builder,fetch,source,false,source,builder,doc,value,field,datafeed,config,id,get,preferred,name,null,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,source,source,builder,set,size,anomaly,detectors,index,request,expanded,ids,matcher,required,matches,new,expanded,ids,matcher,tokens,allow,no,datafeeds,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,sorted,set,string,datafeed,ids,new,tree,set,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,datafeed,ids,add,hit,field,datafeed,config,id,get,preferred,name,get,value,required,matches,filter,matched,ids,datafeed,ids,if,required,matches,has,unmatched,ids,listener,on,failure,exceptions,helper,missing,datafeed,exception,required,matches,unmatched,ids,string,return,listener,on,response,datafeed,ids,listener,on,failure,client,search
DatafeedConfigProvider -> public void expandDatafeedIds(String expression, boolean allowNoDatafeeds, ActionListener<SortedSet<String>> listener);1549396415;Expands an expression into the set of matching names. {@code expresssion}_may be a wildcard, a datafeed ID or a list of those._If {@code expression} == 'ALL', '*' or the empty string then all_datafeed IDs are returned.__For example, given a set of names ["foo-1", "foo-2", "bar-1", bar-2"],_expressions resolve follows:_<ul>_<li>"foo-1" : ["foo-1"]</li>_<li>"bar-1" : ["bar-1"]</li>_<li>"foo-1,foo-2" : ["foo-1", "foo-2"]</li>_<li>"foo-*" : ["foo-1", "foo-2"]</li>_<li>"*-1" : ["bar-1", "foo-1"]</li>_<li>"*" : ["bar-1", "bar-2", "foo-1", "foo-2"]</li>_<li>"_all" : ["bar-1", "bar-2", "foo-1", "foo-2"]</li>_</ul>__@param expression the expression to resolve_@param allowNoDatafeeds if {@code false}, an error is thrown when no name matches the {@code expression}._This only applies to wild card expressions, if {@code expression} is not a_wildcard then setting this true will not suppress the exception_@param listener The expanded datafeed IDs listener;public void expandDatafeedIds(String expression, boolean allowNoDatafeeds, ActionListener<SortedSet<String>> listener) {_        String [] tokens = ExpandedIdsMatcher.tokenizeExpression(expression)__        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(buildDatafeedIdQuery(tokens))__        sourceBuilder.sort(DatafeedConfig.ID.getPreferredName())__        sourceBuilder.fetchSource(false)__        sourceBuilder.docValueField(DatafeedConfig.ID.getPreferredName(), null)___        SearchRequest searchRequest = client.prepareSearch(AnomalyDetectorsIndex.configIndexName())_                .setIndicesOptions(IndicesOptions.lenientExpandOpen())_                .setSource(sourceBuilder)_                .setSize(AnomalyDetectorsIndex.CONFIG_INDEX_MAX_RESULTS_WINDOW)_                .request()___        ExpandedIdsMatcher requiredMatches = new ExpandedIdsMatcher(tokens, allowNoDatafeeds)___        executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest,_                ActionListener.<SearchResponse>wrap(_                        response -> {_                            SortedSet<String> datafeedIds = new TreeSet<>()__                            SearchHit[] hits = response.getHits().getHits()__                            for (SearchHit hit : hits) {_                                datafeedIds.add(hit.field(DatafeedConfig.ID.getPreferredName()).getValue())__                            }__                            requiredMatches.filterMatchedIds(datafeedIds)__                            if (requiredMatches.hasUnmatchedIds()) {_                                _                                listener.onFailure(ExceptionsHelper.missingDatafeedException(requiredMatches.unmatchedIdsString()))__                                return__                            }__                            listener.onResponse(datafeedIds)__                        },_                        listener::onFailure)_                , client::search)___    };expands,an,expression,into,the,set,of,matching,names,code,expresssion,may,be,a,wildcard,a,datafeed,id,or,a,list,of,those,if,code,expression,all,or,the,empty,string,then,all,datafeed,ids,are,returned,for,example,given,a,set,of,names,foo,1,foo,2,bar,1,bar,2,expressions,resolve,follows,ul,li,foo,1,foo,1,li,li,bar,1,bar,1,li,li,foo,1,foo,2,foo,1,foo,2,li,li,foo,foo,1,foo,2,li,li,1,bar,1,foo,1,li,li,bar,1,bar,2,foo,1,foo,2,li,li,bar,1,bar,2,foo,1,foo,2,li,ul,param,expression,the,expression,to,resolve,param,allow,no,datafeeds,if,code,false,an,error,is,thrown,when,no,name,matches,the,code,expression,this,only,applies,to,wild,card,expressions,if,code,expression,is,not,a,wildcard,then,setting,this,true,will,not,suppress,the,exception,param,listener,the,expanded,datafeed,ids,listener;public,void,expand,datafeed,ids,string,expression,boolean,allow,no,datafeeds,action,listener,sorted,set,string,listener,string,tokens,expanded,ids,matcher,tokenize,expression,expression,search,source,builder,source,builder,new,search,source,builder,query,build,datafeed,id,query,tokens,source,builder,sort,datafeed,config,id,get,preferred,name,source,builder,fetch,source,false,source,builder,doc,value,field,datafeed,config,id,get,preferred,name,null,search,request,search,request,client,prepare,search,anomaly,detectors,index,config,index,name,set,indices,options,indices,options,lenient,expand,open,set,source,source,builder,set,size,anomaly,detectors,index,request,expanded,ids,matcher,required,matches,new,expanded,ids,matcher,tokens,allow,no,datafeeds,execute,async,with,origin,client,thread,pool,get,thread,context,search,request,action,listener,search,response,wrap,response,sorted,set,string,datafeed,ids,new,tree,set,search,hit,hits,response,get,hits,get,hits,for,search,hit,hit,hits,datafeed,ids,add,hit,field,datafeed,config,id,get,preferred,name,get,value,required,matches,filter,matched,ids,datafeed,ids,if,required,matches,has,unmatched,ids,listener,on,failure,exceptions,helper,missing,datafeed,exception,required,matches,unmatched,ids,string,return,listener,on,response,datafeed,ids,listener,on,failure,client,search
