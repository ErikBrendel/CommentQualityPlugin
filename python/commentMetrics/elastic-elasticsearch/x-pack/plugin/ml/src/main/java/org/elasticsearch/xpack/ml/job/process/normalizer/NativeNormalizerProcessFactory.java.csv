commented;modifiers;parameterAmount;loc;comment;code
false;public;4;22;;@Override public NormalizerProcess createNormalizerProcess(String jobId, String quantilesState, Integer bucketSpan, ExecutorService executorService) {     ProcessPipes processPipes = new ProcessPipes(env, NAMED_PIPE_HELPER, NormalizerBuilder.NORMALIZE, jobId, true, false, true, true, false, false).     createNativeProcess(jobId, quantilesState, processPipes, bucketSpan).     NativeNormalizerProcess normalizerProcess = new NativeNormalizerProcess(jobId, processPipes.getLogStream().get(), processPipes.getProcessInStream().get(), processPipes.getProcessOutStream().get()).     try {         normalizerProcess.start(executorService).         return normalizerProcess.     } catch (EsRejectedExecutionException e) {         try {             IOUtils.close(normalizerProcess).         } catch (IOException ioe) {             LOGGER.error("Can't close normalizer", ioe).         }         throw e.     } }
false;private;4;13;;private void createNativeProcess(String jobId, String quantilesState, ProcessPipes processPipes, Integer bucketSpan) {     try {         List<String> command = new NormalizerBuilder(env, jobId, quantilesState, bucketSpan).build().         processPipes.addArgs(command).         nativeController.startProcess(command).         processPipes.connectStreams(PROCESS_STARTUP_TIMEOUT).     } catch (IOException e) {         String msg = "Failed to launch normalizer for job " + jobId.         LOGGER.error(msg).         throw ExceptionsHelper.serverError(msg, e).     } }
