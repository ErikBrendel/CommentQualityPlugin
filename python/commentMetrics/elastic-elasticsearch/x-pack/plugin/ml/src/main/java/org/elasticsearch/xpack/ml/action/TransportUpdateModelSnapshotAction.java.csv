commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;19;;@Override protected void doExecute(Task task, UpdateModelSnapshotAction.Request request, ActionListener<UpdateModelSnapshotAction.Response> listener) {     logger.debug("Received request to update model snapshot [{}] for job [{}]", request.getSnapshotId(), request.getJobId()).     jobResultsProvider.getModelSnapshot(request.getJobId(), request.getSnapshotId(), modelSnapshot -> {         if (modelSnapshot == null) {             listener.onFailure(new ResourceNotFoundException(Messages.getMessage(Messages.REST_NO_SUCH_MODEL_SNAPSHOT, request.getSnapshotId(), request.getJobId()))).         } else {             Result<ModelSnapshot> updatedSnapshot = applyUpdate(request, modelSnapshot).             indexModelSnapshot(updatedSnapshot, b -> {                 // The quantiles can be large, and totally dominate the output -                 // it's clearer to remove them                 listener.onResponse(new UpdateModelSnapshotAction.Response(new ModelSnapshot.Builder(updatedSnapshot.result).setQuantiles(null).build())).             }, listener::onFailure).         }     }, listener::onFailure). }
false;private,static;2;10;;private static Result<ModelSnapshot> applyUpdate(UpdateModelSnapshotAction.Request request, Result<ModelSnapshot> target) {     ModelSnapshot.Builder updatedSnapshotBuilder = new ModelSnapshot.Builder(target.result).     if (request.getDescription() != null) {         updatedSnapshotBuilder.setDescription(request.getDescription()).     }     if (request.getRetain() != null) {         updatedSnapshotBuilder.setRetain(request.getRetain()).     }     return new Result(target.index, updatedSnapshotBuilder.build()). }
false;public;1;4;;@Override public void onResponse(BulkResponse indexResponse) {     handler.accept(true). }
false;public;1;4;;@Override public void onFailure(Exception e) {     errorHandler.accept(e). }
false;private;3;25;;private void indexModelSnapshot(Result<ModelSnapshot> modelSnapshot, Consumer<Boolean> handler, Consumer<Exception> errorHandler) {     IndexRequest indexRequest = new IndexRequest(modelSnapshot.index).id(ModelSnapshot.documentId(modelSnapshot.result)).     try (XContentBuilder builder = XContentFactory.jsonBuilder()) {         modelSnapshot.result.toXContent(builder, ToXContent.EMPTY_PARAMS).         indexRequest.source(builder).     } catch (IOException e) {         errorHandler.accept(e).         return.     }     BulkRequestBuilder bulkRequestBuilder = client.prepareBulk().     bulkRequestBuilder.add(indexRequest).     bulkRequestBuilder.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).     executeAsyncWithOrigin(client, ML_ORIGIN, BulkAction.INSTANCE, bulkRequestBuilder.request(), new ActionListener<BulkResponse>() {          @Override         public void onResponse(BulkResponse indexResponse) {             handler.accept(true).         }          @Override         public void onFailure(Exception e) {             errorHandler.accept(e).         }     }). }
