commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Query documents whose timestamp is within the given time range  *  * @param startEpochMs the start time as epoch milliseconds (inclusive)  * @param endEpochMs the end time as epoch milliseconds (exclusive)  * @return the iterator itself  */ ;/**  * Query documents whose timestamp is within the given time range  *  * @param startEpochMs the start time as epoch milliseconds (inclusive)  * @param endEpochMs the end time as epoch milliseconds (exclusive)  * @return the iterator itself  */ public BatchedResultsIterator<T> timeRange(long startEpochMs, long endEpochMs) {     filterBuilder.timeRange(Result.TIMESTAMP.getPreferredName(), startEpochMs, endEpochMs).     return this. }
true;public;1;4;/**  * Sets whether interim results should be included  *  * @param includeInterim Whether interim results should be included  */ ;/**  * Sets whether interim results should be included  *  * @param includeInterim Whether interim results should be included  */ public BatchedResultsIterator<T> includeInterim(boolean includeInterim) {     filterBuilder.interim(includeInterim).     return this. }
false;protected,final;0;3;;protected final QueryBuilder getQuery() {     return filterBuilder.build(). }
