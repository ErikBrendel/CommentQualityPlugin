commented;modifiers;parameterAmount;loc;comment;code
false;;2;8;;void build(String datafeedId, ActionListener<DatafeedJob> listener) {     JobResultsProvider jobResultsProvider = new JobResultsProvider(client, settings).     JobConfigProvider jobConfigProvider = new JobConfigProvider(client).     DatafeedConfigProvider datafeedConfigProvider = new DatafeedConfigProvider(client, xContentRegistry).     build(datafeedId, jobResultsProvider, jobConfigProvider, datafeedConfigProvider, listener). }
true;;5;97;/**  * For testing only.  * Use {@link #build(String, ActionListener)} instead  */ ;/**  * For testing only.  * Use {@link #build(String, ActionListener)} instead  */ void build(String datafeedId, JobResultsProvider jobResultsProvider, JobConfigProvider jobConfigProvider, DatafeedConfigProvider datafeedConfigProvider, ActionListener<DatafeedJob> listener) {     AtomicReference<Job> jobHolder = new AtomicReference<>().     AtomicReference<DatafeedConfig> datafeedConfigHolder = new AtomicReference<>().     // Step 5. Build datafeed job object     Consumer<Context> contextHanlder = context -> {         TimeValue frequency = getFrequencyOrDefault(datafeedConfigHolder.get(), jobHolder.get()).         TimeValue queryDelay = datafeedConfigHolder.get().getQueryDelay().         DelayedDataDetector delayedDataDetector = DelayedDataDetectorFactory.buildDetector(jobHolder.get(), datafeedConfigHolder.get(), client).         DatafeedJob datafeedJob = new DatafeedJob(jobHolder.get().getId(), buildDataDescription(jobHolder.get()), frequency.millis(), queryDelay.millis(), context.dataExtractorFactory, client, auditor, currentTimeSupplier, delayedDataDetector, context.latestFinalBucketEndMs, context.latestRecordTimeMs).         listener.onResponse(datafeedJob).     }.     final Context context = new Context().     // Context building complete - invoke final listener     ActionListener<DataExtractorFactory> dataExtractorFactoryHandler = ActionListener.wrap(dataExtractorFactory -> {         context.dataExtractorFactory = dataExtractorFactory.         contextHanlder.accept(context).     }, e -> {         auditor.error(jobHolder.get().getId(), e.getMessage()).         listener.onFailure(e).     }).     // Create data extractor factory     Consumer<DataCounts> dataCountsHandler = dataCounts -> {         if (dataCounts.getLatestRecordTimeStamp() != null) {             context.latestRecordTimeMs = dataCounts.getLatestRecordTimeStamp().getTime().         }         DataExtractorFactory.create(client, datafeedConfigHolder.get(), jobHolder.get(), dataExtractorFactoryHandler).     }.     // Collect data counts     Consumer<QueryPage<Bucket>> bucketsHandler = buckets -> {         if (buckets.results().size() == 1) {             TimeValue bucketSpan = jobHolder.get().getAnalysisConfig().getBucketSpan().             context.latestFinalBucketEndMs = buckets.results().get(0).getTimestamp().getTime() + bucketSpan.millis() - 1.         }         jobResultsProvider.dataCounts(jobHolder.get().getId(), dataCountsHandler, listener::onFailure).     }.     // Collect latest bucket     Consumer<String> jobIdConsumer = jobId -> {         BucketsQueryBuilder latestBucketQuery = new BucketsQueryBuilder().sortField(Result.TIMESTAMP.getPreferredName()).sortDescending(true).size(1).includeInterim(false).         jobResultsProvider.bucketsViaInternalClient(jobId, latestBucketQuery, bucketsHandler, e -> {             if (e instanceof ResourceNotFoundException) {                 QueryPage<Bucket> empty = new QueryPage<>(Collections.emptyList(), 0, Bucket.RESULT_TYPE_FIELD).                 bucketsHandler.accept(empty).             } else {                 listener.onFailure(e).             }         }).     }.     // Get the job config and re-validate     // Re-validation is required as the config has been re-read since     // the previous validation     ActionListener<Job.Builder> jobConfigListener = ActionListener.wrap(jobBuilder -> {         try {             jobHolder.set(jobBuilder.build()).             DatafeedJobValidator.validate(datafeedConfigHolder.get(), jobHolder.get()).             jobIdConsumer.accept(jobHolder.get().getId()).         } catch (Exception e) {             listener.onFailure(e).         }     }, listener::onFailure).     // Get the datafeed config     ActionListener<DatafeedConfig.Builder> datafeedConfigListener = ActionListener.wrap(configBuilder -> {         try {             datafeedConfigHolder.set(configBuilder.build()).             jobConfigProvider.getJob(datafeedConfigHolder.get().getJobId(), jobConfigListener).         } catch (Exception e) {             listener.onFailure(e).         }     }, listener::onFailure).     datafeedConfigProvider.getDatafeedConfig(datafeedId, datafeedConfigListener). }
false;private,static;2;8;;private static TimeValue getFrequencyOrDefault(DatafeedConfig datafeed, Job job) {     TimeValue frequency = datafeed.getFrequency().     if (frequency == null) {         TimeValue bucketSpan = job.getAnalysisConfig().getBucketSpan().         return datafeed.defaultFrequency(bucketSpan).     }     return frequency. }
false;private,static;1;9;;private static DataDescription buildDataDescription(Job job) {     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setFormat(DataDescription.DataFormat.XCONTENT).     if (job.getDataDescription() != null) {         dataDescription.setTimeField(job.getDataDescription().getTimeField()).     }     dataDescription.setTimeFormat(DataDescription.EPOCH_MS).     return dataDescription.build(). }
