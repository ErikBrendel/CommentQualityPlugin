commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;15;;@Override protected void doExecute(Task task, Request request, ActionListener<Response> listener) {     String jobId = request.getJobId().     // We need to check whether there is at least an assigned task here, otherwise we cannot redirect to the     // node running the job task.     PersistentTasksCustomMetaData tasks = clusterService.state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE).     PersistentTasksCustomMetaData.PersistentTask<?> jobTask = MlTasks.getJobTask(jobId, tasks).     if (jobTask == null || jobTask.isAssigned() == false) {         String message = "Cannot perform requested action because job [" + jobId + "] is not open".         listener.onFailure(ExceptionsHelper.conflictStatusException(message)).     } else {         request.setNodes(jobTask.getExecutorNode()).         super.doExecute(task, request, listener).     } }
false;protected;4;6;;@Override protected Response newResponse(Request request, List<Response> tasks, List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {     return selectFirst(tasks, taskOperationFailures, failedNodeExceptions). }
false;static;3;22;;static <Response extends BaseTasksResponse> Response selectFirst(List<Response> tasks, List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {     // the actionlistener's onFailure     if (tasks.isEmpty()) {         if (taskOperationFailures.isEmpty() == false) {             throw org.elasticsearch.ExceptionsHelper.convertToElastic(taskOperationFailures.get(0).getCause()).         } else if (failedNodeExceptions.isEmpty() == false) {             throw org.elasticsearch.ExceptionsHelper.convertToElastic(failedNodeExceptions.get(0)).         } else {             throw new IllegalStateException("No errors or response").         }     } else {         if (tasks.size() > 1) {             throw new IllegalStateException("Expected one node level response, but got [" + tasks.size() + "]").         }         return tasks.get(0).     } }
