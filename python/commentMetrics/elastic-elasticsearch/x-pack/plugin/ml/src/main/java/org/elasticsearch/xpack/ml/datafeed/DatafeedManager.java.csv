# id;timestamp;commentText;codeText;commentWords;codeWords
DatafeedManager -> Holder -> public void isolateDatafeed();1524684173;This stops a datafeed WITHOUT updating the corresponding persistent task.  It must ONLY be called_immediately prior to shutting down a node.  Then the datafeed task can remain "started", and be_relocated to a different node.  Calling this method at any other time will ruin the datafeed.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,it,must,only,be,called,immediately,prior,to,shutting,down,a,node,then,the,datafeed,task,can,remain,started,and,be,relocated,to,a,different,node,calling,this,method,at,any,other,time,will,ruin,the,datafeed;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> Holder -> public void isolateDatafeed();1526981569;This stops a datafeed WITHOUT updating the corresponding persistent task.  It must ONLY be called_immediately prior to shutting down a node.  Then the datafeed task can remain "started", and be_relocated to a different node.  Calling this method at any other time will ruin the datafeed.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,it,must,only,be,called,immediately,prior,to,shutting,down,a,node,then,the,datafeed,task,can,remain,started,and,be,relocated,to,a,different,node,calling,this,method,at,any,other,time,will,ruin,the,datafeed;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> Holder -> public void isolateDatafeed();1527773340;This stops a datafeed WITHOUT updating the corresponding persistent task.  It must ONLY be called_immediately prior to shutting down a node.  Then the datafeed task can remain "started", and be_relocated to a different node.  Calling this method at any other time will ruin the datafeed.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,it,must,only,be,called,immediately,prior,to,shutting,down,a,node,then,the,datafeed,task,can,remain,started,and,be,relocated,to,a,different,node,calling,this,method,at,any,other,time,will,ruin,the,datafeed;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> Holder -> public void isolateDatafeed();1529076503;This stops a datafeed WITHOUT updating the corresponding persistent task.  It must ONLY be called_immediately prior to shutting down a node.  Then the datafeed task can remain "started", and be_relocated to a different node.  Calling this method at any other time will ruin the datafeed.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,it,must,only,be,called,immediately,prior,to,shutting,down,a,node,then,the,datafeed,task,can,remain,started,and,be,relocated,to,a,different,node,calling,this,method,at,any,other,time,will,ruin,the,datafeed;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> Holder -> public void isolateDatafeed();1532456624;This stops a datafeed WITHOUT updating the corresponding persistent task.  It must ONLY be called_immediately prior to shutting down a node.  Then the datafeed task can remain "started", and be_relocated to a different node.  Calling this method at any other time will ruin the datafeed.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,it,must,only,be,called,immediately,prior,to,shutting,down,a,node,then,the,datafeed,task,can,remain,started,and,be,relocated,to,a,different,node,calling,this,method,at,any,other,time,will,ruin,the,datafeed;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> Holder -> public void isolateDatafeed();1541092382;This stops a datafeed WITHOUT updating the corresponding persistent task.  It must ONLY be called_immediately prior to shutting down a node.  Then the datafeed task can remain "started", and be_relocated to a different node.  Calling this method at any other time will ruin the datafeed.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,it,must,only,be,called,immediately,prior,to,shutting,down,a,node,then,the,datafeed,task,can,remain,started,and,be,relocated,to,a,different,node,calling,this,method,at,any,other,time,will,ruin,the,datafeed;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> Holder -> public void isolateDatafeed();1543343306;This stops a datafeed WITHOUT updating the corresponding persistent task.  It must ONLY be called_immediately prior to shutting down a node.  Then the datafeed task can remain "started", and be_relocated to a different node.  Calling this method at any other time will ruin the datafeed.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,it,must,only,be,called,immediately,prior,to,shutting,down,a,node,then,the,datafeed,task,can,remain,started,and,be,relocated,to,a,different,node,calling,this,method,at,any,other,time,will,ruin,the,datafeed;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> Holder -> public void isolateDatafeed();1545155131;This stops a datafeed WITHOUT updating the corresponding persistent task.  It must ONLY be called_immediately prior to shutting down a node.  Then the datafeed task can remain "started", and be_relocated to a different node.  Calling this method at any other time will ruin the datafeed.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,it,must,only,be,called,immediately,prior,to,shutting,down,a,node,then,the,datafeed,task,can,remain,started,and,be,relocated,to,a,different,node,calling,this,method,at,any,other,time,will,ruin,the,datafeed;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> Holder -> public void isolateDatafeed();1547030567;This stops a datafeed WITHOUT updating the corresponding persistent task.  It must ONLY be called_immediately prior to shutting down a node.  Then the datafeed task can remain "started", and be_relocated to a different node.  Calling this method at any other time will ruin the datafeed.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,it,must,only,be,called,immediately,prior,to,shutting,down,a,node,then,the,datafeed,task,can,remain,started,and,be,relocated,to,a,different,node,calling,this,method,at,any,other,time,will,ruin,the,datafeed;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> Holder -> public void isolateDatafeed();1547212955;This stops a datafeed WITHOUT updating the corresponding persistent task.  It must ONLY be called_immediately prior to shutting down a node.  Then the datafeed task can remain "started", and be_relocated to a different node.  Calling this method at any other time will ruin the datafeed.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,it,must,only,be,called,immediately,prior,to,shutting,down,a,node,then,the,datafeed,task,can,remain,started,and,be,relocated,to,a,different,node,calling,this,method,at,any,other,time,will,ruin,the,datafeed;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> Holder -> public void isolateDatafeed();1548953505;This stops a datafeed WITHOUT updating the corresponding persistent task.  It must ONLY be called_immediately prior to shutting down a node.  Then the datafeed task can remain "started", and be_relocated to a different node.  Calling this method at any other time will ruin the datafeed.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,it,must,only,be,called,immediately,prior,to,shutting,down,a,node,then,the,datafeed,task,can,remain,started,and,be,relocated,to,a,different,node,calling,this,method,at,any,other,time,will,ruin,the,datafeed;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> Holder -> public void isolateDatafeed();1549485564;This stops a datafeed WITHOUT updating the corresponding persistent task.  When called it_will stop the datafeed from sending data to its job as quickly as possible.  The caller_must do something sensible with the corresponding persistent task.  If the node is shutting_down the task will automatically get reassigned.  Otherwise the caller must take action to_remove or reassign the persistent task, or the datafeed will be left in limbo.;public void isolateDatafeed() {_            datafeedJob.isolate()__        };this,stops,a,datafeed,without,updating,the,corresponding,persistent,task,when,called,it,will,stop,the,datafeed,from,sending,data,to,its,job,as,quickly,as,possible,the,caller,must,do,something,sensible,with,the,corresponding,persistent,task,if,the,node,is,shutting,down,the,task,will,automatically,get,reassigned,otherwise,the,caller,must,take,action,to,remove,or,reassign,the,persistent,task,or,the,datafeed,will,be,left,in,limbo;public,void,isolate,datafeed,datafeed,job,isolate
DatafeedManager -> boolean isRunning(long allocationId);1524684173;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> boolean isRunning(long allocationId);1526981569;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> boolean isRunning(long allocationId);1527773340;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> boolean isRunning(long allocationId);1529076503;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> boolean isRunning(long allocationId);1532456624;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> boolean isRunning(long allocationId);1541092382;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> boolean isRunning(long allocationId);1543343306;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> boolean isRunning(long allocationId);1545155131;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> boolean isRunning(long allocationId);1547030567;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> boolean isRunning(long allocationId);1547212955;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> boolean isRunning(long allocationId);1548953505;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> boolean isRunning(long allocationId);1549485564;Visible for testing;boolean isRunning(long allocationId) {_        return runningDatafeedsOnThisNode.containsKey(allocationId)__    };visible,for,testing;boolean,is,running,long,allocation,id,return,running,datafeeds,on,this,node,contains,key,allocation,id
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1524684173;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1526981569;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1527773340;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1529076503;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1532456624;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1541092382;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1543343306;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1545155131;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1547030567;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1547212955;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1548953505;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void stopAllDatafeedsOnThisNode(String reason);1549485564;This is used when the license expires.;public void stopAllDatafeedsOnThisNode(String reason) {_        int numDatafeeds = runningDatafeedsOnThisNode.size()__        if (numDatafeeds != 0) {_            logger.info("Closing [{}] datafeeds, because [{}]", numDatafeeds, reason)___            for (Holder holder : runningDatafeedsOnThisNode.values()) {_                holder.stop(reason, TimeValue.timeValueSeconds(20), null)__            }_        }_    };this,is,used,when,the,license,expires;public,void,stop,all,datafeeds,on,this,node,string,reason,int,num,datafeeds,running,datafeeds,on,this,node,size,if,num,datafeeds,0,logger,info,closing,datafeeds,because,num,datafeeds,reason,for,holder,holder,running,datafeeds,on,this,node,values,holder,stop,reason,time,value,time,value,seconds,20,null
DatafeedManager -> public void isolateAllDatafeedsOnThisNode();1524684173;This is used before the JVM is killed.  It differs from stopAllDatafeedsOnThisNode in that it leaves_the datafeed tasks in the "started" state, so that they get restarted on a different node.;public void isolateAllDatafeedsOnThisNode() {_        isolated = true__        Iterator<Holder> iter = runningDatafeedsOnThisNode.values().iterator()__        while (iter.hasNext()) {_            Holder next = iter.next()__            next.isolateDatafeed()__            next.setRelocating()__            iter.remove()__        }_    };this,is,used,before,the,jvm,is,killed,it,differs,from,stop,all,datafeeds,on,this,node,in,that,it,leaves,the,datafeed,tasks,in,the,started,state,so,that,they,get,restarted,on,a,different,node;public,void,isolate,all,datafeeds,on,this,node,isolated,true,iterator,holder,iter,running,datafeeds,on,this,node,values,iterator,while,iter,has,next,holder,next,iter,next,next,isolate,datafeed,next,set,relocating,iter,remove
DatafeedManager -> public void isolateAllDatafeedsOnThisNode();1526981569;This is used before the JVM is killed.  It differs from stopAllDatafeedsOnThisNode in that it leaves_the datafeed tasks in the "started" state, so that they get restarted on a different node.;public void isolateAllDatafeedsOnThisNode() {_        isolated = true__        Iterator<Holder> iter = runningDatafeedsOnThisNode.values().iterator()__        while (iter.hasNext()) {_            Holder next = iter.next()__            next.isolateDatafeed()__            next.setRelocating()__            iter.remove()__        }_    };this,is,used,before,the,jvm,is,killed,it,differs,from,stop,all,datafeeds,on,this,node,in,that,it,leaves,the,datafeed,tasks,in,the,started,state,so,that,they,get,restarted,on,a,different,node;public,void,isolate,all,datafeeds,on,this,node,isolated,true,iterator,holder,iter,running,datafeeds,on,this,node,values,iterator,while,iter,has,next,holder,next,iter,next,next,isolate,datafeed,next,set,relocating,iter,remove
DatafeedManager -> public void isolateAllDatafeedsOnThisNode();1527773340;This is used before the JVM is killed.  It differs from stopAllDatafeedsOnThisNode in that it leaves_the datafeed tasks in the "started" state, so that they get restarted on a different node.;public void isolateAllDatafeedsOnThisNode() {_        isolated = true__        Iterator<Holder> iter = runningDatafeedsOnThisNode.values().iterator()__        while (iter.hasNext()) {_            Holder next = iter.next()__            next.isolateDatafeed()__            next.setRelocating()__            iter.remove()__        }_    };this,is,used,before,the,jvm,is,killed,it,differs,from,stop,all,datafeeds,on,this,node,in,that,it,leaves,the,datafeed,tasks,in,the,started,state,so,that,they,get,restarted,on,a,different,node;public,void,isolate,all,datafeeds,on,this,node,isolated,true,iterator,holder,iter,running,datafeeds,on,this,node,values,iterator,while,iter,has,next,holder,next,iter,next,next,isolate,datafeed,next,set,relocating,iter,remove
DatafeedManager -> public void isolateAllDatafeedsOnThisNode();1529076503;This is used before the JVM is killed.  It differs from stopAllDatafeedsOnThisNode in that it leaves_the datafeed tasks in the "started" state, so that they get restarted on a different node.;public void isolateAllDatafeedsOnThisNode() {_        isolated = true__        Iterator<Holder> iter = runningDatafeedsOnThisNode.values().iterator()__        while (iter.hasNext()) {_            Holder next = iter.next()__            next.isolateDatafeed()__            next.setRelocating()__            iter.remove()__        }_    };this,is,used,before,the,jvm,is,killed,it,differs,from,stop,all,datafeeds,on,this,node,in,that,it,leaves,the,datafeed,tasks,in,the,started,state,so,that,they,get,restarted,on,a,different,node;public,void,isolate,all,datafeeds,on,this,node,isolated,true,iterator,holder,iter,running,datafeeds,on,this,node,values,iterator,while,iter,has,next,holder,next,iter,next,next,isolate,datafeed,next,set,relocating,iter,remove
DatafeedManager -> public void isolateAllDatafeedsOnThisNode();1532456624;This is used before the JVM is killed.  It differs from stopAllDatafeedsOnThisNode in that it leaves_the datafeed tasks in the "started" state, so that they get restarted on a different node.;public void isolateAllDatafeedsOnThisNode() {_        isolated = true__        Iterator<Holder> iter = runningDatafeedsOnThisNode.values().iterator()__        while (iter.hasNext()) {_            Holder next = iter.next()__            next.isolateDatafeed()__            next.setRelocating()__            iter.remove()__        }_    };this,is,used,before,the,jvm,is,killed,it,differs,from,stop,all,datafeeds,on,this,node,in,that,it,leaves,the,datafeed,tasks,in,the,started,state,so,that,they,get,restarted,on,a,different,node;public,void,isolate,all,datafeeds,on,this,node,isolated,true,iterator,holder,iter,running,datafeeds,on,this,node,values,iterator,while,iter,has,next,holder,next,iter,next,next,isolate,datafeed,next,set,relocating,iter,remove
DatafeedManager -> public void isolateAllDatafeedsOnThisNode();1541092382;This is used before the JVM is killed.  It differs from stopAllDatafeedsOnThisNode in that it leaves_the datafeed tasks in the "started" state, so that they get restarted on a different node.;public void isolateAllDatafeedsOnThisNode() {_        isolated = true__        Iterator<Holder> iter = runningDatafeedsOnThisNode.values().iterator()__        while (iter.hasNext()) {_            Holder next = iter.next()__            next.isolateDatafeed()__            next.setRelocating()__            iter.remove()__        }_    };this,is,used,before,the,jvm,is,killed,it,differs,from,stop,all,datafeeds,on,this,node,in,that,it,leaves,the,datafeed,tasks,in,the,started,state,so,that,they,get,restarted,on,a,different,node;public,void,isolate,all,datafeeds,on,this,node,isolated,true,iterator,holder,iter,running,datafeeds,on,this,node,values,iterator,while,iter,has,next,holder,next,iter,next,next,isolate,datafeed,next,set,relocating,iter,remove
DatafeedManager -> public void isolateAllDatafeedsOnThisNode();1543343306;This is used before the JVM is killed.  It differs from stopAllDatafeedsOnThisNode in that it leaves_the datafeed tasks in the "started" state, so that they get restarted on a different node.;public void isolateAllDatafeedsOnThisNode() {_        isolated = true__        Iterator<Holder> iter = runningDatafeedsOnThisNode.values().iterator()__        while (iter.hasNext()) {_            Holder next = iter.next()__            next.isolateDatafeed()__            next.setRelocating()__            iter.remove()__        }_    };this,is,used,before,the,jvm,is,killed,it,differs,from,stop,all,datafeeds,on,this,node,in,that,it,leaves,the,datafeed,tasks,in,the,started,state,so,that,they,get,restarted,on,a,different,node;public,void,isolate,all,datafeeds,on,this,node,isolated,true,iterator,holder,iter,running,datafeeds,on,this,node,values,iterator,while,iter,has,next,holder,next,iter,next,next,isolate,datafeed,next,set,relocating,iter,remove
DatafeedManager -> public void isolateAllDatafeedsOnThisNode();1545155131;This is used before the JVM is killed.  It differs from stopAllDatafeedsOnThisNode in that it leaves_the datafeed tasks in the "started" state, so that they get restarted on a different node.;public void isolateAllDatafeedsOnThisNode() {_        isolated = true__        Iterator<Holder> iter = runningDatafeedsOnThisNode.values().iterator()__        while (iter.hasNext()) {_            Holder next = iter.next()__            next.isolateDatafeed()__            next.setRelocating()__            iter.remove()__        }_    };this,is,used,before,the,jvm,is,killed,it,differs,from,stop,all,datafeeds,on,this,node,in,that,it,leaves,the,datafeed,tasks,in,the,started,state,so,that,they,get,restarted,on,a,different,node;public,void,isolate,all,datafeeds,on,this,node,isolated,true,iterator,holder,iter,running,datafeeds,on,this,node,values,iterator,while,iter,has,next,holder,next,iter,next,next,isolate,datafeed,next,set,relocating,iter,remove
DatafeedManager -> public void isolateAllDatafeedsOnThisNode();1547030567;This is used before the JVM is killed.  It differs from stopAllDatafeedsOnThisNode in that it leaves_the datafeed tasks in the "started" state, so that they get restarted on a different node.;public void isolateAllDatafeedsOnThisNode() {_        isolated = true__        Iterator<Holder> iter = runningDatafeedsOnThisNode.values().iterator()__        while (iter.hasNext()) {_            Holder next = iter.next()__            next.isolateDatafeed()__            next.setRelocating()__            iter.remove()__        }_    };this,is,used,before,the,jvm,is,killed,it,differs,from,stop,all,datafeeds,on,this,node,in,that,it,leaves,the,datafeed,tasks,in,the,started,state,so,that,they,get,restarted,on,a,different,node;public,void,isolate,all,datafeeds,on,this,node,isolated,true,iterator,holder,iter,running,datafeeds,on,this,node,values,iterator,while,iter,has,next,holder,next,iter,next,next,isolate,datafeed,next,set,relocating,iter,remove
DatafeedManager -> public void isolateAllDatafeedsOnThisNode();1547212955;This is used before the JVM is killed.  It differs from stopAllDatafeedsOnThisNode in that it leaves_the datafeed tasks in the "started" state, so that they get restarted on a different node.;public void isolateAllDatafeedsOnThisNode() {_        isolated = true__        Iterator<Holder> iter = runningDatafeedsOnThisNode.values().iterator()__        while (iter.hasNext()) {_            Holder next = iter.next()__            next.isolateDatafeed()__            next.setRelocating()__            iter.remove()__        }_    };this,is,used,before,the,jvm,is,killed,it,differs,from,stop,all,datafeeds,on,this,node,in,that,it,leaves,the,datafeed,tasks,in,the,started,state,so,that,they,get,restarted,on,a,different,node;public,void,isolate,all,datafeeds,on,this,node,isolated,true,iterator,holder,iter,running,datafeeds,on,this,node,values,iterator,while,iter,has,next,holder,next,iter,next,next,isolate,datafeed,next,set,relocating,iter,remove
DatafeedManager -> public void isolateAllDatafeedsOnThisNode();1548953505;This is used before the JVM is killed.  It differs from stopAllDatafeedsOnThisNode in that it leaves_the datafeed tasks in the "started" state, so that they get restarted on a different node.;public void isolateAllDatafeedsOnThisNode() {_        isolated = true__        Iterator<Holder> iter = runningDatafeedsOnThisNode.values().iterator()__        while (iter.hasNext()) {_            Holder next = iter.next()__            next.isolateDatafeed()__            next.setRelocating()__            iter.remove()__        }_    };this,is,used,before,the,jvm,is,killed,it,differs,from,stop,all,datafeeds,on,this,node,in,that,it,leaves,the,datafeed,tasks,in,the,started,state,so,that,they,get,restarted,on,a,different,node;public,void,isolate,all,datafeeds,on,this,node,isolated,true,iterator,holder,iter,running,datafeeds,on,this,node,values,iterator,while,iter,has,next,holder,next,iter,next,next,isolate,datafeed,next,set,relocating,iter,remove
