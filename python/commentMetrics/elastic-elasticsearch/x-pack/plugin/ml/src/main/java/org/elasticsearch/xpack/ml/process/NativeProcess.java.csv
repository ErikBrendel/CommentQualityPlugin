commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Is the process ready to receive data?  * @return {@code true} if the process is ready to receive data  */ ;/**  * Is the process ready to receive data?  * @return {@code true} if the process is ready to receive data  */ boolean isReady().
true;;1;1;/**  * Write the record to the process. The record parameter should not be encoded  * (i.e. length encoded) the implementation will apply the correct encoding.  *  * @param record Plain array of strings, implementors of this class should  *               encode the record appropriately  * @throws IOException If the write failed  */ ;/**  * Write the record to the process. The record parameter should not be encoded  * (i.e. length encoded) the implementation will apply the correct encoding.  *  * @param record Plain array of strings, implementors of this class should  *               encode the record appropriately  * @throws IOException If the write failed  */ void writeRecord(String[] record) throws IOException.
true;;0;1;/**  * Ask the process to persist its state in the background  * @throws IOException If writing the request fails  */ ;/**  * Ask the process to persist its state in the background  * @throws IOException If writing the request fails  */ void persistState() throws IOException.
true;;0;1;/**  * Flush the output data stream  */ ;/**  * Flush the output data stream  */ void flushStream() throws IOException.
true;;0;1;/**  * Kill the process.  Do not wait for it to stop gracefully.  */ ;/**  * Kill the process.  Do not wait for it to stop gracefully.  */ void kill() throws IOException.
true;;0;1;/**  * The time the process was started  * @return Process start time  */ ;/**  * The time the process was started  * @return Process start time  */ ZonedDateTime getProcessStartTime().
true;;0;1;/**  * Returns true if the process still running.  * Methods instructing the process are essentially  * asynchronous. the command will be continue to execute in the process after  * the call has returned.  * This method tests whether something catastrophic  * occurred in the process during its execution.  * @return True if the process is still running  */ ;/**  * Returns true if the process still running.  * Methods instructing the process are essentially  * asynchronous. the command will be continue to execute in the process after  * the call has returned.  * This method tests whether something catastrophic  * occurred in the process during its execution.  * @return True if the process is still running  */ boolean isProcessAlive().
true;;0;1;/**  * Check whether the process terminated given a grace period.  *  * Processing errors are highly likely caused by the process being unexpectedly  * terminated.  *  * Workaround: As we can not easily check if the process is alive, we rely on  * the logPipe being ended. As the loghandler runs in another thread which  * might fall behind this one, we give it a grace period.  *  * @return false if process has ended for sure, true if it probably still runs  */ ;/**  * Check whether the process terminated given a grace period.  *  * Processing errors are highly likely caused by the process being unexpectedly  * terminated.  *  * Workaround: As we can not easily check if the process is alive, we rely on  * the logPipe being ended. As the loghandler runs in another thread which  * might fall behind this one, we give it a grace period.  *  * @return false if process has ended for sure, true if it probably still runs  */ boolean isProcessAliveAfterWaiting().
true;;0;1;/**  * Read any content in the error output buffer.  * @return An error message or empty String if no error.  */ ;/**  * Read any content in the error output buffer.  * @return An error message or empty String if no error.  */ String readError().
