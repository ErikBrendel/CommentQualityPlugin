commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean canFindFormat(FileStructure.Format format) {     return format == null || format == FileStructure.Format.SEMI_STRUCTURED_TEXT. }
true;public;2;14;/**  * This format matches if the sample contains at least one newline and at least two  * non-blank lines.  */ ;/**  * This format matches if the sample contains at least one newline and at least two  * non-blank lines.  */ @Override public boolean canCreateFromSample(List<String> explanation, String sample) {     if (sample.indexOf('\n') < 0) {         explanation.add("Not text because sample contains no newlines").         return false.     }     if (TWO_NON_BLANK_LINES_PATTERN.matcher(sample).find() == false) {         explanation.add("Not text because sample contains fewer than two non-blank lines").         return false.     }     explanation.add("Deciding sample is text").     return true. }
false;public;6;6;;@Override public FileStructureFinder createFromSample(List<String> explanation, String sample, String charsetName, Boolean hasByteOrderMarker, FileStructureOverrides overrides, TimeoutChecker timeoutChecker) {     return TextLogFileStructureFinder.makeTextLogFileStructureFinder(explanation, sample, charsetName, hasByteOrderMarker, overrides, timeoutChecker). }
