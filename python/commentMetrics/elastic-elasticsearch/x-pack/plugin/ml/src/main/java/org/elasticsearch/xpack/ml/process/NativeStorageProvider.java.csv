# id;timestamp;commentText;codeText;commentWords;codeWords
NativeStorageProvider -> public void cleanupLocalTmpStorage(Path path) throws IOException;1540583181;Delete temporary storage, previously allocated__@param path_Path to temporary storage_@throws IOException_if path can not be cleaned up;public void cleanupLocalTmpStorage(Path path) throws IOException {_        _        Path realPath = path.toAbsolutePath()__        for (Path p : environment.dataFiles()) {_            if (realPath.startsWith(p.resolve(LOCAL_STORAGE_SUBFOLDER).resolve(LOCAL_STORAGE_TMP_FOLDER))) {_                IOUtils.rm(path)__            }_        }_    };delete,temporary,storage,previously,allocated,param,path,path,to,temporary,storage,throws,ioexception,if,path,can,not,be,cleaned,up;public,void,cleanup,local,tmp,storage,path,path,throws,ioexception,path,real,path,path,to,absolute,path,for,path,p,environment,data,files,if,real,path,starts,with,p,resolve,resolve,ioutils,rm,path
NativeStorageProvider -> public void cleanupLocalTmpStorage(Path path) throws IOException;1540847035;Delete temporary storage, previously allocated__@param path_Path to temporary storage_@throws IOException_if path can not be cleaned up;public void cleanupLocalTmpStorage(Path path) throws IOException {_        _        Path realPath = path.toAbsolutePath()__        for (Path p : environment.dataFiles()) {_            if (realPath.startsWith(p.resolve(LOCAL_STORAGE_SUBFOLDER).resolve(LOCAL_STORAGE_TMP_FOLDER))) {_                IOUtils.rm(path)__            }_        }_    };delete,temporary,storage,previously,allocated,param,path,path,to,temporary,storage,throws,ioexception,if,path,can,not,be,cleaned,up;public,void,cleanup,local,tmp,storage,path,path,throws,ioexception,path,real,path,path,to,absolute,path,for,path,p,environment,data,files,if,real,path,starts,with,p,resolve,resolve,ioutils,rm,path
NativeStorageProvider -> public void cleanupLocalTmpStorage(Path path) throws IOException;1547622613;Delete temporary storage, previously allocated__@param path_Path to temporary storage_@throws IOException_if path can not be cleaned up;public void cleanupLocalTmpStorage(Path path) throws IOException {_        _        Path realPath = path.toAbsolutePath()__        for (Path p : environment.dataFiles()) {_            if (realPath.startsWith(p.resolve(LOCAL_STORAGE_SUBFOLDER).resolve(LOCAL_STORAGE_TMP_FOLDER))) {_                IOUtils.rm(path)__            }_        }_    };delete,temporary,storage,previously,allocated,param,path,path,to,temporary,storage,throws,ioexception,if,path,can,not,be,cleaned,up;public,void,cleanup,local,tmp,storage,path,path,throws,ioexception,path,real,path,path,to,absolute,path,for,path,p,environment,data,files,if,real,path,starts,with,p,resolve,resolve,ioutils,rm,path
NativeStorageProvider -> public void cleanupLocalTmpStorageInCaseOfUncleanShutdown() throws IOException;1540583181;Removes any temporary storage leftovers.__Removes all temp files and folder which might be there as a result of an_unclean node shutdown or broken clients.__Do not call while there are running jobs.__@throws IOException if cleanup fails;public void cleanupLocalTmpStorageInCaseOfUncleanShutdown() throws IOException {_        for (Path p : environment.dataFiles()) {_            IOUtils.rm(p.resolve(LOCAL_STORAGE_SUBFOLDER).resolve(LOCAL_STORAGE_TMP_FOLDER))__        }_    };removes,any,temporary,storage,leftovers,removes,all,temp,files,and,folder,which,might,be,there,as,a,result,of,an,unclean,node,shutdown,or,broken,clients,do,not,call,while,there,are,running,jobs,throws,ioexception,if,cleanup,fails;public,void,cleanup,local,tmp,storage,in,case,of,unclean,shutdown,throws,ioexception,for,path,p,environment,data,files,ioutils,rm,p,resolve,resolve
NativeStorageProvider -> public void cleanupLocalTmpStorageInCaseOfUncleanShutdown() throws IOException;1540847035;Removes any temporary storage leftovers.__Removes all temp files and folder which might be there as a result of an_unclean node shutdown or broken clients.__Do not call while there are running jobs.__@throws IOException if cleanup fails;public void cleanupLocalTmpStorageInCaseOfUncleanShutdown() throws IOException {_        for (Path p : environment.dataFiles()) {_            IOUtils.rm(p.resolve(LOCAL_STORAGE_SUBFOLDER).resolve(LOCAL_STORAGE_TMP_FOLDER))__        }_    };removes,any,temporary,storage,leftovers,removes,all,temp,files,and,folder,which,might,be,there,as,a,result,of,an,unclean,node,shutdown,or,broken,clients,do,not,call,while,there,are,running,jobs,throws,ioexception,if,cleanup,fails;public,void,cleanup,local,tmp,storage,in,case,of,unclean,shutdown,throws,ioexception,for,path,p,environment,data,files,ioutils,rm,p,resolve,resolve
NativeStorageProvider -> public void cleanupLocalTmpStorageInCaseOfUncleanShutdown() throws IOException;1547622613;Removes any temporary storage leftovers.__Removes all temp files and folder which might be there as a result of an_unclean node shutdown or broken clients.__Do not call while there are running jobs.__@throws IOException if cleanup fails;public void cleanupLocalTmpStorageInCaseOfUncleanShutdown() throws IOException {_        for (Path p : environment.dataFiles()) {_            IOUtils.rm(p.resolve(LOCAL_STORAGE_SUBFOLDER).resolve(LOCAL_STORAGE_TMP_FOLDER))__        }_    };removes,any,temporary,storage,leftovers,removes,all,temp,files,and,folder,which,might,be,there,as,a,result,of,an,unclean,node,shutdown,or,broken,clients,do,not,call,while,there,are,running,jobs,throws,ioexception,if,cleanup,fails;public,void,cleanup,local,tmp,storage,in,case,of,unclean,shutdown,throws,ioexception,for,path,p,environment,data,files,ioutils,rm,p,resolve,resolve
NativeStorageProvider -> public Path tryGetLocalTmpStorage(String uniqueIdentifier, ByteSizeValue requestedSize);1540583181;Tries to find local storage for storing temporary data.__@param uniqueIdentifier An identifier to be used as sub folder_@param requestedSize The maximum size required_@return Path for temporary storage if available, null otherwise;public Path tryGetLocalTmpStorage(String uniqueIdentifier, ByteSizeValue requestedSize) {_        for (Path path : environment.dataFiles()) {_            try {_                if (getUsableSpace(path) >= requestedSize.getBytes() + minLocalStorageAvailable.getBytes()) {_                    Path tmpDirectory = path.resolve(LOCAL_STORAGE_SUBFOLDER).resolve(LOCAL_STORAGE_TMP_FOLDER).resolve(uniqueIdentifier)__                    Files.createDirectories(tmpDirectory)__                    return tmpDirectory__                }_            } catch (IOException e) {_                LOGGER.debug("Failed to obtain information about path [{}]: {}", path, e)__            }__        }_        LOGGER.debug("Failed to find native storage for [{}], returning null", uniqueIdentifier)__        return null__    };tries,to,find,local,storage,for,storing,temporary,data,param,unique,identifier,an,identifier,to,be,used,as,sub,folder,param,requested,size,the,maximum,size,required,return,path,for,temporary,storage,if,available,null,otherwise;public,path,try,get,local,tmp,storage,string,unique,identifier,byte,size,value,requested,size,for,path,path,environment,data,files,try,if,get,usable,space,path,requested,size,get,bytes,min,local,storage,available,get,bytes,path,tmp,directory,path,resolve,resolve,resolve,unique,identifier,files,create,directories,tmp,directory,return,tmp,directory,catch,ioexception,e,logger,debug,failed,to,obtain,information,about,path,path,e,logger,debug,failed,to,find,native,storage,for,returning,null,unique,identifier,return,null
NativeStorageProvider -> public Path tryGetLocalTmpStorage(String uniqueIdentifier, ByteSizeValue requestedSize);1540847035;Tries to find local storage for storing temporary data.__@param uniqueIdentifier An identifier to be used as sub folder_@param requestedSize The maximum size required_@return Path for temporary storage if available, null otherwise;public Path tryGetLocalTmpStorage(String uniqueIdentifier, ByteSizeValue requestedSize) {_        for (Path path : environment.dataFiles()) {_            try {_                if (getUsableSpace(path) >= requestedSize.getBytes() + minLocalStorageAvailable.getBytes()) {_                    Path tmpDirectory = path.resolve(LOCAL_STORAGE_SUBFOLDER).resolve(LOCAL_STORAGE_TMP_FOLDER).resolve(uniqueIdentifier)__                    Files.createDirectories(tmpDirectory)__                    return tmpDirectory__                }_            } catch (IOException e) {_                LOGGER.debug("Failed to obtain information about path [{}]: {}", path, e)__            }__        }_        LOGGER.debug("Failed to find native storage for [{}], returning null", uniqueIdentifier)__        return null__    };tries,to,find,local,storage,for,storing,temporary,data,param,unique,identifier,an,identifier,to,be,used,as,sub,folder,param,requested,size,the,maximum,size,required,return,path,for,temporary,storage,if,available,null,otherwise;public,path,try,get,local,tmp,storage,string,unique,identifier,byte,size,value,requested,size,for,path,path,environment,data,files,try,if,get,usable,space,path,requested,size,get,bytes,min,local,storage,available,get,bytes,path,tmp,directory,path,resolve,resolve,resolve,unique,identifier,files,create,directories,tmp,directory,return,tmp,directory,catch,ioexception,e,logger,debug,failed,to,obtain,information,about,path,path,e,logger,debug,failed,to,find,native,storage,for,returning,null,unique,identifier,return,null
NativeStorageProvider -> public Path tryGetLocalTmpStorage(String uniqueIdentifier, ByteSizeValue requestedSize);1547622613;Tries to find local storage for storing temporary data.__@param uniqueIdentifier An identifier to be used as sub folder_@param requestedSize The maximum size required_@return Path for temporary storage if available, null otherwise;public Path tryGetLocalTmpStorage(String uniqueIdentifier, ByteSizeValue requestedSize) {_        for (Path path : environment.dataFiles()) {_            try {_                if (getUsableSpace(path) >= requestedSize.getBytes() + minLocalStorageAvailable.getBytes()) {_                    Path tmpDirectory = path.resolve(LOCAL_STORAGE_SUBFOLDER).resolve(LOCAL_STORAGE_TMP_FOLDER).resolve(uniqueIdentifier)__                    Files.createDirectories(tmpDirectory)__                    return tmpDirectory__                }_            } catch (IOException e) {_                LOGGER.debug("Failed to obtain information about path [{}]: {}", path, e)__            }__        }_        LOGGER.debug("Failed to find native storage for [{}], returning null", uniqueIdentifier)__        return null__    };tries,to,find,local,storage,for,storing,temporary,data,param,unique,identifier,an,identifier,to,be,used,as,sub,folder,param,requested,size,the,maximum,size,required,return,path,for,temporary,storage,if,available,null,otherwise;public,path,try,get,local,tmp,storage,string,unique,identifier,byte,size,value,requested,size,for,path,path,environment,data,files,try,if,get,usable,space,path,requested,size,get,bytes,min,local,storage,available,get,bytes,path,tmp,directory,path,resolve,resolve,resolve,unique,identifier,files,create,directories,tmp,directory,return,tmp,directory,catch,ioexception,e,logger,debug,failed,to,obtain,information,about,path,path,e,logger,debug,failed,to,find,native,storage,for,returning,null,unique,identifier,return,null
