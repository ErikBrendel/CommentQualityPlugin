commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String executorName() {     return ThreadPool.Names.GENERIC. }
false;public;1;15;;@Override public void clusterChanged(ClusterChangedEvent event) {     if (event.localNodeMaster() == false) {         return.     }     mlConfigMigrator.migrateConfigs(event.state(), ActionListener.wrap(response -> threadPool.executor(executorName()).execute(() -> auditChangesToMlTasks(event)), e -> {         logger.error("error migrating ml configurations", e).         threadPool.executor(executorName()).execute(() -> auditChangesToMlTasks(event)).     })). }
false;private;1;47;;private void auditChangesToMlTasks(ClusterChangedEvent event) {     if (event.metaDataChanged() == false) {         return.     }     PersistentTasksCustomMetaData previous = event.previousState().getMetaData().custom(PersistentTasksCustomMetaData.TYPE).     PersistentTasksCustomMetaData current = event.state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE).     if (Objects.equals(previous, current)) {         return.     }     for (PersistentTask<?> currentTask : current.tasks()) {         Assignment currentAssignment = currentTask.getAssignment().         PersistentTask<?> previousTask = previous != null ? previous.getTask(currentTask.getId()) : null.         Assignment previousAssignment = previousTask != null ? previousTask.getAssignment() : null.         if (Objects.equals(currentAssignment, previousAssignment)) {             continue.         }         if (MlTasks.JOB_TASK_NAME.equals(currentTask.getTaskName())) {             String jobId = ((OpenJobAction.JobParams) currentTask.getParams()).getJobId().             if (currentAssignment.getExecutorNode() == null) {                 auditor.warning(jobId, "No node found to open job. Reasons [" + currentAssignment.getExplanation() + "]").             } else {                 DiscoveryNode node = event.state().nodes().get(currentAssignment.getExecutorNode()).                 auditor.info(jobId, "Opening job on node [" + node.toString() + "]").             }         } else if (MlTasks.DATAFEED_TASK_NAME.equals(currentTask.getTaskName())) {             StartDatafeedAction.DatafeedParams datafeedParams = (StartDatafeedAction.DatafeedParams) currentTask.getParams().             String jobId = datafeedParams.getJobId().             if (currentAssignment.getExecutorNode() == null) {                 String msg = "No node found to start datafeed [" + datafeedParams.getDatafeedId() + "]. Reasons [" + currentAssignment.getExplanation() + "]".                 logger.warn("[{}] {}", jobId, msg).                 if (jobId != null) {                     auditor.warning(jobId, msg).                 }             } else {                 DiscoveryNode node = event.state().nodes().get(currentAssignment.getExecutorNode()).                 if (jobId != null) {                     auditor.info(jobId, "Starting datafeed [" + datafeedParams.getDatafeedId() + "] on node [" + node + "]").                 }             }         }     } }
