commented;modifiers;parameterAmount;loc;comment;code
true;public;1;8;/**  * Convert each String in the record array to a length/value encoded pair  * and write to the outputstream.  */ ;/**  * Convert each String in the record array to a length/value encoded pair  * and write to the outputstream.  */ @Override public void writeRecord(String[] record) throws IOException {     writeNumFields(record.length).     for (String field : record) {         writeField(field).     } }
true;public;1;8;/**  * Convert each String in the record list to a length/value encoded  * pair and write to the outputstream.  */ ;/**  * Convert each String in the record list to a length/value encoded  * pair and write to the outputstream.  */ @Override public void writeRecord(List<String> record) throws IOException {     writeNumFields(record.size()).     for (String field : record) {         writeField(field).     } }
true;public;1;6;/**  * Lower level functions to write records individually.  * After this function is called {@link #writeField(String)}  * must be called <code>numFields</code> times.  */ ;/**  * Lower level functions to write records individually.  * After this function is called {@link #writeField(String)}  * must be called <code>numFields</code> times.  */ public void writeNumFields(int numFields) throws IOException {     // number fields     lengthBuffer.clear().     lengthBuffer.putInt(numFields).     outputStream.write(lengthBuffer.array()). }
true;public;1;7;/**  * Lower level functions to write record fields individually.  * {@linkplain #writeNumFields(int)} must be called first  */ ;/**  * Lower level functions to write record fields individually.  * {@linkplain #writeNumFields(int)} must be called first  */ public void writeField(String field) throws IOException {     byte[] utf8Bytes = field.getBytes(StandardCharsets.UTF_8).     lengthBuffer.clear().     lengthBuffer.putInt(utf8Bytes.length).     outputStream.write(lengthBuffer.array()).     outputStream.write(utf8Bytes). }
false;public;0;4;;@Override public void flush() throws IOException {     outputStream.flush(). }
