commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "ml_get_model_snapshot_action". }
false;protected;2;28;;@Override protected RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     String jobId = restRequest.param(Job.ID.getPreferredName()).     String snapshotId = restRequest.param(Request.SNAPSHOT_ID.getPreferredName()).     if (ALL.equals(snapshotId)) {         snapshotId = ALL_SNAPSHOT_IDS.     }     Request getModelSnapshots.     if (restRequest.hasContentOrSourceParam()) {         XContentParser parser = restRequest.contentOrSourceParamParser().         getModelSnapshots = Request.parseRequest(jobId, snapshotId, parser).     } else {         getModelSnapshots = new Request(jobId, snapshotId).         getModelSnapshots.setSort(restRequest.param(Request.SORT.getPreferredName(), DEFAULT_SORT)).         if (restRequest.hasParam(Request.START.getPreferredName())) {             getModelSnapshots.setStart(restRequest.param(Request.START.getPreferredName(), DEFAULT_START)).         }         if (restRequest.hasParam(Request.END.getPreferredName())) {             getModelSnapshots.setEnd(restRequest.param(Request.END.getPreferredName(), DEFAULT_END)).         }         getModelSnapshots.setDescOrder(restRequest.paramAsBoolean(Request.DESC.getPreferredName(), DEFAULT_DESC_ORDER)).         getModelSnapshots.setPageParams(new PageParams(restRequest.paramAsInt(PageParams.FROM.getPreferredName(), PageParams.DEFAULT_FROM), restRequest.paramAsInt(PageParams.SIZE.getPreferredName(), PageParams.DEFAULT_SIZE))).     }     return channel -> client.execute(GetModelSnapshotsAction.INSTANCE, getModelSnapshots, new RestToXContentListener<>(channel)). }
