commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Bucket getBucket() {     return bucket. }
false;public;0;4;;@Override public String getId() {     return bucket.getId(). }
false;public;0;4;;@Override public boolean isContainerOnly() {     return true. }
false;public;0;4;;@Override public Level getLevel() {     return Level.ROOT. }
false;public;0;4;;@Override public String getPartitionFieldName() {     return null. }
false;public;0;4;;@Override public String getPartitionFieldValue() {     return null. }
false;public;0;4;;@Override public String getPersonFieldName() {     return null. }
false;public;0;4;;@Override public String getPersonFieldValue() {     return null. }
false;public;0;4;;@Override public String getFunctionName() {     return null. }
false;public;0;4;;@Override public String getValueFieldName() {     return null. }
false;public;0;4;;@Override public double getProbability() {     throw new UnsupportedOperationException("Bucket is container only"). }
false;public;0;4;;@Override public double getNormalizedScore() {     return bucket.getAnomalyScore(). }
false;public;1;4;;@Override public void setNormalizedScore(double normalizedScore) {     bucket.setAnomalyScore(normalizedScore). }
false;public;0;4;;@Override public List<ChildType> getChildrenTypes() {     return CHILD_TYPES. }
false;public;0;8;;@Override public List<Normalizable> getChildren() {     List<Normalizable> children = new ArrayList<>().     for (ChildType type : getChildrenTypes()) {         children.addAll(getChildren(type)).     }     return children. }
false;public;1;14;;@Override public List<Normalizable> getChildren(ChildType type) {     List<Normalizable> children = new ArrayList<>().     switch(type) {         case BUCKET_INFLUENCER:             children.addAll(bucket.getBucketInfluencers().stream().map(bi -> new BucketInfluencerNormalizable(bi, getOriginatingIndex())).collect(Collectors.toList())).             break.         default:             throw new IllegalArgumentException("Invalid type: " + type).     }     return children. }
false;public;2;12;;@Override public boolean setMaxChildrenScore(ChildType childrenType, double maxScore) {     switch(childrenType) {         case BUCKET_INFLUENCER:             double oldScore = bucket.getAnomalyScore().             bucket.setAnomalyScore(maxScore).             return maxScore != oldScore.         default:             throw new IllegalArgumentException("Invalid type: " + childrenType).     } }
false;public;1;4;;@Override public void setParentScore(double parentScore) {     throw new UnsupportedOperationException("Bucket has no parent"). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return bucket.toXContent(builder, params). }
