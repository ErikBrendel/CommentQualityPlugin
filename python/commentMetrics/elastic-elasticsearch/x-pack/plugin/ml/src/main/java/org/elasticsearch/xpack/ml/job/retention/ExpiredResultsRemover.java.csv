commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Long getRetentionDays(Job job) {     return job.getResultsRetentionDays(). }
false;public;1;11;;@Override public void onResponse(BulkByScrollResponse bulkByScrollResponse) {     try {         if (bulkByScrollResponse.getDeleted() > 0) {             auditResultsWereDeleted(job.getId(), cutoffEpochMs).         }         listener.onResponse(true).     } catch (Exception e) {         onFailure(e).     } }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(new ElasticsearchException("Failed to remove expired results for job [" + job.getId() + "]", e)). }
false;protected;3;24;;@Override protected void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Boolean> listener) {     LOGGER.debug("Removing results of job [{}] that have a timestamp before [{}]", job.getId(), cutoffEpochMs).     DeleteByQueryRequest request = createDBQRequest(job, cutoffEpochMs).     client.execute(DeleteByQueryAction.INSTANCE, request, new ActionListener<BulkByScrollResponse>() {          @Override         public void onResponse(BulkByScrollResponse bulkByScrollResponse) {             try {                 if (bulkByScrollResponse.getDeleted() > 0) {                     auditResultsWereDeleted(job.getId(), cutoffEpochMs).                 }                 listener.onResponse(true).             } catch (Exception e) {                 onFailure(e).             }         }          @Override         public void onFailure(Exception e) {             listener.onFailure(new ElasticsearchException("Failed to remove expired results for job [" + job.getId() + "]", e)).         }     }). }
false;private;2;13;;private DeleteByQueryRequest createDBQRequest(Job job, long cutoffEpochMs) {     DeleteByQueryRequest request = new DeleteByQueryRequest().     request.setSlices(5).     request.indices(AnomalyDetectorsIndex.jobResultsAliasedName(job.getId())).     QueryBuilder excludeFilter = QueryBuilders.termsQuery(Result.RESULT_TYPE.getPreferredName(), ModelSizeStats.RESULT_TYPE_VALUE, ForecastRequestStats.RESULT_TYPE_VALUE, Forecast.RESULT_TYPE_VALUE).     QueryBuilder query = createQuery(job.getId(), cutoffEpochMs).filter(QueryBuilders.existsQuery(Result.RESULT_TYPE.getPreferredName())).mustNot(excludeFilter).     request.setQuery(query).     return request. }
false;private;2;8;;private void auditResultsWereDeleted(String jobId, long cutoffEpochMs) {     Instant instant = Instant.ofEpochMilli(cutoffEpochMs).     ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(instant, ZoneOffset.systemDefault()).     String formatted = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(zonedDateTime).     String msg = Messages.getMessage(Messages.JOB_AUDIT_OLD_RESULTS_DELETED, formatted).     LOGGER.debug("[{}] {}", jobId, msg).     auditor.info(jobId, msg). }
