commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "ml_get_calendar_events_action". }
false;protected;2;24;;@Override protected BaseRestHandler.RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     String calendarId = restRequest.param(Calendar.ID.getPreferredName()).     GetCalendarEventsAction.Request request.     if (restRequest.hasContentOrSourceParam()) {         try (XContentParser parser = restRequest.contentOrSourceParamParser()) {             request = GetCalendarEventsAction.Request.parseRequest(calendarId, parser).         }     } else {         request = new GetCalendarEventsAction.Request(calendarId).         request.setStart(restRequest.param(GetCalendarEventsAction.Request.START.getPreferredName(), null)).         request.setEnd(restRequest.param(GetCalendarEventsAction.Request.END.getPreferredName(), null)).         request.setJobId(restRequest.param(Job.ID.getPreferredName(), null)).         if (restRequest.hasParam(PageParams.FROM.getPreferredName()) || restRequest.hasParam(PageParams.SIZE.getPreferredName())) {             request.setPageParams(new PageParams(restRequest.paramAsInt(PageParams.FROM.getPreferredName(), PageParams.DEFAULT_FROM), restRequest.paramAsInt(PageParams.SIZE.getPreferredName(), PageParams.DEFAULT_SIZE))).         }     }     return channel -> client.execute(GetCalendarEventsAction.INSTANCE, request, new RestToXContentListener<>(channel)). }
