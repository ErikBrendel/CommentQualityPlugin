# id;timestamp;commentText;codeText;commentWords;codeWords
DatafeedJob -> Long lastEndTimeMs();1524684173;Visible for testing;Long lastEndTimeMs() {_        return lastEndTimeMs__    };visible,for,testing;long,last,end,time,ms,return,last,end,time,ms
DatafeedJob -> Long lastEndTimeMs();1540847035;Visible for testing;Long lastEndTimeMs() {_        return lastEndTimeMs__    };visible,for,testing;long,last,end,time,ms,return,last,end,time,ms
DatafeedJob -> Long lastEndTimeMs();1542310365;Visible for testing;Long lastEndTimeMs() {_        return lastEndTimeMs__    };visible,for,testing;long,last,end,time,ms,return,last,end,time,ms
DatafeedJob -> Long lastEndTimeMs();1544232221;Visible for testing;Long lastEndTimeMs() {_        return lastEndTimeMs__    };visible,for,testing;long,last,end,time,ms,return,last,end,time,ms
DatafeedJob -> Long lastEndTimeMs();1545155131;Visible for testing;Long lastEndTimeMs() {_        return lastEndTimeMs__    };visible,for,testing;long,last,end,time,ms,return,last,end,time,ms
DatafeedJob -> Long lastEndTimeMs();1545180038;Visible for testing;Long lastEndTimeMs() {_        return lastEndTimeMs__    };visible,for,testing;long,last,end,time,ms,return,last,end,time,ms
DatafeedJob -> Long lastEndTimeMs();1546521957;Visible for testing;Long lastEndTimeMs() {_        return lastEndTimeMs__    };visible,for,testing;long,last,end,time,ms,return,last,end,time,ms
DatafeedJob -> Long lastEndTimeMs();1546895918;Visible for testing;Long lastEndTimeMs() {_        return lastEndTimeMs__    };visible,for,testing;long,last,end,time,ms,return,last,end,time,ms
DatafeedJob -> Long lastEndTimeMs();1548236405;Visible for testing;Long lastEndTimeMs() {_        return lastEndTimeMs__    };visible,for,testing;long,last,end,time,ms,return,last,end,time,ms
DatafeedJob -> public boolean stop();1524684173;Stops the datafeed job__@return <code>true</code> when the datafeed was running and this method invocation stopped it,_otherwise <code>false</code> is returned;public boolean stop() {_        if (running.compareAndSet(true, false)) {_            return true__        } else {_            return false__        }_    };stops,the,datafeed,job,return,code,true,code,when,the,datafeed,was,running,and,this,method,invocation,stopped,it,otherwise,code,false,code,is,returned;public,boolean,stop,if,running,compare,and,set,true,false,return,true,else,return,false
DatafeedJob -> public boolean stop();1540847035;Stops the datafeed job__@return <code>true</code> when the datafeed was running and this method invocation stopped it,_otherwise <code>false</code> is returned;public boolean stop() {_        if (running.compareAndSet(true, false)) {_            return true__        } else {_            return false__        }_    };stops,the,datafeed,job,return,code,true,code,when,the,datafeed,was,running,and,this,method,invocation,stopped,it,otherwise,code,false,code,is,returned;public,boolean,stop,if,running,compare,and,set,true,false,return,true,else,return,false
DatafeedJob -> public boolean stop();1542310365;Stops the datafeed job__@return <code>true</code> when the datafeed was running and this method invocation stopped it,_otherwise <code>false</code> is returned;public boolean stop() {_        if (running.compareAndSet(true, false)) {_            return true__        } else {_            return false__        }_    };stops,the,datafeed,job,return,code,true,code,when,the,datafeed,was,running,and,this,method,invocation,stopped,it,otherwise,code,false,code,is,returned;public,boolean,stop,if,running,compare,and,set,true,false,return,true,else,return,false
DatafeedJob -> public boolean stop();1544232221;Stops the datafeed job__@return <code>true</code> when the datafeed was running and this method invocation stopped it,_otherwise <code>false</code> is returned;public boolean stop() {_        if (running.compareAndSet(true, false)) {_            return true__        } else {_            return false__        }_    };stops,the,datafeed,job,return,code,true,code,when,the,datafeed,was,running,and,this,method,invocation,stopped,it,otherwise,code,false,code,is,returned;public,boolean,stop,if,running,compare,and,set,true,false,return,true,else,return,false
DatafeedJob -> public boolean stop();1545155131;Stops the datafeed job__@return <code>true</code> when the datafeed was running and this method invocation stopped it,_otherwise <code>false</code> is returned;public boolean stop() {_        if (running.compareAndSet(true, false)) {_            return true__        } else {_            return false__        }_    };stops,the,datafeed,job,return,code,true,code,when,the,datafeed,was,running,and,this,method,invocation,stopped,it,otherwise,code,false,code,is,returned;public,boolean,stop,if,running,compare,and,set,true,false,return,true,else,return,false
DatafeedJob -> public boolean stop();1545180038;Stops the datafeed job__@return <code>true</code> when the datafeed was running and this method invocation stopped it,_otherwise <code>false</code> is returned;public boolean stop() {_        if (running.compareAndSet(true, false)) {_            return true__        } else {_            return false__        }_    };stops,the,datafeed,job,return,code,true,code,when,the,datafeed,was,running,and,this,method,invocation,stopped,it,otherwise,code,false,code,is,returned;public,boolean,stop,if,running,compare,and,set,true,false,return,true,else,return,false
DatafeedJob -> public boolean stop();1546521957;Stops the datafeed job__@return <code>true</code> when the datafeed was running and this method invocation stopped it,_otherwise <code>false</code> is returned;public boolean stop() {_        if (running.compareAndSet(true, false)) {_            return true__        } else {_            return false__        }_    };stops,the,datafeed,job,return,code,true,code,when,the,datafeed,was,running,and,this,method,invocation,stopped,it,otherwise,code,false,code,is,returned;public,boolean,stop,if,running,compare,and,set,true,false,return,true,else,return,false
DatafeedJob -> public boolean stop();1546895918;Stops the datafeed job__@return <code>true</code> when the datafeed was running and this method invocation stopped it,_otherwise <code>false</code> is returned;public boolean stop() {_        if (running.compareAndSet(true, false)) {_            return true__        } else {_            return false__        }_    };stops,the,datafeed,job,return,code,true,code,when,the,datafeed,was,running,and,this,method,invocation,stopped,it,otherwise,code,false,code,is,returned;public,boolean,stop,if,running,compare,and,set,true,false,return,true,else,return,false
DatafeedJob -> public boolean stop();1548236405;Stops the datafeed job__@return <code>true</code> when the datafeed was running and this method invocation stopped it,_otherwise <code>false</code> is returned;public boolean stop() {_        if (running.compareAndSet(true, false)) {_            return true__        } else {_            return false__        }_    };stops,the,datafeed,job,return,code,true,code,when,the,datafeed,was,running,and,this,method,invocation,stopped,it,otherwise,code,false,code,is,returned;public,boolean,stop,if,running,compare,and,set,true,false,return,true,else,return,false
DatafeedJob -> private boolean checkForMissingDataTriggered();1542310365;We wait a static interval of 15 minutes till the next missing data check.__However, if our delayed data window is smaller than that, we will probably want to check at every available window (if freq. allows)._This is to help to miss as few buckets in the delayed data check as possible.__If our frequency/query delay are longer then our default interval or window size, we will end up looking for missing data on_every real-time trigger. This should be OK as the we are pulling from the Index as such a slow pace, another query will_probably not even be noticeable at such a large timescale.;private boolean checkForMissingDataTriggered() {_        return this.currentTimeSupplier.get() > this.lastDataCheckTimeMs_            + Math.min(MISSING_DATA_CHECK_INTERVAL_MS, delayedDataDetector.getWindow())__    };we,wait,a,static,interval,of,15,minutes,till,the,next,missing,data,check,however,if,our,delayed,data,window,is,smaller,than,that,we,will,probably,want,to,check,at,every,available,window,if,freq,allows,this,is,to,help,to,miss,as,few,buckets,in,the,delayed,data,check,as,possible,if,our,frequency,query,delay,are,longer,then,our,default,interval,or,window,size,we,will,end,up,looking,for,missing,data,on,every,real,time,trigger,this,should,be,ok,as,the,we,are,pulling,from,the,index,as,such,a,slow,pace,another,query,will,probably,not,even,be,noticeable,at,such,a,large,timescale;private,boolean,check,for,missing,data,triggered,return,this,current,time,supplier,get,this,last,data,check,time,ms,math,min,delayed,data,detector,get,window
DatafeedJob -> private boolean checkForMissingDataTriggered();1544232221;We wait a static interval of 15 minutes till the next missing data check.__However, if our delayed data window is smaller than that, we will probably want to check at every available window (if freq. allows)._This is to help to miss as few buckets in the delayed data check as possible.__If our frequency/query delay are longer then our default interval or window size, we will end up looking for missing data on_every real-time trigger. This should be OK as the we are pulling from the Index as such a slow pace, another query will_probably not even be noticeable at such a large timescale.;private boolean checkForMissingDataTriggered() {_        return this.currentTimeSupplier.get() > this.lastDataCheckTimeMs_            + Math.min(MISSING_DATA_CHECK_INTERVAL_MS, delayedDataDetector.getWindow())__    };we,wait,a,static,interval,of,15,minutes,till,the,next,missing,data,check,however,if,our,delayed,data,window,is,smaller,than,that,we,will,probably,want,to,check,at,every,available,window,if,freq,allows,this,is,to,help,to,miss,as,few,buckets,in,the,delayed,data,check,as,possible,if,our,frequency,query,delay,are,longer,then,our,default,interval,or,window,size,we,will,end,up,looking,for,missing,data,on,every,real,time,trigger,this,should,be,ok,as,the,we,are,pulling,from,the,index,as,such,a,slow,pace,another,query,will,probably,not,even,be,noticeable,at,such,a,large,timescale;private,boolean,check,for,missing,data,triggered,return,this,current,time,supplier,get,this,last,data,check,time,ms,math,min,delayed,data,detector,get,window
DatafeedJob -> private boolean checkForMissingDataTriggered();1545155131;We wait a static interval of 15 minutes till the next missing data check.__However, if our delayed data window is smaller than that, we will probably want to check at every available window (if freq. allows)._This is to help to miss as few buckets in the delayed data check as possible.__If our frequency/query delay are longer then our default interval or window size, we will end up looking for missing data on_every real-time trigger. This should be OK as the we are pulling from the Index as such a slow pace, another query will_probably not even be noticeable at such a large timescale.;private boolean checkForMissingDataTriggered() {_        return this.currentTimeSupplier.get() > this.lastDataCheckTimeMs_            + Math.min(MISSING_DATA_CHECK_INTERVAL_MS, delayedDataDetector.getWindow())__    };we,wait,a,static,interval,of,15,minutes,till,the,next,missing,data,check,however,if,our,delayed,data,window,is,smaller,than,that,we,will,probably,want,to,check,at,every,available,window,if,freq,allows,this,is,to,help,to,miss,as,few,buckets,in,the,delayed,data,check,as,possible,if,our,frequency,query,delay,are,longer,then,our,default,interval,or,window,size,we,will,end,up,looking,for,missing,data,on,every,real,time,trigger,this,should,be,ok,as,the,we,are,pulling,from,the,index,as,such,a,slow,pace,another,query,will,probably,not,even,be,noticeable,at,such,a,large,timescale;private,boolean,check,for,missing,data,triggered,return,this,current,time,supplier,get,this,last,data,check,time,ms,math,min,delayed,data,detector,get,window
DatafeedJob -> private boolean checkForMissingDataTriggered();1545180038;We wait a static interval of 15 minutes till the next missing data check.__However, if our delayed data window is smaller than that, we will probably want to check at every available window (if freq. allows)._This is to help to miss as few buckets in the delayed data check as possible.__If our frequency/query delay are longer then our default interval or window size, we will end up looking for missing data on_every real-time trigger. This should be OK as the we are pulling from the Index as such a slow pace, another query will_probably not even be noticeable at such a large timescale.;private boolean checkForMissingDataTriggered() {_        return this.currentTimeSupplier.get() > this.lastDataCheckTimeMs_            + Math.min(MISSING_DATA_CHECK_INTERVAL_MS, delayedDataDetector.getWindow())__    };we,wait,a,static,interval,of,15,minutes,till,the,next,missing,data,check,however,if,our,delayed,data,window,is,smaller,than,that,we,will,probably,want,to,check,at,every,available,window,if,freq,allows,this,is,to,help,to,miss,as,few,buckets,in,the,delayed,data,check,as,possible,if,our,frequency,query,delay,are,longer,then,our,default,interval,or,window,size,we,will,end,up,looking,for,missing,data,on,every,real,time,trigger,this,should,be,ok,as,the,we,are,pulling,from,the,index,as,such,a,slow,pace,another,query,will,probably,not,even,be,noticeable,at,such,a,large,timescale;private,boolean,check,for,missing,data,triggered,return,this,current,time,supplier,get,this,last,data,check,time,ms,math,min,delayed,data,detector,get,window
DatafeedJob -> private boolean checkForMissingDataTriggered();1546521957;We wait a static interval of 15 minutes till the next missing data check.__However, if our delayed data window is smaller than that, we will probably want to check at every available window (if freq. allows)._This is to help to miss as few buckets in the delayed data check as possible.__If our frequency/query delay are longer then our default interval or window size, we will end up looking for missing data on_every real-time trigger. This should be OK as the we are pulling from the Index as such a slow pace, another query will_probably not even be noticeable at such a large timescale.;private boolean checkForMissingDataTriggered() {_        return this.currentTimeSupplier.get() > this.lastDataCheckTimeMs_            + Math.min(MISSING_DATA_CHECK_INTERVAL_MS, delayedDataDetector.getWindow())__    };we,wait,a,static,interval,of,15,minutes,till,the,next,missing,data,check,however,if,our,delayed,data,window,is,smaller,than,that,we,will,probably,want,to,check,at,every,available,window,if,freq,allows,this,is,to,help,to,miss,as,few,buckets,in,the,delayed,data,check,as,possible,if,our,frequency,query,delay,are,longer,then,our,default,interval,or,window,size,we,will,end,up,looking,for,missing,data,on,every,real,time,trigger,this,should,be,ok,as,the,we,are,pulling,from,the,index,as,such,a,slow,pace,another,query,will,probably,not,even,be,noticeable,at,such,a,large,timescale;private,boolean,check,for,missing,data,triggered,return,this,current,time,supplier,get,this,last,data,check,time,ms,math,min,delayed,data,detector,get,window
DatafeedJob -> private boolean checkForMissingDataTriggered();1546895918;We wait a static interval of 15 minutes till the next missing data check.__However, if our delayed data window is smaller than that, we will probably want to check at every available window (if freq. allows)._This is to help to miss as few buckets in the delayed data check as possible.__If our frequency/query delay are longer then our default interval or window size, we will end up looking for missing data on_every real-time trigger. This should be OK as the we are pulling from the Index as such a slow pace, another query will_probably not even be noticeable at such a large timescale.;private boolean checkForMissingDataTriggered() {_        return this.currentTimeSupplier.get() > this.lastDataCheckTimeMs_            + Math.min(MISSING_DATA_CHECK_INTERVAL_MS, delayedDataDetector.getWindow())__    };we,wait,a,static,interval,of,15,minutes,till,the,next,missing,data,check,however,if,our,delayed,data,window,is,smaller,than,that,we,will,probably,want,to,check,at,every,available,window,if,freq,allows,this,is,to,help,to,miss,as,few,buckets,in,the,delayed,data,check,as,possible,if,our,frequency,query,delay,are,longer,then,our,default,interval,or,window,size,we,will,end,up,looking,for,missing,data,on,every,real,time,trigger,this,should,be,ok,as,the,we,are,pulling,from,the,index,as,such,a,slow,pace,another,query,will,probably,not,even,be,noticeable,at,such,a,large,timescale;private,boolean,check,for,missing,data,triggered,return,this,current,time,supplier,get,this,last,data,check,time,ms,math,min,delayed,data,detector,get,window
DatafeedJob -> private boolean checkForMissingDataTriggered();1548236405;We wait a static interval of 15 minutes till the next missing data check.__However, if our delayed data window is smaller than that, we will probably want to check at every available window (if freq. allows)._This is to help to miss as few buckets in the delayed data check as possible.__If our frequency/query delay are longer then our default interval or window size, we will end up looking for missing data on_every real-time trigger. This should be OK as the we are pulling from the Index as such a slow pace, another query will_probably not even be noticeable at such a large timescale.;private boolean checkForMissingDataTriggered() {_        return this.currentTimeSupplier.get() > this.lastDataCheckTimeMs_            + Math.min(MISSING_DATA_CHECK_INTERVAL_MS, delayedDataDetector.getWindow())__    };we,wait,a,static,interval,of,15,minutes,till,the,next,missing,data,check,however,if,our,delayed,data,window,is,smaller,than,that,we,will,probably,want,to,check,at,every,available,window,if,freq,allows,this,is,to,help,to,miss,as,few,buckets,in,the,delayed,data,check,as,possible,if,our,frequency,query,delay,are,longer,then,our,default,interval,or,window,size,we,will,end,up,looking,for,missing,data,on,every,real,time,trigger,this,should,be,ok,as,the,we,are,pulling,from,the,index,as,such,a,slow,pace,another,query,will,probably,not,even,be,noticeable,at,such,a,large,timescale;private,boolean,check,for,missing,data,triggered,return,this,current,time,supplier,get,this,last,data,check,time,ms,math,min,delayed,data,detector,get,window
