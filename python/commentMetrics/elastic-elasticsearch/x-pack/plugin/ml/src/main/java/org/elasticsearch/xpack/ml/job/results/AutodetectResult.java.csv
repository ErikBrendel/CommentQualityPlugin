commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;@Override public void writeTo(StreamOutput out) throws IOException {     writeNullable(bucket, out).     writeNullable(records, out).     writeNullable(influencers, out).     writeNullable(quantiles, out).     writeNullable(modelSnapshot, out).     writeNullable(modelSizeStats, out).     writeNullable(modelPlot, out).     writeNullable(categoryDefinition, out).     writeNullable(flushAcknowledgement, out).     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         writeNullable(forecast, out).         writeNullable(forecastRequestStats, out).     } }
false;private,static;2;7;;private static void writeNullable(Writeable writeable, StreamOutput out) throws IOException {     boolean isPresent = writeable != null.     out.writeBoolean(isPresent).     if (isPresent) {         writeable.writeTo(out).     } }
false;private,static;2;7;;private static void writeNullable(List<? extends Writeable> writeables, StreamOutput out) throws IOException {     boolean isPresent = writeables != null.     out.writeBoolean(isPresent).     if (isPresent) {         out.writeList(writeables).     } }
false;public;2;17;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     addNullableField(Bucket.RESULT_TYPE_FIELD, bucket, builder).     addNullableField(AnomalyRecord.RESULTS_FIELD, records, builder).     addNullableField(Influencer.RESULTS_FIELD, influencers, builder).     addNullableField(Quantiles.TYPE, quantiles, builder).     addNullableField(ModelSnapshot.TYPE, modelSnapshot, builder).     addNullableField(ModelSizeStats.RESULT_TYPE_FIELD, modelSizeStats, builder).     addNullableField(ModelPlot.RESULTS_FIELD, modelPlot, builder).     addNullableField(Forecast.RESULTS_FIELD, forecast, builder).     addNullableField(ForecastRequestStats.RESULTS_FIELD, forecastRequestStats, builder).     addNullableField(CategoryDefinition.TYPE, categoryDefinition, builder).     addNullableField(FlushAcknowledgement.TYPE, flushAcknowledgement, builder).     builder.endObject().     return builder. }
false;private,static;3;5;;private static void addNullableField(ParseField field, ToXContent value, XContentBuilder builder) throws IOException {     if (value != null) {         builder.field(field.getPreferredName(), value).     } }
false;private,static;3;5;;private static void addNullableField(ParseField field, List<? extends ToXContent> values, XContentBuilder builder) throws IOException {     if (values != null) {         builder.field(field.getPreferredName(), values).     } }
false;public;0;3;;public Bucket getBucket() {     return bucket. }
false;public;0;3;;public List<AnomalyRecord> getRecords() {     return records. }
false;public;0;3;;public List<Influencer> getInfluencers() {     return influencers. }
false;public;0;3;;public Quantiles getQuantiles() {     return quantiles. }
false;public;0;3;;public ModelSnapshot getModelSnapshot() {     return modelSnapshot. }
false;public;0;3;;public ModelSizeStats getModelSizeStats() {     return modelSizeStats. }
false;public;0;3;;public ModelPlot getModelPlot() {     return modelPlot. }
false;public;0;3;;public Forecast getForecast() {     return forecast. }
false;public;0;3;;public ForecastRequestStats getForecastRequestStats() {     return forecastRequestStats. }
false;public;0;3;;public CategoryDefinition getCategoryDefinition() {     return categoryDefinition. }
false;public;0;3;;public FlushAcknowledgement getFlushAcknowledgement() {     return flushAcknowledgement. }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(bucket, records, influencers, categoryDefinition, flushAcknowledgement, modelPlot, forecast, forecastRequestStats, modelSizeStats, modelSnapshot, quantiles). }
false;public;1;21;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     AutodetectResult other = (AutodetectResult) obj.     return Objects.equals(bucket, other.bucket) && Objects.equals(records, other.records) && Objects.equals(influencers, other.influencers) && Objects.equals(categoryDefinition, other.categoryDefinition) && Objects.equals(flushAcknowledgement, other.flushAcknowledgement) && Objects.equals(modelPlot, other.modelPlot) && Objects.equals(forecast, other.forecast) && Objects.equals(forecastRequestStats, other.forecastRequestStats) && Objects.equals(modelSizeStats, other.modelSizeStats) && Objects.equals(modelSnapshot, other.modelSnapshot) && Objects.equals(quantiles, other.quantiles). }
