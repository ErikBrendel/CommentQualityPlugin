commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "ml_revert_model_snapshot_action". }
false;protected;2;18;;@Override protected RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     String jobId = restRequest.param(Job.ID.getPreferredName()).     String snapshotId = restRequest.param(RevertModelSnapshotAction.Request.SNAPSHOT_ID.getPreferredName()).     RevertModelSnapshotAction.Request request.     if (restRequest.hasContentOrSourceParam()) {         XContentParser parser = restRequest.contentOrSourceParamParser().         request = RevertModelSnapshotAction.Request.parseRequest(jobId, snapshotId, parser).     } else {         request = new RevertModelSnapshotAction.Request(jobId, snapshotId).         request.setDeleteInterveningResults(restRequest.paramAsBoolean(RevertModelSnapshotAction.Request.DELETE_INTERVENING.getPreferredName(), DELETE_INTERVENING_DEFAULT)).     }     request.timeout(restRequest.paramAsTime("timeout", request.timeout())).     request.masterNodeTimeout(restRequest.paramAsTime("master_timeout", request.masterNodeTimeout())).     return channel -> client.execute(RevertModelSnapshotAction.INSTANCE, request, new RestStatusToXContentListener<>(channel)). }
