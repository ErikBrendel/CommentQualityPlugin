commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected GetDatafeedsAction.Response newResponse() {     return new GetDatafeedsAction.Response(). }
false;protected;3;33;;@Override protected void masterOperation(GetDatafeedsAction.Request request, ClusterState state, ActionListener<GetDatafeedsAction.Response> listener) {     logger.debug("Get datafeed '{}'", request.getDatafeedId()).     Map<String, DatafeedConfig> clusterStateConfigs = expandClusterStateDatafeeds(request.getDatafeedId(), request.allowNoDatafeeds(), state).     datafeedConfigProvider.expandDatafeedConfigs(request.getDatafeedId(), request.allowNoDatafeeds(), ActionListener.wrap(datafeedBuilders -> {         // Check for duplicate datafeeds         for (DatafeedConfig.Builder datafeed : datafeedBuilders) {             if (clusterStateConfigs.containsKey(datafeed.getId())) {                 listener.onFailure(new IllegalStateException("Datafeed [" + datafeed.getId() + "] configuration " + "exists in both clusterstate and index")).                 return.             }         }         // Merge cluster state and index configs         List<DatafeedConfig> datafeeds = new ArrayList<>(datafeedBuilders.size() + clusterStateConfigs.values().size()).         for (DatafeedConfig.Builder builder : datafeedBuilders) {             datafeeds.add(builder.build()).         }         datafeeds.addAll(clusterStateConfigs.values()).         Collections.sort(datafeeds, Comparator.comparing(DatafeedConfig::getId)).         listener.onResponse(new GetDatafeedsAction.Response(new QueryPage<>(datafeeds, datafeeds.size(), DatafeedConfig.RESULTS_FIELD))).     }, listener::onFailure)). }
false;;3;17;;Map<String, DatafeedConfig> expandClusterStateDatafeeds(String datafeedExpression, boolean allowNoDatafeeds, ClusterState clusterState) {     Map<String, DatafeedConfig> configById = new HashMap<>().     try {         MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState).         Set<String> expandedDatafeedIds = mlMetadata.expandDatafeedIds(datafeedExpression, allowNoDatafeeds).         for (String expandedDatafeedId : expandedDatafeedIds) {             configById.put(expandedDatafeedId, mlMetadata.getDatafeed(expandedDatafeedId)).         }     } catch (Exception e) {     // ignore     }     return configById. }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(GetDatafeedsAction.Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ). }
