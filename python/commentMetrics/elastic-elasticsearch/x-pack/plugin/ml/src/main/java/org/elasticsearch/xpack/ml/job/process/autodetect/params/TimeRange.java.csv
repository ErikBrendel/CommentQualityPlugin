commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getStart() {     return start == null ? "" : String.valueOf(start). }
false;public;0;3;;public String getEnd() {     return end == null ? "" : String.valueOf(end). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     TimeRange timeRange = (TimeRange) o.     return Objects.equals(start, timeRange.start) && Objects.equals(end, timeRange.end). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(start, end). }
false;public;1;4;;public Builder startTime(String start) {     this.start = ExceptionsHelper.requireNonNull(start, "start").     return this. }
false;public;1;4;;public Builder endTime(String end) {     this.end = ExceptionsHelper.requireNonNull(end, "end").     return this. }
true;public;0;3;/**  * Create a new TimeRange instance after validating the start and end params.  * Throws {@link ElasticsearchStatusException} if the validation fails  * @return The time range  */ ;/**  * Create a new TimeRange instance after validating the start and end params.  * Throws {@link ElasticsearchStatusException} if the validation fails  * @return The time range  */ public TimeRange build() {     return createTimeRange(start, end). }
false;private;2;20;;private TimeRange createTimeRange(String start, String end) {     Long epochStart = null.     Long epochEnd = null.     if (!start.isEmpty()) {         epochStart = paramToEpochIfValidOrThrow(START_PARAM, start) / MILLISECONDS_IN_SECOND.         epochEnd = paramToEpochIfValidOrThrow(END_PARAM, end) / MILLISECONDS_IN_SECOND.         if (end.isEmpty() || epochEnd.equals(epochStart)) {             epochEnd = epochStart + 1.         }         if (epochEnd < epochStart) {             String msg = Messages.getMessage(Messages.REST_START_AFTER_END, end, start).             throw new IllegalArgumentException(msg).         }     } else {         if (!end.isEmpty()) {             epochEnd = paramToEpochIfValidOrThrow(END_PARAM, end) / MILLISECONDS_IN_SECOND.         }     }     return new TimeRange(epochStart, epochEnd). }
true;private;2;15;/**  * Returns epoch milli seconds  */ ;/**  * Returns epoch milli seconds  */ private long paramToEpochIfValidOrThrow(String paramName, String date) {     if (NOW.equals(date)) {         return System.currentTimeMillis().     }     long epoch = 0.     if (date.isEmpty() == false) {         epoch = TimeUtils.dateStringToEpoch(date).         if (epoch < 0) {             String msg = Messages.getMessage(Messages.REST_INVALID_DATETIME_PARAMS, paramName, date).             throw new ElasticsearchParseException(msg).         }     }     return epoch. }
