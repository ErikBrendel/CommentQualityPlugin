commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;13;;@Override protected void doExecute(Task task, GetFiltersAction.Request request, ActionListener<GetFiltersAction.Response> listener) {     final String filterId = request.getFilterId().     if (!Strings.isNullOrEmpty(filterId)) {         getFilter(filterId, listener).     } else {         PageParams pageParams = request.getPageParams().         if (pageParams == null) {             pageParams = PageParams.defaultParams().         }         getFilters(pageParams, listener).     } }
false;public;1;24;;@Override public void onResponse(GetResponse getDocResponse) {     try {         QueryPage<MlFilter> responseBody.         if (getDocResponse.isExists()) {             BytesReference docSource = getDocResponse.getSourceAsBytesRef().             try (InputStream stream = docSource.streamInput().                 XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {                 MlFilter filter = MlFilter.LENIENT_PARSER.apply(parser, null).build().                 responseBody = new QueryPage<>(Collections.singletonList(filter), 1, MlFilter.RESULTS_FIELD).                 GetFiltersAction.Response filterResponse = new GetFiltersAction.Response(responseBody).                 listener.onResponse(filterResponse).             }         } else {             this.onFailure(QueryPage.emptyQueryPage(MlFilter.RESULTS_FIELD)).         }     } catch (Exception e) {         this.onFailure(e).     } }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;private;2;34;;private void getFilter(String filterId, ActionListener<GetFiltersAction.Response> listener) {     GetRequest getRequest = new GetRequest(MlMetaIndex.INDEX_NAME, MlFilter.documentId(filterId)).     executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {          @Override         public void onResponse(GetResponse getDocResponse) {             try {                 QueryPage<MlFilter> responseBody.                 if (getDocResponse.isExists()) {                     BytesReference docSource = getDocResponse.getSourceAsBytesRef().                     try (InputStream stream = docSource.streamInput().                         XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {                         MlFilter filter = MlFilter.LENIENT_PARSER.apply(parser, null).build().                         responseBody = new QueryPage<>(Collections.singletonList(filter), 1, MlFilter.RESULTS_FIELD).                         GetFiltersAction.Response filterResponse = new GetFiltersAction.Response(responseBody).                         listener.onResponse(filterResponse).                     }                 } else {                     this.onFailure(QueryPage.emptyQueryPage(MlFilter.RESULTS_FIELD)).                 }             } catch (Exception e) {                 this.onFailure(e).             }         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }). }
false;public;1;18;;@Override public void onResponse(SearchResponse response) {     List<MlFilter> docs = new ArrayList<>().     for (SearchHit hit : response.getHits().getHits()) {         BytesReference docSource = hit.getSourceRef().         try (InputStream stream = docSource.streamInput().             XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {             docs.add(MlFilter.LENIENT_PARSER.apply(parser, null).build()).         } catch (IOException e) {             this.onFailure(e).         }     }     GetFiltersAction.Response filterResponse = new GetFiltersAction.Response(new QueryPage<>(docs, docs.size(), MlFilter.RESULTS_FIELD)).     listener.onResponse(filterResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;private;2;38;;private void getFilters(PageParams pageParams, ActionListener<GetFiltersAction.Response> listener) {     SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().from(pageParams.getFrom()).size(pageParams.getSize()).query(QueryBuilders.termQuery(MlFilter.TYPE.getPreferredName(), MlFilter.FILTER_TYPE)).     SearchRequest searchRequest = new SearchRequest(MlMetaIndex.INDEX_NAME).indicesOptions(MlIndicesUtils.addIgnoreUnavailable(SearchRequest.DEFAULT_INDICES_OPTIONS)).source(sourceBuilder).     executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest, new ActionListener<SearchResponse>() {          @Override         public void onResponse(SearchResponse response) {             List<MlFilter> docs = new ArrayList<>().             for (SearchHit hit : response.getHits().getHits()) {                 BytesReference docSource = hit.getSourceRef().                 try (InputStream stream = docSource.streamInput().                     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {                     docs.add(MlFilter.LENIENT_PARSER.apply(parser, null).build()).                 } catch (IOException e) {                     this.onFailure(e).                 }             }             GetFiltersAction.Response filterResponse = new GetFiltersAction.Response(new QueryPage<>(docs, docs.size(), MlFilter.RESULTS_FIELD)).             listener.onResponse(filterResponse).         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }, client::search). }
