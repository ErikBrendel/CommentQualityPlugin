commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;39;;@Override protected void doExecute(Task task, DeleteCalendarEventAction.Request request, ActionListener<AcknowledgedResponse> listener) {     final String eventId = request.getEventId().     ActionListener<Calendar> calendarListener = ActionListener.wrap(calendar -> {         GetRequest getRequest = new GetRequest(MlMetaIndex.INDEX_NAME, eventId).         executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, ActionListener.wrap(getResponse -> {             if (getResponse.isExists() == false) {                 listener.onFailure(new ResourceNotFoundException("No event with id [" + eventId + "]")).                 return.             }             Map<String, Object> source = getResponse.getSourceAsMap().             String calendarId = (String) source.get(Calendar.ID.getPreferredName()).             if (calendarId == null) {                 listener.onFailure(ExceptionsHelper.badRequestException("Event [" + eventId + "] does not have a valid " + Calendar.ID.getPreferredName())).                 return.             }             if (calendarId.equals(request.getCalendarId()) == false) {                 listener.onFailure(ExceptionsHelper.badRequestException("Event [" + eventId + "] has " + Calendar.ID.getPreferredName() + " [" + calendarId + "] which does not match the request " + Calendar.ID.getPreferredName() + " [" + request.getCalendarId() + "]")).                 return.             }             deleteEvent(eventId, calendar, listener).         }, listener::onFailure)).     }, listener::onFailure).     // Get the calendar first so we check the calendar exists before checking the event exists     jobResultsProvider.calendar(request.getCalendarId(), calendarListener). }
false;public;1;12;;@Override public void onResponse(DeleteResponse response) {     if (response.status() == RestStatus.NOT_FOUND) {         listener.onFailure(new ResourceNotFoundException("No event with id [" + eventId + "]")).     } else {         jobManager.updateProcessOnCalendarChanged(calendar.getJobIds(), ActionListener.wrap(r -> listener.onResponse(new AcknowledgedResponse(true)), listener::onFailure)).     } }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(ExceptionsHelper.serverError("Could not delete event [" + eventId + "]", e)). }
false;private;3;25;;private void deleteEvent(String eventId, Calendar calendar, ActionListener<AcknowledgedResponse> listener) {     DeleteRequest deleteRequest = new DeleteRequest(MlMetaIndex.INDEX_NAME, eventId).     deleteRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).     executeAsyncWithOrigin(client, ML_ORIGIN, DeleteAction.INSTANCE, deleteRequest, new ActionListener<DeleteResponse>() {          @Override         public void onResponse(DeleteResponse response) {             if (response.status() == RestStatus.NOT_FOUND) {                 listener.onFailure(new ResourceNotFoundException("No event with id [" + eventId + "]")).             } else {                 jobManager.updateProcessOnCalendarChanged(calendar.getJobIds(), ActionListener.wrap(r -> listener.onResponse(new AcknowledgedResponse(true)), listener::onFailure)).             }         }          @Override         public void onFailure(Exception e) {             listener.onFailure(ExceptionsHelper.serverError("Could not delete event [" + eventId + "]", e)).         }     }). }
