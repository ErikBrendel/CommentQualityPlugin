commented;modifiers;parameterAmount;loc;comment;code
true;public;0;16;/**  * Write the Ml autodetect field options to the outputIndex stream.  */ ;/**  * Write the Ml autodetect field options to the outputIndex stream.  */ public void write() throws IOException {     StringBuilder contents = new StringBuilder().     // Filters have to be written before the detectors     writeFilters(contents).     writeDetectors(contents).     writeScheduledEvents(contents).     writeCategorizationFilters(contents).     // As values are written as entire settings rather than part of a     // clause no quoting is needed     writeAsEnumeratedSettings(INFLUENCER_PREFIX, config.getInfluencers(), contents, false).     logger.debug("FieldConfig:\n" + contents.toString()).     writer.write(contents.toString()). }
false;private;1;7;;// CATEGORIZATION_TOKENIZATION_IN_JAVA is used for performance testing @SuppressWarnings("unused") private void writeCategorizationFilters(StringBuilder contents) {     if (MachineLearning.CATEGORIZATION_TOKENIZATION_IN_JAVA == false) {         writeAsEnumeratedSettings(CATEGORIZATION_FILTER_PREFIX, config.getCategorizationFilters(), contents, true).     } }
false;private;1;8;;private void writeDetectors(StringBuilder contents) throws IOException {     int counter = 0.     for (Detector detector : config.getDetectors()) {         int detectorId = counter++.         writeDetectorClause(detectorId, detector, contents).         writeDetectorRules(detectorId, detector, contents).     } }
false;private;3;13;;private void writeDetectorClause(int detectorId, Detector detector, StringBuilder contents) {     contents.append(DETECTOR_PREFIX).append(detectorId).append(DETECTOR_CLAUSE_SUFFIX).append(EQUALS).     DefaultDetectorDescription.appendOn(detector, contents).     if (Strings.isNullOrEmpty(config.getCategorizationFieldName()) == false) {         contents.append(CATEGORIZATION_FIELD_OPTION).append(quoteField(config.getCategorizationFieldName())).     }     contents.append(NEW_LINE). }
false;private;3;15;;private void writeDetectorRules(int detectorId, Detector detector, StringBuilder contents) throws IOException {     List<DetectionRule> rules = new ArrayList<>().     if (detector.getRules() != null) {         rules.addAll(detector.getRules()).     }     if (rules.isEmpty()) {         return.     }     contents.append(DETECTOR_PREFIX).append(detectorId).append(DETECTOR_RULES_SUFFIX).append(EQUALS).     writeDetectionRulesJson(rules, contents).     contents.append(NEW_LINE). }
false;private;2;15;;private void writeDetectionRulesJson(List<DetectionRule> rules, StringBuilder contents) throws IOException {     contents.append('[').     boolean first = true.     for (DetectionRule rule : rules) {         if (first) {             first = false.         } else {             contents.append(',').         }         try (XContentBuilder contentBuilder = XContentFactory.jsonBuilder()) {             contents.append(Strings.toString(rule.toXContent(contentBuilder, ToXContent.EMPTY_PARAMS))).         }     }     contents.append(']'). }
false;private;1;3;;private void writeFilters(StringBuilder buffer) throws IOException {     new MlFilterWriter(filters, buffer).write(). }
false;private;1;5;;private void writeScheduledEvents(StringBuilder buffer) throws IOException {     if (scheduledEvents.isEmpty() == false) {         new ScheduledEventsWriter(scheduledEvents, config.getBucketSpan(), buffer).write().     } }
false;private,static;4;11;;private static void writeAsEnumeratedSettings(String settingName, List<String> values, StringBuilder buffer, boolean quote) {     if (values == null) {         return.     }     int counter = 0.     for (String value : values) {         buffer.append(settingName).append(counter++).append(EQUALS).append(quote ? quoteField(value) : value).append(NEW_LINE).     } }
false;private,static;1;3;;private static String quoteField(String field) {     return MlStrings.doubleQuoteIfNotAlphaNumeric(field). }
