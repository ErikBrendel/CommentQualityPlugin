commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "ml_get_influencers_action". }
false;protected;2;27;;@Override protected RestChannelConsumer prepareRequest(RestRequest restRequest, NodeClient client) throws IOException {     String jobId = restRequest.param(Job.ID.getPreferredName()).     String start = restRequest.param(GetInfluencersAction.Request.START.getPreferredName()).     String end = restRequest.param(GetInfluencersAction.Request.END.getPreferredName()).     final GetInfluencersAction.Request request.     if (restRequest.hasContentOrSourceParam()) {         XContentParser parser = restRequest.contentOrSourceParamParser().         request = GetInfluencersAction.Request.parseRequest(jobId, parser).     } else {         request = new GetInfluencersAction.Request(jobId).         request.setStart(start).         request.setEnd(end).         request.setExcludeInterim(restRequest.paramAsBoolean(GetInfluencersAction.Request.EXCLUDE_INTERIM.getPreferredName(), request.isExcludeInterim())).         request.setPageParams(new PageParams(restRequest.paramAsInt(PageParams.FROM.getPreferredName(), PageParams.DEFAULT_FROM), restRequest.paramAsInt(PageParams.SIZE.getPreferredName(), PageParams.DEFAULT_SIZE))).         request.setInfluencerScore(Double.parseDouble(restRequest.param(GetInfluencersAction.Request.INFLUENCER_SCORE.getPreferredName(), String.valueOf(request.getInfluencerScore())))).         request.setSort(restRequest.param(GetInfluencersAction.Request.SORT_FIELD.getPreferredName(), request.getSort())).         request.setDescending(restRequest.paramAsBoolean(GetInfluencersAction.Request.DESCENDING_SORT.getPreferredName(), request.isDescending())).     }     return channel -> client.execute(GetInfluencersAction.INSTANCE, request, new RestToXContentListener<>(channel)). }
