commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Restore state from the given {@link ModelSnapshot}  * @param stateStreamer the streamer of the job state  * @param modelSnapshot the model snapshot to restore  */ ;/**  * Restore state from the given {@link ModelSnapshot}  * @param stateStreamer the streamer of the job state  * @param modelSnapshot the model snapshot to restore  */ void restoreState(StateStreamer stateStreamer, ModelSnapshot modelSnapshot).
true;;1;1;/**  * Write the reset buckets control message  *  * @param params Reset bucket options  * @throws IOException If write reset message fails  */ ;/**  * Write the reset buckets control message  *  * @param params Reset bucket options  * @throws IOException If write reset message fails  */ void writeResetBucketsControlMessage(DataLoadParams params) throws IOException.
true;;1;1;/**  * Update the model plot configuration  *  * @param modelPlotConfig New model plot config  * @throws IOException If the write fails  */ ;/**  * Update the model plot configuration  *  * @param modelPlotConfig New model plot config  * @throws IOException If the write fails  */ void writeUpdateModelPlotMessage(ModelPlotConfig modelPlotConfig) throws IOException.
true;;2;2;/**  * Write message to update the detector rules  *  * @param detectorIndex Index of the detector to update  * @param rules Detector rules  * @throws IOException If the write fails  */ ;/**  * Write message to update the detector rules  *  * @param detectorIndex Index of the detector to update  * @param rules Detector rules  * @throws IOException If the write fails  */ void writeUpdateDetectorRulesMessage(int detectorIndex, List<DetectionRule> rules) throws IOException.
true;;1;1;/**  * Write message to update the filters  *  * @param filters the filters to update  * @throws IOException If the write fails  */ ;/**  * Write message to update the filters  *  * @param filters the filters to update  * @throws IOException If the write fails  */ void writeUpdateFiltersMessage(List<MlFilter> filters) throws IOException.
true;;2;1;/**  * Write message to update the scheduled events  *  * @param events Scheduled events  * @param bucketSpan The job bucket span  * @throws IOException If the write fails  */ ;/**  * Write message to update the scheduled events  *  * @param events Scheduled events  * @param bucketSpan The job bucket span  * @throws IOException If the write fails  */ void writeUpdateScheduledEventsMessage(List<ScheduledEvent> events, TimeValue bucketSpan) throws IOException.
true;;1;1;/**  * Flush the job pushing any stale data into autodetect.  * Every flush command generates a unique flush Id which will be output  * in a flush acknowledgment by the autodetect process once the flush has  * been processed.  *  * @param params Parameters describing the controls that will accompany the flushing  *               (e.g. calculating interim results, time control, etc.)  * @return The flush Id  * @throws IOException If the flush failed  */ ;/**  * Flush the job pushing any stale data into autodetect.  * Every flush command generates a unique flush Id which will be output  * in a flush acknowledgment by the autodetect process once the flush has  * been processed.  *  * @param params Parameters describing the controls that will accompany the flushing  *               (e.g. calculating interim results, time control, etc.)  * @return The flush Id  * @throws IOException If the flush failed  */ String flushJob(FlushJobParams params) throws IOException.
true;;1;1;/**  * Do a forecast on a running job.  *  * @param params The forecast parameters  * @throws IOException If the write fails  */ ;/**  * Do a forecast on a running job.  *  * @param params The forecast parameters  * @throws IOException If the write fails  */ void forecastJob(ForecastParams params) throws IOException.
true;;0;1;/**  * @return stream of autodetect results.  */ ;/**  * @return stream of autodetect results.  */ Iterator<AutodetectResult> readAutodetectResults().
true;;0;1;/**  * Read anything left in the stream before  * closing the stream otherwise if the process  * tries to write more after the close it gets  * a SIGPIPE  */ ;/**  * Read anything left in the stream before  * closing the stream otherwise if the process  * tries to write more after the close it gets  * a SIGPIPE  */ void consumeAndCloseOutputStream().
