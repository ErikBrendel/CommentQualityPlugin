commented;modifiers;parameterAmount;loc;comment;code
false;;1;12;;void addRecord(long recordTimestampMs) {     long bucketStartMs = Intervals.alignToFloor(recordTimestampMs, bucketSpanMs).     // Initialize earliest/latest times     if (latestBucketStartMs < 0) {         latestBucketStartMs = bucketStartMs.         earliestBucketStartMs = bucketStartMs.     }     advanceTime(bucketStartMs).     addToBucket(bucketStartMs). }
false;private;1;16;;private void advanceTime(long bucketStartMs) {     while (bucketStartMs > latestBucketStartMs) {         int flushBucketIndex = (latestBucketIndex + 1) % maxSize.         if (flushBucketIndex == earliestBucketIndex) {             flush(flushBucketIndex).             movingBucketCount -= buckets[flushBucketIndex].             earliestBucketStartMs += bucketSpanMs.             earliestBucketIndex = (earliestBucketIndex + 1) % maxSize.         }         buckets[flushBucketIndex] = 0L.         latestBucketStartMs += bucketSpanMs.         latestBucketIndex = flushBucketIndex.     } }
false;private;1;15;;private void addToBucket(long bucketStartMs) {     int offsetToLatest = (int) ((bucketStartMs - latestBucketStartMs) / bucketSpanMs).     int bucketIndex = (latestBucketIndex + offsetToLatest) % maxSize.     if (bucketIndex < 0) {         bucketIndex = maxSize + bucketIndex.     }     ++buckets[bucketIndex].     ++movingBucketCount.     if (bucketStartMs < earliestBucketStartMs) {         earliestBucketStartMs = bucketStartMs.         earliestBucketIndex = bucketIndex.     } }
false;private;1;7;;private void flush(int bucketIndex) {     long bucketStartMs = getTimestampMs(bucketIndex).     if (bucketStartMs > latestFlushedBucketStartMs) {         bucketFlushListener.onBucketFlush(bucketStartMs, buckets[bucketIndex]).         latestFlushedBucketStartMs = bucketStartMs.     } }
false;private;1;7;;private long getTimestampMs(int bucketIndex) {     int offsetToLatest = latestBucketIndex - bucketIndex.     if (offsetToLatest < 0) {         offsetToLatest = maxSize + offsetToLatest.     }     return latestBucketStartMs - offsetToLatest * bucketSpanMs. }
false;;0;11;;void flush() {     if (latestBucketStartMs < 0) {         return.     }     int bucketIndex = earliestBucketIndex.     while (bucketIndex != latestBucketIndex) {         flush(bucketIndex).         bucketIndex = (bucketIndex + 1) % maxSize.     } }
false;;0;3;;double averageBucketCount() {     return (double) movingBucketCount / size(). }
false;private;0;6;;private int size() {     if (latestBucketStartMs < 0) {         return 0.     }     return (int) ((latestBucketStartMs - earliestBucketStartMs) / bucketSpanMs) + 1. }
false;;2;1;;void onBucketFlush(long bucketStartMs, long bucketCounts).
