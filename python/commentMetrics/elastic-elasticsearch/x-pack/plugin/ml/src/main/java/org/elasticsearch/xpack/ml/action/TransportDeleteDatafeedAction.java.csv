commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;protected;3;15;;@Override protected void masterOperation(DeleteDatafeedAction.Request request, ClusterState state, ActionListener<AcknowledgedResponse> listener) {     if (migrationEligibilityCheck.datafeedIsEligibleForMigration(request.getDatafeedId(), state)) {         listener.onFailure(ExceptionsHelper.configHasNotBeenMigrated("delete datafeed", request.getDatafeedId())).         return.     }     if (request.isForce()) {         forceDeleteDatafeed(request, state, listener).     } else {         deleteDatafeedConfig(request, listener).     } }
false;private;3;15;;private void forceDeleteDatafeed(DeleteDatafeedAction.Request request, ClusterState state, ActionListener<AcknowledgedResponse> listener) {     ActionListener<Boolean> finalListener = ActionListener.wrap(response -> deleteDatafeedConfig(request, listener), listener::onFailure).     ActionListener<IsolateDatafeedAction.Response> isolateDatafeedHandler = ActionListener.wrap(response -> removeDatafeedTask(request, state, finalListener), listener::onFailure).     IsolateDatafeedAction.Request isolateDatafeedRequest = new IsolateDatafeedAction.Request(request.getDatafeedId()).     executeAsyncWithOrigin(client, ML_ORIGIN, IsolateDatafeedAction.INSTANCE, isolateDatafeedRequest, isolateDatafeedHandler). }
false;public;1;4;;@Override public void onResponse(PersistentTasksCustomMetaData.PersistentTask<?> persistentTask) {     listener.onResponse(Boolean.TRUE). }
false;public;1;9;;@Override public void onFailure(Exception e) {     if (e instanceof ResourceNotFoundException) {         // the task has been removed in between         listener.onResponse(true).     } else {         listener.onFailure(e).     } }
false;private;3;25;;private void removeDatafeedTask(DeleteDatafeedAction.Request request, ClusterState state, ActionListener<Boolean> listener) {     PersistentTasksCustomMetaData tasks = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE).     PersistentTasksCustomMetaData.PersistentTask<?> datafeedTask = MlTasks.getDatafeedTask(request.getDatafeedId(), tasks).     if (datafeedTask == null) {         listener.onResponse(true).     } else {         persistentTasksService.sendRemoveRequest(datafeedTask.getId(), new ActionListener<PersistentTasksCustomMetaData.PersistentTask<?>>() {              @Override             public void onResponse(PersistentTasksCustomMetaData.PersistentTask<?> persistentTask) {                 listener.onResponse(Boolean.TRUE).             }              @Override             public void onFailure(Exception e) {                 if (e instanceof ResourceNotFoundException) {                     // the task has been removed in between                     listener.onResponse(true).                 } else {                     listener.onFailure(e).                 }             }         }).     } }
false;private;2;14;;private void deleteDatafeedConfig(DeleteDatafeedAction.Request request, ActionListener<AcknowledgedResponse> listener) {     // Check datafeed is stopped     PersistentTasksCustomMetaData tasks = clusterService.state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE).     if (MlTasks.getDatafeedTask(request.getDatafeedId(), tasks) != null) {         listener.onFailure(ExceptionsHelper.conflictStatusException(Messages.getMessage(Messages.DATAFEED_CANNOT_DELETE_IN_CURRENT_STATE, request.getDatafeedId(), DatafeedState.STARTED))).         return.     }     datafeedConfigProvider.deleteDatafeedConfig(request.getDatafeedId(), ActionListener.wrap(deleteResponse -> listener.onResponse(new AcknowledgedResponse(true)), listener::onFailure)). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(DeleteDatafeedAction.Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
