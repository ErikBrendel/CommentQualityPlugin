# id;timestamp;commentText;codeText;commentWords;codeWords
MlConfigMigrationEligibilityCheck -> public boolean datafeedIsEligibleForMigration(String datafeedId, ClusterState clusterState);1545155131;Is the datafeed a eligible for migration? Returns:_False if {@link #canStartMigration(ClusterState)} returns {@code false}_False if the datafeed is not in the cluster state_False if the datafeed has a persistent task_True otherwise i.e. the datafeed is present and does not have a persistent task.__@param datafeedId   The datafeed Id_@param clusterState  The cluster state_@return A boolean depending on the conditions listed above;public boolean datafeedIsEligibleForMigration(String datafeedId, ClusterState clusterState) {_        if (canStartMigration(clusterState) == false) {_            return false__        }__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        if (mlMetadata.getDatafeeds().containsKey(datafeedId) == false) {_            return false__        }__        PersistentTasksCustomMetaData persistentTasks = clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE)__        return MlTasks.startedDatafeedIds(persistentTasks).contains(datafeedId) == false__    };is,the,datafeed,a,eligible,for,migration,returns,false,if,link,can,start,migration,cluster,state,returns,code,false,false,if,the,datafeed,is,not,in,the,cluster,state,false,if,the,datafeed,has,a,persistent,task,true,otherwise,i,e,the,datafeed,is,present,and,does,not,have,a,persistent,task,param,datafeed,id,the,datafeed,id,param,cluster,state,the,cluster,state,return,a,boolean,depending,on,the,conditions,listed,above;public,boolean,datafeed,is,eligible,for,migration,string,datafeed,id,cluster,state,cluster,state,if,can,start,migration,cluster,state,false,return,false,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,if,ml,metadata,get,datafeeds,contains,key,datafeed,id,false,return,false,persistent,tasks,custom,meta,data,persistent,tasks,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,return,ml,tasks,started,datafeed,ids,persistent,tasks,contains,datafeed,id,false
MlConfigMigrationEligibilityCheck -> public boolean datafeedIsEligibleForMigration(String datafeedId, ClusterState clusterState);1545227023;Is the datafeed a eligible for migration? Returns:_False if {@link #canStartMigration(ClusterState)} returns {@code false}_False if the datafeed is not in the cluster state_False if the datafeed has a persistent task_True otherwise i.e. the datafeed is present and does not have a persistent task.__@param datafeedId   The datafeed Id_@param clusterState  The cluster state_@return A boolean depending on the conditions listed above;public boolean datafeedIsEligibleForMigration(String datafeedId, ClusterState clusterState) {_        if (canStartMigration(clusterState) == false) {_            return false__        }__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        if (mlMetadata.getDatafeeds().containsKey(datafeedId) == false) {_            return false__        }__        PersistentTasksCustomMetaData persistentTasks = clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE)__        return MlTasks.startedDatafeedIds(persistentTasks).contains(datafeedId) == false__    };is,the,datafeed,a,eligible,for,migration,returns,false,if,link,can,start,migration,cluster,state,returns,code,false,false,if,the,datafeed,is,not,in,the,cluster,state,false,if,the,datafeed,has,a,persistent,task,true,otherwise,i,e,the,datafeed,is,present,and,does,not,have,a,persistent,task,param,datafeed,id,the,datafeed,id,param,cluster,state,the,cluster,state,return,a,boolean,depending,on,the,conditions,listed,above;public,boolean,datafeed,is,eligible,for,migration,string,datafeed,id,cluster,state,cluster,state,if,can,start,migration,cluster,state,false,return,false,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,if,ml,metadata,get,datafeeds,contains,key,datafeed,id,false,return,false,persistent,tasks,custom,meta,data,persistent,tasks,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,return,ml,tasks,started,datafeed,ids,persistent,tasks,contains,datafeed,id,false
MlConfigMigrationEligibilityCheck -> public boolean datafeedIsEligibleForMigration(String datafeedId, ClusterState clusterState);1547576499;Is the datafeed a eligible for migration? Returns:_False if {@link #canStartMigration(ClusterState)} returns {@code false}_False if the datafeed is not in the cluster state_False if the datafeed has an allocated persistent task_True otherwise i.e. the datafeed is present and does not have a persistent_task or its persistent task is un-allocated__@param datafeedId   The datafeed Id_@param clusterState  The cluster state_@return A boolean depending on the conditions listed above;public boolean datafeedIsEligibleForMigration(String datafeedId, ClusterState clusterState) {_        if (canStartMigration(clusterState) == false) {_            return false__        }__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        if (mlMetadata.getDatafeeds().containsKey(datafeedId) == false) {_            return false__        }__        PersistentTasksCustomMetaData persistentTasks = clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE)__        return MlTasks.startedDatafeedIds(persistentTasks).contains(datafeedId) == false_                || MlTasks.unallocatedDatafeedIds(persistentTasks, clusterState.nodes()).contains(datafeedId)__    };is,the,datafeed,a,eligible,for,migration,returns,false,if,link,can,start,migration,cluster,state,returns,code,false,false,if,the,datafeed,is,not,in,the,cluster,state,false,if,the,datafeed,has,an,allocated,persistent,task,true,otherwise,i,e,the,datafeed,is,present,and,does,not,have,a,persistent,task,or,its,persistent,task,is,un,allocated,param,datafeed,id,the,datafeed,id,param,cluster,state,the,cluster,state,return,a,boolean,depending,on,the,conditions,listed,above;public,boolean,datafeed,is,eligible,for,migration,string,datafeed,id,cluster,state,cluster,state,if,can,start,migration,cluster,state,false,return,false,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,if,ml,metadata,get,datafeeds,contains,key,datafeed,id,false,return,false,persistent,tasks,custom,meta,data,persistent,tasks,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,return,ml,tasks,started,datafeed,ids,persistent,tasks,contains,datafeed,id,false,ml,tasks,unallocated,datafeed,ids,persistent,tasks,cluster,state,nodes,contains,datafeed,id
MlConfigMigrationEligibilityCheck -> public boolean canStartMigration(ClusterState clusterState);1545155131;Can migration start? Returns:_False if config migration is disabled via the setting {@link #ENABLE_CONFIG_MIGRATION}_False if the min node version of the cluster is before {@link #MIN_NODE_VERSION}_True otherwise_@param clusterState The cluster state_@return A boolean that dictates if config migration can start;public boolean canStartMigration(ClusterState clusterState) {_        if (isConfigMigrationEnabled == false) {_            return false__        }__        Version minNodeVersion = clusterState.nodes().getMinNodeVersion()__        if (minNodeVersion.before(MIN_NODE_VERSION)) {_            return false__        }_        return true__    };can,migration,start,returns,false,if,config,migration,is,disabled,via,the,setting,link,false,if,the,min,node,version,of,the,cluster,is,before,link,true,otherwise,param,cluster,state,the,cluster,state,return,a,boolean,that,dictates,if,config,migration,can,start;public,boolean,can,start,migration,cluster,state,cluster,state,if,is,config,migration,enabled,false,return,false,version,min,node,version,cluster,state,nodes,get,min,node,version,if,min,node,version,before,return,false,return,true
MlConfigMigrationEligibilityCheck -> public boolean canStartMigration(ClusterState clusterState);1545227023;Can migration start? Returns:_False if config migration is disabled via the setting {@link #ENABLE_CONFIG_MIGRATION}_False if the min node version of the cluster is before {@link #MIN_NODE_VERSION}_False if the .ml-config index shards are not active_True otherwise_@param clusterState The cluster state_@return A boolean that dictates if config migration can start;public boolean canStartMigration(ClusterState clusterState) {_        if (isConfigMigrationEnabled == false) {_            return false__        }__        Version minNodeVersion = clusterState.nodes().getMinNodeVersion()__        if (minNodeVersion.before(MIN_NODE_VERSION)) {_            return false__        }__        return mlConfigIndexIsAllocated(clusterState)__    };can,migration,start,returns,false,if,config,migration,is,disabled,via,the,setting,link,false,if,the,min,node,version,of,the,cluster,is,before,link,false,if,the,ml,config,index,shards,are,not,active,true,otherwise,param,cluster,state,the,cluster,state,return,a,boolean,that,dictates,if,config,migration,can,start;public,boolean,can,start,migration,cluster,state,cluster,state,if,is,config,migration,enabled,false,return,false,version,min,node,version,cluster,state,nodes,get,min,node,version,if,min,node,version,before,return,false,return,ml,config,index,is,allocated,cluster,state
MlConfigMigrationEligibilityCheck -> public boolean canStartMigration(ClusterState clusterState);1547576499;Can migration start? Returns:_False if config migration is disabled via the setting {@link #ENABLE_CONFIG_MIGRATION}_False if the min node version of the cluster is before {@link #MIN_NODE_VERSION}_False if the .ml-config index shards are not active_True otherwise_@param clusterState The cluster state_@return A boolean that dictates if config migration can start;public boolean canStartMigration(ClusterState clusterState) {_        if (isConfigMigrationEnabled == false) {_            return false__        }__        Version minNodeVersion = clusterState.nodes().getMinNodeVersion()__        if (minNodeVersion.before(MIN_NODE_VERSION)) {_            return false__        }__        return mlConfigIndexIsAllocated(clusterState)__    };can,migration,start,returns,false,if,config,migration,is,disabled,via,the,setting,link,false,if,the,min,node,version,of,the,cluster,is,before,link,false,if,the,ml,config,index,shards,are,not,active,true,otherwise,param,cluster,state,the,cluster,state,return,a,boolean,that,dictates,if,config,migration,can,start;public,boolean,can,start,migration,cluster,state,cluster,state,if,is,config,migration,enabled,false,return,false,version,min,node,version,cluster,state,nodes,get,min,node,version,if,min,node,version,before,return,false,return,ml,config,index,is,allocated,cluster,state
MlConfigMigrationEligibilityCheck -> public boolean jobIsEligibleForMigration(String jobId, ClusterState clusterState);1545155131;Is the job a eligible for migration? Returns:_False if {@link #canStartMigration(ClusterState)} returns {@code false}_False if the {@link Job#isDeleting()}_False if the job has a persistent task_True otherwise i.e. the job is present, not deleting_and does not have a persistent task.__@param jobId         The job Id_@param clusterState  The cluster state_@return A boolean depending on the conditions listed above;public boolean jobIsEligibleForMigration(String jobId, ClusterState clusterState) {_        if (canStartMigration(clusterState) == false) {_            return false__        }__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        Job job = mlMetadata.getJobs().get(jobId)___        if (job == null || job.isDeleting()) {_            return false__        }__        PersistentTasksCustomMetaData persistentTasks = clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE)__        return MlTasks.openJobIds(persistentTasks).contains(jobId) == false__    };is,the,job,a,eligible,for,migration,returns,false,if,link,can,start,migration,cluster,state,returns,code,false,false,if,the,link,job,is,deleting,false,if,the,job,has,a,persistent,task,true,otherwise,i,e,the,job,is,present,not,deleting,and,does,not,have,a,persistent,task,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,a,boolean,depending,on,the,conditions,listed,above;public,boolean,job,is,eligible,for,migration,string,job,id,cluster,state,cluster,state,if,can,start,migration,cluster,state,false,return,false,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,job,is,deleting,return,false,persistent,tasks,custom,meta,data,persistent,tasks,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,return,ml,tasks,open,job,ids,persistent,tasks,contains,job,id,false
MlConfigMigrationEligibilityCheck -> public boolean jobIsEligibleForMigration(String jobId, ClusterState clusterState);1545227023;Is the job a eligible for migration? Returns:_False if {@link #canStartMigration(ClusterState)} returns {@code false}_False if the job is not in the cluster state_False if the {@link Job#isDeleting()}_False if the job has a persistent task_True otherwise i.e. the job is present, not deleting_and does not have a persistent task.__@param jobId         The job Id_@param clusterState  The cluster state_@return A boolean depending on the conditions listed above;public boolean jobIsEligibleForMigration(String jobId, ClusterState clusterState) {_        if (canStartMigration(clusterState) == false) {_            return false__        }__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        Job job = mlMetadata.getJobs().get(jobId)___        if (job == null || job.isDeleting()) {_            return false__        }__        PersistentTasksCustomMetaData persistentTasks = clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE)__        return MlTasks.openJobIds(persistentTasks).contains(jobId) == false__    };is,the,job,a,eligible,for,migration,returns,false,if,link,can,start,migration,cluster,state,returns,code,false,false,if,the,job,is,not,in,the,cluster,state,false,if,the,link,job,is,deleting,false,if,the,job,has,a,persistent,task,true,otherwise,i,e,the,job,is,present,not,deleting,and,does,not,have,a,persistent,task,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,a,boolean,depending,on,the,conditions,listed,above;public,boolean,job,is,eligible,for,migration,string,job,id,cluster,state,cluster,state,if,can,start,migration,cluster,state,false,return,false,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,job,is,deleting,return,false,persistent,tasks,custom,meta,data,persistent,tasks,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,return,ml,tasks,open,job,ids,persistent,tasks,contains,job,id,false
MlConfigMigrationEligibilityCheck -> public boolean jobIsEligibleForMigration(String jobId, ClusterState clusterState);1547576499;Is the job a eligible for migration? Returns:_False if {@link #canStartMigration(ClusterState)} returns {@code false}_False if the job is not in the cluster state_False if the {@link Job#isDeleting()}_False if the job has an allocated persistent task_True otherwise i.e. the job is present, not deleting_and does not have a persistent task or its persistent_task is un-allocated__@param jobId         The job Id_@param clusterState  The cluster state_@return A boolean depending on the conditions listed above;public boolean jobIsEligibleForMigration(String jobId, ClusterState clusterState) {_        if (canStartMigration(clusterState) == false) {_            return false__        }__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        Job job = mlMetadata.getJobs().get(jobId)___        if (job == null || job.isDeleting()) {_            return false__        }__        PersistentTasksCustomMetaData persistentTasks = clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE)__        return MlTasks.openJobIds(persistentTasks).contains(jobId) == false ||_                MlTasks.unallocatedJobIds(persistentTasks, clusterState.nodes()).contains(jobId)__    };is,the,job,a,eligible,for,migration,returns,false,if,link,can,start,migration,cluster,state,returns,code,false,false,if,the,job,is,not,in,the,cluster,state,false,if,the,link,job,is,deleting,false,if,the,job,has,an,allocated,persistent,task,true,otherwise,i,e,the,job,is,present,not,deleting,and,does,not,have,a,persistent,task,or,its,persistent,task,is,un,allocated,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,a,boolean,depending,on,the,conditions,listed,above;public,boolean,job,is,eligible,for,migration,string,job,id,cluster,state,cluster,state,if,can,start,migration,cluster,state,false,return,false,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,job,job,ml,metadata,get,jobs,get,job,id,if,job,null,job,is,deleting,return,false,persistent,tasks,custom,meta,data,persistent,tasks,cluster,state,meta,data,custom,persistent,tasks,custom,meta,data,type,return,ml,tasks,open,job,ids,persistent,tasks,contains,job,id,false,ml,tasks,unallocated,job,ids,persistent,tasks,cluster,state,nodes,contains,job,id
