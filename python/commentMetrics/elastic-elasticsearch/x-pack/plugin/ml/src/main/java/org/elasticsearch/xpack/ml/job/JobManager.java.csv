# id;timestamp;commentText;codeText;commentWords;codeWords
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1524684173;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1526981569;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1527096592;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1528893677;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1529341607;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1529687475;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1531910483;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1532456624;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1533230566;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1534362961;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1537806831;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1540583181;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1541008027;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1541092382;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public Job getJobOrThrowIfUnknown(String jobId);1543343306;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public Job getJobOrThrowIfUnknown(String jobId) {_        return getJobOrThrowIfUnknown(jobId, clusterService.state())__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,job,get,job,or,throw,if,unknown,string,job,id,return,get,job,or,throw,if,unknown,job,id,cluster,service,state
JobManager -> public void expandJobs(String expression, boolean allowNoJobs, ActionListener<QueryPage<Job>> jobsListener);1545155131;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@param jobsListener The jobs listener;public void expandJobs(String expression, boolean allowNoJobs, ActionListener<QueryPage<Job>> jobsListener) {_        Map<String, Job> clusterStateJobs = expandJobsFromClusterState(expression, allowNoJobs, clusterService.state())___        jobConfigProvider.expandJobs(expression, allowNoJobs, false, ActionListener.wrap(_                jobBuilders -> {_                    _                    for (Job.Builder jb : jobBuilders) {_                        if (clusterStateJobs.containsKey(jb.getId())) {_                            jobsListener.onFailure(new IllegalStateException("Job [" + jb.getId() + "] configuration " +_                                    "exists in both clusterstate and index"))__                            return__                        }_                    }__                    _                    List<Job> jobs = new ArrayList<>()__                    for (Job.Builder jb : jobBuilders) {_                        jobs.add(jb.build())__                    }__                    jobs.addAll(clusterStateJobs.values())__                    Collections.sort(jobs, Comparator.comparing(Job::getId))__                    jobsListener.onResponse(new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD))__                },_                jobsListener::onFailure_        ))__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,param,jobs,listener,the,jobs,listener;public,void,expand,jobs,string,expression,boolean,allow,no,jobs,action,listener,query,page,job,jobs,listener,map,string,job,cluster,state,jobs,expand,jobs,from,cluster,state,expression,allow,no,jobs,cluster,service,state,job,config,provider,expand,jobs,expression,allow,no,jobs,false,action,listener,wrap,job,builders,for,job,builder,jb,job,builders,if,cluster,state,jobs,contains,key,jb,get,id,jobs,listener,on,failure,new,illegal,state,exception,job,jb,get,id,configuration,exists,in,both,clusterstate,and,index,return,list,job,jobs,new,array,list,for,job,builder,jb,job,builders,jobs,add,jb,build,jobs,add,all,cluster,state,jobs,values,collections,sort,jobs,comparator,comparing,job,get,id,jobs,listener,on,response,new,query,page,jobs,jobs,size,job,jobs,listener,on,failure
JobManager -> public void expandJobs(String expression, boolean allowNoJobs, ActionListener<QueryPage<Job>> jobsListener);1547065535;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@param jobsListener The jobs listener;public void expandJobs(String expression, boolean allowNoJobs, ActionListener<QueryPage<Job>> jobsListener) {_        Map<String, Job> clusterStateJobs = expandJobsFromClusterState(expression, allowNoJobs, clusterService.state())___        jobConfigProvider.expandJobs(expression, allowNoJobs, false, ActionListener.wrap(_                jobBuilders -> {_                    _                    for (Job.Builder jb : jobBuilders) {_                        if (clusterStateJobs.containsKey(jb.getId())) {_                            jobsListener.onFailure(new IllegalStateException("Job [" + jb.getId() + "] configuration " +_                                    "exists in both clusterstate and index"))__                            return__                        }_                    }__                    _                    List<Job> jobs = new ArrayList<>()__                    for (Job.Builder jb : jobBuilders) {_                        jobs.add(jb.build())__                    }__                    jobs.addAll(clusterStateJobs.values())__                    Collections.sort(jobs, Comparator.comparing(Job::getId))__                    jobsListener.onResponse(new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD))__                },_                jobsListener::onFailure_        ))__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,param,jobs,listener,the,jobs,listener;public,void,expand,jobs,string,expression,boolean,allow,no,jobs,action,listener,query,page,job,jobs,listener,map,string,job,cluster,state,jobs,expand,jobs,from,cluster,state,expression,allow,no,jobs,cluster,service,state,job,config,provider,expand,jobs,expression,allow,no,jobs,false,action,listener,wrap,job,builders,for,job,builder,jb,job,builders,if,cluster,state,jobs,contains,key,jb,get,id,jobs,listener,on,failure,new,illegal,state,exception,job,jb,get,id,configuration,exists,in,both,clusterstate,and,index,return,list,job,jobs,new,array,list,for,job,builder,jb,job,builders,jobs,add,jb,build,jobs,add,all,cluster,state,jobs,values,collections,sort,jobs,comparator,comparing,job,get,id,jobs,listener,on,response,new,query,page,jobs,jobs,size,job,jobs,listener,on,failure
JobManager -> public void expandJobs(String expression, boolean allowNoJobs, ActionListener<QueryPage<Job>> jobsListener);1549273268;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@param jobsListener The jobs listener;public void expandJobs(String expression, boolean allowNoJobs, ActionListener<QueryPage<Job>> jobsListener) {_        Map<String, Job> clusterStateJobs = expandJobsFromClusterState(expression, allowNoJobs, clusterService.state())___        jobConfigProvider.expandJobs(expression, allowNoJobs, false, ActionListener.wrap(_                jobBuilders -> {_                    _                    for (Job.Builder jb : jobBuilders) {_                        if (clusterStateJobs.containsKey(jb.getId())) {_                            jobsListener.onFailure(new IllegalStateException("Job [" + jb.getId() + "] configuration " +_                                    "exists in both clusterstate and index"))__                            return__                        }_                    }__                    _                    List<Job> jobs = new ArrayList<>()__                    for (Job.Builder jb : jobBuilders) {_                        jobs.add(jb.build())__                    }__                    jobs.addAll(clusterStateJobs.values())__                    Collections.sort(jobs, Comparator.comparing(Job::getId))__                    jobsListener.onResponse(new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD))__                },_                jobsListener::onFailure_        ))__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,param,jobs,listener,the,jobs,listener;public,void,expand,jobs,string,expression,boolean,allow,no,jobs,action,listener,query,page,job,jobs,listener,map,string,job,cluster,state,jobs,expand,jobs,from,cluster,state,expression,allow,no,jobs,cluster,service,state,job,config,provider,expand,jobs,expression,allow,no,jobs,false,action,listener,wrap,job,builders,for,job,builder,jb,job,builders,if,cluster,state,jobs,contains,key,jb,get,id,jobs,listener,on,failure,new,illegal,state,exception,job,jb,get,id,configuration,exists,in,both,clusterstate,and,index,return,list,job,jobs,new,array,list,for,job,builder,jb,job,builders,jobs,add,jb,build,jobs,add,all,cluster,state,jobs,values,collections,sort,jobs,comparator,comparing,job,get,id,jobs,listener,on,response,new,query,page,jobs,jobs,size,job,jobs,listener,on,failure
JobManager -> public void expandJobs(String expression, boolean allowNoJobs, ActionListener<QueryPage<Job>> jobsListener);1549396415;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@param jobsListener The jobs listener;public void expandJobs(String expression, boolean allowNoJobs, ActionListener<QueryPage<Job>> jobsListener) {_        Map<String, Job> clusterStateJobs = expandJobsFromClusterState(expression, allowNoJobs, clusterService.state())___        jobConfigProvider.expandJobs(expression, allowNoJobs, false, ActionListener.wrap(_                jobBuilders -> {_                    _                    for (Job.Builder jb : jobBuilders) {_                        if (clusterStateJobs.containsKey(jb.getId())) {_                            jobsListener.onFailure(new IllegalStateException("Job [" + jb.getId() + "] configuration " +_                                    "exists in both clusterstate and index"))__                            return__                        }_                    }__                    _                    List<Job> jobs = new ArrayList<>()__                    for (Job.Builder jb : jobBuilders) {_                        jobs.add(jb.build())__                    }__                    jobs.addAll(clusterStateJobs.values())__                    Collections.sort(jobs, Comparator.comparing(Job::getId))__                    jobsListener.onResponse(new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD))__                },_                jobsListener::onFailure_        ))__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,param,jobs,listener,the,jobs,listener;public,void,expand,jobs,string,expression,boolean,allow,no,jobs,action,listener,query,page,job,jobs,listener,map,string,job,cluster,state,jobs,expand,jobs,from,cluster,state,expression,allow,no,jobs,cluster,service,state,job,config,provider,expand,jobs,expression,allow,no,jobs,false,action,listener,wrap,job,builders,for,job,builder,jb,job,builders,if,cluster,state,jobs,contains,key,jb,get,id,jobs,listener,on,failure,new,illegal,state,exception,job,jb,get,id,configuration,exists,in,both,clusterstate,and,index,return,list,job,jobs,new,array,list,for,job,builder,jb,job,builders,jobs,add,jb,build,jobs,add,all,cluster,state,jobs,values,collections,sort,jobs,comparator,comparing,job,get,id,jobs,listener,on,response,new,query,page,jobs,jobs,size,job,jobs,listener,on,failure
JobManager -> public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1524684173;Create a JobManager;public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobProvider = Objects.requireNonNull(jobProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,provider,job,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,provider,objects,require,non,null,job,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1526981569;Create a JobManager;public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobProvider = Objects.requireNonNull(jobProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,provider,job,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,provider,objects,require,non,null,job,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1527096592;Create a JobManager;public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobProvider = Objects.requireNonNull(jobProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,provider,job,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,provider,objects,require,non,null,job,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1528893677;Create a JobManager;public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobProvider = Objects.requireNonNull(jobProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,provider,job,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,provider,objects,require,non,null,job,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1529341607;Create a JobManager;public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobProvider = Objects.requireNonNull(jobProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,provider,job,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,provider,objects,require,non,null,job,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1529687475;Create a JobManager;public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobProvider = Objects.requireNonNull(jobProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,provider,job,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,provider,objects,require,non,null,job,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1531910483;Create a JobManager;public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobProvider = Objects.requireNonNull(jobProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,provider,job,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,provider,objects,require,non,null,job,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1532456624;Create a JobManager;public JobManager(Environment environment, Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobProvider = Objects.requireNonNull(jobProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,provider,job,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,provider,objects,require,non,null,job,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1524684173;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        MlMetadata mlMetadata = clusterState.getMetaData().custom(MLMetadataField.TYPE)__        Job job = (mlMetadata == null) ? null : mlMetadata.getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,ml,metadata,ml,metadata,cluster,state,get,meta,data,custom,mlmetadata,field,type,job,job,ml,metadata,null,null,ml,metadata,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1526981569;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1527096592;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1528893677;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1529341607;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1529687475;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1531910483;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1532456624;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1533230566;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1534362961;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1537806831;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1540583181;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1541008027;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1541092382;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState);1543343306;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param clusterState the cluster state_@return The {@link Job} matching the given {code jobId}_@throws ResourceNotFoundException if no job matches {@code jobId};public static Job getJobOrThrowIfUnknown(String jobId, ClusterState clusterState) {_        Job job = MlMetadata.getMlMetadata(clusterState).getJobs().get(jobId)__        if (job == null) {_            throw ExceptionsHelper.missingJobException(jobId)__        }_        return job__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,cluster,state,the,cluster,state,return,the,link,job,matching,the,given,code,job,id,throws,resource,not,found,exception,if,no,job,matches,code,job,id;public,static,job,get,job,or,throw,if,unknown,string,job,id,cluster,state,cluster,state,job,job,ml,metadata,get,ml,metadata,cluster,state,get,jobs,get,job,id,if,job,null,throw,exceptions,helper,missing,job,exception,job,id,return,job
JobManager -> public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,                       ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1533230566;Create a JobManager;public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,_                      ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,results,provider,job,results,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,results,provider,objects,require,non,null,job,results,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,                       ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1534362961;Create a JobManager;public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,_                      ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,results,provider,job,results,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,results,provider,objects,require,non,null,job,results,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,                       ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1537806831;Create a JobManager;public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,_                      ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,results,provider,job,results,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,results,provider,objects,require,non,null,job,results,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,                       ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1540583181;Create a JobManager;public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,_                      ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.environment = environment__        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,results,provider,job,results,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,environment,environment,this,job,results,provider,objects,require,non,null,job,results,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,                       ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1541008027;Create a JobManager;public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,_                      ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        super(settings)__        this.settings = settings__        this.environment = environment__        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,results,provider,job,results,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,super,settings,this,settings,settings,this,environment,environment,this,job,results,provider,objects,require,non,null,job,results,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,                       ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1541092382;Create a JobManager;public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,_                      ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        this.settings = settings__        this.environment = environment__        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,results,provider,job,results,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,this,settings,settings,this,environment,environment,this,job,results,provider,objects,require,non,null,job,results,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,                       ClusterService clusterService, Auditor auditor,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1543343306;Create a JobManager;public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,_                      ClusterService clusterService, Auditor auditor,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        this.environment = environment__        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.updateJobProcessNotifier = updateJobProcessNotifier___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,results,provider,job,results,provider,cluster,service,cluster,service,auditor,auditor,client,client,update,job,process,notifier,update,job,process,notifier,this,environment,environment,this,job,results,provider,objects,require,non,null,job,results,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,update,job,process,notifier,update,job,process,notifier,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,                       ClusterService clusterService, Auditor auditor, ThreadPool threadPool,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1545155131;Create a JobManager;public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,_                      ClusterService clusterService, Auditor auditor, ThreadPool threadPool,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        this.environment = environment__        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.threadPool = Objects.requireNonNull(threadPool)__        this.updateJobProcessNotifier = updateJobProcessNotifier__        this.jobConfigProvider = new JobConfigProvider(client)__        this.migrationEligibilityCheck = new MlConfigMigrationEligibilityCheck(settings, clusterService)___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,results,provider,job,results,provider,cluster,service,cluster,service,auditor,auditor,thread,pool,thread,pool,client,client,update,job,process,notifier,update,job,process,notifier,this,environment,environment,this,job,results,provider,objects,require,non,null,job,results,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,thread,pool,objects,require,non,null,thread,pool,this,update,job,process,notifier,update,job,process,notifier,this,job,config,provider,new,job,config,provider,client,this,migration,eligibility,check,new,ml,config,migration,eligibility,check,settings,cluster,service,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,                       ClusterService clusterService, Auditor auditor, ThreadPool threadPool,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1547065535;Create a JobManager;public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,_                      ClusterService clusterService, Auditor auditor, ThreadPool threadPool,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        this.environment = environment__        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.threadPool = Objects.requireNonNull(threadPool)__        this.updateJobProcessNotifier = updateJobProcessNotifier__        this.jobConfigProvider = new JobConfigProvider(client)__        this.migrationEligibilityCheck = new MlConfigMigrationEligibilityCheck(settings, clusterService)___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,results,provider,job,results,provider,cluster,service,cluster,service,auditor,auditor,thread,pool,thread,pool,client,client,update,job,process,notifier,update,job,process,notifier,this,environment,environment,this,job,results,provider,objects,require,non,null,job,results,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,thread,pool,objects,require,non,null,thread,pool,this,update,job,process,notifier,update,job,process,notifier,this,job,config,provider,new,job,config,provider,client,this,migration,eligibility,check,new,ml,config,migration,eligibility,check,settings,cluster,service,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,                       ClusterService clusterService, Auditor auditor, ThreadPool threadPool,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1549273268;Create a JobManager;public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,_                      ClusterService clusterService, Auditor auditor, ThreadPool threadPool,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        this.environment = environment__        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.threadPool = Objects.requireNonNull(threadPool)__        this.updateJobProcessNotifier = updateJobProcessNotifier__        this.jobConfigProvider = new JobConfigProvider(client)__        this.migrationEligibilityCheck = new MlConfigMigrationEligibilityCheck(settings, clusterService)___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,results,provider,job,results,provider,cluster,service,cluster,service,auditor,auditor,thread,pool,thread,pool,client,client,update,job,process,notifier,update,job,process,notifier,this,environment,environment,this,job,results,provider,objects,require,non,null,job,results,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,thread,pool,objects,require,non,null,thread,pool,this,update,job,process,notifier,update,job,process,notifier,this,job,config,provider,new,job,config,provider,client,this,migration,eligibility,check,new,ml,config,migration,eligibility,check,settings,cluster,service,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,                       ClusterService clusterService, Auditor auditor, ThreadPool threadPool,                       Client client, UpdateJobProcessNotifier updateJobProcessNotifier);1549396415;Create a JobManager;public JobManager(Environment environment, Settings settings, JobResultsProvider jobResultsProvider,_                      ClusterService clusterService, Auditor auditor, ThreadPool threadPool,_                      Client client, UpdateJobProcessNotifier updateJobProcessNotifier) {_        this.environment = environment__        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider)__        this.clusterService = Objects.requireNonNull(clusterService)__        this.auditor = Objects.requireNonNull(auditor)__        this.client = Objects.requireNonNull(client)__        this.threadPool = Objects.requireNonNull(threadPool)__        this.updateJobProcessNotifier = updateJobProcessNotifier__        this.jobConfigProvider = new JobConfigProvider(client)__        this.migrationEligibilityCheck = new MlConfigMigrationEligibilityCheck(settings, clusterService)___        maxModelMemoryLimit = MachineLearningField.MAX_MODEL_MEMORY_LIMIT.get(settings)__        clusterService.getClusterSettings()_                .addSettingsUpdateConsumer(MachineLearningField.MAX_MODEL_MEMORY_LIMIT, this::setMaxModelMemoryLimit)__    };create,a,job,manager;public,job,manager,environment,environment,settings,settings,job,results,provider,job,results,provider,cluster,service,cluster,service,auditor,auditor,thread,pool,thread,pool,client,client,update,job,process,notifier,update,job,process,notifier,this,environment,environment,this,job,results,provider,objects,require,non,null,job,results,provider,this,cluster,service,objects,require,non,null,cluster,service,this,auditor,objects,require,non,null,auditor,this,client,objects,require,non,null,client,this,thread,pool,objects,require,non,null,thread,pool,this,update,job,process,notifier,update,job,process,notifier,this,job,config,provider,new,job,config,provider,client,this,migration,eligibility,check,new,ml,config,migration,eligibility,check,settings,cluster,service,max,model,memory,limit,machine,learning,field,get,settings,cluster,service,get,cluster,settings,add,settings,update,consumer,machine,learning,field,this,set,max,model,memory,limit
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1524684173;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = clusterState.getMetaData().custom(MLMetadataField.TYPE)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,cluster,state,get,meta,data,custom,mlmetadata,field,type,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1526981569;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1527096592;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1528893677;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1529341607;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1529687475;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1531910483;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1532456624;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1533230566;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1534362961;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1537806831;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1540583181;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1541008027;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1541092382;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState);1543343306;Get the jobs that match the given {@code expression}._Note that when the {@code jobId} is {@link MetaData#ALL} all jobs are returned.__@param expression   the jobId or an expression matching jobIds_@param clusterState the cluster state_@param allowNoJobs  if {@code false}, an error is thrown when no job matches the {@code jobId}_@return A {@link QueryPage} containing the matching {@code Job}s;public QueryPage<Job> expandJobs(String expression, boolean allowNoJobs, ClusterState clusterState) {_        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState)__        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState)__        List<Job> jobs = new ArrayList<>()__        for (String expandedJobId : expandedJobIds) {_            jobs.add(mlMetadata.getJobs().get(expandedJobId))__        }_        logger.debug("Returning jobs matching [" + expression + "]")__        return new QueryPage<>(jobs, jobs.size(), Job.RESULTS_FIELD)__    };get,the,jobs,that,match,the,given,code,expression,note,that,when,the,code,job,id,is,link,meta,data,all,all,jobs,are,returned,param,expression,the,job,id,or,an,expression,matching,job,ids,param,cluster,state,the,cluster,state,param,allow,no,jobs,if,code,false,an,error,is,thrown,when,no,job,matches,the,code,job,id,return,a,link,query,page,containing,the,matching,code,job,s;public,query,page,job,expand,jobs,string,expression,boolean,allow,no,jobs,cluster,state,cluster,state,set,string,expanded,job,ids,expand,job,ids,expression,allow,no,jobs,cluster,state,ml,metadata,ml,metadata,ml,metadata,get,ml,metadata,cluster,state,list,job,jobs,new,array,list,for,string,expanded,job,id,expanded,job,ids,jobs,add,ml,metadata,get,jobs,get,expanded,job,id,logger,debug,returning,jobs,matching,expression,return,new,query,page,jobs,jobs,size,job
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1531910483;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1532456624;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1533230566;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1534362961;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1537806831;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1540583181;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1541008027;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1541092382;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1543343306;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1545155131;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1547065535;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1549273268;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)         throws IOException;1549396415;Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)._This validation has to be done server-side_ it cannot be done in a client as that won't have loaded the_appropriate analysis modules/plugins._The overall structure can be validated at parse time, but the exact names need to be checked separately,_as plugins that provide the functionality can be installed/uninstalled.;static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment)_        throws IOException {_        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig()__        if (categorizationAnalyzerConfig != null) {_            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),_                analysisRegistry, environment)__        }_    };validate,the,char,filter,tokenizer,token,filter,names,used,in,the,categorization,analyzer,config,if,any,this,validation,has,to,be,done,server,side,it,cannot,be,done,in,a,client,as,that,won,t,have,loaded,the,appropriate,analysis,modules,plugins,the,overall,structure,can,be,validated,at,parse,time,but,the,exact,names,need,to,be,checked,separately,as,plugins,that,provide,the,functionality,can,be,installed,uninstalled;static,void,validate,categorization,analyzer,job,builder,job,builder,analysis,registry,analysis,registry,environment,environment,throws,ioexception,categorization,analyzer,config,categorization,analyzer,config,job,builder,get,analysis,config,get,categorization,analyzer,config,if,categorization,analyzer,config,null,categorization,analyzer,verify,config,builder,new,categorization,analyzer,config,builder,categorization,analyzer,config,analysis,registry,environment
JobManager -> public void getJob(String jobId, ActionListener<Job> jobListener);1545155131;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param jobListener the Job listener. If no job matches {@code jobId}_a ResourceNotFoundException is returned;public void getJob(String jobId, ActionListener<Job> jobListener) {_        jobConfigProvider.getJob(jobId, ActionListener.wrap(_                r -> jobListener.onResponse(r.build()), _                e -> {_                    if (e instanceof ResourceNotFoundException) {_                        _                        getJobFromClusterState(jobId, jobListener)__                    } else {_                        jobListener.onFailure(e)__                    }_                }_        ))__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,job,listener,the,job,listener,if,no,job,matches,code,job,id,a,resource,not,found,exception,is,returned;public,void,get,job,string,job,id,action,listener,job,job,listener,job,config,provider,get,job,job,id,action,listener,wrap,r,job,listener,on,response,r,build,e,if,e,instanceof,resource,not,found,exception,get,job,from,cluster,state,job,id,job,listener,else,job,listener,on,failure,e
JobManager -> public void getJob(String jobId, ActionListener<Job> jobListener);1547065535;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param jobListener the Job listener. If no job matches {@code jobId}_a ResourceNotFoundException is returned;public void getJob(String jobId, ActionListener<Job> jobListener) {_        jobConfigProvider.getJob(jobId, ActionListener.wrap(_                r -> jobListener.onResponse(r.build()), _                e -> {_                    if (e instanceof ResourceNotFoundException) {_                        _                        getJobFromClusterState(jobId, jobListener)__                    } else {_                        jobListener.onFailure(e)__                    }_                }_        ))__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,job,listener,the,job,listener,if,no,job,matches,code,job,id,a,resource,not,found,exception,is,returned;public,void,get,job,string,job,id,action,listener,job,job,listener,job,config,provider,get,job,job,id,action,listener,wrap,r,job,listener,on,response,r,build,e,if,e,instanceof,resource,not,found,exception,get,job,from,cluster,state,job,id,job,listener,else,job,listener,on,failure,e
JobManager -> public void getJob(String jobId, ActionListener<Job> jobListener);1549273268;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param jobListener the Job listener. If no job matches {@code jobId}_a ResourceNotFoundException is returned;public void getJob(String jobId, ActionListener<Job> jobListener) {_        jobConfigProvider.getJob(jobId, ActionListener.wrap(_                r -> jobListener.onResponse(r.build()), _                e -> {_                    if (e instanceof ResourceNotFoundException) {_                        _                        getJobFromClusterState(jobId, jobListener)__                    } else {_                        jobListener.onFailure(e)__                    }_                }_        ))__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,job,listener,the,job,listener,if,no,job,matches,code,job,id,a,resource,not,found,exception,is,returned;public,void,get,job,string,job,id,action,listener,job,job,listener,job,config,provider,get,job,job,id,action,listener,wrap,r,job,listener,on,response,r,build,e,if,e,instanceof,resource,not,found,exception,get,job,from,cluster,state,job,id,job,listener,else,job,listener,on,failure,e
JobManager -> public void getJob(String jobId, ActionListener<Job> jobListener);1549396415;Gets the job that matches the given {@code jobId}.__@param jobId the jobId_@param jobListener the Job listener. If no job matches {@code jobId}_a ResourceNotFoundException is returned;public void getJob(String jobId, ActionListener<Job> jobListener) {_        jobConfigProvider.getJob(jobId, ActionListener.wrap(_                r -> jobListener.onResponse(r.build()), _                e -> {_                    if (e instanceof ResourceNotFoundException) {_                        _                        getJobFromClusterState(jobId, jobListener)__                    } else {_                        jobListener.onFailure(e)__                    }_                }_        ))__    };gets,the,job,that,matches,the,given,code,job,id,param,job,id,the,job,id,param,job,listener,the,job,listener,if,no,job,matches,code,job,id,a,resource,not,found,exception,is,returned;public,void,get,job,string,job,id,action,listener,job,job,listener,job,config,provider,get,job,job,id,action,listener,wrap,r,job,listener,on,response,r,build,e,if,e,instanceof,resource,not,found,exception,get,job,from,cluster,state,job,id,job,listener,else,job,listener,on,failure,e
JobManager -> private void getJobFromClusterState(String jobId, ActionListener<Job> jobListener);1545155131;Read a job from the cluster state._The job is returned on the same thread even though a listener is used.__@param jobId the jobId_@param jobListener the Job listener. If no job matches {@code jobId}_a ResourceNotFoundException is returned;private void getJobFromClusterState(String jobId, ActionListener<Job> jobListener) {_        Job job = MlMetadata.getMlMetadata(clusterService.state()).getJobs().get(jobId)__        if (job == null) {_            jobListener.onFailure(ExceptionsHelper.missingJobException(jobId))__        } else {_            jobListener.onResponse(job)__        }_    };read,a,job,from,the,cluster,state,the,job,is,returned,on,the,same,thread,even,though,a,listener,is,used,param,job,id,the,job,id,param,job,listener,the,job,listener,if,no,job,matches,code,job,id,a,resource,not,found,exception,is,returned;private,void,get,job,from,cluster,state,string,job,id,action,listener,job,job,listener,job,job,ml,metadata,get,ml,metadata,cluster,service,state,get,jobs,get,job,id,if,job,null,job,listener,on,failure,exceptions,helper,missing,job,exception,job,id,else,job,listener,on,response,job
JobManager -> private void getJobFromClusterState(String jobId, ActionListener<Job> jobListener);1547065535;Read a job from the cluster state._The job is returned on the same thread even though a listener is used.__@param jobId the jobId_@param jobListener the Job listener. If no job matches {@code jobId}_a ResourceNotFoundException is returned;private void getJobFromClusterState(String jobId, ActionListener<Job> jobListener) {_        Job job = MlMetadata.getMlMetadata(clusterService.state()).getJobs().get(jobId)__        if (job == null) {_            jobListener.onFailure(ExceptionsHelper.missingJobException(jobId))__        } else {_            jobListener.onResponse(job)__        }_    };read,a,job,from,the,cluster,state,the,job,is,returned,on,the,same,thread,even,though,a,listener,is,used,param,job,id,the,job,id,param,job,listener,the,job,listener,if,no,job,matches,code,job,id,a,resource,not,found,exception,is,returned;private,void,get,job,from,cluster,state,string,job,id,action,listener,job,job,listener,job,job,ml,metadata,get,ml,metadata,cluster,service,state,get,jobs,get,job,id,if,job,null,job,listener,on,failure,exceptions,helper,missing,job,exception,job,id,else,job,listener,on,response,job
JobManager -> private void getJobFromClusterState(String jobId, ActionListener<Job> jobListener);1549273268;Read a job from the cluster state._The job is returned on the same thread even though a listener is used.__@param jobId the jobId_@param jobListener the Job listener. If no job matches {@code jobId}_a ResourceNotFoundException is returned;private void getJobFromClusterState(String jobId, ActionListener<Job> jobListener) {_        Job job = MlMetadata.getMlMetadata(clusterService.state()).getJobs().get(jobId)__        if (job == null) {_            jobListener.onFailure(ExceptionsHelper.missingJobException(jobId))__        } else {_            jobListener.onResponse(job)__        }_    };read,a,job,from,the,cluster,state,the,job,is,returned,on,the,same,thread,even,though,a,listener,is,used,param,job,id,the,job,id,param,job,listener,the,job,listener,if,no,job,matches,code,job,id,a,resource,not,found,exception,is,returned;private,void,get,job,from,cluster,state,string,job,id,action,listener,job,job,listener,job,job,ml,metadata,get,ml,metadata,cluster,service,state,get,jobs,get,job,id,if,job,null,job,listener,on,failure,exceptions,helper,missing,job,exception,job,id,else,job,listener,on,response,job
JobManager -> private void getJobFromClusterState(String jobId, ActionListener<Job> jobListener);1549396415;Read a job from the cluster state._The job is returned on the same thread even though a listener is used.__@param jobId the jobId_@param jobListener the Job listener. If no job matches {@code jobId}_a ResourceNotFoundException is returned;private void getJobFromClusterState(String jobId, ActionListener<Job> jobListener) {_        Job job = MlMetadata.getMlMetadata(clusterService.state()).getJobs().get(jobId)__        if (job == null) {_            jobListener.onFailure(ExceptionsHelper.missingJobException(jobId))__        } else {_            jobListener.onResponse(job)__        }_    };read,a,job,from,the,cluster,state,the,job,is,returned,on,the,same,thread,even,though,a,listener,is,used,param,job,id,the,job,id,param,job,listener,the,job,listener,if,no,job,matches,code,job,id,a,resource,not,found,exception,is,returned;private,void,get,job,from,cluster,state,string,job,id,action,listener,job,job,listener,job,job,ml,metadata,get,ml,metadata,cluster,service,state,get,jobs,get,job,id,if,job,null,job,listener,on,failure,exceptions,helper,missing,job,exception,job,id,else,job,listener,on,response,job
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1524684173;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        request.getJobBuilder().validateCategorizationAnalyzer(analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())__        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            DEPRECATION_LOGGER.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        MlMetadata currentMlMetadata = state.metaData().custom(MLMetadataField.TYPE)__        if (currentMlMetadata != null && currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,request,get,job,builder,validate,categorization,analyzer,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,ml,metadata,current,ml,metadata,state,meta,data,custom,mlmetadata,field,type,if,current,ml,metadata,null,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1526981569;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        request.getJobBuilder().validateCategorizationAnalyzer(analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())__        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            DEPRECATION_LOGGER.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,request,get,job,builder,validate,categorization,analyzer,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1527096592;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        request.getJobBuilder().validateCategorizationAnalyzer(analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())__        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            DEPRECATION_LOGGER.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,request,get,job,builder,validate,categorization,analyzer,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1528893677;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        request.getJobBuilder().validateCategorizationAnalyzer(analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            DEPRECATION_LOGGER.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,request,get,job,builder,validate,categorization,analyzer,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1529341607;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        request.getJobBuilder().validateCategorizationAnalyzer(analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            DEPRECATION_LOGGER.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,request,get,job,builder,validate,categorization,analyzer,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1529687475;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        request.getJobBuilder().validateCategorizationAnalyzer(analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            DEPRECATION_LOGGER.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,request,get,job,builder,validate,categorization,analyzer,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1531910483;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            DEPRECATION_LOGGER.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1532456624;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            DEPRECATION_LOGGER.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1533230566;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            DEPRECATION_LOGGER.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobResultsProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobResultsProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,results,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,results,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1534362961;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            DEPRECATION_LOGGER.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobResultsProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobResultsProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,results,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,results,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1537806831;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            DEPRECATION_LOGGER.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobResultsProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobResultsProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,results,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,results,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1540583181;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            deprecationLogger.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobResultsProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobResultsProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecation,logger,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,results,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,results,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1541008027;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            deprecationLogger.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobResultsProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobResultsProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecation,logger,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,results,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,results,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1541092382;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            deprecationLogger.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobResultsProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobResultsProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecation,logger,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,results,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,results,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1543343306;Stores a job in the cluster state;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            deprecationLogger.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        XPackPlugin.checkReadyForXPackCustomMetadata(state)___        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                clusterService.submitStateUpdateTask("put-job-" + job.getId(),_                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {_                            @Override_                            protected PutJobAction.Response newResponse(boolean acknowledged) {_                                auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                                return new PutJobAction.Response(job)__                            }__                            @Override_                            public ClusterState execute(ClusterState currentState) {_                                return updateClusterState(job, false, currentState)__                            }_                        })__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<Boolean> checkForLeftOverDocs = ActionListener.wrap(_                response -> {_                    jobResultsProvider.createJobResultIndex(job, state, putJobListener)__                },_                actionListener::onFailure_        )___        jobResultsProvider.checkForLeftOverDocuments(job, checkForLeftOverDocs)__    };stores,a,job,in,the,cluster,state;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecation,logger,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,xpack,plugin,check,ready,for,xpack,custom,metadata,state,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,cluster,service,submit,state,update,task,put,job,job,get,id,new,acked,cluster,state,update,task,put,job,action,response,request,action,listener,override,protected,put,job,action,response,new,response,boolean,acknowledged,auditor,info,job,get,id,messages,get,message,messages,return,new,put,job,action,response,job,override,public,cluster,state,execute,cluster,state,current,state,return,update,cluster,state,job,false,current,state,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,boolean,check,for,left,over,docs,action,listener,wrap,response,job,results,provider,create,job,result,index,job,state,put,job,listener,action,listener,on,failure,job,results,provider,check,for,left,over,documents,job,check,for,left,over,docs
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1545155131;Stores the anomaly job configuration;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            deprecationLogger.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                jobConfigProvider.putJob(job, ActionListener.wrap(_                        response -> {_                            auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                            actionListener.onResponse(new PutJobAction.Response(job))__                        },_                        actionListener::onFailure_                ))__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<List<String>> checkForLeftOverDocs = ActionListener.wrap(_                matchedIds -> {_                    if (matchedIds.isEmpty()) {_                        jobResultsProvider.createJobResultIndex(job, state, putJobListener)__                    } else {_                        _                        _                        actionListener.onFailure(new ResourceAlreadyExistsException(_                                Messages.getMessage(Messages.JOB_AND_GROUP_NAMES_MUST_BE_UNIQUE, matchedIds.get(0))))__                    }_                },_                actionListener::onFailure_        )___        ActionListener<Boolean> checkNoJobsWithGroupId = ActionListener.wrap(_                groupExists -> {_                    if (groupExists) {_                        actionListener.onFailure(new ResourceAlreadyExistsException(_                                Messages.getMessage(Messages.JOB_AND_GROUP_NAMES_MUST_BE_UNIQUE, job.getId())))__                        return__                    }_                    if (job.getGroups().isEmpty()) {_                        checkForLeftOverDocs.onResponse(Collections.emptyList())__                    } else {_                        jobConfigProvider.jobIdMatches(job.getGroups(), checkForLeftOverDocs)__                    }_                },_                actionListener::onFailure_        )___        ActionListener<Boolean> checkNoGroupWithTheJobId = ActionListener.wrap(_                ok -> {_                    jobConfigProvider.groupExists(job.getId(), checkNoJobsWithGroupId)__                },_                actionListener::onFailure_        )___        jobConfigProvider.jobExists(job.getId(), false, ActionListener.wrap(_                jobExists -> {_                    if (jobExists) {_                        actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__                    } else {_                        jobResultsProvider.checkForLeftOverDocuments(job, checkNoGroupWithTheJobId)__                    }_                },_                actionListener::onFailure_        ))__    };stores,the,anomaly,job,configuration;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecation,logger,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,job,config,provider,put,job,job,action,listener,wrap,response,auditor,info,job,get,id,messages,get,message,messages,action,listener,on,response,new,put,job,action,response,job,action,listener,on,failure,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,list,string,check,for,left,over,docs,action,listener,wrap,matched,ids,if,matched,ids,is,empty,job,results,provider,create,job,result,index,job,state,put,job,listener,else,action,listener,on,failure,new,resource,already,exists,exception,messages,get,message,messages,matched,ids,get,0,action,listener,on,failure,action,listener,boolean,check,no,jobs,with,group,id,action,listener,wrap,group,exists,if,group,exists,action,listener,on,failure,new,resource,already,exists,exception,messages,get,message,messages,job,get,id,return,if,job,get,groups,is,empty,check,for,left,over,docs,on,response,collections,empty,list,else,job,config,provider,job,id,matches,job,get,groups,check,for,left,over,docs,action,listener,on,failure,action,listener,boolean,check,no,group,with,the,job,id,action,listener,wrap,ok,job,config,provider,group,exists,job,get,id,check,no,jobs,with,group,id,action,listener,on,failure,job,config,provider,job,exists,job,get,id,false,action,listener,wrap,job,exists,if,job,exists,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,else,job,results,provider,check,for,left,over,documents,job,check,no,group,with,the,job,id,action,listener,on,failure
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1547065535;Stores the anomaly job configuration;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            deprecationLogger.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                jobConfigProvider.putJob(job, ActionListener.wrap(_                        response -> {_                            auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                            actionListener.onResponse(new PutJobAction.Response(job))__                        },_                        actionListener::onFailure_                ))__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<List<String>> checkForLeftOverDocs = ActionListener.wrap(_                matchedIds -> {_                    if (matchedIds.isEmpty()) {_                        jobResultsProvider.createJobResultIndex(job, state, putJobListener)__                    } else {_                        _                        _                        actionListener.onFailure(new ResourceAlreadyExistsException(_                                Messages.getMessage(Messages.JOB_AND_GROUP_NAMES_MUST_BE_UNIQUE, matchedIds.get(0))))__                    }_                },_                actionListener::onFailure_        )___        ActionListener<Boolean> checkNoJobsWithGroupId = ActionListener.wrap(_                groupExists -> {_                    if (groupExists) {_                        actionListener.onFailure(new ResourceAlreadyExistsException(_                                Messages.getMessage(Messages.JOB_AND_GROUP_NAMES_MUST_BE_UNIQUE, job.getId())))__                        return__                    }_                    if (job.getGroups().isEmpty()) {_                        checkForLeftOverDocs.onResponse(Collections.emptyList())__                    } else {_                        jobConfigProvider.jobIdMatches(job.getGroups(), checkForLeftOverDocs)__                    }_                },_                actionListener::onFailure_        )___        ActionListener<Boolean> checkNoGroupWithTheJobId = ActionListener.wrap(_                ok -> {_                    jobConfigProvider.groupExists(job.getId(), checkNoJobsWithGroupId)__                },_                actionListener::onFailure_        )___        jobConfigProvider.jobExists(job.getId(), false, ActionListener.wrap(_                jobExists -> {_                    if (jobExists) {_                        actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__                    } else {_                        jobResultsProvider.checkForLeftOverDocuments(job, checkNoGroupWithTheJobId)__                    }_                },_                actionListener::onFailure_        ))__    };stores,the,anomaly,job,configuration;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecation,logger,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,job,config,provider,put,job,job,action,listener,wrap,response,auditor,info,job,get,id,messages,get,message,messages,action,listener,on,response,new,put,job,action,response,job,action,listener,on,failure,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,list,string,check,for,left,over,docs,action,listener,wrap,matched,ids,if,matched,ids,is,empty,job,results,provider,create,job,result,index,job,state,put,job,listener,else,action,listener,on,failure,new,resource,already,exists,exception,messages,get,message,messages,matched,ids,get,0,action,listener,on,failure,action,listener,boolean,check,no,jobs,with,group,id,action,listener,wrap,group,exists,if,group,exists,action,listener,on,failure,new,resource,already,exists,exception,messages,get,message,messages,job,get,id,return,if,job,get,groups,is,empty,check,for,left,over,docs,on,response,collections,empty,list,else,job,config,provider,job,id,matches,job,get,groups,check,for,left,over,docs,action,listener,on,failure,action,listener,boolean,check,no,group,with,the,job,id,action,listener,wrap,ok,job,config,provider,group,exists,job,get,id,check,no,jobs,with,group,id,action,listener,on,failure,job,config,provider,job,exists,job,get,id,false,action,listener,wrap,job,exists,if,job,exists,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,else,job,results,provider,check,for,left,over,documents,job,check,no,group,with,the,job,id,action,listener,on,failure
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1549273268;Stores the anomaly job configuration;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            deprecationLogger.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                jobConfigProvider.putJob(job, ActionListener.wrap(_                        response -> {_                            auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                            actionListener.onResponse(new PutJobAction.Response(job))__                        },_                        actionListener::onFailure_                ))__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<List<String>> checkForLeftOverDocs = ActionListener.wrap(_                matchedIds -> {_                    if (matchedIds.isEmpty()) {_                        jobResultsProvider.createJobResultIndex(job, state, putJobListener)__                    } else {_                        _                        _                        actionListener.onFailure(new ResourceAlreadyExistsException(_                                Messages.getMessage(Messages.JOB_AND_GROUP_NAMES_MUST_BE_UNIQUE, matchedIds.get(0))))__                    }_                },_                actionListener::onFailure_        )___        ActionListener<Boolean> checkNoJobsWithGroupId = ActionListener.wrap(_                groupExists -> {_                    if (groupExists) {_                        actionListener.onFailure(new ResourceAlreadyExistsException(_                                Messages.getMessage(Messages.JOB_AND_GROUP_NAMES_MUST_BE_UNIQUE, job.getId())))__                        return__                    }_                    if (job.getGroups().isEmpty()) {_                        checkForLeftOverDocs.onResponse(Collections.emptyList())__                    } else {_                        jobConfigProvider.jobIdMatches(job.getGroups(), checkForLeftOverDocs)__                    }_                },_                actionListener::onFailure_        )___        ActionListener<Boolean> checkNoGroupWithTheJobId = ActionListener.wrap(_                ok -> {_                    jobConfigProvider.groupExists(job.getId(), checkNoJobsWithGroupId)__                },_                actionListener::onFailure_        )___        jobConfigProvider.jobExists(job.getId(), false, ActionListener.wrap(_                jobExists -> {_                    if (jobExists) {_                        actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__                    } else {_                        jobResultsProvider.checkForLeftOverDocuments(job, checkNoGroupWithTheJobId)__                    }_                },_                actionListener::onFailure_        ))__    };stores,the,anomaly,job,configuration;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecation,logger,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,job,config,provider,put,job,job,action,listener,wrap,response,auditor,info,job,get,id,messages,get,message,messages,action,listener,on,response,new,put,job,action,response,job,action,listener,on,failure,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,list,string,check,for,left,over,docs,action,listener,wrap,matched,ids,if,matched,ids,is,empty,job,results,provider,create,job,result,index,job,state,put,job,listener,else,action,listener,on,failure,new,resource,already,exists,exception,messages,get,message,messages,matched,ids,get,0,action,listener,on,failure,action,listener,boolean,check,no,jobs,with,group,id,action,listener,wrap,group,exists,if,group,exists,action,listener,on,failure,new,resource,already,exists,exception,messages,get,message,messages,job,get,id,return,if,job,get,groups,is,empty,check,for,left,over,docs,on,response,collections,empty,list,else,job,config,provider,job,id,matches,job,get,groups,check,for,left,over,docs,action,listener,on,failure,action,listener,boolean,check,no,group,with,the,job,id,action,listener,wrap,ok,job,config,provider,group,exists,job,get,id,check,no,jobs,with,group,id,action,listener,on,failure,job,config,provider,job,exists,job,get,id,false,action,listener,wrap,job,exists,if,job,exists,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,else,job,results,provider,check,for,left,over,documents,job,check,no,group,with,the,job,id,action,listener,on,failure
JobManager -> public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,                        ActionListener<PutJobAction.Response> actionListener) throws IOException;1549396415;Stores the anomaly job configuration;public void putJob(PutJobAction.Request request, AnalysisRegistry analysisRegistry, ClusterState state,_                       ActionListener<PutJobAction.Response> actionListener) throws IOException {__        request.getJobBuilder().validateAnalysisLimitsAndSetDefaults(maxModelMemoryLimit)__        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment)___        Job job = request.getJobBuilder().build(new Date())___        if (job.getDataDescription() != null && job.getDataDescription().getFormat() == DataDescription.DataFormat.DELIMITED) {_            deprecationLogger.deprecated("Creating jobs with delimited data format is deprecated. Please use xcontent instead.")__        }__        _        MlMetadata currentMlMetadata = MlMetadata.getMlMetadata(state)__        if (currentMlMetadata.getJobs().containsKey(job.getId())) {_            actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__            return__        }__        ActionListener<Boolean> putJobListener = new ActionListener<Boolean>() {_            @Override_            public void onResponse(Boolean indicesCreated) {__                jobConfigProvider.putJob(job, ActionListener.wrap(_                        response -> {_                            auditor.info(job.getId(), Messages.getMessage(Messages.JOB_AUDIT_CREATED))__                            actionListener.onResponse(new PutJobAction.Response(job))__                        },_                        actionListener::onFailure_                ))__            }__            @Override_            public void onFailure(Exception e) {_                if (e instanceof IllegalArgumentException) {_                    _                    Matcher matcher = Pattern.compile("(?:mapper|Can't merge a non object mapping) \\[(.*)\\] (?:of different type, " +_                            "current_type \\[.*\\], merged_type|with an object mapping) \\[.*\\]").matcher(e.getMessage())__                    if (matcher.matches()) {_                        String msg = Messages.getMessage(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, matcher.group(1))__                        actionListener.onFailure(ExceptionsHelper.badRequestException(msg, e))__                        return__                    }_                }_                actionListener.onFailure(e)__            }_        }___        ActionListener<List<String>> checkForLeftOverDocs = ActionListener.wrap(_                matchedIds -> {_                    if (matchedIds.isEmpty()) {_                        jobResultsProvider.createJobResultIndex(job, state, putJobListener)__                    } else {_                        _                        _                        actionListener.onFailure(new ResourceAlreadyExistsException(_                                Messages.getMessage(Messages.JOB_AND_GROUP_NAMES_MUST_BE_UNIQUE, matchedIds.get(0))))__                    }_                },_                actionListener::onFailure_        )___        ActionListener<Boolean> checkNoJobsWithGroupId = ActionListener.wrap(_                groupExists -> {_                    if (groupExists) {_                        actionListener.onFailure(new ResourceAlreadyExistsException(_                                Messages.getMessage(Messages.JOB_AND_GROUP_NAMES_MUST_BE_UNIQUE, job.getId())))__                        return__                    }_                    if (job.getGroups().isEmpty()) {_                        checkForLeftOverDocs.onResponse(Collections.emptyList())__                    } else {_                        jobConfigProvider.jobIdMatches(job.getGroups(), checkForLeftOverDocs)__                    }_                },_                actionListener::onFailure_        )___        ActionListener<Boolean> checkNoGroupWithTheJobId = ActionListener.wrap(_                ok -> {_                    jobConfigProvider.groupExists(job.getId(), checkNoJobsWithGroupId)__                },_                actionListener::onFailure_        )___        jobConfigProvider.jobExists(job.getId(), false, ActionListener.wrap(_                jobExists -> {_                    if (jobExists) {_                        actionListener.onFailure(ExceptionsHelper.jobAlreadyExists(job.getId()))__                    } else {_                        jobResultsProvider.checkForLeftOverDocuments(job, checkNoGroupWithTheJobId)__                    }_                },_                actionListener::onFailure_        ))__    };stores,the,anomaly,job,configuration;public,void,put,job,put,job,action,request,request,analysis,registry,analysis,registry,cluster,state,state,action,listener,put,job,action,response,action,listener,throws,ioexception,request,get,job,builder,validate,analysis,limits,and,set,defaults,max,model,memory,limit,validate,categorization,analyzer,request,get,job,builder,analysis,registry,environment,job,job,request,get,job,builder,build,new,date,if,job,get,data,description,null,job,get,data,description,get,format,data,description,data,format,delimited,deprecation,logger,deprecated,creating,jobs,with,delimited,data,format,is,deprecated,please,use,xcontent,instead,ml,metadata,current,ml,metadata,ml,metadata,get,ml,metadata,state,if,current,ml,metadata,get,jobs,contains,key,job,get,id,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,return,action,listener,boolean,put,job,listener,new,action,listener,boolean,override,public,void,on,response,boolean,indices,created,job,config,provider,put,job,job,action,listener,wrap,response,auditor,info,job,get,id,messages,get,message,messages,action,listener,on,response,new,put,job,action,response,job,action,listener,on,failure,override,public,void,on,failure,exception,e,if,e,instanceof,illegal,argument,exception,matcher,matcher,pattern,compile,mapper,can,t,merge,a,non,object,mapping,of,different,type,with,an,object,mapping,matcher,e,get,message,if,matcher,matches,string,msg,messages,get,message,messages,matcher,group,1,action,listener,on,failure,exceptions,helper,bad,request,exception,msg,e,return,action,listener,on,failure,e,action,listener,list,string,check,for,left,over,docs,action,listener,wrap,matched,ids,if,matched,ids,is,empty,job,results,provider,create,job,result,index,job,state,put,job,listener,else,action,listener,on,failure,new,resource,already,exists,exception,messages,get,message,messages,matched,ids,get,0,action,listener,on,failure,action,listener,boolean,check,no,jobs,with,group,id,action,listener,wrap,group,exists,if,group,exists,action,listener,on,failure,new,resource,already,exists,exception,messages,get,message,messages,job,get,id,return,if,job,get,groups,is,empty,check,for,left,over,docs,on,response,collections,empty,list,else,job,config,provider,job,id,matches,job,get,groups,check,for,left,over,docs,action,listener,on,failure,action,listener,boolean,check,no,group,with,the,job,id,action,listener,wrap,ok,job,config,provider,group,exists,job,get,id,check,no,jobs,with,group,id,action,listener,on,failure,job,config,provider,job,exists,job,get,id,false,action,listener,wrap,job,exists,if,job,exists,action,listener,on,failure,exceptions,helper,job,already,exists,job,get,id,else,job,results,provider,check,for,left,over,documents,job,check,no,group,with,the,job,id,action,listener,on,failure
