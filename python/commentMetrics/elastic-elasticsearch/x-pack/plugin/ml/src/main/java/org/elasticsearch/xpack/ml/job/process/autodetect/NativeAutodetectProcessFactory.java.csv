commented;modifiers;parameterAmount;loc;comment;code
false;public;4;33;;@Override public AutodetectProcess createAutodetectProcess(Job job, AutodetectParams params, ExecutorService executorService, Consumer<String> onProcessCrash) {     List<Path> filesToDelete = new ArrayList<>().     ProcessPipes processPipes = new ProcessPipes(env, NAMED_PIPE_HELPER, AutodetectBuilder.AUTODETECT, job.getId(), true, false, true, true, params.modelSnapshot() != null, !AutodetectBuilder.DONT_PERSIST_MODEL_STATE_SETTING.get(settings)).     createNativeProcess(job, params, processPipes, filesToDelete).     boolean includeTokensField = MachineLearning.CATEGORIZATION_TOKENIZATION_IN_JAVA && job.getAnalysisConfig().getCategorizationFieldName() != null.     // The extra 1 is the control field     int numberOfFields = job.allInputFields().size() + (includeTokensField ? 1 : 0) + 1.     AutodetectStateProcessor stateProcessor = new AutodetectStateProcessor(client, job.getId()).     AutodetectResultsParser resultsParser = new AutodetectResultsParser().     NativeAutodetectProcess autodetect = new NativeAutodetectProcess(job.getId(), processPipes.getLogStream().get(), processPipes.getProcessInStream().get(), processPipes.getProcessOutStream().get(), processPipes.getRestoreStream().orElse(null), numberOfFields, filesToDelete, resultsParser, onProcessCrash).     try {         autodetect.start(executorService, stateProcessor, processPipes.getPersistStream().get()).         return autodetect.     } catch (EsRejectedExecutionException e) {         try {             IOUtils.close(autodetect).         } catch (IOException ioe) {             LOGGER.error("Can't close autodetect", ioe).         }         throw e.     } }
false;private;4;28;;private void createNativeProcess(Job job, AutodetectParams autodetectParams, ProcessPipes processPipes, List<Path> filesToDelete) {     try {         Settings updatedSettings = Settings.builder().put(settings).put(AutodetectBuilder.MAX_ANOMALY_RECORDS_SETTING_DYNAMIC.getKey(), clusterService.getClusterSettings().get(AutodetectBuilder.MAX_ANOMALY_RECORDS_SETTING_DYNAMIC)).build().         AutodetectBuilder autodetectBuilder = new AutodetectBuilder(job, filesToDelete, LOGGER, env, updatedSettings, nativeController, processPipes).referencedFilters(autodetectParams.filters()).scheduledEvents(autodetectParams.scheduledEvents()).         // else it is used to restore the quantiles         if (autodetectParams.quantiles() != null) {             autodetectBuilder.quantiles(autodetectParams.quantiles()).         }         autodetectBuilder.build().         processPipes.connectStreams(PROCESS_STARTUP_TIMEOUT).     } catch (IOException e) {         String msg = "Failed to launch autodetect for job " + job.getId().         LOGGER.error(msg).         throw ExceptionsHelper.serverError(msg, e).     } }
