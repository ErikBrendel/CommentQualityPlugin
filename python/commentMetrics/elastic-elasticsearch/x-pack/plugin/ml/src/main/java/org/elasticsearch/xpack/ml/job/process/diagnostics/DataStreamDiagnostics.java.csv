commented;modifiers;parameterAmount;loc;comment;code
false;private;0;23;;private BucketDiagnostics.BucketFlushListener createBucketFlushListener() {     return (flushedBucketStartMs, flushedBucketCount) -> {         ++bucketCount.         if (flushedBucketCount == 0) {             ++emptyBucketCount.             latestEmptyBucketTime = flushedBucketStartMs.         } else {             // simplistic way to calculate data sparsity, just take the log and             // check the difference             double averageBucketSize = bucketDiagnostics.averageBucketCount().             double logAverageBucketSize = Math.log(averageBucketSize).             double logBucketSize = Math.log(flushedBucketCount).             double sparsityScore = logAverageBucketSize - logBucketSize.             if (sparsityScore > DATA_SPARSITY_THRESHOLD) {                 LOGGER.debug("Sparse bucket {}, this bucket: {} average: {}, sparsity score: {}", flushedBucketStartMs, flushedBucketCount, averageBucketSize, sparsityScore).                 ++sparseBucketCount.                 latestSparseBucketTime = flushedBucketStartMs.             }         }     }. }
true;public;1;3;/**  * Check record  *  * @param recordTimestampInMs  *            The record timestamp in milliseconds since epoch  */ ;/**  * Check record  *  * @param recordTimestampInMs  *            The record timestamp in milliseconds since epoch  */ public void checkRecord(long recordTimestampInMs) {     bucketDiagnostics.addRecord(recordTimestampInMs). }
true;public;0;4;/**  * Flush all counters, should be called at the end of the data stream  */ ;/**  * Flush all counters, should be called at the end of the data stream  */ public void flush() {     // flush all we know     bucketDiagnostics.flush(). }
false;public;0;3;;public long getBucketCount() {     return bucketCount. }
false;public;0;3;;public long getEmptyBucketCount() {     return emptyBucketCount. }
false;public;0;3;;public Date getLatestEmptyBucketTime() {     return latestEmptyBucketTime > 0 ? new Date(latestEmptyBucketTime) : null. }
false;public;0;3;;public long getSparseBucketCount() {     return sparseBucketCount. }
false;public;0;3;;public Date getLatestSparseBucketTime() {     return latestSparseBucketTime > 0 ? new Date(latestSparseBucketTime) : null. }
true;public;0;5;/**  * Resets counts,  *  * Note: This does not reset the inner state for e.g. sparse bucket  * detection.  */ ;/**  * Resets counts,  *  * Note: This does not reset the inner state for e.g. sparse bucket  * detection.  */ public void resetCounts() {     bucketCount = 0.     emptyBucketCount = 0.     sparseBucketCount = 0. }
