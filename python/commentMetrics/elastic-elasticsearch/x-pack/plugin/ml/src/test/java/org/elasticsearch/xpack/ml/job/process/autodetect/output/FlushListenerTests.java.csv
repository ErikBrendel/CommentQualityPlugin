commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;public void testAcknowledgeFlush() throws Exception {     FlushListener listener = new FlushListener().     AtomicReference<FlushAcknowledgement> flushAcknowledgementHolder = new AtomicReference<>().     new Thread(() -> {         try {             FlushAcknowledgement flushAcknowledgement = listener.waitForFlush("_id", Duration.ofMillis(10000)).             flushAcknowledgementHolder.set(flushAcknowledgement).         } catch (InterruptedException _ex) {             Thread.currentThread().interrupt().         }     }).start().     assertBusy(() -> assertTrue(listener.awaitingFlushed.containsKey("_id"))).     assertNull(flushAcknowledgementHolder.get()).     FlushAcknowledgement flushAcknowledgement = new FlushAcknowledgement("_id", new Date(12345678L)).     listener.acknowledgeFlush(flushAcknowledgement).     assertBusy(() -> assertNotNull(flushAcknowledgementHolder.get())).     assertEquals(1, listener.awaitingFlushed.size()).     listener.clear("_id").     assertEquals(0, listener.awaitingFlushed.size()). }
false;public;0;30;;public void testClear() throws Exception {     FlushListener listener = new FlushListener().     int numWaits = 9.     List<AtomicReference<FlushAcknowledgement>> flushAcknowledgementHolders = new ArrayList<>(numWaits).     for (int i = 0. i < numWaits. i++) {         int id = i.         AtomicReference<FlushAcknowledgement> flushAcknowledgementHolder = new AtomicReference<>().         flushAcknowledgementHolders.add(flushAcknowledgementHolder).         new Thread(() -> {             try {                 FlushAcknowledgement flushAcknowledgement = listener.waitForFlush(String.valueOf(id), Duration.ofMillis(10000)).                 flushAcknowledgementHolder.set(flushAcknowledgement).             } catch (InterruptedException _ex) {                 Thread.currentThread().interrupt().             }         }).start().     }     assertBusy(() -> assertEquals(numWaits, listener.awaitingFlushed.size())).     assertThat(flushAcknowledgementHolders.stream().map(f -> f.get()).filter(f -> f != null).findAny().isPresent(), is(false)).     assertFalse(listener.onClear.hasRun()).     listener.clear().     for (AtomicReference<FlushAcknowledgement> f : flushAcknowledgementHolders) {         assertBusy(() -> assertNotNull(f.get())).     }     assertTrue(listener.awaitingFlushed.isEmpty()).     assertTrue(listener.onClear.hasRun()). }
