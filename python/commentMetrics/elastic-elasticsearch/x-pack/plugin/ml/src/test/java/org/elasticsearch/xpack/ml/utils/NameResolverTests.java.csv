commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testNoMatchingNames() {     ResourceNotFoundException e = expectThrows(ResourceNotFoundException.class, () -> newUnaliasedResolver().expand("foo", false)).     assertThat(e.getMessage(), equalTo("foo")). }
false;public;0;3;;public void testNoMatchingNames_GivenPatternAndAllowNoMatch() {     assertThat(newUnaliasedResolver().expand("foo*", true).isEmpty(), is(true)). }
false;public;0;5;;public void testNoMatchingNames_GivenPatternAndNotAllowNoMatch() {     ResourceNotFoundException e = expectThrows(ResourceNotFoundException.class, () -> newUnaliasedResolver().expand("foo*", false)).     assertThat(e.getMessage(), equalTo("foo*")). }
false;public;0;5;;public void testNoMatchingNames_GivenMatchingNameAndNonMatchingPatternAndNotAllowNoMatch() {     ResourceNotFoundException e = expectThrows(ResourceNotFoundException.class, () -> newUnaliasedResolver("foo").expand("foo, bar*", false)).     assertThat(e.getMessage(), equalTo("bar*")). }
false;public;0;19;;public void testUnaliased() {     NameResolver nameResolver = newUnaliasedResolver("foo-1", "foo-2", "bar-1", "bar-2").     assertThat(nameResolver.expand("foo-1", false), equalTo(newSortedSet("foo-1"))).     assertThat(nameResolver.expand("foo-2", false), equalTo(newSortedSet("foo-2"))).     assertThat(nameResolver.expand("bar-1", false), equalTo(newSortedSet("bar-1"))).     assertThat(nameResolver.expand("bar-2", false), equalTo(newSortedSet("bar-2"))).     assertThat(nameResolver.expand("foo-1,foo-2", false), equalTo(newSortedSet("foo-1", "foo-2"))).     assertThat(nameResolver.expand("foo-*", false), equalTo(newSortedSet("foo-1", "foo-2"))).     assertThat(nameResolver.expand("bar-*", false), equalTo(newSortedSet("bar-1", "bar-2"))).     assertThat(nameResolver.expand("*oo-*", false), equalTo(newSortedSet("foo-1", "foo-2"))).     assertThat(nameResolver.expand("*-1", false), equalTo(newSortedSet("foo-1", "bar-1"))).     assertThat(nameResolver.expand("*-2", false), equalTo(newSortedSet("foo-2", "bar-2"))).     assertThat(nameResolver.expand("*", false), equalTo(newSortedSet("foo-1", "foo-2", "bar-1", "bar-2"))).     assertThat(nameResolver.expand("_all", false), equalTo(newSortedSet("foo-1", "foo-2", "bar-1", "bar-2"))).     assertThat(nameResolver.expand("foo-1,foo-2", false), equalTo(newSortedSet("foo-1", "foo-2"))).     assertThat(nameResolver.expand("foo-1,bar-1", false), equalTo(newSortedSet("bar-1", "foo-1"))).     assertThat(nameResolver.expand("foo-*,bar-1", false), equalTo(newSortedSet("bar-1", "foo-1", "foo-2"))). }
false;public;0;35;;public void testAliased() {     Map<String, List<String>> namesAndAliasesMap = new HashMap<>().     namesAndAliasesMap.put("foo-1", Collections.singletonList("foo-1")).     namesAndAliasesMap.put("foo-2", Collections.singletonList("foo-2")).     namesAndAliasesMap.put("bar-1", Collections.singletonList("bar-1")).     namesAndAliasesMap.put("bar-2", Collections.singletonList("bar-2")).     namesAndAliasesMap.put("foo-group", Arrays.asList("foo-1", "foo-2")).     namesAndAliasesMap.put("bar-group", Arrays.asList("bar-1", "bar-2")).     NameResolver nameResolver = new TestAliasNameResolver(namesAndAliasesMap).     // First try same set of assertions as unaliases     assertThat(nameResolver.expand("foo-1", false), equalTo(newSortedSet("foo-1"))).     assertThat(nameResolver.expand("foo-2", false), equalTo(newSortedSet("foo-2"))).     assertThat(nameResolver.expand("bar-1", false), equalTo(newSortedSet("bar-1"))).     assertThat(nameResolver.expand("bar-2", false), equalTo(newSortedSet("bar-2"))).     assertThat(nameResolver.expand("foo-1,foo-2", false), equalTo(newSortedSet("foo-1", "foo-2"))).     assertThat(nameResolver.expand("foo-*", false), equalTo(newSortedSet("foo-1", "foo-2"))).     assertThat(nameResolver.expand("bar-*", false), equalTo(newSortedSet("bar-1", "bar-2"))).     assertThat(nameResolver.expand("*oo-*", false), equalTo(newSortedSet("foo-1", "foo-2"))).     assertThat(nameResolver.expand("*-1", false), equalTo(newSortedSet("foo-1", "bar-1"))).     assertThat(nameResolver.expand("*-2", false), equalTo(newSortedSet("foo-2", "bar-2"))).     assertThat(nameResolver.expand("*", false), equalTo(newSortedSet("foo-1", "foo-2", "bar-1", "bar-2"))).     assertThat(nameResolver.expand("_all", false), equalTo(newSortedSet("foo-1", "foo-2", "bar-1", "bar-2"))).     assertThat(nameResolver.expand("foo-1,foo-2", false), equalTo(newSortedSet("foo-1", "foo-2"))).     assertThat(nameResolver.expand("foo-1,bar-1", false), equalTo(newSortedSet("bar-1", "foo-1"))).     assertThat(nameResolver.expand("foo-*,bar-1", false), equalTo(newSortedSet("bar-1", "foo-1", "foo-2"))).     // No let's test the aliases     assertThat(nameResolver.expand("foo-group", false), equalTo(newSortedSet("foo-1", "foo-2"))).     assertThat(nameResolver.expand("bar-group", false), equalTo(newSortedSet("bar-1", "bar-2"))).     assertThat(nameResolver.expand("foo-group,bar-group", false), equalTo(newSortedSet("bar-1", "bar-2", "foo-1", "foo-2"))).     assertThat(nameResolver.expand("foo-group,foo-1", false), equalTo(newSortedSet("foo-1", "foo-2"))).     assertThat(nameResolver.expand("foo-group,bar-1", false), equalTo(newSortedSet("bar-1", "foo-1", "foo-2"))).     assertThat(nameResolver.expand("foo-group,bar-*", false), equalTo(newSortedSet("bar-1", "bar-2", "foo-1", "foo-2"))). }
false;private,static;1;3;;private static NameResolver newUnaliasedResolver(String... names) {     return NameResolver.newUnaliased(new HashSet<>(Arrays.asList(names)), notFoundExceptionSupplier()). }
false;private,static;1;7;;private static SortedSet<String> newSortedSet(String... names) {     SortedSet<String> result = new TreeSet<>().     for (String name : names) {         result.add(name).     }     return result. }
false;private,static;0;3;;private static Function<String, ResourceNotFoundException> notFoundExceptionSupplier() {     return s -> new ResourceNotFoundException(s). }
false;protected;0;4;;@Override protected Set<String> keys() {     return lookup.keySet(). }
false;protected;0;4;;@Override protected Set<String> nameSet() {     return lookup.values().stream().flatMap(List::stream).collect(Collectors.toSet()). }
false;protected;1;4;;@Override protected List<String> lookup(String key) {     return lookup.containsKey(key) ? lookup.get(key) : Collections.emptyList(). }
