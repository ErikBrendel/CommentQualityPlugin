commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testFromString() {     assertEquals(DataFormat.DELIMITED, DataFormat.forString("delineated")).     assertEquals(DataFormat.DELIMITED, DataFormat.forString("DELINEATED")).     assertEquals(DataFormat.DELIMITED, DataFormat.forString("delimited")).     assertEquals(DataFormat.DELIMITED, DataFormat.forString("DELIMITED")).     assertEquals(DataFormat.XCONTENT, DataFormat.forString("xcontent")).     assertEquals(DataFormat.XCONTENT, DataFormat.forString("XCONTENT")). }
false;public;0;4;;public void testToString() {     assertEquals("delimited", DataFormat.DELIMITED.toString()).     assertEquals("xcontent", DataFormat.XCONTENT.toString()). }
false;public;0;4;;public void testValidOrdinals() {     assertThat(DataFormat.XCONTENT.ordinal(), equalTo(0)).     assertThat(DataFormat.DELIMITED.ordinal(), equalTo(1)). }
false;public;0;15;;public void testwriteTo() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         DataFormat.XCONTENT.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(0)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         DataFormat.DELIMITED.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(1)).         }     } }
false;public;0;14;;public void testReadFrom() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(0).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(DataFormat.readFromStream(in), equalTo(DataFormat.XCONTENT)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(1).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(DataFormat.readFromStream(in), equalTo(DataFormat.DELIMITED)).         }     } }
false;public;0;11;;public void testInvalidReadFrom() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(randomIntBetween(4, Integer.MAX_VALUE)).         try (StreamInput in = out.bytes().streamInput()) {             DataFormat.readFromStream(in).             fail("Expected IOException").         } catch (IOException e) {             assertThat(e.getMessage(), containsString("Unknown DataFormat ordinal [")).         }     } }
