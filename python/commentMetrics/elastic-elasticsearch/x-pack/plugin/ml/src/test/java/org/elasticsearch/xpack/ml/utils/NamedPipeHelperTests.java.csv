commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testOpenForInputGivenPipeDoesNotExist() {     Environment env = TestEnvironment.newEnvironment(Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build()).     IOException ioe = ESTestCase.expectThrows(FileNotFoundException.class, () -> NAMED_PIPE_HELPER.openNamedPipeInputStream(NAMED_PIPE_HELPER.getDefaultPipeDirectoryPrefix(env) + "this pipe does not exist", Duration.ofSeconds(1))).     assertTrue(ioe.getMessage(), ioe.getMessage().contains("pipe does not exist") || ioe.getMessage().contains("The system cannot find the file specified")). }
false;public;0;11;;public void testOpenForOutputGivenPipeDoesNotExist() {     Environment env = TestEnvironment.newEnvironment(Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build()).     IOException ioe = ESTestCase.expectThrows(FileNotFoundException.class, () -> NAMED_PIPE_HELPER.openNamedPipeOutputStream(NAMED_PIPE_HELPER.getDefaultPipeDirectoryPrefix(env) + "this pipe does not exist", Duration.ofSeconds(1))).     assertTrue(ioe.getMessage(), ioe.getMessage().contains("No such file or directory") || ioe.getMessage().contains("The system cannot find the file specified")). }
false;public;0;12;;public void testOpenForInputGivenPipeIsRegularFile() throws IOException {     Environment env = TestEnvironment.newEnvironment(Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build()).     Path tempFile = Files.createTempFile(env.tmpFile(), "not a named pipe", null).     IOException ioe = ESTestCase.expectThrows(IOException.class, () -> NAMED_PIPE_HELPER.openNamedPipeInputStream(tempFile, Duration.ofSeconds(1))).     assertTrue(ioe.getMessage(), ioe.getMessage().contains("is not a named pipe")).     assertTrue(Files.deleteIfExists(tempFile)). }
false;public;0;13;;public void testOpenForOutputGivenPipeIsRegularFile() throws IOException {     Environment env = TestEnvironment.newEnvironment(Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build()).     Path tempFile = Files.createTempFile(env.tmpFile(), "not a named pipe", null).     IOException ioe = ESTestCase.expectThrows(IOException.class, () -> NAMED_PIPE_HELPER.openNamedPipeOutputStream(tempFile, Duration.ofSeconds(1))).     assertTrue(ioe.getMessage(), ioe.getMessage().contains("is not a named pipe") || ioe.getMessage().contains("The system cannot find the file specified")).     assertTrue(Files.deleteIfExists(tempFile)). }
