commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before @SuppressWarnings("unchecked") public void initialize() {     executorService = mock(ExecutorService.class).     when(executorService.submit(any(Runnable.class))).thenReturn(mock(Future.class)). }
false;public;0;20;;public void testProcessStartTime() throws Exception {     InputStream logStream = mock(InputStream.class).     when(logStream.read(new byte[1024])).thenReturn(-1).     InputStream outputStream = mock(InputStream.class).     when(outputStream.read(new byte[512])).thenReturn(-1).     try (NativeAutodetectProcess process = new NativeAutodetectProcess("foo", logStream, mock(OutputStream.class), outputStream, mock(OutputStream.class), NUMBER_FIELDS, null, new AutodetectResultsParser(), mock(Consumer.class))) {         process.start(executorService, mock(AutodetectStateProcessor.class), mock(InputStream.class)).         ZonedDateTime startTime = process.getProcessStartTime().         Thread.sleep(500).         ZonedDateTime now = ZonedDateTime.now().         assertTrue(now.isAfter(startTime)).         ZonedDateTime startPlus3 = startTime.plus(3, ChronoUnit.SECONDS).         assertTrue(now.isBefore(startPlus3)).     } }
false;public;0;34;;public void testWriteRecord() throws IOException {     InputStream logStream = mock(InputStream.class).     when(logStream.read(new byte[1024])).thenReturn(-1).     InputStream outputStream = mock(InputStream.class).     when(outputStream.read(new byte[512])).thenReturn(-1).     String[] record = { "r1", "r2", "r3", "r4", "r5" }.     ByteArrayOutputStream bos = new ByteArrayOutputStream(1024).     try (NativeAutodetectProcess process = new NativeAutodetectProcess("foo", logStream, bos, outputStream, mock(OutputStream.class), NUMBER_FIELDS, Collections.emptyList(), new AutodetectResultsParser(), mock(Consumer.class))) {         process.start(executorService, mock(AutodetectStateProcessor.class), mock(InputStream.class)).         process.writeRecord(record).         process.flushStream().         ByteBuffer bb = ByteBuffer.wrap(bos.toByteArray()).         // read header         int numFields = bb.getInt().         Assert.assertEquals(record.length, numFields).         for (int i = 0. i < numFields. i++) {             int recordSize = bb.getInt().             assertEquals(2, recordSize).             byte[] charBuff = new byte[recordSize].             for (int j = 0. j < recordSize. j++) {                 charBuff[j] = bb.get().             }             String value = new String(charBuff, StandardCharsets.UTF_8).             Assert.assertEquals(record[i], value).         }     } }
false;public;0;18;;public void testFlush() throws IOException {     InputStream logStream = mock(InputStream.class).     when(logStream.read(new byte[1024])).thenReturn(-1).     InputStream outputStream = mock(InputStream.class).     when(outputStream.read(new byte[512])).thenReturn(-1).     ByteArrayOutputStream bos = new ByteArrayOutputStream(AutodetectControlMsgWriter.FLUSH_SPACES_LENGTH + 1024).     try (NativeAutodetectProcess process = new NativeAutodetectProcess("foo", logStream, bos, outputStream, mock(OutputStream.class), NUMBER_FIELDS, Collections.emptyList(), new AutodetectResultsParser(), mock(Consumer.class))) {         process.start(executorService, mock(AutodetectStateProcessor.class), mock(InputStream.class)).         FlushJobParams params = FlushJobParams.builder().build().         process.flushJob(params).         ByteBuffer bb = ByteBuffer.wrap(bos.toByteArray()).         assertThat(bb.remaining(), is(greaterThan(AutodetectControlMsgWriter.FLUSH_SPACES_LENGTH))).     } }
false;public;0;4;;public void testWriteResetBucketsControlMessage() throws IOException {     DataLoadParams params = new DataLoadParams(TimeRange.builder().startTime("1").endTime("86400").build(), Optional.empty()).     testWriteMessage(p -> p.writeResetBucketsControlMessage(params), AutodetectControlMsgWriter.RESET_BUCKETS_MESSAGE_CODE). }
false;public;0;3;;public void testWriteUpdateConfigMessage() throws IOException {     testWriteMessage(p -> p.writeUpdateModelPlotMessage(new ModelPlotConfig()), AutodetectControlMsgWriter.UPDATE_MESSAGE_CODE). }
false;public;0;3;;public void testPersistJob() throws IOException {     testWriteMessage(p -> p.persistState(), AutodetectControlMsgWriter.BACKGROUND_PERSIST_MESSAGE_CODE). }
false;public;0;15;;public void testConsumeAndCloseOutputStream() throws IOException {     InputStream logStream = mock(InputStream.class).     when(logStream.read(new byte[1024])).thenReturn(-1).     OutputStream processInStream = mock(OutputStream.class).     String json = "some string of data".     ByteArrayInputStream processOutStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)).     try (NativeAutodetectProcess process = new NativeAutodetectProcess("foo", logStream, processInStream, processOutStream, mock(OutputStream.class), NUMBER_FIELDS, Collections.emptyList(), new AutodetectResultsParser(), mock(Consumer.class))) {         process.consumeAndCloseOutputStream().         assertThat(processOutStream.available(), equalTo(0)).     } }
false;private;2;19;;private void testWriteMessage(CheckedConsumer<NativeAutodetectProcess> writeFunction, String expectedMessageCode) throws IOException {     InputStream logStream = mock(InputStream.class).     when(logStream.read(new byte[1024])).thenReturn(-1).     InputStream outputStream = mock(InputStream.class).     when(outputStream.read(new byte[512])).thenReturn(-1).     ByteArrayOutputStream bos = new ByteArrayOutputStream(1024).     try (NativeAutodetectProcess process = new NativeAutodetectProcess("foo", logStream, bos, outputStream, mock(OutputStream.class), NUMBER_FIELDS, Collections.emptyList(), new AutodetectResultsParser(), mock(Consumer.class))) {         process.start(executorService, mock(AutodetectStateProcessor.class), mock(InputStream.class)).         writeFunction.accept(process).         process.writeUpdateModelPlotMessage(new ModelPlotConfig()).         process.flushStream().         String message = new String(bos.toByteArray(), StandardCharsets.UTF_8).         assertTrue(message.contains(expectedMessageCode)).     } }
false;;1;1;;void accept(T t) throws IOException.
