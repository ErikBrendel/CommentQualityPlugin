commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Before public void setUpMocks() {     executor = new Scheduler.SafeScheduledThreadPoolExecutor(1).     client = mock(Client.class).     threadPool = mock(ThreadPool.class).     when(client.threadPool()).thenReturn(threadPool).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)).     auditor = mock(Auditor.class).     renormalizer = mock(Renormalizer.class).     persister = mock(JobResultsPersister.class).     when(persister.persistModelSnapshot(any(), any())).thenReturn(new IndexResponse(new ShardId("ml", "uid", 0), "doc", "1", 0L, 0L, 0L, true)).     flushListener = mock(FlushListener.class).     processorUnderTest = new AutoDetectResultProcessor(client, auditor, JOB_ID, renormalizer, persister, new ModelSizeStats.Builder(JOB_ID).setTimestamp(new Date(BUCKET_SPAN_MS)).build(), flushListener). }
false;public;0;4;;@After public void cleanup() {     executor.shutdown(). }
false;public;0;15;;public void testProcess() throws TimeoutException {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     when(persister.bulkPersisterBuilder(JOB_ID)).thenReturn(bulkBuilder).     AutodetectResult autodetectResult = mock(AutodetectResult.class).     @SuppressWarnings("unchecked")     Iterator<AutodetectResult> iterator = mock(Iterator.class).     when(iterator.hasNext()).thenReturn(true).thenReturn(false).     when(iterator.next()).thenReturn(autodetectResult).     AutodetectProcess process = mock(AutodetectProcess.class).     when(process.readAutodetectResults()).thenReturn(iterator).     processorUnderTest.process(process).     processorUnderTest.awaitCompletion().     verify(renormalizer, times(1)).waitUntilIdle().     assertEquals(0, processorUnderTest.completionLatch.getCount()). }
false;public;0;17;;public void testProcessResult_bucket() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     when(persister.bulkPersisterBuilder(JOB_ID)).thenReturn(bulkBuilder).     when(bulkBuilder.persistBucket(any(Bucket.class))).thenReturn(bulkBuilder).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     Bucket bucket = mock(Bucket.class).     when(result.getBucket()).thenReturn(bucket).     processorUnderTest.processResult(context, result).     verify(bulkBuilder, times(1)).persistBucket(bucket).     verify(bulkBuilder, times(1)).executeRequest().     verify(persister, never()).deleteInterimResults(JOB_ID).     verifyNoMoreInteractions(persister). }
false;public;0;18;;public void testProcessResult_bucket_deleteInterimRequired() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     when(persister.bulkPersisterBuilder(JOB_ID)).thenReturn(bulkBuilder).     when(bulkBuilder.persistBucket(any(Bucket.class))).thenReturn(bulkBuilder).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = true.     AutodetectResult result = mock(AutodetectResult.class).     Bucket bucket = mock(Bucket.class).     when(result.getBucket()).thenReturn(bucket).     processorUnderTest.processResult(context, result).     verify(bulkBuilder, times(1)).persistBucket(bucket).     verify(bulkBuilder, times(1)).executeRequest().     verify(persister, times(1)).deleteInterimResults(JOB_ID).     verifyNoMoreInteractions(persister).     assertFalse(context.deleteInterimRequired). }
false;public;0;17;;public void testProcessResult_records() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     when(persister.bulkPersisterBuilder(JOB_ID)).thenReturn(bulkBuilder).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context("foo", bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     AnomalyRecord record1 = new AnomalyRecord("foo", new Date(123), 123).     AnomalyRecord record2 = new AnomalyRecord("foo", new Date(123), 123).     List<AnomalyRecord> records = Arrays.asList(record1, record2).     when(result.getRecords()).thenReturn(records).     processorUnderTest.processResult(context, result).     verify(bulkBuilder, times(1)).persistRecords(records).     verify(bulkBuilder, never()).executeRequest().     verifyNoMoreInteractions(persister). }
false;public;0;17;;public void testProcessResult_influencers() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     when(persister.bulkPersisterBuilder(JOB_ID)).thenReturn(bulkBuilder).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     Influencer influencer1 = new Influencer(JOB_ID, "infField", "infValue", new Date(123), 123).     Influencer influencer2 = new Influencer(JOB_ID, "infField2", "infValue2", new Date(123), 123).     List<Influencer> influencers = Arrays.asList(influencer1, influencer2).     when(result.getInfluencers()).thenReturn(influencers).     processorUnderTest.processResult(context, result).     verify(bulkBuilder, times(1)).persistInfluencers(influencers).     verify(bulkBuilder, never()).executeRequest().     verifyNoMoreInteractions(persister). }
false;public;0;15;;public void testProcessResult_categoryDefinition() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     when(persister.bulkPersisterBuilder(JOB_ID)).thenReturn(bulkBuilder).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     CategoryDefinition categoryDefinition = mock(CategoryDefinition.class).     when(result.getCategoryDefinition()).thenReturn(categoryDefinition).     processorUnderTest.processResult(context, result).     verify(bulkBuilder, never()).executeRequest().     verify(persister, times(1)).persistCategoryDefinition(categoryDefinition).     verifyNoMoreInteractions(persister). }
false;public;0;18;;public void testProcessResult_flushAcknowledgement() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     when(persister.bulkPersisterBuilder(JOB_ID)).thenReturn(bulkBuilder).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     FlushAcknowledgement flushAcknowledgement = mock(FlushAcknowledgement.class).     when(flushAcknowledgement.getId()).thenReturn(JOB_ID).     when(result.getFlushAcknowledgement()).thenReturn(flushAcknowledgement).     processorUnderTest.processResult(context, result).     verify(flushListener, times(1)).acknowledgeFlush(flushAcknowledgement).     verify(persister, times(1)).commitResultWrites(JOB_ID).     verify(bulkBuilder, times(1)).executeRequest().     verifyNoMoreInteractions(persister).     assertTrue(context.deleteInterimRequired). }
false;public;0;22;;public void testProcessResult_flushAcknowledgementMustBeProcessedLast() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     FlushAcknowledgement flushAcknowledgement = mock(FlushAcknowledgement.class).     when(flushAcknowledgement.getId()).thenReturn(JOB_ID).     when(result.getFlushAcknowledgement()).thenReturn(flushAcknowledgement).     CategoryDefinition categoryDefinition = mock(CategoryDefinition.class).     when(result.getCategoryDefinition()).thenReturn(categoryDefinition).     InOrder inOrder = inOrder(persister, bulkBuilder, flushListener).     processorUnderTest.processResult(context, result).     inOrder.verify(persister, times(1)).persistCategoryDefinition(categoryDefinition).     inOrder.verify(bulkBuilder, times(1)).executeRequest().     inOrder.verify(persister, times(1)).commitResultWrites(JOB_ID).     inOrder.verify(flushListener, times(1)).acknowledgeFlush(flushAcknowledgement).     verifyNoMoreInteractions(persister).     assertTrue(context.deleteInterimRequired). }
false;public;0;13;;public void testProcessResult_modelPlot() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     ModelPlot modelPlot = mock(ModelPlot.class).     when(result.getModelPlot()).thenReturn(modelPlot).     processorUnderTest.processResult(context, result).     verify(bulkBuilder, times(1)).persistModelPlot(modelPlot).     verifyNoMoreInteractions(persister). }
false;public;0;14;;public void testProcessResult_modelSizeStats() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     ModelSizeStats modelSizeStats = mock(ModelSizeStats.class).     when(result.getModelSizeStats()).thenReturn(modelSizeStats).     processorUnderTest.processResult(context, result).     verify(persister, times(1)).persistModelSizeStats(modelSizeStats).     verifyNoMoreInteractions(persister).     assertEquals(modelSizeStats, processorUnderTest.modelSizeStats()). }
false;public;0;37;;public void testProcessResult_modelSizeStatsWithMemoryStatusChanges() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     setupScheduleDelayTime(TimeValue.timeValueSeconds(5)).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     // First one with soft_limit     ModelSizeStats modelSizeStats = new ModelSizeStats.Builder(JOB_ID).setMemoryStatus(ModelSizeStats.MemoryStatus.SOFT_LIMIT).build().     when(result.getModelSizeStats()).thenReturn(modelSizeStats).     processorUnderTest.processResult(context, result).     // Another with soft_limit     modelSizeStats = new ModelSizeStats.Builder(JOB_ID).setMemoryStatus(ModelSizeStats.MemoryStatus.SOFT_LIMIT).build().     when(result.getModelSizeStats()).thenReturn(modelSizeStats).     processorUnderTest.processResult(context, result).     // Now with hard_limit     modelSizeStats = new ModelSizeStats.Builder(JOB_ID).setMemoryStatus(ModelSizeStats.MemoryStatus.HARD_LIMIT).setModelBytes(new ByteSizeValue(512, ByteSizeUnit.MB).getBytes()).build().     when(result.getModelSizeStats()).thenReturn(modelSizeStats).     processorUnderTest.processResult(context, result).     // And another with hard_limit     modelSizeStats = new ModelSizeStats.Builder(JOB_ID).setMemoryStatus(ModelSizeStats.MemoryStatus.HARD_LIMIT).build().     when(result.getModelSizeStats()).thenReturn(modelSizeStats).     processorUnderTest.processResult(context, result).     // We should have only fired to notifications: one for soft_limit and one for hard_limit     verify(auditor).warning(JOB_ID, Messages.getMessage(Messages.JOB_AUDIT_MEMORY_STATUS_SOFT_LIMIT)).     verify(auditor).error(JOB_ID, Messages.getMessage(Messages.JOB_AUDIT_MEMORY_STATUS_HARD_LIMIT, "512mb")).     verifyNoMoreInteractions(auditor). }
false;public;0;21;;public void testProcessResult_modelSnapshot() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     ModelSnapshot modelSnapshot = new ModelSnapshot.Builder(JOB_ID).setSnapshotId("a_snapshot_id").setMinVersion(Version.CURRENT).build().     when(result.getModelSnapshot()).thenReturn(modelSnapshot).     processorUnderTest.processResult(context, result).     verify(persister, times(1)).persistModelSnapshot(modelSnapshot, WriteRequest.RefreshPolicy.IMMEDIATE).     UpdateJobAction.Request expectedJobUpdateRequest = UpdateJobAction.Request.internal(JOB_ID, new JobUpdate.Builder(JOB_ID).setModelSnapshotId("a_snapshot_id").build()).     verify(client).execute(same(UpdateJobAction.INSTANCE), eq(expectedJobUpdateRequest), any()).     verifyNoMoreInteractions(persister). }
false;public;0;19;;public void testProcessResult_quantiles_givenRenormalizationIsEnabled() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     Quantiles quantiles = mock(Quantiles.class).     when(result.getQuantiles()).thenReturn(quantiles).     when(renormalizer.isEnabled()).thenReturn(true).     processorUnderTest.processResult(context, result).     verify(persister, times(1)).persistQuantiles(quantiles).     verify(bulkBuilder).executeRequest().     verify(persister).commitResultWrites(JOB_ID).     verify(renormalizer, times(1)).isEnabled().     verify(renormalizer, times(1)).renormalize(quantiles).     verifyNoMoreInteractions(persister).     verifyNoMoreInteractions(renormalizer). }
false;public;0;17;;public void testProcessResult_quantiles_givenRenormalizationIsDisabled() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     AutoDetectResultProcessor.Context context = new AutoDetectResultProcessor.Context(JOB_ID, bulkBuilder).     context.deleteInterimRequired = false.     AutodetectResult result = mock(AutodetectResult.class).     Quantiles quantiles = mock(Quantiles.class).     when(result.getQuantiles()).thenReturn(quantiles).     when(renormalizer.isEnabled()).thenReturn(false).     processorUnderTest.processResult(context, result).     verify(persister, times(1)).persistQuantiles(quantiles).     verify(bulkBuilder).executeRequest().     verify(renormalizer, times(1)).isEnabled().     verifyNoMoreInteractions(persister).     verifyNoMoreInteractions(renormalizer). }
false;public;0;16;;public void testAwaitCompletion() throws TimeoutException {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     when(persister.bulkPersisterBuilder(JOB_ID)).thenReturn(bulkBuilder).     AutodetectResult autodetectResult = mock(AutodetectResult.class).     @SuppressWarnings("unchecked")     Iterator<AutodetectResult> iterator = mock(Iterator.class).     when(iterator.hasNext()).thenReturn(true).thenReturn(false).     when(iterator.next()).thenReturn(autodetectResult).     AutodetectProcess process = mock(AutodetectProcess.class).     when(process.readAutodetectResults()).thenReturn(iterator).     processorUnderTest.process(process).     processorUnderTest.awaitCompletion().     assertEquals(0, processorUnderTest.completionLatch.getCount()).     assertEquals(1, processorUnderTest.updateModelSnapshotSemaphore.availablePermits()). }
false;public;0;21;;public void testPersisterThrowingDoesntBlockProcessing() {     JobResultsPersister.Builder bulkBuilder = mock(JobResultsPersister.Builder.class).     when(persister.bulkPersisterBuilder(JOB_ID)).thenReturn(bulkBuilder).     AutodetectResult autodetectResult = mock(AutodetectResult.class).     ModelSnapshot modelSnapshot = mock(ModelSnapshot.class).     when(autodetectResult.getModelSnapshot()).thenReturn(modelSnapshot).     @SuppressWarnings("unchecked")     Iterator<AutodetectResult> iterator = mock(Iterator.class).     when(iterator.hasNext()).thenReturn(true).thenReturn(true).thenReturn(false).     when(iterator.next()).thenReturn(autodetectResult).     AutodetectProcess process = mock(AutodetectProcess.class).     when(process.isProcessAlive()).thenReturn(true).     when(process.isProcessAliveAfterWaiting()).thenReturn(true).     when(process.readAutodetectResults()).thenReturn(iterator).     doThrow(new ElasticsearchException("this test throws")).when(persister).persistModelSnapshot(any(), any()).     processorUnderTest.process(process).     verify(persister, times(2)).persistModelSnapshot(any(), eq(WriteRequest.RefreshPolicy.IMMEDIATE)). }
false;public;0;16;;public void testParsingErrorSetsFailed() throws InterruptedException {     @SuppressWarnings("unchecked")     Iterator<AutodetectResult> iterator = mock(Iterator.class).     when(iterator.hasNext()).thenThrow(new ElasticsearchParseException("this test throws")).     AutodetectProcess process = mock(AutodetectProcess.class).     when(process.readAutodetectResults()).thenReturn(iterator).     assertFalse(processorUnderTest.isFailed()).     processorUnderTest.process(process).     assertTrue(processorUnderTest.isFailed()).     // Wait for flush should return immediately     FlushAcknowledgement flushAcknowledgement = processorUnderTest.waitForFlushAcknowledgement("foo", Duration.of(300, ChronoUnit.SECONDS)).     assertThat(flushAcknowledgement, is(nullValue())). }
false;public;0;22;;public void testKill() throws TimeoutException {     AutodetectResult autodetectResult = mock(AutodetectResult.class).     @SuppressWarnings("unchecked")     Iterator<AutodetectResult> iterator = mock(Iterator.class).     when(iterator.hasNext()).thenReturn(true).thenReturn(false).     when(iterator.next()).thenReturn(autodetectResult).     AutodetectProcess process = mock(AutodetectProcess.class).     when(process.readAutodetectResults()).thenReturn(iterator).     processorUnderTest.setProcessKilled().     processorUnderTest.process(process).     processorUnderTest.awaitCompletion().     assertEquals(0, processorUnderTest.completionLatch.getCount()).     assertEquals(1, processorUnderTest.updateModelSnapshotSemaphore.availablePermits()).     verify(persister, times(1)).commitResultWrites(JOB_ID).     verify(persister, times(1)).commitStateWrites(JOB_ID).     verify(renormalizer, never()).renormalize(any()).     verify(renormalizer).shutdown().     verify(renormalizer, times(1)).waitUntilIdle().     verify(flushListener, times(1)).clear(). }
false;private;1;4;;private void setupScheduleDelayTime(TimeValue delay) {     when(threadPool.schedule(any(Runnable.class), any(TimeValue.class), anyString())).thenAnswer(i -> executor.schedule((Runnable) i.getArguments()[0], delay.nanos(), TimeUnit.NANOSECONDS)). }
