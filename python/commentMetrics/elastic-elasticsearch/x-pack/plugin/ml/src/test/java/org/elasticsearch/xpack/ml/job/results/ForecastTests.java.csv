commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Forecast createTestInstance() {     return createTestInstance("ForecastTest"). }
false;public;1;32;;public Forecast createTestInstance(String jobId) {     Forecast forecast = new Forecast(jobId, randomAlphaOfLength(20), randomDate(), randomNonNegativeLong(), randomInt()).     if (randomBoolean()) {         forecast.setByFieldName(randomAlphaOfLengthBetween(1, 20)).     }     if (randomBoolean()) {         forecast.setByFieldValue(randomAlphaOfLengthBetween(1, 20)).     }     if (randomBoolean()) {         forecast.setPartitionFieldName(randomAlphaOfLengthBetween(1, 20)).     }     if (randomBoolean()) {         forecast.setPartitionFieldValue(randomAlphaOfLengthBetween(1, 20)).     }     if (randomBoolean()) {         forecast.setModelFeature(randomAlphaOfLengthBetween(1, 20)).     }     if (randomBoolean()) {         forecast.setForecastLower(randomDouble()).     }     if (randomBoolean()) {         forecast.setForecastUpper(randomDouble()).     }     if (randomBoolean()) {         forecast.setForecastPrediction(randomDouble()).     }     return forecast. }
false;protected;0;4;;@Override protected Reader<Forecast> instanceReader() {     return Forecast::new. }
false;protected;1;4;;@Override protected Forecast doParseInstance(XContentParser parser) {     return Forecast.STRICT_PARSER.apply(parser, null). }
false;public;0;23;;public void testId() {     Forecast forecast = new Forecast("job-foo", "222", new Date(100L), 60L, 2).     String byFieldValue = null.     String partitionFieldValue = null.     int valuesHash = Objects.hash(byFieldValue, partitionFieldValue).     assertEquals("job-foo_model_forecast_222_100_60_2_" + valuesHash + "_0", forecast.getId()).     int length = 0.     if (randomBoolean()) {         byFieldValue = randomAlphaOfLength(10).         length += byFieldValue.length().         forecast.setByFieldValue(byFieldValue).     }     if (randomBoolean()) {         partitionFieldValue = randomAlphaOfLength(10).         length += partitionFieldValue.length().         forecast.setPartitionFieldValue(partitionFieldValue).     }     valuesHash = Objects.hash(byFieldValue, partitionFieldValue).     assertEquals("job-foo_model_forecast_222_100_60_2_" + valuesHash + "_" + length, forecast.getId()). }
false;public;0;10;;public void testStrictParser() throws IOException {     String json = "{\"job_id\":\"job_1\", \"forecast_id\":\"forecast_1\", \"timestamp\":12354667, \"bucket_span\": 3600," + "\"detector_index\":3, \"foo\":\"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> Forecast.STRICT_PARSER.apply(parser, null)).         assertThat(e.getMessage(), containsString("unknown field [foo]")).     } }
