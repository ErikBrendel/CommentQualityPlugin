commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testValidate_jobClosed() {     Job job1 = DatafeedManagerTests.createDatafeedJob().build(new Date()).     PersistentTasksCustomMetaData tasks = PersistentTasksCustomMetaData.builder().build().     DatafeedConfig datafeedConfig1 = DatafeedManagerTests.createDatafeedConfig("foo-datafeed", "job_id").build().     Exception e = expectThrows(ElasticsearchStatusException.class, () -> TransportStartDatafeedAction.validate(job1, datafeedConfig1, tasks)).     assertThat(e.getMessage(), equalTo("cannot start datafeed [foo-datafeed] because job [job_id] is closed")). }
false;public;0;9;;public void testValidate_jobOpening() {     Job job1 = DatafeedManagerTests.createDatafeedJob().build(new Date()).     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     addJobTask("job_id", INITIAL_ASSIGNMENT.getExecutorNode(), null, tasksBuilder).     PersistentTasksCustomMetaData tasks = tasksBuilder.build().     DatafeedConfig datafeedConfig1 = DatafeedManagerTests.createDatafeedConfig("foo-datafeed", "job_id").build().     TransportStartDatafeedAction.validate(job1, datafeedConfig1, tasks). }
false;public;0;9;;public void testValidate_jobOpened() {     Job job1 = DatafeedManagerTests.createDatafeedJob().build(new Date()).     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     addJobTask("job_id", INITIAL_ASSIGNMENT.getExecutorNode(), JobState.OPENED, tasksBuilder).     PersistentTasksCustomMetaData tasks = tasksBuilder.build().     DatafeedConfig datafeedConfig1 = DatafeedManagerTests.createDatafeedConfig("foo-datafeed", "job_id").build().     TransportStartDatafeedAction.validate(job1, datafeedConfig1, tasks). }
false;public;0;14;;public void testDeprecationsLogged() {     Job job1 = DatafeedManagerTests.createDatafeedJob().build(new Date()).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("start-data-feed-test", job1.getId()).     DatafeedConfig config = spy(datafeedConfig.build()).     doReturn(Collections.singletonList("Deprecated Agg")).when(config).getAggDeprecations().     doReturn(Collections.singletonList("Deprecated Query")).when(config).getQueryDeprecations().     Auditor auditor = mock(Auditor.class).     TransportStartDatafeedAction.auditDeprecations(config, job1, auditor).     verify(auditor).warning(job1.getId(), "datafeed [start-data-feed-test] configuration has deprecations. [Deprecated Agg, Deprecated Query]"). }
false;public;0;13;;public void testNoDeprecationsLogged() {     Job job1 = DatafeedManagerTests.createDatafeedJob().build(new Date()).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("start-data-feed-test", job1.getId()).     DatafeedConfig config = spy(datafeedConfig.build()).     doReturn(Collections.emptyList()).when(config).getAggDeprecations().     doReturn(Collections.emptyList()).when(config).getQueryDeprecations().     Auditor auditor = mock(Auditor.class).     TransportStartDatafeedAction.auditDeprecations(config, job1, auditor).     verify(auditor, never()).warning(any(), any()). }
false;public,static;6;9;;public static TransportStartDatafeedAction.DatafeedTask createDatafeedTask(long id, String type, String action, TaskId parentTaskId, StartDatafeedAction.DatafeedParams params, DatafeedManager datafeedManager) {     TransportStartDatafeedAction.DatafeedTask task = new TransportStartDatafeedAction.DatafeedTask(id, type, action, parentTaskId, params, Collections.emptyMap()).     task.datafeedManager = datafeedManager.     return task. }
