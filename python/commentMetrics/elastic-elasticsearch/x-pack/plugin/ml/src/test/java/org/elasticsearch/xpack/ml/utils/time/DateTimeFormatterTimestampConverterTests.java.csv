commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testOfPattern_GivenPatternIsOnlyYear() {     ESTestCase.expectThrows(IllegalArgumentException.class, () -> DateTimeFormatterTimestampConverter.ofPattern("y", ZoneOffset.UTC)). }
false;public;0;5;;public void testOfPattern_GivenPatternIsOnlyDate() {     ESTestCase.expectThrows(IllegalArgumentException.class, () -> DateTimeFormatterTimestampConverter.ofPattern("y-M-d", ZoneOffset.UTC)). }
false;public;0;5;;public void testOfPattern_GivenPatternIsOnlyTime() {     ESTestCase.expectThrows(IllegalArgumentException.class, () -> DateTimeFormatterTimestampConverter.ofPattern("HH:mm:ss", ZoneOffset.UTC)). }
false;public;0;4;;public void testOfPattern_GivenPatternIsUsingYearInsteadOfYearOfEra() {     ESTestCase.expectThrows(IllegalArgumentException.class, () -> DateTimeFormatterTimestampConverter.ofPattern("uuuu-MM-dd HH:mm:ss", ZoneOffset.UTC)). }
false;public;0;4;;public void testToEpochSeconds_GivenValidTimestampDoesNotFollowPattern() {     TimestampConverter formatter = DateTimeFormatterTimestampConverter.ofPattern("yyyy-MM-dd HH:mm:ss", ZoneOffset.UTC).     ESTestCase.expectThrows(DateTimeParseException.class, () -> formatter.toEpochSeconds("14:00:22")). }
false;public;0;4;;public void testToEpochMillis_GivenValidTimestampDoesNotFollowPattern() {     TimestampConverter formatter = DateTimeFormatterTimestampConverter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS", ZoneOffset.UTC).     ESTestCase.expectThrows(DateTimeParseException.class, () -> formatter.toEpochMillis("2015-01-01 14:00:22")). }
false;public;0;4;;public void testToEpochSeconds_GivenPatternHasFullDateAndOnlyHours() {     long expected = ZonedDateTime.of(2014, 3, 22, 1, 0, 0, 0, ZoneOffset.UTC).toEpochSecond().     assertEquals(expected, toEpochSeconds("2014-03-22 01", "y-M-d HH")). }
false;public;0;10;;public void testToEpochSeconds_GivenPatternHasFullDateAndTimeWithoutTimeZone() {     long expected = ZonedDateTime.of(1985, 8, 18, 20, 15, 40, 0, ZoneOffset.UTC).toEpochSecond().     assertEquals(expected, toEpochSeconds("1985-08-18 20:15:40", "yyyy-MM-dd HH:mm:ss")).     expected = ZonedDateTime.of(1985, 8, 18, 20, 15, 40, 0, ZoneOffset.MIN).toEpochSecond().     assertEquals(expected, toEpochSeconds("1985-08-18 20:15:40", "yyyy-MM-dd HH:mm:ss", ZoneOffset.MIN)).     expected = ZonedDateTime.of(1985, 8, 18, 20, 15, 40, 0, ZoneOffset.MAX).toEpochSecond().     assertEquals(expected, toEpochSeconds("1985-08-18 20:15:40", "yyyy-MM-dd HH:mm:ss", ZoneOffset.MAX)). }
false;public;0;3;;public void testToEpochSeconds_GivenPatternHasFullDateAndTimeWithTimeZone() {     assertEquals(1395703820, toEpochSeconds("2014-03-25 01:30:20 +02:00", "yyyy-MM-dd HH:mm:ss XXX")). }
false;public;0;3;;public void testToEpochSeconds_GivenTimestampRequiresLenientParsing() {     assertEquals(1395703820, toEpochSeconds("2014-03-25 1:30:20 +02:00", "yyyy-MM-dd HH:mm:ss XXX")). }
false;public;0;9;;public void testToEpochSeconds_GivenPatternHasDateWithoutYearAndTimeWithoutTimeZone() throws ParseException {     // Summertime     long expected = ZonedDateTime.of(LocalDate.now(ZoneOffset.UTC).getYear(), 8, 14, 1, 30, 20, 0, ZoneOffset.UTC).toEpochSecond().     assertEquals(expected, toEpochSeconds("08 14 01:30:20", "MM dd HH:mm:ss")).     // Non-summertime     expected = ZonedDateTime.of(LocalDate.now(ZoneOffset.UTC).getYear(), 12, 14, 1, 30, 20, 0, ZoneOffset.UTC).toEpochSecond().     assertEquals(expected, toEpochSeconds("12 14 01:30:20", "MM dd HH:mm:ss")). }
false;public;0;4;;public void testToEpochMillis_GivenPatternHasFullDateAndTimeWithTimeZone() {     assertEquals(1395703820542L, toEpochMillis("2014-03-25 01:30:20.542 +02:00", "yyyy-MM-dd HH:mm:ss.SSS XXX")). }
false;private,static;2;4;;private static long toEpochSeconds(String timestamp, String pattern) {     TimestampConverter formatter = DateTimeFormatterTimestampConverter.ofPattern(pattern, ZoneOffset.UTC).     return formatter.toEpochSeconds(timestamp). }
false;private,static;3;4;;private static long toEpochSeconds(String timestamp, String pattern, ZoneId defaultTimezone) {     TimestampConverter formatter = DateTimeFormatterTimestampConverter.ofPattern(pattern, defaultTimezone).     return formatter.toEpochSeconds(timestamp). }
false;private,static;2;4;;private static long toEpochMillis(String timestamp, String pattern) {     TimestampConverter formatter = DateTimeFormatterTimestampConverter.ofPattern(pattern, ZoneOffset.UTC).     return formatter.toEpochMillis(timestamp). }
