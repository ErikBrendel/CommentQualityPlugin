commented;modifiers;parameterAmount;loc;comment;code
false;static;3;8;;static Histogram.Bucket createHistogramBucket(long timestamp, long docCount, List<Aggregation> subAggregations) {     Histogram.Bucket bucket = mock(Histogram.Bucket.class).     when(bucket.getKey()).thenReturn(timestamp).     when(bucket.getDocCount()).thenReturn(docCount).     Aggregations aggs = createAggs(subAggregations).     when(bucket.getAggregations()).thenReturn(aggs).     return bucket. }
false;static;3;7;;static SingleBucketAggregation createSingleBucketAgg(String name, long docCount, List<Aggregation> subAggregations) {     SingleBucketAggregation singleBucketAggregation = mock(SingleBucketAggregation.class).     when(singleBucketAggregation.getName()).thenReturn(name).     when(singleBucketAggregation.getDocCount()).thenReturn(docCount).     when(singleBucketAggregation.getAggregations()).thenReturn(createAggs(subAggregations)).     return singleBucketAggregation. }
false;static;2;3;;static Histogram.Bucket createHistogramBucket(long timestamp, long docCount) {     return createHistogramBucket(timestamp, docCount, Collections.emptyList()). }
false;static;1;3;;static Aggregations createAggs(List<Aggregation> aggsList) {     return new Aggregations(aggsList). }
false;static;2;7;;@SuppressWarnings("unchecked") static Histogram createHistogramAggregation(String name, List<Histogram.Bucket> histogramBuckets) {     Histogram histogram = mock(Histogram.class).     when((List<Histogram.Bucket>) histogram.getBuckets()).thenReturn(histogramBuckets).     when(histogram.getName()).thenReturn(name).     return histogram. }
false;static;2;7;;static Max createMax(String name, double value) {     Max max = mock(Max.class).     when(max.getName()).thenReturn(name).     when(max.value()).thenReturn(value).     when(max.getValue()).thenReturn(value).     return max. }
false;static;2;6;;static NumericMetricsAggregation.SingleValue createSingleValue(String name, double value) {     NumericMetricsAggregation.SingleValue singleValue = mock(NumericMetricsAggregation.SingleValue.class).     when(singleValue.getName()).thenReturn(name).     when(singleValue.value()).thenReturn(value).     return singleValue. }
false;static;2;26;;@SuppressWarnings("unchecked") static Terms createTerms(String name, Term... terms) {     Terms termsAgg = mock(Terms.class).     when(termsAgg.getName()).thenReturn(name).     List<Terms.Bucket> buckets = new ArrayList<>().     for (Term term : terms) {         StringTerms.Bucket bucket = mock(StringTerms.Bucket.class).         when(bucket.getKey()).thenReturn(term.key).         when(bucket.getDocCount()).thenReturn(term.count).         List<Aggregation> numericAggs = new ArrayList<>().         if (term.hasBuckekAggs()) {             when(bucket.getAggregations()).thenReturn(createAggs(term.bucketAggs)).         } else {             for (Map.Entry<String, Double> keyValue : term.values.entrySet()) {                 numericAggs.add(createSingleValue(keyValue.getKey(), keyValue.getValue())).             }             if (!numericAggs.isEmpty()) {                 Aggregations aggs = createAggs(numericAggs).                 when(bucket.getAggregations()).thenReturn(aggs).             }         }         buckets.add(bucket).     }     when((List<Terms.Bucket>) termsAgg.getBuckets()).thenReturn(buckets).     return termsAgg. }
false;static;2;12;;static Percentiles createPercentiles(String name, double... values) {     Percentiles percentiles = mock(Percentiles.class).     when(percentiles.getName()).thenReturn(name).     List<Percentile> percentileList = new ArrayList<>().     for (double value : values) {         Percentile percentile = mock(Percentile.class).         when(percentile.getValue()).thenReturn(value).         percentileList.add(percentile).     }     when(percentiles.iterator()).thenReturn(percentileList.iterator()).     return percentiles. }
false;private;0;3;;private boolean hasBuckekAggs() {     return bucketAggs != null. }
false;private,static;2;5;;private static Map<String, Double> newKeyValue(String key, Double value) {     Map<String, Double> keyValue = new HashMap<>().     keyValue.put(key, value).     return keyValue. }
