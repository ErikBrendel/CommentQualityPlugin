commented;modifiers;parameterAmount;loc;comment;code
false;private;0;22;;@Before @SuppressWarnings("unchecked") private void setupMocks() {     auditor = mock(Auditor.class).     clusterService = mock(ClusterService.class).     threadPool = mock(ThreadPool.class).     configMigrator = mock(MlConfigMigrator.class).     threadPool = mock(ThreadPool.class).     ExecutorService executorService = mock(ExecutorService.class).     org.elasticsearch.mock.orig.Mockito.doAnswer(invocation -> {         ((Runnable) invocation.getArguments()[0]).run().         return null.     }).when(executorService).execute(any(Runnable.class)).     when(threadPool.executor(anyString())).thenReturn(executorService).     doAnswer(invocation -> {         ActionListener<Boolean> listener = (ActionListener<Boolean>) invocation.getArguments()[1].         listener.onResponse(Boolean.TRUE).         return null.     }).when(configMigrator).migrateConfigs(any(ClusterState.class), any(ActionListener.class)). }
false;public;0;32;;public void testClusterChanged_info() {     MlAssignmentNotifier notifier = new MlAssignmentNotifier(auditor, threadPool, configMigrator, clusterService).     ClusterState previous = ClusterState.builder(new ClusterName("_name")).metaData(MetaData.builder().putCustom(PersistentTasksCustomMetaData.TYPE, new PersistentTasksCustomMetaData(0L, Collections.emptyMap()))).build().     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     addJobTask("job_id", "_node_id", null, tasksBuilder).     MetaData metaData = MetaData.builder().putCustom(PersistentTasksCustomMetaData.TYPE, tasksBuilder.build()).build().     ClusterState newState = ClusterState.builder(new ClusterName("_name")).metaData(metaData).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("_node_id", new TransportAddress(InetAddress.getLoopbackAddress(), 9300), Version.CURRENT)).localNodeId("_node_id").masterNodeId("_node_id")).build().     notifier.clusterChanged(new ClusterChangedEvent("_test", newState, previous)).     verify(auditor, times(1)).info(eq("job_id"), any()).     verify(configMigrator, times(1)).migrateConfigs(eq(newState), any()).     // no longer master     newState = ClusterState.builder(new ClusterName("_name")).metaData(metaData).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("_node_id", new TransportAddress(InetAddress.getLoopbackAddress(), 9300), Version.CURRENT))).build().     notifier.clusterChanged(new ClusterChangedEvent("_test", newState, previous)).     verifyNoMoreInteractions(auditor). }
false;public;0;33;;public void testClusterChanged_warning() {     MlAssignmentNotifier notifier = new MlAssignmentNotifier(auditor, threadPool, configMigrator, clusterService).     ClusterState previous = ClusterState.builder(new ClusterName("_name")).metaData(MetaData.builder().putCustom(PersistentTasksCustomMetaData.TYPE, new PersistentTasksCustomMetaData(0L, Collections.emptyMap()))).build().     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     addJobTask("job_id", null, null, tasksBuilder).     MetaData metaData = MetaData.builder().putCustom(PersistentTasksCustomMetaData.TYPE, tasksBuilder.build()).build().     ClusterState newState = ClusterState.builder(new ClusterName("_name")).metaData(metaData).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("_node_id", new TransportAddress(InetAddress.getLoopbackAddress(), 9200), Version.CURRENT)).localNodeId("_node_id").masterNodeId("_node_id")).build().     notifier.clusterChanged(new ClusterChangedEvent("_test", newState, previous)).     verify(auditor, times(1)).warning(eq("job_id"), any()).     verify(configMigrator, times(1)).migrateConfigs(eq(newState), any()).     // no longer master     newState = ClusterState.builder(new ClusterName("_name")).metaData(metaData).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("_node_id", new TransportAddress(InetAddress.getLoopbackAddress(), 9200), Version.CURRENT))).build().     notifier.clusterChanged(new ClusterChangedEvent("_test", newState, previous)).     verifyNoMoreInteractions(auditor). }
false;public;0;32;;public void testClusterChanged_noPersistentTaskChanges() {     MlAssignmentNotifier notifier = new MlAssignmentNotifier(auditor, threadPool, configMigrator, clusterService).     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     addJobTask("job_id", null, null, tasksBuilder).     MetaData metaData = MetaData.builder().putCustom(PersistentTasksCustomMetaData.TYPE, tasksBuilder.build()).build().     ClusterState previous = ClusterState.builder(new ClusterName("_name")).metaData(metaData).build().     ClusterState newState = ClusterState.builder(new ClusterName("_name")).metaData(metaData).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("_node_id", new TransportAddress(InetAddress.getLoopbackAddress(), 9200), Version.CURRENT)).localNodeId("_node_id").masterNodeId("_node_id")).build().     notifier.clusterChanged(new ClusterChangedEvent("_test", newState, previous)).     verify(configMigrator, times(1)).migrateConfigs(any(), any()).     verifyNoMoreInteractions(auditor).     // no longer master     newState = ClusterState.builder(new ClusterName("_name")).metaData(metaData).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("_node_id", new TransportAddress(InetAddress.getLoopbackAddress(), 9200), Version.CURRENT))).build().     notifier.clusterChanged(new ClusterChangedEvent("_test", newState, previous)).     verifyNoMoreInteractions(configMigrator). }
