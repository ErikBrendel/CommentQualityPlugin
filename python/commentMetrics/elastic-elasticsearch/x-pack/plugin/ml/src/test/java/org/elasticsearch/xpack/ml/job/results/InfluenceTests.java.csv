commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected Influence createTestInstance() {     int size = randomInt(10).     List<String> fieldValues = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         fieldValues.add(randomAlphaOfLengthBetween(1, 20)).     }     return new Influence(randomAlphaOfLengthBetween(1, 30), fieldValues). }
false;protected;0;4;;@Override protected Reader<Influence> instanceReader() {     return Influence::new. }
false;protected;1;4;;@Override protected Influence doParseInstance(XContentParser parser) {     return Influence.STRICT_PARSER.apply(parser, null). }
false;public;0;9;;public void testStrictParser() throws IOException {     String json = "{\"influencer_field_name\":\"influencer_1\", \"influencer_field_values\":[], \"foo\":\"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> Influence.STRICT_PARSER.apply(parser, null)).         assertThat(e.getMessage(), containsString("unknown field [foo]")).     } }
false;public;0;6;;public void testLenientParser() throws IOException {     String json = "{\"influencer_field_name\":\"influencer_1\", \"influencer_field_values\":[], \"foo\":\"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         Influence.LENIENT_PARSER.apply(parser, null).     } }
