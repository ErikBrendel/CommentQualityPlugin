commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUpTests() {     logger = mock(Logger.class).     filesToDelete = Collections.emptyList().     settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     env = TestEnvironment.newEnvironment(settings).     nativeController = mock(NativeController.class).     processPipes = mock(ProcessPipes.class). }
false;public;0;38;;public void testBuildAutodetectCommand() {     Job.Builder job = buildJobBuilder("unit-test-job").     Detector.Builder detectorBuilder = new Detector.Builder("mean", "value").     detectorBuilder.setPartitionFieldName("foo").     AnalysisConfig.Builder acBuilder = new AnalysisConfig.Builder(Collections.singletonList(detectorBuilder.build())).     acBuilder.setBucketSpan(TimeValue.timeValueSeconds(120)).     acBuilder.setLatency(TimeValue.timeValueSeconds(360)).     acBuilder.setSummaryCountFieldName("summaryField").     acBuilder.setMultivariateByFields(true).     job.setAnalysisConfig(acBuilder).     DataDescription.Builder dd = new DataDescription.Builder().     dd.setFormat(DataDescription.DataFormat.DELIMITED).     dd.setFieldDelimiter('|').     dd.setTimeField("tf").     job.setDataDescription(dd).     List<String> command = autodetectBuilder(job.build()).buildAutodetectCommand().     assertEquals(11, command.size()).     assertTrue(command.contains(AutodetectBuilder.AUTODETECT_PATH)).     assertTrue(command.contains(AutodetectBuilder.BUCKET_SPAN_ARG + "120")).     assertTrue(command.contains(AutodetectBuilder.LATENCY_ARG + "360")).     assertTrue(command.contains(AutodetectBuilder.SUMMARY_COUNT_FIELD_ARG + "summaryField")).     assertTrue(command.contains(AutodetectBuilder.MULTIVARIATE_BY_FIELDS_ARG)).     assertTrue(command.contains(AutodetectBuilder.LENGTH_ENCODED_INPUT_ARG)).     assertTrue(command.contains(AutodetectBuilder.maxAnomalyRecordsArg(settings))).     assertTrue(command.contains(AutodetectBuilder.TIME_FIELD_ARG + "tf")).     assertTrue(command.contains(AutodetectBuilder.JOB_ID_ARG + "unit-test-job")).     int expectedPersistInterval = 10800 + AutodetectBuilder.calculateStaggeringInterval(job.getId()).     assertTrue(command.contains(AutodetectBuilder.PERSIST_INTERVAL_ARG + expectedPersistInterval)).     int expectedMaxQuantileInterval = 21600 + AutodetectBuilder.calculateStaggeringInterval(job.getId()).     assertTrue(command.contains(AutodetectBuilder.MAX_QUANTILE_INTERVAL_ARG + expectedMaxQuantileInterval)). }
false;public;0;7;;public void testBuildAutodetectCommand_defaultTimeField() {     Job.Builder job = buildJobBuilder("unit-test-job").     List<String> command = autodetectBuilder(job.build()).buildAutodetectCommand().     assertTrue(command.contains(AutodetectBuilder.TIME_FIELD_ARG + "time")). }
false;public;0;16;;public void testBuildAutodetectCommand_givenPersistModelState() {     settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put(AutodetectBuilder.DONT_PERSIST_MODEL_STATE_SETTING.getKey(), true).build().     Job.Builder job = buildJobBuilder("unit-test-job").     int expectedPersistInterval = 10800 + AutodetectBuilder.calculateStaggeringInterval(job.getId()).     List<String> command = autodetectBuilder(job.build()).buildAutodetectCommand().     assertFalse(command.contains(AutodetectBuilder.PERSIST_INTERVAL_ARG + expectedPersistInterval)).     settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     env = TestEnvironment.newEnvironment(settings).     command = autodetectBuilder(job.build()).buildAutodetectCommand().     assertTrue(command.contains(AutodetectBuilder.PERSIST_INTERVAL_ARG + expectedPersistInterval)). }
false;private;1;3;;private AutodetectBuilder autodetectBuilder(Job job) {     return new AutodetectBuilder(job, filesToDelete, logger, env, settings, nativeController, processPipes). }
