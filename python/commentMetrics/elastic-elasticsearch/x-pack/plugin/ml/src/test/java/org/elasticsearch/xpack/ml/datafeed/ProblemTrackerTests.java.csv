commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUpTests() {     auditor = mock(Auditor.class).     problemTracker = new ProblemTracker(auditor, "foo"). }
false;public;0;6;;public void testReportExtractionProblem() {     problemTracker.reportExtractionProblem("foo").     verify(auditor).error("foo", "Datafeed is encountering errors extracting data: foo").     assertTrue(problemTracker.hasProblems()). }
false;public;0;6;;public void testReportAnalysisProblem() {     problemTracker.reportAnalysisProblem("foo").     verify(auditor).error("foo", "Datafeed is encountering errors submitting data for analysis: foo").     assertTrue(problemTracker.hasProblems()). }
false;public;0;7;;public void testReportProblem_GivenSameProblemTwice() {     problemTracker.reportExtractionProblem("foo").     problemTracker.reportAnalysisProblem("foo").     verify(auditor, times(1)).error("foo", "Datafeed is encountering errors extracting data: foo").     assertTrue(problemTracker.hasProblems()). }
false;public;0;8;;public void testReportProblem_GivenSameProblemAfterFinishReport() {     problemTracker.reportExtractionProblem("foo").     problemTracker.finishReport().     problemTracker.reportExtractionProblem("foo").     verify(auditor, times(1)).error("foo", "Datafeed is encountering errors extracting data: foo").     assertTrue(problemTracker.hasProblems()). }
false;public;0;7;;public void testUpdateEmptyDataCount_GivenEmptyNineTimes() {     for (int i = 0. i < 9. i++) {         problemTracker.reportEmptyDataCount().     }     Mockito.verifyNoMoreInteractions(auditor). }
false;public;0;7;;public void testUpdateEmptyDataCount_GivenEmptyTenTimes() {     for (int i = 0. i < 10. i++) {         problemTracker.reportEmptyDataCount().     }     verify(auditor).warning("foo", "Datafeed has been retrieving no data for a while"). }
false;public;0;7;;public void testUpdateEmptyDataCount_GivenEmptyElevenTimes() {     for (int i = 0. i < 11. i++) {         problemTracker.reportEmptyDataCount().     }     verify(auditor, times(1)).warning("foo", "Datafeed has been retrieving no data for a while"). }
false;public;0;8;;public void testUpdateEmptyDataCount_GivenNonEmptyAfterNineEmpty() {     for (int i = 0. i < 9. i++) {         problemTracker.reportEmptyDataCount().     }     problemTracker.reportNoneEmptyCount().     Mockito.verifyNoMoreInteractions(auditor). }
false;public;0;9;;public void testUpdateEmptyDataCount_GivenNonEmptyAfterTenEmpty() {     for (int i = 0. i < 10. i++) {         problemTracker.reportEmptyDataCount().     }     problemTracker.reportNoneEmptyCount().     verify(auditor).warning("foo", "Datafeed has been retrieving no data for a while").     verify(auditor).info("foo", "Datafeed has started retrieving data again"). }
false;public;0;6;;public void testFinishReport_GivenNoProblems() {     problemTracker.finishReport().     assertFalse(problemTracker.hasProblems()).     Mockito.verifyNoMoreInteractions(auditor). }
false;public;0;9;;public void testFinishReport_GivenRecovery() {     problemTracker.reportExtractionProblem("bar").     problemTracker.finishReport().     problemTracker.finishReport().     verify(auditor).error("foo", "Datafeed is encountering errors extracting data: bar").     verify(auditor).info("foo", "Datafeed has recovered data extraction and analysis").     assertFalse(problemTracker.hasProblems()). }
