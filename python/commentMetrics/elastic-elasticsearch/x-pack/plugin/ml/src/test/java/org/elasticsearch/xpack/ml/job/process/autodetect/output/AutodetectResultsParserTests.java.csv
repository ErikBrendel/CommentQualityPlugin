# id;timestamp;commentText;codeText;commentWords;codeWords
AutodetectResultsParserTests -> public void testParsingExceptionNaN();1524684173;Ensure that we do not accept NaN values;public void testParsingExceptionNaN() {_        String json = "[{\"bucket\": {\"job_id\":\"foo\",\"timestamp\":1359453600000,\"bucket_span\":10,\"records\":"_                + "[{\"timestamp\":1359453600000,\"bucket_span\":10,\"job_id\":\"foo\",\"probability\":NaN,"_                + "\"by_field_name\":\"airline\",\"by_field_value\":\"JZA\", \"typical\":[1020.08],\"actual\":[0],"_                + "\"field_name\":\"responsetime\",\"function\":\"max\",\"partition_field_name\":\"\",\"partition_field_value\":\"\"}]}}]"__        InputStream inputStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8))__        AutodetectResultsParser parser = new AutodetectResultsParser(Settings.EMPTY)___        expectThrows(XContentParseException.class,_                () -> parser.parseResults(inputStream).forEachRemaining(a -> {}))__    };ensure,that,we,do,not,accept,na,n,values;public,void,test,parsing,exception,na,n,string,json,bucket,foo,timestamp,1359453600000,10,records,timestamp,1359453600000,10,foo,probability,na,n,airline,jza,typical,1020,08,actual,0,responsetime,function,max,input,stream,input,stream,new,byte,array,input,stream,json,get,bytes,standard,charsets,autodetect,results,parser,parser,new,autodetect,results,parser,settings,empty,expect,throws,xcontent,parse,exception,class,parser,parse,results,input,stream,for,each,remaining,a
AutodetectResultsParserTests -> public void testParsingExceptionNaN();1528167589;Ensure that we do not accept NaN values;public void testParsingExceptionNaN() {_        String json = "[{\"bucket\": {\"job_id\":\"foo\",\"timestamp\":1359453600000,\"bucket_span\":10,\"records\":"_                + "[{\"timestamp\":1359453600000,\"bucket_span\":10,\"job_id\":\"foo\",\"probability\":NaN,"_                + "\"by_field_name\":\"airline\",\"by_field_value\":\"JZA\", \"typical\":[1020.08],\"actual\":[0],"_                + "\"field_name\":\"responsetime\",\"function\":\"max\",\"partition_field_name\":\"\",\"partition_field_value\":\"\"}]}}]"__        InputStream inputStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8))__        AutodetectResultsParser parser = new AutodetectResultsParser(Settings.EMPTY)___        expectThrows(XContentParseException.class,_                () -> parser.parseResults(inputStream).forEachRemaining(a -> {}))__    };ensure,that,we,do,not,accept,na,n,values;public,void,test,parsing,exception,na,n,string,json,bucket,foo,timestamp,1359453600000,10,records,timestamp,1359453600000,10,foo,probability,na,n,airline,jza,typical,1020,08,actual,0,responsetime,function,max,input,stream,input,stream,new,byte,array,input,stream,json,get,bytes,standard,charsets,autodetect,results,parser,parser,new,autodetect,results,parser,settings,empty,expect,throws,xcontent,parse,exception,class,parser,parse,results,input,stream,for,each,remaining,a
AutodetectResultsParserTests -> public void testParsingExceptionNaN();1541092382;Ensure that we do not accept NaN values;public void testParsingExceptionNaN() {_        String json = "[{\"bucket\": {\"job_id\":\"foo\",\"timestamp\":1359453600000,\"bucket_span\":10,\"records\":"_                + "[{\"timestamp\":1359453600000,\"bucket_span\":10,\"job_id\":\"foo\",\"probability\":NaN,"_                + "\"by_field_name\":\"airline\",\"by_field_value\":\"JZA\", \"typical\":[1020.08],\"actual\":[0],"_                + "\"field_name\":\"responsetime\",\"function\":\"max\",\"partition_field_name\":\"\",\"partition_field_value\":\"\"}]}}]"__        InputStream inputStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8))__        AutodetectResultsParser parser = new AutodetectResultsParser()___        expectThrows(XContentParseException.class,_                () -> parser.parseResults(inputStream).forEachRemaining(a -> {}))__    };ensure,that,we,do,not,accept,na,n,values;public,void,test,parsing,exception,na,n,string,json,bucket,foo,timestamp,1359453600000,10,records,timestamp,1359453600000,10,foo,probability,na,n,airline,jza,typical,1020,08,actual,0,responsetime,function,max,input,stream,input,stream,new,byte,array,input,stream,json,get,bytes,standard,charsets,autodetect,results,parser,parser,new,autodetect,results,parser,expect,throws,xcontent,parse,exception,class,parser,parse,results,input,stream,for,each,remaining,a
AutodetectResultsParserTests -> public void testParsingExceptionNaN();1544175231;Ensure that we do not accept NaN values;public void testParsingExceptionNaN() {_        String json = "[{\"bucket\": {\"job_id\":\"foo\",\"timestamp\":1359453600000,\"bucket_span\":10,\"records\":"_                + "[{\"timestamp\":1359453600000,\"bucket_span\":10,\"job_id\":\"foo\",\"probability\":NaN,"_                + "\"by_field_name\":\"airline\",\"by_field_value\":\"JZA\", \"typical\":[1020.08],\"actual\":[0],"_                + "\"field_name\":\"responsetime\",\"function\":\"max\",\"partition_field_name\":\"\",\"partition_field_value\":\"\"}]}}]"__        InputStream inputStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8))__        AutodetectResultsParser parser = new AutodetectResultsParser()___        expectThrows(XContentParseException.class,_                () -> parser.parseResults(inputStream).forEachRemaining(a -> {}))__    };ensure,that,we,do,not,accept,na,n,values;public,void,test,parsing,exception,na,n,string,json,bucket,foo,timestamp,1359453600000,10,records,timestamp,1359453600000,10,foo,probability,na,n,airline,jza,typical,1020,08,actual,0,responsetime,function,max,input,stream,input,stream,new,byte,array,input,stream,json,get,bytes,standard,charsets,autodetect,results,parser,parser,new,autodetect,results,parser,expect,throws,xcontent,parse,exception,class,parser,parse,results,input,stream,for,each,remaining,a
