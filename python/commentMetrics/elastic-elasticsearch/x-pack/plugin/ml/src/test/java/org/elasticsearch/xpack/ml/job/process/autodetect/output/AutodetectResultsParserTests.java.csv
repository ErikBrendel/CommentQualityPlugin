commented;modifiers;parameterAmount;loc;comment;code
false;public;0;92;;public void testParser() throws IOException {     try (InputStream inputStream = new ByteArrayInputStream(METRIC_OUTPUT_SAMPLE.getBytes(StandardCharsets.UTF_8))) {         AutodetectResultsParser parser = new AutodetectResultsParser().         List<AutodetectResult> results = new ArrayList<>().         parser.parseResults(inputStream).forEachRemaining(results::add).         List<Bucket> buckets = results.stream().map(AutodetectResult::getBucket).filter(b -> b != null).collect(Collectors.toList()).         assertEquals(2, buckets.size()).         assertEquals(new Date(1359450000000L), buckets.get(0).getTimestamp()).         assertEquals(buckets.get(0).getEventCount(), 806).         List<BucketInfluencer> bucketInfluencers = buckets.get(0).getBucketInfluencers().         assertEquals(1, bucketInfluencers.size()).         assertEquals(0.0, bucketInfluencers.get(0).getRawAnomalyScore(), EPSILON).         assertEquals(0.0, bucketInfluencers.get(0).getAnomalyScore(), EPSILON).         assertEquals(0.0, bucketInfluencers.get(0).getProbability(), EPSILON).         assertEquals("bucket_time", bucketInfluencers.get(0).getInfluencerFieldName()).         assertEquals(new Date(1359453600000L), buckets.get(1).getTimestamp()).         assertEquals(buckets.get(1).getEventCount(), 820).         bucketInfluencers = buckets.get(1).getBucketInfluencers().         assertEquals(2, bucketInfluencers.size()).         assertEquals(0.0140005, bucketInfluencers.get(0).getRawAnomalyScore(), EPSILON).         assertEquals(20.22688, bucketInfluencers.get(0).getAnomalyScore(), EPSILON).         assertEquals(0.01, bucketInfluencers.get(0).getProbability(), EPSILON).         assertEquals("bucket_time", bucketInfluencers.get(0).getInfluencerFieldName()).         assertEquals(0.005, bucketInfluencers.get(1).getRawAnomalyScore(), EPSILON).         assertEquals(10.5, bucketInfluencers.get(1).getAnomalyScore(), EPSILON).         assertEquals(0.03, bucketInfluencers.get(1).getProbability(), EPSILON).         assertEquals("foo", bucketInfluencers.get(1).getInfluencerFieldName()).         Bucket secondBucket = buckets.get(1).         assertEquals(0.0637541, secondBucket.getRecords().get(0).getProbability(), EPSILON).         assertEquals("airline", secondBucket.getRecords().get(0).getByFieldName()).         assertEquals("JZA", secondBucket.getRecords().get(0).getByFieldValue()).         assertEquals(1020.08, secondBucket.getRecords().get(0).getTypical().get(0), EPSILON).         assertEquals(1042.14, secondBucket.getRecords().get(0).getActual().get(0), EPSILON).         assertEquals("responsetime", secondBucket.getRecords().get(0).getFieldName()).         assertEquals("max", secondBucket.getRecords().get(0).getFunction()).         assertEquals("", secondBucket.getRecords().get(0).getPartitionFieldName()).         assertEquals("", secondBucket.getRecords().get(0).getPartitionFieldValue()).         assertEquals(0.00748292, secondBucket.getRecords().get(1).getProbability(), EPSILON).         assertEquals("airline", secondBucket.getRecords().get(1).getByFieldName()).         assertEquals("AMX", secondBucket.getRecords().get(1).getByFieldValue()).         assertEquals(20.2137, secondBucket.getRecords().get(1).getTypical().get(0), EPSILON).         assertEquals(22.8855, secondBucket.getRecords().get(1).getActual().get(0), EPSILON).         assertEquals("responsetime", secondBucket.getRecords().get(1).getFieldName()).         assertEquals("max", secondBucket.getRecords().get(1).getFunction()).         assertEquals("", secondBucket.getRecords().get(1).getPartitionFieldName()).         assertEquals("", secondBucket.getRecords().get(1).getPartitionFieldValue()).         assertEquals(0.023494, secondBucket.getRecords().get(2).getProbability(), EPSILON).         assertEquals("airline", secondBucket.getRecords().get(2).getByFieldName()).         assertEquals("DAL", secondBucket.getRecords().get(2).getByFieldValue()).         assertEquals(382.177, secondBucket.getRecords().get(2).getTypical().get(0), EPSILON).         assertEquals(358.934, secondBucket.getRecords().get(2).getActual().get(0), EPSILON).         assertEquals("responsetime", secondBucket.getRecords().get(2).getFieldName()).         assertEquals("min", secondBucket.getRecords().get(2).getFunction()).         assertEquals("", secondBucket.getRecords().get(2).getPartitionFieldName()).         assertEquals("", secondBucket.getRecords().get(2).getPartitionFieldValue()).         assertEquals(0.0473552, secondBucket.getRecords().get(3).getProbability(), EPSILON).         assertEquals("airline", secondBucket.getRecords().get(3).getByFieldName()).         assertEquals("SWA", secondBucket.getRecords().get(3).getByFieldValue()).         assertEquals(152.148, secondBucket.getRecords().get(3).getTypical().get(0), EPSILON).         assertEquals(96.6425, secondBucket.getRecords().get(3).getActual().get(0), EPSILON).         assertEquals("responsetime", secondBucket.getRecords().get(3).getFieldName()).         assertEquals("min", secondBucket.getRecords().get(3).getFunction()).         assertEquals("", secondBucket.getRecords().get(3).getPartitionFieldName()).         assertEquals("", secondBucket.getRecords().get(3).getPartitionFieldValue()).         List<Quantiles> quantiles = results.stream().map(AutodetectResult::getQuantiles).filter(q -> q != null).collect(Collectors.toList()).         assertEquals(3, quantiles.size()).         assertEquals("foo", quantiles.get(0).getJobId()).         assertEquals(new Date(1359450000000L), quantiles.get(0).getTimestamp()).         assertEquals("[normalizer 1.1, normalizer 2.1]", quantiles.get(0).getQuantileState()).         assertEquals("foo", quantiles.get(1).getJobId()).         assertEquals(new Date(1359453600000L), quantiles.get(1).getTimestamp()).         assertEquals("[normalizer 1.2, normalizer 2.2]", quantiles.get(1).getQuantileState()).         assertEquals("foo", quantiles.get(2).getJobId()).         assertEquals(new Date(1359453600000L), quantiles.get(2).getTimestamp()).         assertEquals("[normalizer 1.3, normalizer 2.3]", quantiles.get(2).getQuantileState()).     } }
false;public;0;26;;@AwaitsFix(bugUrl = "rewrite this test so it doesn't use ~200 lines of json") public void testPopulationParser() throws IOException {     try (InputStream inputStream = new ByteArrayInputStream(POPULATION_OUTPUT_SAMPLE.getBytes(StandardCharsets.UTF_8))) {         AutodetectResultsParser parser = new AutodetectResultsParser().         List<AutodetectResult> results = new ArrayList<>().         parser.parseResults(inputStream).forEachRemaining(results::add).         List<Bucket> buckets = results.stream().map(AutodetectResult::getBucket).filter(b -> b != null).collect(Collectors.toList()).         assertEquals(2, buckets.size()).         assertEquals(new Date(1379590200000L), buckets.get(0).getTimestamp()).         assertEquals(buckets.get(0).getEventCount(), 1235).         Bucket firstBucket = buckets.get(0).         assertEquals(1.38951e-08, firstBucket.getRecords().get(0).getProbability(), EPSILON).         assertEquals("sum_cs_bytes_", firstBucket.getRecords().get(0).getFieldName()).         assertEquals("max", firstBucket.getRecords().get(0).getFunction()).         assertEquals("cs_host", firstBucket.getRecords().get(0).getOverFieldName()).         assertEquals("mail.google.com", firstBucket.getRecords().get(0).getOverFieldValue()).         assertNotNull(firstBucket.getRecords().get(0).getCauses()).         assertEquals(new Date(1379590800000L), buckets.get(1).getTimestamp()).         assertEquals(buckets.get(1).getEventCount(), 1159).     } }
false;public;0;7;;public void testParse_GivenEmptyArray() throws ElasticsearchParseException, IOException {     String json = "[]".     try (InputStream inputStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8))) {         AutodetectResultsParser parser = new AutodetectResultsParser().         assertFalse(parser.parseResults(inputStream).hasNext()).     } }
false;public;0;12;;public void testParse_GivenModelSizeStats() throws ElasticsearchParseException, IOException {     String json = "[{\"model_size_stats\": {\"job_id\": \"foo\", \"model_bytes\":300}}]".     try (InputStream inputStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8))) {         AutodetectResultsParser parser = new AutodetectResultsParser().         List<AutodetectResult> results = new ArrayList<>().         parser.parseResults(inputStream).forEachRemaining(results::add).         assertEquals(1, results.size()).         assertEquals(300, results.get(0).getModelSizeStats().getModelBytes()).     } }
false;public;0;12;;public void testParse_GivenCategoryDefinition() throws IOException {     String json = "[{\"category_definition\": {\"job_id\":\"foo\", \"category_id\":18}}]".     try (InputStream inputStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8))) {         AutodetectResultsParser parser = new AutodetectResultsParser().         List<AutodetectResult> results = new ArrayList<>().         parser.parseResults(inputStream).forEachRemaining(results::add).         assertEquals(1, results.size()).         assertEquals(18, results.get(0).getCategoryDefinition().getCategoryId()).     } }
false;public;0;10;;public void testParse_GivenUnknownObject() throws ElasticsearchParseException, IOException {     String json = "[{\"unknown\":{\"id\": 18}}]".     try (InputStream inputStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8))) {         AutodetectResultsParser parser = new AutodetectResultsParser().         XContentParseException e = expectThrows(XContentParseException.class, () -> parser.parseResults(inputStream).forEachRemaining(a -> {         })).         assertEquals("[1:3] [autodetect_result] unknown field [unknown], parser not found", e.getMessage()).     } }
false;public;0;10;;public void testParse_GivenArrayContainsAnotherArray() throws ElasticsearchParseException, IOException {     String json = "[[]]".     try (InputStream inputStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8))) {         AutodetectResultsParser parser = new AutodetectResultsParser().         ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> parser.parseResults(inputStream).forEachRemaining(a -> {         })).         assertEquals("unexpected token [START_ARRAY]", e.getMessage()).     } }
true;public;0;11;/**  * Ensure that we do not accept NaN values  */ ;/**  * Ensure that we do not accept NaN values  */ public void testParsingExceptionNaN() {     String json = "[{\"bucket\": {\"job_id\":\"foo\",\"timestamp\":1359453600000,\"bucket_span\":10,\"records\":" + "[{\"timestamp\":1359453600000,\"bucket_span\":10,\"job_id\":\"foo\",\"probability\":NaN," + "\"by_field_name\":\"airline\",\"by_field_value\":\"JZA\", \"typical\":[1020.08],\"actual\":[0]," + "\"field_name\":\"responsetime\",\"function\":\"max\",\"partition_field_name\":\"\",\"partition_field_value\":\"\"}]}}]".     InputStream inputStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)).     AutodetectResultsParser parser = new AutodetectResultsParser().     expectThrows(XContentParseException.class, () -> parser.parseResults(inputStream).forEachRemaining(a -> {     })). }
