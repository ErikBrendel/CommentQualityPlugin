commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@SuppressWarnings({ "unchecked" }) public MockClientBuilder addClusterStatusYellowResponse() throws InterruptedException, ExecutionException {     PlainActionFuture<ClusterHealthResponse> actionFuture = mock(PlainActionFuture.class).     ClusterHealthRequestBuilder clusterHealthRequestBuilder = mock(ClusterHealthRequestBuilder.class).     when(clusterAdminClient.prepareHealth()).thenReturn(clusterHealthRequestBuilder).     when(clusterHealthRequestBuilder.setWaitForYellowStatus()).thenReturn(clusterHealthRequestBuilder).     when(clusterHealthRequestBuilder.execute()).thenReturn(actionFuture).     when(actionFuture.actionGet()).thenReturn(mock(ClusterHealthResponse.class)).     return this. }
false;public;1;11;;@SuppressWarnings({ "unchecked" }) public MockClientBuilder addClusterStatusYellowResponse(String index) throws InterruptedException, ExecutionException {     PlainActionFuture<ClusterHealthResponse> actionFuture = mock(PlainActionFuture.class).     ClusterHealthRequestBuilder clusterHealthRequestBuilder = mock(ClusterHealthRequestBuilder.class).     when(clusterAdminClient.prepareHealth(index)).thenReturn(clusterHealthRequestBuilder).     when(clusterHealthRequestBuilder.setWaitForYellowStatus()).thenReturn(clusterHealthRequestBuilder).     when(clusterHealthRequestBuilder.execute()).thenReturn(actionFuture).     when(actionFuture.actionGet()).thenReturn(mock(ClusterHealthResponse.class)).     return this. }
false;public;2;14;;@SuppressWarnings({ "rawtypes", "unchecked" }) public MockClientBuilder addIndicesExistsResponse(String index, boolean exists) throws InterruptedException, ExecutionException {     ActionFuture actionFuture = mock(ActionFuture.class).     ArgumentCaptor<IndicesExistsRequest> requestCaptor = ArgumentCaptor.forClass(IndicesExistsRequest.class).     when(indicesAdminClient.exists(requestCaptor.capture())).thenReturn(actionFuture).     doAnswer(invocation -> {         IndicesExistsRequest request = (IndicesExistsRequest) invocation.getArguments()[0].         return request.indices()[0].equals(index) ? actionFuture : null.     }).when(indicesAdminClient).exists(any(IndicesExistsRequest.class)).     when(actionFuture.get()).thenReturn(new IndicesExistsResponse(exists)).     when(actionFuture.actionGet()).thenReturn(new IndicesExistsResponse(exists)).     return this. }
false;public;4;23;;@SuppressWarnings({ "unchecked" }) public MockClientBuilder addIndicesDeleteResponse(String index, boolean exists, boolean exception, ActionListener<AcknowledgedResponse> actionListener) throws InterruptedException, ExecutionException, IOException {     AcknowledgedResponse response = DeleteIndexAction.INSTANCE.newResponse().     StreamInput si = mock(StreamInput.class).     // this looks complicated but Mockito can't mock the final method     // DeleteIndexResponse.isAcknowledged() and the only way to create     // one with a true response is reading from a stream.     when(si.readByte()).thenReturn((byte) 0x01).     response.readFrom(si).     doAnswer(invocation -> {         DeleteIndexRequest deleteIndexRequest = (DeleteIndexRequest) invocation.getArguments()[0].         assertArrayEquals(new String[] { index }, deleteIndexRequest.indices()).         if (exception) {             actionListener.onFailure(new InterruptedException()).         } else {             actionListener.onResponse(new AcknowledgedResponse(true)).         }         return null.     }).when(indicesAdminClient).delete(any(DeleteIndexRequest.class), any(ActionListener.class)).     return this. }
false;public;4;7;;public MockClientBuilder prepareGet(String index, String type, String id, GetResponse response) {     GetRequestBuilder getRequestBuilder = mock(GetRequestBuilder.class).     when(getRequestBuilder.get()).thenReturn(response).     when(getRequestBuilder.setFetchSource(false)).thenReturn(getRequestBuilder).     when(client.prepareGet(index, type, id)).thenReturn(getRequestBuilder).     return this. }
false;public;1;6;;@Override public Void answer(InvocationOnMock invocationOnMock) {     ActionListener<GetResponse> listener = (ActionListener<GetResponse>) invocationOnMock.getArguments()[1].     listener.onResponse(response).     return null. }
false;public;1;12;;public MockClientBuilder get(GetResponse response) {     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) {             ActionListener<GetResponse> listener = (ActionListener<GetResponse>) invocationOnMock.getArguments()[1].             listener.onResponse(response).             return null.         }     }).when(client).get(any(), any()).     return this. }
false;public;1;9;;public MockClientBuilder prepareCreate(String index) {     CreateIndexRequestBuilder createIndexRequestBuilder = mock(CreateIndexRequestBuilder.class).     CreateIndexResponse response = mock(CreateIndexResponse.class).     when(createIndexRequestBuilder.setSettings(any(Settings.Builder.class))).thenReturn(createIndexRequestBuilder).     when(createIndexRequestBuilder.addMapping(any(String.class), any(XContentBuilder.class))).thenReturn(createIndexRequestBuilder).     when(createIndexRequestBuilder.get()).thenReturn(response).     when(indicesAdminClient.prepareCreate(eq(index))).thenReturn(createIndexRequestBuilder).     return this. }
false;public;2;10;;@SuppressWarnings({ "rawtypes", "unchecked" }) public MockClientBuilder createIndexRequest(ArgumentCaptor<CreateIndexRequest> requestCapture, final String index) {     doAnswer(invocation -> {         CreateIndexResponse response = new CreateIndexResponse(true, true, index) {         }.         ((ActionListener) invocation.getArguments()[1]).onResponse(response).         return null.     }).when(indicesAdminClient).create(requestCapture.capture(), any(ActionListener.class)).     return this. }
false;public;1;6;;@Override public Void answer(InvocationOnMock invocationOnMock) throws Throwable {     ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocationOnMock.getArguments()[0].     listener.onResponse(response).     return null. }
false;public;2;26;;@SuppressWarnings("unchecked") public MockClientBuilder prepareSearchExecuteListener(String index, SearchResponse response) {     SearchRequestBuilder builder = mock(SearchRequestBuilder.class).     when(builder.setTypes(anyString())).thenReturn(builder).     when(builder.addSort(any(SortBuilder.class))).thenReturn(builder).     when(builder.setFetchSource(anyBoolean())).thenReturn(builder).     when(builder.setScroll(anyString())).thenReturn(builder).     when(builder.addDocValueField(any(String.class))).thenReturn(builder).     when(builder.addDocValueField(any(String.class), any(String.class))).thenReturn(builder).     when(builder.addSort(any(String.class), any(SortOrder.class))).thenReturn(builder).     when(builder.setQuery(any())).thenReturn(builder).     when(builder.setSize(anyInt())).thenReturn(builder).     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) throws Throwable {             ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocationOnMock.getArguments()[0].             listener.onResponse(response).             return null.         }     }).when(builder).execute(any()).     when(client.prepareSearch(eq(index))).thenReturn(builder).     return this. }
false;public;1;6;;@Override public Void answer(InvocationOnMock invocationOnMock) throws Throwable {     ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocationOnMock.getArguments()[0].     listener.onResponse(response).     return null. }
false;public;1;19;;@SuppressWarnings("unchecked") public MockClientBuilder prepareSearchScrollExecuteListener(SearchResponse response) {     SearchScrollRequestBuilder builder = mock(SearchScrollRequestBuilder.class).     when(builder.setScroll(anyString())).thenReturn(builder).     when(builder.setScrollId(anyString())).thenReturn(builder).     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) throws Throwable {             ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocationOnMock.getArguments()[0].             listener.onResponse(response).             return null.         }     }).when(builder).execute(any()).     when(client.prepareSearchScroll(anyString())).thenReturn(builder).     return this. }
false;public;6;17;;public MockClientBuilder prepareSearch(String index, String type, int from, int size, SearchResponse response, ArgumentCaptor<QueryBuilder> filter) {     SearchRequestBuilder builder = mock(SearchRequestBuilder.class).     when(builder.setTypes(eq(type))).thenReturn(builder).     when(builder.addSort(any(SortBuilder.class))).thenReturn(builder).     when(builder.setQuery(filter.capture())).thenReturn(builder).     when(builder.setPostFilter(filter.capture())).thenReturn(builder).     when(builder.setFrom(eq(from))).thenReturn(builder).     when(builder.setSize(eq(size))).thenReturn(builder).     when(builder.setFetchSource(eq(true))).thenReturn(builder).     when(builder.addDocValueField(any(String.class))).thenReturn(builder).     when(builder.addDocValueField(any(String.class), any(String.class))).thenReturn(builder).     when(builder.addSort(any(String.class), any(SortOrder.class))).thenReturn(builder).     when(builder.get()).thenReturn(response).     when(client.prepareSearch(eq(index))).thenReturn(builder).     return this. }
false;public;3;4;;public MockClientBuilder prepareSearches(String index, SearchRequestBuilder first, SearchRequestBuilder... searches) {     when(client.prepareSearch(eq(index))).thenReturn(first, searches).     return this. }
false;public;1;6;;@Override public Void answer(InvocationOnMock invocationOnMock) {     ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocationOnMock.getArguments()[1].     listener.onResponse(response).     return null. }
true;public;2;34;/**  * Creates a {@link SearchResponse} with a {@link SearchHit} for each element of {@code docs}  * @param indexName Index being searched  * @param docs Returned in the SearchResponse  * @return this  */ ;/**  * Creates a {@link SearchResponse} with a {@link SearchHit} for each element of {@code docs}  * @param indexName Index being searched  * @param docs Returned in the SearchResponse  * @return this  */ @SuppressWarnings("unchecked") public MockClientBuilder prepareSearch(String indexName, List<BytesReference> docs) {     SearchRequestBuilder builder = mock(SearchRequestBuilder.class).     when(builder.setIndicesOptions(any())).thenReturn(builder).     when(builder.setQuery(any())).thenReturn(builder).     when(builder.setSource(any())).thenReturn(builder).     when(builder.setSize(anyInt())).thenReturn(builder).     SearchRequest request = new SearchRequest(indexName).     when(builder.request()).thenReturn(request).     when(client.prepareSearch(eq(indexName))).thenReturn(builder).     SearchHit[] hits = new SearchHit[docs.size()].     for (int i = 0. i < docs.size(). i++) {         SearchHit hit = new SearchHit(10).         hit.sourceRef(docs.get(i)).         hits[i] = hit.     }     SearchResponse response = mock(SearchResponse.class).     SearchHits searchHits = new SearchHits(hits, new TotalHits(hits.length, TotalHits.Relation.EQUAL_TO), 0.0f).     when(response.getHits()).thenReturn(searchHits).     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) {             ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocationOnMock.getArguments()[1].             listener.onResponse(response).             return null.         }     }).when(client).search(eq(request), any()).     return this. }
false;public;1;6;;@Override public Void answer(InvocationOnMock invocationOnMock) {     ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocationOnMock.getArguments()[1].     listener.onResponse(response).     return null. }
true;public;2;33;/*      * Mock a search that returns search hits with fields.      * The number of hits is the size of fields      */ ;/*      * Mock a search that returns search hits with fields.      * The number of hits is the size of fields      */ @SuppressWarnings("unchecked") public MockClientBuilder prepareSearchFields(String indexName, List<Map<String, DocumentField>> fields) {     SearchRequestBuilder builder = mock(SearchRequestBuilder.class).     when(builder.setIndicesOptions(any())).thenReturn(builder).     when(builder.setQuery(any())).thenReturn(builder).     when(builder.setSource(any())).thenReturn(builder).     when(builder.setSize(anyInt())).thenReturn(builder).     SearchRequest request = new SearchRequest(indexName).     when(builder.request()).thenReturn(request).     when(client.prepareSearch(eq(indexName))).thenReturn(builder).     SearchHit[] hits = new SearchHit[fields.size()].     for (int i = 0. i < hits.length. i++) {         SearchHit hit = new SearchHit(10, null, null, fields.get(i)).         hits[i] = hit.     }     SearchResponse response = mock(SearchResponse.class).     SearchHits searchHits = new SearchHits(hits, new TotalHits(hits.length, TotalHits.Relation.EQUAL_TO), 0.0f).     when(response.getHits()).thenReturn(searchHits).     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) {             ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocationOnMock.getArguments()[1].             listener.onResponse(response).             return null.         }     }).when(client).search(eq(request), any()).     return this. }
false;public;1;7;;@Override public Void answer(InvocationOnMock invocationOnMock) throws Throwable {     ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocationOnMock.getArguments()[0].     listener.onResponse(mock(AcknowledgedResponse.class)).     return null. }
false;public;3;15;;@SuppressWarnings("unchecked") public MockClientBuilder prepareAlias(String indexName, String alias, QueryBuilder filter) {     when(aliasesRequestBuilder.addAlias(eq(indexName), eq(alias), eq(filter))).thenReturn(aliasesRequestBuilder).     when(indicesAdminClient.prepareAliases()).thenReturn(aliasesRequestBuilder).     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) throws Throwable {             ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocationOnMock.getArguments()[0].             listener.onResponse(mock(AcknowledgedResponse.class)).             return null.         }     }).when(aliasesRequestBuilder).execute(any()).     return this. }
false;public;1;7;;@Override public Void answer(InvocationOnMock invocationOnMock) throws Throwable {     ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocationOnMock.getArguments()[1].     listener.onResponse(mock(AcknowledgedResponse.class)).     return null. }
false;public;2;15;;@SuppressWarnings("unchecked") public MockClientBuilder prepareAlias(String indexName, String alias) {     when(aliasesRequestBuilder.addAlias(eq(indexName), eq(alias))).thenReturn(aliasesRequestBuilder).     when(indicesAdminClient.prepareAliases()).thenReturn(aliasesRequestBuilder).     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) throws Throwable {             ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocationOnMock.getArguments()[1].             listener.onResponse(mock(AcknowledgedResponse.class)).             return null.         }     }).when(indicesAdminClient).aliases(any(IndicesAliasesRequest.class), any(ActionListener.class)).     return this. }
false;public;1;9;;@SuppressWarnings("unchecked") public MockClientBuilder prepareBulk(BulkResponse response) {     PlainActionFuture<BulkResponse> actionFuture = mock(PlainActionFuture.class).     BulkRequestBuilder builder = mock(BulkRequestBuilder.class).     when(client.prepareBulk()).thenReturn(builder).     when(builder.execute()).thenReturn(actionFuture).     when(actionFuture.actionGet()).thenReturn(response).     return this. }
false;public;1;7;;@SuppressWarnings("unchecked") public MockClientBuilder bulk(BulkResponse response) {     ActionFuture<BulkResponse> actionFuture = mock(ActionFuture.class).     when(client.bulk(any(BulkRequest.class))).thenReturn(actionFuture).     when(actionFuture.actionGet()).thenReturn(response).     return this. }
false;public;1;7;;@Override public Void answer(InvocationOnMock invocationOnMock) throws Throwable {     ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocationOnMock.getArguments()[0].     listener.onResponse(response).     return null. }
false;public;2;17;;public MockClientBuilder preparePutMapping(AcknowledgedResponse response, String type) {     PutMappingRequestBuilder requestBuilder = mock(PutMappingRequestBuilder.class).     when(requestBuilder.setType(eq(type))).thenReturn(requestBuilder).     when(requestBuilder.setSource(any(XContentBuilder.class))).thenReturn(requestBuilder).     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) throws Throwable {             ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocationOnMock.getArguments()[0].             listener.onResponse(response).             return null.         }     }).when(requestBuilder).execute(any()).     when(indicesAdminClient.preparePutMapping(any())).thenReturn(requestBuilder).     return this. }
false;public;1;7;;@Override public Void answer(InvocationOnMock invocationOnMock) throws Throwable {     ActionListener<GetMappingsResponse> listener = (ActionListener<GetMappingsResponse>) invocationOnMock.getArguments()[0].     listener.onResponse(response).     return null. }
false;public;1;16;;public MockClientBuilder prepareGetMapping(GetMappingsResponse response) {     GetMappingsRequestBuilder builder = mock(GetMappingsRequestBuilder.class).     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) throws Throwable {             ActionListener<GetMappingsResponse> listener = (ActionListener<GetMappingsResponse>) invocationOnMock.getArguments()[0].             listener.onResponse(response).             return null.         }     }).when(builder).execute(any()).     when(indicesAdminClient.prepareGetMappings(any())).thenReturn(builder).     return this. }
false;public;1;7;;@Override public Void answer(InvocationOnMock invocationOnMock) throws Throwable {     ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocationOnMock.getArguments()[1].     listener.onResponse(mock(AcknowledgedResponse.class)).     return null. }
false;public;1;12;;public MockClientBuilder putTemplate(ArgumentCaptor<PutIndexTemplateRequest> requestCaptor) {     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) throws Throwable {             ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocationOnMock.getArguments()[1].             listener.onResponse(mock(AcknowledgedResponse.class)).             return null.         }     }).when(indicesAdminClient).putTemplate(requestCaptor.capture(), any(ActionListener.class)).     return this. }
false;public;0;3;;public Client build() {     return client. }
false;public;1;5;;public void verifyIndexCreated(String index) {     ArgumentCaptor<CreateIndexRequest> requestCaptor = ArgumentCaptor.forClass(CreateIndexRequest.class).     verify(indicesAdminClient).create(requestCaptor.capture(), any()).     assertEquals(index, requestCaptor.getValue().index()). }
false;public;0;3;;public void resetIndices() {     reset(indicesAdminClient). }
