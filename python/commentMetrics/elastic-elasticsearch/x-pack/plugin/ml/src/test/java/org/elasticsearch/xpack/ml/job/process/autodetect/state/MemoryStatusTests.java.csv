commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testFromString() {     assertEquals(MemoryStatus.OK, MemoryStatus.fromString("ok")).     assertEquals(MemoryStatus.SOFT_LIMIT, MemoryStatus.fromString("soft_limit")).     assertEquals(MemoryStatus.HARD_LIMIT, MemoryStatus.fromString("hard_limit")).     assertEquals(MemoryStatus.OK, MemoryStatus.fromString("OK")).     assertEquals(MemoryStatus.SOFT_LIMIT, MemoryStatus.fromString("SOFT_LIMIT")).     assertEquals(MemoryStatus.HARD_LIMIT, MemoryStatus.fromString("HARD_LIMIT")). }
false;public;0;5;;public void testToString() {     assertEquals("ok", MemoryStatus.OK.toString()).     assertEquals("soft_limit", MemoryStatus.SOFT_LIMIT.toString()).     assertEquals("hard_limit", MemoryStatus.HARD_LIMIT.toString()). }
false;public;0;5;;public void testValidOrdinals() {     assertThat(MemoryStatus.OK.ordinal(), equalTo(0)).     assertThat(MemoryStatus.SOFT_LIMIT.ordinal(), equalTo(1)).     assertThat(MemoryStatus.HARD_LIMIT.ordinal(), equalTo(2)). }
false;public;0;22;;public void testwriteTo() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         MemoryStatus.OK.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(0)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         MemoryStatus.SOFT_LIMIT.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(1)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         MemoryStatus.HARD_LIMIT.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(2)).         }     } }
false;public;0;20;;public void testReadFrom() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(0).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(MemoryStatus.readFromStream(in), equalTo(MemoryStatus.OK)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(1).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(MemoryStatus.readFromStream(in), equalTo(MemoryStatus.SOFT_LIMIT)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(2).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(MemoryStatus.readFromStream(in), equalTo(MemoryStatus.HARD_LIMIT)).         }     } }
false;public;0;11;;public void testInvalidReadFrom() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(randomIntBetween(3, Integer.MAX_VALUE)).         try (StreamInput in = out.bytes().streamInput()) {             MemoryStatus.readFromStream(in).             fail("Expected IOException").         } catch (IOException e) {             assertThat(e.getMessage(), containsString("Unknown MemoryStatus ordinal [")).         }     } }
