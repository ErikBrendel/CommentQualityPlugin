commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUpTests() {     clusterService = mock(ClusterService.class). }
false;public;0;9;;public void testCanStartMigration_givenMigrationIsDisabled() {     Settings settings = newSettings(false).     givenClusterSettings(settings).     ClusterState clusterState = mock(ClusterState.class).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.canStartMigration(clusterState)). }
false;public;0;21;;public void testCanStartMigration_givenNodesNotUpToVersion() {     MetaData.Builder metaData = MetaData.builder().     RoutingTable.Builder routingTable = RoutingTable.builder().     addMlConfigIndex(metaData, routingTable).     // mixed 6.5 and 6.6 nodes     ClusterState clusterState = ClusterState.builder(new ClusterName("_name")).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("node_id1", new TransportAddress(InetAddress.getLoopbackAddress(), 9300), Version.V_6_5_0)).add(new DiscoveryNode("node_id2", new TransportAddress(InetAddress.getLoopbackAddress(), 9301), Version.V_6_6_0))).routingTable(routingTable.build()).metaData(metaData).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.canStartMigration(clusterState)). }
false;public;0;21;;public void testCanStartMigration_givenNodesNotUpToVersionAndMigrationIsEnabled() {     MetaData.Builder metaData = MetaData.builder().     RoutingTable.Builder routingTable = RoutingTable.builder().     addMlConfigIndex(metaData, routingTable).     // mixed 6.5 and 6.6 nodes     ClusterState clusterState = ClusterState.builder(new ClusterName("_name")).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("node_id1", new TransportAddress(InetAddress.getLoopbackAddress(), 9300), Version.V_6_6_0)).add(new DiscoveryNode("node_id2", new TransportAddress(InetAddress.getLoopbackAddress(), 9301), Version.V_6_6_0))).routingTable(routingTable.build()).metaData(metaData).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertTrue(check.canStartMigration(clusterState)). }
false;public;0;10;;public void testCanStartMigration_givenMissingIndex() {     Settings settings = newSettings(true).     givenClusterSettings(settings).     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).build().     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.canStartMigration(clusterState)). }
false;public;0;15;;public void testCanStartMigration_givenInactiveShards() {     Settings settings = newSettings(true).     givenClusterSettings(settings).     // index is present but no routing     MetaData.Builder metaData = MetaData.builder().     RoutingTable.Builder routingTable = RoutingTable.builder().     addMlConfigIndex(metaData, routingTable).     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).metaData(metaData).build().     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.canStartMigration(clusterState)). }
false;private;2;17;;private void addMlConfigIndex(MetaData.Builder metaData, RoutingTable.Builder routingTable) {     IndexMetaData.Builder indexMetaData = IndexMetaData.builder(AnomalyDetectorsIndex.configIndexName()).     indexMetaData.settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)).     metaData.put(indexMetaData).     Index index = new Index(AnomalyDetectorsIndex.configIndexName(), "_uuid").     ShardId shardId = new ShardId(index, 0).     ShardRouting shardRouting = ShardRouting.newUnassigned(shardId, true, RecoverySource.EmptyStoreRecoverySource.INSTANCE, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "")).     shardRouting = shardRouting.initialize("node_id", null, 0L).     shardRouting = shardRouting.moveToStarted().     routingTable.add(IndexRoutingTable.builder(index).addIndexShard(new IndexShardRoutingTable.Builder(shardId).addShard(shardRouting).build())). }
false;public;0;15;;public void testJobIsEligibleForMigration_givenNodesNotUpToVersion() {     // mixed 6.5 and 6.6 nodes     ClusterState clusterState = ClusterState.builder(new ClusterName("_name")).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("node_id1", new TransportAddress(InetAddress.getLoopbackAddress(), 9300), Version.V_6_5_0)).add(new DiscoveryNode("node_id2", new TransportAddress(InetAddress.getLoopbackAddress(), 9301), Version.V_6_6_0))).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.jobIsEligibleForMigration("pre-min-version", clusterState)). }
false;public;0;10;;public void testJobIsEligibleForMigration_givenJobNotInClusterState() {     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.jobIsEligibleForMigration("not-in-state", clusterState)). }
false;public;0;23;;public void testJobIsEligibleForMigration_givenDeletingJob() {     Job deletingJob = JobTests.buildJobBuilder("deleting-job").setDeleting(true).build().     MlMetadata.Builder mlMetadata = new MlMetadata.Builder().putJob(deletingJob, false).     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     tasksBuilder.addTask(MlTasks.jobTaskId(deletingJob.getId()), MlTasks.JOB_TASK_NAME, new OpenJobAction.JobParams(deletingJob.getId()), new PersistentTasksCustomMetaData.Assignment("node-1", "test assignment")).     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).metaData(MetaData.builder().putCustom(MlMetadata.TYPE, mlMetadata.build()).putCustom(PersistentTasksCustomMetaData.TYPE, tasksBuilder.build())).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.jobIsEligibleForMigration(deletingJob.getId(), clusterState)). }
false;public;0;22;;public void testJobIsEligibleForMigration_givenOpenJob() {     Job openJob = JobTests.buildJobBuilder("open-job").build().     MlMetadata.Builder mlMetadata = new MlMetadata.Builder().putJob(openJob, false).     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     tasksBuilder.addTask(MlTasks.jobTaskId(openJob.getId()), MlTasks.JOB_TASK_NAME, new OpenJobAction.JobParams(openJob.getId()), new PersistentTasksCustomMetaData.Assignment("node-1", "test assignment")).     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).metaData(MetaData.builder().putCustom(MlMetadata.TYPE, mlMetadata.build()).putCustom(PersistentTasksCustomMetaData.TYPE, tasksBuilder.build())).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.jobIsEligibleForMigration(openJob.getId(), clusterState)). }
false;public;0;22;;public void testJobIsEligibleForMigration_givenOpenJobAndAndMigrationIsDisabled() {     Job openJob = JobTests.buildJobBuilder("open-job").build().     MlMetadata.Builder mlMetadata = new MlMetadata.Builder().putJob(openJob, false).     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     tasksBuilder.addTask(MlTasks.jobTaskId(openJob.getId()), MlTasks.JOB_TASK_NAME, new OpenJobAction.JobParams(openJob.getId()), new PersistentTasksCustomMetaData.Assignment("node-1", "test assignment")).     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).metaData(MetaData.builder().putCustom(MlMetadata.TYPE, mlMetadata.build()).putCustom(PersistentTasksCustomMetaData.TYPE, tasksBuilder.build())).build().     Settings settings = newSettings(false).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.jobIsEligibleForMigration(openJob.getId(), clusterState)). }
false;public;0;20;;public void testJobIsEligibleForMigration_givenClosedJob() {     Job closedJob = JobTests.buildJobBuilder("closed-job").build().     MlMetadata.Builder mlMetadata = new MlMetadata.Builder().putJob(closedJob, false).     MetaData.Builder metaData = MetaData.builder().     RoutingTable.Builder routingTable = RoutingTable.builder().     addMlConfigIndex(metaData, routingTable).     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).metaData(metaData.putCustom(MlMetadata.TYPE, mlMetadata.build())).routingTable(routingTable.build()).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertTrue(check.jobIsEligibleForMigration(closedJob.getId(), clusterState)). }
false;public;0;27;;public void testJobIsEligibleForMigration_givenOpenAndUnallocatedJob() {     Job openJob = JobTests.buildJobBuilder("open-job").build().     MlMetadata.Builder mlMetadata = new MlMetadata.Builder().putJob(openJob, false).     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     tasksBuilder.addTask(MlTasks.jobTaskId(openJob.getId()), MlTasks.JOB_TASK_NAME, new OpenJobAction.JobParams(openJob.getId()), new PersistentTasksCustomMetaData.Assignment(null, "no assignment")).     MetaData.Builder metaData = MetaData.builder().     RoutingTable.Builder routingTable = RoutingTable.builder().     addMlConfigIndex(metaData, routingTable).     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).metaData(metaData.putCustom(MlMetadata.TYPE, mlMetadata.build()).putCustom(PersistentTasksCustomMetaData.TYPE, tasksBuilder.build())).routingTable(routingTable.build()).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertTrue(check.jobIsEligibleForMigration(openJob.getId(), clusterState)). }
false;public;0;15;;public void testDatafeedIsEligibleForMigration_givenNodesNotUpToVersion() {     // mixed 6.5 and 6.6 nodes     ClusterState clusterState = ClusterState.builder(new ClusterName("_name")).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("node_id1", new TransportAddress(InetAddress.getLoopbackAddress(), 9300), Version.V_6_5_0)).add(new DiscoveryNode("node_id2", new TransportAddress(InetAddress.getLoopbackAddress(), 9301), Version.V_6_6_0))).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.datafeedIsEligibleForMigration("pre-min-version", clusterState)). }
false;public;0;9;;public void testDatafeedIsEligibleForMigration_givenDatafeedNotInClusterState() {     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.datafeedIsEligibleForMigration("not-in-state", clusterState)). }
false;public;0;25;;public void testDatafeedIsEligibleForMigration_givenStartedDatafeed() {     Job openJob = JobTests.buildJobBuilder("open-job").build().     MlMetadata.Builder mlMetadata = new MlMetadata.Builder().putJob(openJob, false).     mlMetadata.putDatafeed(createCompatibleDatafeed(openJob.getId()), Collections.emptyMap()).     String datafeedId = "df-" + openJob.getId().     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     tasksBuilder.addTask(MlTasks.datafeedTaskId(datafeedId), MlTasks.DATAFEED_TASK_NAME, new StartDatafeedAction.DatafeedParams(datafeedId, 0L), new PersistentTasksCustomMetaData.Assignment("node-1", "test assignment")).     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).metaData(MetaData.builder().putCustom(MlMetadata.TYPE, mlMetadata.build()).putCustom(PersistentTasksCustomMetaData.TYPE, tasksBuilder.build())).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.datafeedIsEligibleForMigration(datafeedId, clusterState)). }
false;public;0;25;;public void testDatafeedIsEligibleForMigration_givenStartedDatafeedAndMigrationIsDisabled() {     Job openJob = JobTests.buildJobBuilder("open-job").build().     MlMetadata.Builder mlMetadata = new MlMetadata.Builder().putJob(openJob, false).     mlMetadata.putDatafeed(createCompatibleDatafeed(openJob.getId()), Collections.emptyMap()).     String datafeedId = "df-" + openJob.getId().     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     tasksBuilder.addTask(MlTasks.datafeedTaskId(datafeedId), MlTasks.DATAFEED_TASK_NAME, new StartDatafeedAction.DatafeedParams(datafeedId, 0L), new PersistentTasksCustomMetaData.Assignment("node-1", "test assignment")).     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).metaData(MetaData.builder().putCustom(MlMetadata.TYPE, mlMetadata.build()).putCustom(PersistentTasksCustomMetaData.TYPE, tasksBuilder.build())).build().     Settings settings = newSettings(false).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertFalse(check.datafeedIsEligibleForMigration(datafeedId, clusterState)). }
false;public;0;22;;public void testDatafeedIsEligibleForMigration_givenStoppedDatafeed() {     Job job = JobTests.buildJobBuilder("closed-job").build().     MlMetadata.Builder mlMetadata = new MlMetadata.Builder().putJob(job, false).     mlMetadata.putDatafeed(createCompatibleDatafeed(job.getId()), Collections.emptyMap()).     String datafeedId = "df-" + job.getId().     MetaData.Builder metaData = MetaData.builder().     RoutingTable.Builder routingTable = RoutingTable.builder().     addMlConfigIndex(metaData, routingTable).     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).metaData(metaData.putCustom(MlMetadata.TYPE, mlMetadata.build())).routingTable(routingTable.build()).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertTrue(check.datafeedIsEligibleForMigration(datafeedId, clusterState)). }
false;public;0;29;;public void testDatafeedIsEligibleForMigration_givenUnallocatedDatafeed() {     Job job = JobTests.buildJobBuilder("closed-job").build().     MlMetadata.Builder mlMetadata = new MlMetadata.Builder().putJob(job, false).     mlMetadata.putDatafeed(createCompatibleDatafeed(job.getId()), Collections.emptyMap()).     String datafeedId = "df-" + job.getId().     MetaData.Builder metaData = MetaData.builder().     RoutingTable.Builder routingTable = RoutingTable.builder().     addMlConfigIndex(metaData, routingTable).     PersistentTasksCustomMetaData.Builder tasksBuilder = PersistentTasksCustomMetaData.builder().     tasksBuilder.addTask(MlTasks.datafeedTaskId(datafeedId), MlTasks.DATAFEED_TASK_NAME, new StartDatafeedAction.DatafeedParams(datafeedId, 0L), new PersistentTasksCustomMetaData.Assignment(null, "no assignment")).     ClusterState clusterState = ClusterState.builder(new ClusterName("migratortests")).metaData(metaData.putCustom(MlMetadata.TYPE, mlMetadata.build()).putCustom(PersistentTasksCustomMetaData.TYPE, tasksBuilder.build())).routingTable(routingTable.build()).build().     Settings settings = newSettings(true).     givenClusterSettings(settings).     MlConfigMigrationEligibilityCheck check = new MlConfigMigrationEligibilityCheck(settings, clusterService).     assertTrue(check.datafeedIsEligibleForMigration(datafeedId, clusterState)). }
false;private;1;5;;private void givenClusterSettings(Settings settings) {     ClusterSettings clusterSettings = new ClusterSettings(settings, new HashSet<>(Collections.singletonList(MlConfigMigrationEligibilityCheck.ENABLE_CONFIG_MIGRATION))).     when(clusterService.getClusterSettings()).thenReturn(clusterSettings). }
false;private,static;1;5;;private static Settings newSettings(boolean migrationEnabled) {     return Settings.builder().put(MlConfigMigrationEligibilityCheck.ENABLE_CONFIG_MIGRATION.getKey(), migrationEnabled).build(). }
false;private;1;7;;private DatafeedConfig createCompatibleDatafeed(String jobId) {     // create a datafeed without aggregations or anything     // else that may cause validation errors     DatafeedConfig.Builder datafeedBuilder = new DatafeedConfig.Builder("df-" + jobId, jobId).     datafeedBuilder.setIndices(Collections.singletonList("my_index")).     return datafeedBuilder.build(). }
