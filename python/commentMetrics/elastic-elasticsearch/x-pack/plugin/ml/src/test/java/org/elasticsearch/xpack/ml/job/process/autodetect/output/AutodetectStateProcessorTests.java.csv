commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void initialize() throws IOException {     client = mock(Client.class).     @SuppressWarnings("unchecked")     ActionFuture<BulkResponse> bulkResponseFuture = mock(ActionFuture.class).     stateProcessor = spy(new AutodetectStateProcessor(client, JOB_ID)).     when(client.bulk(any(BulkRequest.class))).thenReturn(bulkResponseFuture).     ThreadPool threadPool = mock(ThreadPool.class).     when(client.threadPool()).thenReturn(threadPool).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)). }
false;public;0;4;;@After public void verifyNoMoreClientInteractions() {     Mockito.verifyNoMoreInteractions(client). }
false;public;0;14;;public void testStateRead() throws IOException {     ByteArrayInputStream stream = new ByteArrayInputStream(STATE_SAMPLE.getBytes(StandardCharsets.UTF_8)).     stateProcessor.process(stream).     ArgumentCaptor<BytesReference> bytesRefCaptor = ArgumentCaptor.forClass(BytesReference.class).     verify(stateProcessor, times(3)).persist(bytesRefCaptor.capture()).     String[] threeStates = STATE_SAMPLE.split("\0").     List<BytesReference> capturedBytes = bytesRefCaptor.getAllValues().     assertEquals(threeStates[0], capturedBytes.get(0).utf8ToString()).     assertEquals(threeStates[1], capturedBytes.get(1).utf8ToString()).     assertEquals(threeStates[2], capturedBytes.get(2).utf8ToString()).     verify(client, times(3)).bulk(any(BulkRequest.class)).     verify(client, times(3)).threadPool(). }
false;public;0;9;;public void testStateReadGivenConsecutiveZeroBytes() throws IOException {     String zeroBytes = "\0\0\0\0\0\0".     ByteArrayInputStream stream = new ByteArrayInputStream(zeroBytes.getBytes(StandardCharsets.UTF_8)).     stateProcessor.process(stream).     verify(stateProcessor, never()).persist(any()).     Mockito.verifyNoMoreInteractions(client). }
false;public;0;9;;public void testStateReadGivenConsecutiveSpacesFollowedByZeroByte() throws IOException {     String zeroBytes = "        \n\0".     ByteArrayInputStream stream = new ByteArrayInputStream(zeroBytes.getBytes(StandardCharsets.UTF_8)).     stateProcessor.process(stream).     verify(stateProcessor, times(1)).persist(any()).     Mockito.verifyNoMoreInteractions(client). }
true;public;0;17;/**  * This test is designed to pick up N-squared processing in the state consumption code.  The size of the state document  * is comparable to those that the C++ code will create for a huge model.  10 seconds is an overestimate of the time  * required to avoid spurious failures due to VM stalls - on a reasonable spec laptop this should take around 1 second.  */ ;/**  * This test is designed to pick up N-squared processing in the state consumption code.  The size of the state document  * is comparable to those that the C++ code will create for a huge model.  10 seconds is an overestimate of the time  * required to avoid spurious failures due to VM stalls - on a reasonable spec laptop this should take around 1 second.  */ @Timeout(millis = 10 * 1000) public void testLargeStateRead() throws Exception {     // 10 for header and separators     StringBuilder builder = new StringBuilder(NUM_LARGE_DOCS * (LARGE_DOC_SIZE + 10)).     for (int docNum = 1. docNum <= NUM_LARGE_DOCS. ++docNum) {         builder.append("{\"index\":{\"_index\":\"header").append(docNum).append("\"}}\n").         for (int count = 0. count < (LARGE_DOC_SIZE / "data".length()). ++count) {             builder.append("data").         }         builder.append("\n\0").     }     ByteArrayInputStream stream = new ByteArrayInputStream(builder.toString().getBytes(StandardCharsets.UTF_8)).     stateProcessor.process(stream).     verify(stateProcessor, times(NUM_LARGE_DOCS)).persist(any()).     verify(client, times(NUM_LARGE_DOCS)).bulk(any(BulkRequest.class)).     verify(client, times(NUM_LARGE_DOCS)).threadPool(). }
