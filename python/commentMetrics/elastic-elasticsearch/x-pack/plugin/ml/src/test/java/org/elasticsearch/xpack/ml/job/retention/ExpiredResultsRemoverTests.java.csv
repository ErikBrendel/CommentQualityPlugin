commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public Void answer(InvocationOnMock invocationOnMock) throws Throwable {     capturedDeleteByQueryRequests.add((DeleteByQueryRequest) invocationOnMock.getArguments()[1]).     ActionListener<BulkByScrollResponse> listener = (ActionListener<BulkByScrollResponse>) invocationOnMock.getArguments()[2].     listener.onResponse(null).     return null. }
false;public;0;19;;@Before public void setUpTests() {     capturedDeleteByQueryRequests = new ArrayList<>().     client = mock(Client.class).     ThreadPool threadPool = mock(ThreadPool.class).     when(client.threadPool()).thenReturn(threadPool).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)).     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) throws Throwable {             capturedDeleteByQueryRequests.add((DeleteByQueryRequest) invocationOnMock.getArguments()[1]).             ActionListener<BulkByScrollResponse> listener = (ActionListener<BulkByScrollResponse>) invocationOnMock.getArguments()[2].             listener.onResponse(null).             return null.         }     }).when(client).execute(same(DeleteByQueryAction.INSTANCE), any(), any()).     listener = mock(ActionListener.class). }
false;public;0;10;;public void testRemove_GivenNoJobs() throws IOException {     givenClientRequestsSucceed().     givenJobs(Collections.emptyList()).     createExpiredResultsRemover().remove(listener).     verify(listener).onResponse(true).     verify(client).search(any()).     Mockito.verifyNoMoreInteractions(client). }
false;public;0;13;;public void testRemove_GivenJobsWithoutRetentionPolicy() throws IOException {     givenClientRequestsSucceed().     givenJobs(Arrays.asList(JobTests.buildJobBuilder("foo").build(), JobTests.buildJobBuilder("bar").build())).     createExpiredResultsRemover().remove(listener).     verify(listener).onResponse(true).     verify(client).search(any()).     Mockito.verifyNoMoreInteractions(client). }
false;public;0;17;;public void testRemove_GivenJobsWithAndWithoutRetentionPolicy() throws Exception {     givenClientRequestsSucceed().     givenJobs(Arrays.asList(JobTests.buildJobBuilder("none").build(), JobTests.buildJobBuilder("results-1").setResultsRetentionDays(10L).build(), JobTests.buildJobBuilder("results-2").setResultsRetentionDays(20L).build())).     createExpiredResultsRemover().remove(listener).     assertThat(capturedDeleteByQueryRequests.size(), equalTo(2)).     DeleteByQueryRequest dbqRequest = capturedDeleteByQueryRequests.get(0).     assertThat(dbqRequest.indices(), equalTo(new String[] { AnomalyDetectorsIndex.jobResultsAliasedName("results-1") })).     dbqRequest = capturedDeleteByQueryRequests.get(1).     assertThat(dbqRequest.indices(), equalTo(new String[] { AnomalyDetectorsIndex.jobResultsAliasedName("results-2") })).     verify(listener).onResponse(true). }
false;public;0;15;;public void testRemove_GivenClientRequestsFailed() throws IOException {     givenClientRequestsFailed().     givenJobs(Arrays.asList(JobTests.buildJobBuilder("none").build(), JobTests.buildJobBuilder("results-1").setResultsRetentionDays(10L).build(), JobTests.buildJobBuilder("results-2").setResultsRetentionDays(20L).build())).     createExpiredResultsRemover().remove(listener).     assertThat(capturedDeleteByQueryRequests.size(), equalTo(1)).     DeleteByQueryRequest dbqRequest = capturedDeleteByQueryRequests.get(0).     assertThat(dbqRequest.indices(), equalTo(new String[] { AnomalyDetectorsIndex.jobResultsAliasedName("results-1") })).     verify(listener).onFailure(any()). }
false;private;0;3;;private void givenClientRequestsSucceed() {     givenClientRequests(true). }
false;private;0;3;;private void givenClientRequestsFailed() {     givenClientRequests(false). }
false;public;1;14;;@Override public Void answer(InvocationOnMock invocationOnMock) throws Throwable {     capturedDeleteByQueryRequests.add((DeleteByQueryRequest) invocationOnMock.getArguments()[1]).     ActionListener<BulkByScrollResponse> listener = (ActionListener<BulkByScrollResponse>) invocationOnMock.getArguments()[2].     if (shouldSucceed) {         BulkByScrollResponse bulkByScrollResponse = mock(BulkByScrollResponse.class).         when(bulkByScrollResponse.getDeleted()).thenReturn(42L).         listener.onResponse(bulkByScrollResponse).     } else {         listener.onFailure(new RuntimeException("failed")).     }     return null. }
false;private;1;18;;private void givenClientRequests(boolean shouldSucceed) {     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocationOnMock) throws Throwable {             capturedDeleteByQueryRequests.add((DeleteByQueryRequest) invocationOnMock.getArguments()[1]).             ActionListener<BulkByScrollResponse> listener = (ActionListener<BulkByScrollResponse>) invocationOnMock.getArguments()[2].             if (shouldSucceed) {                 BulkByScrollResponse bulkByScrollResponse = mock(BulkByScrollResponse.class).                 when(bulkByScrollResponse.getDeleted()).thenReturn(42L).                 listener.onResponse(bulkByScrollResponse).             } else {                 listener.onFailure(new RuntimeException("failed")).             }             return null.         }     }).when(client).execute(same(DeleteByQueryAction.INSTANCE), any(), any()). }
false;private;1;7;;private void givenJobs(List<Job> jobs) throws IOException {     SearchResponse response = AbstractExpiredJobDataRemoverTests.createSearchResponse(jobs).     ActionFuture<SearchResponse> future = mock(ActionFuture.class).     when(future.actionGet()).thenReturn(response).     when(client.search(any())).thenReturn(future). }
false;private;0;3;;private ExpiredResultsRemover createExpiredResultsRemover() {     return new ExpiredResultsRemover(client, mock(Auditor.class)). }
