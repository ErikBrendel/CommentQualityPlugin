commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testUpdateBucket() {     BucketNormalizable bn = createBucketNormalizable().     JobRenormalizedResultsPersister persister = createJobRenormalizedResultsPersister().     persister.updateBucket(bn).     assertEquals(3, persister.getBulkRequest().numberOfActions()).     assertEquals("foo-index", persister.getBulkRequest().requests().get(0).index()). }
false;public;0;7;;public void testExecuteRequestResetsBulkRequest() {     BucketNormalizable bn = createBucketNormalizable().     JobRenormalizedResultsPersister persister = createJobRenormalizedResultsPersister().     persister.updateBucket(bn).     persister.executeRequest().     assertEquals(0, persister.getBulkRequest().numberOfActions()). }
false;public;0;14;;public void testBulkRequestExecutesWhenReachMaxDocs() {     BulkResponse bulkResponse = mock(BulkResponse.class).     Client client = new MockClientBuilder("cluster").bulk(bulkResponse).build().     JobRenormalizedResultsPersister persister = new JobRenormalizedResultsPersister("foo", client).     ModelPlot modelPlot = new ModelPlot("foo", new Date(), 123456, 0).     for (int i = 0. i <= JobRenormalizedResultsPersister.BULK_LIMIT. i++) {         persister.updateResult("bar", "index-foo", modelPlot).     }     verify(client, times(1)).bulk(any()).     verify(client, times(1)).threadPool().     verifyNoMoreInteractions(client). }
false;private;0;7;;private JobRenormalizedResultsPersister createJobRenormalizedResultsPersister() {     BulkResponse bulkResponse = mock(BulkResponse.class).     when(bulkResponse.hasFailures()).thenReturn(false).     Client client = new MockClientBuilder("cluster").bulk(bulkResponse).build().     return new JobRenormalizedResultsPersister("foo", client). }
false;private;0;7;;private BucketNormalizable createBucketNormalizable() {     Date now = new Date().     Bucket bucket = new Bucket("foo", now, 1).     bucket.addBucketInfluencer(new BucketInfluencer("foo", now, 1)).     bucket.addBucketInfluencer(new BucketInfluencer("foo", now, 1)).     return new BucketNormalizable(bucket, "foo-index"). }
