commented;modifiers;parameterAmount;loc;comment;code
false;public;0;36;;public void testRestoreStateToStream() throws Exception {     String snapshotId = "123".     Map<String, Object> categorizerState = new HashMap<>().     categorizerState.put("catName", "catVal").     Map<String, Object> modelState1 = new HashMap<>().     modelState1.put("modName1", "modVal1").     Map<String, Object> modelState2 = new HashMap<>().     modelState2.put("modName2", "modVal2").     SearchRequestBuilder builder1 = prepareSearchBuilder(createSearchResponse(Collections.singletonList(modelState1)), QueryBuilders.idsQuery().addIds(ModelState.documentId(JOB_ID, snapshotId, 1))).     SearchRequestBuilder builder2 = prepareSearchBuilder(createSearchResponse(Collections.singletonList(modelState2)), QueryBuilders.idsQuery().addIds(ModelState.documentId(JOB_ID, snapshotId, 2))).     SearchRequestBuilder builder3 = prepareSearchBuilder(createSearchResponse(Collections.singletonList(categorizerState)), QueryBuilders.idsQuery().addIds(CategorizerState.documentId(JOB_ID, 1))).     SearchRequestBuilder builder4 = prepareSearchBuilder(createSearchResponse(Collections.emptyList()), QueryBuilders.idsQuery().addIds(CategorizerState.documentId(JOB_ID, 2))).     MockClientBuilder clientBuilder = new MockClientBuilder(CLUSTER_NAME).addClusterStatusYellowResponse().prepareSearches(AnomalyDetectorsIndex.jobStateIndexPattern(), builder1, builder2, builder3, builder4).     ModelSnapshot modelSnapshot = new ModelSnapshot.Builder(JOB_ID).setSnapshotId(snapshotId).setSnapshotDocCount(2).build().     ByteArrayOutputStream stream = new ByteArrayOutputStream().     StateStreamer stateStreamer = new StateStreamer(clientBuilder.build()).     stateStreamer.restoreStateToStream(JOB_ID, modelSnapshot, stream).     String[] restoreData = stream.toString(StandardCharsets.UTF_8.name()).split("\0").     assertEquals(3, restoreData.length).     assertEquals("{\"modName1\":\"modVal1\"}", restoreData[0]).     assertEquals("{\"modName2\":\"modVal2\"}", restoreData[1]).     assertEquals("{\"catName\":\"catVal\"}", restoreData[2]). }
false;public;0;10;;public void testCancelBeforeRestoreWasCalled() throws IOException {     ModelSnapshot modelSnapshot = new ModelSnapshot.Builder(JOB_ID).setSnapshotId("snapshot_id").setSnapshotDocCount(2).build().     OutputStream outputStream = mock(OutputStream.class).     StateStreamer stateStreamer = new StateStreamer(mock(Client.class)).     stateStreamer.cancel().     stateStreamer.restoreStateToStream(JOB_ID, modelSnapshot, outputStream).     Mockito.verifyNoMoreInteractions(outputStream). }
false;private,static;1;12;;private static SearchResponse createSearchResponse(List<Map<String, Object>> source) throws IOException {     SearchResponse searchResponse = mock(SearchResponse.class).     SearchHit[] hits = new SearchHit[source.size()].     int i = 0.     for (Map<String, Object> s : source) {         SearchHit hit = new SearchHit(1).sourceRef(BytesReference.bytes(XContentFactory.jsonBuilder().map(s))).         hits[i++] = hit.     }     SearchHits searchHits = new SearchHits(hits, null, (float) 0.0).     when(searchResponse.getHits()).thenReturn(searchHits).     return searchResponse. }
false;private,static;2;15;;private static SearchRequestBuilder prepareSearchBuilder(SearchResponse response, QueryBuilder queryBuilder) {     SearchRequestBuilder builder = mock(SearchRequestBuilder.class).     when(builder.setTypes(any())).thenReturn(builder).     when(builder.addSort(any(SortBuilder.class))).thenReturn(builder).     when(builder.setQuery(queryBuilder)).thenReturn(builder).     when(builder.setPostFilter(any())).thenReturn(builder).     when(builder.setFrom(anyInt())).thenReturn(builder).     when(builder.setSize(anyInt())).thenReturn(builder).     when(builder.setFetchSource(eq(true))).thenReturn(builder).     when(builder.addDocValueField(any(String.class))).thenReturn(builder).     when(builder.addDocValueField(any(String.class), any(String.class))).thenReturn(builder).     when(builder.addSort(any(String.class), any(SortOrder.class))).thenReturn(builder).     when(builder.get()).thenReturn(response).     return builder. }
