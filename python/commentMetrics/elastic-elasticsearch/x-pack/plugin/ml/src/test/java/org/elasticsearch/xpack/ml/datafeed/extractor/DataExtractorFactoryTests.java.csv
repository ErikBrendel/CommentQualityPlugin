commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Before public void setUpTests() {     client = mock(Client.class).     ThreadPool threadPool = mock(ThreadPool.class).     when(client.threadPool()).thenReturn(threadPool).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)).     fieldsCapabilities = mock(FieldCapabilitiesResponse.class).     givenAggregatableField("time", "date").     givenAggregatableField("field", "keyword").     getRollupIndexResponse = mock(GetRollupIndexCapsAction.Response.class).     when(getRollupIndexResponse.getJobs()).thenReturn(new HashMap<>()).     doAnswer(invocationMock -> {         @SuppressWarnings("raw_types")         ActionListener listener = (ActionListener) invocationMock.getArguments()[2].         listener.onResponse(fieldsCapabilities).         return null.     }).when(client).execute(same(FieldCapabilitiesAction.INSTANCE), any(), any()).     doAnswer(invocationMock -> {         @SuppressWarnings("raw_types")         ActionListener listener = (ActionListener) invocationMock.getArguments()[2].         listener.onResponse(getRollupIndexResponse).         return null.     }).when(client).execute(same(GetRollupIndexCapsAction.INSTANCE), any(), any()). }
false;public;0;14;;public void testCreateDataExtractorFactoryGivenDefaultScroll() {     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").build().     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> assertThat(dataExtractorFactory, instanceOf(ChunkedDataExtractorFactory.class)), e -> fail()).     DataExtractorFactory.create(client, datafeedConfig, jobBuilder.build(new Date()), listener). }
false;public;0;15;;public void testCreateDataExtractorFactoryGivenScrollWithAutoChunk() {     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").     datafeedConfig.setChunkingConfig(ChunkingConfig.newAuto()).     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> assertThat(dataExtractorFactory, instanceOf(ChunkedDataExtractorFactory.class)), e -> fail()).     DataExtractorFactory.create(client, datafeedConfig.build(), jobBuilder.build(new Date()), listener). }
false;public;0;15;;public void testCreateDataExtractorFactoryGivenScrollWithOffChunk() {     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").     datafeedConfig.setChunkingConfig(ChunkingConfig.newOff()).     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> assertThat(dataExtractorFactory, instanceOf(ScrollDataExtractorFactory.class)), e -> fail()).     DataExtractorFactory.create(client, datafeedConfig.build(), jobBuilder.build(new Date()), listener). }
false;public;0;17;;public void testCreateDataExtractorFactoryGivenDefaultAggregation() {     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").     MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").     datafeedConfig.setParsedAggregations(AggregatorFactories.builder().addAggregator(AggregationBuilders.histogram("time").interval(300000).subAggregation(maxTime).field("time"))).     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> assertThat(dataExtractorFactory, instanceOf(ChunkedDataExtractorFactory.class)), e -> fail()).     DataExtractorFactory.create(client, datafeedConfig.build(), jobBuilder.build(new Date()), listener). }
false;public;0;18;;public void testCreateDataExtractorFactoryGivenAggregationWithOffChunk() {     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").     datafeedConfig.setChunkingConfig(ChunkingConfig.newOff()).     MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").     datafeedConfig.setParsedAggregations(AggregatorFactories.builder().addAggregator(AggregationBuilders.histogram("time").interval(300000).subAggregation(maxTime).field("time"))).     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> assertThat(dataExtractorFactory, instanceOf(AggregationDataExtractorFactory.class)), e -> fail()).     DataExtractorFactory.create(client, datafeedConfig.build(), jobBuilder.build(new Date()), listener). }
false;public;0;18;;public void testCreateDataExtractorFactoryGivenDefaultAggregationWithAutoChunk() {     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").     MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").     datafeedConfig.setParsedAggregations(AggregatorFactories.builder().addAggregator(AggregationBuilders.histogram("time").interval(300000).subAggregation(maxTime).field("time"))).     datafeedConfig.setChunkingConfig(ChunkingConfig.newAuto()).     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> assertThat(dataExtractorFactory, instanceOf(ChunkedDataExtractorFactory.class)), e -> fail()).     DataExtractorFactory.create(client, datafeedConfig.build(), jobBuilder.build(new Date()), listener). }
false;public;0;19;;public void testCreateDataExtractorFactoryGivenRollupAndValidAggregation() {     givenAggregatableRollup("myField", "max", 5, "termField").     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").     datafeedConfig.setChunkingConfig(ChunkingConfig.newOff()).     MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").     MaxAggregationBuilder myField = AggregationBuilders.max("myField").field("myField").     TermsAggregationBuilder myTerm = AggregationBuilders.terms("termAgg").field("termField").subAggregation(myField).     datafeedConfig.setParsedAggregations(AggregatorFactories.builder().addAggregator(AggregationBuilders.dateHistogram("time").interval(600_000).subAggregation(maxTime).subAggregation(myTerm).field("time"))).     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> assertThat(dataExtractorFactory, instanceOf(RollupDataExtractorFactory.class)), e -> fail()).     DataExtractorFactory.create(client, datafeedConfig.build(), jobBuilder.build(new Date()), listener). }
false;public;0;19;;public void testCreateDataExtractorFactoryGivenRollupAndValidAggregationAndAutoChunk() {     givenAggregatableRollup("myField", "max", 5, "termField").     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").     datafeedConfig.setChunkingConfig(ChunkingConfig.newAuto()).     MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").     MaxAggregationBuilder myField = AggregationBuilders.max("myField").field("myField").     TermsAggregationBuilder myTerm = AggregationBuilders.terms("termAgg").field("termField").subAggregation(myField).     datafeedConfig.setParsedAggregations(AggregatorFactories.builder().addAggregator(AggregationBuilders.dateHistogram("time").interval(600_000).subAggregation(maxTime).subAggregation(myTerm).field("time"))).     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> assertThat(dataExtractorFactory, instanceOf(ChunkedDataExtractorFactory.class)), e -> fail()).     DataExtractorFactory.create(client, datafeedConfig.build(), jobBuilder.build(new Date()), listener). }
false;public;0;19;;public void testCreateDataExtractorFactoryGivenRollupButNoAggregations() {     givenAggregatableRollup("myField", "max", 5).     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").     datafeedConfig.setChunkingConfig(ChunkingConfig.newOff()).     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> fail(), e -> {         assertThat(e.getMessage(), equalTo("Aggregations are required when using Rollup indices")).         assertThat(e, instanceOf(IllegalArgumentException.class)).     }).     DataExtractorFactory.create(client, datafeedConfig.build(), jobBuilder.build(new Date()), listener). }
false;public;0;24;;public void testCreateDataExtractorFactoryGivenRollupWithBadInterval() {     givenAggregatableRollup("myField", "max", 7, "termField").     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").     datafeedConfig.setChunkingConfig(ChunkingConfig.newOff()).     MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").     MaxAggregationBuilder myField = AggregationBuilders.max("myField").field("myField").     TermsAggregationBuilder myTerm = AggregationBuilders.terms("termAgg").field("termField").subAggregation(myField).     datafeedConfig.setParsedAggregations(AggregatorFactories.builder().addAggregator(AggregationBuilders.dateHistogram("time").interval(600_000).subAggregation(maxTime).subAggregation(myTerm).field("time"))).     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> fail(), e -> {         assertThat(e.getMessage(), containsString("Rollup capabilities do not have a [date_histogram] aggregation with an interval " + "that is a multiple of the datafeed's interval.")).         assertThat(e, instanceOf(IllegalArgumentException.class)).     }).     DataExtractorFactory.create(client, datafeedConfig.build(), jobBuilder.build(new Date()), listener). }
false;public;0;23;;public void testCreateDataExtractorFactoryGivenRollupMissingTerms() {     givenAggregatableRollup("myField", "max", 5).     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").     datafeedConfig.setChunkingConfig(ChunkingConfig.newOff()).     MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").     MaxAggregationBuilder myField = AggregationBuilders.max("myField").field("myField").     TermsAggregationBuilder myTerm = AggregationBuilders.terms("termAgg").field("termField").subAggregation(myField).     datafeedConfig.setParsedAggregations(AggregatorFactories.builder().addAggregator(AggregationBuilders.dateHistogram("time").interval(600_000).subAggregation(maxTime).subAggregation(myTerm).field("time"))).     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> fail(), e -> {         assertThat(e.getMessage(), containsString("Rollup capabilities do not support all the datafeed aggregations at the desired interval.")).         assertThat(e, instanceOf(IllegalArgumentException.class)).     }).     DataExtractorFactory.create(client, datafeedConfig.build(), jobBuilder.build(new Date()), listener). }
false;public;0;23;;public void testCreateDataExtractorFactoryGivenRollupMissingMetric() {     givenAggregatableRollup("myField", "max", 5, "termField").     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     DatafeedConfig.Builder datafeedConfig = DatafeedManagerTests.createDatafeedConfig("datafeed1", "foo").     datafeedConfig.setChunkingConfig(ChunkingConfig.newOff()).     MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").     MaxAggregationBuilder myField = AggregationBuilders.max("myField").field("otherField").     TermsAggregationBuilder myTerm = AggregationBuilders.terms("termAgg").field("termField").subAggregation(myField).     datafeedConfig.setParsedAggregations(AggregatorFactories.builder().addAggregator(AggregationBuilders.dateHistogram("time").interval(600_000).subAggregation(maxTime).subAggregation(myTerm).field("time"))).     ActionListener<DataExtractorFactory> listener = ActionListener.wrap(dataExtractorFactory -> fail(), e -> {         assertThat(e.getMessage(), containsString("Rollup capabilities do not support all the datafeed aggregations at the desired interval.")).         assertThat(e, instanceOf(IllegalArgumentException.class)).     }).     DataExtractorFactory.create(client, datafeedConfig.build(), jobBuilder.build(new Date()), listener). }
false;private;4;22;;private void givenAggregatableRollup(String field, String type, int minuteInterval, String... groupByTerms) {     List<MetricConfig> metricConfigs = Arrays.asList(new MetricConfig(field, Collections.singletonList(type)), new MetricConfig("time", Arrays.asList("min", "max"))).     TermsGroupConfig termsGroupConfig = null.     if (groupByTerms.length > 0) {         termsGroupConfig = new TermsGroupConfig(groupByTerms).     }     RollupJobConfig rollupJobConfig = new RollupJobConfig("rollupJob1", "myIndexes*", "myIndex_rollup", "*/30 * * * * ?", 300, new GroupConfig(new DateHistogramGroupConfig("time", DateHistogramInterval.minutes(minuteInterval)), null, termsGroupConfig), metricConfigs, null).     RollupJobCaps rollupJobCaps = new RollupJobCaps(rollupJobConfig).     RollableIndexCaps rollableIndexCaps = new RollableIndexCaps("myIndex_rollup", Collections.singletonList(rollupJobCaps)).     Map<String, RollableIndexCaps> jobs = new HashMap<>(1).     jobs.put("rollupJob1", rollableIndexCaps).     when(getRollupIndexResponse.getJobs()).thenReturn(jobs). }
false;private;2;8;;private void givenAggregatableField(String field, String type) {     FieldCapabilities fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isSearchable()).thenReturn(true).     when(fieldCaps.isAggregatable()).thenReturn(true).     Map<String, FieldCapabilities> fieldCapsMap = new HashMap<>().     fieldCapsMap.put(type, fieldCaps).     when(fieldsCapabilities.getField(field)).thenReturn(fieldCapsMap). }
