commented;modifiers;parameterAmount;loc;comment;code
false;private;1;3;;private Bucket generateBucket(Date timestamp) {     return new Bucket(JOB_ID, timestamp, BUCKET_SPAN). }
false;private;3;8;;private BucketInfluencer createTimeBucketInfluencer(Date timestamp, double probability, double anomalyScore) {     BucketInfluencer influencer = new BucketInfluencer(JOB_ID, timestamp, BUCKET_SPAN).     influencer.setInfluencerFieldName(BucketInfluencer.BUCKET_TIME).     influencer.setProbability(probability).     influencer.setInitialAnomalyScore(anomalyScore).     influencer.setAnomalyScore(anomalyScore).     return influencer. }
false;public;0;22;;public void testNormalize() throws IOException, InterruptedException {     ExecutorService threadpool = Executors.newScheduledThreadPool(1).     try {         NormalizerProcessFactory processFactory = mock(NormalizerProcessFactory.class).         when(processFactory.createNormalizerProcess(eq(JOB_ID), eq(QUANTILES_STATE), eq(BUCKET_SPAN), any())).thenReturn(new MultiplyingNormalizerProcess(FACTOR)).         Normalizer normalizer = new Normalizer(JOB_ID, processFactory, threadpool).         Bucket bucket = generateBucket(new Date(0)).         bucket.setAnomalyScore(0.0).         bucket.addBucketInfluencer(createTimeBucketInfluencer(bucket.getTimestamp(), 0.07, INITIAL_SCORE)).         List<Normalizable> asNormalizables = Arrays.asList(new BucketNormalizable(bucket, INDEX_NAME)).         normalizer.normalize(BUCKET_SPAN, asNormalizables, QUANTILES_STATE).         assertEquals(1, asNormalizables.size()).         assertEquals(FACTOR * INITIAL_SCORE, asNormalizables.get(0).getNormalizedScore(), 0.0001).     } finally {         threadpool.shutdown().     }     assertTrue(threadpool.awaitTermination(1, TimeUnit.SECONDS)). }
