commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@Before public void init() {     client = mock(Client.class).     ThreadPool threadPool = mock(ThreadPool.class).     when(client.threadPool()).thenReturn(threadPool).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)).     when(client.settings()).thenReturn(Settings.EMPTY).     auditor = mock(Auditor.class).     taskHandler = mock(Consumer.class).     datafeedJobBuilder = new DatafeedJobBuilder(client, Settings.EMPTY, xContentRegistry(), auditor, System::currentTimeMillis).     jobResultsProvider = mock(JobResultsProvider.class).     Mockito.doAnswer(invocationOnMock -> {         String jobId = (String) invocationOnMock.getArguments()[0].         @SuppressWarnings("unchecked")         Consumer<DataCounts> handler = (Consumer<DataCounts>) invocationOnMock.getArguments()[1].         handler.accept(new DataCounts(jobId)).         return null.     }).when(jobResultsProvider).dataCounts(any(), any(), any()).     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         Consumer<ResourceNotFoundException> consumer = (Consumer<ResourceNotFoundException>) invocationOnMock.getArguments()[3].         consumer.accept(new ResourceNotFoundException("dummy")).         return null.     }).when(jobResultsProvider).bucketsViaInternalClient(any(), any(), any(), any()).     jobConfigProvider = mock(JobConfigProvider.class).     datafeedConfigProvider = mock(DatafeedConfigProvider.class). }
false;public;0;25;;public void testBuild_GivenScrollDatafeedAndNewJob() throws Exception {     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     jobBuilder.setCreateTime(new Date()).     DatafeedConfig.Builder datafeed = DatafeedManagerTests.createDatafeedConfig("datafeed1", jobBuilder.getId()).     AtomicBoolean wasHandlerCalled = new AtomicBoolean(false).     ActionListener<DatafeedJob> datafeedJobHandler = ActionListener.wrap(datafeedJob -> {         assertThat(datafeedJob.isRunning(), is(true)).         assertThat(datafeedJob.isIsolated(), is(false)).         assertThat(datafeedJob.lastEndTimeMs(), is(nullValue())).         wasHandlerCalled.compareAndSet(false, true).     }, e -> fail()).     givenJob(jobBuilder).     givenDatafeed(datafeed).     datafeedJobBuilder.build("datafeed1", jobResultsProvider, jobConfigProvider, datafeedConfigProvider, datafeedJobHandler).     assertBusy(() -> wasHandlerCalled.get()). }
false;public;0;27;;public void testBuild_GivenScrollDatafeedAndOldJobWithLatestRecordTimestampAfterLatestBucket() throws Exception {     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     jobBuilder.setCreateTime(new Date()).     DatafeedConfig.Builder datafeed = DatafeedManagerTests.createDatafeedConfig("datafeed1", jobBuilder.getId()).     givenLatestTimes(7_200_000L, 3_600_000L).     AtomicBoolean wasHandlerCalled = new AtomicBoolean(false).     ActionListener<DatafeedJob> datafeedJobHandler = ActionListener.wrap(datafeedJob -> {         assertThat(datafeedJob.isRunning(), is(true)).         assertThat(datafeedJob.isIsolated(), is(false)).         assertThat(datafeedJob.lastEndTimeMs(), equalTo(7_200_000L)).         wasHandlerCalled.compareAndSet(false, true).     }, e -> fail()).     givenJob(jobBuilder).     givenDatafeed(datafeed).     datafeedJobBuilder.build("datafeed1", jobResultsProvider, jobConfigProvider, datafeedConfigProvider, datafeedJobHandler).     assertBusy(() -> wasHandlerCalled.get()). }
false;public;0;27;;public void testBuild_GivenScrollDatafeedAndOldJobWithLatestBucketAfterLatestRecordTimestamp() throws Exception {     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     jobBuilder.setCreateTime(new Date()).     DatafeedConfig.Builder datafeed = DatafeedManagerTests.createDatafeedConfig("datafeed1", jobBuilder.getId()).     givenLatestTimes(3_800_000L, 3_600_000L).     AtomicBoolean wasHandlerCalled = new AtomicBoolean(false).     ActionListener<DatafeedJob> datafeedJobHandler = ActionListener.wrap(datafeedJob -> {         assertThat(datafeedJob.isRunning(), is(true)).         assertThat(datafeedJob.isIsolated(), is(false)).         assertThat(datafeedJob.lastEndTimeMs(), equalTo(7_199_999L)).         wasHandlerCalled.compareAndSet(false, true).     }, e -> fail()).     givenJob(jobBuilder).     givenDatafeed(datafeed).     datafeedJobBuilder.build("datafeed1", jobResultsProvider, jobConfigProvider, datafeedConfigProvider, datafeedJobHandler).     assertBusy(() -> wasHandlerCalled.get()). }
false;public;0;25;;public void testBuild_GivenBucketsRequestFails() {     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setTimeField("time").     Job.Builder jobBuilder = DatafeedManagerTests.createDatafeedJob().     jobBuilder.setDataDescription(dataDescription).     jobBuilder.setCreateTime(new Date()).     DatafeedConfig.Builder datafeed = DatafeedManagerTests.createDatafeedConfig("datafeed1", jobBuilder.getId()).     Exception error = new RuntimeException("error").     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         Consumer<Exception> consumer = (Consumer<Exception>) invocationOnMock.getArguments()[3].         consumer.accept(error).         return null.     }).when(jobResultsProvider).bucketsViaInternalClient(any(), any(), any(), any()).     givenJob(jobBuilder).     givenDatafeed(datafeed).     datafeedJobBuilder.build("datafeed1", jobResultsProvider, jobConfigProvider, datafeedConfigProvider, ActionListener.wrap(datafeedJob -> fail(), taskHandler)).     verify(taskHandler).accept(error). }
false;private;1;8;;private void givenJob(Job.Builder job) {     Mockito.doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         ActionListener<Job.Builder> handler = (ActionListener<Job.Builder>) invocationOnMock.getArguments()[1].         handler.onResponse(job).         return null.     }).when(jobConfigProvider).getJob(eq(job.getId()), any()). }
false;private;1;8;;private void givenDatafeed(DatafeedConfig.Builder datafeed) {     Mockito.doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         ActionListener<DatafeedConfig.Builder> handler = (ActionListener<DatafeedConfig.Builder>) invocationOnMock.getArguments()[1].         handler.onResponse(datafeed).         return null.     }).when(datafeedConfigProvider).getDatafeedConfig(eq(datafeed.getId()), any()). }
false;private;2;21;;private void givenLatestTimes(long latestRecordTimestamp, long latestBucketTimestamp) {     Mockito.doAnswer(invocationOnMock -> {         String jobId = (String) invocationOnMock.getArguments()[0].         @SuppressWarnings("unchecked")         Consumer<DataCounts> handler = (Consumer<DataCounts>) invocationOnMock.getArguments()[1].         DataCounts dataCounts = new DataCounts(jobId).         dataCounts.setLatestRecordTimeStamp(new Date(latestRecordTimestamp)).         handler.accept(dataCounts).         return null.     }).when(jobResultsProvider).dataCounts(any(), any(), any()).     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         Consumer<QueryPage<Bucket>> consumer = (Consumer<QueryPage<Bucket>>) invocationOnMock.getArguments()[2].         Bucket bucket = mock(Bucket.class).         when(bucket.getTimestamp()).thenReturn(new Date(latestBucketTimestamp)).         QueryPage<Bucket> bucketQueryPage = new QueryPage<Bucket>(Collections.singletonList(bucket), 1, Bucket.RESULTS_FIELD).         consumer.accept(bucketQueryPage).         return null.     }).when(jobResultsProvider).bucketsViaInternalClient(any(), any(), any(), any()). }
