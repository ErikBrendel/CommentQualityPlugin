commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected Long getRetentionDays(Job job) {     getRetentionDaysCallCount++.     // cover both code paths     return randomBoolean() ? null : 0L. }
false;protected;3;4;;@Override protected void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Boolean> listener) {     listener.onResponse(Boolean.TRUE). }
false;public;0;4;;@Before public void setUpTests() {     client = mock(Client.class). }
false;static;1;3;;static SearchResponse createSearchResponse(List<? extends ToXContent> toXContents) throws IOException {     return createSearchResponse(toXContents, toXContents.size()). }
false;private,static;2;13;;private static SearchResponse createSearchResponse(List<? extends ToXContent> toXContents, int totalHits) throws IOException {     SearchHit[] hitsArray = new SearchHit[toXContents.size()].     for (int i = 0. i < toXContents.size(). i++) {         hitsArray[i] = new SearchHit(randomInt()).         XContentBuilder jsonBuilder = JsonXContent.contentBuilder().         toXContents.get(i).toXContent(jsonBuilder, ToXContent.EMPTY_PARAMS).         hitsArray[i].sourceRef(BytesReference.bytes(jsonBuilder)).     }     SearchHits hits = new SearchHits(hitsArray, new TotalHits(totalHits, TotalHits.Relation.EQUAL_TO), 1.0f).     SearchResponse searchResponse = mock(SearchResponse.class).     when(searchResponse.getHits()).thenReturn(hits).     return searchResponse. }
false;public;0;15;;public void testRemoveGivenNoJobs() throws IOException {     SearchResponse response = createSearchResponse(Collections.emptyList()).     ActionFuture<SearchResponse> future = mock(ActionFuture.class).     when(future.actionGet()).thenReturn(response).     when(client.search(any())).thenReturn(future).     TestListener listener = new TestListener().     ConcreteExpiredJobDataRemover remover = new ConcreteExpiredJobDataRemover(client).     remover.remove(listener).     listener.waitToCompletion().     assertThat(listener.success, is(true)).     assertEquals(remover.getRetentionDaysCallCount, 0). }
false;public;0;36;;public void testRemoveGivenMulipleBatches() throws IOException {     // This is testing AbstractExpiredJobDataRemover.WrappedBatchedJobsIterator     int totalHits = 7.     List<SearchResponse> responses = new ArrayList<>().     responses.add(createSearchResponse(Arrays.asList(JobTests.buildJobBuilder("job1").build(), JobTests.buildJobBuilder("job2").build(), JobTests.buildJobBuilder("job3").build()), totalHits)).     responses.add(createSearchResponse(Arrays.asList(JobTests.buildJobBuilder("job4").build(), JobTests.buildJobBuilder("job5").build(), JobTests.buildJobBuilder("job6").build()), totalHits)).     responses.add(createSearchResponse(Collections.singletonList(JobTests.buildJobBuilder("job7").build()), totalHits)).     AtomicInteger searchCount = new AtomicInteger(0).     ActionFuture<SearchResponse> future = mock(ActionFuture.class).     doAnswer(invocationOnMock -> responses.get(searchCount.getAndIncrement())).when(future).actionGet().     when(client.search(any())).thenReturn(future).     TestListener listener = new TestListener().     ConcreteExpiredJobDataRemover remover = new ConcreteExpiredJobDataRemover(client).     remover.remove(listener).     listener.waitToCompletion().     assertThat(listener.success, is(true)).     assertEquals(searchCount.get(), 3).     assertEquals(remover.getRetentionDaysCallCount, 7). }
false;public;1;5;;@Override public void onResponse(Boolean aBoolean) {     success = aBoolean.     latch.countDown(). }
false;public;1;4;;@Override public void onFailure(Exception e) {     latch.countDown(). }
false;public;0;7;;public void waitToCompletion() {     try {         latch.await(3, TimeUnit.SECONDS).     } catch (InterruptedException e) {         fail("listener timed out before completing").     } }
