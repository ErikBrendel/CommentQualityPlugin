commented;modifiers;parameterAmount;loc;comment;code
false;public;0;37;;@Before public void setup() throws Exception {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build().     environment = TestEnvironment.newEnvironment(settings).     analysisRegistry = CategorizationAnalyzerTests.buildTestAnalysisRegistry(environment).     jobManager = mock(JobManager.class).     jobResultsProvider = mock(JobResultsProvider.class).     jobResultsPersister = mock(JobResultsPersister.class).     when(jobResultsPersister.bulkPersisterBuilder(any())).thenReturn(mock(JobResultsPersister.Builder.class)).     jobDataCountsPersister = mock(JobDataCountsPersister.class).     normalizerFactory = mock(NormalizerFactory.class).     auditor = mock(Auditor.class).     clusterService = mock(ClusterService.class).     MetaData metaData = mock(MetaData.class).     SortedMap<String, AliasOrIndex> aliasOrIndexSortedMap = new TreeMap<>().     aliasOrIndexSortedMap.put(AnomalyDetectorsIndex.jobStateIndexWriteAlias(), mock(AliasOrIndex.Alias.class)).     when(metaData.getAliasAndIndexLookup()).thenReturn(aliasOrIndexSortedMap).     clusterState = mock(ClusterState.class).     when(clusterState.getMetaData()).thenReturn(metaData).     when(clusterState.metaData()).thenReturn(metaData).     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         ActionListener<Job> listener = (ActionListener<Job>) invocationOnMock.getArguments()[1].         listener.onResponse(createJobDetails("foo")).         return null.     }).when(jobManager).getJob(eq("foo"), any()).     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         Consumer<AutodetectParams> handler = (Consumer<AutodetectParams>) invocationOnMock.getArguments()[1].         handler.accept(buildAutodetectParams()).         return null.     }).when(jobResultsProvider).getAutodetectParams(any(), any(), any()).     threadPool = new TestThreadPool("AutodetectProcessManagerTests"). }
false;public;0;4;;@After public void stopThreadPool() throws InterruptedException {     terminate(threadPool). }
false;public;0;4;;public void testMaxOpenJobsSetting_givenDefault() {     int maxOpenJobs = AutodetectProcessManager.MAX_OPEN_JOBS_PER_NODE.get(Settings.EMPTY).     assertEquals(20, maxOpenJobs). }
false;public;0;6;;public void testMaxOpenJobsSetting_givenNewSettingOnly() {     Settings.Builder settings = Settings.builder().     settings.put(AutodetectProcessManager.MAX_OPEN_JOBS_PER_NODE.getKey(), 7).     int maxOpenJobs = AutodetectProcessManager.MAX_OPEN_JOBS_PER_NODE.get(settings.build()).     assertEquals(7, maxOpenJobs). }
false;public;0;19;;public void testOpenJob() {     Client client = mock(Client.class).     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         ActionListener<Job> listener = (ActionListener<Job>) invocationOnMock.getArguments()[1].         listener.onResponse(createJobDetails("foo")).         return null.     }).when(jobManager).getJob(eq("foo"), any()).     AutodetectProcessManager manager = createManager(communicator, client).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     when(jobTask.getAllocationId()).thenReturn(1L).     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     assertEquals(1, manager.numberOfOpenJobs()).     assertTrue(manager.jobHasActiveAutodetectProcess(jobTask)).     verify(jobTask).updatePersistentTaskState(eq(new JobTaskState(JobState.OPENED, 1L, null)), any()). }
false;public;0;24;;public void testOpenJob_withoutVersion() {     Client client = mock(Client.class).     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     Job.Builder jobBuilder = new Job.Builder(createJobDetails("no_version")).     jobBuilder.setJobVersion(null).     Job job = jobBuilder.build().     assertThat(job.getJobVersion(), is(nullValue())).     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         ActionListener<Job> listener = (ActionListener<Job>) invocationOnMock.getArguments()[1].         listener.onResponse(job).         return null.     }).when(jobManager).getJob(eq(job.getId()), any()).     AutodetectProcessManager manager = createManager(communicator, client).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn(job.getId()).     AtomicReference<Exception> errorHolder = new AtomicReference<>().     manager.openJob(jobTask, clusterState, (e, b) -> errorHolder.set(e)).     Exception error = errorHolder.get().     assertThat(error, is(notNullValue())).     assertThat(error.getMessage(), equalTo("Cannot open job [no_version] because jobs created prior to version 5.5 are not supported")). }
false;public;0;67;;@SuppressWarnings("unchecked") public void testOpenJob_exceedMaxNumJobs() {     for (String jobId : new String[] { "foo", "bar", "baz", "foobar" }) {         doAnswer(invocationOnMock -> {             @SuppressWarnings("unchecked")             ActionListener<Job> listener = (ActionListener<Job>) invocationOnMock.getArguments()[1].             listener.onResponse(createJobDetails(jobId)).             return null.         }).when(jobManager).getJob(eq(jobId), any()).     }     Client client = mock(Client.class).     ThreadPool threadPool = mock(ThreadPool.class).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)).     ThreadPool.Cancellable cancellable = mock(ThreadPool.Cancellable.class).     when(threadPool.scheduleWithFixedDelay(any(), any(), any())).thenReturn(cancellable).     ExecutorService executorService = mock(ExecutorService.class).     Future<?> future = mock(Future.class).     when(executorService.submit(any(Callable.class))).thenReturn(future).     when(threadPool.executor(anyString())).thenReturn(EsExecutors.newDirectExecutorService()).     AutodetectProcess autodetectProcess = mock(AutodetectProcess.class).     when(autodetectProcess.isProcessAlive()).thenReturn(true).     when(autodetectProcess.readAutodetectResults()).thenReturn(Collections.emptyIterator()).     AutodetectProcessFactory autodetectProcessFactory = (j, autodetectParams, e, onProcessCrash) -> autodetectProcess.     Settings.Builder settings = Settings.builder().     settings.put(AutodetectProcessManager.MAX_OPEN_JOBS_PER_NODE.getKey(), 3).     AutodetectProcessManager manager = spy(new AutodetectProcessManager(environment, settings.build(), client, threadPool, jobManager, jobResultsProvider, jobResultsPersister, jobDataCountsPersister, autodetectProcessFactory, normalizerFactory, new NamedXContentRegistry(Collections.emptyList()), auditor, clusterService)).     doReturn(executorService).when(manager).createAutodetectExecutorService(any()).     doAnswer(invocationOnMock -> {         CheckedConsumer<Exception, IOException> consumer = (CheckedConsumer<Exception, IOException>) invocationOnMock.getArguments()[3].         consumer.accept(null).         return null.     }).when(manager).setJobState(any(), eq(JobState.FAILED), any(), any()).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("bar").     when(jobTask.getAllocationId()).thenReturn(1L).     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("baz").     when(jobTask.getAllocationId()).thenReturn(2L).     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     assertEquals(3, manager.numberOfOpenJobs()).     Exception[] holder = new Exception[1].     jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foobar").     when(jobTask.getAllocationId()).thenReturn(3L).     manager.openJob(jobTask, clusterState, (e, b) -> holder[0] = e).     Exception e = holder[0].     assertEquals("max running job capacity [3] reached", e.getMessage()).     jobTask = mock(JobTask.class).     when(jobTask.getAllocationId()).thenReturn(2L).     when(jobTask.getJobId()).thenReturn("baz").     manager.closeJob(jobTask, false, null).     assertEquals(2, manager.numberOfOpenJobs()).     manager.openJob(jobTask, clusterState, (e1, b) -> {     }).     assertEquals(3, manager.numberOfOpenJobs()). }
false;public;0;13;;public void testProcessData() {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     AutodetectProcessManager manager = createManager(communicator).     assertEquals(0, manager.numberOfOpenJobs()).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     DataLoadParams params = new DataLoadParams(TimeRange.builder().build(), Optional.empty()).     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     manager.processData(jobTask, analysisRegistry, createInputStream(""), randomFrom(XContentType.values()), params, (dataCounts1, e) -> {     }).     assertEquals(1, manager.numberOfOpenJobs()). }
false;public;0;22;;public void testProcessDataThrowsElasticsearchStatusException_onIoException() {     AutodetectCommunicator communicator = Mockito.mock(AutodetectCommunicator.class).     AutodetectProcessManager manager = createManager(communicator).     DataLoadParams params = mock(DataLoadParams.class).     InputStream inputStream = createInputStream("").     XContentType xContentType = randomFrom(XContentType.values()).     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         BiConsumer<DataCounts, Exception> handler = (BiConsumer<DataCounts, Exception>) invocationOnMock.getArguments()[4].         handler.accept(null, new IOException("blah")).         return null.     }).when(communicator).writeToJob(eq(inputStream), same(analysisRegistry), same(xContentType), eq(params), any()).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     Exception[] holder = new Exception[1].     manager.processData(jobTask, analysisRegistry, inputStream, xContentType, params, (dataCounts1, e) -> holder[0] = e).     assertNotNull(holder[0]). }
false;public;0;16;;public void testCloseJob() {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     AutodetectProcessManager manager = createManager(communicator).     assertEquals(0, manager.numberOfOpenJobs()).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     manager.processData(jobTask, analysisRegistry, createInputStream(""), randomFrom(XContentType.values()), mock(DataLoadParams.class), (dataCounts1, e) -> {     }).     // job is created     assertEquals(1, manager.numberOfOpenJobs()).     manager.closeJob(jobTask, false, null).     assertEquals(0, manager.numberOfOpenJobs()). }
true;public;0;42;// interleaved in the AutodetectProcessManager.close() call ;// DEBUG logging makes it possible to see exactly how the two threads // interleaved in the AutodetectProcessManager.close() call @TestLogging("org.elasticsearch.xpack.ml.job.process.autodetect:DEBUG") public void testCanCloseClosingJob() throws Exception {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     AtomicInteger numberOfCommunicatorCloses = new AtomicInteger(0).     doAnswer(invocationOnMock -> {         numberOfCommunicatorCloses.incrementAndGet().         // This increases the chance of the two threads both getting into         // the middle of the AutodetectProcessManager.close() method         Thread.yield().         return null.     }).when(communicator).close(anyBoolean(), anyString()).     AutodetectProcessManager manager = createManager(communicator).     assertEquals(0, manager.numberOfOpenJobs()).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     manager.processData(jobTask, analysisRegistry, createInputStream(""), randomFrom(XContentType.values()), mock(DataLoadParams.class), (dataCounts1, e) -> {     }).     assertEquals(1, manager.numberOfOpenJobs()).     // Close the job in a separate thread     Thread closeThread = new Thread(() -> manager.closeJob(jobTask, false, "in separate thread")).     closeThread.start().     Thread.yield().     // Also close the job in the current thread, so that we have two simultaneous close requests     manager.closeJob(jobTask, false, "in main test thread").     // The 10 second timeout here is usually far in excess of what is required.  In the vast     // majority of cases the other thread will exit within a few milliseconds.  However, it     // has been observed that on some VMs the test can fail because the VM stalls at the     // wrong moment.  A 10 second timeout is on a par with the length of time assertBusy()     // would wait under these circumstances.     closeThread.join(10000).     assertFalse(closeThread.isAlive()).     // Only one of the threads should have called AutodetectCommunicator.close()     assertEquals(1, numberOfCommunicatorCloses.get()).     assertEquals(0, manager.numberOfOpenJobs()). }
false;public;0;40;;public void testCanKillClosingJob() throws Exception {     CountDownLatch closeStartedLatch = new CountDownLatch(1).     CountDownLatch killLatch = new CountDownLatch(1).     CountDownLatch closeInterruptedLatch = new CountDownLatch(1).     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     doAnswer(invocationOnMock -> {         closeStartedLatch.countDown().         if (killLatch.await(3, TimeUnit.SECONDS)) {             closeInterruptedLatch.countDown().         }         return null.     }).when(communicator).close(anyBoolean(), anyString()).     doAnswer(invocationOnMock -> {         killLatch.countDown().         return null.     }).when(communicator).killProcess(anyBoolean(), anyBoolean(), anyBoolean()).     AutodetectProcessManager manager = createManager(communicator).     assertEquals(0, manager.numberOfOpenJobs()).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     manager.processData(jobTask, analysisRegistry, createInputStream(""), randomFrom(XContentType.values()), mock(DataLoadParams.class), (dataCounts1, e) -> {     }).     // Close the job in a separate thread so that it can simulate taking a long time to close     Thread closeThread = new Thread(() -> manager.closeJob(jobTask, false, null)).     closeThread.start().     assertTrue(closeStartedLatch.await(3, TimeUnit.SECONDS)).     // Kill the job in the current thread, which will be while the job is "closing"     manager.killProcess(jobTask, false, null).     assertEquals(0, killLatch.getCount()).     // Assert close method was awoken by the kill     assertTrue(closeInterruptedLatch.await(3, TimeUnit.SECONDS)).     closeThread.join(500).     assertFalse(closeThread.isAlive()). }
false;public;0;13;;public void testBucketResetMessageIsSent() {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     AutodetectProcessManager manager = createManager(communicator).     XContentType xContentType = randomFrom(XContentType.values()).     DataLoadParams params = new DataLoadParams(TimeRange.builder().startTime("1000").endTime("2000").build(), Optional.empty()).     InputStream inputStream = createInputStream("").     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     manager.processData(jobTask, analysisRegistry, inputStream, xContentType, params, (dataCounts1, e) -> {     }).     verify(communicator).writeToJob(same(inputStream), same(analysisRegistry), same(xContentType), same(params), any()). }
false;public;0;16;;public void testFlush() {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     AutodetectProcessManager manager = createManager(communicator).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     InputStream inputStream = createInputStream("").     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     manager.processData(jobTask, analysisRegistry, inputStream, randomFrom(XContentType.values()), mock(DataLoadParams.class), (dataCounts1, e) -> {     }).     FlushJobParams params = FlushJobParams.builder().build().     manager.flushJob(jobTask, params, ActionListener.wrap(flushAcknowledgement -> {     }, e -> fail(e.getMessage()))).     verify(communicator).flushJob(same(params), any()). }
false;public;0;18;;public void testFlushThrows() {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     AutodetectProcessManager manager = createManagerAndCallProcessData(communicator, "foo").     FlushJobParams params = FlushJobParams.builder().build().     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         BiConsumer<Void, Exception> handler = (BiConsumer<Void, Exception>) invocationOnMock.getArguments()[1].         handler.accept(null, new IOException("blah")).         return null.     }).when(communicator).flushJob(same(params), any()).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     Exception[] holder = new Exception[1].     manager.flushJob(jobTask, params, ActionListener.wrap(flushAcknowledgement -> {     }, e -> holder[0] = e)).     assertEquals("[foo] exception while flushing job", holder[0].getMessage()). }
false;public;0;23;;public void testCloseThrows() {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     AutodetectProcessManager manager = createManager(communicator).     // let the communicator throw, simulating a problem with the underlying     // autodetect, e.g. a crash     doThrow(Exception.class).when(communicator).close(anyBoolean(), anyString()).     // create a jobtask     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     manager.processData(jobTask, analysisRegistry, createInputStream(""), randomFrom(XContentType.values()), mock(DataLoadParams.class), (dataCounts1, e) -> {     }).     verify(manager).setJobState(any(), eq(JobState.OPENED)).     // job is created     assertEquals(1, manager.numberOfOpenJobs()).     expectThrows(ElasticsearchException.class, () -> manager.closeJob(jobTask, false, null)).     assertEquals(0, manager.numberOfOpenJobs()).     verify(manager).setJobState(any(), eq(JobState.FAILED), any()). }
false;public;0;19;;public void testWriteUpdateProcessMessage() {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     AutodetectProcessManager manager = createManagerAndCallProcessData(communicator, "foo").     ModelPlotConfig modelConfig = mock(ModelPlotConfig.class).     List<DetectionRule> rules = Collections.singletonList(mock(DetectionRule.class)).     List<JobUpdate.DetectorUpdate> detectorUpdates = Collections.singletonList(new JobUpdate.DetectorUpdate(2, null, rules)).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     UpdateParams updateParams = UpdateParams.builder("foo").modelPlotConfig(modelConfig).detectorUpdates(detectorUpdates).build().     manager.writeUpdateProcessMessage(jobTask, updateParams, e -> {     }).     ArgumentCaptor<UpdateProcessMessage> captor = ArgumentCaptor.forClass(UpdateProcessMessage.class).     verify(communicator).writeUpdateProcessMessage(captor.capture(), any()).     UpdateProcessMessage updateProcessMessage = captor.getValue().     assertThat(updateProcessMessage.getModelPlotConfig(), equalTo(modelConfig)).     assertThat(updateProcessMessage.getDetectorUpdates(), equalTo(detectorUpdates)). }
false;public;0;17;;public void testJobHasActiveAutodetectProcess() {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     AutodetectProcessManager manager = createManager(communicator).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     assertFalse(manager.jobHasActiveAutodetectProcess(jobTask)).     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     manager.processData(jobTask, analysisRegistry, createInputStream(""), randomFrom(XContentType.values()), mock(DataLoadParams.class), (dataCounts1, e) -> {     }).     assertTrue(manager.jobHasActiveAutodetectProcess(jobTask)).     jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("bar").     when(jobTask.getAllocationId()).thenReturn(1L).     assertFalse(manager.jobHasActiveAutodetectProcess(jobTask)). }
false;public;0;17;;public void testKillKillsAutodetectProcess() throws IOException {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     AutodetectProcessManager manager = createManager(communicator).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     assertFalse(manager.jobHasActiveAutodetectProcess(jobTask)).     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     manager.processData(jobTask, analysisRegistry, createInputStream(""), randomFrom(XContentType.values()), mock(DataLoadParams.class), (dataCounts1, e) -> {     }).     assertTrue(manager.jobHasActiveAutodetectProcess(jobTask)).     manager.killAllProcessesOnThisNode().     verify(communicator).killProcess(false, false, true). }
false;public;0;10;;public void testKillingAMissingJobFinishesTheTask() throws IOException {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     AutodetectProcessManager manager = createManager(communicator).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.killProcess(jobTask, false, null).     verify(jobTask).markAsCompleted(). }
false;public;0;20;;public void testProcessData_GivenStateNotOpened() {     AutodetectCommunicator communicator = mock(AutodetectCommunicator.class).     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         BiConsumer<DataCounts, Exception> handler = (BiConsumer<DataCounts, Exception>) invocationOnMock.getArguments()[4].         handler.accept(new DataCounts("foo"), null).         return null.     }).when(communicator).writeToJob(any(), any(), any(), any(), any()).     AutodetectProcessManager manager = createManager(communicator).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     InputStream inputStream = createInputStream("").     DataCounts[] dataCounts = new DataCounts[1].     manager.processData(jobTask, analysisRegistry, inputStream, randomFrom(XContentType.values()), mock(DataLoadParams.class), (dataCounts1, e) -> dataCounts[0] = dataCounts1).     assertThat(dataCounts[0], equalTo(new DataCounts("foo"))). }
false;public;0;29;;public void testCreate_notEnoughThreads() throws IOException {     Client client = mock(Client.class).     ThreadPool threadPool = mock(ThreadPool.class).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)).     ExecutorService executorService = mock(ExecutorService.class).     doThrow(new EsRejectedExecutionException("")).when(executorService).submit(any(Runnable.class)).     when(threadPool.executor(anyString())).thenReturn(executorService).     when(threadPool.scheduleWithFixedDelay(any(), any(), any())).thenReturn(mock(ThreadPool.Cancellable.class)).     Job job = createJobDetails("my_id").     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         ActionListener<Job> listener = (ActionListener<Job>) invocationOnMock.getArguments()[1].         listener.onResponse(job).         return null.     }).when(jobManager).getJob(eq("my_id"), any()).     AutodetectProcess autodetectProcess = mock(AutodetectProcess.class).     AutodetectProcessFactory autodetectProcessFactory = (j, autodetectParams, e, onProcessCrash) -> autodetectProcess.     AutodetectProcessManager manager = new AutodetectProcessManager(environment, Settings.EMPTY, client, threadPool, jobManager, jobResultsProvider, jobResultsPersister, jobDataCountsPersister, autodetectProcessFactory, normalizerFactory, new NamedXContentRegistry(Collections.emptyList()), auditor, clusterService).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("my_id").     expectThrows(EsRejectedExecutionException.class, () -> manager.create(jobTask, job, buildAutodetectParams(), (e, b) -> {     })).     verify(autodetectProcess, times(1)).close(). }
false;public;0;12;;public void testCreate_givenFirstTime() {     modelSnapshot = null.     AutodetectProcessManager manager = createNonSpyManager("foo").     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.create(jobTask, createJobDetails("foo"), buildAutodetectParams(), (e, b) -> {     }).     String expectedNotification = "Loading model snapshot [N/A], job latest_record_timestamp [N/A]".     verify(auditor).info("foo", expectedNotification).     verifyNoMoreInteractions(auditor). }
false;public;0;17;;public void testCreate_givenExistingModelSnapshot() {     modelSnapshot = new ModelSnapshot.Builder("foo").setSnapshotId("snapshot-1").setLatestRecordTimeStamp(new Date(0L)).build().     dataCounts = new DataCounts("foo").     dataCounts.setLatestRecordTimeStamp(new Date(1L)).     AutodetectProcessManager manager = createNonSpyManager("foo").     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.create(jobTask, createJobDetails("foo"), buildAutodetectParams(), (e, b) -> {     }).     String expectedNotification = "Loading model snapshot [snapshot-1] with " + "latest_record_timestamp [1970-01-01T00:00:00.000Z], " + "job latest_record_timestamp [1970-01-01T00:00:00.001Z]".     verify(auditor).info("foo", expectedNotification).     verifyNoMoreInteractions(auditor). }
false;public;0;19;;public void testCreate_givenNonZeroCountsAndNoModelSnapshotNorQuantiles() {     modelSnapshot = null.     quantiles = null.     dataCounts = new DataCounts("foo").     dataCounts.setLatestRecordTimeStamp(new Date(0L)).     dataCounts.incrementProcessedRecordCount(42L).     AutodetectProcessManager manager = createNonSpyManager("foo").     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn("foo").     manager.create(jobTask, createJobDetails("foo"), buildAutodetectParams(), (e, b) -> {     }).     String expectedNotification = "Loading model snapshot [N/A], " + "job latest_record_timestamp [1970-01-01T00:00:00.000Z]".     verify(auditor).info("foo", expectedNotification).     verify(auditor).warning("foo", "No model snapshot could be found for a job with processed records").     verify(auditor).warning("foo", "No quantiles could be found for a job with processed records").     verifyNoMoreInteractions(auditor). }
false;public;0;19;;public void testAutodetectWorkerExecutorServiceDoesNotSwallowErrors() {     final ThreadPool threadPool = new TestThreadPool("testAutodetectWorkerExecutorServiceDoesNotSwallowErrors").     try {         final AutodetectWorkerExecutorService executor = new AutodetectWorkerExecutorService(threadPool.getThreadContext()).         if (randomBoolean()) {             executor.submit(() -> {                 throw new Error("future error").             }).         } else {             executor.execute(() -> {                 throw new Error("future error").             }).         }         final Error e = expectThrows(Error.class, () -> executor.start()).         assertThat(e.getMessage(), containsString("future error")).     } finally {         ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS).     } }
false;public;0;8;;public void testAutodetectWorkerExecutorService_SubmitAfterShutdown() {     AutodetectProcessManager.AutodetectWorkerExecutorService executor = new AutodetectWorkerExecutorService(new ThreadContext(Settings.EMPTY)).     threadPool.generic().execute(() -> executor.start()).     executor.shutdown().     expectThrows(EsRejectedExecutionException.class, () -> executor.execute(() -> {     })). }
false;public;1;4;;@Override public void onFailure(Exception e) {     onFailureCallCount.incrementAndGet(). }
false;protected;0;4;;@Override protected void doRun() {     doRunCallCount.incrementAndGet(). }
false;public;0;46;;public void testAutodetectWorkerExecutorService_TasksNotExecutedCallHandlerOnShutdown() throws InterruptedException, ExecutionException {     AutodetectProcessManager.AutodetectWorkerExecutorService executor = new AutodetectWorkerExecutorService(new ThreadContext(Settings.EMPTY)).     CountDownLatch latch = new CountDownLatch(1).     Future<?> executorFinished = threadPool.generic().submit(() -> executor.start()).     // run a task that will block while the others are queued up     executor.execute(() -> {         try {             latch.await().         } catch (InterruptedException e) {         }     }).     AtomicBoolean runnableShouldNotBeCalled = new AtomicBoolean(false).     executor.execute(() -> runnableShouldNotBeCalled.set(true)).     AtomicInteger onFailureCallCount = new AtomicInteger().     AtomicInteger doRunCallCount = new AtomicInteger().     for (int i = 0. i < 2. i++) {         executor.execute(new AbstractRunnable() {              @Override             public void onFailure(Exception e) {                 onFailureCallCount.incrementAndGet().             }              @Override             protected void doRun() {                 doRunCallCount.incrementAndGet().             }         }).     }     // now shutdown     executor.shutdown().     latch.countDown().     executorFinished.get().     assertFalse(runnableShouldNotBeCalled.get()).     // the AbstractRunnables should have had their callbacks called     assertEquals(2, onFailureCallCount.get()).     assertEquals(0, doRunCallCount.get()). }
false;private;1;21;;private AutodetectProcessManager createNonSpyManager(String jobId) {     Client client = mock(Client.class).     ThreadPool threadPool = mock(ThreadPool.class).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)).     ExecutorService executorService = mock(ExecutorService.class).     when(threadPool.executor(anyString())).thenReturn(executorService).     when(threadPool.scheduleWithFixedDelay(any(), any(), any())).thenReturn(mock(ThreadPool.Cancellable.class)).     doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         ActionListener<Job> listener = (ActionListener<Job>) invocationOnMock.getArguments()[1].         listener.onResponse(createJobDetails(jobId)).         return null.     }).when(jobManager).getJob(eq(jobId), any()).     AutodetectProcess autodetectProcess = mock(AutodetectProcess.class).     AutodetectProcessFactory autodetectProcessFactory = (j, autodetectParams, e, onProcessCrash) -> autodetectProcess.     return new AutodetectProcessManager(environment, Settings.EMPTY, client, threadPool, jobManager, jobResultsProvider, jobResultsPersister, jobDataCountsPersister, autodetectProcessFactory, normalizerFactory, new NamedXContentRegistry(Collections.emptyList()), auditor, clusterService). }
false;private;0;9;;private AutodetectParams buildAutodetectParams() {     return new AutodetectParams.Builder("foo").setDataCounts(dataCounts).setModelSizeStats(modelSizeStats).setModelSnapshot(modelSnapshot).setQuantiles(quantiles).setFilters(filters).build(). }
false;private;1;4;;private AutodetectProcessManager createManager(AutodetectCommunicator communicator) {     Client client = mock(Client.class).     return createManager(communicator, client). }
false;private;2;13;;private AutodetectProcessManager createManager(AutodetectCommunicator communicator, Client client) {     ThreadPool threadPool = mock(ThreadPool.class).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)).     when(threadPool.executor(anyString())).thenReturn(EsExecutors.newDirectExecutorService()).     AutodetectProcessFactory autodetectProcessFactory = mock(AutodetectProcessFactory.class).     AutodetectProcessManager manager = new AutodetectProcessManager(environment, Settings.EMPTY, client, threadPool, jobManager, jobResultsProvider, jobResultsPersister, jobDataCountsPersister, autodetectProcessFactory, normalizerFactory, new NamedXContentRegistry(Collections.emptyList()), auditor, clusterService).     manager = spy(manager).     doReturn(communicator).when(manager).create(any(), any(), eq(buildAutodetectParams()), any()).     return manager. }
false;private;2;9;;private AutodetectProcessManager createManagerAndCallProcessData(AutodetectCommunicator communicator, String jobId) {     AutodetectProcessManager manager = createManager(communicator).     JobTask jobTask = mock(JobTask.class).     when(jobTask.getJobId()).thenReturn(jobId).     manager.openJob(jobTask, clusterState, (e, b) -> {     }).     manager.processData(jobTask, analysisRegistry, createInputStream(""), randomFrom(XContentType.values()), mock(DataLoadParams.class), (dataCounts, e) -> {     }).     return manager. }
false;private;1;16;;private Job createJobDetails(String jobId) {     DataDescription.Builder dd = new DataDescription.Builder().     dd.setFormat(DataDescription.DataFormat.DELIMITED).     dd.setTimeFormat("epoch").     dd.setFieldDelimiter(',').     Detector d = new Detector.Builder("metric", "value").build().     AnalysisConfig.Builder ac = new AnalysisConfig.Builder(Collections.singletonList(d)).     Job.Builder builder = new Job.Builder(jobId).     builder.setDataDescription(dd).     builder.setAnalysisConfig(ac).     return builder.build(new Date()). }
false;private,static;1;3;;private static InputStream createInputStream(String input) {     return new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8)). }
