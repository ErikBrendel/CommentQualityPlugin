commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void testValidate_GivenNonZeroLatency() {     String errorMessage = Messages.getMessage(Messages.DATAFEED_DOES_NOT_SUPPORT_JOB_WITH_LATENCY).     Job.Builder builder = buildJobBuilder("foo").     AnalysisConfig.Builder ac = createAnalysisConfig().     ac.setBucketSpan(TimeValue.timeValueSeconds(1800)).     ac.setLatency(TimeValue.timeValueSeconds(3600)).     builder.setAnalysisConfig(ac).     Job job = builder.build(new Date()).     DatafeedConfig datafeedConfig = createValidDatafeedConfig().build().     ElasticsearchStatusException e = ESTestCase.expectThrows(ElasticsearchStatusException.class, () -> DatafeedJobValidator.validate(datafeedConfig, job)).     assertEquals(errorMessage, e.getMessage()). }
false;public;0;11;;public void testVerify_GivenZeroLatency() {     Job.Builder builder = buildJobBuilder("foo").     AnalysisConfig.Builder ac = createAnalysisConfig().     ac.setBucketSpan(TimeValue.timeValueSeconds(1800)).     ac.setLatency(TimeValue.ZERO).     builder.setAnalysisConfig(ac).     Job job = builder.build(new Date()).     DatafeedConfig datafeedConfig = createValidDatafeedConfig().build().     DatafeedJobValidator.validate(datafeedConfig, job). }
false;public;0;10;;public void testVerify_GivenNoLatency() {     Job.Builder builder = buildJobBuilder("foo").     AnalysisConfig.Builder ac = createAnalysisConfig().     ac.setBucketSpan(TimeValue.timeValueSeconds(100)).     builder.setAnalysisConfig(ac).     Job job = builder.build(new Date()).     DatafeedConfig datafeedConfig = createValidDatafeedConfig().build().     DatafeedJobValidator.validate(datafeedConfig, job). }
false;public;0;16;;public void testVerify_GivenAggsAndNoSummaryCountField() throws IOException {     String errorMessage = Messages.getMessage(Messages.DATAFEED_AGGREGATIONS_REQUIRES_JOB_WITH_SUMMARY_COUNT_FIELD, DatafeedConfig.DOC_COUNT).     Job.Builder builder = buildJobBuilder("foo").     AnalysisConfig.Builder ac = createAnalysisConfig().     ac.setSummaryCountFieldName(null).     ac.setBucketSpan(TimeValue.timeValueSeconds(1800)).     builder.setAnalysisConfig(ac).     Job job = builder.build(new Date()).     DatafeedConfig datafeedConfig = createValidDatafeedConfigWithAggs(1800.0).build().     ElasticsearchStatusException e = ESTestCase.expectThrows(ElasticsearchStatusException.class, () -> DatafeedJobValidator.validate(datafeedConfig, job)).     assertEquals(errorMessage, e.getMessage()). }
false;public;0;16;;public void testVerify_GivenAggsAndEmptySummaryCountField() throws IOException {     String errorMessage = Messages.getMessage(Messages.DATAFEED_AGGREGATIONS_REQUIRES_JOB_WITH_SUMMARY_COUNT_FIELD, DatafeedConfig.DOC_COUNT).     Job.Builder builder = buildJobBuilder("foo").     AnalysisConfig.Builder ac = createAnalysisConfig().     ac.setSummaryCountFieldName("").     ac.setBucketSpan(TimeValue.timeValueSeconds(1800)).     builder.setAnalysisConfig(ac).     Job job = builder.build(new Date()).     DatafeedConfig datafeedConfig = createValidDatafeedConfigWithAggs(1800.0).build().     ElasticsearchStatusException e = ESTestCase.expectThrows(ElasticsearchStatusException.class, () -> DatafeedJobValidator.validate(datafeedConfig, job)).     assertEquals(errorMessage, e.getMessage()). }
false;public;0;10;;public void testVerify_GivenAggsAndSummaryCountField() throws IOException {     Job.Builder builder = buildJobBuilder("foo").     AnalysisConfig.Builder ac = createAnalysisConfig().     ac.setSummaryCountFieldName("some_count").     ac.setBucketSpan(TimeValue.timeValueSeconds(1800)).     builder.setAnalysisConfig(ac).     Job job = builder.build(new Date()).     DatafeedConfig datafeedConfig = createValidDatafeedConfigWithAggs(900.0).build().     DatafeedJobValidator.validate(datafeedConfig, job). }
false;public;0;14;;public void testVerify_GivenHistogramIntervalGreaterThanBucketSpan() throws IOException {     Job.Builder builder = buildJobBuilder("foo").     AnalysisConfig.Builder ac = createAnalysisConfig().     ac.setSummaryCountFieldName("some_count").     ac.setBucketSpan(TimeValue.timeValueSeconds(1800)).     builder.setAnalysisConfig(ac).     Job job = builder.build(new Date()).     DatafeedConfig datafeedConfig = createValidDatafeedConfigWithAggs(1800001.0).build().     ElasticsearchStatusException e = ESTestCase.expectThrows(ElasticsearchStatusException.class, () -> DatafeedJobValidator.validate(datafeedConfig, job)).     assertEquals("Aggregation interval [1800001ms] must be less than or equal to the bucket_span [1800000ms]", e.getMessage()). }
false;public;0;16;;public void testVerify_HistogramIntervalIsDivisorOfBucketSpan() throws IOException {     Job.Builder builder = buildJobBuilder("foo").     AnalysisConfig.Builder ac = createAnalysisConfig().     ac.setSummaryCountFieldName("some_count").     ac.setBucketSpan(TimeValue.timeValueMinutes(5)).     builder.setAnalysisConfig(ac).     Job job = builder.build(new Date()).     DatafeedConfig datafeedConfig = createValidDatafeedConfigWithAggs(37 * 1000).build().     ElasticsearchStatusException e = ESTestCase.expectThrows(ElasticsearchStatusException.class, () -> DatafeedJobValidator.validate(datafeedConfig, job)).     assertEquals("Aggregation interval [37000ms] must be a divisor of the bucket_span [300000ms]", e.getMessage()).     DatafeedConfig goodDatafeedConfig = createValidDatafeedConfigWithAggs(60 * 1000).build().     DatafeedJobValidator.validate(goodDatafeedConfig, job). }
false;public;0;32;;public void testVerify_FrequencyIsMultipleOfHistogramInterval() throws IOException {     Job.Builder builder = buildJobBuilder("foo").     AnalysisConfig.Builder ac = createAnalysisConfig().     ac.setSummaryCountFieldName("some_count").     ac.setBucketSpan(TimeValue.timeValueMinutes(5)).     builder.setAnalysisConfig(ac).     Job job = builder.build(new Date()).     DatafeedConfig.Builder datafeedBuilder = createValidDatafeedConfigWithAggs(60 * 1000).     // Check with multiples     datafeedBuilder.setFrequency(TimeValue.timeValueSeconds(60)).     DatafeedJobValidator.validate(datafeedBuilder.build(), job).     datafeedBuilder.setFrequency(TimeValue.timeValueSeconds(120)).     DatafeedJobValidator.validate(datafeedBuilder.build(), job).     datafeedBuilder.setFrequency(TimeValue.timeValueSeconds(180)).     DatafeedJobValidator.validate(datafeedBuilder.build(), job).     datafeedBuilder.setFrequency(TimeValue.timeValueSeconds(240)).     DatafeedJobValidator.validate(datafeedBuilder.build(), job).     datafeedBuilder.setFrequency(TimeValue.timeValueHours(1)).     DatafeedJobValidator.validate(datafeedBuilder.build(), job).     // Now non-multiples     datafeedBuilder.setFrequency(TimeValue.timeValueSeconds(30)).     ElasticsearchStatusException e = ESTestCase.expectThrows(ElasticsearchStatusException.class, () -> DatafeedJobValidator.validate(datafeedBuilder.build(), job)).     assertEquals("Datafeed frequency [30s] must be a multiple of the aggregation interval [60000ms]", e.getMessage()).     datafeedBuilder.setFrequency(TimeValue.timeValueSeconds(90)).     e = ESTestCase.expectThrows(ElasticsearchStatusException.class, () -> DatafeedJobValidator.validate(datafeedBuilder.build(), job)).     assertEquals("Datafeed frequency [1.5m] must be a multiple of the aggregation interval [60000ms]", e.getMessage()). }
false;public;0;23;;public void testVerify_BucketIntervalAndDataCheckWindowAreValid() {     Job.Builder builder = buildJobBuilder("foo").     AnalysisConfig.Builder ac = createAnalysisConfig().     ac.setSummaryCountFieldName("some_count").     ac.setBucketSpan(TimeValue.timeValueSeconds(2)).     builder.setAnalysisConfig(ac).     Job job = builder.build(new Date()).     DatafeedConfig.Builder datafeedBuilder = createValidDatafeedConfig().     datafeedBuilder.setDelayedDataCheckConfig(DelayedDataCheckConfig.enabledDelayedDataCheckConfig(TimeValue.timeValueMinutes(10))).     DatafeedJobValidator.validate(datafeedBuilder.build(), job).     datafeedBuilder.setDelayedDataCheckConfig(DelayedDataCheckConfig.enabledDelayedDataCheckConfig(TimeValue.timeValueSeconds(1))).     ElasticsearchStatusException e = ESTestCase.expectThrows(ElasticsearchStatusException.class, () -> DatafeedJobValidator.validate(datafeedBuilder.build(), job)).     assertEquals(Messages.getMessage(Messages.DATAFEED_CONFIG_DELAYED_DATA_CHECK_TOO_SMALL, "1s", "2s"), e.getMessage()).     datafeedBuilder.setDelayedDataCheckConfig(DelayedDataCheckConfig.enabledDelayedDataCheckConfig(TimeValue.timeValueHours(24))).     e = ESTestCase.expectThrows(ElasticsearchStatusException.class, () -> DatafeedJobValidator.validate(datafeedBuilder.build(), job)).     assertEquals(Messages.getMessage(Messages.DATAFEED_CONFIG_DELAYED_DATA_CHECK_SPANS_TOO_MANY_BUCKETS, "1d", "2s"), e.getMessage()). }
false;private,static;1;7;;private static Job.Builder buildJobBuilder(String id) {     Job.Builder builder = new Job.Builder(id).     AnalysisConfig.Builder ac = createAnalysisConfig().     builder.setAnalysisConfig(ac).     builder.setDataDescription(new DataDescription.Builder()).     return builder. }
false;public,static;0;7;;public static AnalysisConfig.Builder createAnalysisConfig() {     Detector.Builder d1 = new Detector.Builder("info_content", "domain").     d1.setOverFieldName("client").     Detector.Builder d2 = new Detector.Builder("min", "field").     AnalysisConfig.Builder ac = new AnalysisConfig.Builder(Arrays.asList(d1.build(), d2.build())).     return ac. }
false;private,static;1;8;;private static DatafeedConfig.Builder createValidDatafeedConfigWithAggs(double interval) throws IOException {     MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").     HistogramAggregationBuilder histogram = AggregationBuilders.histogram("time").interval(interval).field("time").subAggregation(maxTime).     DatafeedConfig.Builder datafeedConfig = createValidDatafeedConfig().     datafeedConfig.setParsedAggregations(new AggregatorFactories.Builder().addAggregator(histogram)).     return datafeedConfig. }
false;private,static;0;5;;private static DatafeedConfig.Builder createValidDatafeedConfig() {     DatafeedConfig.Builder builder = new DatafeedConfig.Builder("my-datafeed", "my-job").     builder.setIndices(Collections.singletonList("myIndex")).     return builder. }
