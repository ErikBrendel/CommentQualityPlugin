commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUpBucketInfluencer() {     bucketInfluencer = new BucketInfluencer("foo", new Date(), 600).     bucketInfluencer.setInfluencerFieldName("airline").     bucketInfluencer.setProbability(0.05).     bucketInfluencer.setRawAnomalyScore(3.14).     bucketInfluencer.setInitialAnomalyScore(2.0).     bucketInfluencer.setAnomalyScore(1.0). }
false;public;0;3;;public void testIsContainerOnly() {     assertFalse(new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).isContainerOnly()). }
false;public;0;7;;public void testGetLevel() {     assertEquals(Level.BUCKET_INFLUENCER, new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getLevel()).     BucketInfluencer timeInfluencer = new BucketInfluencer("foo", new Date(), 600).     timeInfluencer.setInfluencerFieldName(BucketInfluencer.BUCKET_TIME).     assertEquals(Level.ROOT, new BucketInfluencerNormalizable(timeInfluencer, INDEX_NAME).getLevel()). }
false;public;0;3;;public void testGetPartitionFieldName() {     assertNull(new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getPartitionFieldName()). }
false;public;0;3;;public void testGetPartitionFieldValue() {     assertNull(new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getPartitionFieldValue()). }
false;public;0;3;;public void testGetPersonFieldName() {     assertEquals("airline", new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getPersonFieldName()). }
false;public;0;3;;public void testGetPersonFieldValue() {     assertNull(new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getPersonFieldValue()). }
false;public;0;3;;public void testGetFunctionName() {     assertNull(new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getFunctionName()). }
false;public;0;3;;public void testGetValueFieldName() {     assertNull(new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getValueFieldName()). }
false;public;0;3;;public void testGetProbability() {     assertEquals(0.05, new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getProbability(), EPSILON). }
false;public;0;3;;public void testGetNormalizedScore() {     assertEquals(1.0, new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getNormalizedScore(), EPSILON). }
false;public;0;8;;public void testSetNormalizedScore() {     BucketInfluencerNormalizable normalizable = new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).     normalizable.setNormalizedScore(99.0).     assertEquals(99.0, normalizable.getNormalizedScore(), EPSILON).     assertEquals(99.0, bucketInfluencer.getAnomalyScore(), EPSILON). }
false;public;0;3;;public void testGetChildrenTypes() {     assertTrue(new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getChildrenTypes().isEmpty()). }
false;public;0;4;;public void testGetChildren_ByType() {     expectThrows(UnsupportedOperationException.class, () -> new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getChildren(Normalizable.ChildType.BUCKET_INFLUENCER)). }
false;public;0;3;;public void testGetChildren() {     assertTrue(new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).getChildren().isEmpty()). }
false;public;0;5;;public void testSetMaxChildrenScore() {     expectThrows(UnsupportedOperationException.class, () -> new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).setMaxChildrenScore(Normalizable.ChildType.BUCKET_INFLUENCER, 42.0)). }
false;public;0;9;;public void testSetParentScore() {     new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).setParentScore(42.0).     assertEquals("airline", bucketInfluencer.getInfluencerFieldName()).     assertEquals(1.0, bucketInfluencer.getAnomalyScore(), EPSILON).     assertEquals(3.14, bucketInfluencer.getRawAnomalyScore(), EPSILON).     assertEquals(2.0, bucketInfluencer.getInitialAnomalyScore(), EPSILON).     assertEquals(0.05, bucketInfluencer.getProbability(), EPSILON). }
false;public;0;5;;public void testResetBigChangeFlag() {     BucketInfluencerNormalizable normalizable = new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).     normalizable.resetBigChangeFlag().     assertFalse(normalizable.hadBigNormalizedUpdate()). }
false;public;0;5;;public void testRaiseBigChangeFlag() {     BucketInfluencerNormalizable normalizable = new BucketInfluencerNormalizable(bucketInfluencer, INDEX_NAME).     normalizable.raiseBigChangeFlag().     assertTrue(normalizable.hadBigNormalizedUpdate()). }
