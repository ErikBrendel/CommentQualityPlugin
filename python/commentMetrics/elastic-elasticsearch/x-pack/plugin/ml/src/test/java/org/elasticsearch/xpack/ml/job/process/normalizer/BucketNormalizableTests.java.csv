commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Before public void setUpBucket() {     bucket = new Bucket("foo", new Date(), 600).     BucketInfluencer bucketInfluencer1 = new BucketInfluencer("foo", bucket.getTimestamp(), 600).     bucketInfluencer1.setInfluencerFieldName(BucketInfluencer.BUCKET_TIME).     bucketInfluencer1.setAnomalyScore(42.0).     bucketInfluencer1.setProbability(0.01).     BucketInfluencer bucketInfluencer2 = new BucketInfluencer("foo", bucket.getTimestamp(), 600).     bucketInfluencer2.setInfluencerFieldName("foo").     bucketInfluencer2.setAnomalyScore(88.0).     bucketInfluencer2.setProbability(0.001).     bucket.setBucketInfluencers(Arrays.asList(bucketInfluencer1, bucketInfluencer2)).     bucket.setAnomalyScore(88.0).     AnomalyRecord record1 = new AnomalyRecord("foo", bucket.getTimestamp(), 600).     record1.setRecordScore(1.0).     AnomalyRecord record2 = new AnomalyRecord("foo", bucket.getTimestamp(), 600).     record2.setRecordScore(2.0).     bucket.setRecords(Arrays.asList(record1, record2)). }
false;public;0;3;;public void testIsContainerOnly() {     assertTrue(new BucketNormalizable(bucket, INDEX_NAME).isContainerOnly()). }
false;public;0;3;;public void testGetLevel() {     assertEquals(Level.ROOT, new BucketNormalizable(bucket, INDEX_NAME).getLevel()). }
false;public;0;3;;public void testGetPartitionFieldName() {     assertNull(new BucketNormalizable(bucket, INDEX_NAME).getPartitionFieldName()). }
false;public;0;3;;public void testGetPartitionFieldValue() {     assertNull(new BucketNormalizable(bucket, INDEX_NAME).getPartitionFieldValue()). }
false;public;0;3;;public void testGetPersonFieldName() {     assertNull(new BucketNormalizable(bucket, INDEX_NAME).getPersonFieldName()). }
false;public;0;3;;public void testGetPersonFieldValue() {     assertNull(new BucketNormalizable(bucket, INDEX_NAME).getPersonFieldValue()). }
false;public;0;3;;public void testGetFunctionName() {     assertNull(new BucketNormalizable(bucket, INDEX_NAME).getFunctionName()). }
false;public;0;3;;public void testGetValueFieldName() {     assertNull(new BucketNormalizable(bucket, INDEX_NAME).getValueFieldName()). }
false;public;0;3;;public void testGetProbability() {     expectThrows(UnsupportedOperationException.class, () -> new BucketNormalizable(bucket, INDEX_NAME).getProbability()). }
false;public;0;3;;public void testGetNormalizedScore() {     assertEquals(88.0, new BucketNormalizable(bucket, INDEX_NAME).getNormalizedScore(), EPSILON). }
false;public;0;8;;public void testSetNormalizedScore() {     BucketNormalizable normalizable = new BucketNormalizable(bucket, INDEX_NAME).     normalizable.setNormalizedScore(99.0).     assertEquals(99.0, normalizable.getNormalizedScore(), EPSILON).     assertEquals(99.0, bucket.getAnomalyScore(), EPSILON). }
false;public;0;10;;public void testGetChildren() {     BucketNormalizable bn = new BucketNormalizable(bucket, INDEX_NAME).     List<Normalizable> children = bn.getChildren().     assertEquals(2, children.size()).     assertTrue(children.get(0) instanceof BucketInfluencerNormalizable).     assertEquals(42.0, children.get(0).getNormalizedScore(), EPSILON).     assertTrue(children.get(1) instanceof BucketInfluencerNormalizable).     assertEquals(88.0, children.get(1).getNormalizedScore(), EPSILON). }
false;public;0;10;;public void testGetChildren_GivenTypeBucketInfluencer() {     BucketNormalizable bn = new BucketNormalizable(bucket, INDEX_NAME).     List<Normalizable> children = bn.getChildren(Normalizable.ChildType.BUCKET_INFLUENCER).     assertEquals(2, children.size()).     assertTrue(children.get(0) instanceof BucketInfluencerNormalizable).     assertEquals(42.0, children.get(0).getNormalizedScore(), EPSILON).     assertTrue(children.get(1) instanceof BucketInfluencerNormalizable).     assertEquals(88.0, children.get(1).getNormalizedScore(), EPSILON). }
false;public;0;7;;public void testSetMaxChildrenScore_GivenDifferentScores() {     BucketNormalizable bucketNormalizable = new BucketNormalizable(bucket, INDEX_NAME).     assertTrue(bucketNormalizable.setMaxChildrenScore(Normalizable.ChildType.BUCKET_INFLUENCER, 95.0)).     assertEquals(95.0, bucket.getAnomalyScore(), EPSILON). }
false;public;0;7;;public void testSetMaxChildrenScore_GivenSameScores() {     BucketNormalizable bucketNormalizable = new BucketNormalizable(bucket, INDEX_NAME).     assertFalse(bucketNormalizable.setMaxChildrenScore(Normalizable.ChildType.BUCKET_INFLUENCER, 88.0)).     assertEquals(88.0, bucket.getAnomalyScore(), EPSILON). }
false;public;0;3;;public void testSetParentScore() {     expectThrows(UnsupportedOperationException.class, () -> new BucketNormalizable(bucket, INDEX_NAME).setParentScore(42.0)). }
false;public;0;8;;public void testResetBigChangeFlag() {     BucketNormalizable normalizable = new BucketNormalizable(bucket, INDEX_NAME).     normalizable.raiseBigChangeFlag().     normalizable.resetBigChangeFlag().     assertFalse(normalizable.hadBigNormalizedUpdate()). }
false;public;0;8;;public void testRaiseBigChangeFlag() {     BucketNormalizable normalizable = new BucketNormalizable(bucket, INDEX_NAME).     normalizable.resetBigChangeFlag().     normalizable.raiseBigChangeFlag().     assertTrue(normalizable.hadBigNormalizedUpdate()). }
