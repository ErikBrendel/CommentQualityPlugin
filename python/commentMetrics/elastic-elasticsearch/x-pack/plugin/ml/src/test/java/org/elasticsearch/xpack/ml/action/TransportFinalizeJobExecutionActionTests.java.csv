commented;modifiers;parameterAmount;loc;comment;code
false;private;0;21;;@Before @SuppressWarnings("unchecked") private void setupMocks() {     ExecutorService executorService = mock(ExecutorService.class).     threadPool = mock(ThreadPool.class).     org.elasticsearch.mock.orig.Mockito.doAnswer(invocation -> {         ((Runnable) invocation.getArguments()[0]).run().         return null.     }).when(executorService).execute(any(Runnable.class)).     when(threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME)).thenReturn(executorService).     client = mock(Client.class).     doAnswer(invocationOnMock -> {         ActionListener listener = (ActionListener) invocationOnMock.getArguments()[2].         listener.onResponse(null).         return null.     }).when(client).execute(eq(UpdateAction.INSTANCE), any(), any()).     when(client.threadPool()).thenReturn(threadPool).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)). }
false;public;0;17;;public void testOperation() {     ClusterService clusterService = mock(ClusterService.class).     TransportFinalizeJobExecutionAction action = createAction(clusterService).     ClusterState clusterState = ClusterState.builder(new ClusterName("finalize-job-action-tests")).build().     FinalizeJobExecutionAction.Request request = new FinalizeJobExecutionAction.Request(new String[] { "job1", "job2" }).     AtomicReference<AcknowledgedResponse> ack = new AtomicReference<>().     action.masterOperation(request, clusterState, ActionListener.wrap(ack::set, e -> assertNull(e.getMessage()))).     assertTrue(ack.get().isAcknowledged()).     verify(client, times(2)).execute(eq(UpdateAction.INSTANCE), any(), any()).     verify(clusterService, never()).submitStateUpdateTask(any(), any()). }
false;private;1;5;;private TransportFinalizeJobExecutionAction createAction(ClusterService clusterService) {     return new TransportFinalizeJobExecutionAction(mock(TransportService.class), clusterService, threadPool, mock(ActionFilters.class), mock(IndexNameExpressionResolver.class), client). }
