commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected ForecastRequestStats createTestInstance() {     return createTestInstance("ForecastRequestStatsTest", randomAlphaOfLength(20)). }
false;public;2;44;;public ForecastRequestStats createTestInstance(String jobId, String forecastId) {     ForecastRequestStats forecastRequestStats = new ForecastRequestStats(jobId, forecastId).     if (randomBoolean()) {         forecastRequestStats.setRecordCount(randomLong()).     }     if (randomBoolean()) {         int size = scaledRandomIntBetween(1, 20).         List<String> list = new ArrayList<>().         for (int i = 0. i < size. i++) {             list.add(randomAlphaOfLength(40)).         }         forecastRequestStats.setMessages(list).     }     if (randomBoolean()) {         forecastRequestStats.setTimeStamp(Instant.ofEpochMilli(randomNonNegativeLong())).     }     if (randomBoolean()) {         forecastRequestStats.setStartTime(Instant.ofEpochMilli(randomNonNegativeLong())).     }     if (randomBoolean()) {         forecastRequestStats.setEndTime(Instant.ofEpochMilli(randomNonNegativeLong())).     }     if (randomBoolean()) {         forecastRequestStats.setCreateTime(Instant.ofEpochMilli(randomNonNegativeLong())).     }     if (randomBoolean()) {         forecastRequestStats.setExpiryTime(Instant.ofEpochMilli(randomNonNegativeLong())).     }     if (randomBoolean()) {         forecastRequestStats.setProgress(randomDouble()).     }     if (randomBoolean()) {         forecastRequestStats.setProcessingTime(randomNonNegativeLong()).     }     if (randomBoolean()) {         forecastRequestStats.setMemoryUsage(randomNonNegativeLong()).     }     if (randomBoolean()) {         forecastRequestStats.setStatus(randomFrom(ForecastRequestStatus.values())).     }     return forecastRequestStats. }
false;protected;0;4;;@Override protected Reader<ForecastRequestStats> instanceReader() {     return ForecastRequestStats::new. }
false;protected;1;4;;@Override protected ForecastRequestStats doParseInstance(XContentParser parser) {     return ForecastRequestStats.STRICT_PARSER.apply(parser, null). }
false;public;0;9;;public void testStrictParser() throws IOException {     String json = "{\"job_id\":\"job_1\", \"forecast_id\":\"forecast_1\", \"foo\":\"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ForecastRequestStats.STRICT_PARSER.apply(parser, null)).         assertThat(e.getMessage(), containsString("unknown field [foo]")).     } }
false;public;0;6;;public void testLenientParser() throws IOException {     String json = "{\"job_id\":\"job_1\", \"forecast_id\":\"forecast_1\", \"foo\":\"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         ForecastRequestStats.LENIENT_PARSER.apply(parser, null).     } }
