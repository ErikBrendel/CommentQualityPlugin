commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void tearDownData() {     cleanUp(). }
false;public;0;20;;public void testDefaultRenormalization() throws Exception {     String jobId = "basic-renormalization-it-test-default-renormalization-job".     createAndRunJob(jobId, null).     GetRecordsAction.Request getRecordsRequest = new GetRecordsAction.Request(jobId).     // Setting the record score to 10.0, to avoid the low score records due to multibucket trailing effect     getRecordsRequest.setRecordScore(10.0).     List<AnomalyRecord> records = getRecords(getRecordsRequest).     assertThat(records.size(), equalTo(2)).     AnomalyRecord laterRecord = records.get(0).     assertThat(laterRecord.getActual().get(0), equalTo(100.0)).     AnomalyRecord earlierRecord = records.get(1).     assertThat(earlierRecord.getActual().get(0), equalTo(10.0)).     assertThat(laterRecord.getRecordScore(), greaterThan(earlierRecord.getRecordScore())).     // This is the key assertion: if renormalization never happened then the record_score would     // be the same as the initial_record_score on the anomaly record that happened earlier     assertThat(earlierRecord.getInitialRecordScore(), greaterThan(earlierRecord.getRecordScore())). }
false;public;0;9;;public void testRenormalizationDisabled() throws Exception {     String jobId = "basic-renormalization-it-test-renormalization-disabled-job".     createAndRunJob(jobId, 0L).     List<AnomalyRecord> records = getRecords(jobId).     for (AnomalyRecord record : records) {         assertThat(record.getInitialRecordScore(), equalTo(record.getRecordScore())).     } }
false;private;2;20;;private void createAndRunJob(String jobId, Long renormalizationWindow) throws Exception {     TimeValue bucketSpan = TimeValue.timeValueHours(1).     long startTime = 1491004800000L.     Job.Builder job = buildAndRegisterJob(jobId, bucketSpan, renormalizationWindow).     openJob(job.getId()).     postData(job.getId(), generateData(startTime, bucketSpan, 50, bucketIndex -> {         if (bucketIndex == 35) {             // First anomaly is 10 events             return 10.         } else if (bucketIndex == 45) {             // Second anomaly is 100, should get the highest score and should bring the first score down             return 100.         } else {             return 1.         }     }).stream().collect(Collectors.joining())).     closeJob(job.getId()). }
false;private;3;15;;private Job.Builder buildAndRegisterJob(String jobId, TimeValue bucketSpan, Long renormalizationWindow) {     Detector.Builder detector = new Detector.Builder("count", null).     AnalysisConfig.Builder analysisConfig = new AnalysisConfig.Builder(Arrays.asList(detector.build())).     analysisConfig.setBucketSpan(bucketSpan).     Job.Builder job = new Job.Builder(jobId).     job.setAnalysisConfig(analysisConfig).     DataDescription.Builder dataDescription = new DataDescription.Builder().     job.setDataDescription(dataDescription).     if (renormalizationWindow != null) {         job.setRenormalizationWindowDays(renormalizationWindow).     }     registerJob(job).     putJob(job).     return job. }
