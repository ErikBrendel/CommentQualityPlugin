commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void cleanUpJobs() {     cleanUp(). }
false;public;0;13;;public void testPersistJob() throws Exception {     String jobId = "persist-job-test".     runJob(jobId).     PersistJobAction.Response r = persistJob(jobId).     assertTrue(r.isPersisted()).     // Persisting the job will create a model snapshot     assertBusy(() -> {         List<ModelSnapshot> snapshots = getModelSnapshots(jobId).         assertFalse(snapshots.isEmpty()).     }). }
false;private;1;15;;private void runJob(String jobId) throws Exception {     TimeValue bucketSpan = TimeValue.timeValueMinutes(5).     Detector.Builder detector = new Detector.Builder("count", null).     AnalysisConfig.Builder analysisConfig = new AnalysisConfig.Builder(Arrays.asList(detector.build())).     analysisConfig.setBucketSpan(bucketSpan).     Job.Builder job = new Job.Builder(jobId).     job.setAnalysisConfig(analysisConfig).     job.setDataDescription(new DataDescription.Builder()).     registerJob(job).     putJob(job).     openJob(job.getId()).     List<String> data = generateData(System.currentTimeMillis(), bucketSpan, 10, bucketIndex -> randomIntBetween(10, 20)).     postData(job.getId(), data.stream().collect(Collectors.joining())). }
