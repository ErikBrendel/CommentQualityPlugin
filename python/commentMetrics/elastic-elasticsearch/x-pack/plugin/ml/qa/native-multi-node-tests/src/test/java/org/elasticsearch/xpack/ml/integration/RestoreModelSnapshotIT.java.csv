commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void tearDownData() {     cleanUp(). }
false;public;0;37;;public void test() throws Exception {     TimeValue bucketSpan = TimeValue.timeValueHours(1).     int bucketCount = 72.     List<String> data = new ArrayList<>().     long now = System.currentTimeMillis().     long timestamp = now - bucketCount * bucketSpan.getMillis().     for (int i = 0. i < bucketCount. i++) {         Map<String, Object> record = new HashMap<>().         record.put("time", timestamp).         data.add(createJsonRecord(record)).         timestamp += bucketSpan.getMillis().     }     // Create the job, post the data and close the job     Job.Builder job = buildAndRegisterJob("restore-model-snapshot-job", bucketSpan).     openJob(job.getId()).     // Forecast should fail when the model has seen no data, ie model state not initialized     expectThrows(ElasticsearchStatusException.class, () -> forecast(job.getId(), TimeValue.timeValueHours(3), null)).     postData(job.getId(), data.stream().collect(Collectors.joining())).     closeJob(job.getId()).     // Reopen the job and check forecast works     openJob(job.getId()).     String forecastId = forecast(job.getId(), TimeValue.timeValueHours(3), null).     waitForecastToFinish(job.getId(), forecastId).     // In a multi-node cluster the replica may not be up to date     // so wait for the change     assertBusy(() -> {         ForecastRequestStats forecastStats = getForecastStats(job.getId(), forecastId).         assertThat(forecastStats.getMessages(), anyOf(nullValue(), empty())).         assertThat(forecastStats.getMemoryUsage(), greaterThan(0L)).         assertThat(forecastStats.getRecordCount(), equalTo(3L)).     }).     closeJob(job.getId()). }
false;private;2;12;;private Job.Builder buildAndRegisterJob(String jobId, TimeValue bucketSpan) throws Exception {     Detector.Builder detector = new Detector.Builder("count", null).     AnalysisConfig.Builder analysisConfig = new AnalysisConfig.Builder(Collections.singletonList(detector.build())).     analysisConfig.setBucketSpan(bucketSpan).     Job.Builder job = new Job.Builder(jobId).     job.setAnalysisConfig(analysisConfig).     DataDescription.Builder dataDescription = new DataDescription.Builder().     job.setDataDescription(dataDescription).     registerJob(job).     putJob(job).     return job. }
