commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected void cleanUpResources() {     cleanUpDatafeeds().     cleanUpJobs(). }
false;private;0;14;;private void cleanUpDatafeeds() {     for (DatafeedConfig datafeed : datafeeds) {         try {             stopDatafeed(datafeed.getId()).         } catch (Exception e) {         // ignore         }         try {             deleteDatafeed(datafeed.getId()).         } catch (Exception e) {         // ignore         }     } }
false;private;0;14;;private void cleanUpJobs() {     for (Job.Builder job : jobs) {         try {             closeJob(job.getId()).         } catch (Exception e) {         // ignore         }         try {             deleteJob(job.getId()).         } catch (Exception e) {         // ignore         }     } }
false;protected;1;5;;protected void registerJob(Job.Builder job) {     if (jobs.add(job) == false) {         throw new IllegalArgumentException("job [" + job.getId() + "] is already registered").     } }
false;protected;1;5;;protected void registerDatafeed(DatafeedConfig datafeed) {     if (datafeeds.add(datafeed) == false) {         throw new IllegalArgumentException("datafeed [" + datafeed.getId() + "] is already registered").     } }
false;protected;0;3;;protected List<Job.Builder> getJobs() {     return jobs. }
false;protected;1;4;;protected PutJobAction.Response putJob(Job.Builder job) {     PutJobAction.Request request = new PutJobAction.Request(job).     return client().execute(PutJobAction.INSTANCE, request).actionGet(). }
false;protected;1;4;;protected AcknowledgedResponse openJob(String jobId) {     OpenJobAction.Request request = new OpenJobAction.Request(jobId).     return client().execute(OpenJobAction.INSTANCE, request).actionGet(). }
false;protected;1;4;;protected CloseJobAction.Response closeJob(String jobId) {     CloseJobAction.Request request = new CloseJobAction.Request(jobId).     return client().execute(CloseJobAction.INSTANCE, request).actionGet(). }
false;protected;2;5;;protected FlushJobAction.Response flushJob(String jobId, boolean calcInterim) {     FlushJobAction.Request request = new FlushJobAction.Request(jobId).     request.setCalcInterim(calcInterim).     return client().execute(FlushJobAction.INSTANCE, request).actionGet(). }
false;protected;2;4;;protected PutJobAction.Response updateJob(String jobId, JobUpdate update) {     UpdateJobAction.Request request = new UpdateJobAction.Request(jobId, update).     return client().execute(UpdateJobAction.INSTANCE, request).actionGet(). }
false;protected;1;4;;protected AcknowledgedResponse deleteJob(String jobId) {     DeleteJobAction.Request request = new DeleteJobAction.Request(jobId).     return client().execute(DeleteJobAction.INSTANCE, request).actionGet(). }
false;protected;1;4;;protected PutDatafeedAction.Response putDatafeed(DatafeedConfig datafeed) {     PutDatafeedAction.Request request = new PutDatafeedAction.Request(datafeed).     return client().execute(PutDatafeedAction.INSTANCE, request).actionGet(). }
false;protected;1;4;;protected StopDatafeedAction.Response stopDatafeed(String datafeedId) {     StopDatafeedAction.Request request = new StopDatafeedAction.Request(datafeedId).     return client().execute(StopDatafeedAction.INSTANCE, request).actionGet(). }
false;protected;1;4;;protected AcknowledgedResponse deleteDatafeed(String datafeedId) {     DeleteDatafeedAction.Request request = new DeleteDatafeedAction.Request(datafeedId).     return client().execute(DeleteDatafeedAction.INSTANCE, request).actionGet(). }
false;protected;3;5;;protected AcknowledgedResponse startDatafeed(String datafeedId, long start, Long end) {     StartDatafeedAction.Request request = new StartDatafeedAction.Request(datafeedId, start).     request.getParams().setEndTime(end).     return client().execute(StartDatafeedAction.INSTANCE, request).actionGet(). }
false;protected;1;3;;protected void waitUntilJobIsClosed(String jobId) throws Exception {     waitUntilJobIsClosed(jobId, TimeValue.timeValueSeconds(30)). }
false;protected;2;4;;protected void waitUntilJobIsClosed(String jobId, TimeValue waitTime) throws Exception {     assertBusy(() -> assertThat(getJobStats(jobId).get(0).getState(), equalTo(JobState.CLOSED)), waitTime.getMillis(), TimeUnit.MILLISECONDS). }
false;protected;1;4;;protected List<Job> getJob(String jobId) {     GetJobsAction.Request request = new GetJobsAction.Request(jobId).     return client().execute(GetJobsAction.INSTANCE, request).actionGet().getResponse().results(). }
false;protected;1;5;;protected List<GetJobsStatsAction.Response.JobStats> getJobStats(String jobId) {     GetJobsStatsAction.Request request = new GetJobsStatsAction.Request(jobId).     GetJobsStatsAction.Response response = client().execute(GetJobsStatsAction.INSTANCE, request).actionGet().     return response.getResponse().results(). }
false;protected;1;4;;protected List<Bucket> getBuckets(String jobId) {     GetBucketsAction.Request request = new GetBucketsAction.Request(jobId).     return getBuckets(request). }
false;protected;1;4;;protected List<Bucket> getBuckets(GetBucketsAction.Request request) {     GetBucketsAction.Response response = client().execute(GetBucketsAction.INSTANCE, request).actionGet().     return response.getBuckets().results(). }
false;protected;1;4;;protected List<AnomalyRecord> getRecords(String jobId) {     GetRecordsAction.Request request = new GetRecordsAction.Request(jobId).     return getRecords(request). }
false;protected;1;4;;protected List<AnomalyRecord> getRecords(GetRecordsAction.Request request) {     GetRecordsAction.Response response = client().execute(GetRecordsAction.INSTANCE, request).actionGet().     return response.getRecords().results(). }
false;protected;1;5;;protected List<ModelSnapshot> getModelSnapshots(String jobId) {     GetModelSnapshotsAction.Request request = new GetModelSnapshotsAction.Request(jobId, null).     GetModelSnapshotsAction.Response response = client().execute(GetModelSnapshotsAction.INSTANCE, request).actionGet().     return response.getPage().results(). }
false;protected;2;4;;protected RevertModelSnapshotAction.Response revertModelSnapshot(String jobId, String snapshotId) {     RevertModelSnapshotAction.Request request = new RevertModelSnapshotAction.Request(jobId, snapshotId).     return client().execute(RevertModelSnapshotAction.INSTANCE, request).actionGet(). }
false;protected;1;7;;protected List<CategoryDefinition> getCategories(String jobId) {     GetCategoriesAction.Request getCategoriesRequest = new GetCategoriesAction.Request(jobId).     getCategoriesRequest.setPageParams(new PageParams()).     GetCategoriesAction.Response categoriesResponse = client().execute(GetCategoriesAction.INSTANCE, getCategoriesRequest).actionGet().     return categoriesResponse.getResult().results(). }
false;protected;2;6;;protected DataCounts postData(String jobId, String data) {     logger.debug("Posting data to job [{}]:\n{}", jobId, data).     PostDataAction.Request request = new PostDataAction.Request(jobId).     request.setContent(new BytesArray(data), XContentType.JSON).     return client().execute(PostDataAction.INSTANCE, request).actionGet().getDataCounts(). }
false;protected;3;10;;protected String forecast(String jobId, TimeValue duration, TimeValue expiresIn) {     ForecastJobAction.Request request = new ForecastJobAction.Request(jobId).     if (duration != null) {         request.setDuration(duration.getStringRep()).     }     if (expiresIn != null) {         request.setExpiresIn(expiresIn.getStringRep()).     }     return client().execute(ForecastJobAction.INSTANCE, request).actionGet().getForecastId(). }
false;protected;2;7;;protected void waitForecastToFinish(String jobId, String forecastId) throws Exception {     assertBusy(() -> {         ForecastRequestStats forecastRequestStats = getForecastStats(jobId, forecastId).         assertThat(forecastRequestStats, is(notNullValue())).         assertThat(forecastRequestStats.getStatus(), equalTo(ForecastRequestStats.ForecastRequestStatus.FINISHED)).     }, 30, TimeUnit.SECONDS). }
false;protected;2;19;;protected ForecastRequestStats getForecastStats(String jobId, String forecastId) {     SearchResponse searchResponse = client().prepareSearch(AnomalyDetectorsIndex.jobResultsAliasedName(jobId)).setQuery(QueryBuilders.idsQuery().addIds(ForecastRequestStats.documentId(jobId, forecastId))).get().     if (searchResponse.getHits().getHits().length == 0) {         return null.     }     assertThat(searchResponse.getHits().getHits().length, equalTo(1)).     try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, searchResponse.getHits().getHits()[0].getSourceRef().streamInput())) {         return ForecastRequestStats.STRICT_PARSER.apply(parser, null).     } catch (IOException e) {         throw new IllegalStateException(e).     } }
false;protected;0;20;;protected List<ForecastRequestStats> getForecastStats() {     List<ForecastRequestStats> forecastStats = new ArrayList<>().     SearchResponse searchResponse = client().prepareSearch(AnomalyDetectorsIndex.jobResultsIndexPrefix() + "*").setSize(1000).setQuery(QueryBuilders.boolQuery().filter(QueryBuilders.termQuery(Result.RESULT_TYPE.getPreferredName(), ForecastRequestStats.RESULT_TYPE_VALUE))).execute().actionGet().     SearchHits hits = searchResponse.getHits().     for (SearchHit hit : hits) {         try {             XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, hit.getSourceRef().streamInput()).             forecastStats.add(ForecastRequestStats.STRICT_PARSER.apply(parser, null)).         } catch (IOException e) {             throw new IllegalStateException(e).         }     }     return forecastStats. }
false;protected;2;9;;protected long countForecastDocs(String jobId, String forecastId) {     SearchResponse searchResponse = client().prepareSearch(AnomalyDetectorsIndex.jobResultsIndexPrefix() + "*").setQuery(QueryBuilders.boolQuery().filter(QueryBuilders.termQuery(Result.RESULT_TYPE.getPreferredName(), Forecast.RESULT_TYPE_VALUE)).filter(QueryBuilders.termQuery(Job.ID.getPreferredName(), jobId)).filter(QueryBuilders.termQuery(Forecast.FORECAST_ID.getPreferredName(), forecastId))).execute().actionGet().     return searchResponse.getHits().getTotalHits().value. }
false;protected;2;23;;protected List<Forecast> getForecasts(String jobId, ForecastRequestStats forecastRequestStats) {     List<Forecast> forecasts = new ArrayList<>().     SearchResponse searchResponse = client().prepareSearch(AnomalyDetectorsIndex.jobResultsIndexPrefix() + "*").setSize((int) forecastRequestStats.getRecordCount()).setQuery(QueryBuilders.boolQuery().filter(QueryBuilders.termQuery(Result.RESULT_TYPE.getPreferredName(), Forecast.RESULT_TYPE_VALUE)).filter(QueryBuilders.termQuery(Job.ID.getPreferredName(), jobId)).filter(QueryBuilders.termQuery(Forecast.FORECAST_ID.getPreferredName(), forecastRequestStats.getForecastId()))).addSort(SortBuilders.fieldSort(Result.TIMESTAMP.getPreferredName()).order(SortOrder.ASC)).execute().actionGet().     SearchHits hits = searchResponse.getHits().     for (SearchHit hit : hits) {         try {             XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, hit.getSourceRef().streamInput()).             forecasts.add(Forecast.STRICT_PARSER.apply(parser, null)).         } catch (IOException e) {             throw new IllegalStateException(e).         }     }     return forecasts. }
false;protected;1;3;;protected PutFilterAction.Response putMlFilter(MlFilter filter) {     return client().execute(PutFilterAction.INSTANCE, new PutFilterAction.Request(filter)).actionGet(). }
false;protected;3;4;;protected PutCalendarAction.Response putCalendar(String calendarId, List<String> jobIds, String description) {     PutCalendarAction.Request request = new PutCalendarAction.Request(new Calendar(calendarId, jobIds, description)).     return client().execute(PutCalendarAction.INSTANCE, request).actionGet(). }
false;protected;2;4;;protected PostCalendarEventsAction.Response postScheduledEvents(String calendarId, List<ScheduledEvent> events) {     PostCalendarEventsAction.Request request = new PostCalendarEventsAction.Request(calendarId, events).     return client().execute(PostCalendarEventsAction.INSTANCE, request).actionGet(). }
false;protected;1;4;;protected PersistJobAction.Response persistJob(String jobId) {     PersistJobAction.Request request = new PersistJobAction.Request(jobId).     return client().execute(PersistJobAction.INSTANCE, request).actionGet(). }
false;protected;4;14;;protected List<String> generateData(long timestamp, TimeValue bucketSpan, int bucketCount, Function<Integer, Integer> timeToCountFunction) throws IOException {     List<String> data = new ArrayList<>().     long now = timestamp.     for (int bucketIndex = 0. bucketIndex < bucketCount. bucketIndex++) {         for (int count = 0. count < timeToCountFunction.apply(bucketIndex). count++) {             Map<String, Object> record = new HashMap<>().             record.put("time", now).             data.add(createJsonRecord(record)).         }         now += bucketSpan.getMillis().     }     return data. }
false;protected,static;1;3;;protected static String createJsonRecord(Map<String, Object> keyValueMap) throws IOException {     return Strings.toString(JsonXContent.contentBuilder().map(keyValueMap)) + "\n". }
