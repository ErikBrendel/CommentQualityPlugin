commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Override public void test() throws IOException {     try {         super.test().         // role         for (ExecutableSection section : testCandidate.getTestSection().getExecutableSections()) {             if (section instanceof DoSection) {                 if (((DoSection) section).getApiCallSection().getApi().startsWith("ml.") && ((DoSection) section).getApiCallSection().getApi().startsWith("ml.get_") == false && ((DoSection) section).getApiCallSection().getApi().equals("ml.find_file_structure") == false) {                     fail("should have failed because of missing role").                 }             }         }     } catch (AssertionError ae) {         assertThat(ae.getMessage(), either(containsString("action [cluster:monitor/xpack/ml")).or(containsString("action [cluster:admin/xpack/ml"))).         assertThat(ae.getMessage(), containsString("returned [403 Forbidden]")).         assertThat(ae.getMessage(), containsString("is unauthorized for user [ml_user]")).     } }
false;protected;0;4;;@Override protected String[] getCredentials() {     return new String[] { "ml_user", "x-pack-test-password" }. }
