# id;timestamp;commentText;codeText;commentWords;codeWords
TransportGraphExploreAction -> AsyncGraphAction -> synchronized void expand();1524684173;Step out from some existing vertex terms looking for useful_connections;synchronized void expand() {_            if (hasTimedOut()) {_                timedOut.set(true)__                listener.onResponse(buildResponse())__                return__            }_            Map<String, Set<Vertex>> lastHopFindings = hopFindings.get(currentHopNumber)__            if ((currentHopNumber >= (request.getHopNumbers() - 1)) || (lastHopFindings == null) || (lastHopFindings.size() == 0)) {_                _                _                listener.onResponse(buildResponse())__                return__            }_            Hop lastHop = request.getHop(currentHopNumber)__            currentHopNumber++__            Hop currentHop = request.getHop(currentHopNumber)__            _            final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                    request.indicesOptions())__            if (request.routing() != null) {_                searchRequest.routing(request.routing())__            }__            BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__            _            _            _            _            _            _            _            _            _            AggregationBuilder sampleAgg = null__            if (request.sampleDiversityField() != null) {_                DiversifiedAggregationBuilder diversifiedSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                        .shardSize(request.sampleSize())__                diversifiedSampleAgg.field(request.sampleDiversityField())__                diversifiedSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                sampleAgg = diversifiedSampleAgg__            }else{_                sampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__            }_            _            _            rootBool.must(currentHop.guidingQuery())__            _            _            _            _            BoolQueryBuilder sourceTermsOrClause = QueryBuilders.boolQuery()__            addUserDefinedIncludesToQuery(currentHop, sourceTermsOrClause)__            addBigOrClause(lastHopFindings, sourceTermsOrClause)___            rootBool.must(sourceTermsOrClause)__ _            _            _            _            _            for (int fieldNum = 0_ fieldNum < lastHop.getNumberVertexRequests()_ fieldNum++) {_                VertexRequest lastVr = lastHop.getVertexRequest(fieldNum)__                Set<Vertex> lastWaveVerticesForField = lastHopFindings.get(lastVr.fieldName())__                if (lastWaveVerticesForField == null) {_                    continue__                }_                String[] terms = new String[lastWaveVerticesForField.size()]__                int i = 0__                for (Vertex v : lastWaveVerticesForField) {_                    terms[i++] = v.getTerm()__                }_                TermsAggregationBuilder lastWaveTermsAgg = AggregationBuilders.terms("field" + fieldNum)_                        .includeExclude(new IncludeExclude(terms, null))_                        .shardMinDocCount(1)_                        .field(lastVr.fieldName()).minDocCount(1)_                        _                        _                        _                        .executionHint("map")_                        .size(terms.length)__                sampleAgg.subAggregation(lastWaveTermsAgg)__                for (int f = 0_ f < currentHop.getNumberVertexRequests()_ f++) {_                    VertexRequest vr = currentHop.getVertexRequest(f)__                    int size=vr.size()__                    if (vr.fieldName().equals(lastVr.fieldName())) {_                        _                        _                        size++__                    }_                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder nextWaveSigTerms = AggregationBuilders.significantTerms("field" + f)_                                .field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount()).executionHint("map").size(size)___                        _                        _                        if (size < 10) {_                            nextWaveSigTerms.shardSize(10)__                        }_                        ____                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWaveSigTerms.includeExclude(new IncludeExclude(includes, null))__                            _                            _                            _                            _                            _                            _                            __                            __                        } else if (vr.hasExcludeClauses()) {_                            nextWaveSigTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWaveSigTerms)__                    } else {_                        TermsAggregationBuilder nextWavePopularTerms = AggregationBuilders.terms("field" + f).field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount())_                                _                                _                                _                                .executionHint("map")_                                .size(size)__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWavePopularTerms.includeExclude(new IncludeExclude(includes, null))__                            _                        } else if (vr.hasExcludeClauses()) {_                            nextWavePopularTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWavePopularTerms)__                    }_                }_            }__            _            SearchSourceBuilder source = new SearchSourceBuilder().query(rootBool).aggregation(sampleAgg).size(0)__            if (request.timeout() != null) {_                source.timeout(TimeValue.timeValueMillis(timeRemainingMillis()))__            }_            searchRequest.source(source)___            _            logger.trace("executing expansion graph search request")__            searchAction.execute(searchRequest, new ActionListener<SearchResponse>() {_                @Override_                public void onResponse(SearchResponse searchResponse) {_                    _                    addShardFailures(searchResponse.getShardFailures())__                   _                    ArrayList<Connection> newConnections = new ArrayList<Connection>()__                    ArrayList<Vertex> newVertices = new ArrayList<Vertex>()__                    Sampler sample = searchResponse.getAggregations().get("sample")___                    _                    _                    _                    _                    _                    _                    double totalSignalOutput = getExpandTotalSignalStrength(lastHop, currentHop, sample)__                    _                    _                    _                    if (totalSignalOutput > 0) {_                        addAndScoreNewVertices(lastHop, currentHop, sample, totalSignalOutput, newConnections, newVertices)___                        trimNewAdditions(currentHop, newConnections, newVertices)__                    }__                    _                    expand()__                _                }___                _                _                private void addAndScoreNewVertices(Hop lastHop, Hop currentHop, Sampler sample, double totalSignalOutput,_                        ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    _                    _                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if(lastWaveTerms == null){_                            _                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            Vertex fromVertex = getVertex(lastVr.fieldName(), lastWaveTerm.getKeyAsString())__                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                _                                _                                double decay = 0.95d__                                if (request.useSignificance()) {_                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(fromVertex.getField())) &&_                                                    (bucket.getKeyAsString().equals(fromVertex.getTerm()))) {_                                                _                                                continue__                                            }_                                            double signalStrength = bucket.getSignificanceScore() / totalSignalOutput___                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                                _                                                _                                                _                                                _                                                toVertex.setFg(Math.max(toVertex.getFg(), bucket.getSubsetDf()))__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                } else {_                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            double signalStrength = bucket.getDocCount() / totalSignalOutput__                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, 0, 0)__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                }_                            }_                        }_                    }_                }___                _                _                _                _                _                _                private void trimNewAdditions(Hop currentHop, ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    Set<Vertex> evictions = new HashSet<>()__                    _                    for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                        _                        VertexRequest vr = currentHop.getVertexRequest(k)__                        if (newVertices.size() <= vr.size()) {_                            _                            continue__                        }_                        _                        VertexPriorityQueue pq = new VertexPriorityQueue(vr.size())__                        for (Vertex vertex : newVertices) {_                            if (vertex.getField().equals(vr.fieldName())) {_                                Vertex eviction = pq.insertWithOverflow(vertex)__                                if (eviction != null) {_                                    evictions.add(eviction)__                                }_                            }_                        }_                    }_                    _                    if (evictions.size() > 0) {_                        for (Connection connection : newConnections) {_                            if (evictions.contains(connection.getTo())) {_                                connections.remove(connection.getId())__                                removeVertex(connection.getTo())__                            }_                        }_                    }_                }_                _                _                _                _                _                _                __                _                private double getExpandTotalSignalStrength(Hop lastHop, Hop currentHop, Sampler sample) {_                    double totalSignalOutput = 0__                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if (lastWaveTerms == null) {_                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                if (request.useSignificance()) {_                                    _                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getSignificanceScore()__                                            }_                                        }_                                    }_                                } else {_                                    _                                    _                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getDocCount()__                                            }_                                        }_                                    }_                                }_                            }_                        }_                    }_                    return totalSignalOutput__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__            }_            })__        };step,out,from,some,existing,vertex,terms,looking,for,useful,connections;synchronized,void,expand,if,has,timed,out,timed,out,set,true,listener,on,response,build,response,return,map,string,set,vertex,last,hop,findings,hop,findings,get,current,hop,number,if,current,hop,number,request,get,hop,numbers,1,last,hop,findings,null,last,hop,findings,size,0,listener,on,response,build,response,return,hop,last,hop,request,get,hop,current,hop,number,current,hop,number,hop,current,hop,request,get,hop,current,hop,number,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,sample,agg,field,request,sample,diversity,field,diversified,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,sample,agg,diversified,sample,agg,else,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,root,bool,must,current,hop,guiding,query,bool,query,builder,source,terms,or,clause,query,builders,bool,query,add,user,defined,includes,to,query,current,hop,source,terms,or,clause,add,big,or,clause,last,hop,findings,source,terms,or,clause,root,bool,must,source,terms,or,clause,for,int,field,num,0,field,num,last,hop,get,number,vertex,requests,field,num,vertex,request,last,vr,last,hop,get,vertex,request,field,num,set,vertex,last,wave,vertices,for,field,last,hop,findings,get,last,vr,field,name,if,last,wave,vertices,for,field,null,continue,string,terms,new,string,last,wave,vertices,for,field,size,int,i,0,for,vertex,v,last,wave,vertices,for,field,terms,i,v,get,term,terms,aggregation,builder,last,wave,terms,agg,aggregation,builders,terms,field,field,num,include,exclude,new,include,exclude,terms,null,shard,min,doc,count,1,field,last,vr,field,name,min,doc,count,1,execution,hint,map,size,terms,length,sample,agg,sub,aggregation,last,wave,terms,agg,for,int,f,0,f,current,hop,get,number,vertex,requests,f,vertex,request,vr,current,hop,get,vertex,request,f,int,size,vr,size,if,vr,field,name,equals,last,vr,field,name,size,if,request,use,significance,significant,terms,aggregation,builder,next,wave,sig,terms,aggregation,builders,significant,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,size,10,next,wave,sig,terms,shard,size,10,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,sig,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,sig,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,sig,terms,else,terms,aggregation,builder,next,wave,popular,terms,aggregation,builders,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,popular,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,popular,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,popular,terms,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,sample,agg,size,0,if,request,timeout,null,source,timeout,time,value,time,value,millis,time,remaining,millis,search,request,source,source,logger,trace,executing,expansion,graph,search,request,search,action,execute,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,array,list,connection,new,connections,new,array,list,connection,array,list,vertex,new,vertices,new,array,list,vertex,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,output,get,expand,total,signal,strength,last,hop,current,hop,sample,if,total,signal,output,0,add,and,score,new,vertices,last,hop,current,hop,sample,total,signal,output,new,connections,new,vertices,trim,new,additions,current,hop,new,connections,new,vertices,expand,private,void,add,and,score,new,vertices,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,array,list,connection,new,connections,array,list,vertex,new,vertices,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,vertex,from,vertex,get,vertex,last,vr,field,name,last,wave,term,get,key,as,string,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,double,decay,0,95d,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,from,vertex,get,field,bucket,get,key,as,string,equals,from,vertex,get,term,continue,double,signal,strength,bucket,get,significance,score,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,to,vertex,set,fg,math,max,to,vertex,get,fg,bucket,get,subset,df,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,double,signal,strength,bucket,get,doc,count,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,0,0,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,private,void,trim,new,additions,hop,current,hop,array,list,connection,new,connections,array,list,vertex,new,vertices,set,vertex,evictions,new,hash,set,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,new,vertices,size,vr,size,continue,vertex,priority,queue,pq,new,vertex,priority,queue,vr,size,for,vertex,vertex,new,vertices,if,vertex,get,field,equals,vr,field,name,vertex,eviction,pq,insert,with,overflow,vertex,if,eviction,null,evictions,add,eviction,if,evictions,size,0,for,connection,connection,new,connections,if,evictions,contains,connection,get,to,connections,remove,connection,get,id,remove,vertex,connection,get,to,private,double,get,expand,total,signal,strength,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,0,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,significance,score,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,doc,count,return,total,signal,output,override,public,void,on,failure,exception,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> synchronized void expand();1529487105;Step out from some existing vertex terms looking for useful_connections;synchronized void expand() {_            if (hasTimedOut()) {_                timedOut.set(true)__                listener.onResponse(buildResponse())__                return__            }_            Map<String, Set<Vertex>> lastHopFindings = hopFindings.get(currentHopNumber)__            if ((currentHopNumber >= (request.getHopNumbers() - 1)) || (lastHopFindings == null) || (lastHopFindings.size() == 0)) {_                _                _                listener.onResponse(buildResponse())__                return__            }_            Hop lastHop = request.getHop(currentHopNumber)__            currentHopNumber++__            Hop currentHop = request.getHop(currentHopNumber)__            _            final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                    request.indicesOptions())__            if (request.routing() != null) {_                searchRequest.routing(request.routing())__            }__            BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__            _            _            _            _            _            _            _            _            _            AggregationBuilder sampleAgg = null__            if (request.sampleDiversityField() != null) {_                DiversifiedAggregationBuilder diversifiedSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                        .shardSize(request.sampleSize())__                diversifiedSampleAgg.field(request.sampleDiversityField())__                diversifiedSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                sampleAgg = diversifiedSampleAgg__            }else{_                sampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__            }_            _            _            rootBool.must(currentHop.guidingQuery())__            _            _            _            _            BoolQueryBuilder sourceTermsOrClause = QueryBuilders.boolQuery()__            addUserDefinedIncludesToQuery(currentHop, sourceTermsOrClause)__            addBigOrClause(lastHopFindings, sourceTermsOrClause)___            rootBool.must(sourceTermsOrClause)__ _            _            _            _            _            for (int fieldNum = 0_ fieldNum < lastHop.getNumberVertexRequests()_ fieldNum++) {_                VertexRequest lastVr = lastHop.getVertexRequest(fieldNum)__                Set<Vertex> lastWaveVerticesForField = lastHopFindings.get(lastVr.fieldName())__                if (lastWaveVerticesForField == null) {_                    continue__                }_                String[] terms = new String[lastWaveVerticesForField.size()]__                int i = 0__                for (Vertex v : lastWaveVerticesForField) {_                    terms[i++] = v.getTerm()__                }_                TermsAggregationBuilder lastWaveTermsAgg = AggregationBuilders.terms("field" + fieldNum)_                        .includeExclude(new IncludeExclude(terms, null))_                        .shardMinDocCount(1)_                        .field(lastVr.fieldName()).minDocCount(1)_                        _                        _                        _                        .executionHint("map")_                        .size(terms.length)__                sampleAgg.subAggregation(lastWaveTermsAgg)__                for (int f = 0_ f < currentHop.getNumberVertexRequests()_ f++) {_                    VertexRequest vr = currentHop.getVertexRequest(f)__                    int size=vr.size()__                    if (vr.fieldName().equals(lastVr.fieldName())) {_                        _                        _                        size++__                    }_                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder nextWaveSigTerms = AggregationBuilders.significantTerms("field" + f)_                                .field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount()).executionHint("map").size(size)___                        _                        _                        if (size < 10) {_                            nextWaveSigTerms.shardSize(10)__                        }_                        ____                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWaveSigTerms.includeExclude(new IncludeExclude(includes, null))__                            _                            _                            _                            _                            _                            _                            __                            __                        } else if (vr.hasExcludeClauses()) {_                            nextWaveSigTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWaveSigTerms)__                    } else {_                        TermsAggregationBuilder nextWavePopularTerms = AggregationBuilders.terms("field" + f).field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount())_                                _                                _                                _                                .executionHint("map")_                                .size(size)__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWavePopularTerms.includeExclude(new IncludeExclude(includes, null))__                            _                        } else if (vr.hasExcludeClauses()) {_                            nextWavePopularTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWavePopularTerms)__                    }_                }_            }__            _            SearchSourceBuilder source = new SearchSourceBuilder().query(rootBool).aggregation(sampleAgg).size(0)__            if (request.timeout() != null) {_                source.timeout(TimeValue.timeValueMillis(timeRemainingMillis()))__            }_            searchRequest.source(source)___            _            logger.trace("executing expansion graph search request")__            searchAction.execute(searchRequest, new ActionListener<SearchResponse>() {_                @Override_                public void onResponse(SearchResponse searchResponse) {_                    _                    addShardFailures(searchResponse.getShardFailures())__                   _                    ArrayList<Connection> newConnections = new ArrayList<Connection>()__                    ArrayList<Vertex> newVertices = new ArrayList<Vertex>()__                    Sampler sample = searchResponse.getAggregations().get("sample")___                    _                    _                    _                    _                    _                    _                    double totalSignalOutput = getExpandTotalSignalStrength(lastHop, currentHop, sample)__                    _                    _                    _                    if (totalSignalOutput > 0) {_                        addAndScoreNewVertices(lastHop, currentHop, sample, totalSignalOutput, newConnections, newVertices)___                        trimNewAdditions(currentHop, newConnections, newVertices)__                    }__                    _                    expand()__                _                }___                _                _                private void addAndScoreNewVertices(Hop lastHop, Hop currentHop, Sampler sample, double totalSignalOutput,_                        ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    _                    _                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if(lastWaveTerms == null){_                            _                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            Vertex fromVertex = getVertex(lastVr.fieldName(), lastWaveTerm.getKeyAsString())__                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                _                                _                                double decay = 0.95d__                                if (request.useSignificance()) {_                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(fromVertex.getField())) &&_                                                    (bucket.getKeyAsString().equals(fromVertex.getTerm()))) {_                                                _                                                continue__                                            }_                                            double signalStrength = bucket.getSignificanceScore() / totalSignalOutput___                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                                _                                                _                                                _                                                _                                                toVertex.setFg(Math.max(toVertex.getFg(), bucket.getSubsetDf()))__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                } else {_                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            double signalStrength = bucket.getDocCount() / totalSignalOutput__                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, 0, 0)__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                }_                            }_                        }_                    }_                }___                _                _                _                _                _                _                private void trimNewAdditions(Hop currentHop, ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    Set<Vertex> evictions = new HashSet<>()__                    _                    for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                        _                        VertexRequest vr = currentHop.getVertexRequest(k)__                        if (newVertices.size() <= vr.size()) {_                            _                            continue__                        }_                        _                        VertexPriorityQueue pq = new VertexPriorityQueue(vr.size())__                        for (Vertex vertex : newVertices) {_                            if (vertex.getField().equals(vr.fieldName())) {_                                Vertex eviction = pq.insertWithOverflow(vertex)__                                if (eviction != null) {_                                    evictions.add(eviction)__                                }_                            }_                        }_                    }_                    _                    if (evictions.size() > 0) {_                        for (Connection connection : newConnections) {_                            if (evictions.contains(connection.getTo())) {_                                connections.remove(connection.getId())__                                removeVertex(connection.getTo())__                            }_                        }_                    }_                }_                _                _                _                _                _                _                __                _                private double getExpandTotalSignalStrength(Hop lastHop, Hop currentHop, Sampler sample) {_                    double totalSignalOutput = 0__                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if (lastWaveTerms == null) {_                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                if (request.useSignificance()) {_                                    _                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getSignificanceScore()__                                            }_                                        }_                                    }_                                } else {_                                    _                                    _                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getDocCount()__                                            }_                                        }_                                    }_                                }_                            }_                        }_                    }_                    return totalSignalOutput__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__            }_            })__        };step,out,from,some,existing,vertex,terms,looking,for,useful,connections;synchronized,void,expand,if,has,timed,out,timed,out,set,true,listener,on,response,build,response,return,map,string,set,vertex,last,hop,findings,hop,findings,get,current,hop,number,if,current,hop,number,request,get,hop,numbers,1,last,hop,findings,null,last,hop,findings,size,0,listener,on,response,build,response,return,hop,last,hop,request,get,hop,current,hop,number,current,hop,number,hop,current,hop,request,get,hop,current,hop,number,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,sample,agg,field,request,sample,diversity,field,diversified,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,sample,agg,diversified,sample,agg,else,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,root,bool,must,current,hop,guiding,query,bool,query,builder,source,terms,or,clause,query,builders,bool,query,add,user,defined,includes,to,query,current,hop,source,terms,or,clause,add,big,or,clause,last,hop,findings,source,terms,or,clause,root,bool,must,source,terms,or,clause,for,int,field,num,0,field,num,last,hop,get,number,vertex,requests,field,num,vertex,request,last,vr,last,hop,get,vertex,request,field,num,set,vertex,last,wave,vertices,for,field,last,hop,findings,get,last,vr,field,name,if,last,wave,vertices,for,field,null,continue,string,terms,new,string,last,wave,vertices,for,field,size,int,i,0,for,vertex,v,last,wave,vertices,for,field,terms,i,v,get,term,terms,aggregation,builder,last,wave,terms,agg,aggregation,builders,terms,field,field,num,include,exclude,new,include,exclude,terms,null,shard,min,doc,count,1,field,last,vr,field,name,min,doc,count,1,execution,hint,map,size,terms,length,sample,agg,sub,aggregation,last,wave,terms,agg,for,int,f,0,f,current,hop,get,number,vertex,requests,f,vertex,request,vr,current,hop,get,vertex,request,f,int,size,vr,size,if,vr,field,name,equals,last,vr,field,name,size,if,request,use,significance,significant,terms,aggregation,builder,next,wave,sig,terms,aggregation,builders,significant,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,size,10,next,wave,sig,terms,shard,size,10,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,sig,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,sig,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,sig,terms,else,terms,aggregation,builder,next,wave,popular,terms,aggregation,builders,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,popular,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,popular,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,popular,terms,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,sample,agg,size,0,if,request,timeout,null,source,timeout,time,value,time,value,millis,time,remaining,millis,search,request,source,source,logger,trace,executing,expansion,graph,search,request,search,action,execute,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,array,list,connection,new,connections,new,array,list,connection,array,list,vertex,new,vertices,new,array,list,vertex,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,output,get,expand,total,signal,strength,last,hop,current,hop,sample,if,total,signal,output,0,add,and,score,new,vertices,last,hop,current,hop,sample,total,signal,output,new,connections,new,vertices,trim,new,additions,current,hop,new,connections,new,vertices,expand,private,void,add,and,score,new,vertices,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,array,list,connection,new,connections,array,list,vertex,new,vertices,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,vertex,from,vertex,get,vertex,last,vr,field,name,last,wave,term,get,key,as,string,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,double,decay,0,95d,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,from,vertex,get,field,bucket,get,key,as,string,equals,from,vertex,get,term,continue,double,signal,strength,bucket,get,significance,score,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,to,vertex,set,fg,math,max,to,vertex,get,fg,bucket,get,subset,df,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,double,signal,strength,bucket,get,doc,count,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,0,0,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,private,void,trim,new,additions,hop,current,hop,array,list,connection,new,connections,array,list,vertex,new,vertices,set,vertex,evictions,new,hash,set,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,new,vertices,size,vr,size,continue,vertex,priority,queue,pq,new,vertex,priority,queue,vr,size,for,vertex,vertex,new,vertices,if,vertex,get,field,equals,vr,field,name,vertex,eviction,pq,insert,with,overflow,vertex,if,eviction,null,evictions,add,eviction,if,evictions,size,0,for,connection,connection,new,connections,if,evictions,contains,connection,get,to,connections,remove,connection,get,id,remove,vertex,connection,get,to,private,double,get,expand,total,signal,strength,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,0,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,significance,score,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,doc,count,return,total,signal,output,override,public,void,on,failure,exception,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> synchronized void expand();1529600205;Step out from some existing vertex terms looking for useful_connections;synchronized void expand() {_            if (hasTimedOut()) {_                timedOut.set(true)__                listener.onResponse(buildResponse())__                return__            }_            Map<String, Set<Vertex>> lastHopFindings = hopFindings.get(currentHopNumber)__            if ((currentHopNumber >= (request.getHopNumbers() - 1)) || (lastHopFindings == null) || (lastHopFindings.size() == 0)) {_                _                _                listener.onResponse(buildResponse())__                return__            }_            Hop lastHop = request.getHop(currentHopNumber)__            currentHopNumber++__            Hop currentHop = request.getHop(currentHopNumber)__            _            final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                    request.indicesOptions())__            if (request.routing() != null) {_                searchRequest.routing(request.routing())__            }__            BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__            _            _            _            _            _            _            _            _            _            AggregationBuilder sampleAgg = null__            if (request.sampleDiversityField() != null) {_                DiversifiedAggregationBuilder diversifiedSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                        .shardSize(request.sampleSize())__                diversifiedSampleAgg.field(request.sampleDiversityField())__                diversifiedSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                sampleAgg = diversifiedSampleAgg__            }else{_                sampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__            }_            _            _            rootBool.must(currentHop.guidingQuery())__            _            _            _            _            BoolQueryBuilder sourceTermsOrClause = QueryBuilders.boolQuery()__            addUserDefinedIncludesToQuery(currentHop, sourceTermsOrClause)__            addBigOrClause(lastHopFindings, sourceTermsOrClause)___            rootBool.must(sourceTermsOrClause)__ _            _            _            _            _            for (int fieldNum = 0_ fieldNum < lastHop.getNumberVertexRequests()_ fieldNum++) {_                VertexRequest lastVr = lastHop.getVertexRequest(fieldNum)__                Set<Vertex> lastWaveVerticesForField = lastHopFindings.get(lastVr.fieldName())__                if (lastWaveVerticesForField == null) {_                    continue__                }_                String[] terms = new String[lastWaveVerticesForField.size()]__                int i = 0__                for (Vertex v : lastWaveVerticesForField) {_                    terms[i++] = v.getTerm()__                }_                TermsAggregationBuilder lastWaveTermsAgg = AggregationBuilders.terms("field" + fieldNum)_                        .includeExclude(new IncludeExclude(terms, null))_                        .shardMinDocCount(1)_                        .field(lastVr.fieldName()).minDocCount(1)_                        _                        _                        _                        .executionHint("map")_                        .size(terms.length)__                sampleAgg.subAggregation(lastWaveTermsAgg)__                for (int f = 0_ f < currentHop.getNumberVertexRequests()_ f++) {_                    VertexRequest vr = currentHop.getVertexRequest(f)__                    int size=vr.size()__                    if (vr.fieldName().equals(lastVr.fieldName())) {_                        _                        _                        size++__                    }_                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder nextWaveSigTerms = AggregationBuilders.significantTerms("field" + f)_                                .field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount()).executionHint("map").size(size)___                        _                        _                        if (size < 10) {_                            nextWaveSigTerms.shardSize(10)__                        }_                        ____                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWaveSigTerms.includeExclude(new IncludeExclude(includes, null))__                            _                            _                            _                            _                            _                            _                            __                            __                        } else if (vr.hasExcludeClauses()) {_                            nextWaveSigTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWaveSigTerms)__                    } else {_                        TermsAggregationBuilder nextWavePopularTerms = AggregationBuilders.terms("field" + f).field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount())_                                _                                _                                _                                .executionHint("map")_                                .size(size)__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWavePopularTerms.includeExclude(new IncludeExclude(includes, null))__                            _                        } else if (vr.hasExcludeClauses()) {_                            nextWavePopularTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWavePopularTerms)__                    }_                }_            }__            _            SearchSourceBuilder source = new SearchSourceBuilder().query(rootBool).aggregation(sampleAgg).size(0)__            if (request.timeout() != null) {_                source.timeout(TimeValue.timeValueMillis(timeRemainingMillis()))__            }_            searchRequest.source(source)___            _            logger.trace("executing expansion graph search request")__            client.search(searchRequest, new ActionListener<SearchResponse>() {_                @Override_                public void onResponse(SearchResponse searchResponse) {_                    _                    addShardFailures(searchResponse.getShardFailures())__                   _                    ArrayList<Connection> newConnections = new ArrayList<Connection>()__                    ArrayList<Vertex> newVertices = new ArrayList<Vertex>()__                    Sampler sample = searchResponse.getAggregations().get("sample")___                    _                    _                    _                    _                    _                    _                    double totalSignalOutput = getExpandTotalSignalStrength(lastHop, currentHop, sample)__                    _                    _                    _                    if (totalSignalOutput > 0) {_                        addAndScoreNewVertices(lastHop, currentHop, sample, totalSignalOutput, newConnections, newVertices)___                        trimNewAdditions(currentHop, newConnections, newVertices)__                    }__                    _                    expand()__                _                }___                _                _                private void addAndScoreNewVertices(Hop lastHop, Hop currentHop, Sampler sample, double totalSignalOutput,_                        ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    _                    _                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if(lastWaveTerms == null){_                            _                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            Vertex fromVertex = getVertex(lastVr.fieldName(), lastWaveTerm.getKeyAsString())__                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                _                                _                                double decay = 0.95d__                                if (request.useSignificance()) {_                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(fromVertex.getField())) &&_                                                    (bucket.getKeyAsString().equals(fromVertex.getTerm()))) {_                                                _                                                continue__                                            }_                                            double signalStrength = bucket.getSignificanceScore() / totalSignalOutput___                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                                _                                                _                                                _                                                _                                                toVertex.setFg(Math.max(toVertex.getFg(), bucket.getSubsetDf()))__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                } else {_                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            double signalStrength = bucket.getDocCount() / totalSignalOutput__                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, 0, 0)__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                }_                            }_                        }_                    }_                }___                _                _                _                _                _                _                private void trimNewAdditions(Hop currentHop, ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    Set<Vertex> evictions = new HashSet<>()__                    _                    for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                        _                        VertexRequest vr = currentHop.getVertexRequest(k)__                        if (newVertices.size() <= vr.size()) {_                            _                            continue__                        }_                        _                        VertexPriorityQueue pq = new VertexPriorityQueue(vr.size())__                        for (Vertex vertex : newVertices) {_                            if (vertex.getField().equals(vr.fieldName())) {_                                Vertex eviction = pq.insertWithOverflow(vertex)__                                if (eviction != null) {_                                    evictions.add(eviction)__                                }_                            }_                        }_                    }_                    _                    if (evictions.size() > 0) {_                        for (Connection connection : newConnections) {_                            if (evictions.contains(connection.getTo())) {_                                connections.remove(connection.getId())__                                removeVertex(connection.getTo())__                            }_                        }_                    }_                }_                _                _                _                _                _                _                __                _                private double getExpandTotalSignalStrength(Hop lastHop, Hop currentHop, Sampler sample) {_                    double totalSignalOutput = 0__                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if (lastWaveTerms == null) {_                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                if (request.useSignificance()) {_                                    _                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getSignificanceScore()__                                            }_                                        }_                                    }_                                } else {_                                    _                                    _                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getDocCount()__                                            }_                                        }_                                    }_                                }_                            }_                        }_                    }_                    return totalSignalOutput__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__            }_            })__        };step,out,from,some,existing,vertex,terms,looking,for,useful,connections;synchronized,void,expand,if,has,timed,out,timed,out,set,true,listener,on,response,build,response,return,map,string,set,vertex,last,hop,findings,hop,findings,get,current,hop,number,if,current,hop,number,request,get,hop,numbers,1,last,hop,findings,null,last,hop,findings,size,0,listener,on,response,build,response,return,hop,last,hop,request,get,hop,current,hop,number,current,hop,number,hop,current,hop,request,get,hop,current,hop,number,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,sample,agg,field,request,sample,diversity,field,diversified,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,sample,agg,diversified,sample,agg,else,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,root,bool,must,current,hop,guiding,query,bool,query,builder,source,terms,or,clause,query,builders,bool,query,add,user,defined,includes,to,query,current,hop,source,terms,or,clause,add,big,or,clause,last,hop,findings,source,terms,or,clause,root,bool,must,source,terms,or,clause,for,int,field,num,0,field,num,last,hop,get,number,vertex,requests,field,num,vertex,request,last,vr,last,hop,get,vertex,request,field,num,set,vertex,last,wave,vertices,for,field,last,hop,findings,get,last,vr,field,name,if,last,wave,vertices,for,field,null,continue,string,terms,new,string,last,wave,vertices,for,field,size,int,i,0,for,vertex,v,last,wave,vertices,for,field,terms,i,v,get,term,terms,aggregation,builder,last,wave,terms,agg,aggregation,builders,terms,field,field,num,include,exclude,new,include,exclude,terms,null,shard,min,doc,count,1,field,last,vr,field,name,min,doc,count,1,execution,hint,map,size,terms,length,sample,agg,sub,aggregation,last,wave,terms,agg,for,int,f,0,f,current,hop,get,number,vertex,requests,f,vertex,request,vr,current,hop,get,vertex,request,f,int,size,vr,size,if,vr,field,name,equals,last,vr,field,name,size,if,request,use,significance,significant,terms,aggregation,builder,next,wave,sig,terms,aggregation,builders,significant,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,size,10,next,wave,sig,terms,shard,size,10,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,sig,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,sig,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,sig,terms,else,terms,aggregation,builder,next,wave,popular,terms,aggregation,builders,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,popular,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,popular,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,popular,terms,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,sample,agg,size,0,if,request,timeout,null,source,timeout,time,value,time,value,millis,time,remaining,millis,search,request,source,source,logger,trace,executing,expansion,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,array,list,connection,new,connections,new,array,list,connection,array,list,vertex,new,vertices,new,array,list,vertex,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,output,get,expand,total,signal,strength,last,hop,current,hop,sample,if,total,signal,output,0,add,and,score,new,vertices,last,hop,current,hop,sample,total,signal,output,new,connections,new,vertices,trim,new,additions,current,hop,new,connections,new,vertices,expand,private,void,add,and,score,new,vertices,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,array,list,connection,new,connections,array,list,vertex,new,vertices,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,vertex,from,vertex,get,vertex,last,vr,field,name,last,wave,term,get,key,as,string,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,double,decay,0,95d,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,from,vertex,get,field,bucket,get,key,as,string,equals,from,vertex,get,term,continue,double,signal,strength,bucket,get,significance,score,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,to,vertex,set,fg,math,max,to,vertex,get,fg,bucket,get,subset,df,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,double,signal,strength,bucket,get,doc,count,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,0,0,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,private,void,trim,new,additions,hop,current,hop,array,list,connection,new,connections,array,list,vertex,new,vertices,set,vertex,evictions,new,hash,set,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,new,vertices,size,vr,size,continue,vertex,priority,queue,pq,new,vertex,priority,queue,vr,size,for,vertex,vertex,new,vertices,if,vertex,get,field,equals,vr,field,name,vertex,eviction,pq,insert,with,overflow,vertex,if,eviction,null,evictions,add,eviction,if,evictions,size,0,for,connection,connection,new,connections,if,evictions,contains,connection,get,to,connections,remove,connection,get,id,remove,vertex,connection,get,to,private,double,get,expand,total,signal,strength,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,0,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,significance,score,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,doc,count,return,total,signal,output,override,public,void,on,failure,exception,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> synchronized void expand();1529658035;Step out from some existing vertex terms looking for useful_connections;synchronized void expand() {_            if (hasTimedOut()) {_                timedOut.set(true)__                listener.onResponse(buildResponse())__                return__            }_            Map<String, Set<Vertex>> lastHopFindings = hopFindings.get(currentHopNumber)__            if ((currentHopNumber >= (request.getHopNumbers() - 1)) || (lastHopFindings == null) || (lastHopFindings.size() == 0)) {_                _                _                listener.onResponse(buildResponse())__                return__            }_            Hop lastHop = request.getHop(currentHopNumber)__            currentHopNumber++__            Hop currentHop = request.getHop(currentHopNumber)__            _            final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                    request.indicesOptions())__            if (request.routing() != null) {_                searchRequest.routing(request.routing())__            }__            BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__            _            _            _            _            _            _            _            _            _            AggregationBuilder sampleAgg = null__            if (request.sampleDiversityField() != null) {_                DiversifiedAggregationBuilder diversifiedSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                        .shardSize(request.sampleSize())__                diversifiedSampleAgg.field(request.sampleDiversityField())__                diversifiedSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                sampleAgg = diversifiedSampleAgg__            }else{_                sampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__            }_            _            _            rootBool.must(currentHop.guidingQuery())__            _            _            _            _            BoolQueryBuilder sourceTermsOrClause = QueryBuilders.boolQuery()__            addUserDefinedIncludesToQuery(currentHop, sourceTermsOrClause)__            addBigOrClause(lastHopFindings, sourceTermsOrClause)___            rootBool.must(sourceTermsOrClause)__ _            _            _            _            _            for (int fieldNum = 0_ fieldNum < lastHop.getNumberVertexRequests()_ fieldNum++) {_                VertexRequest lastVr = lastHop.getVertexRequest(fieldNum)__                Set<Vertex> lastWaveVerticesForField = lastHopFindings.get(lastVr.fieldName())__                if (lastWaveVerticesForField == null) {_                    continue__                }_                String[] terms = new String[lastWaveVerticesForField.size()]__                int i = 0__                for (Vertex v : lastWaveVerticesForField) {_                    terms[i++] = v.getTerm()__                }_                TermsAggregationBuilder lastWaveTermsAgg = AggregationBuilders.terms("field" + fieldNum)_                        .includeExclude(new IncludeExclude(terms, null))_                        .shardMinDocCount(1)_                        .field(lastVr.fieldName()).minDocCount(1)_                        _                        _                        _                        .executionHint("map")_                        .size(terms.length)__                sampleAgg.subAggregation(lastWaveTermsAgg)__                for (int f = 0_ f < currentHop.getNumberVertexRequests()_ f++) {_                    VertexRequest vr = currentHop.getVertexRequest(f)__                    int size=vr.size()__                    if (vr.fieldName().equals(lastVr.fieldName())) {_                        _                        _                        size++__                    }_                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder nextWaveSigTerms = AggregationBuilders.significantTerms("field" + f)_                                .field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount()).executionHint("map").size(size)___                        _                        _                        if (size < 10) {_                            nextWaveSigTerms.shardSize(10)__                        }_                        ____                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWaveSigTerms.includeExclude(new IncludeExclude(includes, null))__                            _                            _                            _                            _                            _                            _                            __                            __                        } else if (vr.hasExcludeClauses()) {_                            nextWaveSigTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWaveSigTerms)__                    } else {_                        TermsAggregationBuilder nextWavePopularTerms = AggregationBuilders.terms("field" + f).field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount())_                                _                                _                                _                                .executionHint("map")_                                .size(size)__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWavePopularTerms.includeExclude(new IncludeExclude(includes, null))__                            _                        } else if (vr.hasExcludeClauses()) {_                            nextWavePopularTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWavePopularTerms)__                    }_                }_            }__            _            SearchSourceBuilder source = new SearchSourceBuilder().query(rootBool).aggregation(sampleAgg).size(0)__            if (request.timeout() != null) {_                source.timeout(TimeValue.timeValueMillis(timeRemainingMillis()))__            }_            searchRequest.source(source)___            _            logger.trace("executing expansion graph search request")__            client.search(searchRequest, new ActionListener<SearchResponse>() {_                @Override_                public void onResponse(SearchResponse searchResponse) {_                    _                    addShardFailures(searchResponse.getShardFailures())__                   _                    ArrayList<Connection> newConnections = new ArrayList<Connection>()__                    ArrayList<Vertex> newVertices = new ArrayList<Vertex>()__                    Sampler sample = searchResponse.getAggregations().get("sample")___                    _                    _                    _                    _                    _                    _                    double totalSignalOutput = getExpandTotalSignalStrength(lastHop, currentHop, sample)__                    _                    _                    _                    if (totalSignalOutput > 0) {_                        addAndScoreNewVertices(lastHop, currentHop, sample, totalSignalOutput, newConnections, newVertices)___                        trimNewAdditions(currentHop, newConnections, newVertices)__                    }__                    _                    expand()__                _                }___                _                _                private void addAndScoreNewVertices(Hop lastHop, Hop currentHop, Sampler sample, double totalSignalOutput,_                        ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    _                    _                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if(lastWaveTerms == null){_                            _                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            Vertex fromVertex = getVertex(lastVr.fieldName(), lastWaveTerm.getKeyAsString())__                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                _                                _                                double decay = 0.95d__                                if (request.useSignificance()) {_                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(fromVertex.getField())) &&_                                                    (bucket.getKeyAsString().equals(fromVertex.getTerm()))) {_                                                _                                                continue__                                            }_                                            double signalStrength = bucket.getSignificanceScore() / totalSignalOutput___                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                                _                                                _                                                _                                                _                                                toVertex.setFg(Math.max(toVertex.getFg(), bucket.getSubsetDf()))__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                } else {_                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            double signalStrength = bucket.getDocCount() / totalSignalOutput__                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, 0, 0)__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                }_                            }_                        }_                    }_                }___                _                _                _                _                _                _                private void trimNewAdditions(Hop currentHop, ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    Set<Vertex> evictions = new HashSet<>()__                    _                    for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                        _                        VertexRequest vr = currentHop.getVertexRequest(k)__                        if (newVertices.size() <= vr.size()) {_                            _                            continue__                        }_                        _                        VertexPriorityQueue pq = new VertexPriorityQueue(vr.size())__                        for (Vertex vertex : newVertices) {_                            if (vertex.getField().equals(vr.fieldName())) {_                                Vertex eviction = pq.insertWithOverflow(vertex)__                                if (eviction != null) {_                                    evictions.add(eviction)__                                }_                            }_                        }_                    }_                    _                    if (evictions.size() > 0) {_                        for (Connection connection : newConnections) {_                            if (evictions.contains(connection.getTo())) {_                                connections.remove(connection.getId())__                                removeVertex(connection.getTo())__                            }_                        }_                    }_                }_                _                _                _                _                _                _                __                _                private double getExpandTotalSignalStrength(Hop lastHop, Hop currentHop, Sampler sample) {_                    double totalSignalOutput = 0__                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if (lastWaveTerms == null) {_                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                if (request.useSignificance()) {_                                    _                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getSignificanceScore()__                                            }_                                        }_                                    }_                                } else {_                                    _                                    _                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getDocCount()__                                            }_                                        }_                                    }_                                }_                            }_                        }_                    }_                    return totalSignalOutput__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__            }_            })__        };step,out,from,some,existing,vertex,terms,looking,for,useful,connections;synchronized,void,expand,if,has,timed,out,timed,out,set,true,listener,on,response,build,response,return,map,string,set,vertex,last,hop,findings,hop,findings,get,current,hop,number,if,current,hop,number,request,get,hop,numbers,1,last,hop,findings,null,last,hop,findings,size,0,listener,on,response,build,response,return,hop,last,hop,request,get,hop,current,hop,number,current,hop,number,hop,current,hop,request,get,hop,current,hop,number,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,sample,agg,field,request,sample,diversity,field,diversified,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,sample,agg,diversified,sample,agg,else,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,root,bool,must,current,hop,guiding,query,bool,query,builder,source,terms,or,clause,query,builders,bool,query,add,user,defined,includes,to,query,current,hop,source,terms,or,clause,add,big,or,clause,last,hop,findings,source,terms,or,clause,root,bool,must,source,terms,or,clause,for,int,field,num,0,field,num,last,hop,get,number,vertex,requests,field,num,vertex,request,last,vr,last,hop,get,vertex,request,field,num,set,vertex,last,wave,vertices,for,field,last,hop,findings,get,last,vr,field,name,if,last,wave,vertices,for,field,null,continue,string,terms,new,string,last,wave,vertices,for,field,size,int,i,0,for,vertex,v,last,wave,vertices,for,field,terms,i,v,get,term,terms,aggregation,builder,last,wave,terms,agg,aggregation,builders,terms,field,field,num,include,exclude,new,include,exclude,terms,null,shard,min,doc,count,1,field,last,vr,field,name,min,doc,count,1,execution,hint,map,size,terms,length,sample,agg,sub,aggregation,last,wave,terms,agg,for,int,f,0,f,current,hop,get,number,vertex,requests,f,vertex,request,vr,current,hop,get,vertex,request,f,int,size,vr,size,if,vr,field,name,equals,last,vr,field,name,size,if,request,use,significance,significant,terms,aggregation,builder,next,wave,sig,terms,aggregation,builders,significant,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,size,10,next,wave,sig,terms,shard,size,10,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,sig,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,sig,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,sig,terms,else,terms,aggregation,builder,next,wave,popular,terms,aggregation,builders,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,popular,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,popular,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,popular,terms,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,sample,agg,size,0,if,request,timeout,null,source,timeout,time,value,time,value,millis,time,remaining,millis,search,request,source,source,logger,trace,executing,expansion,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,array,list,connection,new,connections,new,array,list,connection,array,list,vertex,new,vertices,new,array,list,vertex,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,output,get,expand,total,signal,strength,last,hop,current,hop,sample,if,total,signal,output,0,add,and,score,new,vertices,last,hop,current,hop,sample,total,signal,output,new,connections,new,vertices,trim,new,additions,current,hop,new,connections,new,vertices,expand,private,void,add,and,score,new,vertices,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,array,list,connection,new,connections,array,list,vertex,new,vertices,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,vertex,from,vertex,get,vertex,last,vr,field,name,last,wave,term,get,key,as,string,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,double,decay,0,95d,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,from,vertex,get,field,bucket,get,key,as,string,equals,from,vertex,get,term,continue,double,signal,strength,bucket,get,significance,score,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,to,vertex,set,fg,math,max,to,vertex,get,fg,bucket,get,subset,df,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,double,signal,strength,bucket,get,doc,count,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,0,0,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,private,void,trim,new,additions,hop,current,hop,array,list,connection,new,connections,array,list,vertex,new,vertices,set,vertex,evictions,new,hash,set,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,new,vertices,size,vr,size,continue,vertex,priority,queue,pq,new,vertex,priority,queue,vr,size,for,vertex,vertex,new,vertices,if,vertex,get,field,equals,vr,field,name,vertex,eviction,pq,insert,with,overflow,vertex,if,eviction,null,evictions,add,eviction,if,evictions,size,0,for,connection,connection,new,connections,if,evictions,contains,connection,get,to,connections,remove,connection,get,id,remove,vertex,connection,get,to,private,double,get,expand,total,signal,strength,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,0,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,significance,score,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,doc,count,return,total,signal,output,override,public,void,on,failure,exception,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> synchronized void expand();1529916082;Step out from some existing vertex terms looking for useful_connections;synchronized void expand() {_            if (hasTimedOut()) {_                timedOut.set(true)__                listener.onResponse(buildResponse())__                return__            }_            Map<String, Set<Vertex>> lastHopFindings = hopFindings.get(currentHopNumber)__            if ((currentHopNumber >= (request.getHopNumbers() - 1)) || (lastHopFindings == null) || (lastHopFindings.size() == 0)) {_                _                _                listener.onResponse(buildResponse())__                return__            }_            Hop lastHop = request.getHop(currentHopNumber)__            currentHopNumber++__            Hop currentHop = request.getHop(currentHopNumber)__            _            final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                    request.indicesOptions())__            if (request.routing() != null) {_                searchRequest.routing(request.routing())__            }__            BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__            _            _            _            _            _            _            _            _            _            AggregationBuilder sampleAgg = null__            if (request.sampleDiversityField() != null) {_                DiversifiedAggregationBuilder diversifiedSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                        .shardSize(request.sampleSize())__                diversifiedSampleAgg.field(request.sampleDiversityField())__                diversifiedSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                sampleAgg = diversifiedSampleAgg__            }else{_                sampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__            }_            _            _            rootBool.must(currentHop.guidingQuery())__            _            _            _            _            BoolQueryBuilder sourceTermsOrClause = QueryBuilders.boolQuery()__            addUserDefinedIncludesToQuery(currentHop, sourceTermsOrClause)__            addBigOrClause(lastHopFindings, sourceTermsOrClause)___            rootBool.must(sourceTermsOrClause)__ _            _            _            _            _            for (int fieldNum = 0_ fieldNum < lastHop.getNumberVertexRequests()_ fieldNum++) {_                VertexRequest lastVr = lastHop.getVertexRequest(fieldNum)__                Set<Vertex> lastWaveVerticesForField = lastHopFindings.get(lastVr.fieldName())__                if (lastWaveVerticesForField == null) {_                    continue__                }_                String[] terms = new String[lastWaveVerticesForField.size()]__                int i = 0__                for (Vertex v : lastWaveVerticesForField) {_                    terms[i++] = v.getTerm()__                }_                TermsAggregationBuilder lastWaveTermsAgg = AggregationBuilders.terms("field" + fieldNum)_                        .includeExclude(new IncludeExclude(terms, null))_                        .shardMinDocCount(1)_                        .field(lastVr.fieldName()).minDocCount(1)_                        _                        _                        _                        .executionHint("map")_                        .size(terms.length)__                sampleAgg.subAggregation(lastWaveTermsAgg)__                for (int f = 0_ f < currentHop.getNumberVertexRequests()_ f++) {_                    VertexRequest vr = currentHop.getVertexRequest(f)__                    int size=vr.size()__                    if (vr.fieldName().equals(lastVr.fieldName())) {_                        _                        _                        size++__                    }_                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder nextWaveSigTerms = AggregationBuilders.significantTerms("field" + f)_                                .field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount()).executionHint("map").size(size)___                        _                        _                        if (size < 10) {_                            nextWaveSigTerms.shardSize(10)__                        }_                        ____                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWaveSigTerms.includeExclude(new IncludeExclude(includes, null))__                            _                            _                            _                            _                            _                            _                            __                            __                        } else if (vr.hasExcludeClauses()) {_                            nextWaveSigTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWaveSigTerms)__                    } else {_                        TermsAggregationBuilder nextWavePopularTerms = AggregationBuilders.terms("field" + f).field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount())_                                _                                _                                _                                .executionHint("map")_                                .size(size)__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWavePopularTerms.includeExclude(new IncludeExclude(includes, null))__                            _                        } else if (vr.hasExcludeClauses()) {_                            nextWavePopularTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWavePopularTerms)__                    }_                }_            }__            _            SearchSourceBuilder source = new SearchSourceBuilder().query(rootBool).aggregation(sampleAgg).size(0)__            if (request.timeout() != null) {_                source.timeout(TimeValue.timeValueMillis(timeRemainingMillis()))__            }_            searchRequest.source(source)___            _            logger.trace("executing expansion graph search request")__            client.search(searchRequest, new ActionListener<SearchResponse>() {_                @Override_                public void onResponse(SearchResponse searchResponse) {_                    _                    addShardFailures(searchResponse.getShardFailures())__                   _                    ArrayList<Connection> newConnections = new ArrayList<Connection>()__                    ArrayList<Vertex> newVertices = new ArrayList<Vertex>()__                    Sampler sample = searchResponse.getAggregations().get("sample")___                    _                    _                    _                    _                    _                    _                    double totalSignalOutput = getExpandTotalSignalStrength(lastHop, currentHop, sample)__                    _                    _                    _                    if (totalSignalOutput > 0) {_                        addAndScoreNewVertices(lastHop, currentHop, sample, totalSignalOutput, newConnections, newVertices)___                        trimNewAdditions(currentHop, newConnections, newVertices)__                    }__                    _                    expand()__                _                }___                _                _                private void addAndScoreNewVertices(Hop lastHop, Hop currentHop, Sampler sample, double totalSignalOutput,_                        ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    _                    _                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if(lastWaveTerms == null){_                            _                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            Vertex fromVertex = getVertex(lastVr.fieldName(), lastWaveTerm.getKeyAsString())__                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                _                                _                                double decay = 0.95d__                                if (request.useSignificance()) {_                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(fromVertex.getField())) &&_                                                    (bucket.getKeyAsString().equals(fromVertex.getTerm()))) {_                                                _                                                continue__                                            }_                                            double signalStrength = bucket.getSignificanceScore() / totalSignalOutput___                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                                _                                                _                                                _                                                _                                                toVertex.setFg(Math.max(toVertex.getFg(), bucket.getSubsetDf()))__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                } else {_                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            double signalStrength = bucket.getDocCount() / totalSignalOutput__                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, 0, 0)__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                }_                            }_                        }_                    }_                }___                _                _                _                _                _                _                private void trimNewAdditions(Hop currentHop, ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    Set<Vertex> evictions = new HashSet<>()__                    _                    for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                        _                        VertexRequest vr = currentHop.getVertexRequest(k)__                        if (newVertices.size() <= vr.size()) {_                            _                            continue__                        }_                        _                        VertexPriorityQueue pq = new VertexPriorityQueue(vr.size())__                        for (Vertex vertex : newVertices) {_                            if (vertex.getField().equals(vr.fieldName())) {_                                Vertex eviction = pq.insertWithOverflow(vertex)__                                if (eviction != null) {_                                    evictions.add(eviction)__                                }_                            }_                        }_                    }_                    _                    if (evictions.size() > 0) {_                        for (Connection connection : newConnections) {_                            if (evictions.contains(connection.getTo())) {_                                connections.remove(connection.getId())__                                removeVertex(connection.getTo())__                            }_                        }_                    }_                }_                _                _                _                _                _                _                __                _                private double getExpandTotalSignalStrength(Hop lastHop, Hop currentHop, Sampler sample) {_                    double totalSignalOutput = 0__                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if (lastWaveTerms == null) {_                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                if (request.useSignificance()) {_                                    _                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getSignificanceScore()__                                            }_                                        }_                                    }_                                } else {_                                    _                                    _                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getDocCount()__                                            }_                                        }_                                    }_                                }_                            }_                        }_                    }_                    return totalSignalOutput__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__            }_            })__        };step,out,from,some,existing,vertex,terms,looking,for,useful,connections;synchronized,void,expand,if,has,timed,out,timed,out,set,true,listener,on,response,build,response,return,map,string,set,vertex,last,hop,findings,hop,findings,get,current,hop,number,if,current,hop,number,request,get,hop,numbers,1,last,hop,findings,null,last,hop,findings,size,0,listener,on,response,build,response,return,hop,last,hop,request,get,hop,current,hop,number,current,hop,number,hop,current,hop,request,get,hop,current,hop,number,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,sample,agg,field,request,sample,diversity,field,diversified,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,sample,agg,diversified,sample,agg,else,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,root,bool,must,current,hop,guiding,query,bool,query,builder,source,terms,or,clause,query,builders,bool,query,add,user,defined,includes,to,query,current,hop,source,terms,or,clause,add,big,or,clause,last,hop,findings,source,terms,or,clause,root,bool,must,source,terms,or,clause,for,int,field,num,0,field,num,last,hop,get,number,vertex,requests,field,num,vertex,request,last,vr,last,hop,get,vertex,request,field,num,set,vertex,last,wave,vertices,for,field,last,hop,findings,get,last,vr,field,name,if,last,wave,vertices,for,field,null,continue,string,terms,new,string,last,wave,vertices,for,field,size,int,i,0,for,vertex,v,last,wave,vertices,for,field,terms,i,v,get,term,terms,aggregation,builder,last,wave,terms,agg,aggregation,builders,terms,field,field,num,include,exclude,new,include,exclude,terms,null,shard,min,doc,count,1,field,last,vr,field,name,min,doc,count,1,execution,hint,map,size,terms,length,sample,agg,sub,aggregation,last,wave,terms,agg,for,int,f,0,f,current,hop,get,number,vertex,requests,f,vertex,request,vr,current,hop,get,vertex,request,f,int,size,vr,size,if,vr,field,name,equals,last,vr,field,name,size,if,request,use,significance,significant,terms,aggregation,builder,next,wave,sig,terms,aggregation,builders,significant,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,size,10,next,wave,sig,terms,shard,size,10,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,sig,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,sig,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,sig,terms,else,terms,aggregation,builder,next,wave,popular,terms,aggregation,builders,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,popular,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,popular,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,popular,terms,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,sample,agg,size,0,if,request,timeout,null,source,timeout,time,value,time,value,millis,time,remaining,millis,search,request,source,source,logger,trace,executing,expansion,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,array,list,connection,new,connections,new,array,list,connection,array,list,vertex,new,vertices,new,array,list,vertex,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,output,get,expand,total,signal,strength,last,hop,current,hop,sample,if,total,signal,output,0,add,and,score,new,vertices,last,hop,current,hop,sample,total,signal,output,new,connections,new,vertices,trim,new,additions,current,hop,new,connections,new,vertices,expand,private,void,add,and,score,new,vertices,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,array,list,connection,new,connections,array,list,vertex,new,vertices,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,vertex,from,vertex,get,vertex,last,vr,field,name,last,wave,term,get,key,as,string,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,double,decay,0,95d,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,from,vertex,get,field,bucket,get,key,as,string,equals,from,vertex,get,term,continue,double,signal,strength,bucket,get,significance,score,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,to,vertex,set,fg,math,max,to,vertex,get,fg,bucket,get,subset,df,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,double,signal,strength,bucket,get,doc,count,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,0,0,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,private,void,trim,new,additions,hop,current,hop,array,list,connection,new,connections,array,list,vertex,new,vertices,set,vertex,evictions,new,hash,set,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,new,vertices,size,vr,size,continue,vertex,priority,queue,pq,new,vertex,priority,queue,vr,size,for,vertex,vertex,new,vertices,if,vertex,get,field,equals,vr,field,name,vertex,eviction,pq,insert,with,overflow,vertex,if,eviction,null,evictions,add,eviction,if,evictions,size,0,for,connection,connection,new,connections,if,evictions,contains,connection,get,to,connections,remove,connection,get,id,remove,vertex,connection,get,to,private,double,get,expand,total,signal,strength,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,0,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,significance,score,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,doc,count,return,total,signal,output,override,public,void,on,failure,exception,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> synchronized void expand();1535046779;Step out from some existing vertex terms looking for useful_connections;synchronized void expand() {_            if (hasTimedOut()) {_                timedOut.set(true)__                listener.onResponse(buildResponse())__                return__            }_            Map<String, Set<Vertex>> lastHopFindings = hopFindings.get(currentHopNumber)__            if ((currentHopNumber >= (request.getHopNumbers() - 1)) || (lastHopFindings == null) || (lastHopFindings.size() == 0)) {_                _                _                listener.onResponse(buildResponse())__                return__            }_            Hop lastHop = request.getHop(currentHopNumber)__            currentHopNumber++__            Hop currentHop = request.getHop(currentHopNumber)__            _            final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                    request.indicesOptions())__            if (request.routing() != null) {_                searchRequest.routing(request.routing())__            }__            BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__            _            _            _            _            _            _            _            _            _            AggregationBuilder sampleAgg = null__            if (request.sampleDiversityField() != null) {_                DiversifiedAggregationBuilder diversifiedSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                        .shardSize(request.sampleSize())__                diversifiedSampleAgg.field(request.sampleDiversityField())__                diversifiedSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                sampleAgg = diversifiedSampleAgg__            }else{_                sampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__            }_            _            _            rootBool.must(currentHop.guidingQuery())__            _            _            _            _            BoolQueryBuilder sourceTermsOrClause = QueryBuilders.boolQuery()__            addUserDefinedIncludesToQuery(currentHop, sourceTermsOrClause)__            addBigOrClause(lastHopFindings, sourceTermsOrClause)___            rootBool.must(sourceTermsOrClause)__ _            _            _            _            _            for (int fieldNum = 0_ fieldNum < lastHop.getNumberVertexRequests()_ fieldNum++) {_                VertexRequest lastVr = lastHop.getVertexRequest(fieldNum)__                Set<Vertex> lastWaveVerticesForField = lastHopFindings.get(lastVr.fieldName())__                if (lastWaveVerticesForField == null) {_                    continue__                }_                String[] terms = new String[lastWaveVerticesForField.size()]__                int i = 0__                for (Vertex v : lastWaveVerticesForField) {_                    terms[i++] = v.getTerm()__                }_                TermsAggregationBuilder lastWaveTermsAgg = AggregationBuilders.terms("field" + fieldNum)_                        .includeExclude(new IncludeExclude(terms, null))_                        .shardMinDocCount(1)_                        .field(lastVr.fieldName()).minDocCount(1)_                        _                        _                        _                        .executionHint("map")_                        .size(terms.length)__                sampleAgg.subAggregation(lastWaveTermsAgg)__                for (int f = 0_ f < currentHop.getNumberVertexRequests()_ f++) {_                    VertexRequest vr = currentHop.getVertexRequest(f)__                    int size=vr.size()__                    if (vr.fieldName().equals(lastVr.fieldName())) {_                        _                        _                        size++__                    }_                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder nextWaveSigTerms = AggregationBuilders.significantTerms("field" + f)_                                .field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount()).executionHint("map").size(size)___                        _                        _                        if (size < 10) {_                            nextWaveSigTerms.shardSize(10)__                        }_                        ____                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWaveSigTerms.includeExclude(new IncludeExclude(includes, null))__                            _                            _                            _                            _                            _                            _                            __                            __                        } else if (vr.hasExcludeClauses()) {_                            nextWaveSigTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWaveSigTerms)__                    } else {_                        TermsAggregationBuilder nextWavePopularTerms = AggregationBuilders.terms("field" + f).field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount())_                                _                                _                                _                                .executionHint("map")_                                .size(size)__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWavePopularTerms.includeExclude(new IncludeExclude(includes, null))__                            _                        } else if (vr.hasExcludeClauses()) {_                            nextWavePopularTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWavePopularTerms)__                    }_                }_            }__            _            SearchSourceBuilder source = new SearchSourceBuilder().query(rootBool).aggregation(sampleAgg).size(0)__            if (request.timeout() != null) {_                source.timeout(TimeValue.timeValueMillis(timeRemainingMillis()))__            }_            searchRequest.source(source)___            _            logger.trace("executing expansion graph search request")__            client.search(searchRequest, new ActionListener<SearchResponse>() {_                @Override_                public void onResponse(SearchResponse searchResponse) {_                    _                    addShardFailures(searchResponse.getShardFailures())__                   _                    ArrayList<Connection> newConnections = new ArrayList<Connection>()__                    ArrayList<Vertex> newVertices = new ArrayList<Vertex>()__                    Sampler sample = searchResponse.getAggregations().get("sample")___                    _                    _                    _                    _                    _                    _                    double totalSignalOutput = getExpandTotalSignalStrength(lastHop, currentHop, sample)__                    _                    _                    _                    if (totalSignalOutput > 0) {_                        addAndScoreNewVertices(lastHop, currentHop, sample, totalSignalOutput, newConnections, newVertices)___                        trimNewAdditions(currentHop, newConnections, newVertices)__                    }__                    _                    expand()__                _                }___                _                _                private void addAndScoreNewVertices(Hop lastHop, Hop currentHop, Sampler sample, double totalSignalOutput,_                        ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    _                    _                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if(lastWaveTerms == null){_                            _                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            Vertex fromVertex = getVertex(lastVr.fieldName(), lastWaveTerm.getKeyAsString())__                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                _                                _                                double decay = 0.95d__                                if (request.useSignificance()) {_                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(fromVertex.getField())) &&_                                                    (bucket.getKeyAsString().equals(fromVertex.getTerm()))) {_                                                _                                                continue__                                            }_                                            double signalStrength = bucket.getSignificanceScore() / totalSignalOutput___                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                                _                                                _                                                _                                                _                                                toVertex.setFg(Math.max(toVertex.getFg(), bucket.getSubsetDf()))__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                } else {_                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            double signalStrength = bucket.getDocCount() / totalSignalOutput__                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, 0, 0)__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                }_                            }_                        }_                    }_                }___                _                _                _                _                _                _                private void trimNewAdditions(Hop currentHop, ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    Set<Vertex> evictions = new HashSet<>()__                    _                    for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                        _                        VertexRequest vr = currentHop.getVertexRequest(k)__                        if (newVertices.size() <= vr.size()) {_                            _                            continue__                        }_                        _                        VertexPriorityQueue pq = new VertexPriorityQueue(vr.size())__                        for (Vertex vertex : newVertices) {_                            if (vertex.getField().equals(vr.fieldName())) {_                                Vertex eviction = pq.insertWithOverflow(vertex)__                                if (eviction != null) {_                                    evictions.add(eviction)__                                }_                            }_                        }_                    }_                    _                    if (evictions.size() > 0) {_                        for (Connection connection : newConnections) {_                            if (evictions.contains(connection.getTo())) {_                                connections.remove(connection.getId())__                                removeVertex(connection.getTo())__                            }_                        }_                    }_                }_                _                _                _                _                _                _                __                _                private double getExpandTotalSignalStrength(Hop lastHop, Hop currentHop, Sampler sample) {_                    double totalSignalOutput = 0__                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if (lastWaveTerms == null) {_                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                if (request.useSignificance()) {_                                    _                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getSignificanceScore()__                                            }_                                        }_                                    }_                                } else {_                                    _                                    _                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getDocCount()__                                            }_                                        }_                                    }_                                }_                            }_                        }_                    }_                    return totalSignalOutput__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__            }_            })__        };step,out,from,some,existing,vertex,terms,looking,for,useful,connections;synchronized,void,expand,if,has,timed,out,timed,out,set,true,listener,on,response,build,response,return,map,string,set,vertex,last,hop,findings,hop,findings,get,current,hop,number,if,current,hop,number,request,get,hop,numbers,1,last,hop,findings,null,last,hop,findings,size,0,listener,on,response,build,response,return,hop,last,hop,request,get,hop,current,hop,number,current,hop,number,hop,current,hop,request,get,hop,current,hop,number,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,sample,agg,field,request,sample,diversity,field,diversified,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,sample,agg,diversified,sample,agg,else,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,root,bool,must,current,hop,guiding,query,bool,query,builder,source,terms,or,clause,query,builders,bool,query,add,user,defined,includes,to,query,current,hop,source,terms,or,clause,add,big,or,clause,last,hop,findings,source,terms,or,clause,root,bool,must,source,terms,or,clause,for,int,field,num,0,field,num,last,hop,get,number,vertex,requests,field,num,vertex,request,last,vr,last,hop,get,vertex,request,field,num,set,vertex,last,wave,vertices,for,field,last,hop,findings,get,last,vr,field,name,if,last,wave,vertices,for,field,null,continue,string,terms,new,string,last,wave,vertices,for,field,size,int,i,0,for,vertex,v,last,wave,vertices,for,field,terms,i,v,get,term,terms,aggregation,builder,last,wave,terms,agg,aggregation,builders,terms,field,field,num,include,exclude,new,include,exclude,terms,null,shard,min,doc,count,1,field,last,vr,field,name,min,doc,count,1,execution,hint,map,size,terms,length,sample,agg,sub,aggregation,last,wave,terms,agg,for,int,f,0,f,current,hop,get,number,vertex,requests,f,vertex,request,vr,current,hop,get,vertex,request,f,int,size,vr,size,if,vr,field,name,equals,last,vr,field,name,size,if,request,use,significance,significant,terms,aggregation,builder,next,wave,sig,terms,aggregation,builders,significant,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,size,10,next,wave,sig,terms,shard,size,10,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,sig,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,sig,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,sig,terms,else,terms,aggregation,builder,next,wave,popular,terms,aggregation,builders,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,popular,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,popular,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,popular,terms,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,sample,agg,size,0,if,request,timeout,null,source,timeout,time,value,time,value,millis,time,remaining,millis,search,request,source,source,logger,trace,executing,expansion,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,array,list,connection,new,connections,new,array,list,connection,array,list,vertex,new,vertices,new,array,list,vertex,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,output,get,expand,total,signal,strength,last,hop,current,hop,sample,if,total,signal,output,0,add,and,score,new,vertices,last,hop,current,hop,sample,total,signal,output,new,connections,new,vertices,trim,new,additions,current,hop,new,connections,new,vertices,expand,private,void,add,and,score,new,vertices,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,array,list,connection,new,connections,array,list,vertex,new,vertices,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,vertex,from,vertex,get,vertex,last,vr,field,name,last,wave,term,get,key,as,string,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,double,decay,0,95d,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,from,vertex,get,field,bucket,get,key,as,string,equals,from,vertex,get,term,continue,double,signal,strength,bucket,get,significance,score,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,to,vertex,set,fg,math,max,to,vertex,get,fg,bucket,get,subset,df,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,double,signal,strength,bucket,get,doc,count,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,0,0,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,private,void,trim,new,additions,hop,current,hop,array,list,connection,new,connections,array,list,vertex,new,vertices,set,vertex,evictions,new,hash,set,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,new,vertices,size,vr,size,continue,vertex,priority,queue,pq,new,vertex,priority,queue,vr,size,for,vertex,vertex,new,vertices,if,vertex,get,field,equals,vr,field,name,vertex,eviction,pq,insert,with,overflow,vertex,if,eviction,null,evictions,add,eviction,if,evictions,size,0,for,connection,connection,new,connections,if,evictions,contains,connection,get,to,connections,remove,connection,get,id,remove,vertex,connection,get,to,private,double,get,expand,total,signal,strength,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,0,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,significance,score,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,doc,count,return,total,signal,output,override,public,void,on,failure,exception,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> synchronized void expand();1539615817;Step out from some existing vertex terms looking for useful_connections;synchronized void expand() {_            if (hasTimedOut()) {_                timedOut.set(true)__                listener.onResponse(buildResponse())__                return__            }_            Map<String, Set<Vertex>> lastHopFindings = hopFindings.get(currentHopNumber)__            if ((currentHopNumber >= (request.getHopNumbers() - 1)) || (lastHopFindings == null) || (lastHopFindings.size() == 0)) {_                _                _                listener.onResponse(buildResponse())__                return__            }_            Hop lastHop = request.getHop(currentHopNumber)__            currentHopNumber++__            Hop currentHop = request.getHop(currentHopNumber)__            _            final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                    request.indicesOptions())__            if (request.routing() != null) {_                searchRequest.routing(request.routing())__            }__            BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__            _            _            _            _            _            _            _            _            _            AggregationBuilder sampleAgg = null__            if (request.sampleDiversityField() != null) {_                DiversifiedAggregationBuilder diversifiedSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                        .shardSize(request.sampleSize())__                diversifiedSampleAgg.field(request.sampleDiversityField())__                diversifiedSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                sampleAgg = diversifiedSampleAgg__            }else{_                sampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__            }_            _            _            rootBool.must(currentHop.guidingQuery())__            _            _            _            _            BoolQueryBuilder sourceTermsOrClause = QueryBuilders.boolQuery()__            addUserDefinedIncludesToQuery(currentHop, sourceTermsOrClause)__            addBigOrClause(lastHopFindings, sourceTermsOrClause)___            rootBool.must(sourceTermsOrClause)__ _            _            _            _            _            for (int fieldNum = 0_ fieldNum < lastHop.getNumberVertexRequests()_ fieldNum++) {_                VertexRequest lastVr = lastHop.getVertexRequest(fieldNum)__                Set<Vertex> lastWaveVerticesForField = lastHopFindings.get(lastVr.fieldName())__                if (lastWaveVerticesForField == null) {_                    continue__                }_                String[] terms = new String[lastWaveVerticesForField.size()]__                int i = 0__                for (Vertex v : lastWaveVerticesForField) {_                    terms[i++] = v.getTerm()__                }_                TermsAggregationBuilder lastWaveTermsAgg = AggregationBuilders.terms("field" + fieldNum)_                        .includeExclude(new IncludeExclude(terms, null))_                        .shardMinDocCount(1)_                        .field(lastVr.fieldName()).minDocCount(1)_                        _                        _                        _                        .executionHint("map")_                        .size(terms.length)__                sampleAgg.subAggregation(lastWaveTermsAgg)__                for (int f = 0_ f < currentHop.getNumberVertexRequests()_ f++) {_                    VertexRequest vr = currentHop.getVertexRequest(f)__                    int size=vr.size()__                    if (vr.fieldName().equals(lastVr.fieldName())) {_                        _                        _                        size++__                    }_                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder nextWaveSigTerms = AggregationBuilders.significantTerms("field" + f)_                                .field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount()).executionHint("map").size(size)___                        _                        _                        if (size < 10) {_                            nextWaveSigTerms.shardSize(10)__                        }_                        ____                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWaveSigTerms.includeExclude(new IncludeExclude(includes, null))__                            _                            _                            _                            _                            _                            _                            __                            __                        } else if (vr.hasExcludeClauses()) {_                            nextWaveSigTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWaveSigTerms)__                    } else {_                        TermsAggregationBuilder nextWavePopularTerms = AggregationBuilders.terms("field" + f).field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount())_                                _                                _                                _                                .executionHint("map")_                                .size(size)__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWavePopularTerms.includeExclude(new IncludeExclude(includes, null))__                            _                        } else if (vr.hasExcludeClauses()) {_                            nextWavePopularTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWavePopularTerms)__                    }_                }_            }__            _            SearchSourceBuilder source = new SearchSourceBuilder().query(rootBool).aggregation(sampleAgg).size(0)__            if (request.timeout() != null) {_                source.timeout(TimeValue.timeValueMillis(timeRemainingMillis()))__            }_            searchRequest.source(source)___            _            logger.trace("executing expansion graph search request")__            client.search(searchRequest, new ActionListener<SearchResponse>() {_                @Override_                public void onResponse(SearchResponse searchResponse) {_                    _                    addShardFailures(searchResponse.getShardFailures())__                   _                    ArrayList<Connection> newConnections = new ArrayList<Connection>()__                    ArrayList<Vertex> newVertices = new ArrayList<Vertex>()__                    Sampler sample = searchResponse.getAggregations().get("sample")___                    _                    _                    _                    _                    _                    _                    double totalSignalOutput = getExpandTotalSignalStrength(lastHop, currentHop, sample)__                    _                    _                    _                    if (totalSignalOutput > 0) {_                        addAndScoreNewVertices(lastHop, currentHop, sample, totalSignalOutput, newConnections, newVertices)___                        trimNewAdditions(currentHop, newConnections, newVertices)__                    }__                    _                    expand()__                _                }___                _                _                private void addAndScoreNewVertices(Hop lastHop, Hop currentHop, Sampler sample, double totalSignalOutput,_                        ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    _                    _                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if(lastWaveTerms == null){_                            _                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            Vertex fromVertex = getVertex(lastVr.fieldName(), lastWaveTerm.getKeyAsString())__                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                _                                _                                double decay = 0.95d__                                if (request.useSignificance()) {_                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(fromVertex.getField())) &&_                                                    (bucket.getKeyAsString().equals(fromVertex.getTerm()))) {_                                                _                                                continue__                                            }_                                            double signalStrength = bucket.getSignificanceScore() / totalSignalOutput___                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                                _                                                _                                                _                                                _                                                toVertex.setFg(Math.max(toVertex.getFg(), bucket.getSubsetDf()))__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                } else {_                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            double signalStrength = bucket.getDocCount() / totalSignalOutput__                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, 0, 0)__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                }_                            }_                        }_                    }_                }___                _                _                _                _                _                _                private void trimNewAdditions(Hop currentHop, ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    Set<Vertex> evictions = new HashSet<>()__                    _                    for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                        _                        VertexRequest vr = currentHop.getVertexRequest(k)__                        if (newVertices.size() <= vr.size()) {_                            _                            continue__                        }_                        _                        VertexPriorityQueue pq = new VertexPriorityQueue(vr.size())__                        for (Vertex vertex : newVertices) {_                            if (vertex.getField().equals(vr.fieldName())) {_                                Vertex eviction = pq.insertWithOverflow(vertex)__                                if (eviction != null) {_                                    evictions.add(eviction)__                                }_                            }_                        }_                    }_                    _                    if (evictions.size() > 0) {_                        for (Connection connection : newConnections) {_                            if (evictions.contains(connection.getTo())) {_                                connections.remove(connection.getId())__                                removeVertex(connection.getTo())__                            }_                        }_                    }_                }_                _                _                _                _                _                _                __                _                private double getExpandTotalSignalStrength(Hop lastHop, Hop currentHop, Sampler sample) {_                    double totalSignalOutput = 0__                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if (lastWaveTerms == null) {_                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                if (request.useSignificance()) {_                                    _                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getSignificanceScore()__                                            }_                                        }_                                    }_                                } else {_                                    _                                    _                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getDocCount()__                                            }_                                        }_                                    }_                                }_                            }_                        }_                    }_                    return totalSignalOutput__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__            }_            })__        };step,out,from,some,existing,vertex,terms,looking,for,useful,connections;synchronized,void,expand,if,has,timed,out,timed,out,set,true,listener,on,response,build,response,return,map,string,set,vertex,last,hop,findings,hop,findings,get,current,hop,number,if,current,hop,number,request,get,hop,numbers,1,last,hop,findings,null,last,hop,findings,size,0,listener,on,response,build,response,return,hop,last,hop,request,get,hop,current,hop,number,current,hop,number,hop,current,hop,request,get,hop,current,hop,number,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,sample,agg,field,request,sample,diversity,field,diversified,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,sample,agg,diversified,sample,agg,else,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,root,bool,must,current,hop,guiding,query,bool,query,builder,source,terms,or,clause,query,builders,bool,query,add,user,defined,includes,to,query,current,hop,source,terms,or,clause,add,big,or,clause,last,hop,findings,source,terms,or,clause,root,bool,must,source,terms,or,clause,for,int,field,num,0,field,num,last,hop,get,number,vertex,requests,field,num,vertex,request,last,vr,last,hop,get,vertex,request,field,num,set,vertex,last,wave,vertices,for,field,last,hop,findings,get,last,vr,field,name,if,last,wave,vertices,for,field,null,continue,string,terms,new,string,last,wave,vertices,for,field,size,int,i,0,for,vertex,v,last,wave,vertices,for,field,terms,i,v,get,term,terms,aggregation,builder,last,wave,terms,agg,aggregation,builders,terms,field,field,num,include,exclude,new,include,exclude,terms,null,shard,min,doc,count,1,field,last,vr,field,name,min,doc,count,1,execution,hint,map,size,terms,length,sample,agg,sub,aggregation,last,wave,terms,agg,for,int,f,0,f,current,hop,get,number,vertex,requests,f,vertex,request,vr,current,hop,get,vertex,request,f,int,size,vr,size,if,vr,field,name,equals,last,vr,field,name,size,if,request,use,significance,significant,terms,aggregation,builder,next,wave,sig,terms,aggregation,builders,significant,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,size,10,next,wave,sig,terms,shard,size,10,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,sig,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,sig,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,sig,terms,else,terms,aggregation,builder,next,wave,popular,terms,aggregation,builders,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,popular,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,popular,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,popular,terms,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,sample,agg,size,0,if,request,timeout,null,source,timeout,time,value,time,value,millis,time,remaining,millis,search,request,source,source,logger,trace,executing,expansion,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,array,list,connection,new,connections,new,array,list,connection,array,list,vertex,new,vertices,new,array,list,vertex,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,output,get,expand,total,signal,strength,last,hop,current,hop,sample,if,total,signal,output,0,add,and,score,new,vertices,last,hop,current,hop,sample,total,signal,output,new,connections,new,vertices,trim,new,additions,current,hop,new,connections,new,vertices,expand,private,void,add,and,score,new,vertices,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,array,list,connection,new,connections,array,list,vertex,new,vertices,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,vertex,from,vertex,get,vertex,last,vr,field,name,last,wave,term,get,key,as,string,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,double,decay,0,95d,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,from,vertex,get,field,bucket,get,key,as,string,equals,from,vertex,get,term,continue,double,signal,strength,bucket,get,significance,score,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,to,vertex,set,fg,math,max,to,vertex,get,fg,bucket,get,subset,df,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,double,signal,strength,bucket,get,doc,count,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,0,0,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,private,void,trim,new,additions,hop,current,hop,array,list,connection,new,connections,array,list,vertex,new,vertices,set,vertex,evictions,new,hash,set,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,new,vertices,size,vr,size,continue,vertex,priority,queue,pq,new,vertex,priority,queue,vr,size,for,vertex,vertex,new,vertices,if,vertex,get,field,equals,vr,field,name,vertex,eviction,pq,insert,with,overflow,vertex,if,eviction,null,evictions,add,eviction,if,evictions,size,0,for,connection,connection,new,connections,if,evictions,contains,connection,get,to,connections,remove,connection,get,id,remove,vertex,connection,get,to,private,double,get,expand,total,signal,strength,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,0,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,significance,score,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,doc,count,return,total,signal,output,override,public,void,on,failure,exception,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> synchronized void expand();1541419698;Step out from some existing vertex terms looking for useful_connections;synchronized void expand() {_            if (hasTimedOut()) {_                timedOut.set(true)__                listener.onResponse(buildResponse())__                return__            }_            Map<String, Set<Vertex>> lastHopFindings = hopFindings.get(currentHopNumber)__            if ((currentHopNumber >= (request.getHopNumbers() - 1)) || (lastHopFindings == null) || (lastHopFindings.size() == 0)) {_                _                _                listener.onResponse(buildResponse())__                return__            }_            Hop lastHop = request.getHop(currentHopNumber)__            currentHopNumber++__            Hop currentHop = request.getHop(currentHopNumber)___            final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                    request.indicesOptions())__            if (request.routing() != null) {_                searchRequest.routing(request.routing())__            }__            BoolQueryBuilder rootBool = QueryBuilders.boolQuery()___            _            _            _            _            _            _            _            _            AggregationBuilder sampleAgg = null__            if (request.sampleDiversityField() != null) {_                DiversifiedAggregationBuilder diversifiedSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                        .shardSize(request.sampleSize())__                diversifiedSampleAgg.field(request.sampleDiversityField())__                diversifiedSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                sampleAgg = diversifiedSampleAgg__            }else{_                sampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__            }__            _            rootBool.must(currentHop.guidingQuery())___            _            _            _            BoolQueryBuilder sourceTermsOrClause = QueryBuilders.boolQuery()__            addUserDefinedIncludesToQuery(currentHop, sourceTermsOrClause)__            addBigOrClause(lastHopFindings, sourceTermsOrClause)___            rootBool.must(sourceTermsOrClause)____            _            _            _            for (int fieldNum = 0_ fieldNum < lastHop.getNumberVertexRequests()_ fieldNum++) {_                VertexRequest lastVr = lastHop.getVertexRequest(fieldNum)__                Set<Vertex> lastWaveVerticesForField = lastHopFindings.get(lastVr.fieldName())__                if (lastWaveVerticesForField == null) {_                    continue__                }_                String[] terms = new String[lastWaveVerticesForField.size()]__                int i = 0__                for (Vertex v : lastWaveVerticesForField) {_                    terms[i++] = v.getTerm()__                }_                TermsAggregationBuilder lastWaveTermsAgg = AggregationBuilders.terms("field" + fieldNum)_                        .includeExclude(new IncludeExclude(terms, null))_                        .shardMinDocCount(1)_                        .field(lastVr.fieldName()).minDocCount(1)_                        _                        _                        _                        .executionHint("map")_                        .size(terms.length)__                sampleAgg.subAggregation(lastWaveTermsAgg)__                for (int f = 0_ f < currentHop.getNumberVertexRequests()_ f++) {_                    VertexRequest vr = currentHop.getVertexRequest(f)__                    int size=vr.size()__                    if (vr.fieldName().equals(lastVr.fieldName())) {_                        _                        _                        size++__                    }_                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder nextWaveSigTerms = AggregationBuilders.significantTerms("field" + f)_                                .field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount()).executionHint("map").size(size)___                        _                        _                        if (size < 10) {_                            nextWaveSigTerms.shardSize(10)__                        }_                        ____                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWaveSigTerms.includeExclude(new IncludeExclude(includes, null))__                            _                            _                            _                            _                            _                            _                            __                            __                        } else if (vr.hasExcludeClauses()) {_                            nextWaveSigTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWaveSigTerms)__                    } else {_                        TermsAggregationBuilder nextWavePopularTerms = AggregationBuilders.terms("field" + f).field(vr.fieldName())_                                .minDocCount(vr.minDocCount()).shardMinDocCount(vr.shardMinDocCount())_                                _                                _                                _                                .executionHint("map")_                                .size(size)__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            nextWavePopularTerms.includeExclude(new IncludeExclude(includes, null))__                            _                        } else if (vr.hasExcludeClauses()) {_                            nextWavePopularTerms.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        lastWaveTermsAgg.subAggregation(nextWavePopularTerms)__                    }_                }_            }__            _            SearchSourceBuilder source = new SearchSourceBuilder().query(rootBool).aggregation(sampleAgg).size(0)__            if (request.timeout() != null) {_                source.timeout(TimeValue.timeValueMillis(timeRemainingMillis()))__            }_            searchRequest.source(source)___            _            logger.trace("executing expansion graph search request")__            client.search(searchRequest, new ActionListener<SearchResponse>() {_                @Override_                public void onResponse(SearchResponse searchResponse) {_                    _                    addShardFailures(searchResponse.getShardFailures())___                    ArrayList<Connection> newConnections = new ArrayList<Connection>()__                    ArrayList<Vertex> newVertices = new ArrayList<Vertex>()__                    Sampler sample = searchResponse.getAggregations().get("sample")___                    _                    _                    _                    _                    _                    _                    double totalSignalOutput = getExpandTotalSignalStrength(lastHop, currentHop, sample)___                    _                    _                    if (totalSignalOutput > 0) {_                        addAndScoreNewVertices(lastHop, currentHop, sample, totalSignalOutput, newConnections, newVertices)___                        trimNewAdditions(currentHop, newConnections, newVertices)__                    }__                    _                    expand()___                }___                _                _                private void addAndScoreNewVertices(Hop lastHop, Hop currentHop, Sampler sample, double totalSignalOutput,_                        ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    _                    _                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if(lastWaveTerms == null){_                            _                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            Vertex fromVertex = getVertex(lastVr.fieldName(), lastWaveTerm.getKeyAsString())__                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                _                                _                                double decay = 0.95d__                                if (request.useSignificance()) {_                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(fromVertex.getField())) &&_                                                    (bucket.getKeyAsString().equals(fromVertex.getTerm()))) {_                                                _                                                continue__                                            }_                                            double signalStrength = bucket.getSignificanceScore() / totalSignalOutput___                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                                _                                                _                                                _                                                _                                                toVertex.setFg(Math.max(toVertex.getFg(), bucket.getSubsetDf()))__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                } else {_                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            double signalStrength = bucket.getDocCount() / totalSignalOutput__                                            _                                            signalStrength = signalStrength * Math.min(decay, fromVertex.getWeight())___                                            Vertex toVertex = getVertex(vr.fieldName(), bucket.getKeyAsString())__                                            if (toVertex == null) {_                                                toVertex = addVertex(vr.fieldName(), bucket.getKeyAsString(), signalStrength,_                                                        currentHopNumber, 0, 0)__                                                newVertices.add(toVertex)__                                            } else {_                                                toVertex.setWeight(toVertex.getWeight() + signalStrength)__                                            }_                                            newConnections.add(addConnection(fromVertex, toVertex, signalStrength, bucket.getDocCount()))__                                        }_                                    }_                                }_                            }_                        }_                    }_                }___                _                _                _                _                _                _                private void trimNewAdditions(Hop currentHop, ArrayList<Connection> newConnections, ArrayList<Vertex> newVertices) {_                    Set<Vertex> evictions = new HashSet<>()___                    for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                        _                        VertexRequest vr = currentHop.getVertexRequest(k)__                        if (newVertices.size() <= vr.size()) {_                            _                            continue__                        }_                        _                        VertexPriorityQueue pq = new VertexPriorityQueue(vr.size())__                        for (Vertex vertex : newVertices) {_                            if (vertex.getField().equals(vr.fieldName())) {_                                Vertex eviction = pq.insertWithOverflow(vertex)__                                if (eviction != null) {_                                    evictions.add(eviction)__                                }_                            }_                        }_                    }_                    _                    if (evictions.size() > 0) {_                        for (Connection connection : newConnections) {_                            if (evictions.contains(connection.getTo())) {_                                connections.remove(connection.getId())__                                removeVertex(connection.getTo())__                            }_                        }_                    }_                }_                _                _                _                _                _                _                __                _                private double getExpandTotalSignalStrength(Hop lastHop, Hop currentHop, Sampler sample) {_                    double totalSignalOutput = 0__                    for (int j = 0_ j < lastHop.getNumberVertexRequests()_ j++) {_                        VertexRequest lastVr = lastHop.getVertexRequest(j)__                        Terms lastWaveTerms = sample.getAggregations().get("field" + j)__                        if (lastWaveTerms == null) {_                            continue__                        }_                        List<? extends Terms.Bucket> buckets = lastWaveTerms.getBuckets()__                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket lastWaveTerm : buckets) {_                            for (int k = 0_ k < currentHop.getNumberVertexRequests()_ k++) {_                                VertexRequest vr = currentHop.getVertexRequest(k)__                                if (request.useSignificance()) {_                                    _                                    SignificantTerms significantTerms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (significantTerms != null) {_                                        for (Bucket bucket : significantTerms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getSignificanceScore()__                                            }_                                        }_                                    }_                                } else {_                                    _                                    _                                    Terms terms = lastWaveTerm.getAggregations().get("field" + k)__                                    if (terms != null) {_                                        for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : terms.getBuckets()) {_                                            if ((vr.fieldName().equals(lastVr.fieldName()))_                                                    && (bucket.getKeyAsString().equals(lastWaveTerm.getKeyAsString()))) {_                                                _                                                continue__                                            } else {_                                                totalSignalOutput += bucket.getDocCount()__                                            }_                                        }_                                    }_                                }_                            }_                        }_                    }_                    return totalSignalOutput__                }__                @Override_                public void onFailure(Exception e) {_                    listener.onFailure(e)__            }_            })__        };step,out,from,some,existing,vertex,terms,looking,for,useful,connections;synchronized,void,expand,if,has,timed,out,timed,out,set,true,listener,on,response,build,response,return,map,string,set,vertex,last,hop,findings,hop,findings,get,current,hop,number,if,current,hop,number,request,get,hop,numbers,1,last,hop,findings,null,last,hop,findings,size,0,listener,on,response,build,response,return,hop,last,hop,request,get,hop,current,hop,number,current,hop,number,hop,current,hop,request,get,hop,current,hop,number,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,sample,agg,field,request,sample,diversity,field,diversified,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,sample,agg,diversified,sample,agg,else,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,root,bool,must,current,hop,guiding,query,bool,query,builder,source,terms,or,clause,query,builders,bool,query,add,user,defined,includes,to,query,current,hop,source,terms,or,clause,add,big,or,clause,last,hop,findings,source,terms,or,clause,root,bool,must,source,terms,or,clause,for,int,field,num,0,field,num,last,hop,get,number,vertex,requests,field,num,vertex,request,last,vr,last,hop,get,vertex,request,field,num,set,vertex,last,wave,vertices,for,field,last,hop,findings,get,last,vr,field,name,if,last,wave,vertices,for,field,null,continue,string,terms,new,string,last,wave,vertices,for,field,size,int,i,0,for,vertex,v,last,wave,vertices,for,field,terms,i,v,get,term,terms,aggregation,builder,last,wave,terms,agg,aggregation,builders,terms,field,field,num,include,exclude,new,include,exclude,terms,null,shard,min,doc,count,1,field,last,vr,field,name,min,doc,count,1,execution,hint,map,size,terms,length,sample,agg,sub,aggregation,last,wave,terms,agg,for,int,f,0,f,current,hop,get,number,vertex,requests,f,vertex,request,vr,current,hop,get,vertex,request,f,int,size,vr,size,if,vr,field,name,equals,last,vr,field,name,size,if,request,use,significance,significant,terms,aggregation,builder,next,wave,sig,terms,aggregation,builders,significant,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,size,10,next,wave,sig,terms,shard,size,10,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,sig,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,sig,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,sig,terms,else,terms,aggregation,builder,next,wave,popular,terms,aggregation,builders,terms,field,f,field,vr,field,name,min,doc,count,vr,min,doc,count,shard,min,doc,count,vr,shard,min,doc,count,execution,hint,map,size,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,next,wave,popular,terms,include,exclude,new,include,exclude,includes,null,else,if,vr,has,exclude,clauses,next,wave,popular,terms,include,exclude,new,include,exclude,null,vr,excludes,as,array,last,wave,terms,agg,sub,aggregation,next,wave,popular,terms,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,sample,agg,size,0,if,request,timeout,null,source,timeout,time,value,time,value,millis,time,remaining,millis,search,request,source,source,logger,trace,executing,expansion,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,array,list,connection,new,connections,new,array,list,connection,array,list,vertex,new,vertices,new,array,list,vertex,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,output,get,expand,total,signal,strength,last,hop,current,hop,sample,if,total,signal,output,0,add,and,score,new,vertices,last,hop,current,hop,sample,total,signal,output,new,connections,new,vertices,trim,new,additions,current,hop,new,connections,new,vertices,expand,private,void,add,and,score,new,vertices,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,array,list,connection,new,connections,array,list,vertex,new,vertices,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,vertex,from,vertex,get,vertex,last,vr,field,name,last,wave,term,get,key,as,string,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,double,decay,0,95d,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,from,vertex,get,field,bucket,get,key,as,string,equals,from,vertex,get,term,continue,double,signal,strength,bucket,get,significance,score,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,to,vertex,set,fg,math,max,to,vertex,get,fg,bucket,get,subset,df,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,double,signal,strength,bucket,get,doc,count,total,signal,output,signal,strength,signal,strength,math,min,decay,from,vertex,get,weight,vertex,to,vertex,get,vertex,vr,field,name,bucket,get,key,as,string,if,to,vertex,null,to,vertex,add,vertex,vr,field,name,bucket,get,key,as,string,signal,strength,current,hop,number,0,0,new,vertices,add,to,vertex,else,to,vertex,set,weight,to,vertex,get,weight,signal,strength,new,connections,add,add,connection,from,vertex,to,vertex,signal,strength,bucket,get,doc,count,private,void,trim,new,additions,hop,current,hop,array,list,connection,new,connections,array,list,vertex,new,vertices,set,vertex,evictions,new,hash,set,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,new,vertices,size,vr,size,continue,vertex,priority,queue,pq,new,vertex,priority,queue,vr,size,for,vertex,vertex,new,vertices,if,vertex,get,field,equals,vr,field,name,vertex,eviction,pq,insert,with,overflow,vertex,if,eviction,null,evictions,add,eviction,if,evictions,size,0,for,connection,connection,new,connections,if,evictions,contains,connection,get,to,connections,remove,connection,get,id,remove,vertex,connection,get,to,private,double,get,expand,total,signal,strength,hop,last,hop,hop,current,hop,sampler,sample,double,total,signal,output,0,for,int,j,0,j,last,hop,get,number,vertex,requests,j,vertex,request,last,vr,last,hop,get,vertex,request,j,terms,last,wave,terms,sample,get,aggregations,get,field,j,if,last,wave,terms,null,continue,list,extends,terms,bucket,buckets,last,wave,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,last,wave,term,buckets,for,int,k,0,k,current,hop,get,number,vertex,requests,k,vertex,request,vr,current,hop,get,vertex,request,k,if,request,use,significance,significant,terms,significant,terms,last,wave,term,get,aggregations,get,field,k,if,significant,terms,null,for,bucket,bucket,significant,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,significance,score,else,terms,terms,last,wave,term,get,aggregations,get,field,k,if,terms,null,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,terms,get,buckets,if,vr,field,name,equals,last,vr,field,name,bucket,get,key,as,string,equals,last,wave,term,get,key,as,string,continue,else,total,signal,output,bucket,get,doc,count,return,total,signal,output,override,public,void,on,failure,exception,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> public synchronized void start();1524684173;For a given root query (or a set of "includes" root constraints) find_the related terms. These will be our start points in the graph_navigation.;public synchronized void start() {_            try {__                final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                        request.indicesOptions())__                if (request.routing() != null) {_                    searchRequest.routing(request.routing())__                }__                BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__                _                AggregationBuilder rootSampleAgg = null__                if (request.sampleDiversityField() != null) {_                    DiversifiedAggregationBuilder diversifiedRootSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                            .shardSize(request.sampleSize())__                    diversifiedRootSampleAgg.field(request.sampleDiversityField())__                    diversifiedRootSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                    rootSampleAgg = diversifiedRootSampleAgg__                } else {_                    rootSampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__                }_                _                _                _                Hop rootHop = request.getHop(0)__                _                _                rootBool.must(rootHop.guidingQuery())__                _                _                _                _                _                _                BoolQueryBuilder includesContainer = QueryBuilders.boolQuery()__                addUserDefinedIncludesToQuery(rootHop, includesContainer)__                if (includesContainer.should().size() > 0) {_                    rootBool.must(includesContainer)__                }_                __                for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                    VertexRequest vr = rootHop.getVertexRequest(i)__                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder sigBuilder = AggregationBuilders.significantTerms("field" + i)__                        sigBuilder.field(vr.fieldName()).shardMinDocCount(vr.shardMinDocCount()).minDocCount(vr.minDocCount())_                                _                                _                                _                                .executionHint("map").size(vr.size())__                        _                        _                        _                        __                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            sigBuilder.includeExclude(new IncludeExclude(includes,null))__                            sigBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            sigBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(sigBuilder)__                    } else {_                        TermsAggregationBuilder termsBuilder = AggregationBuilders.terms("field" + i)__                        _                        _                        _                        _                        _                        termsBuilder.field(vr.fieldName()).executionHint("map").size(vr.size())__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            termsBuilder.includeExclude(new IncludeExclude(includes,null))__                            termsBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            termsBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(termsBuilder)__                    }_                }                _                _                _                _                SearchSourceBuilder source = new SearchSourceBuilder()_                    .query(rootBool)_                    .aggregation(rootSampleAgg).size(0)__                if (request.timeout() != null) {_                    source.timeout(request.timeout())__                }_                searchRequest.source(source)__                _                logger.trace("executing initial graph search request")__                searchAction.execute(searchRequest, new ActionListener<SearchResponse>() {_                    @Override_                    public void onResponse(SearchResponse searchResponse) {_                        addShardFailures(searchResponse.getShardFailures())__                        Sampler sample = searchResponse.getAggregations().get("sample")___                        _                        double totalSignalStrength = getInitialTotalSignalStrength(rootHop, sample)__                        _                        _                        _                        _                        for (int j = 0_ j < rootHop.getNumberVertexRequests()_ j++) {_                            VertexRequest vr = rootHop.getVertexRequest(j)__                            if (request.useSignificance()) {_                                SignificantTerms significantTerms = sample.getAggregations().get("field" + j)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    double signalWeight = bucket.getSignificanceScore() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, _                                            currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                }_                            } else {_                                Terms terms = sample.getAggregations().get("field" + j)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    double signalWeight = bucket.getDocCount() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, currentHopNumber, 0, 0)__                                }_                            }_                        }_                        _                        expand()___                    }__                    _                    private double getInitialTotalSignalStrength(Hop rootHop, Sampler sample) {_                        double totalSignalStrength = 0__                        for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                            if (request.useSignificance()) {_                                _                                SignificantTerms significantTerms = sample.getAggregations().get("field" + i)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getSignificanceScore()__                                }_                            } else {_                                _                                Terms terms = sample.getAggregations().get("field" + i)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getDocCount()__                                }_                            }_                        }_                        return totalSignalStrength__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } catch (Exception e) {_                logger.error("unable to execute the graph query", e)__                listener.onFailure(e)__            }_        };for,a,given,root,query,or,a,set,of,includes,root,constraints,find,the,related,terms,these,will,be,our,start,points,in,the,graph,navigation;public,synchronized,void,start,try,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,root,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,root,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,root,sample,agg,field,request,sample,diversity,field,diversified,root,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,root,sample,agg,diversified,root,sample,agg,else,root,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,hop,root,hop,request,get,hop,0,root,bool,must,root,hop,guiding,query,bool,query,builder,includes,container,query,builders,bool,query,add,user,defined,includes,to,query,root,hop,includes,container,if,includes,container,should,size,0,root,bool,must,includes,container,for,int,i,0,i,root,hop,get,number,vertex,requests,i,vertex,request,vr,root,hop,get,vertex,request,i,if,request,use,significance,significant,terms,aggregation,builder,sig,builder,aggregation,builders,significant,terms,field,i,sig,builder,field,vr,field,name,shard,min,doc,count,vr,shard,min,doc,count,min,doc,count,vr,min,doc,count,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,sig,builder,include,exclude,new,include,exclude,includes,null,sig,builder,size,includes,length,if,vr,has,exclude,clauses,sig,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,sig,builder,else,terms,aggregation,builder,terms,builder,aggregation,builders,terms,field,i,terms,builder,field,vr,field,name,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,terms,builder,include,exclude,new,include,exclude,includes,null,terms,builder,size,includes,length,if,vr,has,exclude,clauses,terms,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,terms,builder,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,root,sample,agg,size,0,if,request,timeout,null,source,timeout,request,timeout,search,request,source,source,logger,trace,executing,initial,graph,search,request,search,action,execute,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,strength,get,initial,total,signal,strength,root,hop,sample,for,int,j,0,j,root,hop,get,number,vertex,requests,j,vertex,request,vr,root,hop,get,vertex,request,j,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,j,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,double,signal,weight,bucket,get,significance,score,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,else,terms,terms,sample,get,aggregations,get,field,j,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,double,signal,weight,bucket,get,doc,count,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,0,0,expand,private,double,get,initial,total,signal,strength,hop,root,hop,sampler,sample,double,total,signal,strength,0,for,int,i,0,i,root,hop,get,number,vertex,requests,i,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,i,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,total,signal,strength,bucket,get,significance,score,else,terms,terms,sample,get,aggregations,get,field,i,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,total,signal,strength,bucket,get,doc,count,return,total,signal,strength,override,public,void,on,failure,exception,e,listener,on,failure,e,catch,exception,e,logger,error,unable,to,execute,the,graph,query,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> public synchronized void start();1529487105;For a given root query (or a set of "includes" root constraints) find_the related terms. These will be our start points in the graph_navigation.;public synchronized void start() {_            try {__                final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                        request.indicesOptions())__                if (request.routing() != null) {_                    searchRequest.routing(request.routing())__                }__                BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__                _                AggregationBuilder rootSampleAgg = null__                if (request.sampleDiversityField() != null) {_                    DiversifiedAggregationBuilder diversifiedRootSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                            .shardSize(request.sampleSize())__                    diversifiedRootSampleAgg.field(request.sampleDiversityField())__                    diversifiedRootSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                    rootSampleAgg = diversifiedRootSampleAgg__                } else {_                    rootSampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__                }_                _                _                _                Hop rootHop = request.getHop(0)__                _                _                rootBool.must(rootHop.guidingQuery())__                _                _                _                _                _                _                BoolQueryBuilder includesContainer = QueryBuilders.boolQuery()__                addUserDefinedIncludesToQuery(rootHop, includesContainer)__                if (includesContainer.should().size() > 0) {_                    rootBool.must(includesContainer)__                }_                __                for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                    VertexRequest vr = rootHop.getVertexRequest(i)__                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder sigBuilder = AggregationBuilders.significantTerms("field" + i)__                        sigBuilder.field(vr.fieldName()).shardMinDocCount(vr.shardMinDocCount()).minDocCount(vr.minDocCount())_                                _                                _                                _                                .executionHint("map").size(vr.size())__                        _                        _                        _                        __                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            sigBuilder.includeExclude(new IncludeExclude(includes,null))__                            sigBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            sigBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(sigBuilder)__                    } else {_                        TermsAggregationBuilder termsBuilder = AggregationBuilders.terms("field" + i)__                        _                        _                        _                        _                        _                        termsBuilder.field(vr.fieldName()).executionHint("map").size(vr.size())__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            termsBuilder.includeExclude(new IncludeExclude(includes,null))__                            termsBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            termsBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(termsBuilder)__                    }_                }                _                _                _                _                SearchSourceBuilder source = new SearchSourceBuilder()_                    .query(rootBool)_                    .aggregation(rootSampleAgg).size(0)__                if (request.timeout() != null) {_                    source.timeout(request.timeout())__                }_                searchRequest.source(source)__                _                logger.trace("executing initial graph search request")__                searchAction.execute(searchRequest, new ActionListener<SearchResponse>() {_                    @Override_                    public void onResponse(SearchResponse searchResponse) {_                        addShardFailures(searchResponse.getShardFailures())__                        Sampler sample = searchResponse.getAggregations().get("sample")___                        _                        double totalSignalStrength = getInitialTotalSignalStrength(rootHop, sample)__                        _                        _                        _                        _                        for (int j = 0_ j < rootHop.getNumberVertexRequests()_ j++) {_                            VertexRequest vr = rootHop.getVertexRequest(j)__                            if (request.useSignificance()) {_                                SignificantTerms significantTerms = sample.getAggregations().get("field" + j)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    double signalWeight = bucket.getSignificanceScore() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, _                                            currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                }_                            } else {_                                Terms terms = sample.getAggregations().get("field" + j)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    double signalWeight = bucket.getDocCount() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, currentHopNumber, 0, 0)__                                }_                            }_                        }_                        _                        expand()___                    }__                    _                    private double getInitialTotalSignalStrength(Hop rootHop, Sampler sample) {_                        double totalSignalStrength = 0__                        for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                            if (request.useSignificance()) {_                                _                                SignificantTerms significantTerms = sample.getAggregations().get("field" + i)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getSignificanceScore()__                                }_                            } else {_                                _                                Terms terms = sample.getAggregations().get("field" + i)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getDocCount()__                                }_                            }_                        }_                        return totalSignalStrength__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } catch (Exception e) {_                logger.error("unable to execute the graph query", e)__                listener.onFailure(e)__            }_        };for,a,given,root,query,or,a,set,of,includes,root,constraints,find,the,related,terms,these,will,be,our,start,points,in,the,graph,navigation;public,synchronized,void,start,try,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,root,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,root,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,root,sample,agg,field,request,sample,diversity,field,diversified,root,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,root,sample,agg,diversified,root,sample,agg,else,root,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,hop,root,hop,request,get,hop,0,root,bool,must,root,hop,guiding,query,bool,query,builder,includes,container,query,builders,bool,query,add,user,defined,includes,to,query,root,hop,includes,container,if,includes,container,should,size,0,root,bool,must,includes,container,for,int,i,0,i,root,hop,get,number,vertex,requests,i,vertex,request,vr,root,hop,get,vertex,request,i,if,request,use,significance,significant,terms,aggregation,builder,sig,builder,aggregation,builders,significant,terms,field,i,sig,builder,field,vr,field,name,shard,min,doc,count,vr,shard,min,doc,count,min,doc,count,vr,min,doc,count,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,sig,builder,include,exclude,new,include,exclude,includes,null,sig,builder,size,includes,length,if,vr,has,exclude,clauses,sig,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,sig,builder,else,terms,aggregation,builder,terms,builder,aggregation,builders,terms,field,i,terms,builder,field,vr,field,name,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,terms,builder,include,exclude,new,include,exclude,includes,null,terms,builder,size,includes,length,if,vr,has,exclude,clauses,terms,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,terms,builder,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,root,sample,agg,size,0,if,request,timeout,null,source,timeout,request,timeout,search,request,source,source,logger,trace,executing,initial,graph,search,request,search,action,execute,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,strength,get,initial,total,signal,strength,root,hop,sample,for,int,j,0,j,root,hop,get,number,vertex,requests,j,vertex,request,vr,root,hop,get,vertex,request,j,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,j,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,double,signal,weight,bucket,get,significance,score,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,else,terms,terms,sample,get,aggregations,get,field,j,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,double,signal,weight,bucket,get,doc,count,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,0,0,expand,private,double,get,initial,total,signal,strength,hop,root,hop,sampler,sample,double,total,signal,strength,0,for,int,i,0,i,root,hop,get,number,vertex,requests,i,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,i,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,total,signal,strength,bucket,get,significance,score,else,terms,terms,sample,get,aggregations,get,field,i,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,total,signal,strength,bucket,get,doc,count,return,total,signal,strength,override,public,void,on,failure,exception,e,listener,on,failure,e,catch,exception,e,logger,error,unable,to,execute,the,graph,query,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> public synchronized void start();1529600205;For a given root query (or a set of "includes" root constraints) find_the related terms. These will be our start points in the graph_navigation.;public synchronized void start() {_            try {__                final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                        request.indicesOptions())__                if (request.routing() != null) {_                    searchRequest.routing(request.routing())__                }__                BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__                _                AggregationBuilder rootSampleAgg = null__                if (request.sampleDiversityField() != null) {_                    DiversifiedAggregationBuilder diversifiedRootSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                            .shardSize(request.sampleSize())__                    diversifiedRootSampleAgg.field(request.sampleDiversityField())__                    diversifiedRootSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                    rootSampleAgg = diversifiedRootSampleAgg__                } else {_                    rootSampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__                }_                _                _                _                Hop rootHop = request.getHop(0)__                _                _                rootBool.must(rootHop.guidingQuery())__                _                _                _                _                _                _                BoolQueryBuilder includesContainer = QueryBuilders.boolQuery()__                addUserDefinedIncludesToQuery(rootHop, includesContainer)__                if (includesContainer.should().size() > 0) {_                    rootBool.must(includesContainer)__                }_                __                for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                    VertexRequest vr = rootHop.getVertexRequest(i)__                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder sigBuilder = AggregationBuilders.significantTerms("field" + i)__                        sigBuilder.field(vr.fieldName()).shardMinDocCount(vr.shardMinDocCount()).minDocCount(vr.minDocCount())_                                _                                _                                _                                .executionHint("map").size(vr.size())__                        _                        _                        _                        __                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            sigBuilder.includeExclude(new IncludeExclude(includes,null))__                            sigBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            sigBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(sigBuilder)__                    } else {_                        TermsAggregationBuilder termsBuilder = AggregationBuilders.terms("field" + i)__                        _                        _                        _                        _                        _                        termsBuilder.field(vr.fieldName()).executionHint("map").size(vr.size())__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            termsBuilder.includeExclude(new IncludeExclude(includes,null))__                            termsBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            termsBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(termsBuilder)__                    }_                }                _                _                _                _                SearchSourceBuilder source = new SearchSourceBuilder()_                    .query(rootBool)_                    .aggregation(rootSampleAgg).size(0)__                if (request.timeout() != null) {_                    source.timeout(request.timeout())__                }_                searchRequest.source(source)__                _                logger.trace("executing initial graph search request")__                client.search(searchRequest, new ActionListener<SearchResponse>() {_                    @Override_                    public void onResponse(SearchResponse searchResponse) {_                        addShardFailures(searchResponse.getShardFailures())__                        Sampler sample = searchResponse.getAggregations().get("sample")___                        _                        double totalSignalStrength = getInitialTotalSignalStrength(rootHop, sample)__                        _                        _                        _                        _                        for (int j = 0_ j < rootHop.getNumberVertexRequests()_ j++) {_                            VertexRequest vr = rootHop.getVertexRequest(j)__                            if (request.useSignificance()) {_                                SignificantTerms significantTerms = sample.getAggregations().get("field" + j)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    double signalWeight = bucket.getSignificanceScore() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, _                                            currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                }_                            } else {_                                Terms terms = sample.getAggregations().get("field" + j)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    double signalWeight = bucket.getDocCount() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, currentHopNumber, 0, 0)__                                }_                            }_                        }_                        _                        expand()___                    }__                    _                    private double getInitialTotalSignalStrength(Hop rootHop, Sampler sample) {_                        double totalSignalStrength = 0__                        for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                            if (request.useSignificance()) {_                                _                                SignificantTerms significantTerms = sample.getAggregations().get("field" + i)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getSignificanceScore()__                                }_                            } else {_                                _                                Terms terms = sample.getAggregations().get("field" + i)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getDocCount()__                                }_                            }_                        }_                        return totalSignalStrength__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } catch (Exception e) {_                logger.error("unable to execute the graph query", e)__                listener.onFailure(e)__            }_        };for,a,given,root,query,or,a,set,of,includes,root,constraints,find,the,related,terms,these,will,be,our,start,points,in,the,graph,navigation;public,synchronized,void,start,try,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,root,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,root,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,root,sample,agg,field,request,sample,diversity,field,diversified,root,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,root,sample,agg,diversified,root,sample,agg,else,root,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,hop,root,hop,request,get,hop,0,root,bool,must,root,hop,guiding,query,bool,query,builder,includes,container,query,builders,bool,query,add,user,defined,includes,to,query,root,hop,includes,container,if,includes,container,should,size,0,root,bool,must,includes,container,for,int,i,0,i,root,hop,get,number,vertex,requests,i,vertex,request,vr,root,hop,get,vertex,request,i,if,request,use,significance,significant,terms,aggregation,builder,sig,builder,aggregation,builders,significant,terms,field,i,sig,builder,field,vr,field,name,shard,min,doc,count,vr,shard,min,doc,count,min,doc,count,vr,min,doc,count,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,sig,builder,include,exclude,new,include,exclude,includes,null,sig,builder,size,includes,length,if,vr,has,exclude,clauses,sig,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,sig,builder,else,terms,aggregation,builder,terms,builder,aggregation,builders,terms,field,i,terms,builder,field,vr,field,name,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,terms,builder,include,exclude,new,include,exclude,includes,null,terms,builder,size,includes,length,if,vr,has,exclude,clauses,terms,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,terms,builder,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,root,sample,agg,size,0,if,request,timeout,null,source,timeout,request,timeout,search,request,source,source,logger,trace,executing,initial,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,strength,get,initial,total,signal,strength,root,hop,sample,for,int,j,0,j,root,hop,get,number,vertex,requests,j,vertex,request,vr,root,hop,get,vertex,request,j,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,j,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,double,signal,weight,bucket,get,significance,score,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,else,terms,terms,sample,get,aggregations,get,field,j,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,double,signal,weight,bucket,get,doc,count,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,0,0,expand,private,double,get,initial,total,signal,strength,hop,root,hop,sampler,sample,double,total,signal,strength,0,for,int,i,0,i,root,hop,get,number,vertex,requests,i,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,i,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,total,signal,strength,bucket,get,significance,score,else,terms,terms,sample,get,aggregations,get,field,i,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,total,signal,strength,bucket,get,doc,count,return,total,signal,strength,override,public,void,on,failure,exception,e,listener,on,failure,e,catch,exception,e,logger,error,unable,to,execute,the,graph,query,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> public synchronized void start();1529658035;For a given root query (or a set of "includes" root constraints) find_the related terms. These will be our start points in the graph_navigation.;public synchronized void start() {_            try {__                final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                        request.indicesOptions())__                if (request.routing() != null) {_                    searchRequest.routing(request.routing())__                }__                BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__                _                AggregationBuilder rootSampleAgg = null__                if (request.sampleDiversityField() != null) {_                    DiversifiedAggregationBuilder diversifiedRootSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                            .shardSize(request.sampleSize())__                    diversifiedRootSampleAgg.field(request.sampleDiversityField())__                    diversifiedRootSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                    rootSampleAgg = diversifiedRootSampleAgg__                } else {_                    rootSampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__                }_                _                _                _                Hop rootHop = request.getHop(0)__                _                _                rootBool.must(rootHop.guidingQuery())__                _                _                _                _                _                _                BoolQueryBuilder includesContainer = QueryBuilders.boolQuery()__                addUserDefinedIncludesToQuery(rootHop, includesContainer)__                if (includesContainer.should().size() > 0) {_                    rootBool.must(includesContainer)__                }_                __                for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                    VertexRequest vr = rootHop.getVertexRequest(i)__                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder sigBuilder = AggregationBuilders.significantTerms("field" + i)__                        sigBuilder.field(vr.fieldName()).shardMinDocCount(vr.shardMinDocCount()).minDocCount(vr.minDocCount())_                                _                                _                                _                                .executionHint("map").size(vr.size())__                        _                        _                        _                        __                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            sigBuilder.includeExclude(new IncludeExclude(includes,null))__                            sigBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            sigBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(sigBuilder)__                    } else {_                        TermsAggregationBuilder termsBuilder = AggregationBuilders.terms("field" + i)__                        _                        _                        _                        _                        _                        termsBuilder.field(vr.fieldName()).executionHint("map").size(vr.size())__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            termsBuilder.includeExclude(new IncludeExclude(includes,null))__                            termsBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            termsBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(termsBuilder)__                    }_                }                _                _                _                _                SearchSourceBuilder source = new SearchSourceBuilder()_                    .query(rootBool)_                    .aggregation(rootSampleAgg).size(0)__                if (request.timeout() != null) {_                    source.timeout(request.timeout())__                }_                searchRequest.source(source)__                _                logger.trace("executing initial graph search request")__                client.search(searchRequest, new ActionListener<SearchResponse>() {_                    @Override_                    public void onResponse(SearchResponse searchResponse) {_                        addShardFailures(searchResponse.getShardFailures())__                        Sampler sample = searchResponse.getAggregations().get("sample")___                        _                        double totalSignalStrength = getInitialTotalSignalStrength(rootHop, sample)__                        _                        _                        _                        _                        for (int j = 0_ j < rootHop.getNumberVertexRequests()_ j++) {_                            VertexRequest vr = rootHop.getVertexRequest(j)__                            if (request.useSignificance()) {_                                SignificantTerms significantTerms = sample.getAggregations().get("field" + j)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    double signalWeight = bucket.getSignificanceScore() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, _                                            currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                }_                            } else {_                                Terms terms = sample.getAggregations().get("field" + j)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    double signalWeight = bucket.getDocCount() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, currentHopNumber, 0, 0)__                                }_                            }_                        }_                        _                        expand()___                    }__                    _                    private double getInitialTotalSignalStrength(Hop rootHop, Sampler sample) {_                        double totalSignalStrength = 0__                        for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                            if (request.useSignificance()) {_                                _                                SignificantTerms significantTerms = sample.getAggregations().get("field" + i)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getSignificanceScore()__                                }_                            } else {_                                _                                Terms terms = sample.getAggregations().get("field" + i)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getDocCount()__                                }_                            }_                        }_                        return totalSignalStrength__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } catch (Exception e) {_                logger.error("unable to execute the graph query", e)__                listener.onFailure(e)__            }_        };for,a,given,root,query,or,a,set,of,includes,root,constraints,find,the,related,terms,these,will,be,our,start,points,in,the,graph,navigation;public,synchronized,void,start,try,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,root,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,root,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,root,sample,agg,field,request,sample,diversity,field,diversified,root,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,root,sample,agg,diversified,root,sample,agg,else,root,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,hop,root,hop,request,get,hop,0,root,bool,must,root,hop,guiding,query,bool,query,builder,includes,container,query,builders,bool,query,add,user,defined,includes,to,query,root,hop,includes,container,if,includes,container,should,size,0,root,bool,must,includes,container,for,int,i,0,i,root,hop,get,number,vertex,requests,i,vertex,request,vr,root,hop,get,vertex,request,i,if,request,use,significance,significant,terms,aggregation,builder,sig,builder,aggregation,builders,significant,terms,field,i,sig,builder,field,vr,field,name,shard,min,doc,count,vr,shard,min,doc,count,min,doc,count,vr,min,doc,count,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,sig,builder,include,exclude,new,include,exclude,includes,null,sig,builder,size,includes,length,if,vr,has,exclude,clauses,sig,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,sig,builder,else,terms,aggregation,builder,terms,builder,aggregation,builders,terms,field,i,terms,builder,field,vr,field,name,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,terms,builder,include,exclude,new,include,exclude,includes,null,terms,builder,size,includes,length,if,vr,has,exclude,clauses,terms,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,terms,builder,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,root,sample,agg,size,0,if,request,timeout,null,source,timeout,request,timeout,search,request,source,source,logger,trace,executing,initial,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,strength,get,initial,total,signal,strength,root,hop,sample,for,int,j,0,j,root,hop,get,number,vertex,requests,j,vertex,request,vr,root,hop,get,vertex,request,j,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,j,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,double,signal,weight,bucket,get,significance,score,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,else,terms,terms,sample,get,aggregations,get,field,j,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,double,signal,weight,bucket,get,doc,count,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,0,0,expand,private,double,get,initial,total,signal,strength,hop,root,hop,sampler,sample,double,total,signal,strength,0,for,int,i,0,i,root,hop,get,number,vertex,requests,i,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,i,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,total,signal,strength,bucket,get,significance,score,else,terms,terms,sample,get,aggregations,get,field,i,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,total,signal,strength,bucket,get,doc,count,return,total,signal,strength,override,public,void,on,failure,exception,e,listener,on,failure,e,catch,exception,e,logger,error,unable,to,execute,the,graph,query,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> public synchronized void start();1529916082;For a given root query (or a set of "includes" root constraints) find_the related terms. These will be our start points in the graph_navigation.;public synchronized void start() {_            try {__                final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                        request.indicesOptions())__                if (request.routing() != null) {_                    searchRequest.routing(request.routing())__                }__                BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__                _                AggregationBuilder rootSampleAgg = null__                if (request.sampleDiversityField() != null) {_                    DiversifiedAggregationBuilder diversifiedRootSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                            .shardSize(request.sampleSize())__                    diversifiedRootSampleAgg.field(request.sampleDiversityField())__                    diversifiedRootSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                    rootSampleAgg = diversifiedRootSampleAgg__                } else {_                    rootSampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__                }_                _                _                _                Hop rootHop = request.getHop(0)__                _                _                rootBool.must(rootHop.guidingQuery())__                _                _                _                _                _                _                BoolQueryBuilder includesContainer = QueryBuilders.boolQuery()__                addUserDefinedIncludesToQuery(rootHop, includesContainer)__                if (includesContainer.should().size() > 0) {_                    rootBool.must(includesContainer)__                }_                __                for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                    VertexRequest vr = rootHop.getVertexRequest(i)__                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder sigBuilder = AggregationBuilders.significantTerms("field" + i)__                        sigBuilder.field(vr.fieldName()).shardMinDocCount(vr.shardMinDocCount()).minDocCount(vr.minDocCount())_                                _                                _                                _                                .executionHint("map").size(vr.size())__                        _                        _                        _                        __                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            sigBuilder.includeExclude(new IncludeExclude(includes,null))__                            sigBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            sigBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(sigBuilder)__                    } else {_                        TermsAggregationBuilder termsBuilder = AggregationBuilders.terms("field" + i)__                        _                        _                        _                        _                        _                        termsBuilder.field(vr.fieldName()).executionHint("map").size(vr.size())__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            termsBuilder.includeExclude(new IncludeExclude(includes,null))__                            termsBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            termsBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(termsBuilder)__                    }_                }                _                _                _                _                SearchSourceBuilder source = new SearchSourceBuilder()_                    .query(rootBool)_                    .aggregation(rootSampleAgg).size(0)__                if (request.timeout() != null) {_                    source.timeout(request.timeout())__                }_                searchRequest.source(source)__                _                logger.trace("executing initial graph search request")__                client.search(searchRequest, new ActionListener<SearchResponse>() {_                    @Override_                    public void onResponse(SearchResponse searchResponse) {_                        addShardFailures(searchResponse.getShardFailures())__                        Sampler sample = searchResponse.getAggregations().get("sample")___                        _                        double totalSignalStrength = getInitialTotalSignalStrength(rootHop, sample)__                        _                        _                        _                        _                        for (int j = 0_ j < rootHop.getNumberVertexRequests()_ j++) {_                            VertexRequest vr = rootHop.getVertexRequest(j)__                            if (request.useSignificance()) {_                                SignificantTerms significantTerms = sample.getAggregations().get("field" + j)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    double signalWeight = bucket.getSignificanceScore() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, _                                            currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                }_                            } else {_                                Terms terms = sample.getAggregations().get("field" + j)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    double signalWeight = bucket.getDocCount() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, currentHopNumber, 0, 0)__                                }_                            }_                        }_                        _                        expand()___                    }__                    _                    private double getInitialTotalSignalStrength(Hop rootHop, Sampler sample) {_                        double totalSignalStrength = 0__                        for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                            if (request.useSignificance()) {_                                _                                SignificantTerms significantTerms = sample.getAggregations().get("field" + i)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getSignificanceScore()__                                }_                            } else {_                                _                                Terms terms = sample.getAggregations().get("field" + i)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getDocCount()__                                }_                            }_                        }_                        return totalSignalStrength__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } catch (Exception e) {_                logger.error("unable to execute the graph query", e)__                listener.onFailure(e)__            }_        };for,a,given,root,query,or,a,set,of,includes,root,constraints,find,the,related,terms,these,will,be,our,start,points,in,the,graph,navigation;public,synchronized,void,start,try,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,root,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,root,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,root,sample,agg,field,request,sample,diversity,field,diversified,root,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,root,sample,agg,diversified,root,sample,agg,else,root,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,hop,root,hop,request,get,hop,0,root,bool,must,root,hop,guiding,query,bool,query,builder,includes,container,query,builders,bool,query,add,user,defined,includes,to,query,root,hop,includes,container,if,includes,container,should,size,0,root,bool,must,includes,container,for,int,i,0,i,root,hop,get,number,vertex,requests,i,vertex,request,vr,root,hop,get,vertex,request,i,if,request,use,significance,significant,terms,aggregation,builder,sig,builder,aggregation,builders,significant,terms,field,i,sig,builder,field,vr,field,name,shard,min,doc,count,vr,shard,min,doc,count,min,doc,count,vr,min,doc,count,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,sig,builder,include,exclude,new,include,exclude,includes,null,sig,builder,size,includes,length,if,vr,has,exclude,clauses,sig,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,sig,builder,else,terms,aggregation,builder,terms,builder,aggregation,builders,terms,field,i,terms,builder,field,vr,field,name,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,terms,builder,include,exclude,new,include,exclude,includes,null,terms,builder,size,includes,length,if,vr,has,exclude,clauses,terms,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,terms,builder,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,root,sample,agg,size,0,if,request,timeout,null,source,timeout,request,timeout,search,request,source,source,logger,trace,executing,initial,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,strength,get,initial,total,signal,strength,root,hop,sample,for,int,j,0,j,root,hop,get,number,vertex,requests,j,vertex,request,vr,root,hop,get,vertex,request,j,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,j,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,double,signal,weight,bucket,get,significance,score,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,else,terms,terms,sample,get,aggregations,get,field,j,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,double,signal,weight,bucket,get,doc,count,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,0,0,expand,private,double,get,initial,total,signal,strength,hop,root,hop,sampler,sample,double,total,signal,strength,0,for,int,i,0,i,root,hop,get,number,vertex,requests,i,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,i,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,total,signal,strength,bucket,get,significance,score,else,terms,terms,sample,get,aggregations,get,field,i,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,total,signal,strength,bucket,get,doc,count,return,total,signal,strength,override,public,void,on,failure,exception,e,listener,on,failure,e,catch,exception,e,logger,error,unable,to,execute,the,graph,query,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> public synchronized void start();1535046779;For a given root query (or a set of "includes" root constraints) find_the related terms. These will be our start points in the graph_navigation.;public synchronized void start() {_            try {__                final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                        request.indicesOptions())__                if (request.routing() != null) {_                    searchRequest.routing(request.routing())__                }__                BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__                _                AggregationBuilder rootSampleAgg = null__                if (request.sampleDiversityField() != null) {_                    DiversifiedAggregationBuilder diversifiedRootSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                            .shardSize(request.sampleSize())__                    diversifiedRootSampleAgg.field(request.sampleDiversityField())__                    diversifiedRootSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                    rootSampleAgg = diversifiedRootSampleAgg__                } else {_                    rootSampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__                }_                _                _                _                Hop rootHop = request.getHop(0)__                _                _                rootBool.must(rootHop.guidingQuery())__                _                _                _                _                _                _                BoolQueryBuilder includesContainer = QueryBuilders.boolQuery()__                addUserDefinedIncludesToQuery(rootHop, includesContainer)__                if (includesContainer.should().size() > 0) {_                    rootBool.must(includesContainer)__                }_                __                for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                    VertexRequest vr = rootHop.getVertexRequest(i)__                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder sigBuilder = AggregationBuilders.significantTerms("field" + i)__                        sigBuilder.field(vr.fieldName()).shardMinDocCount(vr.shardMinDocCount()).minDocCount(vr.minDocCount())_                                _                                _                                _                                .executionHint("map").size(vr.size())__                        _                        _                        _                        __                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            sigBuilder.includeExclude(new IncludeExclude(includes,null))__                            sigBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            sigBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(sigBuilder)__                    } else {_                        TermsAggregationBuilder termsBuilder = AggregationBuilders.terms("field" + i)__                        _                        _                        _                        _                        _                        termsBuilder.field(vr.fieldName()).executionHint("map").size(vr.size())__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            termsBuilder.includeExclude(new IncludeExclude(includes,null))__                            termsBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            termsBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(termsBuilder)__                    }_                }                _                _                _                _                SearchSourceBuilder source = new SearchSourceBuilder()_                    .query(rootBool)_                    .aggregation(rootSampleAgg).size(0)__                if (request.timeout() != null) {_                    source.timeout(request.timeout())__                }_                searchRequest.source(source)__                _                logger.trace("executing initial graph search request")__                client.search(searchRequest, new ActionListener<SearchResponse>() {_                    @Override_                    public void onResponse(SearchResponse searchResponse) {_                        addShardFailures(searchResponse.getShardFailures())__                        Sampler sample = searchResponse.getAggregations().get("sample")___                        _                        double totalSignalStrength = getInitialTotalSignalStrength(rootHop, sample)__                        _                        _                        _                        _                        for (int j = 0_ j < rootHop.getNumberVertexRequests()_ j++) {_                            VertexRequest vr = rootHop.getVertexRequest(j)__                            if (request.useSignificance()) {_                                SignificantTerms significantTerms = sample.getAggregations().get("field" + j)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    double signalWeight = bucket.getSignificanceScore() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, _                                            currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                }_                            } else {_                                Terms terms = sample.getAggregations().get("field" + j)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    double signalWeight = bucket.getDocCount() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, currentHopNumber, 0, 0)__                                }_                            }_                        }_                        _                        expand()___                    }__                    _                    private double getInitialTotalSignalStrength(Hop rootHop, Sampler sample) {_                        double totalSignalStrength = 0__                        for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                            if (request.useSignificance()) {_                                _                                SignificantTerms significantTerms = sample.getAggregations().get("field" + i)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getSignificanceScore()__                                }_                            } else {_                                _                                Terms terms = sample.getAggregations().get("field" + i)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getDocCount()__                                }_                            }_                        }_                        return totalSignalStrength__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } catch (Exception e) {_                logger.error("unable to execute the graph query", e)__                listener.onFailure(e)__            }_        };for,a,given,root,query,or,a,set,of,includes,root,constraints,find,the,related,terms,these,will,be,our,start,points,in,the,graph,navigation;public,synchronized,void,start,try,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,root,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,root,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,root,sample,agg,field,request,sample,diversity,field,diversified,root,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,root,sample,agg,diversified,root,sample,agg,else,root,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,hop,root,hop,request,get,hop,0,root,bool,must,root,hop,guiding,query,bool,query,builder,includes,container,query,builders,bool,query,add,user,defined,includes,to,query,root,hop,includes,container,if,includes,container,should,size,0,root,bool,must,includes,container,for,int,i,0,i,root,hop,get,number,vertex,requests,i,vertex,request,vr,root,hop,get,vertex,request,i,if,request,use,significance,significant,terms,aggregation,builder,sig,builder,aggregation,builders,significant,terms,field,i,sig,builder,field,vr,field,name,shard,min,doc,count,vr,shard,min,doc,count,min,doc,count,vr,min,doc,count,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,sig,builder,include,exclude,new,include,exclude,includes,null,sig,builder,size,includes,length,if,vr,has,exclude,clauses,sig,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,sig,builder,else,terms,aggregation,builder,terms,builder,aggregation,builders,terms,field,i,terms,builder,field,vr,field,name,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,terms,builder,include,exclude,new,include,exclude,includes,null,terms,builder,size,includes,length,if,vr,has,exclude,clauses,terms,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,terms,builder,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,root,sample,agg,size,0,if,request,timeout,null,source,timeout,request,timeout,search,request,source,source,logger,trace,executing,initial,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,strength,get,initial,total,signal,strength,root,hop,sample,for,int,j,0,j,root,hop,get,number,vertex,requests,j,vertex,request,vr,root,hop,get,vertex,request,j,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,j,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,double,signal,weight,bucket,get,significance,score,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,else,terms,terms,sample,get,aggregations,get,field,j,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,double,signal,weight,bucket,get,doc,count,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,0,0,expand,private,double,get,initial,total,signal,strength,hop,root,hop,sampler,sample,double,total,signal,strength,0,for,int,i,0,i,root,hop,get,number,vertex,requests,i,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,i,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,total,signal,strength,bucket,get,significance,score,else,terms,terms,sample,get,aggregations,get,field,i,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,total,signal,strength,bucket,get,doc,count,return,total,signal,strength,override,public,void,on,failure,exception,e,listener,on,failure,e,catch,exception,e,logger,error,unable,to,execute,the,graph,query,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> public synchronized void start();1539615817;For a given root query (or a set of "includes" root constraints) find_the related terms. These will be our start points in the graph_navigation.;public synchronized void start() {_            try {__                final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                        request.indicesOptions())__                if (request.routing() != null) {_                    searchRequest.routing(request.routing())__                }__                BoolQueryBuilder rootBool = QueryBuilders.boolQuery()__                _                AggregationBuilder rootSampleAgg = null__                if (request.sampleDiversityField() != null) {_                    DiversifiedAggregationBuilder diversifiedRootSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                            .shardSize(request.sampleSize())__                    diversifiedRootSampleAgg.field(request.sampleDiversityField())__                    diversifiedRootSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                    rootSampleAgg = diversifiedRootSampleAgg__                } else {_                    rootSampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__                }_                _                _                _                Hop rootHop = request.getHop(0)__                _                _                rootBool.must(rootHop.guidingQuery())__                _                _                _                _                _                _                BoolQueryBuilder includesContainer = QueryBuilders.boolQuery()__                addUserDefinedIncludesToQuery(rootHop, includesContainer)__                if (includesContainer.should().size() > 0) {_                    rootBool.must(includesContainer)__                }_                __                for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                    VertexRequest vr = rootHop.getVertexRequest(i)__                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder sigBuilder = AggregationBuilders.significantTerms("field" + i)__                        sigBuilder.field(vr.fieldName()).shardMinDocCount(vr.shardMinDocCount()).minDocCount(vr.minDocCount())_                                _                                _                                _                                .executionHint("map").size(vr.size())__                        _                        _                        _                        __                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            sigBuilder.includeExclude(new IncludeExclude(includes,null))__                            sigBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            sigBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(sigBuilder)__                    } else {_                        TermsAggregationBuilder termsBuilder = AggregationBuilders.terms("field" + i)__                        _                        _                        _                        _                        _                        termsBuilder.field(vr.fieldName()).executionHint("map").size(vr.size())__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            termsBuilder.includeExclude(new IncludeExclude(includes,null))__                            termsBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            termsBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(termsBuilder)__                    }_                }                _                _                _                _                SearchSourceBuilder source = new SearchSourceBuilder()_                    .query(rootBool)_                    .aggregation(rootSampleAgg).size(0)__                if (request.timeout() != null) {_                    source.timeout(request.timeout())__                }_                searchRequest.source(source)__                _                logger.trace("executing initial graph search request")__                client.search(searchRequest, new ActionListener<SearchResponse>() {_                    @Override_                    public void onResponse(SearchResponse searchResponse) {_                        addShardFailures(searchResponse.getShardFailures())__                        Sampler sample = searchResponse.getAggregations().get("sample")___                        _                        double totalSignalStrength = getInitialTotalSignalStrength(rootHop, sample)__                        _                        _                        _                        _                        for (int j = 0_ j < rootHop.getNumberVertexRequests()_ j++) {_                            VertexRequest vr = rootHop.getVertexRequest(j)__                            if (request.useSignificance()) {_                                SignificantTerms significantTerms = sample.getAggregations().get("field" + j)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    double signalWeight = bucket.getSignificanceScore() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, _                                            currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                }_                            } else {_                                Terms terms = sample.getAggregations().get("field" + j)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    double signalWeight = bucket.getDocCount() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, currentHopNumber, 0, 0)__                                }_                            }_                        }_                        _                        expand()___                    }__                    _                    private double getInitialTotalSignalStrength(Hop rootHop, Sampler sample) {_                        double totalSignalStrength = 0__                        for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                            if (request.useSignificance()) {_                                _                                SignificantTerms significantTerms = sample.getAggregations().get("field" + i)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getSignificanceScore()__                                }_                            } else {_                                _                                Terms terms = sample.getAggregations().get("field" + i)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getDocCount()__                                }_                            }_                        }_                        return totalSignalStrength__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } catch (Exception e) {_                logger.error("unable to execute the graph query", e)__                listener.onFailure(e)__            }_        };for,a,given,root,query,or,a,set,of,includes,root,constraints,find,the,related,terms,these,will,be,our,start,points,in,the,graph,navigation;public,synchronized,void,start,try,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,root,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,root,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,root,sample,agg,field,request,sample,diversity,field,diversified,root,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,root,sample,agg,diversified,root,sample,agg,else,root,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,hop,root,hop,request,get,hop,0,root,bool,must,root,hop,guiding,query,bool,query,builder,includes,container,query,builders,bool,query,add,user,defined,includes,to,query,root,hop,includes,container,if,includes,container,should,size,0,root,bool,must,includes,container,for,int,i,0,i,root,hop,get,number,vertex,requests,i,vertex,request,vr,root,hop,get,vertex,request,i,if,request,use,significance,significant,terms,aggregation,builder,sig,builder,aggregation,builders,significant,terms,field,i,sig,builder,field,vr,field,name,shard,min,doc,count,vr,shard,min,doc,count,min,doc,count,vr,min,doc,count,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,sig,builder,include,exclude,new,include,exclude,includes,null,sig,builder,size,includes,length,if,vr,has,exclude,clauses,sig,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,sig,builder,else,terms,aggregation,builder,terms,builder,aggregation,builders,terms,field,i,terms,builder,field,vr,field,name,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,terms,builder,include,exclude,new,include,exclude,includes,null,terms,builder,size,includes,length,if,vr,has,exclude,clauses,terms,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,terms,builder,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,root,sample,agg,size,0,if,request,timeout,null,source,timeout,request,timeout,search,request,source,source,logger,trace,executing,initial,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,strength,get,initial,total,signal,strength,root,hop,sample,for,int,j,0,j,root,hop,get,number,vertex,requests,j,vertex,request,vr,root,hop,get,vertex,request,j,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,j,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,double,signal,weight,bucket,get,significance,score,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,else,terms,terms,sample,get,aggregations,get,field,j,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,double,signal,weight,bucket,get,doc,count,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,0,0,expand,private,double,get,initial,total,signal,strength,hop,root,hop,sampler,sample,double,total,signal,strength,0,for,int,i,0,i,root,hop,get,number,vertex,requests,i,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,i,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,total,signal,strength,bucket,get,significance,score,else,terms,terms,sample,get,aggregations,get,field,i,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,total,signal,strength,bucket,get,doc,count,return,total,signal,strength,override,public,void,on,failure,exception,e,listener,on,failure,e,catch,exception,e,logger,error,unable,to,execute,the,graph,query,e,listener,on,failure,e
TransportGraphExploreAction -> AsyncGraphAction -> public synchronized void start();1541419698;For a given root query (or a set of "includes" root constraints) find_the related terms. These will be our start points in the graph_navigation.;public synchronized void start() {_            try {__                final SearchRequest searchRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(_                        request.indicesOptions())__                if (request.routing() != null) {_                    searchRequest.routing(request.routing())__                }__                BoolQueryBuilder rootBool = QueryBuilders.boolQuery()___                AggregationBuilder rootSampleAgg = null__                if (request.sampleDiversityField() != null) {_                    DiversifiedAggregationBuilder diversifiedRootSampleAgg = AggregationBuilders.diversifiedSampler("sample")_                            .shardSize(request.sampleSize())__                    diversifiedRootSampleAgg.field(request.sampleDiversityField())__                    diversifiedRootSampleAgg.maxDocsPerValue(request.maxDocsPerDiversityValue())__                    rootSampleAgg = diversifiedRootSampleAgg__                } else {_                    rootSampleAgg = AggregationBuilders.sampler("sample").shardSize(request.sampleSize())__                }____                Hop rootHop = request.getHop(0)___                _                rootBool.must(rootHop.guidingQuery())____                _                _                _                _                BoolQueryBuilder includesContainer = QueryBuilders.boolQuery()__                addUserDefinedIncludesToQuery(rootHop, includesContainer)__                if (includesContainer.should().size() > 0) {_                    rootBool.must(includesContainer)__                }___                for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                    VertexRequest vr = rootHop.getVertexRequest(i)__                    if (request.useSignificance()) {_                        SignificantTermsAggregationBuilder sigBuilder = AggregationBuilders.significantTerms("field" + i)__                        sigBuilder.field(vr.fieldName()).shardMinDocCount(vr.shardMinDocCount()).minDocCount(vr.minDocCount())_                                _                                _                                _                                .executionHint("map").size(vr.size())__                        _                        _                        _                        __                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            sigBuilder.includeExclude(new IncludeExclude(includes,null))__                            sigBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            sigBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(sigBuilder)__                    } else {_                        TermsAggregationBuilder termsBuilder = AggregationBuilders.terms("field" + i)__                        _                        _                        _                        _                        _                        termsBuilder.field(vr.fieldName()).executionHint("map").size(vr.size())__                        if (vr.hasIncludeClauses()) {_                            String[] includes = vr.includeValuesAsStringArray()__                            termsBuilder.includeExclude(new IncludeExclude(includes,null))__                            termsBuilder.size(includes.length)__                        }_                        if (vr.hasExcludeClauses()) {_                            termsBuilder.includeExclude(new IncludeExclude(null, vr.excludesAsArray()))__                        }_                        rootSampleAgg.subAggregation(termsBuilder)__                    }_                }___                _                SearchSourceBuilder source = new SearchSourceBuilder()_                    .query(rootBool)_                    .aggregation(rootSampleAgg).size(0)__                if (request.timeout() != null) {_                    source.timeout(request.timeout())__                }_                searchRequest.source(source)__                _                logger.trace("executing initial graph search request")__                client.search(searchRequest, new ActionListener<SearchResponse>() {_                    @Override_                    public void onResponse(SearchResponse searchResponse) {_                        addShardFailures(searchResponse.getShardFailures())__                        Sampler sample = searchResponse.getAggregations().get("sample")___                        _                        double totalSignalStrength = getInitialTotalSignalStrength(rootHop, sample)____                        _                        _                        for (int j = 0_ j < rootHop.getNumberVertexRequests()_ j++) {_                            VertexRequest vr = rootHop.getVertexRequest(j)__                            if (request.useSignificance()) {_                                SignificantTerms significantTerms = sample.getAggregations().get("field" + j)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    double signalWeight = bucket.getSignificanceScore() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight,_                                            currentHopNumber, bucket.getSupersetDf(), bucket.getSubsetDf())__                                }_                            } else {_                                Terms terms = sample.getAggregations().get("field" + j)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    double signalWeight = bucket.getDocCount() / totalSignalStrength__                                    addVertex(vr.fieldName(), bucket.getKeyAsString(), signalWeight, currentHopNumber, 0, 0)__                                }_                            }_                        }_                        _                        expand()___                    }__                    _                    private double getInitialTotalSignalStrength(Hop rootHop, Sampler sample) {_                        double totalSignalStrength = 0__                        for (int i = 0_ i < rootHop.getNumberVertexRequests()_ i++) {_                            if (request.useSignificance()) {_                                _                                SignificantTerms significantTerms = sample.getAggregations().get("field" + i)__                                List<? extends Bucket> buckets = significantTerms.getBuckets()__                                for (Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getSignificanceScore()__                                }_                            } else {_                                _                                Terms terms = sample.getAggregations().get("field" + i)__                                List<? extends Terms.Bucket> buckets = terms.getBuckets()__                                for (org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket bucket : buckets) {_                                    totalSignalStrength += bucket.getDocCount()__                                }_                            }_                        }_                        return totalSignalStrength__                    }__                    @Override_                    public void onFailure(Exception e) {_                        listener.onFailure(e)__                    }_                })__            } catch (Exception e) {_                logger.error("unable to execute the graph query", e)__                listener.onFailure(e)__            }_        };for,a,given,root,query,or,a,set,of,includes,root,constraints,find,the,related,terms,these,will,be,our,start,points,in,the,graph,navigation;public,synchronized,void,start,try,final,search,request,search,request,new,search,request,request,indices,types,request,types,indices,options,request,indices,options,if,request,routing,null,search,request,routing,request,routing,bool,query,builder,root,bool,query,builders,bool,query,aggregation,builder,root,sample,agg,null,if,request,sample,diversity,field,null,diversified,aggregation,builder,diversified,root,sample,agg,aggregation,builders,diversified,sampler,sample,shard,size,request,sample,size,diversified,root,sample,agg,field,request,sample,diversity,field,diversified,root,sample,agg,max,docs,per,value,request,max,docs,per,diversity,value,root,sample,agg,diversified,root,sample,agg,else,root,sample,agg,aggregation,builders,sampler,sample,shard,size,request,sample,size,hop,root,hop,request,get,hop,0,root,bool,must,root,hop,guiding,query,bool,query,builder,includes,container,query,builders,bool,query,add,user,defined,includes,to,query,root,hop,includes,container,if,includes,container,should,size,0,root,bool,must,includes,container,for,int,i,0,i,root,hop,get,number,vertex,requests,i,vertex,request,vr,root,hop,get,vertex,request,i,if,request,use,significance,significant,terms,aggregation,builder,sig,builder,aggregation,builders,significant,terms,field,i,sig,builder,field,vr,field,name,shard,min,doc,count,vr,shard,min,doc,count,min,doc,count,vr,min,doc,count,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,sig,builder,include,exclude,new,include,exclude,includes,null,sig,builder,size,includes,length,if,vr,has,exclude,clauses,sig,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,sig,builder,else,terms,aggregation,builder,terms,builder,aggregation,builders,terms,field,i,terms,builder,field,vr,field,name,execution,hint,map,size,vr,size,if,vr,has,include,clauses,string,includes,vr,include,values,as,string,array,terms,builder,include,exclude,new,include,exclude,includes,null,terms,builder,size,includes,length,if,vr,has,exclude,clauses,terms,builder,include,exclude,new,include,exclude,null,vr,excludes,as,array,root,sample,agg,sub,aggregation,terms,builder,search,source,builder,source,new,search,source,builder,query,root,bool,aggregation,root,sample,agg,size,0,if,request,timeout,null,source,timeout,request,timeout,search,request,source,source,logger,trace,executing,initial,graph,search,request,client,search,search,request,new,action,listener,search,response,override,public,void,on,response,search,response,search,response,add,shard,failures,search,response,get,shard,failures,sampler,sample,search,response,get,aggregations,get,sample,double,total,signal,strength,get,initial,total,signal,strength,root,hop,sample,for,int,j,0,j,root,hop,get,number,vertex,requests,j,vertex,request,vr,root,hop,get,vertex,request,j,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,j,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,double,signal,weight,bucket,get,significance,score,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,bucket,get,superset,df,bucket,get,subset,df,else,terms,terms,sample,get,aggregations,get,field,j,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,double,signal,weight,bucket,get,doc,count,total,signal,strength,add,vertex,vr,field,name,bucket,get,key,as,string,signal,weight,current,hop,number,0,0,expand,private,double,get,initial,total,signal,strength,hop,root,hop,sampler,sample,double,total,signal,strength,0,for,int,i,0,i,root,hop,get,number,vertex,requests,i,if,request,use,significance,significant,terms,significant,terms,sample,get,aggregations,get,field,i,list,extends,bucket,buckets,significant,terms,get,buckets,for,bucket,bucket,buckets,total,signal,strength,bucket,get,significance,score,else,terms,terms,sample,get,aggregations,get,field,i,list,extends,terms,bucket,buckets,terms,get,buckets,for,org,elasticsearch,search,aggregations,bucket,terms,terms,bucket,bucket,buckets,total,signal,strength,bucket,get,doc,count,return,total,signal,strength,override,public,void,on,failure,exception,e,listener,on,failure,e,catch,exception,e,logger,error,unable,to,execute,the,graph,query,e,listener,on,failure,e
