commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean preserveClusterUponCompletion() {     return true. }
false;protected,static;3;3;;protected static void index(String index, String id, Object... fields) throws IOException {     index(adminClient(), index, id, fields). }
false;protected,static;4;10;;protected static void index(RestClient client, String index, String id, Object... fields) throws IOException {     XContentBuilder document = jsonBuilder().startObject().     for (int i = 0. i < fields.length. i += 2) {         document.field((String) fields[i], fields[i + 1]).     }     document.endObject().     final Request request = new Request("POST", "/" + index + "/_doc/" + id).     request.setJsonEntity(Strings.toString(document)).     assertOK(client.performRequest(request)). }
false;protected,static;1;3;;protected static void refresh(String index) throws IOException {     assertOK(adminClient().performRequest(new Request("POST", "/" + index + "/_refresh"))). }
false;protected,static;1;5;;protected static void resumeFollow(String followIndex) throws IOException {     final Request request = new Request("POST", "/" + followIndex + "/_ccr/resume_follow").     request.setJsonEntity("{\"read_poll_timeout\": \"10ms\"}").     assertOK(client().performRequest(request)). }
false;protected,static;2;3;;protected static void followIndex(String leaderIndex, String followIndex) throws IOException {     followIndex("leader_cluster", leaderIndex, followIndex). }
false;protected,static;3;3;;protected static void followIndex(String leaderCluster, String leaderIndex, String followIndex) throws IOException {     followIndex(client(), leaderCluster, leaderIndex, followIndex). }
false;protected,static;4;6;;protected static void followIndex(RestClient client, String leaderCluster, String leaderIndex, String followIndex) throws IOException {     final Request request = new Request("PUT", "/" + followIndex + "/_ccr/follow?wait_for_active_shards=1").     request.setJsonEntity("{\"remote_cluster\": \"" + leaderCluster + "\", \"leader_index\": \"" + leaderIndex + "\", \"read_poll_timeout\": \"10ms\"}").     assertOK(client.performRequest(request)). }
false;protected,static;1;3;;protected static void pauseFollow(String followIndex) throws IOException {     pauseFollow(client(), followIndex). }
false;protected,static;2;3;;protected static void pauseFollow(RestClient client, String followIndex) throws IOException {     assertOK(client.performRequest(new Request("POST", "/" + followIndex + "/_ccr/pause_follow"))). }
false;protected,static;3;6;;protected static void putAutoFollowPattern(String patternName, String remoteCluster, String indexPattern) throws IOException {     Request putPatternRequest = new Request("PUT", "/_ccr/auto_follow/" + patternName).     putPatternRequest.setJsonEntity("{\"leader_index_patterns\": [\"" + indexPattern + "\"], \"remote_cluster\": \"" + remoteCluster + "\"}").     assertOK(client().performRequest(putPatternRequest)). }
false;protected,static;1;4;;protected static void deleteAutoFollowPattern(String patternName) throws IOException {     Request putPatternRequest = new Request("DELETE", "/_ccr/auto_follow/" + patternName).     assertOK(client().performRequest(putPatternRequest)). }
false;protected,static;1;3;;protected static void unfollow(String followIndex) throws IOException {     assertOK(client().performRequest(new Request("POST", "/" + followIndex + "/_ccr/unfollow"))). }
false;protected,static;3;3;;protected static void verifyDocuments(final String index, final int expectedNumDocs, final String query) throws IOException {     verifyDocuments(index, expectedNumDocs, query, adminClient()). }
false;protected,static;4;21;;protected static void verifyDocuments(final String index, final int expectedNumDocs, final String query, final RestClient client) throws IOException {     final Request request = new Request("GET", "/" + index + "/_search").     request.addParameter("size", Integer.toString(expectedNumDocs)).     request.addParameter("sort", "field:asc").     request.addParameter("q", query).     request.addParameter(TOTAL_HITS_AS_INT_PARAM, "true").     Map<String, ?> response = toMap(client.performRequest(request)).     int numDocs = (int) XContentMapValues.extractValue("hits.total", response).     assertThat(numDocs, equalTo(expectedNumDocs)).     List<?> hits = (List<?>) XContentMapValues.extractValue("hits.hits", response).     assertThat(hits.size(), equalTo(expectedNumDocs)).     for (int i = 0. i < expectedNumDocs. i++) {         int value = (int) XContentMapValues.extractValue("_source.field", (Map<?, ?>) hits.get(i)).         assertThat(i, equalTo(value)).     } }
false;protected,static;2;40;;protected static void verifyCcrMonitoring(final String expectedLeaderIndex, final String expectedFollowerIndex) throws IOException {     Request request = new Request("GET", "/.monitoring-*/_search").     request.setJsonEntity("{\"query\": {\"term\": {\"ccr_stats.leader_index\": \"" + expectedLeaderIndex + "\"}}}").     Map<String, ?> response.     try {         response = toMap(adminClient().performRequest(request)).     } catch (ResponseException e) {         throw new AssertionError("error while searching", e).     }     int followerMaxSeqNo = 0.     int followerMappingVersion = 0.     int followerSettingsVersion = 0.     List<?> hits = (List<?>) XContentMapValues.extractValue("hits.hits", response).     assertThat(hits.size(), greaterThanOrEqualTo(1)).     for (int i = 0. i < hits.size(). i++) {         Map<?, ?> hit = (Map<?, ?>) hits.get(i).         String leaderIndex = (String) XContentMapValues.extractValue("_source.ccr_stats.leader_index", hit).         assertThat(leaderIndex, endsWith(expectedLeaderIndex)).         final String followerIndex = (String) XContentMapValues.extractValue("_source.ccr_stats.follower_index", hit).         assertThat(followerIndex, equalTo(expectedFollowerIndex)).         int foundFollowerMaxSeqNo = (int) XContentMapValues.extractValue("_source.ccr_stats.follower_max_seq_no", hit).         followerMaxSeqNo = Math.max(followerMaxSeqNo, foundFollowerMaxSeqNo).         int foundFollowerMappingVersion = (int) XContentMapValues.extractValue("_source.ccr_stats.follower_mapping_version", hit).         followerMappingVersion = Math.max(followerMappingVersion, foundFollowerMappingVersion).         int foundFollowerSettingsVersion = (int) XContentMapValues.extractValue("_source.ccr_stats.follower_settings_version", hit).         followerSettingsVersion = Math.max(followerSettingsVersion, foundFollowerSettingsVersion).     }     assertThat(followerMaxSeqNo, greaterThan(0)).     assertThat(followerMappingVersion, greaterThan(0)).     assertThat(followerSettingsVersion, greaterThan(0)). }
false;protected,static;0;25;;protected static void verifyAutoFollowMonitoring() throws IOException {     Request request = new Request("GET", "/.monitoring-*/_search").     request.setJsonEntity("{\"query\": {\"term\": {\"type\": \"ccr_auto_follow_stats\"}}}").     Map<String, ?> response.     try {         response = toMap(adminClient().performRequest(request)).     } catch (ResponseException e) {         throw new AssertionError("error while searching", e).     }     int numberOfSuccessfulFollowIndices = 0.     List<?> hits = (List<?>) XContentMapValues.extractValue("hits.hits", response).     assertThat(hits.size(), greaterThanOrEqualTo(1)).     for (int i = 0. i < hits.size(). i++) {         Map<?, ?> hit = (Map<?, ?>) hits.get(i).         int foundNumberOfOperationsReceived = (int) XContentMapValues.extractValue("_source.ccr_auto_follow_stats.number_of_successful_follow_indices", hit).         numberOfSuccessfulFollowIndices = Math.max(numberOfSuccessfulFollowIndices, foundNumberOfOperationsReceived).     }     assertThat(numberOfSuccessfulFollowIndices, greaterThanOrEqualTo(1)). }
false;protected,static;1;3;;protected static Map<String, Object> toMap(Response response) throws IOException {     return toMap(EntityUtils.toString(response.getEntity())). }
false;protected,static;1;3;;protected static Map<String, Object> toMap(String response) {     return XContentHelper.convertToMap(JsonXContent.jsonXContent, response, false). }
false;protected,static;1;10;;protected static void ensureYellow(String index) throws IOException {     Request request = new Request("GET", "/_cluster/health/" + index).     request.addParameter("wait_for_status", "yellow").     request.addParameter("wait_for_active_shards", "1").     request.addParameter("wait_for_no_relocating_shards", "true").     request.addParameter("wait_for_no_initializing_shards", "true").     request.addParameter("timeout", "70s").     request.addParameter("level", "shards").     adminClient().performRequest(request). }
false;protected;0;18;;protected int countCcrNodeTasks() throws IOException {     final Request request = new Request("GET", "/_tasks").     request.addParameter("detailed", "true").     Map<String, Object> rsp1 = toMap(adminClient().performRequest(request)).     Map<?, ?> nodes = (Map<?, ?>) rsp1.get("nodes").     assertThat(nodes.size(), equalTo(1)).     Map<?, ?> node = (Map<?, ?>) nodes.values().iterator().next().     Map<?, ?> nodeTasks = (Map<?, ?>) node.get("tasks").     int numNodeTasks = 0.     for (Map.Entry<?, ?> entry : nodeTasks.entrySet()) {         Map<?, ?> nodeTask = (Map<?, ?>) entry.getValue().         String action = (String) nodeTask.get("action").         if (action.startsWith("xpack/ccr/shard_follow_task")) {             numNodeTasks++.         }     }     return numNodeTasks. }
false;protected,static;2;3;;protected static void createIndex(String name, Settings settings) throws IOException {     createIndex(name, settings, ""). }
false;protected,static;3;5;;protected static void createIndex(String name, Settings settings, String mapping) throws IOException {     final Request request = new Request("PUT", "/" + name).     request.setJsonEntity("{ \"settings\": " + Strings.toString(settings) + ", \"mappings\" : {" + mapping + "} }").     assertOK(adminClient().performRequest(request)). }
false;protected,static;1;4;;protected static boolean indexExists(String index) throws IOException {     Response response = adminClient().performRequest(new Request("HEAD", "/" + index)).     return RestStatus.OK.getStatus() == response.getStatusLine().getStatusCode(). }
false;protected;0;4;;protected RestClient buildLeaderClient() throws IOException {     assert "leader".equals(targetCluster) == false.     return buildClient(System.getProperty("tests.leader_host")). }
false;protected;0;4;;protected RestClient buildMiddleClient() throws IOException {     assert "middle".equals(targetCluster) == false.     return buildClient(System.getProperty("tests.middle_host")). }
false;private;1;6;;private RestClient buildClient(final String url) throws IOException {     int portSeparator = url.lastIndexOf(':').     HttpHost httpHost = new HttpHost(url.substring(0, portSeparator), Integer.parseInt(url.substring(portSeparator + 1)), getProtocol()).     return buildClient(restAdminSettings(), new HttpHost[] { httpHost }). }
