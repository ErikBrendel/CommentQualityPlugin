commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testFollow() {     if ("follow".equals(targetCluster)) {         final Request request = new Request("PUT", "/follower/_ccr/follow").         request.setJsonEntity("{\"remote_cluster\": \"leader_cluster\", \"leader_index\": \"leader\"}").         assertNonCompliantLicense(request).     } }
false;public;0;14;;public void testAutoFollow() throws Exception {     if ("follow".equals(targetCluster)) {         final Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern").         request.setJsonEntity("{\"leader_index_patterns\":[\"*\"], \"remote_cluster\": \"leader_cluster\"}").         final ResponseException e = expectThrows(ResponseException.class, () -> client().performRequest(request)).         final String expected = String.format(Locale.ROOT, "can not fetch remote cluster state as the remote cluster [%s] is not licensed for [ccr]. " + "the license mode [BASIC] on cluster [%s] does not enable [ccr]", "leader_cluster", "leader_cluster").         assertThat(e, hasToString(containsString(expected))).     } }
false;private,static;1;11;;private static void assertNonCompliantLicense(final Request request) {     final ResponseException e = expectThrows(ResponseException.class, () -> client().performRequest(request)).     final String expected = String.format(Locale.ROOT, "can not fetch remote index [%s] metadata as the remote cluster [%s] is not licensed for [ccr]. " + "the license mode [BASIC] on cluster [%s] does not enable [ccr]", "leader_cluster:leader", "leader_cluster", "leader_cluster").     assertThat(e, hasToString(containsString(expected))). }
