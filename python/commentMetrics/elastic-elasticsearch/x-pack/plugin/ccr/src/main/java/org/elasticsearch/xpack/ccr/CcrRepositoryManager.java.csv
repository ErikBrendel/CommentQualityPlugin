commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void doStart() {     updateListener.init(). }
false;protected;0;3;;@Override protected void doStop() { }
false;protected;0;3;;@Override protected void doClose() throws IOException { }
false;private;1;6;;private void putRepository(String repositoryName) {     ActionRequest request = new PutInternalCcrRepositoryRequest(repositoryName, CcrRepository.TYPE).     PlainActionFuture<PutInternalCcrRepositoryAction.PutInternalCcrRepositoryResponse> f = PlainActionFuture.newFuture().     client.execute(PutInternalCcrRepositoryAction.INSTANCE, request, f).     assert f.isDone() : "Should be completed as it is executed synchronously". }
false;private;1;6;;private void deleteRepository(String repositoryName) {     DeleteInternalCcrRepositoryRequest request = new DeleteInternalCcrRepositoryRequest(repositoryName).     PlainActionFuture<DeleteInternalCcrRepositoryAction.DeleteInternalCcrRepositoryResponse> f = PlainActionFuture.newFuture().     client.execute(DeleteInternalCcrRepositoryAction.INSTANCE, request, f).     assert f.isDone() : "Should be completed as it is executed synchronously". }
false;;0;6;;void init() {     Set<String> clusterAliases = buildRemoteClustersDynamicConfig(settings).keySet().     for (String clusterAlias : clusterAliases) {         putRepository(CcrRepository.NAME_PREFIX + clusterAlias).     } }
false;protected;5;10;;@Override protected void updateRemoteCluster(String clusterAlias, List<String> addresses, String proxy, boolean compressionEnabled, TimeValue pingSchedule) {     String repositoryName = CcrRepository.NAME_PREFIX + clusterAlias.     if (addresses.isEmpty()) {         deleteRepository(repositoryName).     } else {         putRepository(repositoryName).     } }
