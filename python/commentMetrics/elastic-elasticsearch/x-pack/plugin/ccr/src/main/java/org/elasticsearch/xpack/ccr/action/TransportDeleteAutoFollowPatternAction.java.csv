commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;protected;1;4;;@Override protected AcknowledgedResponse newResponse(boolean acknowledged) {     return new AcknowledgedResponse(acknowledged). }
false;public;1;4;;@Override public ClusterState execute(ClusterState currentState) throws Exception {     return innerDelete(request, currentState). }
false;protected;3;18;;@Override protected void masterOperation(DeleteAutoFollowPatternAction.Request request, ClusterState state, ActionListener<AcknowledgedResponse> listener) throws Exception {     clusterService.submitStateUpdateTask("put-auto-follow-pattern-" + request.getName(), new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {          @Override         protected AcknowledgedResponse newResponse(boolean acknowledged) {             return new AcknowledgedResponse(acknowledged).         }          @Override         public ClusterState execute(ClusterState currentState) throws Exception {             return innerDelete(request, currentState).         }     }). }
false;static;2;28;;static ClusterState innerDelete(DeleteAutoFollowPatternAction.Request request, ClusterState currentState) {     AutoFollowMetadata currentAutoFollowMetadata = currentState.metaData().custom(AutoFollowMetadata.TYPE).     if (currentAutoFollowMetadata == null) {         throw new ResourceNotFoundException("auto-follow pattern [{}] is missing", request.getName()).     }     Map<String, AutoFollowPattern> patterns = currentAutoFollowMetadata.getPatterns().     AutoFollowPattern autoFollowPatternToRemove = patterns.get(request.getName()).     if (autoFollowPatternToRemove == null) {         throw new ResourceNotFoundException("auto-follow pattern [{}] is missing", request.getName()).     }     final Map<String, AutoFollowPattern> patternsCopy = new HashMap<>(patterns).     final Map<String, List<String>> followedLeaderIndexUUIDSCopy = new HashMap<>(currentAutoFollowMetadata.getFollowedLeaderIndexUUIDs()).     final Map<String, Map<String, String>> headers = new HashMap<>(currentAutoFollowMetadata.getHeaders()).     patternsCopy.remove(request.getName()).     followedLeaderIndexUUIDSCopy.remove(request.getName()).     headers.remove(request.getName()).     AutoFollowMetadata newAutoFollowMetadata = new AutoFollowMetadata(patternsCopy, followedLeaderIndexUUIDSCopy, headers).     ClusterState.Builder newState = ClusterState.builder(currentState).     newState.metaData(MetaData.builder(currentState.getMetaData()).putCustom(AutoFollowMetadata.TYPE, newAutoFollowMetadata).build()).     return newState.build(). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(DeleteAutoFollowPatternAction.Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
