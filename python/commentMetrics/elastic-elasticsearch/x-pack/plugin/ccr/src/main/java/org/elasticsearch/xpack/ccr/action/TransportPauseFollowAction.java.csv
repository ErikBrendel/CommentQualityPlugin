commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;protected;3;31;;@Override protected void masterOperation(PauseFollowAction.Request request, ClusterState state, ActionListener<AcknowledgedResponse> listener) throws Exception {     PersistentTasksCustomMetaData persistentTasksMetaData = state.metaData().custom(PersistentTasksCustomMetaData.TYPE).     if (persistentTasksMetaData == null) {         listener.onFailure(new IllegalArgumentException("no shard follow tasks for [" + request.getFollowIndex() + "]")).         return.     }     List<String> shardFollowTaskIds = persistentTasksMetaData.tasks().stream().filter(persistentTask -> ShardFollowTask.NAME.equals(persistentTask.getTaskName())).filter(persistentTask -> {         ShardFollowTask shardFollowTask = (ShardFollowTask) persistentTask.getParams().         return shardFollowTask.getFollowShardId().getIndexName().equals(request.getFollowIndex()).     }).map(PersistentTasksCustomMetaData.PersistentTask::getId).collect(Collectors.toList()).     if (shardFollowTaskIds.isEmpty()) {         listener.onFailure(new IllegalArgumentException("no shard follow tasks for [" + request.getFollowIndex() + "]")).         return.     }     int i = 0.     final ResponseHandler responseHandler = new ResponseHandler(shardFollowTaskIds.size(), listener).     for (String taskId : shardFollowTaskIds) {         final int taskSlot = i++.         persistentTasksService.sendRemoveRequest(taskId, responseHandler.getActionListener(taskSlot)).     } }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(PauseFollowAction.Request request, ClusterState state) {     return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA_WRITE, request.getFollowIndex()). }
