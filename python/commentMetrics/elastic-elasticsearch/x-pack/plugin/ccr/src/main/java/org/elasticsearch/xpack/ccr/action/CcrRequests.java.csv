commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static ClusterStateRequest metaDataRequest(String leaderIndex) {     ClusterStateRequest clusterStateRequest = new ClusterStateRequest().     clusterStateRequest.clear().     clusterStateRequest.metaData(true).     clusterStateRequest.indices(leaderIndex).     return clusterStateRequest. }
false;public,static;2;7;;public static PutMappingRequest putMappingRequest(String followerIndex, MappingMetaData mappingMetaData) {     PutMappingRequest putMappingRequest = new PutMappingRequest(followerIndex).     putMappingRequest.origin("ccr").     putMappingRequest.type(mappingMetaData.type()).     putMappingRequest.source(mappingMetaData.source().string(), XContentType.JSON).     return putMappingRequest. }
true;public,static;6;35;/**  * Gets an {@link IndexMetaData} of the given index. The mapping version and metadata version of the returned {@link IndexMetaData}  * must be at least the provided {@code mappingVersion} and {@code metadataVersion} respectively.  */ ;/**  * Gets an {@link IndexMetaData} of the given index. The mapping version and metadata version of the returned {@link IndexMetaData}  * must be at least the provided {@code mappingVersion} and {@code metadataVersion} respectively.  */ public static void getIndexMetadata(Client client, Index index, long mappingVersion, long metadataVersion, Supplier<TimeValue> timeoutSupplier, ActionListener<IndexMetaData> listener) {     final ClusterStateRequest request = CcrRequests.metaDataRequest(index.getName()).     if (metadataVersion > 0) {         request.waitForMetaDataVersion(metadataVersion).waitForTimeout(timeoutSupplier.get()).     }     client.admin().cluster().state(request, ActionListener.wrap(response -> {         if (response.getState() == null) {             // timeout on wait_for_metadata_version             assert metadataVersion > 0 : metadataVersion.             if (timeoutSupplier.get().nanos() < 0) {                 listener.onFailure(new IllegalStateException("timeout to get cluster state with" + " metadata version [" + metadataVersion + "], mapping version [" + mappingVersion + "]")).             } else {                 getIndexMetadata(client, index, mappingVersion, metadataVersion, timeoutSupplier, listener).             }         } else {             final MetaData metaData = response.getState().metaData().             final IndexMetaData indexMetaData = metaData.getIndexSafe(index).             if (indexMetaData.getMappingVersion() >= mappingVersion) {                 listener.onResponse(indexMetaData).                 return.             }             if (timeoutSupplier.get().nanos() < 0) {                 listener.onFailure(new IllegalStateException("timeout to get cluster state with mapping version [" + mappingVersion + "]")).             } else {                 // ask for the next version.                 getIndexMetadata(client, index, mappingVersion, metaData.version() + 1, timeoutSupplier, listener).             }         }     }, listener::onFailure)). }
