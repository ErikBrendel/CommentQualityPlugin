commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected PutFollowAction.Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;protected;1;4;;@Override protected PutFollowAction.Response read(StreamInput in) throws IOException {     return new PutFollowAction.Response(in). }
false;protected;3;21;;@Override protected void masterOperation(final PutFollowAction.Request request, final ClusterState state, final ActionListener<PutFollowAction.Response> listener) {     if (ccrLicenseChecker.isCcrAllowed() == false) {         listener.onFailure(LicenseUtils.newComplianceException("ccr")).         return.     }     String remoteCluster = request.getRemoteCluster().     // Validates whether the leader cluster has been configured properly:     client.getRemoteClusterClient(remoteCluster).     String leaderIndex = request.getLeaderIndex().     ccrLicenseChecker.checkRemoteClusterLicenseAndFetchLeaderIndexMetadataAndHistoryUUIDs(client, remoteCluster, leaderIndex, listener::onFailure, (historyUUID, leaderIndexMetaData) -> createFollowerIndex(leaderIndexMetaData, request, listener)). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;public;1;4;;@Override public void onResponse(RestoreService.RestoreCompletionResponse response) {     afterRestoreStarted(clientWithHeaders, request, listener, response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;protected;0;15;;@Override protected void doRun() throws Exception {     restoreService.restoreSnapshot(restoreRequest, new ActionListener<RestoreService.RestoreCompletionResponse>() {          @Override         public void onResponse(RestoreService.RestoreCompletionResponse response) {             afterRestoreStarted(clientWithHeaders, request, listener, response).         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }). }
false;private;3;48;;private void createFollowerIndex(final IndexMetaData leaderIndexMetaData, final PutFollowAction.Request request, final ActionListener<PutFollowAction.Response> listener) {     if (leaderIndexMetaData == null) {         listener.onFailure(new IllegalArgumentException("leader index [" + request.getLeaderIndex() + "] does not exist")).         return.     }     if (IndexSettings.INDEX_SOFT_DELETES_SETTING.get(leaderIndexMetaData.getSettings()) == false) {         listener.onFailure(new IllegalArgumentException("leader index [" + request.getLeaderIndex() + "] does not have soft deletes enabled")).         return.     }     final Settings.Builder settingsBuilder = Settings.builder().put(IndexMetaData.SETTING_INDEX_PROVIDED_NAME, request.getFollowerIndex()).put(CcrSettings.CCR_FOLLOWING_INDEX_SETTING.getKey(), true).     final String leaderClusterRepoName = CcrRepository.NAME_PREFIX + request.getRemoteCluster().     final RestoreSnapshotRequest restoreRequest = new RestoreSnapshotRequest(leaderClusterRepoName, CcrRepository.LATEST).indices(request.getLeaderIndex()).indicesOptions(request.indicesOptions()).renamePattern("^(.*)$").renameReplacement(request.getFollowerIndex()).masterNodeTimeout(request.masterNodeTimeout()).indexSettings(settingsBuilder).     final Client clientWithHeaders = CcrLicenseChecker.wrapClient(this.client, threadPool.getThreadContext().getHeaders()).     threadPool.executor(ThreadPool.Names.SNAPSHOT).execute(new AbstractRunnable() {          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }          @Override         protected void doRun() throws Exception {             restoreService.restoreSnapshot(restoreRequest, new ActionListener<RestoreService.RestoreCompletionResponse>() {                  @Override                 public void onResponse(RestoreService.RestoreCompletionResponse response) {                     afterRestoreStarted(clientWithHeaders, request, listener, response).                 }                  @Override                 public void onFailure(Exception e) {                     listener.onFailure(e).                 }             }).         }     }). }
false;public;1;4;;@Override public void onResponse(PutFollowAction.Response response) {     logger.debug("put follow {} completed with {}", request, response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     logger.debug(() -> new ParameterizedMessage("put follow {} failed during the restore process", request), e). }
false;public;1;15;;@Override public void onResponse(RestoreSnapshotResponse restoreSnapshotResponse) {     RestoreInfo restoreInfo = restoreSnapshotResponse.getRestoreInfo().     if (restoreInfo == null) {         // If restoreInfo is null then it is possible there was a master failure during the         // restore.         listener.onResponse(new PutFollowAction.Response(true, false, false)).     } else if (restoreInfo.failedShards() == 0) {         initiateFollowing(clientWithHeaders, request, listener).     } else {         assert restoreInfo.failedShards() > 0 : "Should have failed shards".         listener.onResponse(new PutFollowAction.Response(true, false, false)).     } }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;private;4;45;;private void afterRestoreStarted(Client clientWithHeaders, PutFollowAction.Request request, ActionListener<PutFollowAction.Response> originalListener, RestoreService.RestoreCompletionResponse response) {     final ActionListener<PutFollowAction.Response> listener.     if (ActiveShardCount.NONE.equals(request.waitForActiveShards())) {         originalListener.onResponse(new PutFollowAction.Response(true, false, false)).         listener = new ActionListener<PutFollowAction.Response>() {              @Override             public void onResponse(PutFollowAction.Response response) {                 logger.debug("put follow {} completed with {}", request, response).             }              @Override             public void onFailure(Exception e) {                 logger.debug(() -> new ParameterizedMessage("put follow {} failed during the restore process", request), e).             }         }.     } else {         listener = originalListener.     }     RestoreClusterStateListener.createAndRegisterListener(clusterService, response, new ActionListener<RestoreSnapshotResponse>() {          @Override         public void onResponse(RestoreSnapshotResponse restoreSnapshotResponse) {             RestoreInfo restoreInfo = restoreSnapshotResponse.getRestoreInfo().             if (restoreInfo == null) {                 // If restoreInfo is null then it is possible there was a master failure during the                 // restore.                 listener.onResponse(new PutFollowAction.Response(true, false, false)).             } else if (restoreInfo.failedShards() == 0) {                 initiateFollowing(clientWithHeaders, request, listener).             } else {                 assert restoreInfo.failedShards() > 0 : "Should have failed shards".                 listener.onResponse(new PutFollowAction.Response(true, false, false)).             }         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }). }
false;private;3;17;;private void initiateFollowing(final Client client, final PutFollowAction.Request request, final ActionListener<PutFollowAction.Response> listener) {     assert request.waitForActiveShards() != ActiveShardCount.DEFAULT : "PutFollowAction does not support DEFAULT.".     FollowParameters parameters = request.getParameters().     ResumeFollowAction.Request resumeFollowRequest = new ResumeFollowAction.Request().     resumeFollowRequest.setFollowerIndex(request.getFollowerIndex()).     resumeFollowRequest.setParameters(new FollowParameters(parameters)).     client.execute(ResumeFollowAction.INSTANCE, resumeFollowRequest, ActionListener.wrap(r -> activeShardsObserver.waitForActiveShards(new String[] { request.getFollowerIndex() }, request.waitForActiveShards(), request.timeout(), result -> listener.onResponse(new PutFollowAction.Response(true, result, r.isAcknowledged())), listener::onFailure), listener::onFailure)). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(final PutFollowAction.Request request, final ClusterState state) {     return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA_WRITE, request.getFollowerIndex()). }
