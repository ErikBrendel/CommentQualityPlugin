commented;modifiers;parameterAmount;loc;comment;code
false;static;1;11;;static boolean preFlight(final Engine.Operation operation) {     /*          * We assert here so that this goes uncaught in unit tests and fails nodes in standalone tests (we want a harsh failure so that we          * do not have a situation where a shard fails and is recovered elsewhere and a test subsequently passes). We throw an exception so          * that we also prevent issues in production code.          */     assert operation.seqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO.     assert (operation.origin() == Engine.Operation.Origin.PRIMARY) == (operation.versionType() == VersionType.EXTERNAL) : "invalid version_type in a following engine. version_type=" + operation.versionType() + "origin=" + operation.origin().     return true. }
false;static;2;5;;static boolean assertPrimaryIncomingSequenceNumber(final Engine.Operation.Origin origin, final long seqNo) {     // sequence number should be set when operation origin is primary     assert seqNo != SequenceNumbers.UNASSIGNED_SEQ_NO : "primary operations on a following index must have an assigned sequence number".     return true. }
