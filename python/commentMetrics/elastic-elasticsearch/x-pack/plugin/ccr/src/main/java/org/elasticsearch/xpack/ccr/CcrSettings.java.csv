commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;12;/**  * The settings defined by CCR.  *  * @return the settings  */ ;/**  * The settings defined by CCR.  *  * @return the settings  */ public static List<Setting<?>> getSettings() {     return Arrays.asList(XPackSettings.CCR_ENABLED_SETTING, CCR_FOLLOWING_INDEX_SETTING, RECOVERY_MAX_BYTES_PER_SECOND, INDICES_RECOVERY_ACTION_TIMEOUT_SETTING, INDICES_RECOVERY_ACTIVITY_TIMEOUT_SETTING, CCR_AUTO_FOLLOW_WAIT_FOR_METADATA_TIMEOUT, RECOVERY_CHUNK_SIZE, INDICES_RECOVERY_MAX_CONCURRENT_FILE_CHUNKS_SETTING, CCR_WAIT_FOR_METADATA_TIMEOUT). }
false;private;1;3;;private void setChunkSize(ByteSizeValue chunkSize) {     this.chunkSize = chunkSize. }
false;private;1;3;;private void setMaxConcurrentFileChunks(int maxConcurrentFileChunks) {     this.maxConcurrentFileChunks = maxConcurrentFileChunks. }
false;private;1;3;;private void setMaxBytesPerSec(ByteSizeValue maxBytesPerSec) {     ccrRateLimiter.setMBPerSec(maxBytesPerSec). }
false;private;1;3;;private void setRecoveryActivityTimeout(TimeValue recoveryActivityTimeout) {     this.recoveryActivityTimeout = recoveryActivityTimeout. }
false;private;1;3;;private void setRecoveryActionTimeout(TimeValue recoveryActionTimeout) {     this.recoveryActionTimeout = recoveryActionTimeout. }
false;public;0;3;;public ByteSizeValue getChunkSize() {     return chunkSize. }
false;public;0;3;;public int getMaxConcurrentFileChunks() {     return maxConcurrentFileChunks. }
false;public;0;3;;public CombinedRateLimiter getRateLimiter() {     return ccrRateLimiter. }
false;public;0;3;;public TimeValue getRecoveryActivityTimeout() {     return recoveryActivityTimeout. }
false;public;0;3;;public TimeValue getRecoveryActionTimeout() {     return recoveryActionTimeout. }
