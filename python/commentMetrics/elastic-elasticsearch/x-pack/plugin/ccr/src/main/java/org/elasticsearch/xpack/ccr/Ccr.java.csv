commented;modifiers;parameterAmount;loc;comment;code
false;public;9;29;;@Override public Collection<Object> createComponents(final Client client, final ClusterService clusterService, final ThreadPool threadPool, final ResourceWatcherService resourceWatcherService, final ScriptService scriptService, final NamedXContentRegistry xContentRegistry, final Environment environment, final NodeEnvironment nodeEnvironment, final NamedWriteableRegistry namedWriteableRegistry) {     this.client = client.     if (enabled == false) {         return emptyList().     }     CcrSettings ccrSettings = new CcrSettings(settings, clusterService.getClusterSettings()).     this.ccrSettings.set(ccrSettings).     this.threadPool.set(threadPool).     CcrRestoreSourceService restoreSourceService = new CcrRestoreSourceService(threadPool, ccrSettings).     this.restoreSourceService.set(restoreSourceService).     return Arrays.asList(ccrLicenseChecker, restoreSourceService, new CcrRepositoryManager(settings, clusterService, client), new AutoFollowCoordinator(settings, client, clusterService, ccrLicenseChecker, threadPool::relativeTimeInMillis, threadPool::absoluteTimeInMillis)). }
false;public;4;7;;@Override public List<PersistentTasksExecutor<?>> getPersistentTasksExecutor(ClusterService clusterService, ThreadPool threadPool, Client client, SettingsModule settingsModule) {     return Collections.singletonList(new ShardFollowTasksExecutor(client, threadPool, clusterService, settingsModule)). }
false;public;0;33;;public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {     if (enabled == false) {         return emptyList().     }     return Arrays.asList(// internal actions     new ActionHandler<>(BulkShardOperationsAction.INSTANCE, TransportBulkShardOperationsAction.class), new ActionHandler<>(ShardChangesAction.INSTANCE, ShardChangesAction.TransportAction.class), new ActionHandler<>(PutInternalCcrRepositoryAction.INSTANCE, PutInternalCcrRepositoryAction.TransportPutInternalRepositoryAction.class), new ActionHandler<>(DeleteInternalCcrRepositoryAction.INSTANCE, DeleteInternalCcrRepositoryAction.TransportDeleteInternalRepositoryAction.class), new ActionHandler<>(PutCcrRestoreSessionAction.INSTANCE, PutCcrRestoreSessionAction.TransportPutCcrRestoreSessionAction.class), new ActionHandler<>(ClearCcrRestoreSessionAction.INSTANCE, ClearCcrRestoreSessionAction.TransportDeleteCcrRestoreSessionAction.class), new ActionHandler<>(GetCcrRestoreFileChunkAction.INSTANCE, GetCcrRestoreFileChunkAction.TransportGetCcrRestoreFileChunkAction.class), // stats action     new ActionHandler<>(FollowStatsAction.INSTANCE, TransportFollowStatsAction.class), new ActionHandler<>(CcrStatsAction.INSTANCE, TransportCcrStatsAction.class), new ActionHandler<>(FollowInfoAction.INSTANCE, TransportFollowInfoAction.class), // follow actions     new ActionHandler<>(PutFollowAction.INSTANCE, TransportPutFollowAction.class), new ActionHandler<>(ResumeFollowAction.INSTANCE, TransportResumeFollowAction.class), new ActionHandler<>(PauseFollowAction.INSTANCE, TransportPauseFollowAction.class), new ActionHandler<>(UnfollowAction.INSTANCE, TransportUnfollowAction.class), // auto-follow actions     new ActionHandler<>(DeleteAutoFollowPatternAction.INSTANCE, TransportDeleteAutoFollowPatternAction.class), new ActionHandler<>(PutAutoFollowPatternAction.INSTANCE, TransportPutAutoFollowPatternAction.class), new ActionHandler<>(GetAutoFollowPatternAction.INSTANCE, TransportGetAutoFollowPatternAction.class)). }
false;public;7;23;;public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings, IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver, Supplier<DiscoveryNodes> nodesInCluster) {     if (enabled == false) {         return emptyList().     }     return Arrays.asList(// stats API     new RestFollowStatsAction(settings, restController), new RestCcrStatsAction(settings, restController), new RestFollowInfoAction(settings, restController), // follow APIs     new RestPutFollowAction(settings, restController), new RestResumeFollowAction(settings, restController), new RestPauseFollowAction(settings, restController), new RestUnfollowAction(settings, restController), // auto-follow APIs     new RestDeleteAutoFollowPatternAction(settings, restController), new RestPutAutoFollowPatternAction(settings, restController), new RestGetAutoFollowPatternAction(settings, restController)). }
false;public;0;11;;public List<NamedWriteableRegistry.Entry> getNamedWriteables() {     return Arrays.asList(// Persistent action requests     new NamedWriteableRegistry.Entry(PersistentTaskParams.class, ShardFollowTask.NAME, ShardFollowTask::readFrom), // Task statuses     new NamedWriteableRegistry.Entry(Task.Status.class, ShardFollowNodeTaskStatus.STATUS_PARSER_NAME, ShardFollowNodeTaskStatus::new)). }
false;public;0;12;;public List<NamedXContentRegistry.Entry> getNamedXContent() {     return Arrays.asList(// Persistent action requests     new NamedXContentRegistry.Entry(PersistentTaskParams.class, new ParseField(ShardFollowTask.NAME), ShardFollowTask::fromXContent), // Task statuses     new NamedXContentRegistry.Entry(ShardFollowNodeTaskStatus.class, new ParseField(ShardFollowNodeTaskStatus.STATUS_PARSER_NAME), ShardFollowNodeTaskStatus::fromXContent)). }
true;public;0;3;/**  * The settings defined by CCR.  *  * @return the settings  */ ;/**  * The settings defined by CCR.  *  * @return the settings  */ public List<Setting<?>> getSettings() {     return CcrSettings.getSettings(). }
true;public;1;7;/**  * The optional engine factory for CCR. This method inspects the index settings for the {@link CcrSettings#CCR_FOLLOWING_INDEX_SETTING}  * setting to determine whether or not the engine implementation should be a following engine.  *  * @return the optional engine factory  */ ;/**  * The optional engine factory for CCR. This method inspects the index settings for the {@link CcrSettings#CCR_FOLLOWING_INDEX_SETTING}  * setting to determine whether or not the engine implementation should be a following engine.  *  * @return the optional engine factory  */ public Optional<EngineFactory> getEngineFactory(final IndexSettings indexSettings) {     if (CCR_FOLLOWING_INDEX_SETTING.get(indexSettings.getSettings())) {         return Optional.of(new FollowingEngineFactory()).     } else {         return Optional.empty().     } }
false;public;1;7;;public List<ExecutorBuilder<?>> getExecutorBuilders(Settings settings) {     if (enabled == false) {         return Collections.emptyList().     }     return Collections.singletonList(new FixedExecutorBuilder(settings, CCR_THREAD_POOL_NAME, 32, 100, "xpack.ccr.ccr_thread_pool")). }
false;public;2;6;;@Override public Map<String, Repository.Factory> getInternalRepositories(Environment env, NamedXContentRegistry namedXContentRegistry) {     Repository.Factory repositoryFactory = (metadata) -> new CcrRepository(metadata, client, ccrLicenseChecker, settings, ccrSettings.get(), threadPool.get()).     return Collections.singletonMap(CcrRepository.TYPE, repositoryFactory). }
false;public;1;6;;@Override public void onIndexModule(IndexModule indexModule) {     if (enabled) {         indexModule.addIndexEventListener(this.restoreSourceService.get()).     } }
false;public;0;8;;@Override public Collection<Module> createGuiceModules() {     if (transportClientMode) {         return Collections.emptyList().     }     return Collections.singleton(b -> XPackPlugin.bindFeatureSet(b, CCRFeatureSet.class)). }
false;protected;0;1;;protected XPackLicenseState getLicenseState() {     return XPackPlugin.getSharedLicenseState(). }
false;public;0;4;;@Override public Collection<MappingRequestValidator> mappingRequestValidators() {     return Collections.singletonList(CcrRequests.CCR_PUT_MAPPING_REQUEST_VALIDATOR). }
