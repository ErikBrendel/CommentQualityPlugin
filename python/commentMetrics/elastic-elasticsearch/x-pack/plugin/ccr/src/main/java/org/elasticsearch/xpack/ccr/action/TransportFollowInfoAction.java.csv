commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected FollowInfoAction.Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;protected;1;4;;@Override protected FollowInfoAction.Response read(StreamInput in) throws IOException {     return new FollowInfoAction.Response(in). }
false;protected;3;11;;@Override protected void masterOperation(FollowInfoAction.Request request, ClusterState state, ActionListener<FollowInfoAction.Response> listener) throws Exception {     List<String> concreteFollowerIndices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.STRICT_EXPAND_OPEN_CLOSED, request.getFollowerIndices())).     List<FollowerInfo> followerInfos = getFollowInfos(concreteFollowerIndices, state).     listener.onResponse(new FollowInfoAction.Response(followerInfos)). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(FollowInfoAction.Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ). }
false;static;2;43;;static List<FollowerInfo> getFollowInfos(List<String> concreteFollowerIndices, ClusterState state) {     List<FollowerInfo> followerInfos = new ArrayList<>().     PersistentTasksCustomMetaData persistentTasks = state.metaData().custom(PersistentTasksCustomMetaData.TYPE).     for (String index : concreteFollowerIndices) {         IndexMetaData indexMetaData = state.metaData().index(index).         Map<String, String> ccrCustomData = indexMetaData.getCustomData(Ccr.CCR_CUSTOM_METADATA_KEY).         if (ccrCustomData != null) {             Optional<ShardFollowTask> result.             if (persistentTasks != null) {                 result = persistentTasks.findTasks(ShardFollowTask.NAME, task -> true).stream().map(task -> (ShardFollowTask) task.getParams()).filter(shardFollowTask -> index.equals(shardFollowTask.getFollowShardId().getIndexName())).findAny().             } else {                 result = Optional.empty().             }             String followerIndex = indexMetaData.getIndex().getName().             String remoteCluster = ccrCustomData.get(Ccr.CCR_CUSTOM_METADATA_REMOTE_CLUSTER_NAME_KEY).             String leaderIndex = ccrCustomData.get(Ccr.CCR_CUSTOM_METADATA_LEADER_INDEX_NAME_KEY).             if (result.isPresent()) {                 ShardFollowTask params = result.get().                 FollowParameters followParameters = new FollowParameters().                 followParameters.setMaxOutstandingReadRequests(params.getMaxOutstandingReadRequests()).                 followParameters.setMaxOutstandingWriteRequests(params.getMaxOutstandingWriteRequests()).                 followParameters.setMaxReadRequestOperationCount(params.getMaxReadRequestOperationCount()).                 followParameters.setMaxWriteRequestOperationCount(params.getMaxWriteRequestOperationCount()).                 followParameters.setMaxReadRequestSize(params.getMaxReadRequestSize()).                 followParameters.setMaxWriteRequestSize(params.getMaxWriteRequestSize()).                 followParameters.setMaxWriteBufferCount(params.getMaxWriteBufferCount()).                 followParameters.setMaxWriteBufferSize(params.getMaxWriteBufferSize()).                 followParameters.setMaxRetryDelay(params.getMaxRetryDelay()).                 followParameters.setReadPollTimeout(params.getReadPollTimeout()).                 followerInfos.add(new FollowerInfo(followerIndex, remoteCluster, leaderIndex, Status.ACTIVE, followParameters)).             } else {                 followerInfos.add(new FollowerInfo(followerIndex, remoteCluster, leaderIndex, Status.PAUSED, null)).             }         }     }     return followerInfos. }
