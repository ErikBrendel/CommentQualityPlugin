commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected GetAutoFollowPatternAction.Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;protected;1;4;;@Override protected GetAutoFollowPatternAction.Response read(StreamInput in) throws IOException {     return new GetAutoFollowPatternAction.Response(in). }
false;protected;3;7;;@Override protected void masterOperation(GetAutoFollowPatternAction.Request request, ClusterState state, ActionListener<GetAutoFollowPatternAction.Response> listener) throws Exception {     Map<String, AutoFollowPattern> autoFollowPatterns = getAutoFollowPattern(state.metaData(), request.getName()).     listener.onResponse(new GetAutoFollowPatternAction.Response(autoFollowPatterns)). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(GetAutoFollowPatternAction.Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ). }
false;static;2;20;;static Map<String, AutoFollowPattern> getAutoFollowPattern(MetaData metaData, String name) {     AutoFollowMetadata autoFollowMetadata = metaData.custom(AutoFollowMetadata.TYPE).     if (autoFollowMetadata == null) {         if (name == null) {             return Collections.emptyMap().         } else {             throw new ResourceNotFoundException("auto-follow pattern [{}] is missing", name).         }     }     if (name == null) {         return autoFollowMetadata.getPatterns().     }     AutoFollowPattern autoFollowPattern = autoFollowMetadata.getPatterns().get(name).     if (autoFollowPattern == null) {         throw new ResourceNotFoundException("auto-follow pattern [{}] is missing", name).     }     return Collections.singletonMap(name, autoFollowPattern). }
