commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return Ccr.CCR_THREAD_POOL_NAME. }
false;protected;0;4;;@Override protected CcrStatsAction.Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;protected;1;4;;@Override protected CcrStatsAction.Response read(StreamInput in) throws IOException {     return new CcrStatsAction.Response(in). }
false;protected;3;8;;@Override protected void doExecute(Task task, CcrStatsAction.Request request, ActionListener<CcrStatsAction.Response> listener) {     if (ccrLicenseChecker.isCcrAllowed() == false) {         listener.onFailure(LicenseUtils.newComplianceException("ccr")).         return.     }     super.doExecute(task, request, listener). }
false;protected;3;13;;@Override protected void masterOperation(CcrStatsAction.Request request, ClusterState state, ActionListener<CcrStatsAction.Response> listener) throws Exception {     CheckedConsumer<FollowStatsAction.StatsResponses, Exception> handler = statsResponse -> {         AutoFollowStats stats = autoFollowCoordinator.getStats().         listener.onResponse(new CcrStatsAction.Response(stats, statsResponse)).     }.     FollowStatsAction.StatsRequest statsRequest = new FollowStatsAction.StatsRequest().     client.execute(FollowStatsAction.INSTANCE, statsRequest, ActionListener.wrap(handler, listener::onFailure)). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(CcrStatsAction.Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ). }
