# id;timestamp;commentText;codeText;commentWords;codeWords
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1540486836;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1540912197;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1541418702;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1541419698;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1541572724;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1541643651;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1541645998;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1544572729;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1545314884;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1546927432;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1549382719;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId__            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request.getParameters(),_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,get,parameters,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1550064853;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId__            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request.getParameters(),_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,get,parameters,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1550243660;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId__            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request.getParameters(),_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,get,parameters,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> listener) throws IOException;1551124618;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> listener) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final ResponseHandler handler = new ResponseHandler(numShards, listener)__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int shardId = 0_ shardId < numShards_ shardId++) {_            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId__            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request.getParameters(),_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask, handler.getActionListener(shardId))__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,listener,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,response,handler,handler,new,response,handler,num,shards,listener,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,shard,id,0,shard,id,num,shards,shard,id,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,get,parameters,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,handler,get,action,listener,shard,id
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> handler) throws IOException;1538170812;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> handler) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final AtomicInteger counter = new AtomicInteger(numShards)__        final AtomicReferenceArray<Object> responses = new AtomicReferenceArray<>(followIndexMetadata.getNumberOfShards())__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int i = 0_ i < numShards_ i++) {_            final int shardId = i__            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId__            Map<String, String> ccrIndexMetadata = followIndexMetadata.getCustomData(Ccr.CCR_CUSTOM_METADATA_KEY)__            String[] recordedLeaderShardHistoryUUIDs = extractIndexShardHistoryUUIDs(ccrIndexMetadata)__            String recordedLeaderShardHistoryUUID = recordedLeaderShardHistoryUUIDs[shardId]___            final ShardFollowTask shardFollowTask =  createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, recordedLeaderShardHistoryUUID, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask,_                    new ActionListener<PersistentTasksCustomMetaData.PersistentTask<ShardFollowTask>>() {_                        @Override_                        public void onResponse(PersistentTasksCustomMetaData.PersistentTask<ShardFollowTask> task) {_                            responses.set(shardId, task)__                            finalizeResponse()__                        }__                        @Override_                        public void onFailure(Exception e) {_                            responses.set(shardId, e)__                            finalizeResponse()__                        }__                        void finalizeResponse() {_                            Exception error = null__                            if (counter.decrementAndGet() == 0) {_                                for (int j = 0_ j < responses.length()_ j++) {_                                    Object response = responses.get(j)__                                    if (response instanceof Exception) {_                                        if (error == null) {_                                            error = (Exception) response__                                        } else {_                                            error.addSuppressed((Throwable) response)__                                        }_                                    }_                                }__                                if (error == null) {_                                    _                                    handler.onResponse(new AcknowledgedResponse(true))__                                } else {_                                    _                                    handler.onFailure(error)__                                }_                            }_                        }_                    }_            )__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,handler,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,atomic,integer,counter,new,atomic,integer,num,shards,final,atomic,reference,array,object,responses,new,atomic,reference,array,follow,index,metadata,get,number,of,shards,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,i,0,i,num,shards,i,final,int,shard,id,i,string,task,id,follow,index,metadata,get,index,uuid,shard,id,map,string,string,ccr,index,metadata,follow,index,metadata,get,custom,data,ccr,string,recorded,leader,shard,history,uuids,extract,index,shard,history,uuids,ccr,index,metadata,string,recorded,leader,shard,history,uuid,recorded,leader,shard,history,uuids,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,recorded,leader,shard,history,uuid,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,new,action,listener,persistent,tasks,custom,meta,data,persistent,task,shard,follow,task,override,public,void,on,response,persistent,tasks,custom,meta,data,persistent,task,shard,follow,task,task,responses,set,shard,id,task,finalize,response,override,public,void,on,failure,exception,e,responses,set,shard,id,e,finalize,response,void,finalize,response,exception,error,null,if,counter,decrement,and,get,0,for,int,j,0,j,responses,length,j,object,response,responses,get,j,if,response,instanceof,exception,if,error,null,error,exception,response,else,error,add,suppressed,throwable,response,if,error,null,handler,on,response,new,acknowledged,response,true,else,handler,on,failure,error
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> handler) throws IOException;1538424609;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> handler) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final AtomicInteger counter = new AtomicInteger(numShards)__        final AtomicReferenceArray<Object> responses = new AtomicReferenceArray<>(followIndexMetadata.getNumberOfShards())__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int i = 0_ i < numShards_ i++) {_            final int shardId = i__            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId__            Map<String, String> ccrIndexMetadata = followIndexMetadata.getCustomData(Ccr.CCR_CUSTOM_METADATA_KEY)__            String[] recordedLeaderShardHistoryUUIDs = extractIndexShardHistoryUUIDs(ccrIndexMetadata)__            String recordedLeaderShardHistoryUUID = recordedLeaderShardHistoryUUIDs[shardId]___            final ShardFollowTask shardFollowTask =  createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, recordedLeaderShardHistoryUUID, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask,_                    new ActionListener<PersistentTasksCustomMetaData.PersistentTask<ShardFollowTask>>() {_                        @Override_                        public void onResponse(PersistentTasksCustomMetaData.PersistentTask<ShardFollowTask> task) {_                            responses.set(shardId, task)__                            finalizeResponse()__                        }__                        @Override_                        public void onFailure(Exception e) {_                            responses.set(shardId, e)__                            finalizeResponse()__                        }__                        void finalizeResponse() {_                            Exception error = null__                            if (counter.decrementAndGet() == 0) {_                                for (int j = 0_ j < responses.length()_ j++) {_                                    Object response = responses.get(j)__                                    if (response instanceof Exception) {_                                        if (error == null) {_                                            error = (Exception) response__                                        } else {_                                            error.addSuppressed((Throwable) response)__                                        }_                                    }_                                }__                                if (error == null) {_                                    _                                    handler.onResponse(new AcknowledgedResponse(true))__                                } else {_                                    _                                    handler.onFailure(error)__                                }_                            }_                        }_                    }_            )__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,handler,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,atomic,integer,counter,new,atomic,integer,num,shards,final,atomic,reference,array,object,responses,new,atomic,reference,array,follow,index,metadata,get,number,of,shards,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,i,0,i,num,shards,i,final,int,shard,id,i,string,task,id,follow,index,metadata,get,index,uuid,shard,id,map,string,string,ccr,index,metadata,follow,index,metadata,get,custom,data,ccr,string,recorded,leader,shard,history,uuids,extract,index,shard,history,uuids,ccr,index,metadata,string,recorded,leader,shard,history,uuid,recorded,leader,shard,history,uuids,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,recorded,leader,shard,history,uuid,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,new,action,listener,persistent,tasks,custom,meta,data,persistent,task,shard,follow,task,override,public,void,on,response,persistent,tasks,custom,meta,data,persistent,task,shard,follow,task,task,responses,set,shard,id,task,finalize,response,override,public,void,on,failure,exception,e,responses,set,shard,id,e,finalize,response,void,finalize,response,exception,error,null,if,counter,decrement,and,get,0,for,int,j,0,j,responses,length,j,object,response,responses,get,j,if,response,instanceof,exception,if,error,null,error,exception,response,else,error,add,suppressed,throwable,response,if,error,null,handler,on,response,new,acknowledged,response,true,else,handler,on,failure,error
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> handler) throws IOException;1538509426;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> handler) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final AtomicInteger counter = new AtomicInteger(numShards)__        final AtomicReferenceArray<Object> responses = new AtomicReferenceArray<>(followIndexMetadata.getNumberOfShards())__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int i = 0_ i < numShards_ i++) {_            final int shardId = i__            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask,_                    new ActionListener<PersistentTasksCustomMetaData.PersistentTask<ShardFollowTask>>() {_                        @Override_                        public void onResponse(PersistentTasksCustomMetaData.PersistentTask<ShardFollowTask> task) {_                            responses.set(shardId, task)__                            finalizeResponse()__                        }__                        @Override_                        public void onFailure(Exception e) {_                            responses.set(shardId, e)__                            finalizeResponse()__                        }__                        void finalizeResponse() {_                            Exception error = null__                            if (counter.decrementAndGet() == 0) {_                                for (int j = 0_ j < responses.length()_ j++) {_                                    Object response = responses.get(j)__                                    if (response instanceof Exception) {_                                        if (error == null) {_                                            error = (Exception) response__                                        } else {_                                            error.addSuppressed((Throwable) response)__                                        }_                                    }_                                }__                                if (error == null) {_                                    _                                    handler.onResponse(new AcknowledgedResponse(true))__                                } else {_                                    _                                    handler.onFailure(error)__                                }_                            }_                        }_                    }_            )__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,handler,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,atomic,integer,counter,new,atomic,integer,num,shards,final,atomic,reference,array,object,responses,new,atomic,reference,array,follow,index,metadata,get,number,of,shards,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,i,0,i,num,shards,i,final,int,shard,id,i,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,new,action,listener,persistent,tasks,custom,meta,data,persistent,task,shard,follow,task,override,public,void,on,response,persistent,tasks,custom,meta,data,persistent,task,shard,follow,task,task,responses,set,shard,id,task,finalize,response,override,public,void,on,failure,exception,e,responses,set,shard,id,e,finalize,response,void,finalize,response,exception,error,null,if,counter,decrement,and,get,0,for,int,j,0,j,responses,length,j,object,response,responses,get,j,if,response,instanceof,exception,if,error,null,error,exception,response,else,error,add,suppressed,throwable,response,if,error,null,handler,on,response,new,acknowledged,response,true,else,handler,on,failure,error
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> handler) throws IOException;1539951844;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> handler) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final AtomicInteger counter = new AtomicInteger(numShards)__        final AtomicReferenceArray<Object> responses = new AtomicReferenceArray<>(followIndexMetadata.getNumberOfShards())__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int i = 0_ i < numShards_ i++) {_            final int shardId = i__            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask,_                    new ActionListener<PersistentTasksCustomMetaData.PersistentTask<ShardFollowTask>>() {_                        @Override_                        public void onResponse(PersistentTasksCustomMetaData.PersistentTask<ShardFollowTask> task) {_                            responses.set(shardId, task)__                            finalizeResponse()__                        }__                        @Override_                        public void onFailure(Exception e) {_                            responses.set(shardId, e)__                            finalizeResponse()__                        }__                        void finalizeResponse() {_                            Exception error = null__                            if (counter.decrementAndGet() == 0) {_                                for (int j = 0_ j < responses.length()_ j++) {_                                    Object response = responses.get(j)__                                    if (response instanceof Exception) {_                                        if (error == null) {_                                            error = (Exception) response__                                        } else {_                                            error.addSuppressed((Throwable) response)__                                        }_                                    }_                                }__                                if (error == null) {_                                    _                                    handler.onResponse(new AcknowledgedResponse(true))__                                } else {_                                    _                                    handler.onFailure(error)__                                }_                            }_                        }_                    }_            )__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,handler,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,atomic,integer,counter,new,atomic,integer,num,shards,final,atomic,reference,array,object,responses,new,atomic,reference,array,follow,index,metadata,get,number,of,shards,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,i,0,i,num,shards,i,final,int,shard,id,i,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,new,action,listener,persistent,tasks,custom,meta,data,persistent,task,shard,follow,task,override,public,void,on,response,persistent,tasks,custom,meta,data,persistent,task,shard,follow,task,task,responses,set,shard,id,task,finalize,response,override,public,void,on,failure,exception,e,responses,set,shard,id,e,finalize,response,void,finalize,response,exception,error,null,if,counter,decrement,and,get,0,for,int,j,0,j,responses,length,j,object,response,responses,get,j,if,response,instanceof,exception,if,error,null,error,exception,response,else,error,add,suppressed,throwable,response,if,error,null,handler,on,response,new,acknowledged,response,true,else,handler,on,failure,error
TransportResumeFollowAction -> void start(             ResumeFollowAction.Request request,             String clusterNameAlias,             IndexMetaData leaderIndexMetadata,             IndexMetaData followIndexMetadata,             String[] leaderIndexHistoryUUIDs,             ActionListener<AcknowledgedResponse> handler) throws IOException;1540313026;Performs validation on the provided leader and follow {@link IndexMetaData} instances and then_creates a persistent task for each leader primary shard. This persistent tasks track changes in the leader_shard and replicate these changes to a follower shard.__Currently the following validation is performed:_<ul>_<li>The leader index and follow index need to have the same number of primary shards</li>_</ul>;void start(_            ResumeFollowAction.Request request,_            String clusterNameAlias,_            IndexMetaData leaderIndexMetadata,_            IndexMetaData followIndexMetadata,_            String[] leaderIndexHistoryUUIDs,_            ActionListener<AcknowledgedResponse> handler) throws IOException {__        MapperService mapperService = followIndexMetadata != null ? indicesService.createIndexMapperService(followIndexMetadata) : null__        validate(request, leaderIndexMetadata, followIndexMetadata, leaderIndexHistoryUUIDs, mapperService)__        final int numShards = followIndexMetadata.getNumberOfShards()__        final AtomicInteger counter = new AtomicInteger(numShards)__        final AtomicReferenceArray<Object> responses = new AtomicReferenceArray<>(followIndexMetadata.getNumberOfShards())__        Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream()_                .filter(e -> ShardFollowTask.HEADER_FILTERS.contains(e.getKey()))_                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))___        for (int i = 0_ i < numShards_ i++) {_            final int shardId = i__            String taskId = followIndexMetadata.getIndexUUID() + "-" + shardId___            final ShardFollowTask shardFollowTask = createShardFollowTask(shardId, clusterNameAlias, request,_                leaderIndexMetadata, followIndexMetadata, filteredHeaders)__            persistentTasksService.sendStartRequest(taskId, ShardFollowTask.NAME, shardFollowTask,_                    new ActionListener<PersistentTasksCustomMetaData.PersistentTask<ShardFollowTask>>() {_                        @Override_                        public void onResponse(PersistentTasksCustomMetaData.PersistentTask<ShardFollowTask> task) {_                            responses.set(shardId, task)__                            finalizeResponse()__                        }__                        @Override_                        public void onFailure(Exception e) {_                            responses.set(shardId, e)__                            finalizeResponse()__                        }__                        void finalizeResponse() {_                            Exception error = null__                            if (counter.decrementAndGet() == 0) {_                                for (int j = 0_ j < responses.length()_ j++) {_                                    Object response = responses.get(j)__                                    if (response instanceof Exception) {_                                        if (error == null) {_                                            error = (Exception) response__                                        } else {_                                            error.addSuppressed((Throwable) response)__                                        }_                                    }_                                }__                                if (error == null) {_                                    _                                    handler.onResponse(new AcknowledgedResponse(true))__                                } else {_                                    _                                    handler.onFailure(error)__                                }_                            }_                        }_                    }_            )__        }_    };performs,validation,on,the,provided,leader,and,follow,link,index,meta,data,instances,and,then,creates,a,persistent,task,for,each,leader,primary,shard,this,persistent,tasks,track,changes,in,the,leader,shard,and,replicate,these,changes,to,a,follower,shard,currently,the,following,validation,is,performed,ul,li,the,leader,index,and,follow,index,need,to,have,the,same,number,of,primary,shards,li,ul;void,start,resume,follow,action,request,request,string,cluster,name,alias,index,meta,data,leader,index,metadata,index,meta,data,follow,index,metadata,string,leader,index,history,uuids,action,listener,acknowledged,response,handler,throws,ioexception,mapper,service,mapper,service,follow,index,metadata,null,indices,service,create,index,mapper,service,follow,index,metadata,null,validate,request,leader,index,metadata,follow,index,metadata,leader,index,history,uuids,mapper,service,final,int,num,shards,follow,index,metadata,get,number,of,shards,final,atomic,integer,counter,new,atomic,integer,num,shards,final,atomic,reference,array,object,responses,new,atomic,reference,array,follow,index,metadata,get,number,of,shards,map,string,string,filtered,headers,thread,pool,get,thread,context,get,headers,entry,set,stream,filter,e,shard,follow,task,contains,e,get,key,collect,collectors,to,map,map,entry,get,key,map,entry,get,value,for,int,i,0,i,num,shards,i,final,int,shard,id,i,string,task,id,follow,index,metadata,get,index,uuid,shard,id,final,shard,follow,task,shard,follow,task,create,shard,follow,task,shard,id,cluster,name,alias,request,leader,index,metadata,follow,index,metadata,filtered,headers,persistent,tasks,service,send,start,request,task,id,shard,follow,task,name,shard,follow,task,new,action,listener,persistent,tasks,custom,meta,data,persistent,task,shard,follow,task,override,public,void,on,response,persistent,tasks,custom,meta,data,persistent,task,shard,follow,task,task,responses,set,shard,id,task,finalize,response,override,public,void,on,failure,exception,e,responses,set,shard,id,e,finalize,response,void,finalize,response,exception,error,null,if,counter,decrement,and,get,0,for,int,j,0,j,responses,length,j,object,response,responses,get,j,if,response,instanceof,exception,if,error,null,error,exception,response,else,error,add,suppressed,throwable,response,if,error,null,handler,on,response,new,acknowledged,response,true,else,handler,on,failure,error
