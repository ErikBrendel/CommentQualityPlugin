# id;timestamp;commentText;codeText;commentWords;codeWords
FollowStatsIT -> public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException;1547729876;Previously we would throw a NullPointerException when there was no persistent tasks metadata in the cluster state. This tests_maintains that we do not make this mistake again.__@throws InterruptedException if we are interrupted waiting on the latch to countdown;public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException {_        final ClusterStateResponse response = client().admin().cluster().state(new ClusterStateRequest()).actionGet()__        assertNull(response.getState().metaData().custom(PersistentTasksCustomMetaData.TYPE))__        final AtomicBoolean onResponse = new AtomicBoolean()__        final CountDownLatch latch = new CountDownLatch(1)__        client().execute(_                FollowStatsAction.INSTANCE,_                new FollowStatsAction.StatsRequest(),_                new ActionListener<FollowStatsAction.StatsResponses>() {_                    @Override_                    public void onResponse(final FollowStatsAction.StatsResponses statsResponses) {_                        try {_                            assertThat(statsResponses.getTaskFailures(), empty())__                            assertThat(statsResponses.getNodeFailures(), empty())__                            onResponse.set(true)__                        } finally {_                            latch.countDown()__                        }_                    }__                    @Override_                    public void onFailure(final Exception e) {_                        try {_                            fail(e.toString())__                        } finally {_                            latch.countDown()__                        }_                    }_                })__        latch.await()__        assertTrue(onResponse.get())__    };previously,we,would,throw,a,null,pointer,exception,when,there,was,no,persistent,tasks,metadata,in,the,cluster,state,this,tests,maintains,that,we,do,not,make,this,mistake,again,throws,interrupted,exception,if,we,are,interrupted,waiting,on,the,latch,to,countdown;public,void,test,stats,when,no,persistent,tasks,meta,data,exists,throws,interrupted,exception,final,cluster,state,response,response,client,admin,cluster,state,new,cluster,state,request,action,get,assert,null,response,get,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,atomic,boolean,on,response,new,atomic,boolean,final,count,down,latch,latch,new,count,down,latch,1,client,execute,follow,stats,action,instance,new,follow,stats,action,stats,request,new,action,listener,follow,stats,action,stats,responses,override,public,void,on,response,final,follow,stats,action,stats,responses,stats,responses,try,assert,that,stats,responses,get,task,failures,empty,assert,that,stats,responses,get,node,failures,empty,on,response,set,true,finally,latch,count,down,override,public,void,on,failure,final,exception,e,try,fail,e,to,string,finally,latch,count,down,latch,await,assert,true,on,response,get
FollowStatsIT -> public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException;1548157685;Previously we would throw a NullPointerException when there was no persistent tasks metadata in the cluster state. This tests_maintains that we do not make this mistake again.__@throws InterruptedException if we are interrupted waiting on the latch to countdown;public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException {_        final ClusterStateResponse response = client().admin().cluster().state(new ClusterStateRequest()).actionGet()__        assertNull(response.getState().metaData().custom(PersistentTasksCustomMetaData.TYPE))__        final AtomicBoolean onResponse = new AtomicBoolean()__        final CountDownLatch latch = new CountDownLatch(1)__        client().execute(_                FollowStatsAction.INSTANCE,_                new FollowStatsAction.StatsRequest(),_                new ActionListener<FollowStatsAction.StatsResponses>() {_                    @Override_                    public void onResponse(final FollowStatsAction.StatsResponses statsResponses) {_                        try {_                            assertThat(statsResponses.getTaskFailures(), empty())__                            assertThat(statsResponses.getNodeFailures(), empty())__                            onResponse.set(true)__                        } finally {_                            latch.countDown()__                        }_                    }__                    @Override_                    public void onFailure(final Exception e) {_                        try {_                            fail(e.toString())__                        } finally {_                            latch.countDown()__                        }_                    }_                })__        latch.await()__        assertTrue(onResponse.get())__    };previously,we,would,throw,a,null,pointer,exception,when,there,was,no,persistent,tasks,metadata,in,the,cluster,state,this,tests,maintains,that,we,do,not,make,this,mistake,again,throws,interrupted,exception,if,we,are,interrupted,waiting,on,the,latch,to,countdown;public,void,test,stats,when,no,persistent,tasks,meta,data,exists,throws,interrupted,exception,final,cluster,state,response,response,client,admin,cluster,state,new,cluster,state,request,action,get,assert,null,response,get,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,atomic,boolean,on,response,new,atomic,boolean,final,count,down,latch,latch,new,count,down,latch,1,client,execute,follow,stats,action,instance,new,follow,stats,action,stats,request,new,action,listener,follow,stats,action,stats,responses,override,public,void,on,response,final,follow,stats,action,stats,responses,stats,responses,try,assert,that,stats,responses,get,task,failures,empty,assert,that,stats,responses,get,node,failures,empty,on,response,set,true,finally,latch,count,down,override,public,void,on,failure,final,exception,e,try,fail,e,to,string,finally,latch,count,down,latch,await,assert,true,on,response,get
FollowStatsIT -> public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException;1549986874;Previously we would throw a NullPointerException when there was no persistent tasks metadata in the cluster state. This tests_maintains that we do not make this mistake again.__@throws InterruptedException if we are interrupted waiting on the latch to countdown;public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException {_        final ClusterStateResponse response = client().admin().cluster().state(new ClusterStateRequest()).actionGet()__        assertNull(response.getState().metaData().custom(PersistentTasksCustomMetaData.TYPE))__        final AtomicBoolean onResponse = new AtomicBoolean()__        final CountDownLatch latch = new CountDownLatch(1)__        client().execute(_                FollowStatsAction.INSTANCE,_                new FollowStatsAction.StatsRequest(),_                new ActionListener<FollowStatsAction.StatsResponses>() {_                    @Override_                    public void onResponse(final FollowStatsAction.StatsResponses statsResponses) {_                        try {_                            assertThat(statsResponses.getTaskFailures(), empty())__                            assertThat(statsResponses.getNodeFailures(), empty())__                            onResponse.set(true)__                        } finally {_                            latch.countDown()__                        }_                    }__                    @Override_                    public void onFailure(final Exception e) {_                        try {_                            fail(e.toString())__                        } finally {_                            latch.countDown()__                        }_                    }_                })__        latch.await()__        assertTrue(onResponse.get())__    };previously,we,would,throw,a,null,pointer,exception,when,there,was,no,persistent,tasks,metadata,in,the,cluster,state,this,tests,maintains,that,we,do,not,make,this,mistake,again,throws,interrupted,exception,if,we,are,interrupted,waiting,on,the,latch,to,countdown;public,void,test,stats,when,no,persistent,tasks,meta,data,exists,throws,interrupted,exception,final,cluster,state,response,response,client,admin,cluster,state,new,cluster,state,request,action,get,assert,null,response,get,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,atomic,boolean,on,response,new,atomic,boolean,final,count,down,latch,latch,new,count,down,latch,1,client,execute,follow,stats,action,instance,new,follow,stats,action,stats,request,new,action,listener,follow,stats,action,stats,responses,override,public,void,on,response,final,follow,stats,action,stats,responses,stats,responses,try,assert,that,stats,responses,get,task,failures,empty,assert,that,stats,responses,get,node,failures,empty,on,response,set,true,finally,latch,count,down,override,public,void,on,failure,final,exception,e,try,fail,e,to,string,finally,latch,count,down,latch,await,assert,true,on,response,get
FollowStatsIT -> public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException;1550053004;Previously we would throw a NullPointerException when there was no persistent tasks metadata in the cluster state. This tests_maintains that we do not make this mistake again.__@throws InterruptedException if we are interrupted waiting on the latch to countdown;public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException {_        final ClusterStateResponse response = client().admin().cluster().state(new ClusterStateRequest()).actionGet()__        assertNull(response.getState().metaData().custom(PersistentTasksCustomMetaData.TYPE))__        final AtomicBoolean onResponse = new AtomicBoolean()__        final CountDownLatch latch = new CountDownLatch(1)__        client().execute(_                FollowStatsAction.INSTANCE,_                new FollowStatsAction.StatsRequest(),_                new ActionListener<FollowStatsAction.StatsResponses>() {_                    @Override_                    public void onResponse(final FollowStatsAction.StatsResponses statsResponses) {_                        try {_                            assertThat(statsResponses.getTaskFailures(), empty())__                            assertThat(statsResponses.getNodeFailures(), empty())__                            onResponse.set(true)__                        } finally {_                            latch.countDown()__                        }_                    }__                    @Override_                    public void onFailure(final Exception e) {_                        try {_                            fail(e.toString())__                        } finally {_                            latch.countDown()__                        }_                    }_                })__        latch.await()__        assertTrue(onResponse.get())__    };previously,we,would,throw,a,null,pointer,exception,when,there,was,no,persistent,tasks,metadata,in,the,cluster,state,this,tests,maintains,that,we,do,not,make,this,mistake,again,throws,interrupted,exception,if,we,are,interrupted,waiting,on,the,latch,to,countdown;public,void,test,stats,when,no,persistent,tasks,meta,data,exists,throws,interrupted,exception,final,cluster,state,response,response,client,admin,cluster,state,new,cluster,state,request,action,get,assert,null,response,get,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,atomic,boolean,on,response,new,atomic,boolean,final,count,down,latch,latch,new,count,down,latch,1,client,execute,follow,stats,action,instance,new,follow,stats,action,stats,request,new,action,listener,follow,stats,action,stats,responses,override,public,void,on,response,final,follow,stats,action,stats,responses,stats,responses,try,assert,that,stats,responses,get,task,failures,empty,assert,that,stats,responses,get,node,failures,empty,on,response,set,true,finally,latch,count,down,override,public,void,on,failure,final,exception,e,try,fail,e,to,string,finally,latch,count,down,latch,await,assert,true,on,response,get
FollowStatsIT -> public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException;1550487754;Previously we would throw a NullPointerException when there was no persistent tasks metadata in the cluster state. This tests_maintains that we do not make this mistake again.__@throws InterruptedException if we are interrupted waiting on the latch to countdown;public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException {_        final ClusterStateResponse response = client().admin().cluster().state(new ClusterStateRequest()).actionGet()__        assertNull(response.getState().metaData().custom(PersistentTasksCustomMetaData.TYPE))__        final AtomicBoolean onResponse = new AtomicBoolean()__        final CountDownLatch latch = new CountDownLatch(1)__        client().execute(_                FollowStatsAction.INSTANCE,_                new FollowStatsAction.StatsRequest(),_                new ActionListener<FollowStatsAction.StatsResponses>() {_                    @Override_                    public void onResponse(final FollowStatsAction.StatsResponses statsResponses) {_                        try {_                            assertThat(statsResponses.getTaskFailures(), empty())__                            assertThat(statsResponses.getNodeFailures(), empty())__                            onResponse.set(true)__                        } finally {_                            latch.countDown()__                        }_                    }__                    @Override_                    public void onFailure(final Exception e) {_                        try {_                            fail(e.toString())__                        } finally {_                            latch.countDown()__                        }_                    }_                })__        latch.await()__        assertTrue(onResponse.get())__    };previously,we,would,throw,a,null,pointer,exception,when,there,was,no,persistent,tasks,metadata,in,the,cluster,state,this,tests,maintains,that,we,do,not,make,this,mistake,again,throws,interrupted,exception,if,we,are,interrupted,waiting,on,the,latch,to,countdown;public,void,test,stats,when,no,persistent,tasks,meta,data,exists,throws,interrupted,exception,final,cluster,state,response,response,client,admin,cluster,state,new,cluster,state,request,action,get,assert,null,response,get,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,atomic,boolean,on,response,new,atomic,boolean,final,count,down,latch,latch,new,count,down,latch,1,client,execute,follow,stats,action,instance,new,follow,stats,action,stats,request,new,action,listener,follow,stats,action,stats,responses,override,public,void,on,response,final,follow,stats,action,stats,responses,stats,responses,try,assert,that,stats,responses,get,task,failures,empty,assert,that,stats,responses,get,node,failures,empty,on,response,set,true,finally,latch,count,down,override,public,void,on,failure,final,exception,e,try,fail,e,to,string,finally,latch,count,down,latch,await,assert,true,on,response,get
FollowStatsIT -> public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException;1550562800;Previously we would throw a NullPointerException when there was no persistent tasks metadata in the cluster state. This tests_maintains that we do not make this mistake again.__@throws InterruptedException if we are interrupted waiting on the latch to countdown;public void testStatsWhenNoPersistentTasksMetaDataExists() throws InterruptedException {_        final ClusterStateResponse response = client().admin().cluster().state(new ClusterStateRequest()).actionGet()__        assertNull(response.getState().metaData().custom(PersistentTasksCustomMetaData.TYPE))__        final AtomicBoolean onResponse = new AtomicBoolean()__        final CountDownLatch latch = new CountDownLatch(1)__        client().execute(_                FollowStatsAction.INSTANCE,_                new FollowStatsAction.StatsRequest(),_                new ActionListener<FollowStatsAction.StatsResponses>() {_                    @Override_                    public void onResponse(final FollowStatsAction.StatsResponses statsResponses) {_                        try {_                            assertThat(statsResponses.getTaskFailures(), empty())__                            assertThat(statsResponses.getNodeFailures(), empty())__                            onResponse.set(true)__                        } finally {_                            latch.countDown()__                        }_                    }__                    @Override_                    public void onFailure(final Exception e) {_                        try {_                            fail(e.toString())__                        } finally {_                            latch.countDown()__                        }_                    }_                })__        latch.await()__        assertTrue(onResponse.get())__    };previously,we,would,throw,a,null,pointer,exception,when,there,was,no,persistent,tasks,metadata,in,the,cluster,state,this,tests,maintains,that,we,do,not,make,this,mistake,again,throws,interrupted,exception,if,we,are,interrupted,waiting,on,the,latch,to,countdown;public,void,test,stats,when,no,persistent,tasks,meta,data,exists,throws,interrupted,exception,final,cluster,state,response,response,client,admin,cluster,state,new,cluster,state,request,action,get,assert,null,response,get,state,meta,data,custom,persistent,tasks,custom,meta,data,type,final,atomic,boolean,on,response,new,atomic,boolean,final,count,down,latch,latch,new,count,down,latch,1,client,execute,follow,stats,action,instance,new,follow,stats,action,stats,request,new,action,listener,follow,stats,action,stats,responses,override,public,void,on,response,final,follow,stats,action,stats,responses,stats,responses,try,assert,that,stats,responses,get,task,failures,empty,assert,that,stats,responses,get,node,failures,empty,on,response,set,true,finally,latch,count,down,override,public,void,on,failure,final,exception,e,try,fail,e,to,string,finally,latch,count,down,latch,await,assert,true,on,response,get
