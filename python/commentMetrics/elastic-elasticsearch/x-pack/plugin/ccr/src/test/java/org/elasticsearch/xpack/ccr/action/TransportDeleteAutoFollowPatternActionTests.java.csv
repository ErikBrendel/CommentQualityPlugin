commented;modifiers;parameterAmount;loc;comment;code
false;public;0;43;;public void testInnerDelete() {     Map<String, List<String>> existingAlreadyFollowedIndexUUIDS = new HashMap<>().     Map<String, Map<String, String>> existingHeaders = new HashMap<>().     Map<String, AutoFollowPattern> existingAutoFollowPatterns = new HashMap<>().     {         List<String> existingPatterns = new ArrayList<>().         existingPatterns.add("transactions-*").         existingAutoFollowPatterns.put("name1", new AutoFollowPattern("eu_cluster", existingPatterns, null, null, null, null, null, null, null, null, null, null, null)).         List<String> existingUUIDS = new ArrayList<>().         existingUUIDS.add("_val").         existingAlreadyFollowedIndexUUIDS.put("name1", existingUUIDS).         existingHeaders.put("name1", Collections.singletonMap("key", "val")).     }     {         List<String> existingPatterns = new ArrayList<>().         existingPatterns.add("logs-*").         existingAutoFollowPatterns.put("name2", new AutoFollowPattern("asia_cluster", existingPatterns, null, null, null, null, null, null, null, null, null, null, null)).         List<String> existingUUIDS = new ArrayList<>().         existingUUIDS.add("_val").         existingAlreadyFollowedIndexUUIDS.put("name2", existingUUIDS).         existingHeaders.put("name2", Collections.singletonMap("key", "val")).     }     ClusterState clusterState = ClusterState.builder(new ClusterName("us_cluster")).metaData(MetaData.builder().putCustom(AutoFollowMetadata.TYPE, new AutoFollowMetadata(existingAutoFollowPatterns, existingAlreadyFollowedIndexUUIDS, existingHeaders))).build().     Request request = new Request("name1").     AutoFollowMetadata result = TransportDeleteAutoFollowPatternAction.innerDelete(request, clusterState).getMetaData().custom(AutoFollowMetadata.TYPE).     assertThat(result.getPatterns().size(), equalTo(1)).     assertThat(result.getPatterns().get("name2"), notNullValue()).     assertThat(result.getPatterns().get("name2").getRemoteCluster(), equalTo("asia_cluster")).     assertThat(result.getFollowedLeaderIndexUUIDs().size(), equalTo(1)).     assertThat(result.getFollowedLeaderIndexUUIDs().get("name2"), notNullValue()).     assertThat(result.getHeaders().size(), equalTo(1)).     assertThat(result.getHeaders().get("name2"), notNullValue()). }
false;public;0;21;;public void testInnerDeleteDoesNotExist() {     Map<String, List<String>> existingAlreadyFollowedIndexUUIDS = new HashMap<>().     Map<String, AutoFollowPattern> existingAutoFollowPatterns = new HashMap<>().     Map<String, Map<String, String>> existingHeaders = new HashMap<>().     {         List<String> existingPatterns = new ArrayList<>().         existingPatterns.add("transactions-*").         existingAutoFollowPatterns.put("name1", new AutoFollowPattern("eu_cluster", existingPatterns, null, null, null, null, null, null, null, null, null, null, null)).         existingHeaders.put("key", Collections.singletonMap("key", "val")).     }     ClusterState clusterState = ClusterState.builder(new ClusterName("us_cluster")).metaData(MetaData.builder().putCustom(AutoFollowMetadata.TYPE, new AutoFollowMetadata(existingAutoFollowPatterns, existingAlreadyFollowedIndexUUIDS, existingHeaders))).build().     Request request = new Request("name2").     Exception e = expectThrows(ResourceNotFoundException.class, () -> TransportDeleteAutoFollowPatternAction.innerDelete(request, clusterState)).     assertThat(e.getMessage(), equalTo("auto-follow pattern [name2] is missing")). }
false;public;0;10;;public void testInnerDeleteNoAutoFollowMetadata() {     ClusterState clusterState = ClusterState.builder(new ClusterName("us_cluster")).metaData(MetaData.builder()).build().     Request request = new Request("name1").     Exception e = expectThrows(ResourceNotFoundException.class, () -> TransportDeleteAutoFollowPatternAction.innerDelete(request, clusterState)).     assertThat(e.getMessage(), equalTo("auto-follow pattern [name1] is missing")). }
