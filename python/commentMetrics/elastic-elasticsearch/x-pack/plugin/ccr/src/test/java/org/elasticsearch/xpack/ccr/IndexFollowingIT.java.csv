# id;timestamp;commentText;codeText;commentWords;codeWords
IndexFollowingIT -> private void runFallBehindTest(             final CheckedRunnable<Exception> afterPausingFollower,             final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception;1550348884;Runs a fall behind test. In this test, we construct a situation where a follower is paused. While the follower is paused we index_more documents that causes soft deletes on the leader, flush them, and run a force merge. This is to set up a situation where the_operations will not necessarily be there. With retention leases in place, we would actually expect the operations to be there. After_pausing the follower, the specified callback is executed. This gives a test an opportunity to set up assumptions. For example, a test_might remove all the retention leases on the leader to set up a situation where the follower will fall behind when it is resumed_because the operations will no longer be held on the leader. The specified exceptions callback is invoked after resuming the follower_to give a test an opportunity to assert on the resource not found exceptions (either present or not present).__@param afterPausingFollower the callback to run after pausing the follower_@param exceptionConsumer    the callback to run on a collection of resource not found exceptions after resuming the follower_@throws Exception if a checked exception is thrown during the test;private void runFallBehindTest(_            final CheckedRunnable<Exception> afterPausingFollower,_            final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception {_        final int numberOfPrimaryShards = randomIntBetween(1, 3)__        final String leaderIndexSettings = getIndexSettings(numberOfPrimaryShards, between(0, 1),_                singletonMap(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), "true"))__        assertAcked(leaderClient().admin().indices().prepareCreate("index1").setSource(leaderIndexSettings, XContentType.JSON))__        ensureLeaderYellow("index1")___        final int numDocs = randomIntBetween(2, 64)__        logger.info("Indexing [{}] docs as first batch", numDocs)__        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }__        final PutFollowAction.Request followRequest = putFollow("index1", "index2")__        PutFollowAction.Response response = followerClient().execute(PutFollowAction.INSTANCE, followRequest).get()__        assertTrue(response.isFollowIndexCreated())__        assertTrue(response.isFollowIndexShardsAcked())__        assertTrue(response.isIndexFollowingStarted())___        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 0_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i))__        }__        pauseFollow("index2")___        afterPausingFollower.run()___        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i * 2)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }_        leaderClient().prepareDelete("index1", "doc", "1").get()__        leaderClient().admin().indices().refresh(new RefreshRequest("index1")).actionGet()__        leaderClient().admin().indices().flush(new FlushRequest("index1").force(true)).actionGet()__        ForceMergeRequest forceMergeRequest = new ForceMergeRequest("index1")__        forceMergeRequest.maxNumSegments(1)__        leaderClient().admin().indices().forceMerge(forceMergeRequest).actionGet()___        followerClient().execute(ResumeFollowAction.INSTANCE, resumeFollow("index2")).get()___        assertBusy(() -> {_            List<ShardFollowNodeTaskStatus> statuses = getFollowTaskStatuses("index2")__            Set<ResourceNotFoundException> exceptions = statuses.stream()_                    .map(ShardFollowNodeTaskStatus::getFatalException)_                    .filter(Objects::nonNull)_                    .map(ExceptionsHelper::unwrapCause)_                    .filter(e -> e instanceof ResourceNotFoundException)_                    .map(e -> (ResourceNotFoundException) e)_                    .filter(e -> e.getMetadataKeys().contains("es.requested_operations_missing"))_                    .collect(Collectors.toSet())__            exceptionConsumer.accept(exceptions)__        })___        followerClient().admin().indices().prepareClose("index2").get()__        pauseFollow("index2")___        final PutFollowAction.Request followRequest2 = putFollow("index1", "index2")__        PutFollowAction.Response response2 = followerClient().execute(PutFollowAction.INSTANCE, followRequest2).get()__        assertTrue(response2.isFollowIndexCreated())__        assertTrue(response2.isFollowIndexShardsAcked())__        assertTrue(response2.isIndexFollowingStarted())___        ensureFollowerGreen("index2")__        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 2_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i, i * 2))__        }_    };runs,a,fall,behind,test,in,this,test,we,construct,a,situation,where,a,follower,is,paused,while,the,follower,is,paused,we,index,more,documents,that,causes,soft,deletes,on,the,leader,flush,them,and,run,a,force,merge,this,is,to,set,up,a,situation,where,the,operations,will,not,necessarily,be,there,with,retention,leases,in,place,we,would,actually,expect,the,operations,to,be,there,after,pausing,the,follower,the,specified,callback,is,executed,this,gives,a,test,an,opportunity,to,set,up,assumptions,for,example,a,test,might,remove,all,the,retention,leases,on,the,leader,to,set,up,a,situation,where,the,follower,will,fall,behind,when,it,is,resumed,because,the,operations,will,no,longer,be,held,on,the,leader,the,specified,exceptions,callback,is,invoked,after,resuming,the,follower,to,give,a,test,an,opportunity,to,assert,on,the,resource,not,found,exceptions,either,present,or,not,present,param,after,pausing,follower,the,callback,to,run,after,pausing,the,follower,param,exception,consumer,the,callback,to,run,on,a,collection,of,resource,not,found,exceptions,after,resuming,the,follower,throws,exception,if,a,checked,exception,is,thrown,during,the,test;private,void,run,fall,behind,test,final,checked,runnable,exception,after,pausing,follower,final,consumer,collection,resource,not,found,exception,exception,consumer,throws,exception,final,int,number,of,primary,shards,random,int,between,1,3,final,string,leader,index,settings,get,index,settings,number,of,primary,shards,between,0,1,singleton,map,index,settings,get,key,true,assert,acked,leader,client,admin,indices,prepare,create,index1,set,source,leader,index,settings,xcontent,type,json,ensure,leader,yellow,index1,final,int,num,docs,random,int,between,2,64,logger,info,indexing,docs,as,first,batch,num,docs,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,final,put,follow,action,request,follow,request,put,follow,index1,index2,put,follow,action,response,response,follower,client,execute,put,follow,action,instance,follow,request,get,assert,true,response,is,follow,index,created,assert,true,response,is,follow,index,shards,acked,assert,true,response,is,index,following,started,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,0,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,pause,follow,index2,after,pausing,follower,run,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,2,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,leader,client,prepare,delete,index1,doc,1,get,leader,client,admin,indices,refresh,new,refresh,request,index1,action,get,leader,client,admin,indices,flush,new,flush,request,index1,force,true,action,get,force,merge,request,force,merge,request,new,force,merge,request,index1,force,merge,request,max,num,segments,1,leader,client,admin,indices,force,merge,force,merge,request,action,get,follower,client,execute,resume,follow,action,instance,resume,follow,index2,get,assert,busy,list,shard,follow,node,task,status,statuses,get,follow,task,statuses,index2,set,resource,not,found,exception,exceptions,statuses,stream,map,shard,follow,node,task,status,get,fatal,exception,filter,objects,non,null,map,exceptions,helper,unwrap,cause,filter,e,e,instanceof,resource,not,found,exception,map,e,resource,not,found,exception,e,filter,e,e,get,metadata,keys,contains,es,collect,collectors,to,set,exception,consumer,accept,exceptions,follower,client,admin,indices,prepare,close,index2,get,pause,follow,index2,final,put,follow,action,request,follow,request2,put,follow,index1,index2,put,follow,action,response,response2,follower,client,execute,put,follow,action,instance,follow,request2,get,assert,true,response2,is,follow,index,created,assert,true,response2,is,follow,index,shards,acked,assert,true,response2,is,index,following,started,ensure,follower,green,index2,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,2,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,i,2
IndexFollowingIT -> private void runFallBehindTest(             final CheckedRunnable<Exception> afterPausingFollower,             final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception;1550499825;Runs a fall behind test. In this test, we construct a situation where a follower is paused. While the follower is paused we index_more documents that causes soft deletes on the leader, flush them, and run a force merge. This is to set up a situation where the_operations will not necessarily be there. With retention leases in place, we would actually expect the operations to be there. After_pausing the follower, the specified callback is executed. This gives a test an opportunity to set up assumptions. For example, a test_might remove all the retention leases on the leader to set up a situation where the follower will fall behind when it is resumed_because the operations will no longer be held on the leader. The specified exceptions callback is invoked after resuming the follower_to give a test an opportunity to assert on the resource not found exceptions (either present or not present).__@param afterPausingFollower the callback to run after pausing the follower_@param exceptionConsumer    the callback to run on a collection of resource not found exceptions after resuming the follower_@throws Exception if a checked exception is thrown during the test;private void runFallBehindTest(_            final CheckedRunnable<Exception> afterPausingFollower,_            final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception {_        final int numberOfPrimaryShards = randomIntBetween(1, 3)__        final String leaderIndexSettings = getIndexSettings(numberOfPrimaryShards, between(0, 1),_                singletonMap(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), "true"))__        assertAcked(leaderClient().admin().indices().prepareCreate("index1").setSource(leaderIndexSettings, XContentType.JSON))__        ensureLeaderYellow("index1")___        final int numDocs = randomIntBetween(2, 64)__        logger.info("Indexing [{}] docs as first batch", numDocs)__        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }__        final PutFollowAction.Request followRequest = putFollow("index1", "index2")__        PutFollowAction.Response response = followerClient().execute(PutFollowAction.INSTANCE, followRequest).get()__        assertTrue(response.isFollowIndexCreated())__        assertTrue(response.isFollowIndexShardsAcked())__        assertTrue(response.isIndexFollowingStarted())___        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 0_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i))__        }__        pauseFollow("index2")___        afterPausingFollower.run()___        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i * 2)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }_        leaderClient().prepareDelete("index1", "doc", "1").get()__        leaderClient().admin().indices().refresh(new RefreshRequest("index1")).actionGet()__        leaderClient().admin().indices().flush(new FlushRequest("index1").force(true)).actionGet()__        ForceMergeRequest forceMergeRequest = new ForceMergeRequest("index1")__        forceMergeRequest.maxNumSegments(1)__        leaderClient().admin().indices().forceMerge(forceMergeRequest).actionGet()___        followerClient().execute(ResumeFollowAction.INSTANCE, resumeFollow("index2")).get()___        assertBusy(() -> {_            List<ShardFollowNodeTaskStatus> statuses = getFollowTaskStatuses("index2")__            Set<ResourceNotFoundException> exceptions = statuses.stream()_                    .map(ShardFollowNodeTaskStatus::getFatalException)_                    .filter(Objects::nonNull)_                    .map(ExceptionsHelper::unwrapCause)_                    .filter(e -> e instanceof ResourceNotFoundException)_                    .map(e -> (ResourceNotFoundException) e)_                    .filter(e -> e.getMetadataKeys().contains("es.requested_operations_missing"))_                    .collect(Collectors.toSet())__            exceptionConsumer.accept(exceptions)__        })___        followerClient().admin().indices().prepareClose("index2").get()__        pauseFollow("index2")___        final PutFollowAction.Request followRequest2 = putFollow("index1", "index2")__        PutFollowAction.Response response2 = followerClient().execute(PutFollowAction.INSTANCE, followRequest2).get()__        assertTrue(response2.isFollowIndexCreated())__        assertTrue(response2.isFollowIndexShardsAcked())__        assertTrue(response2.isIndexFollowingStarted())___        ensureFollowerGreen("index2")__        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 2_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i, i * 2))__        }_    };runs,a,fall,behind,test,in,this,test,we,construct,a,situation,where,a,follower,is,paused,while,the,follower,is,paused,we,index,more,documents,that,causes,soft,deletes,on,the,leader,flush,them,and,run,a,force,merge,this,is,to,set,up,a,situation,where,the,operations,will,not,necessarily,be,there,with,retention,leases,in,place,we,would,actually,expect,the,operations,to,be,there,after,pausing,the,follower,the,specified,callback,is,executed,this,gives,a,test,an,opportunity,to,set,up,assumptions,for,example,a,test,might,remove,all,the,retention,leases,on,the,leader,to,set,up,a,situation,where,the,follower,will,fall,behind,when,it,is,resumed,because,the,operations,will,no,longer,be,held,on,the,leader,the,specified,exceptions,callback,is,invoked,after,resuming,the,follower,to,give,a,test,an,opportunity,to,assert,on,the,resource,not,found,exceptions,either,present,or,not,present,param,after,pausing,follower,the,callback,to,run,after,pausing,the,follower,param,exception,consumer,the,callback,to,run,on,a,collection,of,resource,not,found,exceptions,after,resuming,the,follower,throws,exception,if,a,checked,exception,is,thrown,during,the,test;private,void,run,fall,behind,test,final,checked,runnable,exception,after,pausing,follower,final,consumer,collection,resource,not,found,exception,exception,consumer,throws,exception,final,int,number,of,primary,shards,random,int,between,1,3,final,string,leader,index,settings,get,index,settings,number,of,primary,shards,between,0,1,singleton,map,index,settings,get,key,true,assert,acked,leader,client,admin,indices,prepare,create,index1,set,source,leader,index,settings,xcontent,type,json,ensure,leader,yellow,index1,final,int,num,docs,random,int,between,2,64,logger,info,indexing,docs,as,first,batch,num,docs,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,final,put,follow,action,request,follow,request,put,follow,index1,index2,put,follow,action,response,response,follower,client,execute,put,follow,action,instance,follow,request,get,assert,true,response,is,follow,index,created,assert,true,response,is,follow,index,shards,acked,assert,true,response,is,index,following,started,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,0,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,pause,follow,index2,after,pausing,follower,run,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,2,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,leader,client,prepare,delete,index1,doc,1,get,leader,client,admin,indices,refresh,new,refresh,request,index1,action,get,leader,client,admin,indices,flush,new,flush,request,index1,force,true,action,get,force,merge,request,force,merge,request,new,force,merge,request,index1,force,merge,request,max,num,segments,1,leader,client,admin,indices,force,merge,force,merge,request,action,get,follower,client,execute,resume,follow,action,instance,resume,follow,index2,get,assert,busy,list,shard,follow,node,task,status,statuses,get,follow,task,statuses,index2,set,resource,not,found,exception,exceptions,statuses,stream,map,shard,follow,node,task,status,get,fatal,exception,filter,objects,non,null,map,exceptions,helper,unwrap,cause,filter,e,e,instanceof,resource,not,found,exception,map,e,resource,not,found,exception,e,filter,e,e,get,metadata,keys,contains,es,collect,collectors,to,set,exception,consumer,accept,exceptions,follower,client,admin,indices,prepare,close,index2,get,pause,follow,index2,final,put,follow,action,request,follow,request2,put,follow,index1,index2,put,follow,action,response,response2,follower,client,execute,put,follow,action,instance,follow,request2,get,assert,true,response2,is,follow,index,created,assert,true,response2,is,follow,index,shards,acked,assert,true,response2,is,index,following,started,ensure,follower,green,index2,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,2,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,i,2
IndexFollowingIT -> private void runFallBehindTest(             final CheckedRunnable<Exception> afterPausingFollower,             final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception;1550601141;Runs a fall behind test. In this test, we construct a situation where a follower is paused. While the follower is paused we index_more documents that causes soft deletes on the leader, flush them, and run a force merge. This is to set up a situation where the_operations will not necessarily be there. With retention leases in place, we would actually expect the operations to be there. After_pausing the follower, the specified callback is executed. This gives a test an opportunity to set up assumptions. For example, a test_might remove all the retention leases on the leader to set up a situation where the follower will fall behind when it is resumed_because the operations will no longer be held on the leader. The specified exceptions callback is invoked after resuming the follower_to give a test an opportunity to assert on the resource not found exceptions (either present or not present).__@param afterPausingFollower the callback to run after pausing the follower_@param exceptionConsumer    the callback to run on a collection of resource not found exceptions after resuming the follower_@throws Exception if a checked exception is thrown during the test;private void runFallBehindTest(_            final CheckedRunnable<Exception> afterPausingFollower,_            final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception {_        final int numberOfPrimaryShards = randomIntBetween(1, 3)__        final String leaderIndexSettings = getIndexSettings(numberOfPrimaryShards, between(0, 1),_                singletonMap(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), "true"))__        assertAcked(leaderClient().admin().indices().prepareCreate("index1").setSource(leaderIndexSettings, XContentType.JSON))__        ensureLeaderYellow("index1")___        final int numDocs = randomIntBetween(2, 64)__        logger.info("Indexing [{}] docs as first batch", numDocs)__        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }__        final PutFollowAction.Request followRequest = putFollow("index1", "index2")__        PutFollowAction.Response response = followerClient().execute(PutFollowAction.INSTANCE, followRequest).get()__        assertTrue(response.isFollowIndexCreated())__        assertTrue(response.isFollowIndexShardsAcked())__        assertTrue(response.isIndexFollowingStarted())___        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 0_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i))__        }__        pauseFollow("index2")___        afterPausingFollower.run()___        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i * 2)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }_        leaderClient().prepareDelete("index1", "doc", "1").get()__        leaderClient().admin().indices().refresh(new RefreshRequest("index1")).actionGet()__        leaderClient().admin().indices().flush(new FlushRequest("index1").force(true)).actionGet()__        ForceMergeRequest forceMergeRequest = new ForceMergeRequest("index1")__        forceMergeRequest.maxNumSegments(1)__        leaderClient().admin().indices().forceMerge(forceMergeRequest).actionGet()___        followerClient().execute(ResumeFollowAction.INSTANCE, resumeFollow("index2")).get()___        assertBusy(() -> {_            List<ShardFollowNodeTaskStatus> statuses = getFollowTaskStatuses("index2")__            Set<ResourceNotFoundException> exceptions = statuses.stream()_                    .map(ShardFollowNodeTaskStatus::getFatalException)_                    .filter(Objects::nonNull)_                    .map(ExceptionsHelper::unwrapCause)_                    .filter(e -> e instanceof ResourceNotFoundException)_                    .map(e -> (ResourceNotFoundException) e)_                    .filter(e -> e.getMetadataKeys().contains("es.requested_operations_missing"))_                    .collect(Collectors.toSet())__            exceptionConsumer.accept(exceptions)__        })___        followerClient().admin().indices().prepareClose("index2").get()__        pauseFollow("index2")___        final PutFollowAction.Request followRequest2 = putFollow("index1", "index2")__        PutFollowAction.Response response2 = followerClient().execute(PutFollowAction.INSTANCE, followRequest2).get()__        assertTrue(response2.isFollowIndexCreated())__        assertTrue(response2.isFollowIndexShardsAcked())__        assertTrue(response2.isIndexFollowingStarted())___        ensureFollowerGreen("index2")__        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 2_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i, i * 2))__        }_    };runs,a,fall,behind,test,in,this,test,we,construct,a,situation,where,a,follower,is,paused,while,the,follower,is,paused,we,index,more,documents,that,causes,soft,deletes,on,the,leader,flush,them,and,run,a,force,merge,this,is,to,set,up,a,situation,where,the,operations,will,not,necessarily,be,there,with,retention,leases,in,place,we,would,actually,expect,the,operations,to,be,there,after,pausing,the,follower,the,specified,callback,is,executed,this,gives,a,test,an,opportunity,to,set,up,assumptions,for,example,a,test,might,remove,all,the,retention,leases,on,the,leader,to,set,up,a,situation,where,the,follower,will,fall,behind,when,it,is,resumed,because,the,operations,will,no,longer,be,held,on,the,leader,the,specified,exceptions,callback,is,invoked,after,resuming,the,follower,to,give,a,test,an,opportunity,to,assert,on,the,resource,not,found,exceptions,either,present,or,not,present,param,after,pausing,follower,the,callback,to,run,after,pausing,the,follower,param,exception,consumer,the,callback,to,run,on,a,collection,of,resource,not,found,exceptions,after,resuming,the,follower,throws,exception,if,a,checked,exception,is,thrown,during,the,test;private,void,run,fall,behind,test,final,checked,runnable,exception,after,pausing,follower,final,consumer,collection,resource,not,found,exception,exception,consumer,throws,exception,final,int,number,of,primary,shards,random,int,between,1,3,final,string,leader,index,settings,get,index,settings,number,of,primary,shards,between,0,1,singleton,map,index,settings,get,key,true,assert,acked,leader,client,admin,indices,prepare,create,index1,set,source,leader,index,settings,xcontent,type,json,ensure,leader,yellow,index1,final,int,num,docs,random,int,between,2,64,logger,info,indexing,docs,as,first,batch,num,docs,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,final,put,follow,action,request,follow,request,put,follow,index1,index2,put,follow,action,response,response,follower,client,execute,put,follow,action,instance,follow,request,get,assert,true,response,is,follow,index,created,assert,true,response,is,follow,index,shards,acked,assert,true,response,is,index,following,started,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,0,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,pause,follow,index2,after,pausing,follower,run,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,2,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,leader,client,prepare,delete,index1,doc,1,get,leader,client,admin,indices,refresh,new,refresh,request,index1,action,get,leader,client,admin,indices,flush,new,flush,request,index1,force,true,action,get,force,merge,request,force,merge,request,new,force,merge,request,index1,force,merge,request,max,num,segments,1,leader,client,admin,indices,force,merge,force,merge,request,action,get,follower,client,execute,resume,follow,action,instance,resume,follow,index2,get,assert,busy,list,shard,follow,node,task,status,statuses,get,follow,task,statuses,index2,set,resource,not,found,exception,exceptions,statuses,stream,map,shard,follow,node,task,status,get,fatal,exception,filter,objects,non,null,map,exceptions,helper,unwrap,cause,filter,e,e,instanceof,resource,not,found,exception,map,e,resource,not,found,exception,e,filter,e,e,get,metadata,keys,contains,es,collect,collectors,to,set,exception,consumer,accept,exceptions,follower,client,admin,indices,prepare,close,index2,get,pause,follow,index2,final,put,follow,action,request,follow,request2,put,follow,index1,index2,put,follow,action,response,response2,follower,client,execute,put,follow,action,instance,follow,request2,get,assert,true,response2,is,follow,index,created,assert,true,response2,is,follow,index,shards,acked,assert,true,response2,is,index,following,started,ensure,follower,green,index2,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,2,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,i,2
IndexFollowingIT -> private void runFallBehindTest(             final CheckedRunnable<Exception> afterPausingFollower,             final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception;1550838353;Runs a fall behind test. In this test, we construct a situation where a follower is paused. While the follower is paused we index_more documents that causes soft deletes on the leader, flush them, and run a force merge. This is to set up a situation where the_operations will not necessarily be there. With retention leases in place, we would actually expect the operations to be there. After_pausing the follower, the specified callback is executed. This gives a test an opportunity to set up assumptions. For example, a test_might remove all the retention leases on the leader to set up a situation where the follower will fall behind when it is resumed_because the operations will no longer be held on the leader. The specified exceptions callback is invoked after resuming the follower_to give a test an opportunity to assert on the resource not found exceptions (either present or not present).__@param afterPausingFollower the callback to run after pausing the follower_@param exceptionConsumer    the callback to run on a collection of resource not found exceptions after resuming the follower_@throws Exception if a checked exception is thrown during the test;private void runFallBehindTest(_            final CheckedRunnable<Exception> afterPausingFollower,_            final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception {_        final int numberOfPrimaryShards = randomIntBetween(1, 3)__        final String leaderIndexSettings = getIndexSettings(numberOfPrimaryShards, between(0, 1),_                singletonMap(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), "true"))__        assertAcked(leaderClient().admin().indices().prepareCreate("index1").setSource(leaderIndexSettings, XContentType.JSON))__        ensureLeaderYellow("index1")___        final int numDocs = randomIntBetween(2, 64)__        logger.info("Indexing [{}] docs as first batch", numDocs)__        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }__        final PutFollowAction.Request followRequest = putFollow("index1", "index2")__        PutFollowAction.Response response = followerClient().execute(PutFollowAction.INSTANCE, followRequest).get()__        assertTrue(response.isFollowIndexCreated())__        assertTrue(response.isFollowIndexShardsAcked())__        assertTrue(response.isIndexFollowingStarted())___        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 0_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i))__        }__        pauseFollow("index2")___        afterPausingFollower.run()___        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i * 2)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }_        leaderClient().prepareDelete("index1", "doc", "1").get()__        leaderClient().admin().indices().refresh(new RefreshRequest("index1")).actionGet()__        leaderClient().admin().indices().flush(new FlushRequest("index1").force(true)).actionGet()__        ForceMergeRequest forceMergeRequest = new ForceMergeRequest("index1")__        forceMergeRequest.maxNumSegments(1)__        leaderClient().admin().indices().forceMerge(forceMergeRequest).actionGet()___        followerClient().execute(ResumeFollowAction.INSTANCE, resumeFollow("index2")).get()___        assertBusy(() -> {_            List<ShardFollowNodeTaskStatus> statuses = getFollowTaskStatuses("index2")__            Set<ResourceNotFoundException> exceptions = statuses.stream()_                    .map(ShardFollowNodeTaskStatus::getFatalException)_                    .filter(Objects::nonNull)_                    .map(ExceptionsHelper::unwrapCause)_                    .filter(e -> e instanceof ResourceNotFoundException)_                    .map(e -> (ResourceNotFoundException) e)_                    .filter(e -> e.getMetadataKeys().contains("es.requested_operations_missing"))_                    .collect(Collectors.toSet())__            exceptionConsumer.accept(exceptions)__        })___        followerClient().admin().indices().prepareClose("index2").get()__        pauseFollow("index2")___        final PutFollowAction.Request followRequest2 = putFollow("index1", "index2")__        PutFollowAction.Response response2 = followerClient().execute(PutFollowAction.INSTANCE, followRequest2).get()__        assertTrue(response2.isFollowIndexCreated())__        assertTrue(response2.isFollowIndexShardsAcked())__        assertTrue(response2.isIndexFollowingStarted())___        ensureFollowerGreen("index2")__        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 2_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i, i * 2))__        }_    };runs,a,fall,behind,test,in,this,test,we,construct,a,situation,where,a,follower,is,paused,while,the,follower,is,paused,we,index,more,documents,that,causes,soft,deletes,on,the,leader,flush,them,and,run,a,force,merge,this,is,to,set,up,a,situation,where,the,operations,will,not,necessarily,be,there,with,retention,leases,in,place,we,would,actually,expect,the,operations,to,be,there,after,pausing,the,follower,the,specified,callback,is,executed,this,gives,a,test,an,opportunity,to,set,up,assumptions,for,example,a,test,might,remove,all,the,retention,leases,on,the,leader,to,set,up,a,situation,where,the,follower,will,fall,behind,when,it,is,resumed,because,the,operations,will,no,longer,be,held,on,the,leader,the,specified,exceptions,callback,is,invoked,after,resuming,the,follower,to,give,a,test,an,opportunity,to,assert,on,the,resource,not,found,exceptions,either,present,or,not,present,param,after,pausing,follower,the,callback,to,run,after,pausing,the,follower,param,exception,consumer,the,callback,to,run,on,a,collection,of,resource,not,found,exceptions,after,resuming,the,follower,throws,exception,if,a,checked,exception,is,thrown,during,the,test;private,void,run,fall,behind,test,final,checked,runnable,exception,after,pausing,follower,final,consumer,collection,resource,not,found,exception,exception,consumer,throws,exception,final,int,number,of,primary,shards,random,int,between,1,3,final,string,leader,index,settings,get,index,settings,number,of,primary,shards,between,0,1,singleton,map,index,settings,get,key,true,assert,acked,leader,client,admin,indices,prepare,create,index1,set,source,leader,index,settings,xcontent,type,json,ensure,leader,yellow,index1,final,int,num,docs,random,int,between,2,64,logger,info,indexing,docs,as,first,batch,num,docs,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,final,put,follow,action,request,follow,request,put,follow,index1,index2,put,follow,action,response,response,follower,client,execute,put,follow,action,instance,follow,request,get,assert,true,response,is,follow,index,created,assert,true,response,is,follow,index,shards,acked,assert,true,response,is,index,following,started,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,0,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,pause,follow,index2,after,pausing,follower,run,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,2,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,leader,client,prepare,delete,index1,doc,1,get,leader,client,admin,indices,refresh,new,refresh,request,index1,action,get,leader,client,admin,indices,flush,new,flush,request,index1,force,true,action,get,force,merge,request,force,merge,request,new,force,merge,request,index1,force,merge,request,max,num,segments,1,leader,client,admin,indices,force,merge,force,merge,request,action,get,follower,client,execute,resume,follow,action,instance,resume,follow,index2,get,assert,busy,list,shard,follow,node,task,status,statuses,get,follow,task,statuses,index2,set,resource,not,found,exception,exceptions,statuses,stream,map,shard,follow,node,task,status,get,fatal,exception,filter,objects,non,null,map,exceptions,helper,unwrap,cause,filter,e,e,instanceof,resource,not,found,exception,map,e,resource,not,found,exception,e,filter,e,e,get,metadata,keys,contains,es,collect,collectors,to,set,exception,consumer,accept,exceptions,follower,client,admin,indices,prepare,close,index2,get,pause,follow,index2,final,put,follow,action,request,follow,request2,put,follow,index1,index2,put,follow,action,response,response2,follower,client,execute,put,follow,action,instance,follow,request2,get,assert,true,response2,is,follow,index,created,assert,true,response2,is,follow,index,shards,acked,assert,true,response2,is,index,following,started,ensure,follower,green,index2,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,2,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,i,2
IndexFollowingIT -> private void runFallBehindTest(             final CheckedRunnable<Exception> afterPausingFollower,             final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception;1551098372;Runs a fall behind test. In this test, we construct a situation where a follower is paused. While the follower is paused we index_more documents that causes soft deletes on the leader, flush them, and run a force merge. This is to set up a situation where the_operations will not necessarily be there. With retention leases in place, we would actually expect the operations to be there. After_pausing the follower, the specified callback is executed. This gives a test an opportunity to set up assumptions. For example, a test_might remove all the retention leases on the leader to set up a situation where the follower will fall behind when it is resumed_because the operations will no longer be held on the leader. The specified exceptions callback is invoked after resuming the follower_to give a test an opportunity to assert on the resource not found exceptions (either present or not present).__@param afterPausingFollower the callback to run after pausing the follower_@param exceptionConsumer    the callback to run on a collection of resource not found exceptions after resuming the follower_@throws Exception if a checked exception is thrown during the test;private void runFallBehindTest(_            final CheckedRunnable<Exception> afterPausingFollower,_            final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception {_        final int numberOfPrimaryShards = randomIntBetween(1, 3)__        final String leaderIndexSettings = getIndexSettings(numberOfPrimaryShards, between(0, 1),_                singletonMap(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), "true"))__        assertAcked(leaderClient().admin().indices().prepareCreate("index1").setSource(leaderIndexSettings, XContentType.JSON))__        ensureLeaderYellow("index1")___        final int numDocs = randomIntBetween(2, 64)__        logger.info("Indexing [{}] docs as first batch", numDocs)__        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }__        final PutFollowAction.Request followRequest = putFollow("index1", "index2")__        PutFollowAction.Response response = followerClient().execute(PutFollowAction.INSTANCE, followRequest).get()__        assertTrue(response.isFollowIndexCreated())__        assertTrue(response.isFollowIndexShardsAcked())__        assertTrue(response.isIndexFollowingStarted())___        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 0_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i))__        }__        pauseFollow("index2")___        afterPausingFollower.run()___        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i * 2)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }_        leaderClient().prepareDelete("index1", "doc", "1").get()__        leaderClient().admin().indices().refresh(new RefreshRequest("index1")).actionGet()__        leaderClient().admin().indices().flush(new FlushRequest("index1").force(true)).actionGet()__        ForceMergeRequest forceMergeRequest = new ForceMergeRequest("index1")__        forceMergeRequest.maxNumSegments(1)__        leaderClient().admin().indices().forceMerge(forceMergeRequest).actionGet()___        followerClient().execute(ResumeFollowAction.INSTANCE, resumeFollow("index2")).get()___        assertBusy(() -> {_            List<ShardFollowNodeTaskStatus> statuses = getFollowTaskStatuses("index2")__            Set<ResourceNotFoundException> exceptions = statuses.stream()_                    .map(ShardFollowNodeTaskStatus::getFatalException)_                    .filter(Objects::nonNull)_                    .map(ExceptionsHelper::unwrapCause)_                    .filter(e -> e instanceof ResourceNotFoundException)_                    .map(e -> (ResourceNotFoundException) e)_                    .filter(e -> e.getMetadataKeys().contains("es.requested_operations_missing"))_                    .collect(Collectors.toSet())__            exceptionConsumer.accept(exceptions)__        })___        followerClient().admin().indices().prepareClose("index2").get()__        pauseFollow("index2")___        final PutFollowAction.Request followRequest2 = putFollow("index1", "index2")__        PutFollowAction.Response response2 = followerClient().execute(PutFollowAction.INSTANCE, followRequest2).get()__        assertTrue(response2.isFollowIndexCreated())__        assertTrue(response2.isFollowIndexShardsAcked())__        assertTrue(response2.isIndexFollowingStarted())___        ensureFollowerGreen("index2")__        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 2_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i, i * 2))__        }_    };runs,a,fall,behind,test,in,this,test,we,construct,a,situation,where,a,follower,is,paused,while,the,follower,is,paused,we,index,more,documents,that,causes,soft,deletes,on,the,leader,flush,them,and,run,a,force,merge,this,is,to,set,up,a,situation,where,the,operations,will,not,necessarily,be,there,with,retention,leases,in,place,we,would,actually,expect,the,operations,to,be,there,after,pausing,the,follower,the,specified,callback,is,executed,this,gives,a,test,an,opportunity,to,set,up,assumptions,for,example,a,test,might,remove,all,the,retention,leases,on,the,leader,to,set,up,a,situation,where,the,follower,will,fall,behind,when,it,is,resumed,because,the,operations,will,no,longer,be,held,on,the,leader,the,specified,exceptions,callback,is,invoked,after,resuming,the,follower,to,give,a,test,an,opportunity,to,assert,on,the,resource,not,found,exceptions,either,present,or,not,present,param,after,pausing,follower,the,callback,to,run,after,pausing,the,follower,param,exception,consumer,the,callback,to,run,on,a,collection,of,resource,not,found,exceptions,after,resuming,the,follower,throws,exception,if,a,checked,exception,is,thrown,during,the,test;private,void,run,fall,behind,test,final,checked,runnable,exception,after,pausing,follower,final,consumer,collection,resource,not,found,exception,exception,consumer,throws,exception,final,int,number,of,primary,shards,random,int,between,1,3,final,string,leader,index,settings,get,index,settings,number,of,primary,shards,between,0,1,singleton,map,index,settings,get,key,true,assert,acked,leader,client,admin,indices,prepare,create,index1,set,source,leader,index,settings,xcontent,type,json,ensure,leader,yellow,index1,final,int,num,docs,random,int,between,2,64,logger,info,indexing,docs,as,first,batch,num,docs,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,final,put,follow,action,request,follow,request,put,follow,index1,index2,put,follow,action,response,response,follower,client,execute,put,follow,action,instance,follow,request,get,assert,true,response,is,follow,index,created,assert,true,response,is,follow,index,shards,acked,assert,true,response,is,index,following,started,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,0,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,pause,follow,index2,after,pausing,follower,run,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,2,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,leader,client,prepare,delete,index1,doc,1,get,leader,client,admin,indices,refresh,new,refresh,request,index1,action,get,leader,client,admin,indices,flush,new,flush,request,index1,force,true,action,get,force,merge,request,force,merge,request,new,force,merge,request,index1,force,merge,request,max,num,segments,1,leader,client,admin,indices,force,merge,force,merge,request,action,get,follower,client,execute,resume,follow,action,instance,resume,follow,index2,get,assert,busy,list,shard,follow,node,task,status,statuses,get,follow,task,statuses,index2,set,resource,not,found,exception,exceptions,statuses,stream,map,shard,follow,node,task,status,get,fatal,exception,filter,objects,non,null,map,exceptions,helper,unwrap,cause,filter,e,e,instanceof,resource,not,found,exception,map,e,resource,not,found,exception,e,filter,e,e,get,metadata,keys,contains,es,collect,collectors,to,set,exception,consumer,accept,exceptions,follower,client,admin,indices,prepare,close,index2,get,pause,follow,index2,final,put,follow,action,request,follow,request2,put,follow,index1,index2,put,follow,action,response,response2,follower,client,execute,put,follow,action,instance,follow,request2,get,assert,true,response2,is,follow,index,created,assert,true,response2,is,follow,index,shards,acked,assert,true,response2,is,index,following,started,ensure,follower,green,index2,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,2,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,i,2
IndexFollowingIT -> private void runFallBehindTest(             final CheckedRunnable<Exception> afterPausingFollower,             final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception;1551110274;Runs a fall behind test. In this test, we construct a situation where a follower is paused. While the follower is paused we index_more documents that causes soft deletes on the leader, flush them, and run a force merge. This is to set up a situation where the_operations will not necessarily be there. With retention leases in place, we would actually expect the operations to be there. After_pausing the follower, the specified callback is executed. This gives a test an opportunity to set up assumptions. For example, a test_might remove all the retention leases on the leader to set up a situation where the follower will fall behind when it is resumed_because the operations will no longer be held on the leader. The specified exceptions callback is invoked after resuming the follower_to give a test an opportunity to assert on the resource not found exceptions (either present or not present).__@param afterPausingFollower the callback to run after pausing the follower_@param exceptionConsumer    the callback to run on a collection of resource not found exceptions after resuming the follower_@throws Exception if a checked exception is thrown during the test;private void runFallBehindTest(_            final CheckedRunnable<Exception> afterPausingFollower,_            final Consumer<Collection<ResourceNotFoundException>> exceptionConsumer) throws Exception {_        final int numberOfPrimaryShards = randomIntBetween(1, 3)__        final String leaderIndexSettings = getIndexSettings(numberOfPrimaryShards, between(0, 1),_                singletonMap(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), "true"))__        assertAcked(leaderClient().admin().indices().prepareCreate("index1").setSource(leaderIndexSettings, XContentType.JSON))__        ensureLeaderYellow("index1")___        final int numDocs = randomIntBetween(2, 64)__        logger.info("Indexing [{}] docs as first batch", numDocs)__        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }__        final PutFollowAction.Request followRequest = putFollow("index1", "index2")__        PutFollowAction.Response response = followerClient().execute(PutFollowAction.INSTANCE, followRequest).get()__        assertTrue(response.isFollowIndexCreated())__        assertTrue(response.isFollowIndexShardsAcked())__        assertTrue(response.isIndexFollowingStarted())___        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 0_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i))__        }__        pauseFollow("index2")___        afterPausingFollower.run()___        for (int i = 0_ i < numDocs_ i++) {_            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i * 2)__            leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get()__        }_        leaderClient().prepareDelete("index1", "doc", "1").get()__        leaderClient().admin().indices().refresh(new RefreshRequest("index1")).actionGet()__        leaderClient().admin().indices().flush(new FlushRequest("index1").force(true)).actionGet()__        ForceMergeRequest forceMergeRequest = new ForceMergeRequest("index1")__        forceMergeRequest.maxNumSegments(1)__        leaderClient().admin().indices().forceMerge(forceMergeRequest).actionGet()___        followerClient().execute(ResumeFollowAction.INSTANCE, resumeFollow("index2")).get()___        assertBusy(() -> {_            List<ShardFollowNodeTaskStatus> statuses = getFollowTaskStatuses("index2")__            Set<ResourceNotFoundException> exceptions = statuses.stream()_                    .map(ShardFollowNodeTaskStatus::getFatalException)_                    .filter(Objects::nonNull)_                    .map(ExceptionsHelper::unwrapCause)_                    .filter(e -> e instanceof ResourceNotFoundException)_                    .map(e -> (ResourceNotFoundException) e)_                    .filter(e -> e.getMetadataKeys().contains("es.requested_operations_missing"))_                    .collect(Collectors.toSet())__            exceptionConsumer.accept(exceptions)__        })___        followerClient().admin().indices().prepareClose("index2").get()__        pauseFollow("index2")___        final PutFollowAction.Request followRequest2 = putFollow("index1", "index2")__        PutFollowAction.Response response2 = followerClient().execute(PutFollowAction.INSTANCE, followRequest2).get()__        assertTrue(response2.isFollowIndexCreated())__        assertTrue(response2.isFollowIndexShardsAcked())__        assertTrue(response2.isIndexFollowingStarted())___        ensureFollowerGreen("index2")__        assertIndexFullyReplicatedToFollower("index1", "index2")__        for (int i = 2_ i < numDocs_ i++) {_            assertBusy(assertExpectedDocumentRunnable(i, i * 2))__        }_    };runs,a,fall,behind,test,in,this,test,we,construct,a,situation,where,a,follower,is,paused,while,the,follower,is,paused,we,index,more,documents,that,causes,soft,deletes,on,the,leader,flush,them,and,run,a,force,merge,this,is,to,set,up,a,situation,where,the,operations,will,not,necessarily,be,there,with,retention,leases,in,place,we,would,actually,expect,the,operations,to,be,there,after,pausing,the,follower,the,specified,callback,is,executed,this,gives,a,test,an,opportunity,to,set,up,assumptions,for,example,a,test,might,remove,all,the,retention,leases,on,the,leader,to,set,up,a,situation,where,the,follower,will,fall,behind,when,it,is,resumed,because,the,operations,will,no,longer,be,held,on,the,leader,the,specified,exceptions,callback,is,invoked,after,resuming,the,follower,to,give,a,test,an,opportunity,to,assert,on,the,resource,not,found,exceptions,either,present,or,not,present,param,after,pausing,follower,the,callback,to,run,after,pausing,the,follower,param,exception,consumer,the,callback,to,run,on,a,collection,of,resource,not,found,exceptions,after,resuming,the,follower,throws,exception,if,a,checked,exception,is,thrown,during,the,test;private,void,run,fall,behind,test,final,checked,runnable,exception,after,pausing,follower,final,consumer,collection,resource,not,found,exception,exception,consumer,throws,exception,final,int,number,of,primary,shards,random,int,between,1,3,final,string,leader,index,settings,get,index,settings,number,of,primary,shards,between,0,1,singleton,map,index,settings,get,key,true,assert,acked,leader,client,admin,indices,prepare,create,index1,set,source,leader,index,settings,xcontent,type,json,ensure,leader,yellow,index1,final,int,num,docs,random,int,between,2,64,logger,info,indexing,docs,as,first,batch,num,docs,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,final,put,follow,action,request,follow,request,put,follow,index1,index2,put,follow,action,response,response,follower,client,execute,put,follow,action,instance,follow,request,get,assert,true,response,is,follow,index,created,assert,true,response,is,follow,index,shards,acked,assert,true,response,is,index,following,started,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,0,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,pause,follow,index2,after,pausing,follower,run,for,int,i,0,i,num,docs,i,final,string,source,string,format,locale,root,f,d,i,2,leader,client,prepare,index,index1,doc,integer,to,string,i,set,source,source,xcontent,type,json,get,leader,client,prepare,delete,index1,doc,1,get,leader,client,admin,indices,refresh,new,refresh,request,index1,action,get,leader,client,admin,indices,flush,new,flush,request,index1,force,true,action,get,force,merge,request,force,merge,request,new,force,merge,request,index1,force,merge,request,max,num,segments,1,leader,client,admin,indices,force,merge,force,merge,request,action,get,follower,client,execute,resume,follow,action,instance,resume,follow,index2,get,assert,busy,list,shard,follow,node,task,status,statuses,get,follow,task,statuses,index2,set,resource,not,found,exception,exceptions,statuses,stream,map,shard,follow,node,task,status,get,fatal,exception,filter,objects,non,null,map,exceptions,helper,unwrap,cause,filter,e,e,instanceof,resource,not,found,exception,map,e,resource,not,found,exception,e,filter,e,e,get,metadata,keys,contains,es,collect,collectors,to,set,exception,consumer,accept,exceptions,follower,client,admin,indices,prepare,close,index2,get,pause,follow,index2,final,put,follow,action,request,follow,request2,put,follow,index1,index2,put,follow,action,response,response2,follower,client,execute,put,follow,action,instance,follow,request2,get,assert,true,response2,is,follow,index,created,assert,true,response2,is,follow,index,shards,acked,assert,true,response2,is,index,following,started,ensure,follower,green,index2,assert,index,fully,replicated,to,follower,index1,index2,for,int,i,2,i,num,docs,i,assert,busy,assert,expected,document,runnable,i,i,2
