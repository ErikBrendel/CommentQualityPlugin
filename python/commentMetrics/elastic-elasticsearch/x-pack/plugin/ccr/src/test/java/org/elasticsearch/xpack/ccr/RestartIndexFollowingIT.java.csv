commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected int numberOfNodesPerCluster() {     return 1. }
false;protected;0;4;;@Override protected boolean configureRemoteClusterViaNodeSettings() {     return false. }
false;public;0;50;;public void testFollowIndex() throws Exception {     final String leaderIndexSettings = getIndexSettings(1, 0, singletonMap(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), "true")).     assertAcked(leaderClient().admin().indices().prepareCreate("index1").setSource(leaderIndexSettings, XContentType.JSON)).     ensureLeaderGreen("index1").     setupRemoteCluster().     final PutFollowAction.Request followRequest = putFollow("index1", "index2").     followerClient().execute(PutFollowAction.INSTANCE, followRequest).get().     final long firstBatchNumDocs = randomIntBetween(2, 64).     logger.info("Indexing [{}] docs as first batch", firstBatchNumDocs).     for (int i = 0. i < firstBatchNumDocs. i++) {         final String source = String.format(Locale.ROOT, "{\"f\":%d}", i).         leaderClient().prepareIndex("index1", "doc", Integer.toString(i)).setSource(source, XContentType.JSON).get().     }     assertBusy(() -> {         assertThat(followerClient().prepareSearch("index2").get().getHits().getTotalHits().value, equalTo(firstBatchNumDocs)).     }).     getFollowerCluster().fullRestart().     ensureFollowerGreen("index2").     final long secondBatchNumDocs = randomIntBetween(2, 64).     for (int i = 0. i < secondBatchNumDocs. i++) {         leaderClient().prepareIndex("index1", "doc").setSource("{}", XContentType.JSON).get().     }     assertBusy(() -> {         assertThat(followerClient().prepareSearch("index2").get().getHits().getTotalHits().value, equalTo(firstBatchNumDocs + secondBatchNumDocs)).     }).     cleanRemoteCluster().     getLeaderCluster().fullRestart().     ensureLeaderGreen("index1").     // Remote connection needs to be re-configured, because all the nodes in leader cluster have been restarted:     setupRemoteCluster().     final long thirdBatchNumDocs = randomIntBetween(2, 64).     for (int i = 0. i < thirdBatchNumDocs. i++) {         leaderClient().prepareIndex("index1", "doc").setSource("{}", XContentType.JSON).get().     }     assertBusy(() -> {         assertThat(followerClient().prepareSearch("index2").get().getHits().getTotalHits().value, equalTo(firstBatchNumDocs + secondBatchNumDocs + thirdBatchNumDocs)).     }). }
false;private;0;13;;private void setupRemoteCluster() throws Exception {     ClusterUpdateSettingsRequest updateSettingsRequest = new ClusterUpdateSettingsRequest().     String address = getLeaderCluster().getMasterNodeInstance(TransportService.class).boundAddress().publishAddress().toString().     updateSettingsRequest.persistentSettings(Settings.builder().put("cluster.remote.leader_cluster.seeds", address)).     assertAcked(followerClient().admin().cluster().updateSettings(updateSettingsRequest).actionGet()).     assertBusy(() -> {         List<RemoteConnectionInfo> infos = followerClient().execute(RemoteInfoAction.INSTANCE, new RemoteInfoRequest()).get().getInfos().         assertThat(infos.size(), equalTo(1)).         assertThat(infos.get(0).getNumNodesConnected(), greaterThanOrEqualTo(1)).     }). }
false;private;0;11;;private void cleanRemoteCluster() throws Exception {     ClusterUpdateSettingsRequest updateSettingsRequest = new ClusterUpdateSettingsRequest().     updateSettingsRequest.persistentSettings(Settings.builder().put("cluster.remote.leader_cluster.seeds", (String) null)).     assertAcked(followerClient().admin().cluster().updateSettings(updateSettingsRequest).actionGet()).     assertBusy(() -> {         List<RemoteConnectionInfo> infos = followerClient().execute(RemoteInfoAction.INSTANCE, new RemoteInfoRequest()).get().getInfos().         assertThat(infos.size(), equalTo(0)).     }). }
