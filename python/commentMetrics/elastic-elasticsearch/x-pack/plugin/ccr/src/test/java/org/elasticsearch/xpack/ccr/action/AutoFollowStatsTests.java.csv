commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected AutoFollowStats doParseInstance(XContentParser parser) throws IOException {     return AutoFollowStats.fromXContent(parser). }
false;protected;0;10;;@Override protected AutoFollowStats createTestInstance() {     return new AutoFollowStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomReadExceptions(), randomTrackingClusters()). }
false;static;0;9;;static NavigableMap<String, Tuple<Long, ElasticsearchException>> randomReadExceptions() {     final int count = randomIntBetween(0, 16).     final NavigableMap<String, Tuple<Long, ElasticsearchException>> readExceptions = new TreeMap<>().     for (int i = 0. i < count. i++) {         readExceptions.put("" + i, Tuple.tuple(randomNonNegativeLong(), new ElasticsearchException(new IllegalStateException("index [" + i + "]")))).     }     return readExceptions. }
false;static;0;8;;static NavigableMap<String, AutoFollowedCluster> randomTrackingClusters() {     final int count = randomIntBetween(0, 16).     final NavigableMap<String, AutoFollowedCluster> readExceptions = new TreeMap<>().     for (int i = 0. i < count. i++) {         readExceptions.put("" + i, new AutoFollowedCluster(randomLong(), randomNonNegativeLong())).     }     return readExceptions. }
false;protected;0;4;;@Override protected Writeable.Reader<AutoFollowStats> instanceReader() {     return AutoFollowStats::new. }
false;protected;2;25;;@Override protected void assertEqualInstances(AutoFollowStats expectedInstance, AutoFollowStats newInstance) {     assertNotSame(expectedInstance, newInstance).     assertThat(newInstance.getNumberOfFailedRemoteClusterStateRequests(), equalTo(expectedInstance.getNumberOfFailedRemoteClusterStateRequests())).     assertThat(newInstance.getNumberOfFailedFollowIndices(), equalTo(expectedInstance.getNumberOfFailedFollowIndices())).     assertThat(newInstance.getNumberOfSuccessfulFollowIndices(), equalTo(expectedInstance.getNumberOfSuccessfulFollowIndices())).     assertThat(newInstance.getRecentAutoFollowErrors().size(), equalTo(expectedInstance.getRecentAutoFollowErrors().size())).     assertThat(newInstance.getRecentAutoFollowErrors().keySet(), equalTo(expectedInstance.getRecentAutoFollowErrors().keySet())).     for (final Map.Entry<String, Tuple<Long, ElasticsearchException>> entry : newInstance.getRecentAutoFollowErrors().entrySet()) {         // x-content loses the exception         final Tuple<Long, ElasticsearchException> expected = expectedInstance.getRecentAutoFollowErrors().get(entry.getKey()).         assertThat(entry.getValue().v1(), equalTo(expected.v1())).         assertThat(entry.getValue().v2().getMessage(), containsString(expected.v2().getMessage())).         assertNotNull(entry.getValue().v2().getCause()).         assertThat(entry.getValue().v2().getCause(), anyOf(instanceOf(ElasticsearchException.class), instanceOf(IllegalStateException.class))).         assertThat(entry.getValue().v2().getCause().getMessage(), containsString(expected.v2().getCause().getMessage())).     }     assertThat(newInstance.getAutoFollowedClusters(), equalTo(expectedInstance.getAutoFollowedClusters())). }
false;protected;0;4;;@Override protected boolean assertToXContentEquivalence() {     return false. }
