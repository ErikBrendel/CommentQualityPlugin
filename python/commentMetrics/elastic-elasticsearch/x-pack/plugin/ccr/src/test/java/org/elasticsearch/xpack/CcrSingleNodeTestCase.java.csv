commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;13;;@Override protected Settings nodeSettings() {     Settings.Builder builder = Settings.builder().     builder.put(XPackSettings.SECURITY_ENABLED.getKey(), false).     builder.put(XPackSettings.MONITORING_ENABLED.getKey(), false).     builder.put(XPackSettings.WATCHER_ENABLED.getKey(), false).     builder.put(XPackSettings.MACHINE_LEARNING_ENABLED.getKey(), false).     builder.put(XPackSettings.LOGSTASH_ENABLED.getKey(), false).     builder.put(LicenseService.SELF_GENERATED_LICENSE_TYPE.getKey(), "trial").     // Let cluster state api return quickly in order to speed up auto follow tests:     builder.put(CcrSettings.CCR_WAIT_FOR_METADATA_TIMEOUT.getKey(), TimeValue.timeValueMillis(100)).     return builder.build(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return Collections.singletonList(LocalStateCcr.class). }
false;public;0;13;;@Before public void setupLocalRemote() throws Exception {     ClusterUpdateSettingsRequest updateSettingsRequest = new ClusterUpdateSettingsRequest().     String address = getInstanceFromNode(TransportService.class).boundAddress().publishAddress().toString().     updateSettingsRequest.transientSettings(Settings.builder().put("cluster.remote.local.seeds", address)).     assertAcked(client().admin().cluster().updateSettings(updateSettingsRequest).actionGet()).     assertBusy(() -> {         List<RemoteConnectionInfo> infos = client().execute(RemoteInfoAction.INSTANCE, new RemoteInfoRequest()).get().getInfos().         assertThat(infos.size(), equalTo(1)).         assertThat(infos.get(0).getNumNodesConnected(), equalTo(1)).     }). }
false;public;0;4;;@Before public void waitForTrialLicenseToBeGenerated() throws Exception {     assertBusy(() -> assertNotNull(getInstanceFromNode(ClusterService.class).state().metaData().custom(LicensesMetaData.TYPE))). }
false;public;0;5;;@After public void purgeCCRMetadata() throws Exception {     ClusterService clusterService = getInstanceFromNode(ClusterService.class).     removeCCRRelatedMetadataFromClusterState(clusterService). }
false;public;0;11;;@After public void removeLocalRemote() throws Exception {     ClusterUpdateSettingsRequest updateSettingsRequest = new ClusterUpdateSettingsRequest().     updateSettingsRequest.transientSettings(Settings.builder().put("cluster.remote.local.seeds", (String) null)).     assertAcked(client().admin().cluster().updateSettings(updateSettingsRequest).actionGet()).     assertBusy(() -> {         List<RemoteConnectionInfo> infos = client().execute(RemoteInfoAction.INSTANCE, new RemoteInfoRequest()).get().getInfos().         assertThat(infos.size(), equalTo(0)).     }). }
false;protected;0;3;;protected AutoFollowStats getAutoFollowStats() {     return client().execute(CcrStatsAction.INSTANCE, new CcrStatsAction.Request()).actionGet().getAutoFollowStats(). }
false;protected;1;7;;protected ResumeFollowAction.Request getResumeFollowRequest(String followerIndex) {     ResumeFollowAction.Request request = new ResumeFollowAction.Request().     request.setFollowerIndex(followerIndex).     request.getParameters().setMaxRetryDelay(TimeValue.timeValueMillis(1)).     request.getParameters().setReadPollTimeout(TimeValue.timeValueMillis(1)).     return request. }
false;protected;2;10;;protected PutFollowAction.Request getPutFollowRequest(String leaderIndex, String followerIndex) {     PutFollowAction.Request request = new PutFollowAction.Request().     request.setRemoteCluster("local").     request.setLeaderIndex(leaderIndex).     request.setFollowerIndex(followerIndex).     request.getParameters().setMaxRetryDelay(TimeValue.timeValueMillis(1)).     request.getParameters().setReadPollTimeout(TimeValue.timeValueMillis(1)).     request.waitForActiveShards(ActiveShardCount.ONE).     return request. }
false;protected;0;11;;protected void ensureEmptyWriteBuffers() throws Exception {     assertBusy(() -> {         FollowStatsAction.StatsResponses statsResponses = client().execute(FollowStatsAction.INSTANCE, new FollowStatsAction.StatsRequest()).actionGet().         for (FollowStatsAction.StatsResponse statsResponse : statsResponses.getStatsResponses()) {             ShardFollowNodeTaskStatus status = statsResponse.status().             assertThat(status.writeBufferOperationCount(), equalTo(0)).             assertThat(status.writeBufferSizeInBytes(), equalTo(0L)).         }     }). }
