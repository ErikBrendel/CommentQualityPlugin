commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void init() {     licenseState = mock(XPackLicenseState.class).     clusterService = mock(ClusterService.class). }
false;public;0;12;;public void testAvailable() {     CCRFeatureSet featureSet = new CCRFeatureSet(Settings.EMPTY, licenseState, clusterService).     when(licenseState.isCcrAllowed()).thenReturn(false).     assertThat(featureSet.available(), equalTo(false)).     when(licenseState.isCcrAllowed()).thenReturn(true).     assertThat(featureSet.available(), equalTo(true)).     featureSet = new CCRFeatureSet(Settings.EMPTY, null, clusterService).     assertThat(featureSet.available(), equalTo(false)). }
false;public;0;9;;public void testEnabled() {     Settings.Builder settings = Settings.builder().put("xpack.ccr.enabled", false).     CCRFeatureSet featureSet = new CCRFeatureSet(settings.build(), licenseState, clusterService).     assertThat(featureSet.enabled(), equalTo(false)).     settings = Settings.builder().put("xpack.ccr.enabled", true).     featureSet = new CCRFeatureSet(settings.build(), licenseState, clusterService).     assertThat(featureSet.enabled(), equalTo(true)). }
false;public;0;4;;public void testName() {     CCRFeatureSet featureSet = new CCRFeatureSet(Settings.EMPTY, licenseState, clusterService).     assertThat(featureSet.name(), equalTo("ccr")). }
false;public;0;4;;public void testNativeCodeInfo() {     CCRFeatureSet featureSet = new CCRFeatureSet(Settings.EMPTY, licenseState, clusterService).     assertNull(featureSet.nativeCodeInfo()). }
false;public;0;49;;public void testUsageStats() throws Exception {     MetaData.Builder metaData = MetaData.builder().     int numFollowerIndices = randomIntBetween(0, 32).     for (int i = 0. i < numFollowerIndices. i++) {         IndexMetaData.Builder followerIndex = IndexMetaData.builder("follow_index" + i).settings(settings(Version.CURRENT).put(CcrSettings.CCR_FOLLOWING_INDEX_SETTING.getKey(), true)).numberOfShards(1).numberOfReplicas(0).creationDate(i).putCustom(Ccr.CCR_CUSTOM_METADATA_KEY, new HashMap<>()).         metaData.put(followerIndex).     }     // Add a regular index, to check that we do not take that one into account:     IndexMetaData.Builder regularIndex = IndexMetaData.builder("my_index").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0).creationDate(numFollowerIndices).     metaData.put(regularIndex).     int numAutoFollowPatterns = randomIntBetween(0, 32).     Map<String, AutoFollowMetadata.AutoFollowPattern> patterns = new HashMap<>(numAutoFollowPatterns).     for (int i = 0. i < numAutoFollowPatterns. i++) {         AutoFollowMetadata.AutoFollowPattern pattern = new AutoFollowMetadata.AutoFollowPattern("remote_cluser", Collections.singletonList("logs" + i + "*"), null, null, null, null, null, null, null, null, null, null, null).         patterns.put("pattern" + i, pattern).     }     metaData.putCustom(AutoFollowMetadata.TYPE, new AutoFollowMetadata(patterns, Collections.emptyMap(), Collections.emptyMap())).     ClusterState clusterState = ClusterState.builder(new ClusterName("_name")).metaData(metaData).build().     Mockito.when(clusterService.state()).thenReturn(clusterState).     PlainActionFuture<XPackFeatureSet.Usage> future = new PlainActionFuture<>().     CCRFeatureSet ccrFeatureSet = new CCRFeatureSet(Settings.EMPTY, licenseState, clusterService).     ccrFeatureSet.usage(future).     CCRFeatureSet.Usage ccrUsage = (CCRFeatureSet.Usage) future.get().     assertThat(ccrUsage.enabled(), equalTo(ccrFeatureSet.enabled())).     assertThat(ccrUsage.available(), equalTo(ccrFeatureSet.available())).     assertThat(ccrUsage.getNumberOfFollowerIndices(), equalTo(numFollowerIndices)).     if (numFollowerIndices != 0) {         assertThat(ccrUsage.getLastFollowTimeInMillis(), greaterThanOrEqualTo(0L)).     } else {         assertThat(ccrUsage.getLastFollowTimeInMillis(), nullValue()).     }     assertThat(ccrUsage.getNumberOfAutoFollowPatterns(), equalTo(numAutoFollowPatterns)). }
