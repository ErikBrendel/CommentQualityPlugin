commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testEnabledSetting() throws Exception {     boolean enabled = randomBoolean().     Settings settings = Settings.builder().put("path.home", createTempDir()).put("xpack.logstash.enabled", enabled).build().     LogstashFeatureSet featureSet = new LogstashFeatureSet(settings, null).     assertThat(featureSet.enabled(), is(enabled)).     PlainActionFuture<XPackFeatureSet.Usage> future = new PlainActionFuture<>().     featureSet.usage(future).     XPackFeatureSet.Usage usage = future.get().     BytesStreamOutput out = new BytesStreamOutput().     usage.writeTo(out).     XPackFeatureSet.Usage serializedUsage = new LogstashFeatureSetUsage(out.bytes().streamInput()).     assertThat(serializedUsage.enabled(), is(enabled)). }
false;public;0;5;;public void testEnabledDefault() throws Exception {     Settings settings = Settings.builder().put("path.home", createTempDir()).build().     LogstashFeatureSet featureSet = new LogstashFeatureSet(settings, null).     assertThat(featureSet.enabled(), is(true)). }
false;public;0;17;;public void testAvailable() throws Exception {     final XPackLicenseState licenseState = mock(XPackLicenseState.class).     LogstashFeatureSet featureSet = new LogstashFeatureSet(Settings.EMPTY, licenseState).     boolean available = randomBoolean().     when(licenseState.isLogstashAllowed()).thenReturn(available).     assertThat(featureSet.available(), is(available)).     PlainActionFuture<XPackFeatureSet.Usage> future = new PlainActionFuture<>().     featureSet.usage(future).     XPackFeatureSet.Usage usage = future.get().     assertThat(usage.available(), is(available)).     BytesStreamOutput out = new BytesStreamOutput().     usage.writeTo(out).     XPackFeatureSet.Usage serializedUsage = new LogstashFeatureSetUsage(out.bytes().streamInput()).     assertThat(serializedUsage.available(), is(available)). }
