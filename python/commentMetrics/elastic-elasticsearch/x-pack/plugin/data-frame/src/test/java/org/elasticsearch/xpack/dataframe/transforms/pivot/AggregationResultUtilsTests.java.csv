commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NamedXContentRegistry xContentRegistry() {     return namedXContentRegistry. }
false;public;0;52;;public void testExtractCompositeAggregationResults() throws IOException {     String targetField = randomAlphaOfLengthBetween(5, 10).     GroupConfig groupBy = parseGroupConfig("{ \"" + targetField + "\" : {" + "\"terms\" : {" + "   \"field\" : \"doesn't_matter_for_this_test\"" + "} } }").     String aggName = randomAlphaOfLengthBetween(5, 10).     String aggTypedName = "avg#" + aggName.     Collection<AggregationBuilder> aggregationBuilders = Collections.singletonList(AggregationBuilders.avg(aggName)).     Map<String, Object> input = asMap("buckets", asList(asMap(KEY, asMap(targetField, "ID1"), aggTypedName, asMap("value", 42.33), DOC_COUNT, 8), asMap(KEY, asMap(targetField, "ID2"), aggTypedName, asMap("value", 28.99), DOC_COUNT, 3), asMap(KEY, asMap(targetField, "ID3"), aggTypedName, asMap("value", 12.55), DOC_COUNT, 9))).     List<Map<String, Object>> expected = asList(asMap(targetField, "ID1", aggName, 42.33), asMap(targetField, "ID2", aggName, 28.99), asMap(targetField, "ID3", aggName, 12.55)).     executeTest(groupBy, aggregationBuilders, input, expected, 20). }
false;public;0;80;;public void testExtractCompositeAggregationResultsMultiSources() throws IOException {     String targetField = randomAlphaOfLengthBetween(5, 10).     String targetField2 = randomAlphaOfLengthBetween(5, 10) + "_2".     GroupConfig groupBy = parseGroupConfig("{" + "\"" + targetField + "\" : {" + "  \"terms\" : {" + "     \"field\" : \"doesn't_matter_for_this_test\"" + "  } }," + "\"" + targetField2 + "\" : {" + "  \"terms\" : {" + "     \"field\" : \"doesn't_matter_for_this_test\"" + "  } }" + "}").     String aggName = randomAlphaOfLengthBetween(5, 10).     String aggTypedName = "avg#" + aggName.     Collection<AggregationBuilder> aggregationBuilders = Collections.singletonList(AggregationBuilders.avg(aggName)).     Map<String, Object> input = asMap("buckets", asList(asMap(KEY, asMap(targetField, "ID1", targetField2, "ID1_2"), aggTypedName, asMap("value", 42.33), DOC_COUNT, 1), asMap(KEY, asMap(targetField, "ID1", targetField2, "ID2_2"), aggTypedName, asMap("value", 8.4), DOC_COUNT, 2), asMap(KEY, asMap(targetField, "ID2", targetField2, "ID1_2"), aggTypedName, asMap("value", 28.99), DOC_COUNT, 3), asMap(KEY, asMap(targetField, "ID3", targetField2, "ID2_2"), aggTypedName, asMap("value", 12.55), DOC_COUNT, 4))).     List<Map<String, Object>> expected = asList(asMap(targetField, "ID1", targetField2, "ID1_2", aggName, 42.33), asMap(targetField, "ID1", targetField2, "ID2_2", aggName, 8.4), asMap(targetField, "ID2", targetField2, "ID1_2", aggName, 28.99), asMap(targetField, "ID3", targetField2, "ID2_2", aggName, 12.55)).     executeTest(groupBy, aggregationBuilders, input, expected, 10). }
false;public;0;64;;public void testExtractCompositeAggregationResultsMultiAggregations() throws IOException {     String targetField = randomAlphaOfLengthBetween(5, 10).     GroupConfig groupBy = parseGroupConfig("{\"" + targetField + "\" : {" + "\"terms\" : {" + "   \"field\" : \"doesn't_matter_for_this_test\"" + "} } }").     String aggName = randomAlphaOfLengthBetween(5, 10).     String aggTypedName = "avg#" + aggName.     String aggName2 = randomAlphaOfLengthBetween(5, 10) + "_2".     String aggTypedName2 = "max#" + aggName2.     Collection<AggregationBuilder> aggregationBuilders = asList(AggregationBuilders.avg(aggName), AggregationBuilders.max(aggName2)).     Map<String, Object> input = asMap("buckets", asList(asMap(KEY, asMap(targetField, "ID1"), aggTypedName, asMap("value", 42.33), aggTypedName2, asMap("value", 9.9), DOC_COUNT, 111), asMap(KEY, asMap(targetField, "ID2"), aggTypedName, asMap("value", 28.99), aggTypedName2, asMap("value", 222.33), DOC_COUNT, 88), asMap(KEY, asMap(targetField, "ID3"), aggTypedName, asMap("value", 12.55), aggTypedName2, asMap("value", -2.44), DOC_COUNT, 1))).     List<Map<String, Object>> expected = asList(asMap(targetField, "ID1", aggName, 42.33, aggName2, 9.9), asMap(targetField, "ID2", aggName, 28.99, aggName2, 222.33), asMap(targetField, "ID3", aggName, 12.55, aggName2, -2.44)).     executeTest(groupBy, aggregationBuilders, input, expected, 200). }
false;private;5;15;;private void executeTest(GroupConfig groups, Collection<AggregationBuilder> aggregationBuilders, Map<String, Object> input, List<Map<String, Object>> expected, long expectedDocCounts) throws IOException {     DataFrameIndexerTransformStats stats = new DataFrameIndexerTransformStats().     XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values())).     builder.map(input).     try (XContentParser parser = createParser(builder)) {         CompositeAggregation agg = ParsedComposite.fromXContent(parser, "my_feature").         List<Map<String, Object>> result = AggregationResultUtils.extractCompositeAggregationResults(agg, groups, aggregationBuilders, stats).collect(Collectors.toList()).         assertEquals(expected, result).         assertEquals(expectedDocCounts, stats.getNumDocuments()).     } }
false;private;1;5;;private GroupConfig parseGroupConfig(String json) throws IOException {     final XContentParser parser = XContentType.JSON.xContent().createParser(xContentRegistry(), DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     return GroupConfig.fromXContent(parser, false). }
false;static;1;9;;static Map<String, Object> asMap(Object... fields) {     assert fields.length % 2 == 0.     final Map<String, Object> map = new HashMap<>().     for (int i = 0. i < fields.length. i += 2) {         String field = (String) fields[i].         map.put(field, fields[i + 1]).     }     return map. }
