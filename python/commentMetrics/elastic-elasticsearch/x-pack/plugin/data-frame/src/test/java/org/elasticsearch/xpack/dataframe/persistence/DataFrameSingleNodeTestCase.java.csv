commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void waitForTemplates() throws Exception {     assertBusy(() -> {         ClusterState state = client().admin().cluster().prepareState().get().getState().         assertTrue("Timed out waiting for the data frame templates to be installed", TemplateUtils.checkTemplateExistsAndVersionIsGTECurrentVersion(DataFrameInternalIndex.INDEX_TEMPLATE_NAME, state)).     }). }
false;protected;0;7;;@Override protected Settings nodeSettings() {     Settings.Builder newSettings = Settings.builder().     newSettings.put(super.nodeSettings()).     return newSettings.build(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(LocalStateDataFrame.class). }
false;protected;4;25;;protected <T> void assertAsync(Consumer<ActionListener<T>> function, T expected, CheckedConsumer<T, ? extends Exception> onAnswer, Consumer<Exception> onException) throws InterruptedException {     CountDownLatch latch = new CountDownLatch(1).     LatchedActionListener<T> listener = new LatchedActionListener<>(ActionListener.wrap(r -> {         if (expected == null) {             fail("expected an exception but got a response").         } else {             assertEquals(r, expected).         }         if (onAnswer != null) {             onAnswer.accept(r).         }     }, e -> {         if (onException == null) {             fail("got unexpected exception: " + e.getMessage()).         } else {             onException.accept(e).         }     }), latch).     function.accept(listener).     latch.await(10, TimeUnit.SECONDS). }
