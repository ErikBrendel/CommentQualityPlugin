commented;modifiers;parameterAmount;loc;comment;code
false;public;2;30;;public void putTransformConfiguration(DataFrameTransformConfig transformConfig, ActionListener<Boolean> listener) {     try (XContentBuilder builder = XContentFactory.jsonBuilder()) {         XContentBuilder source = transformConfig.toXContent(builder, new ToXContent.MapParams(TO_XCONTENT_PARAMS)).         IndexRequest indexRequest = new IndexRequest(DataFrameInternalIndex.INDEX_NAME).opType(DocWriteRequest.OpType.CREATE).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).id(DataFrameTransformConfig.documentId(transformConfig.getId())).source(source).         executeAsyncWithOrigin(client, DATA_FRAME_ORIGIN, IndexAction.INSTANCE, indexRequest, ActionListener.wrap(r -> {             listener.onResponse(true).         }, e -> {             if (e instanceof VersionConflictEngineException) {                 // the transform already exists                 listener.onFailure(new ResourceAlreadyExistsException(DataFrameMessages.getMessage(DataFrameMessages.REST_PUT_DATA_FRAME_TRANSFORM_EXISTS, transformConfig.getId()))).             } else {                 listener.onFailure(new RuntimeException(DataFrameMessages.REST_PUT_DATA_FRAME_FAILED_PERSIST_TRANSFORM_CONFIGURATION, e)).             }         })).     } catch (IOException e) {         // not expected to happen but for the sake of completeness         listener.onFailure(new ElasticsearchParseException(DataFrameMessages.getMessage(DataFrameMessages.REST_DATA_FRAME_FAILED_TO_SERIALIZE_TRANSFORM, transformConfig.getId()), e)).     } }
false;public;2;20;;public void getTransformConfiguration(String transformId, ActionListener<DataFrameTransformConfig> resultListener) {     GetRequest getRequest = new GetRequest(DataFrameInternalIndex.INDEX_NAME, DataFrameTransformConfig.documentId(transformId)).     executeAsyncWithOrigin(client, DATA_FRAME_ORIGIN, GetAction.INSTANCE, getRequest, ActionListener.wrap(getResponse -> {         if (getResponse.isExists() == false) {             resultListener.onFailure(new ResourceNotFoundException(DataFrameMessages.getMessage(DataFrameMessages.REST_DATA_FRAME_UNKNOWN_TRANSFORM, transformId))).             return.         }         BytesReference source = getResponse.getSourceAsBytesRef().         parseTransformLenientlyFromSource(source, transformId, resultListener).     }, e -> {         if (e.getClass() == IndexNotFoundException.class) {             resultListener.onFailure(new ResourceNotFoundException(DataFrameMessages.getMessage(DataFrameMessages.REST_DATA_FRAME_UNKNOWN_TRANSFORM, transformId))).         } else {             resultListener.onFailure(e).         }     })). }
false;public;2;21;;public void deleteTransformConfiguration(String transformId, ActionListener<Boolean> listener) {     DeleteRequest request = new DeleteRequest(DataFrameInternalIndex.INDEX_NAME, DataFrameTransformConfig.documentId(transformId)).     request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).     executeAsyncWithOrigin(client, DATA_FRAME_ORIGIN, DeleteAction.INSTANCE, request, ActionListener.wrap(deleteResponse -> {         if (deleteResponse.getResult() == DocWriteResponse.Result.NOT_FOUND) {             listener.onFailure(new ResourceNotFoundException(DataFrameMessages.getMessage(DataFrameMessages.REST_DATA_FRAME_UNKNOWN_TRANSFORM, transformId))).             return.         }         listener.onResponse(true).     }, e -> {         if (e.getClass() == IndexNotFoundException.class) {             listener.onFailure(new ResourceNotFoundException(DataFrameMessages.getMessage(DataFrameMessages.REST_DATA_FRAME_UNKNOWN_TRANSFORM, transformId))).         } else {             listener.onFailure(e).         }     })). }
false;private;3;11;;private void parseTransformLenientlyFromSource(BytesReference source, String transformId, ActionListener<DataFrameTransformConfig> transformListener) {     try (InputStream stream = source.streamInput().         XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, stream)) {         transformListener.onResponse(DataFrameTransformConfig.fromXContent(parser, transformId, true)).     } catch (Exception e) {         logger.error(DataFrameMessages.getMessage(DataFrameMessages.FAILED_TO_PARSE_TRANSFORM_CONFIGURATION, transformId), e).         transformListener.onFailure(e).     } }
