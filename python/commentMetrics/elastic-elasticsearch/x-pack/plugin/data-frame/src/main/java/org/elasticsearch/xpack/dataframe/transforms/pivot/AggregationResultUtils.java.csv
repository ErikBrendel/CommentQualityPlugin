commented;modifiers;parameterAmount;loc;comment;code
true;public,static;4;31;/**  * Extracts aggregation results from a composite aggregation and puts it into a map.  *  * @param agg The aggregation result  * @param groups The original groupings used for querying  * @param aggregationBuilders the aggregation used for querying  * @param dataFrameIndexerTransformStats stats collector  * @return a map containing the results of the aggregation in a consumable way  */ ;/**  * Extracts aggregation results from a composite aggregation and puts it into a map.  *  * @param agg The aggregation result  * @param groups The original groupings used for querying  * @param aggregationBuilders the aggregation used for querying  * @param dataFrameIndexerTransformStats stats collector  * @return a map containing the results of the aggregation in a consumable way  */ public static Stream<Map<String, Object>> extractCompositeAggregationResults(CompositeAggregation agg, GroupConfig groups, Collection<AggregationBuilder> aggregationBuilders, DataFrameIndexerTransformStats dataFrameIndexerTransformStats) {     return agg.getBuckets().stream().map(bucket -> {         dataFrameIndexerTransformStats.incrementNumDocuments(bucket.getDocCount()).         Map<String, Object> document = new HashMap<>().         groups.getGroups().keySet().forEach(destinationFieldName -> {             document.put(destinationFieldName, bucket.getKey().get(destinationFieldName)).         }).         for (AggregationBuilder aggregationBuilder : aggregationBuilders) {             String aggName = aggregationBuilder.getName().             // TODO: support other aggregation types             Aggregation aggResult = bucket.getAggregations().get(aggName).             if (aggResult instanceof NumericMetricsAggregation.SingleValue) {                 NumericMetricsAggregation.SingleValue aggResultSingleValue = (SingleValue) aggResult.                 document.put(aggName, aggResultSingleValue.value()).             } else {                 // Execution should never reach this point!                 // Creating transforms with unsupported aggregations shall not be possible                 logger.error("Dataframe Internal Error: unsupported aggregation [" + aggResult.getName() + "], ignoring").                 assert false.             }         }         return document.     }). }
