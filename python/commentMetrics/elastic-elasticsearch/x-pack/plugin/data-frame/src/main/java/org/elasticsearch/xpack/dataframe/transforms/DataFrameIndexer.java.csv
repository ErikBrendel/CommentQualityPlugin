commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract DataFrameTransformConfig getConfig().
false;protected;1;6;;@Override protected void onStartJob(long now) {     QueryBuilder queryBuilder = getConfig().getQueryConfig().getQuery().     pivot = new Pivot(getConfig().getSource(), queryBuilder, getConfig().getPivotConfig()). }
false;protected;1;6;;@Override protected IterationResult<Map<String, Object>> doProcess(SearchResponse searchResponse) {     final CompositeAggregation agg = searchResponse.getAggregations().get(COMPOSITE_AGGREGATION_NAME).     return new IterationResult<>(processBucketsToIndexRequests(agg).collect(Collectors.toList()), agg.afterKey(), agg.getBuckets().isEmpty()). }
true;private;1;17;/*      * Parses the result and creates a stream of indexable documents      *      * Implementation decisions:      *      * Extraction uses generic maps as intermediate exchange format in order to hook in ingest pipelines/processors      * in later versions, see {@link IngestDocument).      */ ;/*      * Parses the result and creates a stream of indexable documents      *      * Implementation decisions:      *      * Extraction uses generic maps as intermediate exchange format in order to hook in ingest pipelines/processors      * in later versions, see {@link IngestDocument).      */ private Stream<IndexRequest> processBucketsToIndexRequests(CompositeAggregation agg) {     final DataFrameTransformConfig transformConfig = getConfig().     String indexName = transformConfig.getDestination().     return pivot.extractResults(agg, getStats()).map(document -> {         XContentBuilder builder.         try {             builder = jsonBuilder().             builder.map(document).         } catch (IOException e) {             throw new UncheckedIOException(e).         }         IndexRequest request = new IndexRequest(indexName).source(builder).         return request.     }). }
false;protected;0;4;;@Override protected SearchRequest buildSearchRequest() {     return pivot.buildSearchRequest(getPosition()). }
