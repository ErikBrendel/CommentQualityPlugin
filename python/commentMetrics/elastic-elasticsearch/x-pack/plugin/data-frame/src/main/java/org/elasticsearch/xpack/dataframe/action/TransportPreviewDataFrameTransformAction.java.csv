commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;18;;@Override protected void doExecute(Task task, PreviewDataFrameTransformAction.Request request, ActionListener<PreviewDataFrameTransformAction.Response> listener) {     if (!licenseState.isDataFrameAllowed()) {         listener.onFailure(LicenseUtils.newComplianceException(XPackField.DATA_FRAME)).         return.     }     Pivot pivot = new Pivot(request.getConfig().getSource(), request.getConfig().getQueryConfig().getQuery(), request.getConfig().getPivotConfig()).     getPreview(pivot, ActionListener.wrap(previewResponse -> listener.onResponse(new PreviewDataFrameTransformAction.Response(previewResponse)), listener::onFailure)). }
false;private;2;15;;private void getPreview(Pivot pivot, ActionListener<List<Map<String, Object>>> listener) {     ClientHelper.executeWithHeadersAsync(threadPool.getThreadContext().getHeaders(), ClientHelper.DATA_FRAME_ORIGIN, client, SearchAction.INSTANCE, pivot.buildSearchRequest(null), ActionListener.wrap(r -> {         final CompositeAggregation agg = r.getAggregations().get(COMPOSITE_AGGREGATION_NAME).         DataFrameIndexerTransformStats stats = new DataFrameIndexerTransformStats().         listener.onResponse(pivot.extractResults(agg, stats).collect(Collectors.toList())).     }, listener::onFailure)). }
