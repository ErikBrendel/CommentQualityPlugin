commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;8;;@Override protected Response newResponse(Request request, List<Response> tasks, List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {     assert tasks.size() + taskOperationFailures.size() == 1.     boolean cancelled = tasks.size() > 0 && tasks.stream().allMatch(Response::isDeleted).     return new Response(cancelled, taskOperationFailures, failedNodeExceptions). }
false;protected;3;14;;@Override protected void taskOperation(Request request, DataFrameTransformTask task, ActionListener<Response> listener) {     assert task.getTransformId().equals(request.getId()).     IndexerState state = task.getState().getIndexerState().     if (state.equals(IndexerState.STOPPED)) {         task.onCancelled().         transformsConfigManager.deleteTransformConfiguration(request.getId(), ActionListener.wrap(r -> {             listener.onResponse(new Response(true)).         }, listener::onFailure)).     } else {         listener.onFailure(new IllegalStateException("Could not delete transform [" + request.getId() + "] because " + "indexer state is [" + state + "].  Transform must be [" + IndexerState.STOPPED + "] before deletion.")).     } }
false;protected;3;29;;@Override protected void doExecute(Task task, Request request, ActionListener<Response> listener) {     final ClusterState state = clusterService.state().     final DiscoveryNodes nodes = state.nodes().     if (nodes.isLocalNodeElectedMaster()) {         PersistentTasksCustomMetaData pTasksMeta = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE).         if (pTasksMeta != null && pTasksMeta.getTask(request.getId()) != null) {             super.doExecute(task, request, listener).         } else {             // we couldn't find the transform in the persistent task CS, but maybe the transform exists in the configuration index,             // if so delete the orphaned document and do not throw (for the normal case we want to stop the task first,             // than delete the configuration document if and only if the data frame transform is in stopped state)             transformsConfigManager.deleteTransformConfiguration(request.getId(), ActionListener.wrap(r -> {                 listener.onResponse(new Response(true)).                 return.             }, listener::onFailure)).         }     } else {         // on the master, which makes testing difficult.         if (nodes.getMasterNode() == null) {             listener.onFailure(new MasterNotDiscoveredException("no known master nodes")).         } else {             transportService.sendRequest(nodes.getMasterNode(), actionName, request, new ActionListenerResponseHandler<>(listener, Response::new)).         }     } }
