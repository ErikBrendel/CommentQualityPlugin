commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;13;;@Override protected void nodeOperation(AllocatedPersistentTask task, @Nullable DataFrameTransform params, PersistentTaskState state) {     DataFrameTransformTask buildTask = (DataFrameTransformTask) task.     SchedulerEngine.Job schedulerJob = new SchedulerEngine.Job(DataFrameTransformTask.SCHEDULE_NAME + "_" + params.getId(), next()).     // Note that while the task is added to the scheduler here, the internal state will prevent     // it from doing any work until the task is "started" via the StartTransform api     schedulerEngine.register(buildTask).     schedulerEngine.add(schedulerJob).     logger.info("Data frame transform [" + params.getId() + "] created."). }
false;static;0;5;;static SchedulerEngine.Schedule next() {     return (startTime, now) -> {         // to be fixed, hardcode something         return now + 1000.     }. }
false;protected;6;6;;@Override protected AllocatedPersistentTask createTask(long id, String type, String action, TaskId parentTaskId, PersistentTasksCustomMetaData.PersistentTask<DataFrameTransform> persistentTask, Map<String, String> headers) {     return new DataFrameTransformTask(id, type, action, parentTaskId, persistentTask.getParams(), (DataFrameTransformState) persistentTask.getState(), client, transformsConfigManager, schedulerEngine, threadPool, headers). }
