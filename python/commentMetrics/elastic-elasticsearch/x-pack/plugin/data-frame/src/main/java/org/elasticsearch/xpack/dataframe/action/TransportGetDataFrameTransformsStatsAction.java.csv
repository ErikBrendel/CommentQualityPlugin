commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;9;;@Override protected Response newResponse(Request request, List<Response> tasks, List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {     List<DataFrameTransformStateAndStats> responses = tasks.stream().flatMap(r -> r.getTransformsStateAndStats().stream()).sorted(Comparator.comparing(DataFrameTransformStateAndStats::getId)).collect(Collectors.toList()).     return new Response(responses, taskOperationFailures, failedNodeExceptions). }
false;protected;3;15;;@Override protected void taskOperation(Request request, DataFrameTransformTask task, ActionListener<Response> listener) {     List<DataFrameTransformStateAndStats> transformsStateAndStats = Collections.emptyList().     assert task.getTransformId().equals(request.getId()) || request.getId().equals(MetaData.ALL).     // Little extra insurance, make sure we only return transforms that aren't cancelled     if (task.isCancelled() == false) {         DataFrameTransformStateAndStats transformStateAndStats = new DataFrameTransformStateAndStats(task.getTransformId(), task.getState(), task.getStats()).         transformsStateAndStats = Collections.singletonList(transformStateAndStats).     }     listener.onResponse(new Response(transformsStateAndStats)). }
false;protected;3;26;;@Override protected void doExecute(Task task, Request request, ActionListener<Response> listener) {     final ClusterState state = clusterService.state().     final DiscoveryNodes nodes = state.nodes().     if (nodes.isLocalNodeElectedMaster()) {         if (DataFramePersistentTaskUtils.stateHasDataFrameTransforms(request.getId(), state)) {             super.doExecute(task, request, listener).         } else {             // If we couldn't find the transform in the persistent task CS, it means it was deleted prior to this GET             // and we can just send an empty response, no need to go looking for the allocated task             listener.onResponse(new Response(Collections.emptyList())).         }     } else {         // on the master, which makes testing difficult.         if (nodes.getMasterNode() == null) {             listener.onFailure(new MasterNotDiscoveredException("no known master nodes")).         } else {             transportService.sendRequest(nodes.getMasterNode(), actionName, request, new ActionListenerResponseHandler<>(listener, Response::new)).         }     } }
