commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;20;;@Override protected void processTasks(StartDataFrameTransformAction.Request request, Consumer<DataFrameTransformTask> operation) {     DataFrameTransformTask matchingTask = null.     // todo: re-factor, see rollup TransportTaskHelper     for (Task task : taskManager.getTasks().values()) {         if (task instanceof DataFrameTransformTask && ((DataFrameTransformTask) task).getTransformId().equals(request.getId())) {             if (matchingTask != null) {                 throw new IllegalArgumentException("Found more than one matching task for data frame transform [" + request.getId() + "] when " + "there should only be one.").             }             matchingTask = (DataFrameTransformTask) task.         }     }     if (matchingTask != null) {         operation.accept(matchingTask).     } }
false;protected;3;11;;@Override protected void doExecute(Task task, StartDataFrameTransformAction.Request request, ActionListener<StartDataFrameTransformAction.Response> listener) {     if (!licenseState.isDataFrameAllowed()) {         listener.onFailure(LicenseUtils.newComplianceException(XPackField.DATA_FRAME)).         return.     }     super.doExecute(task, request, listener). }
false;protected;3;10;;@Override protected void taskOperation(StartDataFrameTransformAction.Request request, DataFrameTransformTask transformTask, ActionListener<StartDataFrameTransformAction.Response> listener) {     if (transformTask.getTransformId().equals(request.getId())) {         transformTask.start(listener).     } else {         listener.onFailure(new RuntimeException("ID of data frame transform task [" + transformTask.getTransformId() + "] does not match request's ID [" + request.getId() + "]")).     } }
false;protected;4;23;;@Override protected StartDataFrameTransformAction.Response newResponse(StartDataFrameTransformAction.Request request, List<StartDataFrameTransformAction.Response> tasks, List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {     if (taskOperationFailures.isEmpty() == false) {         throw org.elasticsearch.ExceptionsHelper.convertToElastic(taskOperationFailures.get(0).getCause()).     } else if (failedNodeExceptions.isEmpty() == false) {         throw org.elasticsearch.ExceptionsHelper.convertToElastic(failedNodeExceptions.get(0)).     }     // In either case, let the user know     if (tasks.size() == 0) {         throw new ResourceNotFoundException("Task for data frame transform [" + request.getId() + "] not found").     }     assert tasks.size() == 1.     boolean allStarted = tasks.stream().allMatch(StartDataFrameTransformAction.Response::isStarted).     return new StartDataFrameTransformAction.Response(allStarted). }
