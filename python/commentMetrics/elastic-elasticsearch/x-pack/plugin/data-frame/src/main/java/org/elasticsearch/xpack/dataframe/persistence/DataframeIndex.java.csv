commented;modifiers;parameterAmount;loc;comment;code
false;public,static;4;19;;public static void createDestinationIndex(Client client, DataFrameTransformConfig transformConfig, Map<String, String> mappings, final ActionListener<Boolean> listener) {     CreateIndexRequest request = new CreateIndexRequest(transformConfig.getDestination()).     // TODO: revisit number of shards, number of replicas     request.settings(// <1>     Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0)).     request.mapping(SINGLE_MAPPING_NAME, createMappingXContent(mappings, transformConfig.getId())).     client.execute(CreateIndexAction.INSTANCE, request, ActionListener.wrap(createIndexResponse -> {         listener.onResponse(true).     }, e -> {         String message = DataFrameMessages.getMessage(DataFrameMessages.FAILED_TO_CREATE_DESTINATION_INDEX, transformConfig.getDestination(), transformConfig.getId()).         logger.error(message).         listener.onFailure(new RuntimeException(message, e)).     })). }
false;private,static;2;16;;private static XContentBuilder createMappingXContent(Map<String, String> mappings, String id) {     try {         XContentBuilder builder = jsonBuilder().startObject().         builder.startObject(SINGLE_MAPPING_NAME).         addMetaData(builder, id).         builder.startObject(PROPERTIES).         for (Entry<String, String> field : mappings.entrySet()) {             builder.startObject(field.getKey()).field(TYPE, field.getValue()).endObject().         }         // properties         builder.endObject().         // _doc type         builder.endObject().         return builder.endObject().     } catch (IOException e) {         throw new RuntimeException(e).     } }
false;private,static;2;13;;private static XContentBuilder addMetaData(XContentBuilder builder, String id) throws IOException {     builder.startObject(META).     builder.field(DataFrameField.CREATED_BY, DataFrameField.DATA_FRAME_SIGNATURE).     builder.startObject(DataFrameField.META_FIELDNAME).     builder.field(DataFrameField.CREATION_DATE_MILLIS, System.currentTimeMillis()).     builder.startObject(DataFrameField.VERSION).     builder.field(DataFrameField.CREATED, Version.CURRENT).     builder.endObject().     builder.field(DataFrameField.TRANSFORM, id).     // META_FIELDNAME     builder.endObject().     // META     builder.endObject().     return builder. }
