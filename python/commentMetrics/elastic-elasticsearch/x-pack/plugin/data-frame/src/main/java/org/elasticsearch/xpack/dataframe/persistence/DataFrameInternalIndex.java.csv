commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;12;;public static IndexTemplateMetaData getIndexTemplateMetaData() throws IOException {     IndexTemplateMetaData dataFrameTemplate = IndexTemplateMetaData.builder(INDEX_TEMPLATE_NAME).patterns(Collections.singletonList(INDEX_TEMPLATE_NAME)).version(Version.CURRENT.id).settings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS, "0-1")).putMapping(MapperService.SINGLE_MAPPING_NAME, Strings.toString(mappings())).build().     return dataFrameTemplate. }
false;private,static;0;26;;private static XContentBuilder mappings() throws IOException {     XContentBuilder builder = jsonBuilder().     builder.startObject().     builder.startObject(MapperService.SINGLE_MAPPING_NAME).     addMetaInformation(builder).     // no need to analyze anything, we use the config index as key value store, revisit if we decide to search on it     builder.field(ENABLED, false).     // do not allow anything outside of the defined schema     builder.field(DYNAMIC, "strict").     // the schema definitions     builder.startObject(PROPERTIES).     // overall doc type     builder.startObject(DOC_TYPE).field(TYPE, KEYWORD).endObject().     // add the schema for transform configurations     addDataFrameTransformsConfigMappings(builder).     // end type     builder.endObject().     // end properties     builder.endObject().     // end mapping     builder.endObject().     return builder. }
false;private,static;1;6;;private static XContentBuilder addDataFrameTransformsConfigMappings(XContentBuilder builder) throws IOException {     return builder.startObject(DataFrameField.ID.getPreferredName()).field(TYPE, KEYWORD).endObject(). }
true;private,static;1;5;/**  * Inserts "_meta" containing useful information like the version into the mapping  * template.  *  * @param builder The builder for the mappings  * @throws IOException On write error  */ ;/**  * Inserts "_meta" containing useful information like the version into the mapping  * template.  *  * @param builder The builder for the mappings  * @throws IOException On write error  */ private static XContentBuilder addMetaInformation(XContentBuilder builder) throws IOException {     return builder.startObject("_meta").field("version", Version.CURRENT).endObject(). }
