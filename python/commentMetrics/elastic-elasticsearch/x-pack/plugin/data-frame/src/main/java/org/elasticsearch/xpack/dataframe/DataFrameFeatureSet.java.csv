commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String name() {     return XPackField.DATA_FRAME. }
false;public;0;4;;@Override public String description() {     return "Data Frame for the Elastic Stack". }
false;public;0;4;;@Override public boolean available() {     return licenseState != null && licenseState.isDataFrameAllowed(). }
false;public;0;4;;@Override public boolean enabled() {     return enabled. }
false;public;0;4;;@Override public Map<String, Object> nativeCodeInfo() {     return null. }
false;public;1;22;;@Override public void usage(ActionListener<XPackFeatureSet.Usage> listener) {     if (enabled == false) {         listener.onResponse(new DataFrameFeatureSetUsage(available(), enabled(), Collections.emptyMap(), new DataFrameIndexerTransformStats())).         return.     }     GetDataFrameTransformsStatsAction.Request transformStatsRequest = new GetDataFrameTransformsStatsAction.Request(MetaData.ALL).     client.execute(GetDataFrameTransformsStatsAction.INSTANCE, transformStatsRequest, ActionListener.wrap(transformStatsResponse -> {         Map<String, Long> transformsCountByState = new HashMap<>().         DataFrameIndexerTransformStats accumulatedStats = new DataFrameIndexerTransformStats().         transformStatsResponse.getTransformsStateAndStats().stream().forEach(singleResult -> {             transformsCountByState.merge(singleResult.getTransformState().getIndexerState().value(), 1L, Long::sum).             accumulatedStats.merge(singleResult.getTransformStats()).         }).         listener.onResponse(new DataFrameFeatureSetUsage(available(), enabled(), transformsCountByState, accumulatedStats)).     }, listener::onFailure)). }
