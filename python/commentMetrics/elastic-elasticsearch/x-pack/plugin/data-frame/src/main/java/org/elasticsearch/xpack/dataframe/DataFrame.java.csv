commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public Collection<Module> createGuiceModules() {     List<Module> modules = new ArrayList<>().     if (transportClientMode) {         return modules.     }     modules.add(b -> XPackPlugin.bindFeatureSet(b, DataFrameFeatureSet.class)).     return modules. }
false;protected;0;1;;protected XPackLicenseState getLicenseState() {     return XPackPlugin.getSharedLicenseState(). }
false;public;7;19;;@Override public List<RestHandler> getRestHandlers(final Settings settings, final RestController restController, final ClusterSettings clusterSettings, final IndexScopedSettings indexScopedSettings, final SettingsFilter settingsFilter, final IndexNameExpressionResolver indexNameExpressionResolver, final Supplier<DiscoveryNodes> nodesInCluster) {     if (!enabled) {         return emptyList().     }     return Arrays.asList(new RestPutDataFrameTransformAction(settings, restController), new RestStartDataFrameTransformAction(settings, restController), new RestStopDataFrameTransformAction(settings, restController), new RestDeleteDataFrameTransformAction(settings, restController), new RestGetDataFrameTransformsAction(settings, restController), new RestGetDataFrameTransformsStatsAction(settings, restController), new RestPreviewDataFrameTransformAction(settings, restController)). }
false;public;0;16;;@Override public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {     if (!enabled) {         return emptyList().     }     return Arrays.asList(new ActionHandler<>(PutDataFrameTransformAction.INSTANCE, TransportPutDataFrameTransformAction.class), new ActionHandler<>(StartDataFrameTransformAction.INSTANCE, TransportStartDataFrameTransformAction.class), new ActionHandler<>(StopDataFrameTransformAction.INSTANCE, TransportStopDataFrameTransformAction.class), new ActionHandler<>(DeleteDataFrameTransformAction.INSTANCE, TransportDeleteDataFrameTransformAction.class), new ActionHandler<>(GetDataFrameTransformsAction.INSTANCE, TransportGetDataFrameTransformsAction.class), new ActionHandler<>(GetDataFrameTransformsStatsAction.INSTANCE, TransportGetDataFrameTransformsStatsAction.class), new ActionHandler<>(PreviewDataFrameTransformAction.INSTANCE, TransportPreviewDataFrameTransformAction.class)). }
false;public;1;11;;@Override public List<ExecutorBuilder<?>> getExecutorBuilders(Settings settings) {     if (false == enabled || transportClientMode) {         return emptyList().     }     FixedExecutorBuilder indexing = new FixedExecutorBuilder(settings, TASK_THREAD_POOL_NAME, 4, 4, "data_frame.task_thread_pool").     return Collections.singletonList(indexing). }
false;public;9;12;;@Override public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool, ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry, Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry) {     if (enabled == false || transportClientMode) {         return emptyList().     }     dataFrameTransformsConfigManager.set(new DataFrameTransformsConfigManager(client, xContentRegistry)).     return Collections.singletonList(dataFrameTransformsConfigManager.get()). }
false;public;0;11;;@Override public UnaryOperator<Map<String, IndexTemplateMetaData>> getIndexTemplateMetaDataUpgrader() {     return templates -> {         try {             templates.put(DataFrameInternalIndex.INDEX_TEMPLATE_NAME, DataFrameInternalIndex.getIndexTemplateMetaData()).         } catch (IOException e) {             logger.error("Error creating data frame index template", e).         }         return templates.     }. }
false;public;4;14;;@Override public List<PersistentTasksExecutor<?>> getPersistentTasksExecutor(ClusterService clusterService, ThreadPool threadPool, Client client, SettingsModule settingsModule) {     if (enabled == false || transportClientMode) {         return emptyList().     }     schedulerEngine.set(new SchedulerEngine(settings, Clock.systemUTC())).     // the transforms config manager should have been created     assert dataFrameTransformsConfigManager.get() != null.     return Collections.singletonList(new DataFrameTransformPersistentTasksExecutor(client, dataFrameTransformsConfigManager.get(), schedulerEngine.get(), threadPool)). }
false;public;0;14;;@Override public List<NamedXContentRegistry.Entry> getNamedXContent() {     if (enabled == false) {         return emptyList().     }     return Arrays.asList(new NamedXContentRegistry.Entry(PersistentTaskParams.class, new ParseField(DataFrameField.TASK_NAME), DataFrameTransform::fromXContent), new NamedXContentRegistry.Entry(Task.Status.class, new ParseField(DataFrameTransformState.NAME), DataFrameTransformState::fromXContent), new NamedXContentRegistry.Entry(PersistentTaskState.class, new ParseField(DataFrameTransformState.NAME), DataFrameTransformState::fromXContent)). }
false;public;0;6;;@Override public void close() {     if (schedulerEngine.get() != null) {         schedulerEngine.get().stop().     } }
