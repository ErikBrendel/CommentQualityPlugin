commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;4;// preserve indices in order to reuse source indices in several test cases ;// preserve indices in order to reuse source indices in several test cases @Override protected boolean preserveIndicesUponCompletion() {     return true. }
false;public;0;11;;@Before public void createIndexes() throws IOException {     // it's not possible to run it as @BeforeClass as clients aren't initialized then, so we need this little hack     if (indicesCreated) {         return.     }     createReviewsIndex().     indicesCreated = true. }
false;public;0;31;;public void testGetAndGetStats() throws Exception {     createPivotReviewsTransform("pivot_1", "pivot_reviews_1", null).     createPivotReviewsTransform("pivot_2", "pivot_reviews_2", null).     startAndWaitForTransform("pivot_1", "pivot_reviews_1").     startAndWaitForTransform("pivot_2", "pivot_reviews_2").     // check all the different ways to retrieve all stats     Map<String, Object> stats = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "_stats"))).     assertEquals(2, XContentMapValues.extractValue("count", stats)).     stats = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "_all/_stats"))).     assertEquals(2, XContentMapValues.extractValue("count", stats)).     stats = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "*/_stats"))).     assertEquals(2, XContentMapValues.extractValue("count", stats)).     // only pivot_1     stats = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "pivot_1/_stats"))).     assertEquals(1, XContentMapValues.extractValue("count", stats)).     // check all the different ways to retrieve all transforms     Map<String, Object> transforms = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT))).     assertEquals(2, XContentMapValues.extractValue("count", transforms)).     transforms = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "_all"))).     assertEquals(2, XContentMapValues.extractValue("count", transforms)).     transforms = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "*"))).     assertEquals(2, XContentMapValues.extractValue("count", transforms)).     // only pivot_1     transforms = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "pivot_1"))).     assertEquals(1, XContentMapValues.extractValue("count", transforms)). }
