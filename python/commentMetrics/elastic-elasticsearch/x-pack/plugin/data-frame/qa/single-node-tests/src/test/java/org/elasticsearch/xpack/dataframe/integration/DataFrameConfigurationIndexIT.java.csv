commented;modifiers;parameterAmount;loc;comment;code
true;public;0;24;/**  * Tests the corner case that for some reason a transform configuration still exists in the index but  * the persistent task disappeared  *  * test note: {@link DataFrameRestTestCase} checks for an empty index as part of the test case cleanup,  * so we do not need to check that the document has been deleted in this place  */ ;/**  * Tests the corner case that for some reason a transform configuration still exists in the index but  * the persistent task disappeared  *  * test note: {@link DataFrameRestTestCase} checks for an empty index as part of the test case cleanup,  * so we do not need to check that the document has been deleted in this place  */ public void testDeleteConfigurationLeftOver() throws IOException {     String fakeTransformName = randomAlphaOfLengthBetween(5, 20).     try (XContentBuilder builder = jsonBuilder()) {         builder.startObject().         {             builder.field(DataFrameField.ID.getPreferredName(), fakeTransformName).         }         builder.endObject().         final StringEntity entity = new StringEntity(Strings.toString(builder), ContentType.APPLICATION_JSON).         Request req = new Request("PUT", DataFrameInternalIndex.INDEX_NAME + "/_doc/" + DataFrameTransformConfig.documentId(fakeTransformName)).         req.setEntity(entity).         client().performRequest(req).     }     Request deleteRequest = new Request("DELETE", DATAFRAME_ENDPOINT + fakeTransformName).     Response deleteResponse = client().performRequest(deleteRequest).     assertOK(deleteResponse).     assertTrue((boolean) XContentMapValues.extractValue("acknowledged", entityAsMap(deleteResponse))).     // delete again, should fail     expectThrows(ResponseException.class, () -> client().performRequest(deleteRequest)). }
