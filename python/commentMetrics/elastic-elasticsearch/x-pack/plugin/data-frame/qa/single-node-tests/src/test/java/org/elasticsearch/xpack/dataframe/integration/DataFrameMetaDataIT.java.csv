commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;4;// preserve indices in order to reuse source indices in several test cases ;// preserve indices in order to reuse source indices in several test cases @Override protected boolean preserveIndicesUponCompletion() {     return true. }
false;public;0;11;;@Before public void createIndexes() throws IOException {     // it's not possible to run it as @BeforeClass as clients aren't initialized then, so we need this little hack     if (indicesCreated) {         return.     }     createReviewsIndex().     indicesCreated = true. }
false;public;0;18;;public void testMetaData() throws IOException {     long testStarted = System.currentTimeMillis().     createPivotReviewsTransform("test_meta", "pivot_reviews", null).     Response mappingResponse = client().performRequest(new Request("GET", "pivot_reviews/_mapping")).     Map<?, ?> mappingAsMap = entityAsMap(mappingResponse).     assertEquals(Version.CURRENT.toString(), XContentMapValues.extractValue("pivot_reviews.mappings._meta._data_frame.version.created", mappingAsMap)).     assertTrue((Long) XContentMapValues.extractValue("pivot_reviews.mappings._meta._data_frame.creation_date_in_millis", mappingAsMap) < System.currentTimeMillis()).     assertTrue((Long) XContentMapValues.extractValue("pivot_reviews.mappings._meta._data_frame.creation_date_in_millis", mappingAsMap) > testStarted).     assertEquals("test_meta", XContentMapValues.extractValue("pivot_reviews.mappings._meta._data_frame.transform", mappingAsMap)).     assertEquals("data-frame-transform", XContentMapValues.extractValue("pivot_reviews.mappings._meta.created_by", mappingAsMap)). }
