# id;timestamp;commentText;codeText;commentWords;codeWords
RestSqlMultinodeIT -> public void testIndexOnWrongNode() throws IOException;1541008027;Tests count against index on a node that doesn't have any shards of the index.;public void testIndexOnWrongNode() throws IOException {_        HttpHost firstHost = getClusterHosts().get(0)__        String firstHostName = null___        String match = firstHost.getHostName() + ":" + firstHost.getPort()__        Map<String, Object> nodesInfo = responseToMap(client().performRequest(new Request("GET", "/_nodes")))__        @SuppressWarnings("unchecked")_        Map<String, Object> nodes = (Map<String, Object>) nodesInfo.get("nodes")__        for (Map.Entry<String, Object> node : nodes.entrySet()) {_            String name = node.getKey()__            Map<?, ?> nodeEntries = (Map<?, ?>) node.getValue()__            Map<?, ?> http = (Map<?, ?>) nodeEntries.get("http")__            List<?> boundAddress = (List<?>) http.get("bound_address")__            if (boundAddress.contains(match)) {_                firstHostName = name__                break__            }_        }_        assertNotNull("Didn't find first host among published addresses", firstHostName)___        XContentBuilder index = JsonXContent.contentBuilder().prettyPrint().startObject()__        index.startObject("settings")_ {_            index.field("routing.allocation.exclude._name", firstHostName)__        }_        index.endObject()__        index.endObject()__        Request request = new Request("PUT", "/test")__        request.setJsonEntity(Strings.toString(index))__        client().performRequest(request)__        int documents = between(10, 100)__        createTestData(documents)___        try (RestClient firstNodeClient = buildClient(restClientSettings(), new HttpHost[] {firstHost})) {_            assertCount(firstNodeClient, documents)__        }_    };tests,count,against,index,on,a,node,that,doesn,t,have,any,shards,of,the,index;public,void,test,index,on,wrong,node,throws,ioexception,http,host,first,host,get,cluster,hosts,get,0,string,first,host,name,null,string,match,first,host,get,host,name,first,host,get,port,map,string,object,nodes,info,response,to,map,client,perform,request,new,request,get,suppress,warnings,unchecked,map,string,object,nodes,map,string,object,nodes,info,get,nodes,for,map,entry,string,object,node,nodes,entry,set,string,name,node,get,key,map,node,entries,map,node,get,value,map,http,map,node,entries,get,http,list,bound,address,list,http,get,if,bound,address,contains,match,first,host,name,name,break,assert,not,null,didn,t,find,first,host,among,published,addresses,first,host,name,xcontent,builder,index,json,xcontent,content,builder,pretty,print,start,object,index,start,object,settings,index,field,routing,allocation,exclude,first,host,name,index,end,object,index,end,object,request,request,new,request,put,test,request,set,json,entity,strings,to,string,index,client,perform,request,request,int,documents,between,10,100,create,test,data,documents,try,rest,client,first,node,client,build,client,rest,client,settings,new,http,host,first,host,assert,count,first,node,client,documents
RestSqlMultinodeIT -> public void testIndexOnWrongNode() throws IOException;1543374981;Tests count against index on a node that doesn't have any shards of the index.;public void testIndexOnWrongNode() throws IOException {_        HttpHost firstHost = getClusterHosts().get(0)__        String firstHostName = null___        String match = firstHost.getHostName() + ":" + firstHost.getPort()__        Map<String, Object> nodesInfo = responseToMap(client().performRequest(new Request("GET", "/_nodes")))__        @SuppressWarnings("unchecked")_        Map<String, Object> nodes = (Map<String, Object>) nodesInfo.get("nodes")__        for (Map.Entry<String, Object> node : nodes.entrySet()) {_            String name = node.getKey()__            Map<?, ?> nodeEntries = (Map<?, ?>) node.getValue()__            Map<?, ?> http = (Map<?, ?>) nodeEntries.get("http")__            List<?> boundAddress = (List<?>) http.get("bound_address")__            if (boundAddress.contains(match)) {_                firstHostName = name__                break__            }_        }_        assertNotNull("Didn't find first host among published addresses", firstHostName)___        XContentBuilder index = JsonXContent.contentBuilder().prettyPrint().startObject()__        index.startObject("settings")_ {_            index.field("routing.allocation.exclude._name", firstHostName)__        }_        index.endObject()__        index.endObject()__        Request request = new Request("PUT", "/test")__        request.setJsonEntity(Strings.toString(index))__        client().performRequest(request)__        int documents = between(10, 100)__        createTestData(documents)___        try (RestClient firstNodeClient = buildClient(restClientSettings(), new HttpHost[] {firstHost})) {_            assertCount(firstNodeClient, documents)__        }_    };tests,count,against,index,on,a,node,that,doesn,t,have,any,shards,of,the,index;public,void,test,index,on,wrong,node,throws,ioexception,http,host,first,host,get,cluster,hosts,get,0,string,first,host,name,null,string,match,first,host,get,host,name,first,host,get,port,map,string,object,nodes,info,response,to,map,client,perform,request,new,request,get,suppress,warnings,unchecked,map,string,object,nodes,map,string,object,nodes,info,get,nodes,for,map,entry,string,object,node,nodes,entry,set,string,name,node,get,key,map,node,entries,map,node,get,value,map,http,map,node,entries,get,http,list,bound,address,list,http,get,if,bound,address,contains,match,first,host,name,name,break,assert,not,null,didn,t,find,first,host,among,published,addresses,first,host,name,xcontent,builder,index,json,xcontent,content,builder,pretty,print,start,object,index,start,object,settings,index,field,routing,allocation,exclude,first,host,name,index,end,object,index,end,object,request,request,new,request,put,test,request,set,json,entity,strings,to,string,index,client,perform,request,request,int,documents,between,10,100,create,test,data,documents,try,rest,client,first,node,client,build,client,rest,client,settings,new,http,host,first,host,assert,count,first,node,client,documents
RestSqlMultinodeIT -> public void testIndexOnWrongNode() throws IOException;1544548671;Tests count against index on a node that doesn't have any shards of the index.;public void testIndexOnWrongNode() throws IOException {_        HttpHost firstHost = getClusterHosts().get(0)__        String firstHostName = null___        String match = firstHost.getHostName() + ":" + firstHost.getPort()__        Map<String, Object> nodesInfo = responseToMap(client().performRequest(new Request("GET", "/_nodes")))__        @SuppressWarnings("unchecked")_        Map<String, Object> nodes = (Map<String, Object>) nodesInfo.get("nodes")__        for (Map.Entry<String, Object> node : nodes.entrySet()) {_            String name = node.getKey()__            Map<?, ?> nodeEntries = (Map<?, ?>) node.getValue()__            Map<?, ?> http = (Map<?, ?>) nodeEntries.get("http")__            List<?> boundAddress = (List<?>) http.get("bound_address")__            if (boundAddress.contains(match)) {_                firstHostName = name__                break__            }_        }_        assertNotNull("Didn't find first host among published addresses", firstHostName)___        XContentBuilder index = JsonXContent.contentBuilder().prettyPrint().startObject()__        index.startObject("settings")_ {_            index.field("routing.allocation.exclude._name", firstHostName)__        }_        index.endObject()__        index.endObject()__        Request request = new Request("PUT", "/test")__        request.setJsonEntity(Strings.toString(index))__        client().performRequest(request)__        int documents = between(10, 100)__        createTestData(documents)___        try (RestClient firstNodeClient = buildClient(restClientSettings(), new HttpHost[] {firstHost})) {_            assertCount(firstNodeClient, documents)__        }_    };tests,count,against,index,on,a,node,that,doesn,t,have,any,shards,of,the,index;public,void,test,index,on,wrong,node,throws,ioexception,http,host,first,host,get,cluster,hosts,get,0,string,first,host,name,null,string,match,first,host,get,host,name,first,host,get,port,map,string,object,nodes,info,response,to,map,client,perform,request,new,request,get,suppress,warnings,unchecked,map,string,object,nodes,map,string,object,nodes,info,get,nodes,for,map,entry,string,object,node,nodes,entry,set,string,name,node,get,key,map,node,entries,map,node,get,value,map,http,map,node,entries,get,http,list,bound,address,list,http,get,if,bound,address,contains,match,first,host,name,name,break,assert,not,null,didn,t,find,first,host,among,published,addresses,first,host,name,xcontent,builder,index,json,xcontent,content,builder,pretty,print,start,object,index,start,object,settings,index,field,routing,allocation,exclude,first,host,name,index,end,object,index,end,object,request,request,new,request,put,test,request,set,json,entity,strings,to,string,index,client,perform,request,request,int,documents,between,10,100,create,test,data,documents,try,rest,client,first,node,client,build,client,rest,client,settings,new,http,host,first,host,assert,count,first,node,client,documents
RestSqlMultinodeIT -> public void testIndexOnWrongNode() throws IOException;1547156119;Tests count against index on a node that doesn't have any shards of the index.;public void testIndexOnWrongNode() throws IOException {_        HttpHost firstHost = getClusterHosts().get(0)__        String firstHostName = null___        String match = firstHost.getHostName() + ":" + firstHost.getPort()__        Map<String, Object> nodesInfo = responseToMap(client().performRequest(new Request("GET", "/_nodes")))__        @SuppressWarnings("unchecked")_        Map<String, Object> nodes = (Map<String, Object>) nodesInfo.get("nodes")__        for (Map.Entry<String, Object> node : nodes.entrySet()) {_            String name = node.getKey()__            Map<?, ?> nodeEntries = (Map<?, ?>) node.getValue()__            Map<?, ?> http = (Map<?, ?>) nodeEntries.get("http")__            List<?> boundAddress = (List<?>) http.get("bound_address")__            if (boundAddress.contains(match)) {_                firstHostName = name__                break__            }_        }_        assertNotNull("Didn't find first host among published addresses", firstHostName)___        XContentBuilder index = JsonXContent.contentBuilder().prettyPrint().startObject()__        index.startObject("settings")_ {_            index.field("routing.allocation.exclude._name", firstHostName)__        }_        index.endObject()__        index.endObject()__        Request request = new Request("PUT", "/test")__        request.setJsonEntity(Strings.toString(index))__        client().performRequest(request)__        int documents = between(10, 100)__        createTestData(documents)___        try (RestClient firstNodeClient = buildClient(restClientSettings(), new HttpHost[] {firstHost})) {_            assertCount(firstNodeClient, documents)__        }_    };tests,count,against,index,on,a,node,that,doesn,t,have,any,shards,of,the,index;public,void,test,index,on,wrong,node,throws,ioexception,http,host,first,host,get,cluster,hosts,get,0,string,first,host,name,null,string,match,first,host,get,host,name,first,host,get,port,map,string,object,nodes,info,response,to,map,client,perform,request,new,request,get,suppress,warnings,unchecked,map,string,object,nodes,map,string,object,nodes,info,get,nodes,for,map,entry,string,object,node,nodes,entry,set,string,name,node,get,key,map,node,entries,map,node,get,value,map,http,map,node,entries,get,http,list,bound,address,list,http,get,if,bound,address,contains,match,first,host,name,name,break,assert,not,null,didn,t,find,first,host,among,published,addresses,first,host,name,xcontent,builder,index,json,xcontent,content,builder,pretty,print,start,object,index,start,object,settings,index,field,routing,allocation,exclude,first,host,name,index,end,object,index,end,object,request,request,new,request,put,test,request,set,json,entity,strings,to,string,index,client,perform,request,request,int,documents,between,10,100,create,test,data,documents,try,rest,client,first,node,client,build,client,rest,client,settings,new,http,host,first,host,assert,count,first,node,client,documents
RestSqlMultinodeIT -> public void testIndexOnWrongNode() throws IOException;1547336422;Tests count against index on a node that doesn't have any shards of the index.;public void testIndexOnWrongNode() throws IOException {_        HttpHost firstHost = getClusterHosts().get(0)__        String firstHostName = null___        String match = firstHost.getHostName() + ":" + firstHost.getPort()__        Map<String, Object> nodesInfo = responseToMap(client().performRequest(new Request("GET", "/_nodes")))__        @SuppressWarnings("unchecked")_        Map<String, Object> nodes = (Map<String, Object>) nodesInfo.get("nodes")__        for (Map.Entry<String, Object> node : nodes.entrySet()) {_            String name = node.getKey()__            Map<?, ?> nodeEntries = (Map<?, ?>) node.getValue()__            Map<?, ?> http = (Map<?, ?>) nodeEntries.get("http")__            List<?> boundAddress = (List<?>) http.get("bound_address")__            if (boundAddress.contains(match)) {_                firstHostName = name__                break__            }_        }_        assertNotNull("Didn't find first host among published addresses", firstHostName)___        XContentBuilder index = JsonXContent.contentBuilder().prettyPrint().startObject()__        index.startObject("settings")_ {_            index.field("routing.allocation.exclude._name", firstHostName)__        }_        index.endObject()__        index.endObject()__        Request request = new Request("PUT", "/test")__        request.setJsonEntity(Strings.toString(index))__        client().performRequest(request)__        int documents = between(10, 100)__        createTestData(documents)___        try (RestClient firstNodeClient = buildClient(restClientSettings(), new HttpHost[] {firstHost})) {_            assertCount(firstNodeClient, documents)__        }_    };tests,count,against,index,on,a,node,that,doesn,t,have,any,shards,of,the,index;public,void,test,index,on,wrong,node,throws,ioexception,http,host,first,host,get,cluster,hosts,get,0,string,first,host,name,null,string,match,first,host,get,host,name,first,host,get,port,map,string,object,nodes,info,response,to,map,client,perform,request,new,request,get,suppress,warnings,unchecked,map,string,object,nodes,map,string,object,nodes,info,get,nodes,for,map,entry,string,object,node,nodes,entry,set,string,name,node,get,key,map,node,entries,map,node,get,value,map,http,map,node,entries,get,http,list,bound,address,list,http,get,if,bound,address,contains,match,first,host,name,name,break,assert,not,null,didn,t,find,first,host,among,published,addresses,first,host,name,xcontent,builder,index,json,xcontent,content,builder,pretty,print,start,object,index,start,object,settings,index,field,routing,allocation,exclude,first,host,name,index,end,object,index,end,object,request,request,new,request,put,test,request,set,json,entity,strings,to,string,index,client,perform,request,request,int,documents,between,10,100,create,test,data,documents,try,rest,client,first,node,client,build,client,rest,client,settings,new,http,host,first,host,assert,count,first,node,client,documents
RestSqlMultinodeIT -> public void testIndexOnWrongNode() throws IOException;1548144111;Tests count against index on a node that doesn't have any shards of the index.;public void testIndexOnWrongNode() throws IOException {_        HttpHost firstHost = getClusterHosts().get(0)__        String firstHostName = null___        String match = firstHost.getHostName() + ":" + firstHost.getPort()__        Map<String, Object> nodesInfo = responseToMap(client().performRequest(new Request("GET", "/_nodes")))__        @SuppressWarnings("unchecked")_        Map<String, Object> nodes = (Map<String, Object>) nodesInfo.get("nodes")__        for (Map.Entry<String, Object> node : nodes.entrySet()) {_            String name = node.getKey()__            Map<?, ?> nodeEntries = (Map<?, ?>) node.getValue()__            Map<?, ?> http = (Map<?, ?>) nodeEntries.get("http")__            List<?> boundAddress = (List<?>) http.get("bound_address")__            if (boundAddress.contains(match)) {_                firstHostName = name__                break__            }_        }_        assertNotNull("Didn't find first host among published addresses", firstHostName)___        XContentBuilder index = JsonXContent.contentBuilder().prettyPrint().startObject()__        index.startObject("settings")_ {_            index.field("routing.allocation.exclude._name", firstHostName)__        }_        index.endObject()__        index.endObject()__        Request request = new Request("PUT", "/test")__        request.setJsonEntity(Strings.toString(index))__        client().performRequest(request)__        int documents = between(10, 100)__        createTestData(documents)___        try (RestClient firstNodeClient = buildClient(restClientSettings(), new HttpHost[] {firstHost})) {_            assertCount(firstNodeClient, documents)__        }_    };tests,count,against,index,on,a,node,that,doesn,t,have,any,shards,of,the,index;public,void,test,index,on,wrong,node,throws,ioexception,http,host,first,host,get,cluster,hosts,get,0,string,first,host,name,null,string,match,first,host,get,host,name,first,host,get,port,map,string,object,nodes,info,response,to,map,client,perform,request,new,request,get,suppress,warnings,unchecked,map,string,object,nodes,map,string,object,nodes,info,get,nodes,for,map,entry,string,object,node,nodes,entry,set,string,name,node,get,key,map,node,entries,map,node,get,value,map,http,map,node,entries,get,http,list,bound,address,list,http,get,if,bound,address,contains,match,first,host,name,name,break,assert,not,null,didn,t,find,first,host,among,published,addresses,first,host,name,xcontent,builder,index,json,xcontent,content,builder,pretty,print,start,object,index,start,object,settings,index,field,routing,allocation,exclude,first,host,name,index,end,object,index,end,object,request,request,new,request,put,test,request,set,json,entity,strings,to,string,index,client,perform,request,request,int,documents,between,10,100,create,test,data,documents,try,rest,client,first,node,client,build,client,rest,client,settings,new,http,host,first,host,assert,count,first,node,client,documents
RestSqlMultinodeIT -> public void testIndexSpread() throws IOException;1541008027;Tests count of index run across multiple nodes.;public void testIndexSpread() throws IOException {_        int documents = between(10, 100)__        createTestData(documents)__        assertCount(client(), documents)__    };tests,count,of,index,run,across,multiple,nodes;public,void,test,index,spread,throws,ioexception,int,documents,between,10,100,create,test,data,documents,assert,count,client,documents
RestSqlMultinodeIT -> public void testIndexSpread() throws IOException;1543374981;Tests count of index run across multiple nodes.;public void testIndexSpread() throws IOException {_        int documents = between(10, 100)__        createTestData(documents)__        assertCount(client(), documents)__    };tests,count,of,index,run,across,multiple,nodes;public,void,test,index,spread,throws,ioexception,int,documents,between,10,100,create,test,data,documents,assert,count,client,documents
RestSqlMultinodeIT -> public void testIndexSpread() throws IOException;1544548671;Tests count of index run across multiple nodes.;public void testIndexSpread() throws IOException {_        int documents = between(10, 100)__        createTestData(documents)__        assertCount(client(), documents)__    };tests,count,of,index,run,across,multiple,nodes;public,void,test,index,spread,throws,ioexception,int,documents,between,10,100,create,test,data,documents,assert,count,client,documents
RestSqlMultinodeIT -> public void testIndexSpread() throws IOException;1547156119;Tests count of index run across multiple nodes.;public void testIndexSpread() throws IOException {_        int documents = between(10, 100)__        createTestData(documents)__        assertCount(client(), documents)__    };tests,count,of,index,run,across,multiple,nodes;public,void,test,index,spread,throws,ioexception,int,documents,between,10,100,create,test,data,documents,assert,count,client,documents
RestSqlMultinodeIT -> public void testIndexSpread() throws IOException;1547336422;Tests count of index run across multiple nodes.;public void testIndexSpread() throws IOException {_        int documents = between(10, 100)__        createTestData(documents)__        assertCount(client(), documents)__    };tests,count,of,index,run,across,multiple,nodes;public,void,test,index,spread,throws,ioexception,int,documents,between,10,100,create,test,data,documents,assert,count,client,documents
RestSqlMultinodeIT -> public void testIndexSpread() throws IOException;1548144111;Tests count of index run across multiple nodes.;public void testIndexSpread() throws IOException {_        int documents = between(10, 100)__        createTestData(documents)__        assertCount(client(), documents)__    };tests,count,of,index,run,across,multiple,nodes;public,void,test,index,spread,throws,ioexception,int,documents,between,10,100,create,test,data,documents,assert,count,client,documents
