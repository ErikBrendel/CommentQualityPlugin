commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testErrorMessageForTranslatingQueryWithWhereEvaluatingToFalse() throws IOException {     index("{\"foo\":1}").     expectBadRequest(() -> runSql(new StringEntity("{\"query\":\"SELECT * FROM test WHERE foo = 1 AND foo = 2\"}", ContentType.APPLICATION_JSON), "/translate/"), containsString("Cannot generate a query DSL for an SQL query that either its WHERE clause evaluates " + "to FALSE or doesn't operate on a table (missing a FROM clause), sql statement: " + "[SELECT * FROM test WHERE foo = 1 AND foo = 2]")). }
false;public;0;8;;public void testErrorMessageForTranslatingQueryWithLocalExecution() throws IOException {     index("{\"foo\":1}").     expectBadRequest(() -> runSql(new StringEntity("{\"query\":\"SELECT SIN(PI())\"}", ContentType.APPLICATION_JSON), "/translate/"), containsString("Cannot generate a query DSL for an SQL query that either its WHERE clause evaluates " + "to FALSE or doesn't operate on a table (missing a FROM clause), sql statement: [SELECT SIN(PI())]")). }
false;public;0;8;;public void testErrorMessageForTranslatingSQLCommandStatement() throws IOException {     index("{\"foo\":1}").     expectBadRequest(() -> runSql(new StringEntity("{\"query\":\"SHOW FUNCTIONS\"}", ContentType.APPLICATION_JSON), "/translate/"), containsString("Cannot generate a query DSL for a special SQL command " + "(e.g.: DESCRIBE, SHOW), sql statement: [SHOW FUNCTIONS]")). }
