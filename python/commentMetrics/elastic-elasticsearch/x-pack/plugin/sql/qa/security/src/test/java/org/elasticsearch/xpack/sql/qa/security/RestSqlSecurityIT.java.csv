# id;timestamp;commentText;codeText;commentWords;codeWords
RestSqlSecurityIT -> public void testHijackScrollFails() throws Exception;1541008027;Test the hijacking a scroll fails. This test is only implemented for_REST because it is the only API where it is simple to hijack a scroll._It should exercise the same code as the other APIs but if we were truly_paranoid we'd hack together something to test the others as well.;public void testHijackScrollFails() throws Exception {_        createUser("full_access", "rest_minimal")___        Map<String, Object> adminResponse = RestActions.runSql(null, randomMode(),_                new StringEntity("{\"query\": \"SELECT * FROM test\", \"fetch_size\": 1}", ContentType.APPLICATION_JSON))___        String cursor = (String) adminResponse.remove("cursor")__        assertNotNull(cursor)___        ResponseException e = expectThrows(ResponseException.class, () -> RestActions.runSql("full_access", randomMode(),_                new StringEntity("{\"cursor\":\"" + cursor + "\"}", ContentType.APPLICATION_JSON)))__        _        assertThat(e.getMessage(), containsString("No search context found for id"))__        assertEquals(404, e.getResponse().getStatusLine().getStatusCode())___        createAuditLogAsserter()_            .expectSqlCompositeActionFieldCaps("test_admin", "test")_            .expect(true, SQL_ACTION_NAME, "full_access", empty())_            _            .expect("access_denied", SQL_ACTION_NAME, "full_access", "default_native", empty(), "InternalScrollSearchRequest")_            .assertLogs()__    };test,the,hijacking,a,scroll,fails,this,test,is,only,implemented,for,rest,because,it,is,the,only,api,where,it,is,simple,to,hijack,a,scroll,it,should,exercise,the,same,code,as,the,other,apis,but,if,we,were,truly,paranoid,we,d,hack,together,something,to,test,the,others,as,well;public,void,test,hijack,scroll,fails,throws,exception,create,user,map,string,object,admin,response,rest,actions,run,sql,null,random,mode,new,string,entity,query,select,from,test,1,content,type,string,cursor,string,admin,response,remove,cursor,assert,not,null,cursor,response,exception,e,expect,throws,response,exception,class,rest,actions,run,sql,random,mode,new,string,entity,cursor,cursor,content,type,assert,that,e,get,message,contains,string,no,search,context,found,for,id,assert,equals,404,e,get,response,get,status,line,get,status,code,create,audit,log,asserter,expect,sql,composite,action,field,caps,test,expect,true,empty,expect,empty,internal,scroll,search,request,assert,logs
RestSqlSecurityIT -> public void testHijackScrollFails() throws Exception;1543374981;Test the hijacking a scroll fails. This test is only implemented for_REST because it is the only API where it is simple to hijack a scroll._It should exercise the same code as the other APIs but if we were truly_paranoid we'd hack together something to test the others as well.;public void testHijackScrollFails() throws Exception {_        createUser("full_access", "rest_minimal")___        Map<String, Object> adminResponse = RestActions.runSql(null, randomMode(),_                new StringEntity("{\"query\": \"SELECT * FROM test\", \"fetch_size\": 1}", ContentType.APPLICATION_JSON))___        String cursor = (String) adminResponse.remove("cursor")__        assertNotNull(cursor)___        ResponseException e = expectThrows(ResponseException.class, () -> RestActions.runSql("full_access", randomMode(),_                new StringEntity("{\"cursor\":\"" + cursor + "\"}", ContentType.APPLICATION_JSON)))__        _        assertThat(e.getMessage(), containsString("No search context found for id"))__        assertEquals(404, e.getResponse().getStatusLine().getStatusCode())___        createAuditLogAsserter()_            .expectSqlCompositeActionFieldCaps("test_admin", "test")_            .expect(true, SQL_ACTION_NAME, "full_access", empty())_            _            .expect("access_denied", SQL_ACTION_NAME, "full_access", "default_native", empty(), "InternalScrollSearchRequest")_            .assertLogs()__    };test,the,hijacking,a,scroll,fails,this,test,is,only,implemented,for,rest,because,it,is,the,only,api,where,it,is,simple,to,hijack,a,scroll,it,should,exercise,the,same,code,as,the,other,apis,but,if,we,were,truly,paranoid,we,d,hack,together,something,to,test,the,others,as,well;public,void,test,hijack,scroll,fails,throws,exception,create,user,map,string,object,admin,response,rest,actions,run,sql,null,random,mode,new,string,entity,query,select,from,test,1,content,type,string,cursor,string,admin,response,remove,cursor,assert,not,null,cursor,response,exception,e,expect,throws,response,exception,class,rest,actions,run,sql,random,mode,new,string,entity,cursor,cursor,content,type,assert,that,e,get,message,contains,string,no,search,context,found,for,id,assert,equals,404,e,get,response,get,status,line,get,status,code,create,audit,log,asserter,expect,sql,composite,action,field,caps,test,expect,true,empty,expect,empty,internal,scroll,search,request,assert,logs
RestSqlSecurityIT -> public void testHijackScrollFails() throws Exception;1544548671;Test the hijacking a scroll fails. This test is only implemented for_REST because it is the only API where it is simple to hijack a scroll._It should exercise the same code as the other APIs but if we were truly_paranoid we'd hack together something to test the others as well.;public void testHijackScrollFails() throws Exception {_        createUser("full_access", "rest_minimal")___        Map<String, Object> adminResponse = RestActions.runSql(null,_                new StringEntity("{\"query\": \"SELECT * FROM test\", \"fetch_size\": 1" + mode(randomMode()) + "}",_                        ContentType.APPLICATION_JSON))___        String cursor = (String) adminResponse.remove("cursor")__        assertNotNull(cursor)___        ResponseException e = expectThrows(ResponseException.class, () -> RestActions.runSql("full_access",_                new StringEntity("{\"cursor\":\"" + cursor + "\"" + mode(randomMode()) + "}", ContentType.APPLICATION_JSON)))__        _        assertThat(e.getMessage(), containsString("No search context found for id"))__        assertEquals(404, e.getResponse().getStatusLine().getStatusCode())___        createAuditLogAsserter()_            .expectSqlCompositeActionFieldCaps("test_admin", "test")_            .expect(true, SQL_ACTION_NAME, "full_access", empty())_            _            .expect("access_denied", SQL_ACTION_NAME, "full_access", "default_native", empty(), "InternalScrollSearchRequest")_            .assertLogs()__    };test,the,hijacking,a,scroll,fails,this,test,is,only,implemented,for,rest,because,it,is,the,only,api,where,it,is,simple,to,hijack,a,scroll,it,should,exercise,the,same,code,as,the,other,apis,but,if,we,were,truly,paranoid,we,d,hack,together,something,to,test,the,others,as,well;public,void,test,hijack,scroll,fails,throws,exception,create,user,map,string,object,admin,response,rest,actions,run,sql,null,new,string,entity,query,select,from,test,1,mode,random,mode,content,type,string,cursor,string,admin,response,remove,cursor,assert,not,null,cursor,response,exception,e,expect,throws,response,exception,class,rest,actions,run,sql,new,string,entity,cursor,cursor,mode,random,mode,content,type,assert,that,e,get,message,contains,string,no,search,context,found,for,id,assert,equals,404,e,get,response,get,status,line,get,status,code,create,audit,log,asserter,expect,sql,composite,action,field,caps,test,expect,true,empty,expect,empty,internal,scroll,search,request,assert,logs
RestSqlSecurityIT -> public void testHijackScrollFails() throws Exception;1548144111;Test the hijacking a scroll fails. This test is only implemented for_REST because it is the only API where it is simple to hijack a scroll._It should exercise the same code as the other APIs but if we were truly_paranoid we'd hack together something to test the others as well.;public void testHijackScrollFails() throws Exception {_        createUser("full_access", "rest_minimal")___        Map<String, Object> adminResponse = RestActions.runSql(null,_                new StringEntity("{\"query\": \"SELECT * FROM test\", \"fetch_size\": 1" + mode(randomMode()) + "}",_                        ContentType.APPLICATION_JSON))___        String cursor = (String) adminResponse.remove("cursor")__        assertNotNull(cursor)___        ResponseException e = expectThrows(ResponseException.class, () -> RestActions.runSql("full_access",_                new StringEntity("{\"cursor\":\"" + cursor + "\"" + mode(randomMode()) + "}", ContentType.APPLICATION_JSON)))__        _        assertThat(e.getMessage(), containsString("No search context found for id"))__        assertEquals(404, e.getResponse().getStatusLine().getStatusCode())___        createAuditLogAsserter()_            .expectSqlCompositeActionFieldCaps("test_admin", "test")_            .expect(true, SQL_ACTION_NAME, "full_access", empty())_            _            .expect("access_denied", SQL_ACTION_NAME, "full_access", "default_native", empty(), "InternalScrollSearchRequest")_            .assertLogs()__    };test,the,hijacking,a,scroll,fails,this,test,is,only,implemented,for,rest,because,it,is,the,only,api,where,it,is,simple,to,hijack,a,scroll,it,should,exercise,the,same,code,as,the,other,apis,but,if,we,were,truly,paranoid,we,d,hack,together,something,to,test,the,others,as,well;public,void,test,hijack,scroll,fails,throws,exception,create,user,map,string,object,admin,response,rest,actions,run,sql,null,new,string,entity,query,select,from,test,1,mode,random,mode,content,type,string,cursor,string,admin,response,remove,cursor,assert,not,null,cursor,response,exception,e,expect,throws,response,exception,class,rest,actions,run,sql,new,string,entity,cursor,cursor,mode,random,mode,content,type,assert,that,e,get,message,contains,string,no,search,context,found,for,id,assert,equals,404,e,get,response,get,status,line,get,status,code,create,audit,log,asserter,expect,sql,composite,action,field,caps,test,expect,true,empty,expect,empty,internal,scroll,search,request,assert,logs
