# id;timestamp;commentText;codeText;commentWords;codeWords
ResultSetTestCase -> private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException;1541008027;Creates test data for all numeric get* methods. All values random and different from the other numeric fields already generated._It returns a map containing the field name and its randomly generated value to be later used in checking the returned values.;private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException {_        Map<String,Number> map = new HashMap<>()__        createIndex("test")__        updateMappingForNumericValuesTests("test")__    _        index("test", "1", builder -> {_            _            byte test_byte = randomValueOtherThanMany(map::containsValue, randomGenerator).byteValue()__            builder.field("test_byte", test_byte)__            map.put("test_byte", test_byte)__            _            _            int test_integer = randomValueOtherThanMany(map::containsValue, randomGenerator).intValue()__            builder.field("test_integer", test_integer)__            map.put("test_integer", test_integer)__    _            _            int test_short = randomValueOtherThanMany(map::containsValue, randomGenerator).shortValue()__            builder.field("test_short", test_short)__            map.put("test_short", test_short)__            _            _            long test_long = randomValueOtherThanMany(map::containsValue, randomGenerator).longValue()__            builder.field("test_long", test_long)__            map.put("test_long", test_long)__            _            _            double test_double = randomValueOtherThanMany(map::containsValue, randomGenerator).doubleValue()__            builder.field("test_double", test_double)__            map.put("test_double", test_double)__            _            _            float test_float = randomValueOtherThanMany(map::containsValue, randomGenerator).floatValue()__            builder.field("test_float", test_float)__            map.put("test_float", test_float)__        })__        return map__    };creates,test,data,for,all,numeric,get,methods,all,values,random,and,different,from,the,other,numeric,fields,already,generated,it,returns,a,map,containing,the,field,name,and,its,randomly,generated,value,to,be,later,used,in,checking,the,returned,values;private,map,string,number,create,test,data,for,numeric,value,types,supplier,number,random,generator,throws,exception,ioexception,map,string,number,map,new,hash,map,create,index,test,update,mapping,for,numeric,values,tests,test,index,test,1,builder,byte,random,value,other,than,many,map,contains,value,random,generator,byte,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,int,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,short,value,builder,field,map,put,long,random,value,other,than,many,map,contains,value,random,generator,long,value,builder,field,map,put,double,random,value,other,than,many,map,contains,value,random,generator,double,value,builder,field,map,put,float,random,value,other,than,many,map,contains,value,random,generator,float,value,builder,field,map,put,return,map
ResultSetTestCase -> private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException;1542807959;Creates test data for all numeric get* methods. All values random and different from the other numeric fields already generated._It returns a map containing the field name and its randomly generated value to be later used in checking the returned values.;private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException {_        Map<String,Number> map = new HashMap<>()__        createIndex("test")__        updateMappingForNumericValuesTests("test")__    _        index("test", "1", builder -> {_            _            byte test_byte = randomValueOtherThanMany(map::containsValue, randomGenerator).byteValue()__            builder.field("test_byte", test_byte)__            map.put("test_byte", test_byte)__            _            _            int test_integer = randomValueOtherThanMany(map::containsValue, randomGenerator).intValue()__            builder.field("test_integer", test_integer)__            map.put("test_integer", test_integer)__    _            _            int test_short = randomValueOtherThanMany(map::containsValue, randomGenerator).shortValue()__            builder.field("test_short", test_short)__            map.put("test_short", test_short)__            _            _            long test_long = randomValueOtherThanMany(map::containsValue, randomGenerator).longValue()__            builder.field("test_long", test_long)__            map.put("test_long", test_long)__            _            _            double test_double = randomValueOtherThanMany(map::containsValue, randomGenerator).doubleValue()__            builder.field("test_double", test_double)__            map.put("test_double", test_double)__            _            _            float test_float = randomValueOtherThanMany(map::containsValue, randomGenerator).floatValue()__            builder.field("test_float", test_float)__            map.put("test_float", test_float)__        })__        return map__    };creates,test,data,for,all,numeric,get,methods,all,values,random,and,different,from,the,other,numeric,fields,already,generated,it,returns,a,map,containing,the,field,name,and,its,randomly,generated,value,to,be,later,used,in,checking,the,returned,values;private,map,string,number,create,test,data,for,numeric,value,types,supplier,number,random,generator,throws,exception,ioexception,map,string,number,map,new,hash,map,create,index,test,update,mapping,for,numeric,values,tests,test,index,test,1,builder,byte,random,value,other,than,many,map,contains,value,random,generator,byte,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,int,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,short,value,builder,field,map,put,long,random,value,other,than,many,map,contains,value,random,generator,long,value,builder,field,map,put,double,random,value,other,than,many,map,contains,value,random,generator,double,value,builder,field,map,put,float,random,value,other,than,many,map,contains,value,random,generator,float,value,builder,field,map,put,return,map
ResultSetTestCase -> private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException;1543402106;Creates test data for all numeric get* methods. All values random and different from the other numeric fields already generated._It returns a map containing the field name and its randomly generated value to be later used in checking the returned values.;private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException {_        Map<String,Number> map = new HashMap<>()__        createIndex("test")__        updateMappingForNumericValuesTests("test")__    _        index("test", "1", builder -> {_            _            byte test_byte = randomValueOtherThanMany(map::containsValue, randomGenerator).byteValue()__            builder.field("test_byte", test_byte)__            map.put("test_byte", test_byte)__            _            _            int test_integer = randomValueOtherThanMany(map::containsValue, randomGenerator).intValue()__            builder.field("test_integer", test_integer)__            map.put("test_integer", test_integer)__    _            _            int test_short = randomValueOtherThanMany(map::containsValue, randomGenerator).shortValue()__            builder.field("test_short", test_short)__            map.put("test_short", test_short)__            _            _            long test_long = randomValueOtherThanMany(map::containsValue, randomGenerator).longValue()__            builder.field("test_long", test_long)__            map.put("test_long", test_long)__            _            _            double test_double = randomValueOtherThanMany(map::containsValue, randomGenerator).doubleValue()__            builder.field("test_double", test_double)__            map.put("test_double", test_double)__            _            _            float test_float = randomValueOtherThanMany(map::containsValue, randomGenerator).floatValue()__            builder.field("test_float", test_float)__            map.put("test_float", test_float)__        })__        return map__    };creates,test,data,for,all,numeric,get,methods,all,values,random,and,different,from,the,other,numeric,fields,already,generated,it,returns,a,map,containing,the,field,name,and,its,randomly,generated,value,to,be,later,used,in,checking,the,returned,values;private,map,string,number,create,test,data,for,numeric,value,types,supplier,number,random,generator,throws,exception,ioexception,map,string,number,map,new,hash,map,create,index,test,update,mapping,for,numeric,values,tests,test,index,test,1,builder,byte,random,value,other,than,many,map,contains,value,random,generator,byte,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,int,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,short,value,builder,field,map,put,long,random,value,other,than,many,map,contains,value,random,generator,long,value,builder,field,map,put,double,random,value,other,than,many,map,contains,value,random,generator,double,value,builder,field,map,put,float,random,value,other,than,many,map,contains,value,random,generator,float,value,builder,field,map,put,return,map
ResultSetTestCase -> private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException;1545230176;Creates test data for all numeric get* methods. All values random and different from the other numeric fields already generated._It returns a map containing the field name and its randomly generated value to be later used in checking the returned values.;private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException {_        Map<String,Number> map = new HashMap<>()__        createIndex("test")__        updateMappingForNumericValuesTests("test")__    _        index("test", "1", builder -> {_            _            byte test_byte = randomValueOtherThanMany(map::containsValue, randomGenerator).byteValue()__            builder.field("test_byte", test_byte)__            map.put("test_byte", test_byte)__            _            _            int test_integer = randomValueOtherThanMany(map::containsValue, randomGenerator).intValue()__            builder.field("test_integer", test_integer)__            map.put("test_integer", test_integer)__    _            _            int test_short = randomValueOtherThanMany(map::containsValue, randomGenerator).shortValue()__            builder.field("test_short", test_short)__            map.put("test_short", test_short)__            _            _            long test_long = randomValueOtherThanMany(map::containsValue, randomGenerator).longValue()__            builder.field("test_long", test_long)__            map.put("test_long", test_long)__            _            _            double test_double = randomValueOtherThanMany(map::containsValue, randomGenerator).doubleValue()__            builder.field("test_double", test_double)__            map.put("test_double", test_double)__            _            _            float test_float = randomValueOtherThanMany(map::containsValue, randomGenerator).floatValue()__            builder.field("test_float", test_float)__            map.put("test_float", test_float)__        })__        return map__    };creates,test,data,for,all,numeric,get,methods,all,values,random,and,different,from,the,other,numeric,fields,already,generated,it,returns,a,map,containing,the,field,name,and,its,randomly,generated,value,to,be,later,used,in,checking,the,returned,values;private,map,string,number,create,test,data,for,numeric,value,types,supplier,number,random,generator,throws,exception,ioexception,map,string,number,map,new,hash,map,create,index,test,update,mapping,for,numeric,values,tests,test,index,test,1,builder,byte,random,value,other,than,many,map,contains,value,random,generator,byte,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,int,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,short,value,builder,field,map,put,long,random,value,other,than,many,map,contains,value,random,generator,long,value,builder,field,map,put,double,random,value,other,than,many,map,contains,value,random,generator,double,value,builder,field,map,put,float,random,value,other,than,many,map,contains,value,random,generator,float,value,builder,field,map,put,return,map
ResultSetTestCase -> private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException;1545247545;Creates test data for all numeric get* methods. All values random and different from the other numeric fields already generated._It returns a map containing the field name and its randomly generated value to be later used in checking the returned values.;private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException {_        Map<String,Number> map = new HashMap<>()__        createIndex("test")__        updateMappingForNumericValuesTests("test")__    _        index("test", "1", builder -> {_            _            byte test_byte = randomValueOtherThanMany(map::containsValue, randomGenerator).byteValue()__            builder.field("test_byte", test_byte)__            map.put("test_byte", test_byte)__            _            _            int test_integer = randomValueOtherThanMany(map::containsValue, randomGenerator).intValue()__            builder.field("test_integer", test_integer)__            map.put("test_integer", test_integer)__    _            _            int test_short = randomValueOtherThanMany(map::containsValue, randomGenerator).shortValue()__            builder.field("test_short", test_short)__            map.put("test_short", test_short)__            _            _            long test_long = randomValueOtherThanMany(map::containsValue, randomGenerator).longValue()__            builder.field("test_long", test_long)__            map.put("test_long", test_long)__            _            _            double test_double = randomValueOtherThanMany(map::containsValue, randomGenerator).doubleValue()__            builder.field("test_double", test_double)__            map.put("test_double", test_double)__            _            _            float test_float = randomValueOtherThanMany(map::containsValue, randomGenerator).floatValue()__            builder.field("test_float", test_float)__            map.put("test_float", test_float)__        })__        return map__    };creates,test,data,for,all,numeric,get,methods,all,values,random,and,different,from,the,other,numeric,fields,already,generated,it,returns,a,map,containing,the,field,name,and,its,randomly,generated,value,to,be,later,used,in,checking,the,returned,values;private,map,string,number,create,test,data,for,numeric,value,types,supplier,number,random,generator,throws,exception,ioexception,map,string,number,map,new,hash,map,create,index,test,update,mapping,for,numeric,values,tests,test,index,test,1,builder,byte,random,value,other,than,many,map,contains,value,random,generator,byte,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,int,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,short,value,builder,field,map,put,long,random,value,other,than,many,map,contains,value,random,generator,long,value,builder,field,map,put,double,random,value,other,than,many,map,contains,value,random,generator,double,value,builder,field,map,put,float,random,value,other,than,many,map,contains,value,random,generator,float,value,builder,field,map,put,return,map
ResultSetTestCase -> private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException;1545293826;Creates test data for all numeric get* methods. All values random and different from the other numeric fields already generated._It returns a map containing the field name and its randomly generated value to be later used in checking the returned values.;private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException {_        Map<String,Number> map = new HashMap<>()__        createIndex("test")__        updateMappingForNumericValuesTests("test")__    _        index("test", "1", builder -> {_            _            byte test_byte = randomValueOtherThanMany(map::containsValue, randomGenerator).byteValue()__            builder.field("test_byte", test_byte)__            map.put("test_byte", test_byte)__            _            _            int test_integer = randomValueOtherThanMany(map::containsValue, randomGenerator).intValue()__            builder.field("test_integer", test_integer)__            map.put("test_integer", test_integer)__    _            _            int test_short = randomValueOtherThanMany(map::containsValue, randomGenerator).shortValue()__            builder.field("test_short", test_short)__            map.put("test_short", test_short)__            _            _            long test_long = randomValueOtherThanMany(map::containsValue, randomGenerator).longValue()__            builder.field("test_long", test_long)__            map.put("test_long", test_long)__            _            _            double test_double = randomValueOtherThanMany(map::containsValue, randomGenerator).doubleValue()__            builder.field("test_double", test_double)__            map.put("test_double", test_double)__            _            _            float test_float = randomValueOtherThanMany(map::containsValue, randomGenerator).floatValue()__            builder.field("test_float", test_float)__            map.put("test_float", test_float)__        })__        return map__    };creates,test,data,for,all,numeric,get,methods,all,values,random,and,different,from,the,other,numeric,fields,already,generated,it,returns,a,map,containing,the,field,name,and,its,randomly,generated,value,to,be,later,used,in,checking,the,returned,values;private,map,string,number,create,test,data,for,numeric,value,types,supplier,number,random,generator,throws,exception,ioexception,map,string,number,map,new,hash,map,create,index,test,update,mapping,for,numeric,values,tests,test,index,test,1,builder,byte,random,value,other,than,many,map,contains,value,random,generator,byte,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,int,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,short,value,builder,field,map,put,long,random,value,other,than,many,map,contains,value,random,generator,long,value,builder,field,map,put,double,random,value,other,than,many,map,contains,value,random,generator,double,value,builder,field,map,put,float,random,value,other,than,many,map,contains,value,random,generator,float,value,builder,field,map,put,return,map
ResultSetTestCase -> private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException;1547500081;Creates test data for all numeric get* methods. All values random and different from the other numeric fields already generated._It returns a map containing the field name and its randomly generated value to be later used in checking the returned values.;private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException {_        Map<String,Number> map = new HashMap<>()__        createIndex("test")__        updateMappingForNumericValuesTests("test")__    _        index("test", "1", builder -> {_            _            byte test_byte = randomValueOtherThanMany(map::containsValue, randomGenerator).byteValue()__            builder.field("test_byte", test_byte)__            map.put("test_byte", test_byte)__            _            _            int test_integer = randomValueOtherThanMany(map::containsValue, randomGenerator).intValue()__            builder.field("test_integer", test_integer)__            map.put("test_integer", test_integer)__    _            _            int test_short = randomValueOtherThanMany(map::containsValue, randomGenerator).shortValue()__            builder.field("test_short", test_short)__            map.put("test_short", test_short)__            _            _            long test_long = randomValueOtherThanMany(map::containsValue, randomGenerator).longValue()__            builder.field("test_long", test_long)__            map.put("test_long", test_long)__            _            _            double test_double = randomValueOtherThanMany(map::containsValue, randomGenerator).doubleValue()__            builder.field("test_double", test_double)__            map.put("test_double", test_double)__            _            _            float test_float = randomValueOtherThanMany(map::containsValue, randomGenerator).floatValue()__            builder.field("test_float", test_float)__            map.put("test_float", test_float)__        })__        return map__    };creates,test,data,for,all,numeric,get,methods,all,values,random,and,different,from,the,other,numeric,fields,already,generated,it,returns,a,map,containing,the,field,name,and,its,randomly,generated,value,to,be,later,used,in,checking,the,returned,values;private,map,string,number,create,test,data,for,numeric,value,types,supplier,number,random,generator,throws,exception,ioexception,map,string,number,map,new,hash,map,create,index,test,update,mapping,for,numeric,values,tests,test,index,test,1,builder,byte,random,value,other,than,many,map,contains,value,random,generator,byte,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,int,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,short,value,builder,field,map,put,long,random,value,other,than,many,map,contains,value,random,generator,long,value,builder,field,map,put,double,random,value,other,than,many,map,contains,value,random,generator,double,value,builder,field,map,put,float,random,value,other,than,many,map,contains,value,random,generator,float,value,builder,field,map,put,return,map
ResultSetTestCase -> private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException;1547713078;Creates test data for all numeric get* methods. All values random and different from the other numeric fields already generated._It returns a map containing the field name and its randomly generated value to be later used in checking the returned values.;private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException {_        Map<String,Number> map = new HashMap<>()__        createIndex("test")__        updateMappingForNumericValuesTests("test")__    _        index("test", "1", builder -> {_            _            byte test_byte = randomValueOtherThanMany(map::containsValue, randomGenerator).byteValue()__            builder.field("test_byte", test_byte)__            map.put("test_byte", test_byte)__            _            _            int test_integer = randomValueOtherThanMany(map::containsValue, randomGenerator).intValue()__            builder.field("test_integer", test_integer)__            map.put("test_integer", test_integer)__    _            _            int test_short = randomValueOtherThanMany(map::containsValue, randomGenerator).shortValue()__            builder.field("test_short", test_short)__            map.put("test_short", test_short)__            _            _            long test_long = randomValueOtherThanMany(map::containsValue, randomGenerator).longValue()__            builder.field("test_long", test_long)__            map.put("test_long", test_long)__            _            _            double test_double = randomValueOtherThanMany(map::containsValue, randomGenerator).doubleValue()__            builder.field("test_double", test_double)__            map.put("test_double", test_double)__            _            _            float test_float = randomValueOtherThanMany(map::containsValue, randomGenerator).floatValue()__            builder.field("test_float", test_float)__            map.put("test_float", test_float)__        })__        return map__    };creates,test,data,for,all,numeric,get,methods,all,values,random,and,different,from,the,other,numeric,fields,already,generated,it,returns,a,map,containing,the,field,name,and,its,randomly,generated,value,to,be,later,used,in,checking,the,returned,values;private,map,string,number,create,test,data,for,numeric,value,types,supplier,number,random,generator,throws,exception,ioexception,map,string,number,map,new,hash,map,create,index,test,update,mapping,for,numeric,values,tests,test,index,test,1,builder,byte,random,value,other,than,many,map,contains,value,random,generator,byte,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,int,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,short,value,builder,field,map,put,long,random,value,other,than,many,map,contains,value,random,generator,long,value,builder,field,map,put,double,random,value,other,than,many,map,contains,value,random,generator,double,value,builder,field,map,put,float,random,value,other,than,many,map,contains,value,random,generator,float,value,builder,field,map,put,return,map
ResultSetTestCase -> private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException;1550140938;Creates test data for all numeric get* methods. All values random and different from the other numeric fields already generated._It returns a map containing the field name and its randomly generated value to be later used in checking the returned values.;private Map<String,Number> createTestDataForNumericValueTypes(Supplier<Number> randomGenerator) throws Exception, IOException {_        Map<String,Number> map = new HashMap<>()__        createIndex("test")__        updateMappingForNumericValuesTests("test")__    _        index("test", "1", builder -> {_            _            byte test_byte = randomValueOtherThanMany(map::containsValue, randomGenerator).byteValue()__            builder.field("test_byte", test_byte)__            map.put("test_byte", test_byte)__            _            _            int test_integer = randomValueOtherThanMany(map::containsValue, randomGenerator).intValue()__            builder.field("test_integer", test_integer)__            map.put("test_integer", test_integer)__    _            _            int test_short = randomValueOtherThanMany(map::containsValue, randomGenerator).shortValue()__            builder.field("test_short", test_short)__            map.put("test_short", test_short)__            _            _            long test_long = randomValueOtherThanMany(map::containsValue, randomGenerator).longValue()__            builder.field("test_long", test_long)__            map.put("test_long", test_long)__            _            _            double test_double = randomValueOtherThanMany(map::containsValue, randomGenerator).doubleValue()__            builder.field("test_double", test_double)__            map.put("test_double", test_double)__            _            _            float test_float = randomValueOtherThanMany(map::containsValue, randomGenerator).floatValue()__            builder.field("test_float", test_float)__            map.put("test_float", test_float)__        })__        return map__    };creates,test,data,for,all,numeric,get,methods,all,values,random,and,different,from,the,other,numeric,fields,already,generated,it,returns,a,map,containing,the,field,name,and,its,randomly,generated,value,to,be,later,used,in,checking,the,returned,values;private,map,string,number,create,test,data,for,numeric,value,types,supplier,number,random,generator,throws,exception,ioexception,map,string,number,map,new,hash,map,create,index,test,update,mapping,for,numeric,values,tests,test,index,test,1,builder,byte,random,value,other,than,many,map,contains,value,random,generator,byte,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,int,value,builder,field,map,put,int,random,value,other,than,many,map,contains,value,random,generator,short,value,builder,field,map,put,long,random,value,other,than,many,map,contains,value,random,generator,long,value,builder,field,map,put,double,random,value,other,than,many,map,contains,value,random,generator,double,value,builder,field,map,put,float,random,value,other,than,many,map,contains,value,random,generator,float,value,builder,field,map,put,return,map
