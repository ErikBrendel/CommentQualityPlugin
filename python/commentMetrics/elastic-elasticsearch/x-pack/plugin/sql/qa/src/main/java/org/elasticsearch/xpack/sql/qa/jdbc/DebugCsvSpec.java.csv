commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@ParametersFactory(shuffle = false, argumentFormatting = SqlSpecTestCase.PARAM_FORMATTING) public static List<Object[]> readScriptSpec() throws Exception {     Parser parser = specParser().     return readScriptSpec("/debug.csv-spec", parser). }
false;protected;2;11;;@Override protected void assertResults(ResultSet expected, ResultSet elastic) throws SQLException {     Logger log = logEsResultSet() ? logger : null.     //      // uncomment this to printout the result set and create new CSV tests     //      JdbcTestUtils.logResultSetMetadata(elastic, log).     JdbcTestUtils.logResultSetData(elastic, log). // JdbcAssert.assertResultSets(expected, elastic, log). }
false;protected;0;4;;@Override protected boolean logEsResultSet() {     return true. }
false;protected,final;0;9;;@Override protected final void doTest() throws Throwable {     try (Connection csv = csvConnection(testCase).         Connection es = esJdbc()) {         // pass the testName as table for debugging purposes (in case the underlying reader is missing)         ResultSet expected = executeCsvQuery(csv, testName).         ResultSet elasticResults = executeJdbcQuery(es, testCase.query).         assertResults(expected, elasticResults).     } }
