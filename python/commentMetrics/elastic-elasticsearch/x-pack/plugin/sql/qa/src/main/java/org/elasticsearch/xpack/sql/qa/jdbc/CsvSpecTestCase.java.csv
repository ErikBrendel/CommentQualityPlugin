commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;19;;@ParametersFactory(argumentFormatting = PARAM_FORMATTING) public static List<Object[]> readScriptSpec() throws Exception {     Parser parser = specParser().     List<Object[]> tests = new ArrayList<>().     tests.addAll(readScriptSpec("/select.csv-spec", parser)).     tests.addAll(readScriptSpec("/command.csv-spec", parser)).     tests.addAll(readScriptSpec("/fulltext.csv-spec", parser)).     tests.addAll(readScriptSpec("/agg.csv-spec", parser)).     tests.addAll(readScriptSpec("/columns.csv-spec", parser)).     tests.addAll(readScriptSpec("/date.csv-spec", parser)).     tests.addAll(readScriptSpec("/datetime.csv-spec", parser)).     tests.addAll(readScriptSpec("/alias.csv-spec", parser)).     tests.addAll(readScriptSpec("/null.csv-spec", parser)).     tests.addAll(readScriptSpec("/nested.csv-spec", parser)).     tests.addAll(readScriptSpec("/functions.csv-spec", parser)).     tests.addAll(readScriptSpec("/math.csv-spec", parser)).     tests.addAll(readScriptSpec("/field-alias.csv-spec", parser)).     return tests. }
false;protected,final;0;10;;@Override protected final void doTest() throws Throwable {     try (Connection csv = csvConnection(testCase).         Connection es = esJdbc()) {         // pass the testName as table for debugging purposes (in case the underlying reader is missing)         ResultSet expected = executeCsvQuery(csv, testName).         ResultSet elasticResults = executeJdbcQuery(es, testCase.query).         assertResults(expected, elasticResults).     } }
false;protected;2;5;;@Override protected void assertResults(ResultSet expected, ResultSet elastic) throws SQLException {     Logger log = logEsResultSet() ? logger : null.     JdbcAssert.assertResultSets(expected, elastic, log, false, false). }
