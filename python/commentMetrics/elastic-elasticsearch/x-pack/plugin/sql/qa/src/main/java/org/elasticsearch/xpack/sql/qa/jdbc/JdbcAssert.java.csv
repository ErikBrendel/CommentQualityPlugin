# id;timestamp;commentText;codeText;commentWords;codeWords
JdbcAssert -> public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenient) throws SQLException;1541008027;Assert the given result sets, potentially in a lenient way._When lenient is specified, the type comparison of a column is widden to reach a common, compatible ground._This means promoting integer types to long and floating types to double and comparing their values._For example in a non-lenient, strict case a comparison between an int and a tinyint would fail, with lenient it will succeed as_long as the actual value is the same.;public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenient) throws SQLException {_        try (ResultSet ex = expected_ ResultSet ac = actual) {_            assertResultSetMetadata(ex, ac, logger, lenient)__            assertResultSetData(ex, ac, logger, lenient)__        }_    };assert,the,given,result,sets,potentially,in,a,lenient,way,when,lenient,is,specified,the,type,comparison,of,a,column,is,widden,to,reach,a,common,compatible,ground,this,means,promoting,integer,types,to,long,and,floating,types,to,double,and,comparing,their,values,for,example,in,a,non,lenient,strict,case,a,comparison,between,an,int,and,a,tinyint,would,fail,with,lenient,it,will,succeed,as,long,as,the,actual,value,is,the,same;public,static,void,assert,result,sets,result,set,expected,result,set,actual,logger,logger,boolean,lenient,throws,sqlexception,try,result,set,ex,expected,result,set,ac,actual,assert,result,set,metadata,ex,ac,logger,lenient,assert,result,set,data,ex,ac,logger,lenient
JdbcAssert -> public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenient) throws SQLException;1541502744;Assert the given result sets, potentially in a lenient way._When lenient is specified, the type comparison of a column is widden to reach a common, compatible ground._This means promoting integer types to long and floating types to double and comparing their values._For example in a non-lenient, strict case a comparison between an int and a tinyint would fail, with lenient it will succeed as_long as the actual value is the same.;public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenient) throws SQLException {_        try (ResultSet ex = expected_ ResultSet ac = actual) {_            assertResultSetMetadata(ex, ac, logger, lenient)__            assertResultSetData(ex, ac, logger, lenient)__        }_    };assert,the,given,result,sets,potentially,in,a,lenient,way,when,lenient,is,specified,the,type,comparison,of,a,column,is,widden,to,reach,a,common,compatible,ground,this,means,promoting,integer,types,to,long,and,floating,types,to,double,and,comparing,their,values,for,example,in,a,non,lenient,strict,case,a,comparison,between,an,int,and,a,tinyint,would,fail,with,lenient,it,will,succeed,as,long,as,the,actual,value,is,the,same;public,static,void,assert,result,sets,result,set,expected,result,set,actual,logger,logger,boolean,lenient,throws,sqlexception,try,result,set,ex,expected,result,set,ac,actual,assert,result,set,metadata,ex,ac,logger,lenient,assert,result,set,data,ex,ac,logger,lenient
JdbcAssert -> public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenient) throws SQLException;1542807959;Assert the given result sets, potentially in a lenient way._When lenient is specified, the type comparison of a column is widden to reach a common, compatible ground._This means promoting integer types to long and floating types to double and comparing their values._For example in a non-lenient, strict case a comparison between an int and a tinyint would fail, with lenient it will succeed as_long as the actual value is the same.;public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenient) throws SQLException {_        try (ResultSet ex = expected_ ResultSet ac = actual) {_            assertResultSetMetadata(ex, ac, logger, lenient)__            assertResultSetData(ex, ac, logger, lenient)__        }_    };assert,the,given,result,sets,potentially,in,a,lenient,way,when,lenient,is,specified,the,type,comparison,of,a,column,is,widden,to,reach,a,common,compatible,ground,this,means,promoting,integer,types,to,long,and,floating,types,to,double,and,comparing,their,values,for,example,in,a,non,lenient,strict,case,a,comparison,between,an,int,and,a,tinyint,would,fail,with,lenient,it,will,succeed,as,long,as,the,actual,value,is,the,same;public,static,void,assert,result,sets,result,set,expected,result,set,actual,logger,logger,boolean,lenient,throws,sqlexception,try,result,set,ex,expected,result,set,ac,actual,assert,result,set,metadata,ex,ac,logger,lenient,assert,result,set,data,ex,ac,logger,lenient
JdbcAssert -> public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenient) throws SQLException;1543402106;Assert the given result sets, potentially in a lenient way._When lenient is specified, the type comparison of a column is widden to reach a common, compatible ground._This means promoting integer types to long and floating types to double and comparing their values._For example in a non-lenient, strict case a comparison between an int and a tinyint would fail, with lenient it will succeed as_long as the actual value is the same.;public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenient) throws SQLException {_        try (ResultSet ex = expected_ ResultSet ac = actual) {_            assertResultSetMetadata(ex, ac, logger, lenient)__            assertResultSetData(ex, ac, logger, lenient)__        }_    };assert,the,given,result,sets,potentially,in,a,lenient,way,when,lenient,is,specified,the,type,comparison,of,a,column,is,widden,to,reach,a,common,compatible,ground,this,means,promoting,integer,types,to,long,and,floating,types,to,double,and,comparing,their,values,for,example,in,a,non,lenient,strict,case,a,comparison,between,an,int,and,a,tinyint,would,fail,with,lenient,it,will,succeed,as,long,as,the,actual,value,is,the,same;public,static,void,assert,result,sets,result,set,expected,result,set,actual,logger,logger,boolean,lenient,throws,sqlexception,try,result,set,ex,expected,result,set,ac,actual,assert,result,set,metadata,ex,ac,logger,lenient,assert,result,set,data,ex,ac,logger,lenient
JdbcAssert -> private static int typeOf(int columnType, boolean lenientDataType);1544736572;Returns the value of the given type either in a lenient fashion (widened) or strict.;private static int typeOf(int columnType, boolean lenientDataType) {_        if (lenientDataType) {_            _            if (columnType == TINYINT || columnType == SMALLINT || columnType == INTEGER || columnType == BIGINT) {_                return BIGINT__            }_            if (columnType == FLOAT || columnType == REAL || columnType == DOUBLE) {_                return REAL__            }_        }__        return columnType__    };returns,the,value,of,the,given,type,either,in,a,lenient,fashion,widened,or,strict;private,static,int,type,of,int,column,type,boolean,lenient,data,type,if,lenient,data,type,if,column,type,tinyint,column,type,smallint,column,type,integer,column,type,bigint,return,bigint,if,column,type,float,column,type,real,column,type,double,return,real,return,column,type
JdbcAssert -> private static int typeOf(int columnType, boolean lenientDataType);1548330118;Returns the value of the given type either in a lenient fashion (widened) or strict.;private static int typeOf(int columnType, boolean lenientDataType) {_        if (lenientDataType) {_            _            if (columnType == TINYINT || columnType == SMALLINT || columnType == INTEGER || columnType == BIGINT) {_                return BIGINT__            }_            if (columnType == FLOAT || columnType == REAL || columnType == DOUBLE) {_                return REAL__            }_        }__        return columnType__    };returns,the,value,of,the,given,type,either,in,a,lenient,fashion,widened,or,strict;private,static,int,type,of,int,column,type,boolean,lenient,data,type,if,lenient,data,type,if,column,type,tinyint,column,type,smallint,column,type,integer,column,type,bigint,return,bigint,if,column,type,float,column,type,real,column,type,double,return,real,return,column,type
JdbcAssert -> private static int typeOf(int columnType, boolean lenient);1541008027;Returns the value of the given type either in a lenient fashion (widened) or strict.;private static int typeOf(int columnType, boolean lenient) {_        if (lenient) {_            _            if (columnType == TINYINT || columnType == SMALLINT || columnType == INTEGER || columnType == BIGINT) {_                return BIGINT__            }_            if (columnType == FLOAT || columnType == REAL || columnType == DOUBLE) {_                return REAL__            }_        }__        return columnType__    };returns,the,value,of,the,given,type,either,in,a,lenient,fashion,widened,or,strict;private,static,int,type,of,int,column,type,boolean,lenient,if,lenient,if,column,type,tinyint,column,type,smallint,column,type,integer,column,type,bigint,return,bigint,if,column,type,float,column,type,real,column,type,double,return,real,return,column,type
JdbcAssert -> private static int typeOf(int columnType, boolean lenient);1541502744;Returns the value of the given type either in a lenient fashion (widened) or strict.;private static int typeOf(int columnType, boolean lenient) {_        if (lenient) {_            _            if (columnType == TINYINT || columnType == SMALLINT || columnType == INTEGER || columnType == BIGINT) {_                return BIGINT__            }_            if (columnType == FLOAT || columnType == REAL || columnType == DOUBLE) {_                return REAL__            }_        }__        return columnType__    };returns,the,value,of,the,given,type,either,in,a,lenient,fashion,widened,or,strict;private,static,int,type,of,int,column,type,boolean,lenient,if,lenient,if,column,type,tinyint,column,type,smallint,column,type,integer,column,type,bigint,return,bigint,if,column,type,float,column,type,real,column,type,double,return,real,return,column,type
JdbcAssert -> private static int typeOf(int columnType, boolean lenient);1542807959;Returns the value of the given type either in a lenient fashion (widened) or strict.;private static int typeOf(int columnType, boolean lenient) {_        if (lenient) {_            _            if (columnType == TINYINT || columnType == SMALLINT || columnType == INTEGER || columnType == BIGINT) {_                return BIGINT__            }_            if (columnType == FLOAT || columnType == REAL || columnType == DOUBLE) {_                return REAL__            }_        }__        return columnType__    };returns,the,value,of,the,given,type,either,in,a,lenient,fashion,widened,or,strict;private,static,int,type,of,int,column,type,boolean,lenient,if,lenient,if,column,type,tinyint,column,type,smallint,column,type,integer,column,type,bigint,return,bigint,if,column,type,float,column,type,real,column,type,double,return,real,return,column,type
JdbcAssert -> private static int typeOf(int columnType, boolean lenient);1543402106;Returns the value of the given type either in a lenient fashion (widened) or strict.;private static int typeOf(int columnType, boolean lenient) {_        if (lenient) {_            _            if (columnType == TINYINT || columnType == SMALLINT || columnType == INTEGER || columnType == BIGINT) {_                return BIGINT__            }_            if (columnType == FLOAT || columnType == REAL || columnType == DOUBLE) {_                return REAL__            }_        }__        return columnType__    };returns,the,value,of,the,given,type,either,in,a,lenient,fashion,widened,or,strict;private,static,int,type,of,int,column,type,boolean,lenient,if,lenient,if,column,type,tinyint,column,type,smallint,column,type,integer,column,type,bigint,return,bigint,if,column,type,float,column,type,real,column,type,double,return,real,return,column,type
JdbcAssert -> public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenientDataType,             boolean lenientFloatingNumbers) throws SQLException;1544736572;Assert the given result sets, potentially in a lenient way._When lenientDataType is specified, the type comparison of a column is widden to reach a common, compatible ground._This means promoting integer types to long and floating types to double and comparing their values._For example in a non-lenient, strict case a comparison between an int and a tinyint would fail, with lenientDataType it will succeed_as long as the actual value is the same._Also, has the option of treating the numeric results for floating point numbers in a leninent way, if chosen to. Usually,_we would want lenient treatment for floating point numbers in sql-spec tests where the comparison is being made with H2.;public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenientDataType,_            boolean lenientFloatingNumbers) throws SQLException {_        try (ResultSet ex = expected_ ResultSet ac = actual) {_            assertResultSetMetadata(ex, ac, logger, lenientDataType)__            assertResultSetData(ex, ac, logger, lenientDataType, lenientFloatingNumbers)__        }_    };assert,the,given,result,sets,potentially,in,a,lenient,way,when,lenient,data,type,is,specified,the,type,comparison,of,a,column,is,widden,to,reach,a,common,compatible,ground,this,means,promoting,integer,types,to,long,and,floating,types,to,double,and,comparing,their,values,for,example,in,a,non,lenient,strict,case,a,comparison,between,an,int,and,a,tinyint,would,fail,with,lenient,data,type,it,will,succeed,as,long,as,the,actual,value,is,the,same,also,has,the,option,of,treating,the,numeric,results,for,floating,point,numbers,in,a,leninent,way,if,chosen,to,usually,we,would,want,lenient,treatment,for,floating,point,numbers,in,sql,spec,tests,where,the,comparison,is,being,made,with,h2;public,static,void,assert,result,sets,result,set,expected,result,set,actual,logger,logger,boolean,lenient,data,type,boolean,lenient,floating,numbers,throws,sqlexception,try,result,set,ex,expected,result,set,ac,actual,assert,result,set,metadata,ex,ac,logger,lenient,data,type,assert,result,set,data,ex,ac,logger,lenient,data,type,lenient,floating,numbers
JdbcAssert -> public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenientDataType,             boolean lenientFloatingNumbers) throws SQLException;1548330118;Assert the given result sets, potentially in a lenient way._When lenientDataType is specified, the type comparison of a column is widden to reach a common, compatible ground._This means promoting integer types to long and floating types to double and comparing their values._For example in a non-lenient, strict case a comparison between an int and a tinyint would fail, with lenientDataType it will succeed_as long as the actual value is the same._Also, has the option of treating the numeric results for floating point numbers in a leninent way, if chosen to. Usually,_we would want lenient treatment for floating point numbers in sql-spec tests where the comparison is being made with H2.;public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenientDataType,_            boolean lenientFloatingNumbers) throws SQLException {_        try (ResultSet ex = expected_ ResultSet ac = actual) {_            assertResultSetMetadata(ex, ac, logger, lenientDataType)__            assertResultSetData(ex, ac, logger, lenientDataType, lenientFloatingNumbers)__        }_    };assert,the,given,result,sets,potentially,in,a,lenient,way,when,lenient,data,type,is,specified,the,type,comparison,of,a,column,is,widden,to,reach,a,common,compatible,ground,this,means,promoting,integer,types,to,long,and,floating,types,to,double,and,comparing,their,values,for,example,in,a,non,lenient,strict,case,a,comparison,between,an,int,and,a,tinyint,would,fail,with,lenient,data,type,it,will,succeed,as,long,as,the,actual,value,is,the,same,also,has,the,option,of,treating,the,numeric,results,for,floating,point,numbers,in,a,leninent,way,if,chosen,to,usually,we,would,want,lenient,treatment,for,floating,point,numbers,in,sql,spec,tests,where,the,comparison,is,being,made,with,h2;public,static,void,assert,result,sets,result,set,expected,result,set,actual,logger,logger,boolean,lenient,data,type,boolean,lenient,floating,numbers,throws,sqlexception,try,result,set,ex,expected,result,set,ac,actual,assert,result,set,metadata,ex,ac,logger,lenient,data,type,assert,result,set,data,ex,ac,logger,lenient,data,type,lenient,floating,numbers
JdbcAssert -> public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenientDataType) throws SQLException;1544736572;Assert the given result sets, potentially in a lenient way._When lenientDataType is specified, the type comparison of a column is widden to reach a common, compatible ground._This means promoting integer types to long and floating types to double and comparing their values._For example in a non-lenient, strict case a comparison between an int and a tinyint would fail, with lenientDataType it will succeed_as long as the actual value is the same.;public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenientDataType) throws SQLException {_        assertResultSets(expected, actual, logger, lenientDataType, true)__    };assert,the,given,result,sets,potentially,in,a,lenient,way,when,lenient,data,type,is,specified,the,type,comparison,of,a,column,is,widden,to,reach,a,common,compatible,ground,this,means,promoting,integer,types,to,long,and,floating,types,to,double,and,comparing,their,values,for,example,in,a,non,lenient,strict,case,a,comparison,between,an,int,and,a,tinyint,would,fail,with,lenient,data,type,it,will,succeed,as,long,as,the,actual,value,is,the,same;public,static,void,assert,result,sets,result,set,expected,result,set,actual,logger,logger,boolean,lenient,data,type,throws,sqlexception,assert,result,sets,expected,actual,logger,lenient,data,type,true
JdbcAssert -> public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenientDataType) throws SQLException;1548330118;Assert the given result sets, potentially in a lenient way._When lenientDataType is specified, the type comparison of a column is widden to reach a common, compatible ground._This means promoting integer types to long and floating types to double and comparing their values._For example in a non-lenient, strict case a comparison between an int and a tinyint would fail, with lenientDataType it will succeed_as long as the actual value is the same.;public static void assertResultSets(ResultSet expected, ResultSet actual, Logger logger, boolean lenientDataType) throws SQLException {_        assertResultSets(expected, actual, logger, lenientDataType, true)__    };assert,the,given,result,sets,potentially,in,a,lenient,way,when,lenient,data,type,is,specified,the,type,comparison,of,a,column,is,widden,to,reach,a,common,compatible,ground,this,means,promoting,integer,types,to,long,and,floating,types,to,double,and,comparing,their,values,for,example,in,a,non,lenient,strict,case,a,comparison,between,an,int,and,a,tinyint,would,fail,with,lenient,data,type,it,will,succeed,as,long,as,the,actual,value,is,the,same;public,static,void,assert,result,sets,result,set,expected,result,set,actual,logger,logger,boolean,lenient,data,type,throws,sqlexception,assert,result,sets,expected,actual,logger,lenient,data,type,true
