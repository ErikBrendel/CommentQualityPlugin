commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void testValidGetObjectCalls() throws Exception {     ResultSetTestCase.createIndex("test").     ResultSetTestCase.updateMapping("test", builder -> {         for (String field : fieldsNames) {             builder.startObject(field).field("type", field.substring(5)).endObject().         }     }).     String q = "SELECT test_byte, test_integer, test_long, test_short, test_double, test_float, test_keyword, " + "test_boolean, test_date FROM test".     doWithQuery(q, (r) -> assertColumnNamesAndLabels(r.getMetaData(), fieldsNames)).     q = "SELECT test_byte AS b, test_integer AS i, test_long AS l, test_short AS s, test_double AS d, test_float AS f, " + "test_keyword AS k, test_boolean AS bool, test_date AS dt FROM test".     doWithQuery(q, (r) -> assertColumnNamesAndLabels(r.getMetaData(), new String[] { "b", "i", "l", "s", "d", "f", "k", "bool", "dt" })). }
false;private;2;10;;private void doWithQuery(String query, CheckedConsumer<ResultSet, SQLException> consumer) throws SQLException {     try (Connection connection = esJdbc()) {         try (PreparedStatement statement = connection.prepareStatement(query)) {             try (ResultSet results = statement.executeQuery()) {                 assertEquals(fieldsNames.length, results.getMetaData().getColumnCount()).                 consumer.accept(results).             }         }     } }
false;private;2;6;;private void assertColumnNamesAndLabels(ResultSetMetaData metaData, String[] names) throws SQLException {     for (int i = 0. i < fieldsNames.length. i++) {         assertEquals(names[i], metaData.getColumnName(i + 1)).         assertEquals(names[i], metaData.getColumnLabel(i + 1)).     } }
