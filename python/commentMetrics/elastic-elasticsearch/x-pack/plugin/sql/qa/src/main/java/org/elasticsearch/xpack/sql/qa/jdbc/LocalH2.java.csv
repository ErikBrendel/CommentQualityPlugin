commented;modifiers;parameterAmount;loc;comment;code
true;private,static;1;4;// http://www.h2database.com/html/features.html#in_memory_databases ;/*      * The syntax on the connection string is fairly particular:      *      mem:. creates an anonymous database in memory. The `.` is      *              technically the separator that comes after the name.      *      DATABASE_TO_UPPER=false turns *off* H2's Oracle-like habit      *              of upper-casing everything that isn't quoted.      *      ALIAS_COLUMN_NAME=true turn *on* returning alias names in      *              result set metadata which is what most DBs do except      *              for MySQL and, by default, H2. Our jdbc driver does it.      */ // http://www.h2database.com/html/features.html#in_memory_databases private static String memUrl(String name) {     String n = name == null ? "" : name.     return "jdbc:h2:mem:" + n + ".DATABASE_TO_UPPER=false.ALIAS_COLUMN_NAME=true". }
true;public,static;0;3;/**  * Creates an in memory anonymous database and returns the only connection to it.  * Closing the connection will remove the db.  */ ;/**  * Creates an in memory anonymous database and returns the only connection to it.  * Closing the connection will remove the db.  */ public static Connection anonymousDb() throws SQLException {     return DriverManager.getConnection(memUrl(null)). }
false;protected;0;5;;@Override protected void before() throws Throwable {     keepAlive = get().     initializer.accept(keepAlive). }
false;protected;0;8;;@Override protected void after() {     try {         keepAlive.close().     } catch (SQLException ex) {     // close     } }
false;public;0;4;;@Override public Connection get() throws SQLException {     return DriverManager.getConnection(url, DEFAULTS). }
