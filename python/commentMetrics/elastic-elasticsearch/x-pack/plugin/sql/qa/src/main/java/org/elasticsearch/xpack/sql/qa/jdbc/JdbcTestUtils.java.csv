commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;29;;public static void logResultSetMetadata(ResultSet rs, Logger logger) throws SQLException {     ResultSetMetaData metaData = rs.getMetaData().     // header     StringBuilder sb = new StringBuilder().     StringBuilder column = new StringBuilder().     int columns = metaData.getColumnCount().     for (int i = 1. i <= columns. i++) {         if (i > 1) {             sb.append(" | ").         }         column.setLength(0).         column.append(metaData.getColumnName(i)).         column.append("(").         column.append(metaData.getColumnTypeName(i)).         column.append(")").         sb.append(trimOrPad(column)).     }     int l = sb.length().     logger.info(sb.toString()).     sb.setLength(0).     for (int i = 0. i < l. i++) {         sb.append("-").     }     logger.info(sb.toString()). }
false;public,static;2;19;;public static void logResultSetData(ResultSet rs, Logger log) throws SQLException {     ResultSetMetaData metaData = rs.getMetaData().     StringBuilder sb = new StringBuilder().     StringBuilder column = new StringBuilder().     int columns = metaData.getColumnCount().     while (rs.next()) {         sb.setLength(0).         for (int i = 1. i <= columns. i++) {             column.setLength(0).             if (i > 1) {                 sb.append(" | ").             }             sb.append(trimOrPad(column.append(rs.getString(i)))).         }         log.info(sb).     } }
false;public,static;1;16;;public static String resultSetCurrentData(ResultSet rs) throws SQLException {     ResultSetMetaData metaData = rs.getMetaData().     StringBuilder column = new StringBuilder().     int columns = metaData.getColumnCount().     StringBuilder sb = new StringBuilder().     for (int i = 1. i <= columns. i++) {         column.setLength(0).         if (i > 1) {             sb.append(" | ").         }         sb.append(trimOrPad(column.append(rs.getString(i)))).     }     return sb.toString(). }
false;private,static;1;12;;private static StringBuilder trimOrPad(StringBuilder buffer) {     if (buffer.length() > MAX_WIDTH) {         buffer.setLength(MAX_WIDTH - 1).         buffer.append("~").     } else {         for (int i = buffer.length(). i < MAX_WIDTH. i++) {             buffer.append(" ").         }     }     return buffer. }
false;public,static;2;25;;public static void logLikeCLI(ResultSet rs, Logger logger) throws SQLException {     ResultSetMetaData metaData = rs.getMetaData().     int columns = metaData.getColumnCount().     List<ColumnInfo> cols = new ArrayList<>(columns).     for (int i = 1. i <= columns. i++) {         cols.add(new ColumnInfo(metaData.getTableName(i), metaData.getColumnName(i), metaData.getColumnTypeName(i), metaData.getColumnDisplaySize(i))).     }     List<List<Object>> data = new ArrayList<>().     while (rs.next()) {         List<Object> entry = new ArrayList<>(columns).         for (int i = 1. i <= columns. i++) {             entry.add(rs.getObject(i)).         }         data.add(entry).     }     BasicFormatter formatter = new BasicFormatter(cols, data, CLI).     logger.info("\n" + formatter.formatWithHeader(cols, data)). }
false;public,static;1;3;;public static String of(long millis) {     return StringUtils.toString(ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), UTC)). }
