# id;timestamp;commentText;codeText;commentWords;codeWords
RestSqlTestCase -> private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException;1541008027;Run SQL as text using the {@code format} parameter to specify the format_rather than an {@code Accept} header.;private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException {_        Request request = new Request("POST", "/_xpack/sql")__        request.addParameter("error_trace", "true")__        request.addParameter("format", format)__        request.setJsonEntity("{\"query\":\"" + sql + "\"}")___        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,format,parameter,to,specify,the,format,rather,than,an,code,accept,header;private,tuple,string,string,run,sql,as,text,format,string,sql,string,format,throws,ioexception,request,request,new,request,post,sql,request,add,parameter,true,request,add,parameter,format,format,request,set,json,entity,query,sql,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException;1541092382;Run SQL as text using the {@code format} parameter to specify the format_rather than an {@code Accept} header.;private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException {_        Request request = new Request("POST", "/_xpack/sql")__        request.addParameter("error_trace", "true")__        request.addParameter("format", format)__        request.setJsonEntity("{\"query\":\"" + sql + "\"}")___        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,format,parameter,to,specify,the,format,rather,than,an,code,accept,header;private,tuple,string,string,run,sql,as,text,format,string,sql,string,format,throws,ioexception,request,request,new,request,post,sql,request,add,parameter,true,request,add,parameter,format,format,request,set,json,entity,query,sql,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException;1543374981;Run SQL as text using the {@code format} parameter to specify the format_rather than an {@code Accept} header.;private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException {_        Request request = new Request("POST", "/_sql")__        request.addParameter("error_trace", "true")__        request.addParameter("format", format)__        request.setJsonEntity("{\"query\":\"" + sql + "\"}")___        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,format,parameter,to,specify,the,format,rather,than,an,code,accept,header;private,tuple,string,string,run,sql,as,text,format,string,sql,string,format,throws,ioexception,request,request,new,request,post,request,add,parameter,true,request,add,parameter,format,format,request,set,json,entity,query,sql,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException;1544548671;Run SQL as text using the {@code format} parameter to specify the format_rather than an {@code Accept} header.;private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException {_        Request request = new Request("POST", "/_sql")__        request.addParameter("error_trace", "true")__        request.addParameter("format", format)__        request.setJsonEntity("{\"query\":\"" + sql + "\"}")___        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,format,parameter,to,specify,the,format,rather,than,an,code,accept,header;private,tuple,string,string,run,sql,as,text,format,string,sql,string,format,throws,ioexception,request,request,new,request,post,request,add,parameter,true,request,add,parameter,format,format,request,set,json,entity,query,sql,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException;1545037552;Run SQL as text using the {@code format} parameter to specify the format_rather than an {@code Accept} header.;private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException {_        Request request = new Request("POST", "/_sql")__        request.addParameter("error_trace", "true")__        request.addParameter("format", format)__        request.setJsonEntity("{\"query\":\"" + sql + "\"}")___        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,format,parameter,to,specify,the,format,rather,than,an,code,accept,header;private,tuple,string,string,run,sql,as,text,format,string,sql,string,format,throws,ioexception,request,request,new,request,post,request,add,parameter,true,request,add,parameter,format,format,request,set,json,entity,query,sql,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException;1545141229;Run SQL as text using the {@code format} parameter to specify the format_rather than an {@code Accept} header.;private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException {_        Request request = new Request("POST", "/_sql")__        request.addParameter("error_trace", "true")__        request.addParameter("format", format)__        request.setJsonEntity("{\"query\":\"" + sql + "\"}")___        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,format,parameter,to,specify,the,format,rather,than,an,code,accept,header;private,tuple,string,string,run,sql,as,text,format,string,sql,string,format,throws,ioexception,request,request,new,request,post,request,add,parameter,true,request,add,parameter,format,format,request,set,json,entity,query,sql,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException;1546845683;Run SQL as text using the {@code format} parameter to specify the format_rather than an {@code Accept} header.;private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException {_        Request request = new Request("POST", "/_sql")__        request.addParameter("error_trace", "true")__        request.addParameter("format", format)__        request.setJsonEntity("{\"query\":\"" + sql + "\"}")___        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,format,parameter,to,specify,the,format,rather,than,an,code,accept,header;private,tuple,string,string,run,sql,as,text,format,string,sql,string,format,throws,ioexception,request,request,new,request,post,request,add,parameter,true,request,add,parameter,format,format,request,set,json,entity,query,sql,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException;1547156119;Run SQL as text using the {@code format} parameter to specify the format_rather than an {@code Accept} header.;private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException {_        Request request = new Request("POST", "/_sql")__        request.addParameter("error_trace", "true")__        request.addParameter("format", format)__        request.setJsonEntity("{\"query\":\"" + sql + "\"}")___        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,format,parameter,to,specify,the,format,rather,than,an,code,accept,header;private,tuple,string,string,run,sql,as,text,format,string,sql,string,format,throws,ioexception,request,request,new,request,post,request,add,parameter,true,request,add,parameter,format,format,request,set,json,entity,query,sql,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException;1547648926;Run SQL as text using the {@code format} parameter to specify the format_rather than an {@code Accept} header.;private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException {_        Request request = new Request("POST", "/_sql")__        request.addParameter("error_trace", "true")__        request.addParameter("format", format)__        request.setJsonEntity("{\"query\":\"" + sql + "\"}")___        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,format,parameter,to,specify,the,format,rather,than,an,code,accept,header;private,tuple,string,string,run,sql,as,text,format,string,sql,string,format,throws,ioexception,request,request,new,request,post,request,add,parameter,true,request,add,parameter,format,format,request,set,json,entity,query,sql,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException;1548144111;Run SQL as text using the {@code format} parameter to specify the format_rather than an {@code Accept} header.;private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException {_        Request request = new Request("POST", SQL_QUERY_REST_ENDPOINT)__        request.addParameter("error_trace", "true")__        request.addParameter("format", format)__        request.setJsonEntity("{\"query\":\"" + sql + "\"}")___        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,format,parameter,to,specify,the,format,rather,than,an,code,accept,header;private,tuple,string,string,run,sql,as,text,format,string,sql,string,format,throws,ioexception,request,request,new,request,post,request,add,parameter,true,request,add,parameter,format,format,request,set,json,entity,query,sql,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException;1551252292;Run SQL as text using the {@code format} parameter to specify the format_rather than an {@code Accept} header.;private Tuple<String, String> runSqlAsTextFormat(String sql, String format) throws IOException {_        Request request = new Request("POST", SQL_QUERY_REST_ENDPOINT)__        request.addParameter("error_trace", "true")__        request.addParameter("format", format)__        request.setJsonEntity("{\"query\":\"" + sql + "\"}")___        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,format,parameter,to,specify,the,format,rather,than,an,code,accept,header;private,tuple,string,string,run,sql,as,text,format,string,sql,string,format,throws,ioexception,request,request,new,request,post,request,add,parameter,true,request,add,parameter,format,format,request,set,json,entity,query,sql,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException;1541008027;Run SQL as text using the {@code Accept} header to specify the format_rather than the {@code format} parameter.;private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException {_        Request request = new Request("POST", "/_xpack/sql" + suffix)__        request.addParameter("error_trace", "true")__        request.setEntity(entity)__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Accept", accept)__        request.setOptions(options)__        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,accept,header,to,specify,the,format,rather,than,the,code,format,parameter;private,tuple,string,string,run,sql,as,text,string,suffix,http,entity,entity,string,accept,throws,ioexception,request,request,new,request,post,sql,suffix,request,add,parameter,true,request,set,entity,entity,request,options,builder,options,request,get,options,to,builder,options,add,header,accept,accept,request,set,options,options,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException;1541092382;Run SQL as text using the {@code Accept} header to specify the format_rather than the {@code format} parameter.;private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException {_        Request request = new Request("POST", "/_xpack/sql" + suffix)__        request.addParameter("error_trace", "true")__        request.setEntity(entity)__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Accept", accept)__        request.setOptions(options)__        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,accept,header,to,specify,the,format,rather,than,the,code,format,parameter;private,tuple,string,string,run,sql,as,text,string,suffix,http,entity,entity,string,accept,throws,ioexception,request,request,new,request,post,sql,suffix,request,add,parameter,true,request,set,entity,entity,request,options,builder,options,request,get,options,to,builder,options,add,header,accept,accept,request,set,options,options,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException;1543374981;Run SQL as text using the {@code Accept} header to specify the format_rather than the {@code format} parameter.;private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException {_        Request request = new Request("POST", "/_sql" + suffix)__        request.addParameter("error_trace", "true")__        request.setEntity(entity)__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Accept", accept)__        request.setOptions(options)__        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,accept,header,to,specify,the,format,rather,than,the,code,format,parameter;private,tuple,string,string,run,sql,as,text,string,suffix,http,entity,entity,string,accept,throws,ioexception,request,request,new,request,post,suffix,request,add,parameter,true,request,set,entity,entity,request,options,builder,options,request,get,options,to,builder,options,add,header,accept,accept,request,set,options,options,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException;1544548671;Run SQL as text using the {@code Accept} header to specify the format_rather than the {@code format} parameter.;private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException {_        Request request = new Request("POST", "/_sql" + suffix)__        request.addParameter("error_trace", "true")__        request.setEntity(entity)__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Accept", accept)__        request.setOptions(options)__        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,accept,header,to,specify,the,format,rather,than,the,code,format,parameter;private,tuple,string,string,run,sql,as,text,string,suffix,http,entity,entity,string,accept,throws,ioexception,request,request,new,request,post,suffix,request,add,parameter,true,request,set,entity,entity,request,options,builder,options,request,get,options,to,builder,options,add,header,accept,accept,request,set,options,options,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException;1545037552;Run SQL as text using the {@code Accept} header to specify the format_rather than the {@code format} parameter.;private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException {_        Request request = new Request("POST", "/_sql" + suffix)__        request.addParameter("error_trace", "true")__        request.setEntity(entity)__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Accept", accept)__        request.setOptions(options)__        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,accept,header,to,specify,the,format,rather,than,the,code,format,parameter;private,tuple,string,string,run,sql,as,text,string,suffix,http,entity,entity,string,accept,throws,ioexception,request,request,new,request,post,suffix,request,add,parameter,true,request,set,entity,entity,request,options,builder,options,request,get,options,to,builder,options,add,header,accept,accept,request,set,options,options,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException;1545141229;Run SQL as text using the {@code Accept} header to specify the format_rather than the {@code format} parameter.;private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException {_        Request request = new Request("POST", "/_sql" + suffix)__        request.addParameter("error_trace", "true")__        request.setEntity(entity)__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Accept", accept)__        request.setOptions(options)__        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,accept,header,to,specify,the,format,rather,than,the,code,format,parameter;private,tuple,string,string,run,sql,as,text,string,suffix,http,entity,entity,string,accept,throws,ioexception,request,request,new,request,post,suffix,request,add,parameter,true,request,set,entity,entity,request,options,builder,options,request,get,options,to,builder,options,add,header,accept,accept,request,set,options,options,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException;1546845683;Run SQL as text using the {@code Accept} header to specify the format_rather than the {@code format} parameter.;private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException {_        Request request = new Request("POST", "/_sql" + suffix)__        request.addParameter("error_trace", "true")__        request.setEntity(entity)__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Accept", accept)__        request.setOptions(options)__        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,accept,header,to,specify,the,format,rather,than,the,code,format,parameter;private,tuple,string,string,run,sql,as,text,string,suffix,http,entity,entity,string,accept,throws,ioexception,request,request,new,request,post,suffix,request,add,parameter,true,request,set,entity,entity,request,options,builder,options,request,get,options,to,builder,options,add,header,accept,accept,request,set,options,options,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException;1547156119;Run SQL as text using the {@code Accept} header to specify the format_rather than the {@code format} parameter.;private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException {_        Request request = new Request("POST", "/_sql" + suffix)__        request.addParameter("error_trace", "true")__        request.setEntity(entity)__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Accept", accept)__        request.setOptions(options)__        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,accept,header,to,specify,the,format,rather,than,the,code,format,parameter;private,tuple,string,string,run,sql,as,text,string,suffix,http,entity,entity,string,accept,throws,ioexception,request,request,new,request,post,suffix,request,add,parameter,true,request,set,entity,entity,request,options,builder,options,request,get,options,to,builder,options,add,header,accept,accept,request,set,options,options,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException;1547648926;Run SQL as text using the {@code Accept} header to specify the format_rather than the {@code format} parameter.;private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException {_        Request request = new Request("POST", "/_sql" + suffix)__        request.addParameter("error_trace", "true")__        request.setEntity(entity)__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Accept", accept)__        request.setOptions(options)__        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,accept,header,to,specify,the,format,rather,than,the,code,format,parameter;private,tuple,string,string,run,sql,as,text,string,suffix,http,entity,entity,string,accept,throws,ioexception,request,request,new,request,post,suffix,request,add,parameter,true,request,set,entity,entity,request,options,builder,options,request,get,options,to,builder,options,add,header,accept,accept,request,set,options,options,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException;1548144111;Run SQL as text using the {@code Accept} header to specify the format_rather than the {@code format} parameter.;private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException {_        Request request = new Request("POST", SQL_QUERY_REST_ENDPOINT + suffix)__        request.addParameter("error_trace", "true")__        request.setEntity(entity)__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Accept", accept)__        request.setOptions(options)__        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,accept,header,to,specify,the,format,rather,than,the,code,format,parameter;private,tuple,string,string,run,sql,as,text,string,suffix,http,entity,entity,string,accept,throws,ioexception,request,request,new,request,post,suffix,request,add,parameter,true,request,set,entity,entity,request,options,builder,options,request,get,options,to,builder,options,add,header,accept,accept,request,set,options,options,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException;1551252292;Run SQL as text using the {@code Accept} header to specify the format_rather than the {@code format} parameter.;private Tuple<String, String> runSqlAsText(String suffix, HttpEntity entity, String accept) throws IOException {_        Request request = new Request("POST", SQL_QUERY_REST_ENDPOINT + suffix)__        request.addParameter("error_trace", "true")__        request.setEntity(entity)__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Accept", accept)__        request.setOptions(options)__        Response response = client().performRequest(request)__        return new Tuple<>(_                Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)),_                response.getHeader("Cursor")_        )__    };run,sql,as,text,using,the,code,accept,header,to,specify,the,format,rather,than,the,code,format,parameter;private,tuple,string,string,run,sql,as,text,string,suffix,http,entity,entity,string,accept,throws,ioexception,request,request,new,request,post,suffix,request,add,parameter,true,request,set,entity,entity,request,options,builder,options,request,get,options,to,builder,options,add,header,accept,accept,request,set,options,options,response,response,client,perform,request,request,return,new,tuple,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,response,get,header,cursor
RestSqlTestCase -> public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size);1541008027;Builds that map that is returned in the header for each column.;public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size) {_        Map<String, Object> column = new HashMap<>()__        column.put("name", name)__        column.put("type", type)__        if ("jdbc".equals(mode)) {_            column.put("jdbc_type", jdbcType.getVendorTypeNumber())__            column.put("display_size", size)__        }_        return unmodifiableMap(column)__    };builds,that,map,that,is,returned,in,the,header,for,each,column;public,static,map,string,object,column,info,string,mode,string,name,string,type,jdbctype,jdbc,type,int,size,map,string,object,column,new,hash,map,column,put,name,name,column,put,type,type,if,jdbc,equals,mode,column,put,jdbc,type,get,vendor,type,number,column,put,size,return,unmodifiable,map,column
RestSqlTestCase -> public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size);1541092382;Builds that map that is returned in the header for each column.;public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size) {_        Map<String, Object> column = new HashMap<>()__        column.put("name", name)__        column.put("type", type)__        if ("jdbc".equals(mode)) {_            column.put("jdbc_type", jdbcType.getVendorTypeNumber())__            column.put("display_size", size)__        }_        return unmodifiableMap(column)__    };builds,that,map,that,is,returned,in,the,header,for,each,column;public,static,map,string,object,column,info,string,mode,string,name,string,type,jdbctype,jdbc,type,int,size,map,string,object,column,new,hash,map,column,put,name,name,column,put,type,type,if,jdbc,equals,mode,column,put,jdbc,type,get,vendor,type,number,column,put,size,return,unmodifiable,map,column
RestSqlTestCase -> public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size);1543374981;Builds that map that is returned in the header for each column.;public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size) {_        Map<String, Object> column = new HashMap<>()__        column.put("name", name)__        column.put("type", type)__        if ("jdbc".equals(mode)) {_            column.put("jdbc_type", jdbcType.getVendorTypeNumber())__            column.put("display_size", size)__        }_        return unmodifiableMap(column)__    };builds,that,map,that,is,returned,in,the,header,for,each,column;public,static,map,string,object,column,info,string,mode,string,name,string,type,jdbctype,jdbc,type,int,size,map,string,object,column,new,hash,map,column,put,name,name,column,put,type,type,if,jdbc,equals,mode,column,put,jdbc,type,get,vendor,type,number,column,put,size,return,unmodifiable,map,column
RestSqlTestCase -> public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size);1544548671;Builds that map that is returned in the header for each column.;public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size) {_        Map<String, Object> column = new HashMap<>()__        column.put("name", name)__        column.put("type", type)__        if ("jdbc".equals(mode)) {_            column.put("jdbc_type", jdbcType.getVendorTypeNumber())__            column.put("display_size", size)__        }_        return unmodifiableMap(column)__    };builds,that,map,that,is,returned,in,the,header,for,each,column;public,static,map,string,object,column,info,string,mode,string,name,string,type,jdbctype,jdbc,type,int,size,map,string,object,column,new,hash,map,column,put,name,name,column,put,type,type,if,jdbc,equals,mode,column,put,jdbc,type,get,vendor,type,number,column,put,size,return,unmodifiable,map,column
RestSqlTestCase -> public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size);1545037552;Builds that map that is returned in the header for each column.;public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size) {_        Map<String, Object> column = new HashMap<>()__        column.put("name", name)__        column.put("type", type)__        if ("jdbc".equals(mode)) {_            column.put("jdbc_type", jdbcType.getVendorTypeNumber())__            column.put("display_size", size)__        }_        return unmodifiableMap(column)__    };builds,that,map,that,is,returned,in,the,header,for,each,column;public,static,map,string,object,column,info,string,mode,string,name,string,type,jdbctype,jdbc,type,int,size,map,string,object,column,new,hash,map,column,put,name,name,column,put,type,type,if,jdbc,equals,mode,column,put,jdbc,type,get,vendor,type,number,column,put,size,return,unmodifiable,map,column
RestSqlTestCase -> public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size);1545141229;Builds that map that is returned in the header for each column.;public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size) {_        Map<String, Object> column = new HashMap<>()__        column.put("name", name)__        column.put("type", type)__        if ("jdbc".equals(mode)) {_            column.put("jdbc_type", jdbcType.getVendorTypeNumber())__            column.put("display_size", size)__        }_        return unmodifiableMap(column)__    };builds,that,map,that,is,returned,in,the,header,for,each,column;public,static,map,string,object,column,info,string,mode,string,name,string,type,jdbctype,jdbc,type,int,size,map,string,object,column,new,hash,map,column,put,name,name,column,put,type,type,if,jdbc,equals,mode,column,put,jdbc,type,get,vendor,type,number,column,put,size,return,unmodifiable,map,column
RestSqlTestCase -> public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size);1546845683;Builds that map that is returned in the header for each column.;public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size) {_        Map<String, Object> column = new HashMap<>()__        column.put("name", name)__        column.put("type", type)__        if ("jdbc".equals(mode)) {_            column.put("jdbc_type", jdbcType.getVendorTypeNumber())__            column.put("display_size", size)__        }_        return unmodifiableMap(column)__    };builds,that,map,that,is,returned,in,the,header,for,each,column;public,static,map,string,object,column,info,string,mode,string,name,string,type,jdbctype,jdbc,type,int,size,map,string,object,column,new,hash,map,column,put,name,name,column,put,type,type,if,jdbc,equals,mode,column,put,jdbc,type,get,vendor,type,number,column,put,size,return,unmodifiable,map,column
RestSqlTestCase -> public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size);1547156119;Builds that map that is returned in the header for each column.;public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size) {_        Map<String, Object> column = new HashMap<>()__        column.put("name", name)__        column.put("type", type)__        if ("jdbc".equals(mode)) {_            column.put("jdbc_type", jdbcType.getVendorTypeNumber())__            column.put("display_size", size)__        }_        return unmodifiableMap(column)__    };builds,that,map,that,is,returned,in,the,header,for,each,column;public,static,map,string,object,column,info,string,mode,string,name,string,type,jdbctype,jdbc,type,int,size,map,string,object,column,new,hash,map,column,put,name,name,column,put,type,type,if,jdbc,equals,mode,column,put,jdbc,type,get,vendor,type,number,column,put,size,return,unmodifiable,map,column
RestSqlTestCase -> public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size);1547648926;Builds that map that is returned in the header for each column.;public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size) {_        Map<String, Object> column = new HashMap<>()__        column.put("name", name)__        column.put("type", type)__        if ("jdbc".equals(mode)) {_            column.put("display_size", size)__        }_        return unmodifiableMap(column)__    };builds,that,map,that,is,returned,in,the,header,for,each,column;public,static,map,string,object,column,info,string,mode,string,name,string,type,jdbctype,jdbc,type,int,size,map,string,object,column,new,hash,map,column,put,name,name,column,put,type,type,if,jdbc,equals,mode,column,put,size,return,unmodifiable,map,column
RestSqlTestCase -> public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size);1548144111;Builds that map that is returned in the header for each column.;public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size) {_        Map<String, Object> column = new HashMap<>()__        column.put("name", name)__        column.put("type", type)__        if ("jdbc".equals(mode)) {_            column.put("display_size", size)__        }_        return unmodifiableMap(column)__    };builds,that,map,that,is,returned,in,the,header,for,each,column;public,static,map,string,object,column,info,string,mode,string,name,string,type,jdbctype,jdbc,type,int,size,map,string,object,column,new,hash,map,column,put,name,name,column,put,type,type,if,jdbc,equals,mode,column,put,size,return,unmodifiable,map,column
RestSqlTestCase -> public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size);1551252292;Builds that map that is returned in the header for each column.;public static Map<String, Object> columnInfo(String mode, String name, String type, JDBCType jdbcType, int size) {_        Map<String, Object> column = new HashMap<>()__        column.put("name", name)__        column.put("type", type)__        if ("jdbc".equals(mode)) {_            column.put("display_size", size)__        }_        return unmodifiableMap(column)__    };builds,that,map,that,is,returned,in,the,header,for,each,column;public,static,map,string,object,column,info,string,mode,string,name,string,type,jdbctype,jdbc,type,int,size,map,string,object,column,new,hash,map,column,put,name,name,column,put,type,type,if,jdbc,equals,mode,column,put,size,return,unmodifiable,map,column
