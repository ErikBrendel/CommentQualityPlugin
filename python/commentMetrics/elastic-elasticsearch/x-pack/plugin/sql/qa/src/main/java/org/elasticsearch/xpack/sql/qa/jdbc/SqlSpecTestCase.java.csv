commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;16;;@ParametersFactory(argumentFormatting = PARAM_FORMATTING) public static List<Object[]> readScriptSpec() throws Exception {     Parser parser = specParser().     List<Object[]> tests = new ArrayList<>().     tests.addAll(readScriptSpec("/select.sql-spec", parser)).     tests.addAll(readScriptSpec("/filter.sql-spec", parser)).     tests.addAll(readScriptSpec("/datetime.sql-spec", parser)).     tests.addAll(readScriptSpec("/math.sql-spec", parser)).     tests.addAll(readScriptSpec("/agg.sql-spec", parser)).     tests.addAll(readScriptSpec("/agg-ordering.sql-spec", parser)).     tests.addAll(readScriptSpec("/arithmetic.sql-spec", parser)).     tests.addAll(readScriptSpec("/string-functions.sql-spec", parser)).     tests.addAll(readScriptSpec("/case-functions.sql-spec", parser)).     tests.addAll(readScriptSpec("/null.sql-spec", parser)).     return tests. }
false;public;1;15;;@Override public Object parse(String line) {     // not initialized     String q = null.     if (line.endsWith(".")) {         query.append(line.substring(0, line.length() - 1)).         q = query.toString().         query.setLength(0).     } else {         query.append(line).         query.append("\r\n").     }     return q. }
false;static;0;3;;static SqlSpecParser specParser() {     return new SqlSpecParser(). }
false;protected,final;0;21;;@Override protected final void doTest() throws Throwable {     // we skip the tests in case of these locales because ES-SQL is Locale-insensitive for now     // while H2 does take the Locale into consideration     String[] h2IncompatibleLocales = new String[] { "tr", "az", "tr-TR", "tr-CY", "az-Latn", "az-Cyrl", "az-Latn-AZ", "az-Cyrl-AZ" }.     boolean goodLocale = !Arrays.stream(h2IncompatibleLocales).anyMatch((l) -> Locale.getDefault().equals(new Locale.Builder().setLanguageTag(l).build())).     if (fileName.startsWith("case-functions")) {         Assume.assumeTrue(goodLocale).     }     try (Connection h2 = H2.get().         Connection es = esJdbc()) {         ResultSet expected, elasticResults.         expected = executeJdbcQuery(h2, query).         elasticResults = executeJdbcQuery(es, query).         assertResults(expected, elasticResults).     } }
