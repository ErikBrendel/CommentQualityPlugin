# id;timestamp;commentText;codeText;commentWords;codeWords
FetchSizeTestCase -> public void testScroll() throws SQLException;1541008027;Test for {@code SELECT} that is implemented as a scroll query._In this case the fetch size should be entirely respected.;public void testScroll() throws SQLException {_        try (Connection c = esJdbc()__                Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT * FROM test ORDER BY test_field ASC")) {_                for (int i = 0_ i < 20_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left after " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                }_                assertFalse(rs.next())__            }_        }_    };test,for,code,select,that,is,implemented,as,a,scroll,query,in,this,case,the,fetch,size,should,be,entirely,respected;public,void,test,scroll,throws,sqlexception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,from,test,order,by,asc,for,int,i,0,i,20,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,after,i,rs,next,assert,equals,i,rs,get,int,1,assert,false,rs,next
FetchSizeTestCase -> public void testScroll() throws SQLException;1542285227;Test for {@code SELECT} that is implemented as a scroll query._In this case the fetch size should be entirely respected.;public void testScroll() throws SQLException {_        try (Connection c = esJdbc()__                Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT * FROM test ORDER BY test_field ASC")) {_                for (int i = 0_ i < 20_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left after " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                }_                assertFalse(rs.next())__            }_        }_    };test,for,code,select,that,is,implemented,as,a,scroll,query,in,this,case,the,fetch,size,should,be,entirely,respected;public,void,test,scroll,throws,sqlexception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,from,test,order,by,asc,for,int,i,0,i,20,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,after,i,rs,next,assert,equals,i,rs,get,int,1,assert,false,rs,next
FetchSizeTestCase -> public void testScroll() throws SQLException;1547156119;Test for {@code SELECT} that is implemented as a scroll query._In this case the fetch size should be entirely respected.;public void testScroll() throws SQLException {_        try (Connection c = esJdbc()__                Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT * FROM test ORDER BY test_field ASC")) {_                for (int i = 0_ i < 20_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left after " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                }_                assertFalse(rs.next())__            }_        }_    };test,for,code,select,that,is,implemented,as,a,scroll,query,in,this,case,the,fetch,size,should,be,entirely,respected;public,void,test,scroll,throws,sqlexception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,from,test,order,by,asc,for,int,i,0,i,20,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,after,i,rs,next,assert,equals,i,rs,get,int,1,assert,false,rs,next
FetchSizeTestCase -> public void testScroll() throws SQLException;1549392752;Test for {@code SELECT} that is implemented as a scroll query._In this case the fetch size should be entirely respected.;public void testScroll() throws SQLException {_        try (Connection c = esJdbc()__                Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT * FROM test ORDER BY test_field ASC")) {_                for (int i = 0_ i < 20_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left after " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                }_                assertFalse(rs.next())__            }_        }_    };test,for,code,select,that,is,implemented,as,a,scroll,query,in,this,case,the,fetch,size,should,be,entirely,respected;public,void,test,scroll,throws,sqlexception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,from,test,order,by,asc,for,int,i,0,i,20,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,after,i,rs,next,assert,equals,i,rs,get,int,1,assert,false,rs,next
FetchSizeTestCase -> public void testAggregation() throws SQLException;1541008027;Test for {@code SELECT} that is implemented as an aggregation.;public void testAggregation() throws SQLException {_        try (Connection c = esJdbc()__                Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT test_field, COUNT(*) FROM test GROUP BY test_field")) {_                for (int i = 0_ i < 20_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left at " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                    assertEquals("Incorrect count returned", 1, rs.getInt(2))__                }_                assertFalse(rs.next())__            }_        }_    };test,for,code,select,that,is,implemented,as,an,aggregation;public,void,test,aggregation,throws,sqlexception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,count,from,test,group,by,for,int,i,0,i,20,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,at,i,rs,next,assert,equals,i,rs,get,int,1,assert,equals,incorrect,count,returned,1,rs,get,int,2,assert,false,rs,next
FetchSizeTestCase -> public void testAggregation() throws SQLException;1542285227;Test for {@code SELECT} that is implemented as an aggregation.;public void testAggregation() throws SQLException {_        try (Connection c = esJdbc()__                Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT test_field, COUNT(*) FROM test GROUP BY test_field")) {_                for (int i = 0_ i < 20_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left at " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                    assertEquals("Incorrect count returned", 1, rs.getInt(2))__                }_                assertFalse(rs.next())__            }_        }_    };test,for,code,select,that,is,implemented,as,an,aggregation;public,void,test,aggregation,throws,sqlexception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,count,from,test,group,by,for,int,i,0,i,20,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,at,i,rs,next,assert,equals,i,rs,get,int,1,assert,equals,incorrect,count,returned,1,rs,get,int,2,assert,false,rs,next
FetchSizeTestCase -> public void testAggregation() throws SQLException;1547156119;Test for {@code SELECT} that is implemented as an aggregation.;public void testAggregation() throws SQLException {_        try (Connection c = esJdbc()__                Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT test_field, COUNT(*) FROM test GROUP BY test_field")) {_                for (int i = 0_ i < 20_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left at " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                    assertEquals("Incorrect count returned", 1, rs.getInt(2))__                }_                assertFalse(rs.next())__            }_        }_    };test,for,code,select,that,is,implemented,as,an,aggregation;public,void,test,aggregation,throws,sqlexception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,count,from,test,group,by,for,int,i,0,i,20,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,at,i,rs,next,assert,equals,i,rs,get,int,1,assert,equals,incorrect,count,returned,1,rs,get,int,2,assert,false,rs,next
FetchSizeTestCase -> public void testAggregation() throws SQLException;1549392752;Test for {@code SELECT} that is implemented as an aggregation.;public void testAggregation() throws SQLException {_        try (Connection c = esJdbc()__                Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT test_field, COUNT(*) FROM test GROUP BY test_field")) {_                for (int i = 0_ i < 20_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left at " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                    assertEquals("Incorrect count returned", 1, rs.getInt(2))__                }_                assertFalse(rs.next())__            }_        }_    };test,for,code,select,that,is,implemented,as,an,aggregation;public,void,test,aggregation,throws,sqlexception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,count,from,test,group,by,for,int,i,0,i,20,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,at,i,rs,next,assert,equals,i,rs,get,int,1,assert,equals,incorrect,count,returned,1,rs,get,int,2,assert,false,rs,next
FetchSizeTestCase -> public void testNestedDocuments() throws Exception;1542285227;Test for nested documents.;public void testNestedDocuments() throws Exception {_        try (Connection c = esJdbc()__                Statement s = c.createStatement()) {_            s.setFetchSize(5)__            try (ResultSet rs = s.executeQuery("SELECT test_field, nested.* FROM test ORDER BY test_field ASC")) {_                assertTrue("Empty result set!", rs.next())__                for (int i = 0_ i < 20_ i++) {_                    assertEquals(15, rs.getFetchSize())__                    assertNestedDocuments(rs, i)__                }_                assertFalse(rs.next())__            }_        }_        assertNoSearchContexts()__    };test,for,nested,documents;public,void,test,nested,documents,throws,exception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,5,try,result,set,rs,s,execute,query,select,nested,from,test,order,by,asc,assert,true,empty,result,set,rs,next,for,int,i,0,i,20,i,assert,equals,15,rs,get,fetch,size,assert,nested,documents,rs,i,assert,false,rs,next,assert,no,search,contexts
FetchSizeTestCase -> public void testNestedDocuments() throws Exception;1547156119;Test for nested documents.;public void testNestedDocuments() throws Exception {_        try (Connection c = esJdbc()__                Statement s = c.createStatement()) {_            s.setFetchSize(5)__            try (ResultSet rs = s.executeQuery("SELECT test_field, nested.* FROM test ORDER BY test_field ASC")) {_                assertTrue("Empty result set!", rs.next())__                for (int i = 0_ i < 20_ i++) {_                    assertEquals(15, rs.getFetchSize())__                    assertNestedDocuments(rs, i)__                }_                assertFalse(rs.next())__            }_        }_        assertNoSearchContexts()__    };test,for,nested,documents;public,void,test,nested,documents,throws,exception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,5,try,result,set,rs,s,execute,query,select,nested,from,test,order,by,asc,assert,true,empty,result,set,rs,next,for,int,i,0,i,20,i,assert,equals,15,rs,get,fetch,size,assert,nested,documents,rs,i,assert,false,rs,next,assert,no,search,contexts
FetchSizeTestCase -> public void testNestedDocuments() throws Exception;1549392752;Test for nested documents.;public void testNestedDocuments() throws Exception {_        try (Connection c = esJdbc()__                Statement s = c.createStatement()) {_            s.setFetchSize(5)__            try (ResultSet rs = s.executeQuery("SELECT test_field, nested.* FROM test ORDER BY test_field ASC")) {_                assertTrue("Empty result set!", rs.next())__                for (int i = 0_ i < 20_ i++) {_                    assertEquals(15, rs.getFetchSize())__                    assertNestedDocuments(rs, i)__                }_                assertFalse(rs.next())__            }_        }_        assertNoSearchContexts()__    };test,for,nested,documents;public,void,test,nested,documents,throws,exception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,5,try,result,set,rs,s,execute,query,select,nested,from,test,order,by,asc,assert,true,empty,result,set,rs,next,for,int,i,0,i,20,i,assert,equals,15,rs,get,fetch,size,assert,nested,documents,rs,i,assert,false,rs,next,assert,no,search,contexts
FetchSizeTestCase -> public void testIncompleteScroll() throws Exception;1541008027;Test for {@code SELECT} that is implemented as a scroll query._In this test we don't retrieve all records and rely on close() to clean the cursor;public void testIncompleteScroll() throws Exception {_        try (Connection c = esJdbc()__             Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT * FROM test ORDER BY test_field ASC")) {_                for (int i = 0_ i < 10_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left after " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                }_                assertTrue(rs.next())__            }_        }_        assertNoSearchContexts()__    };test,for,code,select,that,is,implemented,as,a,scroll,query,in,this,test,we,don,t,retrieve,all,records,and,rely,on,close,to,clean,the,cursor;public,void,test,incomplete,scroll,throws,exception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,from,test,order,by,asc,for,int,i,0,i,10,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,after,i,rs,next,assert,equals,i,rs,get,int,1,assert,true,rs,next,assert,no,search,contexts
FetchSizeTestCase -> public void testIncompleteScroll() throws Exception;1542285227;Test for {@code SELECT} that is implemented as a scroll query._In this test we don't retrieve all records and rely on close() to clean the cursor;public void testIncompleteScroll() throws Exception {_        try (Connection c = esJdbc()__             Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT * FROM test ORDER BY test_field ASC")) {_                for (int i = 0_ i < 10_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left after " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                }_                assertTrue(rs.next())__            }_        }_        assertNoSearchContexts()__    };test,for,code,select,that,is,implemented,as,a,scroll,query,in,this,test,we,don,t,retrieve,all,records,and,rely,on,close,to,clean,the,cursor;public,void,test,incomplete,scroll,throws,exception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,from,test,order,by,asc,for,int,i,0,i,10,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,after,i,rs,next,assert,equals,i,rs,get,int,1,assert,true,rs,next,assert,no,search,contexts
FetchSizeTestCase -> public void testIncompleteScroll() throws Exception;1547156119;Test for {@code SELECT} that is implemented as a scroll query._In this test we don't retrieve all records and rely on close() to clean the cursor;public void testIncompleteScroll() throws Exception {_        try (Connection c = esJdbc()__             Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT * FROM test ORDER BY test_field ASC")) {_                for (int i = 0_ i < 10_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left after " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                }_                assertTrue(rs.next())__            }_        }_        assertNoSearchContexts()__    };test,for,code,select,that,is,implemented,as,a,scroll,query,in,this,test,we,don,t,retrieve,all,records,and,rely,on,close,to,clean,the,cursor;public,void,test,incomplete,scroll,throws,exception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,from,test,order,by,asc,for,int,i,0,i,10,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,after,i,rs,next,assert,equals,i,rs,get,int,1,assert,true,rs,next,assert,no,search,contexts
FetchSizeTestCase -> public void testIncompleteScroll() throws Exception;1549392752;Test for {@code SELECT} that is implemented as a scroll query._In this test we don't retrieve all records and rely on close() to clean the cursor;public void testIncompleteScroll() throws Exception {_        try (Connection c = esJdbc()__             Statement s = c.createStatement()) {_            s.setFetchSize(4)__            try (ResultSet rs = s.executeQuery("SELECT * FROM test ORDER BY test_field ASC")) {_                for (int i = 0_ i < 10_ i++) {_                    assertEquals(4, rs.getFetchSize())__                    assertTrue("No more entries left after " + i, rs.next())__                    assertEquals(i, rs.getInt(1))__                }_                assertTrue(rs.next())__            }_        }_        assertNoSearchContexts()__    };test,for,code,select,that,is,implemented,as,a,scroll,query,in,this,test,we,don,t,retrieve,all,records,and,rely,on,close,to,clean,the,cursor;public,void,test,incomplete,scroll,throws,exception,try,connection,c,es,jdbc,statement,s,c,create,statement,s,set,fetch,size,4,try,result,set,rs,s,execute,query,select,from,test,order,by,asc,for,int,i,0,i,10,i,assert,equals,4,rs,get,fetch,size,assert,true,no,more,entries,left,after,i,rs,next,assert,equals,i,rs,get,int,1,assert,true,rs,next,assert,no,search,contexts
