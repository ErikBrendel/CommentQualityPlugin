commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void testSelectInvalidSql() throws Exception {     assertFoundOneProblem(command("SELECT * FRO")).     assertEquals("line 1:8: Cannot determine columns for [*]" + END, readLine()). }
false;public;0;5;;@Override public void testSelectFromMissingIndex() throws IOException {     assertFoundOneProblem(command("SELECT * FROM test")).     assertEquals("line 1:15: Unknown index [test]" + END, readLine()). }
false;public;0;11;;@Override public void testSelectFromIndexWithoutTypes() throws Exception {     // Create an index without any types     Request request = new Request("PUT", "/test").     request.setJsonEntity("{}").     client().performRequest(request).     assertFoundOneProblem(command("SELECT * FROM test")).     // assertEquals("line 1:15: [test] doesn't have any types so it is incompatible with sql" + END, readLine()).     assertEquals("line 1:15: Unknown index [test]" + END, readLine()). }
false;public;0;6;;@Override public void testSelectMissingField() throws IOException {     index("test", body -> body.field("test", "test")).     assertFoundOneProblem(command("SELECT missing FROM test")).     assertEquals("line 1:8: Unknown column [missing]" + END, readLine()). }
false;public;0;6;;@Override public void testSelectMissingFunction() throws Exception {     index("test", body -> body.field("foo", 1)).     assertFoundOneProblem(command("SELECT missing(foo) FROM test")).     assertEquals("line 1:8: Unknown function [missing]" + END, readLine()). }
false;public;0;6;;@Override public void testSelectProjectScoreInAggContext() throws Exception {     index("test", body -> body.field("foo", 1)).     assertFoundOneProblem(command("SELECT foo, SCORE(), COUNT(*) FROM test GROUP BY foo")).     assertEquals("line 1:13: Cannot use non-grouped column [SCORE()], expected [foo]" + END, readLine()). }
false;public;0;6;;@Override public void testSelectOrderByScoreInAggContext() throws Exception {     index("test", body -> body.field("foo", 1)).     assertFoundOneProblem(command("SELECT foo, COUNT(*) FROM test GROUP BY foo ORDER BY SCORE()")).     assertEquals("line 1:54: Cannot order by non-grouped column [SCORE()], expected [foo] or an aggregate function" + END, readLine()). }
false;public;0;6;;@Override public void testSelectGroupByScore() throws Exception {     index("test", body -> body.field("foo", 1)).     assertFoundOneProblem(command("SELECT COUNT(*) FROM test GROUP BY SCORE()")).     assertEquals("line 1:36: Cannot use [SCORE()] for grouping" + END, readLine()). }
false;public;0;6;;@Override public void testSelectScoreSubField() throws Exception {     index("test", body -> body.field("foo", 1)).     assertThat(command("SELECT SCORE().bar FROM test"), startsWith(START + "Bad request [[3.33.22mline 1:15: extraneous input '.' expecting {<EOF>, ',',")). }
false;public;0;6;;@Override public void testSelectScoreInScalar() throws Exception {     index("test", body -> body.field("foo", 1)).     assertFoundOneProblem(command("SELECT SIN(SCORE()) FROM test")).     assertEquals("line 1:12: [SCORE()] cannot be an argument to a function" + END, readLine()). }
false;public,static;1;3;;public static void assertFoundOneProblem(String commandResult) {     assertEquals(START + "Bad request [[3.33.22mFound 1 problem(s)", commandResult). }
