commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;public void testBasicCliFunctionality() throws Exception {     CliTerminal cliTerminal = new TestTerminal("test.", "notest.", "exit.").     CliSession mockSession = mock(CliSession.class).     CliCommand mockCommand = mock(CliCommand.class).     when(mockCommand.handle(cliTerminal, mockSession, "logo")).thenReturn(true).     when(mockCommand.handle(cliTerminal, mockSession, "test")).thenReturn(true).     when(mockCommand.handle(cliTerminal, mockSession, "notest")).thenReturn(false).     CliRepl cli = new CliRepl(cliTerminal, mockSession, mockCommand).     cli.execute().     verify(mockCommand, times(1)).handle(cliTerminal, mockSession, "test").     verify(mockCommand, times(1)).handle(cliTerminal, mockSession, "logo").     verify(mockCommand, times(1)).handle(cliTerminal, mockSession, "notest").     verifyNoMoreInteractions(mockCommand, mockSession). }
true;public;0;18;/**  * Test that empty commands are skipped. This includes commands that are  * just new lines.  */ ;/**  * Test that empty commands are skipped. This includes commands that are  * just new lines.  */ public void testEmptyNotSent() {     CliTerminal cliTerminal = new TestTerminal(".", "", "", ".", "exit.").     CliSession mockSession = mock(CliSession.class).     CliCommand mockCommand = mock(CliCommand.class).     CliRepl cli = new CliRepl(cliTerminal, mockSession, mockCommand).     cli.execute().     verify(mockCommand, times(1)).handle(cliTerminal, mockSession, "logo").     verifyNoMoreInteractions(mockSession, mockCommand). }
false;public;0;20;;public void testFatalCliExceptionHandling() throws Exception {     CliTerminal cliTerminal = new TestTerminal("test.", "fail.").     CliSession mockSession = mock(CliSession.class).     CliCommand mockCommand = mock(CliCommand.class).     when(mockCommand.handle(cliTerminal, mockSession, "logo")).thenReturn(true).     when(mockCommand.handle(cliTerminal, mockSession, "test")).thenReturn(true).     when(mockCommand.handle(cliTerminal, mockSession, "fail")).thenThrow(new FatalCliException("die")).     CliRepl cli = new CliRepl(cliTerminal, mockSession, mockCommand).     expectThrows(FatalCliException.class, cli::execute).     verify(mockCommand, times(1)).handle(cliTerminal, mockSession, "logo").     verify(mockCommand, times(1)).handle(cliTerminal, mockSession, "test").     verify(mockCommand, times(1)).handle(cliTerminal, mockSession, "fail").     verifyNoMoreInteractions(mockCommand, mockSession). }
