commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public HttpClient getClient() {     return httpClient. }
false;public;1;6;;public void setFetchSize(int fetchSize) {     if (fetchSize <= 0) {         throw new IllegalArgumentException("Must be > 0.").     }     this.fetchSize = fetchSize. }
false;public;0;3;;public int getFetchSize() {     return fetchSize. }
false;public;1;3;;public void setFetchSeparator(String fetchSeparator) {     this.fetchSeparator = fetchSeparator. }
false;public;0;3;;public String getFetchSeparator() {     return fetchSeparator. }
false;public;1;3;;public void setDebug(boolean debug) {     this.debug = debug. }
false;public;0;3;;public boolean isDebug() {     return debug. }
false;public;0;14;;public void checkConnection() throws ClientException {     MainResponse response.     try {         response = httpClient.serverInfo().     } catch (SQLException ex) {         throw new ClientException(ex).     }     Version version = Version.fromString(response.getVersion()).     // TODO: We can relax compatibility requirement later when we have a better idea about protocol compatibility guarantees     if (version.major != Version.CURRENT.major || version.minor != Version.CURRENT.minor) {         throw new ClientException("This alpha version of CLI is only compatible with Elasticsearch version " + Version.CURRENT.toString()).     } }
