commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testProperConnection() throws Exception {     HttpClient httpClient = mock(HttpClient.class).     when(httpClient.serverInfo()).thenReturn(new MainResponse(randomAlphaOfLength(5), org.elasticsearch.Version.CURRENT.toString(), ClusterName.DEFAULT.value(), UUIDs.randomBase64UUID())).     CliSession cliSession = new CliSession(httpClient).     cliSession.checkConnection().     verify(httpClient, times(1)).serverInfo().     verifyNoMoreInteractions(httpClient). }
false;public;0;8;;public void testConnection() throws Exception {     HttpClient httpClient = mock(HttpClient.class).     when(httpClient.serverInfo()).thenThrow(new SQLException("Cannot connect")).     CliSession cliSession = new CliSession(httpClient).     expectThrows(ClientException.class, cliSession::checkConnection).     verify(httpClient, times(1)).serverInfo().     verifyNoMoreInteractions(httpClient). }
false;public;0;20;;public void testWrongServerVersion() throws Exception {     HttpClient httpClient = mock(HttpClient.class).     byte minor.     byte major.     if (randomBoolean()) {         minor = Version.CURRENT.minor.         major = (byte) (Version.CURRENT.major + 1).     } else {         minor = (byte) (Version.CURRENT.minor + 1).         major = Version.CURRENT.major.     }     when(httpClient.serverInfo()).thenReturn(new MainResponse(randomAlphaOfLength(5), org.elasticsearch.Version.fromString(major + "." + minor + ".23").toString(), ClusterName.DEFAULT.value(), UUIDs.randomBase64UUID())).     CliSession cliSession = new CliSession(httpClient).     expectThrows(ClientException.class, cliSession::checkConnection).     verify(httpClient, times(1)).serverInfo().     verifyNoMoreInteractions(httpClient). }
