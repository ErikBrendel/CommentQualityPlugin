commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;39;;@Override protected boolean doHandle(CliTerminal terminal, CliSession cliSession, String line) {     SqlQueryResponse response = null.     HttpClient cliClient = cliSession.getClient().     BasicFormatter formatter.     String data.     try {         response = cliClient.queryInit(line, cliSession.getFetchSize()).         formatter = new BasicFormatter(response.columns(), response.rows(), CLI).         data = formatter.formatWithHeader(response.columns(), response.rows()).         while (true) {             handleText(terminal, data).             if (response.cursor().isEmpty()) {                 // Successfully finished the entire query!                 terminal.flush().                 return true.             }             if (false == cliSession.getFetchSeparator().equals("")) {                 terminal.println(cliSession.getFetchSeparator()).             }             response = cliSession.getClient().nextPage(response.cursor()).             data = formatter.formatWithoutHeader(response.rows()).         }     } catch (SQLException e) {         if (JreHttpUrlConnection.SQL_STATE_BAD_SERVER.equals(e.getSQLState())) {             terminal.error("Server error", e.getMessage()).         } else {             terminal.error("Bad request", e.getMessage()).         }         if (response != null) {             try {                 cliClient.queryClose(response.cursor(), Mode.CLI).             } catch (SQLException ex) {                 terminal.error("Could not close cursor", ex.getMessage()).             }         }     }     return true. }
false;private;2;3;;private void handleText(CliTerminal terminal, String str) {     terminal.print(str). }
