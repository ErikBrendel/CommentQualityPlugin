commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;8;/**  * Use this VM Options to run in IntelliJ or Eclipse:  * -Dorg.jline.terminal.type=xterm-256color  * -Dorg.jline.terminal.jna=false  * -Dorg.jline.terminal.jansi=false  * -Dorg.jline.terminal.exec=false  * -Dorg.jline.terminal.dumb=true  */ ;/**  * Use this VM Options to run in IntelliJ or Eclipse:  * -Dorg.jline.terminal.type=xterm-256color  * -Dorg.jline.terminal.jna=false  * -Dorg.jline.terminal.jansi=false  * -Dorg.jline.terminal.exec=false  * -Dorg.jline.terminal.dumb=true  */ public static void main(String[] args) throws Exception {     final Cli cli = new Cli(new JLineTerminal(TerminalBuilder.builder().build(), true)).     configureJLineLogging().     int status = cli.main(args, Terminal.DEFAULT).     if (status != ExitCodes.OK) {         exit(status).     } }
false;private,static;0;9;;private static void configureJLineLogging() {     try {         /* Initialize the logger from the a properties file we bundle. This makes sure              * we get useful error messages from jLine. */         LogManager.getLogManager().readConfiguration(Cli.class.getResourceAsStream("/logging.properties")).     } catch (IOException ex) {         throw new RuntimeException("cannot setup logging", ex).     } }
false;protected;2;16;;@Override protected void execute(org.elasticsearch.cli.Terminal terminal, OptionSet options) throws Exception {     boolean debug = options.has("d") || options.has("debug").     boolean checkConnection = checkOption.value(options).     List<String> args = connectionString.values(options).     if (args.size() > 1) {         throw new UserException(ExitCodes.USAGE, "expecting a single uri").     }     String uri = args.size() == 1 ? args.get(0) : null.     args = keystoreLocation.values(options).     if (args.size() > 1) {         throw new UserException(ExitCodes.USAGE, "expecting a single keystore file").     }     String keystoreLocationValue = args.size() == 1 ? args.get(0) : null.     execute(uri, debug, keystoreLocationValue, checkConnection). }
false;private;4;22;;private void execute(String uri, boolean debug, String keystoreLocation, boolean checkConnection) throws Exception {     CliCommand cliCommand = new CliCommands(new PrintLogoCommand(), new ClearScreenCliCommand(), new FetchSizeCliCommand(), new FetchSeparatorCliCommand(), new ServerInfoCliCommand(), new ServerQueryCliCommand()).     try {         ConnectionBuilder connectionBuilder = new ConnectionBuilder(cliTerminal).         ConnectionConfiguration con = connectionBuilder.buildConnection(uri, keystoreLocation).         CliSession cliSession = new CliSession(new HttpClient(con)).         cliSession.setDebug(debug).         if (checkConnection) {             checkConnection(cliSession, cliTerminal, con).         }         new CliRepl(cliTerminal, cliSession, cliCommand).execute().     } finally {         cliTerminal.close().     } }
false;private;3;26;;private void checkConnection(CliSession cliSession, CliTerminal cliTerminal, ConnectionConfiguration con) throws UserException {     try {         cliSession.checkConnection().     } catch (ClientException ex) {         if (cliSession.isDebug()) {             cliTerminal.error("Client Exception", ex.getMessage()).             cliTerminal.println().             cliTerminal.printStackTrace(ex).             cliTerminal.flush().         }         if (ex.getCause() != null && ex.getCause() instanceof ConnectException) {             // Most likely Elasticsearch is not running             throw new UserException(ExitCodes.IO_ERROR, "Cannot connect to the server " + con.connectionString() + " - " + ex.getCause().getMessage()).         } else if (ex.getCause() != null && ex.getCause() instanceof SQLInvalidAuthorizationSpecException) {             throw new UserException(ExitCodes.NOPERM, "Cannot establish a secure connection to the server " + con.connectionString() + " - " + ex.getCause().getMessage()).         } else {             // Most likely we connected to something other than Elasticsearch             throw new UserException(ExitCodes.DATA_ERROR, "Cannot communicate with the server " + con.connectionString() + ". This version of CLI only works with Elasticsearch version " + Version.CURRENT.toString()).         }     } }
