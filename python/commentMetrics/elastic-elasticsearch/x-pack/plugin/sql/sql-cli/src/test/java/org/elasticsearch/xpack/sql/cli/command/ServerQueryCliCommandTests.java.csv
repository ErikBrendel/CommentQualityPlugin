commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void testExceptionHandling() throws Exception {     TestTerminal testTerminal = new TestTerminal().     HttpClient client = mock(HttpClient.class).     CliSession cliSession = new CliSession(client).     when(client.queryInit("blah", 1000)).thenThrow(new SQLException("test exception")).     ServerQueryCliCommand cliCommand = new ServerQueryCliCommand().     assertTrue(cliCommand.handle(testTerminal, cliSession, "blah")).     assertEquals("<b>Bad request [</b><i>test exception</i><b>]</b>\n", testTerminal.toString()).     verify(client, times(1)).queryInit(eq("blah"), eq(1000)).     verifyNoMoreInteractions(client). }
false;public;0;12;;public void testOnePageQuery() throws Exception {     TestTerminal testTerminal = new TestTerminal().     HttpClient client = mock(HttpClient.class).     CliSession cliSession = new CliSession(client).     cliSession.setFetchSize(10).     when(client.queryInit("test query", 10)).thenReturn(fakeResponse("", true, "foo")).     ServerQueryCliCommand cliCommand = new ServerQueryCliCommand().     assertTrue(cliCommand.handle(testTerminal, cliSession, "test query")).     assertEquals("     field     \n---------------\nfoo            \n<flush/>", testTerminal.toString()).     verify(client, times(1)).queryInit(eq("test query"), eq(10)).     verifyNoMoreInteractions(client). }
false;public;0;16;;public void testThreePageQuery() throws Exception {     TestTerminal testTerminal = new TestTerminal().     HttpClient client = mock(HttpClient.class).     CliSession cliSession = new CliSession(client).     cliSession.setFetchSize(10).     when(client.queryInit("test query", 10)).thenReturn(fakeResponse("my_cursor1", true, "first")).     when(client.nextPage("my_cursor1")).thenReturn(fakeResponse("my_cursor2", false, "second")).     when(client.nextPage("my_cursor2")).thenReturn(fakeResponse("", false, "third")).     ServerQueryCliCommand cliCommand = new ServerQueryCliCommand().     assertTrue(cliCommand.handle(testTerminal, cliSession, "test query")).     assertEquals("     field     \n---------------\nfirst          \nsecond         \nthird          \n<flush/>", testTerminal.toString()).     verify(client, times(1)).queryInit(eq("test query"), eq(10)).     verify(client, times(2)).nextPage(any()).     verifyNoMoreInteractions(client). }
false;public;0;17;;public void testTwoPageQueryWithSeparator() throws Exception {     TestTerminal testTerminal = new TestTerminal().     HttpClient client = mock(HttpClient.class).     CliSession cliSession = new CliSession(client).     cliSession.setFetchSize(15).     // Set a separator     cliSession.setFetchSeparator("-----").     when(client.queryInit("test query", 15)).thenReturn(fakeResponse("my_cursor1", true, "first")).     when(client.nextPage("my_cursor1")).thenReturn(fakeResponse("", false, "second")).     ServerQueryCliCommand cliCommand = new ServerQueryCliCommand().     assertTrue(cliCommand.handle(testTerminal, cliSession, "test query")).     assertEquals("     field     \n---------------\nfirst          \n-----\nsecond         \n<flush/>", testTerminal.toString()).     verify(client, times(1)).queryInit(eq("test query"), eq(15)).     verify(client, times(1)).nextPage(any()).     verifyNoMoreInteractions(client). }
false;public;0;17;;public void testCursorCleanupOnError() throws Exception {     TestTerminal testTerminal = new TestTerminal().     HttpClient client = mock(HttpClient.class).     CliSession cliSession = new CliSession(client).     cliSession.setFetchSize(15).     when(client.queryInit("test query", 15)).thenReturn(fakeResponse("my_cursor1", true, "first")).     when(client.nextPage("my_cursor1")).thenThrow(new SQLException("test exception")).     when(client.queryClose("my_cursor1", Mode.CLI)).thenReturn(true).     ServerQueryCliCommand cliCommand = new ServerQueryCliCommand().     assertTrue(cliCommand.handle(testTerminal, cliSession, "test query")).     assertEquals("     field     \n---------------\nfirst          \n" + "<b>Bad request [</b><i>test exception</i><b>]</b>\n", testTerminal.toString()).     verify(client, times(1)).queryInit(eq("test query"), eq(15)).     verify(client, times(1)).nextPage(any()).     verify(client, times(1)).queryClose(eq("my_cursor1"), eq(Mode.CLI)).     verifyNoMoreInteractions(client). }
false;private;3;15;;private SqlQueryResponse fakeResponse(String cursor, boolean includeColumns, String val) {     List<List<Object>> rows.     List<ColumnInfo> columns.     if (includeColumns) {         columns = singletonList(new ColumnInfo("", "field", "string", 0)).     } else {         columns = null.     }     if (val != null) {         rows = singletonList(Collections.singletonList(val)).     } else {         rows = singletonList(Collections.emptyList()).     }     return new SqlQueryResponse(cursor, columns, rows). }
