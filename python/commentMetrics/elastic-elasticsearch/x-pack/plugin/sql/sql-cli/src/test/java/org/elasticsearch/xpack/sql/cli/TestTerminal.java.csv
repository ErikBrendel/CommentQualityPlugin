commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public LineBuilder text(String text) {     stringBuilder.append(text).     return this. }
false;public;1;5;;@Override public LineBuilder em(String text) {     stringBuilder.append("<em>").append(text).append("</em>").     return this. }
false;public;1;5;;@Override public LineBuilder error(String text) {     stringBuilder.append("<b>").append(text).append("</b>").     return this. }
false;public;1;5;;@Override public LineBuilder param(String text) {     stringBuilder.append("<i>").append(text).append("</i>").     return this. }
false;public;0;4;;@Override public void ln() {     stringBuilder.append("\n"). }
false;public;0;4;;@Override public void end() {     stringBuilder.append("<flush/>"). }
false;public;0;39;;@Override public LineBuilder line() {     return new LineBuilder() {          @Override         public LineBuilder text(String text) {             stringBuilder.append(text).             return this.         }          @Override         public LineBuilder em(String text) {             stringBuilder.append("<em>").append(text).append("</em>").             return this.         }          @Override         public LineBuilder error(String text) {             stringBuilder.append("<b>").append(text).append("</b>").             return this.         }          @Override         public LineBuilder param(String text) {             stringBuilder.append("<i>").append(text).append("</i>").             return this.         }          @Override         public void ln() {             stringBuilder.append("\n").         }          @Override         public void end() {             stringBuilder.append("<flush/>").         }     }. }
false;public;1;4;;@Override public void print(String text) {     stringBuilder.append(text). }
false;public;1;5;;@Override public void println(String text) {     stringBuilder.append(text).     stringBuilder.append("\n"). }
false;public;2;6;;@Override public void error(String type, String message) {     stringBuilder.append("<b>").append(type).append(" [</b>").     stringBuilder.append("<i>").append(message).append("</i>").     stringBuilder.append("<b>]</b>\n"). }
false;public;0;4;;@Override public void println() {     stringBuilder.append("\n"). }
false;public;0;4;;@Override public void clear() {     stringBuilder = new StringBuilder(). }
false;public;0;4;;@Override public void flush() {     stringBuilder.append("<flush/>"). }
false;public;1;4;;@Override public void printStackTrace(Exception ex) {     stringBuilder.append("<stack/>"). }
false;public;1;4;;@Override public String readPassword(String prompt) {     return "password". }
false;public;1;5;;@Override public String readLine(String prompt) {     assertTrue(inputLines.hasNext()).     return inputLines.next(). }
false;public;0;5;;@Override public void close() throws IOException {     assertFalse(closed).     closed = true. }
false;public;0;4;;@Override public String toString() {     return stringBuilder.toString(). }
