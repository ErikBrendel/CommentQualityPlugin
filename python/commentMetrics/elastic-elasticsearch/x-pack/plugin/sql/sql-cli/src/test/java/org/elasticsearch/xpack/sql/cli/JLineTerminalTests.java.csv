commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testDisableMatchBracket() throws IOException {     new JLineTerminal(wrapped, reader, false).close().     verify(reader).setVariable(LineReader.BLINK_MATCHING_PAREN, 0L). }
false;public;0;11;;public void testReadPasswordSuccess() throws IOException, UserException {     String prompt = randomAlphaOfLength(5).     String expected = randomAlphaOfLength(5).     when(reader.readLine(prompt, (char) 0)).thenReturn(expected).     try (JLineTerminal terminal = new JLineTerminal(wrapped, reader, randomBoolean())) {         String actual = terminal.readPassword(prompt).         assertEquals(expected, actual).     } }
false;public;0;16;;public void testReadPasswordNull() throws IOException {     String prompt = randomAlphaOfLength(5).     /*          * jLine documents readLine as not being able to return null but          * LineReader totally does sometimes. We should interpret that as          * "user hit ctrl-d on the password prompt" because that is similar          * to the situations where this comes up.          */     when(reader.readLine(prompt, (char) 0)).thenReturn(null).     try (JLineTerminal terminal = new JLineTerminal(wrapped, reader, randomBoolean())) {         UserException e = expectThrows(UserException.class, () -> terminal.readPassword(prompt)).         assertEquals(ExitCodes.NOPERM, e.exitCode).         assertEquals("password required", e.getMessage()).     } }
false;public;0;10;;public void testReadPasswordInterrupted() throws IOException {     String prompt = randomAlphaOfLength(5).     when(reader.readLine(prompt, (char) 0)).thenThrow(new UserInterruptException("")).     try (JLineTerminal terminal = new JLineTerminal(wrapped, reader, randomBoolean())) {         UserException e = expectThrows(UserException.class, () -> terminal.readPassword(prompt)).         assertEquals(ExitCodes.NOPERM, e.exitCode).         assertEquals("password required", e.getMessage()).     } }
false;public;0;10;;public void testReadPasswordClosed() throws IOException {     String prompt = randomAlphaOfLength(5).     when(reader.readLine(prompt, (char) 0)).thenThrow(new EndOfFileException("")).     try (JLineTerminal terminal = new JLineTerminal(wrapped, reader, randomBoolean())) {         UserException e = expectThrows(UserException.class, () -> terminal.readPassword(prompt)).         assertEquals(ExitCodes.NOPERM, e.exitCode).         assertEquals("password required", e.getMessage()).     } }
false;public;0;11;;public void testReadLineSuccess() throws IOException {     String prompt = randomAlphaOfLength(5).     String expected = randomAlphaOfLength(5).     when(reader.readLine(any(String.class))).thenReturn(expected).     try (JLineTerminal terminal = new JLineTerminal(wrapped, reader, randomBoolean())) {         String actual = terminal.readLine(prompt).         assertEquals(expected, actual).     } }
false;public;0;8;;public void testReadLineInterrupted() throws IOException {     String prompt = randomAlphaOfLength(5).     when(reader.readLine(any(String.class))).thenThrow(new UserInterruptException("")).     try (JLineTerminal terminal = new JLineTerminal(wrapped, reader, randomBoolean())) {         assertEquals("", terminal.readLine(prompt)).     } }
false;public;0;8;;public void testReadLineClosed() throws IOException {     String prompt = randomAlphaOfLength(5).     when(reader.readLine(any(String.class))).thenThrow(new EndOfFileException("")).     try (JLineTerminal terminal = new JLineTerminal(wrapped, reader, randomBoolean())) {         assertEquals(null, terminal.readLine(prompt)).     } }
