commented;modifiers;parameterAmount;loc;comment;code
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (table != null && table.isEmpty() == false) {         builder.field("table", table).     }     builder.field("name", name).     builder.field("type", esType).     if (displaySize != null) {         builder.field("display_size", displaySize).     }     return builder.endObject(). }
false;public,static;1;3;;public static ColumnInfo fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
true;public;0;3;/**  * Name of the table.  */ ;/**  * Name of the table.  */ public String table() {     return table. }
true;public;0;3;/**  * Name of the column.  */ ;/**  * Name of the column.  */ public String name() {     return name. }
true;public;0;3;/**  * The type of the column in Elasticsearch.  */ ;/**  * The type of the column in Elasticsearch.  */ public String esType() {     return esType. }
true;public;0;3;/**  * Used by JDBC  */ ;/**  * Used by JDBC  */ public int displaySize() {     return displaySize. }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     ColumnInfo that = (ColumnInfo) o.     return displaySize == that.displaySize && Objects.equals(table, that.table) && Objects.equals(name, that.name) && Objects.equals(esType, that.esType). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(table, name, esType, displaySize). }
false;public;0;4;;@Override public String toString() {     return ProtoUtils.toString(this). }
