commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The key that must be sent back to SQL to access the next page of  * results.  */ ;/**  * The key that must be sent back to SQL to access the next page of  * results.  */ public String cursor() {     return cursor. }
true;public;0;3;/**  * Text of SQL query  */ ;/**  * Text of SQL query  */ public String query() {     return query. }
true;public;0;3;/**  * An optional list of parameters if the SQL query is parametrized  */ ;/**  * An optional list of parameters if the SQL query is parametrized  */ public List<SqlTypedParamValue> params() {     return params. }
true;public;0;3;/**  * The client's time zone  */ ;/**  * The client's time zone  */ public ZoneId zoneId() {     return zoneId. }
true;public;0;3;/**  * Hint about how many results to fetch at once.  */ ;/**  * Hint about how many results to fetch at once.  */ public int fetchSize() {     return fetchSize. }
true;public;0;3;/**  * The timeout specified on the search request  */ ;/**  * The timeout specified on the search request  */ public TimeValue requestTimeout() {     return requestTimeout. }
true;public;0;3;/**  * The scroll timeout  */ ;/**  * The scroll timeout  */ public TimeValue pageTimeout() {     return pageTimeout. }
true;public;0;3;/**  * An optional Query DSL defined query that can added as a filter on the top of the SQL query  */ ;/**  * An optional Query DSL defined query that can added as a filter on the top of the SQL query  */ public ToXContent filter() {     return filter. }
true;public;0;3;/**  * Optional setting for returning the result values in a columnar fashion (as opposed to rows of values).  * Each column will have all its values in a list. Defaults to false.  */ ;/**  * Optional setting for returning the result values in a columnar fashion (as opposed to rows of values).  * Each column will have all its values in a list. Defaults to false.  */ public Boolean columnar() {     return columnar. }
false;public;1;22;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     if (!super.equals(o)) {         return false.     }     SqlQueryRequest that = (SqlQueryRequest) o.     return fetchSize == that.fetchSize && Objects.equals(query, that.query) && Objects.equals(params, that.params) && Objects.equals(zoneId, that.zoneId) && Objects.equals(requestTimeout, that.requestTimeout) && Objects.equals(pageTimeout, that.pageTimeout) && Objects.equals(filter, that.filter) && Objects.equals(columnar, that.columnar) && Objects.equals(cursor, that.cursor). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), query, zoneId, fetchSize, requestTimeout, pageTimeout, filter, columnar, cursor). }
false;public;2;40;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (query != null) {         builder.field("query", query).     }     builder.field("mode", mode().toString()).     if (clientId() != null) {         builder.field("client_id", clientId()).     }     if (this.params.isEmpty() == false) {         builder.startArray("params").         for (SqlTypedParamValue val : this.params) {             val.toXContent(builder, params).         }         builder.endArray().     }     if (zoneId != null) {         builder.field("time_zone", zoneId.getId()).     }     if (fetchSize != Protocol.FETCH_SIZE) {         builder.field("fetch_size", fetchSize).     }     if (requestTimeout != Protocol.REQUEST_TIMEOUT) {         builder.field("request_timeout", requestTimeout.getStringRep()).     }     if (pageTimeout != Protocol.PAGE_TIMEOUT) {         builder.field("page_timeout", pageTimeout.getStringRep()).     }     if (filter != null) {         builder.field("filter").         filter.toXContent(builder, params).     }     if (columnar != null) {         builder.field("columnar", columnar).     }     if (cursor != null) {         builder.field("cursor", cursor).     }     return builder. }
