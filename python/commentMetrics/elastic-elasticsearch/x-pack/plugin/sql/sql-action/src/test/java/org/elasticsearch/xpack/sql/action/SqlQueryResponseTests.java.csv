commented;modifiers;parameterAmount;loc;comment;code
false;static;0;3;;static String randomStringCursor() {     return randomBoolean() ? "" : randomAlphaOfLength(10). }
false;protected;0;4;;@Override protected SqlQueryResponse createTestInstance() {     return createRandomInstance(randomStringCursor(), randomFrom(Mode.values()), randomBoolean()). }
false;public,static;3;38;;public static SqlQueryResponse createRandomInstance(String cursor, Mode mode, boolean columnar) {     int columnCount = between(1, 10).     List<ColumnInfo> columns = null.     if (randomBoolean()) {         columns = new ArrayList<>(columnCount).         for (int i = 0. i < columnCount. i++) {             columns.add(new ColumnInfo(randomAlphaOfLength(10), randomAlphaOfLength(10), randomAlphaOfLength(10), randomInt(25))).         }     }     List<List<Object>> rows.     if (randomBoolean()) {         rows = Collections.emptyList().     } else {         int rowCount = between(1, 10).         if (columnar && columns != null) {             int temp = rowCount.             rowCount = columnCount.             columnCount = temp.         }         rows = new ArrayList<>(rowCount).         for (int r = 0. r < rowCount. r++) {             List<Object> row = new ArrayList<>(rowCount).             for (int c = 0. c < columnCount. c++) {                 Supplier<Object> value = randomFrom(Arrays.asList(() -> randomAlphaOfLength(10), ESTestCase::randomLong, ESTestCase::randomDouble, () -> null)).                 row.add(value.get()).             }             rows.add(row).         }     }     return new SqlQueryResponse(cursor, mode, false, columns, rows). }
false;protected;0;4;;@Override protected SqlQueryResponse createBlankInstance() {     return new SqlQueryResponse(). }
false;public;0;39;;public void testToXContent() throws IOException {     SqlQueryResponse testInstance = createTestInstance().     XContentBuilder builder = testInstance.toXContent(XContentFactory.jsonBuilder(), EMPTY_PARAMS).     Map<String, Object> rootMap = XContentHelper.convertToMap(BytesReference.bytes(builder), false, builder.contentType()).v2().     logger.info(Strings.toString(builder)).     if (testInstance.columns() != null) {         List<?> columns = (List<?>) rootMap.get("columns").         assertThat(columns, hasSize(testInstance.columns().size())).         for (int i = 0. i < columns.size(). i++) {             Map<?, ?> columnMap = (Map<?, ?>) columns.get(i).             ColumnInfo columnInfo = testInstance.columns().get(i).             assertEquals(columnInfo.name(), columnMap.get("name")).             assertEquals(columnInfo.esType(), columnMap.get("type")).             assertEquals(columnInfo.displaySize(), columnMap.get("display_size")).         }     } else {         assertNull(rootMap.get("columns")).     }     List<?> rows.     if (testInstance.columnar()) {         rows = ((List<?>) rootMap.get("values")).     } else {         rows = ((List<?>) rootMap.get("rows")).     }     assertNotNull(rows).     assertThat(rows, hasSize(testInstance.rows().size())).     for (int i = 0. i < rows.size(). i++) {         List<?> row = (List<?>) rows.get(i).         assertEquals(row, testInstance.rows().get(i)).     }     if (testInstance.cursor().equals("") == false) {         assertEquals(rootMap.get(CURSOR.getPreferredName()), testInstance.cursor()).     } }
false;protected;1;6;;@Override protected SqlQueryResponse doParseInstance(XContentParser parser) {     org.elasticsearch.xpack.sql.proto.SqlQueryResponse response = org.elasticsearch.xpack.sql.proto.SqlQueryResponse.fromXContent(parser).     return new SqlQueryResponse(response.cursor(), Mode.JDBC, false, response.columns(), response.rows()). }
