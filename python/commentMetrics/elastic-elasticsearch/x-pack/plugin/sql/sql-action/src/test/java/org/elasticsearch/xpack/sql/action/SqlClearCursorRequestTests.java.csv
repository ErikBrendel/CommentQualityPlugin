commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     requestInfo = new RequestInfo(randomFrom(Mode.values()), randomFrom(randomFrom(CLIENT_IDS), randomAlphaOfLengthBetween(10, 20))). }
false;protected;0;4;;@Override protected SqlClearCursorRequest createTestInstance() {     return new SqlClearCursorRequest(requestInfo, randomAlphaOfLength(100)). }
false;protected;0;4;;@Override protected Writeable.Reader<SqlClearCursorRequest> instanceReader() {     return SqlClearCursorRequest::new. }
false;protected;1;4;;@Override protected SqlClearCursorRequest doParseInstance(XContentParser parser) {     return SqlClearCursorRequest.fromXContent(parser). }
false;private;0;3;;private RequestInfo randomRequestInfo() {     return new RequestInfo(randomFrom(Mode.values()), randomFrom(randomFrom(CLIENT_IDS), requestInfo.clientId())). }
false;protected;1;11;;@Override protected SqlClearCursorRequest mutateInstance(SqlClearCursorRequest instance) throws IOException {     @SuppressWarnings("unchecked")     Consumer<SqlClearCursorRequest> mutator = randomFrom(request -> request.requestInfo(randomValueOtherThan(request.requestInfo(), this::randomRequestInfo)), request -> request.setCursor(randomValueOtherThan(request.getCursor(), SqlQueryResponseTests::randomStringCursor))).     SqlClearCursorRequest newRequest = new SqlClearCursorRequest(instance.requestInfo(), instance.getCursor()).     mutator.accept(newRequest).     return newRequest. }
