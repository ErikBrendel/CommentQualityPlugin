commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     requestInfo = new RequestInfo(randomFrom(Mode.values()), randomFrom(randomFrom(CLIENT_IDS), randomAlphaOfLengthBetween(10, 20))). }
false;protected;0;5;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     SearchModule searchModule = new SearchModule(Settings.EMPTY, false, Collections.emptyList()).     return new NamedWriteableRegistry(searchModule.getNamedWriteables()). }
false;protected;0;5;;@Override protected NamedXContentRegistry xContentRegistry() {     SearchModule searchModule = new SearchModule(Settings.EMPTY, false, Collections.emptyList()).     return new NamedXContentRegistry(searchModule.getNamedXContents()). }
false;protected;0;7;;@Override protected SqlQueryRequest createTestInstance() {     return new SqlQueryRequest(randomAlphaOfLength(10), randomParameters(), SqlTestUtils.randomFilterOrNull(random()), randomZone(), between(1, Integer.MAX_VALUE), randomTV(), randomTV(), randomBoolean(), randomAlphaOfLength(10), requestInfo). }
false;private;0;3;;private RequestInfo randomRequestInfo() {     return new RequestInfo(randomFrom(Mode.values()), randomFrom(randomFrom(CLIENT_IDS), requestInfo.clientId())). }
false;public;0;19;;public List<SqlTypedParamValue> randomParameters() {     if (randomBoolean()) {         return Collections.emptyList().     } else {         int len = randomIntBetween(1, 10).         List<SqlTypedParamValue> arr = new ArrayList<>(len).         for (int i = 0. i < len. i++) {             @SuppressWarnings("unchecked")             Supplier<SqlTypedParamValue> supplier = randomFrom(() -> new SqlTypedParamValue("boolean", randomBoolean()), () -> new SqlTypedParamValue("long", randomLong()), () -> new SqlTypedParamValue("double", randomDouble()), () -> new SqlTypedParamValue("null", null), () -> new SqlTypedParamValue("keyword", randomAlphaOfLength(10))).             arr.add(supplier.get()).         }         return Collections.unmodifiableList(arr).     } }
false;protected;0;4;;@Override protected Writeable.Reader<SqlQueryRequest> instanceReader() {     return SqlQueryRequest::new. }
false;private;0;3;;private TimeValue randomTV() {     return TimeValue.parseTimeValue(randomTimeValue(), null, "test"). }
false;protected;1;4;;@Override protected SqlQueryRequest doParseInstance(XContentParser parser) {     return SqlQueryRequest.fromXContent(parser). }
false;protected;1;21;;@Override protected SqlQueryRequest mutateInstance(SqlQueryRequest instance) {     @SuppressWarnings("unchecked")     Consumer<SqlQueryRequest> mutator = randomFrom(request -> request.requestInfo(randomValueOtherThan(request.requestInfo(), this::randomRequestInfo)), request -> request.query(randomValueOtherThan(request.query(), () -> randomAlphaOfLength(5))), request -> request.params(randomValueOtherThan(request.params(), this::randomParameters)), request -> request.zoneId(randomValueOtherThan(request.zoneId(), ESTestCase::randomZone)), request -> request.fetchSize(randomValueOtherThan(request.fetchSize(), () -> between(1, Integer.MAX_VALUE))), request -> request.requestTimeout(randomValueOtherThan(request.requestTimeout(), this::randomTV)), request -> request.filter(randomValueOtherThan(request.filter(), () -> request.filter() == null ? randomFilter(random()) : randomFilterOrNull(random()))), request -> request.columnar(randomValueOtherThan(request.columnar(), () -> randomBoolean())), request -> request.cursor(randomValueOtherThan(request.cursor(), SqlQueryResponseTests::randomStringCursor))).     SqlQueryRequest newRequest = new SqlQueryRequest(instance.query(), instance.params(), instance.filter(), instance.zoneId(), instance.fetchSize(), instance.requestTimeout(), instance.pageTimeout(), instance.columnar(), instance.cursor(), instance.requestInfo()).     mutator.accept(newRequest).     return newRequest. }
false;public;0;5;;public void testTimeZoneNullException() {     final SqlQueryRequest sqlQueryRequest = createTestInstance().     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> sqlQueryRequest.zoneId(null)).     assertEquals("time zone may not be null.", e.getMessage()). }
