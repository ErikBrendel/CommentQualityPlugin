commented;modifiers;parameterAmount;loc;comment;code
false;protected,static;1;19;;protected static <R extends AbstractSqlQueryRequest> ObjectParser<R, Void> objectParser(Supplier<R> supplier) {     // Using an ObjectParser here (vs. ConstructingObjectParser) because the latter needs to instantiate a concrete class     // and we would duplicate the code from this class to its subclasses     ObjectParser<R, Void> parser = new ObjectParser<>("sql/query", false, supplier).     parser.declareString(AbstractSqlQueryRequest::query, QUERY).     parser.declareString((request, mode) -> request.mode(Mode.fromString(mode)), MODE).     parser.declareString((request, clientId) -> request.clientId(clientId), CLIENT_ID).     parser.declareObjectArray(AbstractSqlQueryRequest::params, (p, c) -> SqlTypedParamValue.fromXContent(p), PARAMS).     parser.declareString((request, zoneId) -> request.zoneId(ZoneId.of(zoneId)), TIME_ZONE).     parser.declareInt(AbstractSqlQueryRequest::fetchSize, FETCH_SIZE).     parser.declareString((request, timeout) -> request.requestTimeout(TimeValue.parseTimeValue(timeout, Protocol.REQUEST_TIMEOUT, "request_timeout")), REQUEST_TIMEOUT).     parser.declareString((request, timeout) -> request.pageTimeout(TimeValue.parseTimeValue(timeout, Protocol.PAGE_TIMEOUT, "page_timeout")), PAGE_TIMEOUT).     parser.declareObject(AbstractSqlQueryRequest::filter, (p, c) -> AbstractQueryBuilder.parseInnerQueryBuilder(p), FILTER).     return parser. }
true;public;0;3;/**  * Text of SQL query  */ ;/**  * Text of SQL query  */ public String query() {     return query. }
false;public;1;7;;public AbstractSqlQueryRequest query(String query) {     if (query == null) {         throw new IllegalArgumentException("query may not be null.").     }     this.query = query.     return this. }
true;public;0;3;/**  * An optional list of parameters if the SQL query is parametrized  */ ;/**  * An optional list of parameters if the SQL query is parametrized  */ public List<SqlTypedParamValue> params() {     return params. }
false;public;1;7;;public AbstractSqlQueryRequest params(List<SqlTypedParamValue> params) {     if (params == null) {         throw new IllegalArgumentException("params may not be null.").     }     this.params = params.     return this. }
true;public;0;3;/**  * The client's time zone  */ ;/**  * The client's time zone  */ public ZoneId zoneId() {     return zoneId. }
false;public;1;7;;public AbstractSqlQueryRequest zoneId(ZoneId zoneId) {     if (zoneId == null) {         throw new IllegalArgumentException("time zone may not be null.").     }     this.zoneId = zoneId.     return this. }
true;public;0;3;/**  * Hint about how many results to fetch at once.  */ ;/**  * Hint about how many results to fetch at once.  */ public int fetchSize() {     return fetchSize. }
true;public;1;7;/**  * Hint about how many results to fetch at once.  */ ;/**  * Hint about how many results to fetch at once.  */ public AbstractSqlQueryRequest fetchSize(int fetchSize) {     if (fetchSize <= 0) {         throw new IllegalArgumentException("fetch_size must be more than 0.").     }     this.fetchSize = fetchSize.     return this. }
true;public;0;3;/**  * The timeout specified on the search request  */ ;/**  * The timeout specified on the search request  */ public TimeValue requestTimeout() {     return requestTimeout. }
false;public;1;4;;public AbstractSqlQueryRequest requestTimeout(TimeValue requestTimeout) {     this.requestTimeout = requestTimeout.     return this. }
true;public;0;3;/**  * The scroll timeout  */ ;/**  * The scroll timeout  */ public TimeValue pageTimeout() {     return pageTimeout. }
false;public;1;4;;public AbstractSqlQueryRequest pageTimeout(TimeValue pageTimeout) {     this.pageTimeout = pageTimeout.     return this. }
true;public;1;4;/**  * An optional Query DSL defined query that can added as a filter on the top of the SQL query  */ ;/**  * An optional Query DSL defined query that can added as a filter on the top of the SQL query  */ public AbstractSqlQueryRequest filter(QueryBuilder filter) {     this.filter = filter.     return this. }
true;public;0;3;/**  * An optional Query DSL defined query that can added as a filter on the top of the SQL query  */ ;/**  * An optional Query DSL defined query that can added as a filter on the top of the SQL query  */ public QueryBuilder filter() {     return filter. }
false;public,static;2;4;;public static void writeSqlTypedParamValue(StreamOutput out, SqlTypedParamValue value) throws IOException {     out.writeString(value.type).     out.writeGenericValue(value.value). }
false;public,static;1;3;;public static SqlTypedParamValue readSqlTypedParamValue(StreamInput in) throws IOException {     return new SqlTypedParamValue(in.readString(), in.readGenericValue()). }
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(query).     out.writeVInt(params.size()).     for (SqlTypedParamValue param : params) {         writeSqlTypedParamValue(out, param).     }     out.writeString(zoneId.getId()).     out.writeVInt(fetchSize).     out.writeTimeValue(requestTimeout).     out.writeTimeValue(pageTimeout).     out.writeOptionalNamedWriteable(filter). }
false;public;1;20;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     if (!super.equals(o)) {         return false.     }     AbstractSqlQueryRequest that = (AbstractSqlQueryRequest) o.     return fetchSize == that.fetchSize && Objects.equals(query, that.query) && Objects.equals(params, that.params) && Objects.equals(zoneId, that.zoneId) && Objects.equals(requestTimeout, that.requestTimeout) && Objects.equals(pageTimeout, that.pageTimeout) && Objects.equals(filter, that.filter). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), query, zoneId, fetchSize, requestTimeout, pageTimeout, filter). }
