commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = super.validate().     if (getCursor() == null) {         validationException = addValidationError("cursor is required", validationException).     }     return validationException. }
false;public;0;3;;public String getCursor() {     return cursor. }
false;public;1;4;;public SqlClearCursorRequest setCursor(String cursor) {     this.cursor = cursor.     return this. }
false;public;0;4;;@Override public String getDescription() {     return "SQL Clean cursor [" + getCursor() + "]". }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(cursor). }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     if (!super.equals(o))         return false.     SqlClearCursorRequest that = (SqlClearCursorRequest) o.     return Objects.equals(cursor, that.cursor). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), cursor). }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     // This is needed just to test round-trip compatibility with proto.SqlClearCursorRequest     return new org.elasticsearch.xpack.sql.proto.SqlClearCursorRequest(cursor, requestInfo()).toXContent(builder, params). }
false;public,static;1;3;;public static SqlClearCursorRequest fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
