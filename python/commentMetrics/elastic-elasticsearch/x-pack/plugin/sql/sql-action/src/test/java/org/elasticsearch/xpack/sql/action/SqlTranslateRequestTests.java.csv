commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     testMode = randomFrom(Mode.values()). }
false;protected;0;5;;@Override protected SqlTranslateRequest createTestInstance() {     return new SqlTranslateRequest(randomAlphaOfLength(10), Collections.emptyList(), randomFilterOrNull(random()), randomZone(), between(1, Integer.MAX_VALUE), randomTV(), randomTV(), new RequestInfo(testMode)). }
false;protected;0;4;;@Override protected Writeable.Reader<SqlTranslateRequest> instanceReader() {     return SqlTranslateRequest::new. }
false;private;0;3;;private TimeValue randomTV() {     return TimeValue.parseTimeValue(randomTimeValue(), null, "test"). }
false;protected;0;5;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     SearchModule searchModule = new SearchModule(Settings.EMPTY, false, Collections.emptyList()).     return new NamedWriteableRegistry(searchModule.getNamedWriteables()). }
false;protected;0;5;;@Override protected NamedXContentRegistry xContentRegistry() {     SearchModule searchModule = new SearchModule(Settings.EMPTY, false, Collections.emptyList()).     return new NamedXContentRegistry(searchModule.getNamedXContents()). }
false;protected;1;4;;@Override protected SqlTranslateRequest doParseInstance(XContentParser parser) {     return SqlTranslateRequest.fromXContent(parser). }
false;protected;1;16;;@Override protected SqlTranslateRequest mutateInstance(SqlTranslateRequest instance) throws IOException {     @SuppressWarnings("unchecked")     Consumer<SqlTranslateRequest> mutator = randomFrom(request -> request.query(randomValueOtherThan(request.query(), () -> randomAlphaOfLength(5))), request -> request.zoneId(randomValueOtherThan(request.zoneId(), ESTestCase::randomZone)), request -> request.fetchSize(randomValueOtherThan(request.fetchSize(), () -> between(1, Integer.MAX_VALUE))), request -> request.requestTimeout(randomValueOtherThan(request.requestTimeout(), this::randomTV)), request -> request.filter(randomValueOtherThan(request.filter(), () -> request.filter() == null ? randomFilter(random()) : randomFilterOrNull(random())))).     SqlTranslateRequest newRequest = new SqlTranslateRequest(instance.query(), instance.params(), instance.filter(), instance.zoneId(), instance.fetchSize(), instance.requestTimeout(), instance.pageTimeout(), instance.requestInfo()).     mutator.accept(newRequest).     return newRequest. }
