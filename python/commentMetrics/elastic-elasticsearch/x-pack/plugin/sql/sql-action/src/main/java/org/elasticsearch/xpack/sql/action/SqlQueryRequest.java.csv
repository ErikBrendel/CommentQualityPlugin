commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if ((false == Strings.hasText(query())) && Strings.hasText(cursor) == false) {         validationException = addValidationError("one of [query] or [cursor] is required", validationException).     }     return validationException. }
true;public;0;3;/**  * The key that must be sent back to SQL to access the next page of  * results.  */ ;/**  * The key that must be sent back to SQL to access the next page of  * results.  */ public String cursor() {     return cursor. }
true;public;1;7;/**  * The key that must be sent back to SQL to access the next page of  * results.  */ ;/**  * The key that must be sent back to SQL to access the next page of  * results.  */ public SqlQueryRequest cursor(String cursor) {     if (cursor == null) {         throw new IllegalArgumentException("cursor may not be null.").     }     this.cursor = cursor.     return this. }
true;public;0;3;/**  * Should format the values in a columnar fashion or not (default false).  * Depending on the format used (csv, tsv, txt, json etc) this setting will be taken into  * consideration or not, depending on whether it even makes sense for that specific format or not.  */ ;/**  * Should format the values in a columnar fashion or not (default false).  * Depending on the format used (csv, tsv, txt, json etc) this setting will be taken into  * consideration or not, depending on whether it even makes sense for that specific format or not.  */ public Boolean columnar() {     return columnar. }
false;public;1;4;;public SqlQueryRequest columnar(boolean columnar) {     this.columnar = columnar.     return this. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(cursor).     out.writeOptionalBoolean(columnar). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), cursor, columnar). }
false;public;1;6;;@Override public boolean equals(Object obj) {     return super.equals(obj) && Objects.equals(cursor, ((SqlQueryRequest) obj).cursor) && Objects.equals(columnar, ((SqlQueryRequest) obj).columnar). }
false;public;0;4;;@Override public String getDescription() {     return "SQL [" + query() + "][" + filter() + "]". }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     // This is needed just to test round-trip compatibility with proto.SqlQueryRequest     return new org.elasticsearch.xpack.sql.proto.SqlQueryRequest(query(), params(), zoneId(), fetchSize(), requestTimeout(), pageTimeout(), filter(), columnar(), cursor(), requestInfo()).toXContent(builder, params). }
false;public,static;1;3;;public static SqlQueryRequest fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
