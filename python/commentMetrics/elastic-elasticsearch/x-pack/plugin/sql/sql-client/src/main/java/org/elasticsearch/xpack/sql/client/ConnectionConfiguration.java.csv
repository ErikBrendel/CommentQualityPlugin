commented;modifiers;parameterAmount;loc;comment;code
false;private,static;3;8;;private static URI normalizeSchema(URI uri, String connectionString, boolean isSSLEnabled) {     try {         return new URI(isSSLEnabled ? "https" : "http", null, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment()).     } catch (URISyntaxException ex) {         throw new ClientException("Cannot parse process baseURI [" + connectionString + "] " + ex.getMessage()).     } }
false;private;0;5;;private Collection<String> optionNames() {     Collection<String> options = new ArrayList<>(OPTION_NAMES).     options.addAll(extraOptions()).     return options. }
false;protected;0;3;;protected Collection<? extends String> extraOptions() {     return emptyList(). }
false;private,static;2;10;;private static void checkPropertyNames(Properties settings, Collection<String> knownNames) throws ClientException {     // validate specified properties to pick up typos and such     Enumeration<?> pNames = settings.propertyNames().     while (pNames.hasMoreElements()) {         String message = isKnownProperty(pNames.nextElement().toString(), knownNames).         if (message != null) {             throw new ClientException(message).         }     } }
false;private,static;2;6;;private static String isKnownProperty(String propertyName, Collection<String> knownOptions) {     if (knownOptions.contains(propertyName)) {         return null.     }     return "Unknown parameter [" + propertyName + "]. did you mean " + StringUtils.findSimilar(propertyName, knownOptions). }
false;protected;3;7;;protected <T> T parseValue(String key, String value, Function<String, T> parser) {     try {         return parser.apply(value).     } catch (Exception ex) {         throw new ClientException("Cannot parse property [" + key + "] with value [" + value + "]. " + ex.getMessage()).     } }
false;protected;0;3;;protected boolean isSSLEnabled() {     return sslConfig.isEnabled(). }
false;public;0;3;;public boolean validateProperties() {     return validateProperties. }
false;public;0;3;;public SslConfig sslConfig() {     return sslConfig. }
false;public;0;3;;public ProxyConfig proxyConfig() {     return proxyConfig. }
false;public;0;3;;public long connectTimeout() {     return connectTimeout. }
false;public;0;3;;public long networkTimeout() {     return networkTimeout. }
false;public;0;3;;public long queryTimeout() {     return queryTimeout. }
false;public;0;3;;public long pageTimeout() {     return pageTimeout. }
false;public;0;3;;public int pageSize() {     return pageSize. }
true;public;0;3;// auth ;// auth public String authUser() {     return user. }
false;public;0;3;;public String authPass() {     return pass. }
false;public;0;3;;public URI baseUri() {     return baseURI. }
true;public;0;3;/**  * Returns the original connections string  */ ;/**  * Returns the original connections string  */ public String connectionString() {     return connectionString. }
