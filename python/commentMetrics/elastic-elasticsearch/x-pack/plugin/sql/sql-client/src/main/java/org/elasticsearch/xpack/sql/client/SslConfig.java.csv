commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;// ssl ;// ssl boolean isEnabled() {     return enabled. }
false;;0;3;;SSLSocketFactory sslSocketFactory() {     return sslContext.getSocketFactory(). }
false;private;0;11;;private SSLContext createSSLContext() {     SSLContext ctx.     try {         ctx = SSLContext.getInstance(protocol).         ctx.init(loadKeyManagers(), loadTrustManagers(), null).     } catch (Exception ex) {         throw new ClientException("Failed to initialize SSL - " + ex.getMessage(), ex).     }     return ctx. }
false;private;0;11;;private KeyManager[] loadKeyManagers() throws GeneralSecurityException, IOException {     if (!StringUtils.hasText(keystoreLocation)) {         return null.     }     char[] pass = (StringUtils.hasText(keystorePass) ? keystorePass.trim().toCharArray() : null).     KeyStore keyStore = loadKeyStore(keystoreLocation, pass, keystoreType).     KeyManagerFactory kmFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()).     kmFactory.init(keyStore, pass).     return kmFactory.getKeyManagers(). }
false;private;3;18;;private KeyStore loadKeyStore(String source, char[] pass, String keyStoreType) throws GeneralSecurityException, IOException {     KeyStore keyStore = KeyStore.getInstance(keyStoreType).     Path path = Paths.get(source).     if (!Files.exists(path)) {         throw new ClientException("Expected to find keystore file at [" + source + "] but was unable to. Make sure you have specified a valid URI.").     }     try (InputStream in = Files.newInputStream(Paths.get(source), StandardOpenOption.READ)) {         keyStore.load(in, pass).     } catch (Exception ex) {         throw new ClientException("Cannot open keystore [" + source + "] - " + ex.getMessage(), ex).     } finally {     }     return keyStore. }
false;private;0;12;;private TrustManager[] loadTrustManagers() throws GeneralSecurityException, IOException {     KeyStore keyStore = null.     if (StringUtils.hasText(truststoreLocation)) {         char[] pass = (StringUtils.hasText(truststorePass) ? truststorePass.trim().toCharArray() : null).         keyStore = loadKeyStore(truststoreLocation, pass, truststoreType).     }     TrustManagerFactory tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()).     tmFactory.init(keyStore).     return tmFactory.getTrustManagers(). }
false;public;1;20;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     SslConfig other = (SslConfig) obj.     return Objects.equals(enabled, other.enabled) && Objects.equals(protocol, other.protocol) && Objects.equals(keystoreLocation, other.keystoreLocation) && Objects.equals(keystorePass, other.keystorePass) && Objects.equals(keystoreType, other.keystoreType) && Objects.equals(truststoreLocation, other.truststoreLocation) && Objects.equals(truststorePass, other.truststorePass) && Objects.equals(truststoreType, other.truststoreType). }
false;public;0;4;;@Override public int hashCode() {     return getClass().hashCode(). }
