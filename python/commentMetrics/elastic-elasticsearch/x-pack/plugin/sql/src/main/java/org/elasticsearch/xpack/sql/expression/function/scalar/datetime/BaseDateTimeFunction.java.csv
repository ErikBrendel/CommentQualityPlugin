commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;0;4;;@Override protected final NodeInfo<BaseDateTimeFunction> info() {     return NodeInfo.create(this, ctorForInfo(), field(), zoneId()). }
false;protected,abstract;0;1;;protected abstract NodeInfo.NodeCtor2<Expression, ZoneId, BaseDateTimeFunction> ctorForInfo().
false;protected;0;4;;@Override protected TypeResolution resolveType() {     return isDate(field(), sourceText(), ParamOrdinal.DEFAULT). }
false;public;0;3;;public ZoneId zoneId() {     return zoneId. }
false;public;0;4;;@Override public boolean foldable() {     return field().foldable(). }
false;public;0;9;;@Override public Object fold() {     ZonedDateTime folded = (ZonedDateTime) field().fold().     if (folded == null) {         return null.     }     return doFold(folded.withZoneSameInstant(zoneId)). }
false;protected,abstract;1;1;;protected abstract Object doFold(ZonedDateTime dateTime).
false;public;1;9;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     BaseDateTimeFunction other = (BaseDateTimeFunction) obj.     return Objects.equals(other.field(), field()) && Objects.equals(other.zoneId(), zoneId()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(field(), zoneId()). }
