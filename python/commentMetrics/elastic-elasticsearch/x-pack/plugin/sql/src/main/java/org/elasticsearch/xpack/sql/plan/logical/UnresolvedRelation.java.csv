commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<UnresolvedRelation> info() {     return NodeInfo.create(this, UnresolvedRelation::new, table, alias, unresolvedMsg). }
false;public;0;3;;public TableIdentifier table() {     return table. }
false;public;0;3;;public String alias() {     return alias. }
false;public;0;4;;@Override public boolean resolved() {     return false. }
false;public;0;4;;@Override public boolean expressionsResolved() {     return false. }
false;public;0;4;;@Override public List<Attribute> output() {     return Collections.emptyList(). }
false;public;0;4;;@Override public String unresolvedMessage() {     return unresolvedMsg. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(source(), table, alias, unresolvedMsg). }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     UnresolvedRelation other = (UnresolvedRelation) obj.     return source().equals(other.source()) && table.equals(other.table) && Objects.equals(alias, other.alias) && unresolvedMsg.equals(other.unresolvedMsg). }
false;public;0;4;;@Override public List<Object> nodeProperties() {     return singletonList(table). }
false;public;0;4;;@Override public String toString() {     return UNRESOLVED_PREFIX + table.index(). }
