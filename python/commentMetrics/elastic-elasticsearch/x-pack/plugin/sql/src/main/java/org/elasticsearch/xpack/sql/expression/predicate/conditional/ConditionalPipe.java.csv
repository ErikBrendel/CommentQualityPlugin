commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<ConditionalPipe> info() {     return NodeInfo.create(this, ConditionalPipe::new, expression(), children(), operation). }
false;public;1;4;;@Override public Pipe replaceChildren(List<Pipe> newChildren) {     return new ConditionalPipe(source(), expression(), newChildren, operation). }
false;public;1;4;;@Override public Processor asProcessor(List<Processor> procs) {     return new ConditionalProcessor(procs, operation). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), operation). }
false;public;1;8;;@Override public boolean equals(Object obj) {     if (super.equals(obj)) {         ConditionalPipe other = (ConditionalPipe) obj.         return Objects.equals(operation, other.operation).     }     return false. }
