commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public int extract(ZonedDateTime dt) {     return dt.get(field). }
false;public;0;3;;public ChronoField chronoField() {     return field. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeEnum(extractor). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;;0;3;;DateTimeExtractor extractor() {     return extractor. }
false;public;1;4;;@Override public Object doProcess(ZonedDateTime dateTime) {     return extractor.extract(dateTime). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(extractor, zoneId()). }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     DateTimeProcessor other = (DateTimeProcessor) obj.     return Objects.equals(extractor, other.extractor) && Objects.equals(zoneId(), other.zoneId()). }
false;public;0;4;;@Override public String toString() {     return extractor.toString(). }
