commented;modifiers;parameterAmount;loc;comment;code
false;default;1;7;;default R apply(Object o) {     if (!(o instanceof String || o instanceof Character)) {         throw new SqlIllegalArgumentException("A string/char is required. received [{}]", o).     }     return doApply(o.toString()). }
false;;1;1;;R doApply(String s).
false;default;1;7;;default R apply(Object o) {     if (!(o instanceof Number)) {         throw new SqlIllegalArgumentException("A number is required. received [{}]", o).     }     return doApply((Number) o). }
false;;1;1;;R doApply(Number s).
false;public,final;1;3;;public final Object apply(Object l) {     return apply.apply(l). }
true;public;0;4;/**  * "translate" the function name ("char") into a function name that is not a reserved keyword in java.  * Used in {@code InternalSqlScriptUtils#character(Number)}.  */ ;/**  * "translate" the function name ("char") into a function name that is not a reserved keyword in java.  * Used in {@code InternalSqlScriptUtils#character(Number)}.  */ @Override public String toString() {     return this == CHAR ? "character" : super.toString(). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeEnum(processor). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;4;;@Override public Object process(Object input) {     return processor.apply(input). }
false;;0;3;;StringOperation processor() {     return processor. }
false;public;1;8;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     StringProcessor other = (StringProcessor) obj.     return processor == other.processor. }
false;public;0;4;;@Override public int hashCode() {     return processor.hashCode(). }
false;public;0;4;;@Override public String toString() {     return processor.toString(). }
