commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected NodeInfo<UnresolvedAttribute> info() {     return NodeInfo.create(this, UnresolvedAttribute::new, name(), qualifier(), id(), unresolvedMsg, resolutionMetadata). }
false;public;0;3;;public Object resolutionMetadata() {     return resolutionMetadata. }
false;public;0;3;;public boolean customMessage() {     return customMessage. }
false;public;0;4;;@Override public boolean resolved() {     return false. }
false;protected;6;5;;@Override protected Attribute clone(Source source, String name, String qualifier, Nullability nullability, ExpressionId id, boolean synthetic) {     return this. }
false;public;1;3;;public UnresolvedAttribute withUnresolvedMessage(String unresolvedMsg) {     return new UnresolvedAttribute(source(), name(), qualifier(), id(), unresolvedMsg, resolutionMetadata()). }
false;public;0;4;;@Override public DataType dataType() {     throw new UnresolvedException("dataType", this). }
false;public;0;4;;@Override public String nodeString() {     return format(Locale.ROOT, "unknown column '%s'", name()). }
false;public;0;4;;@Override public String toString() {     return UNRESOLVED_PREFIX + qualifiedName(). }
false;protected;0;4;;@Override protected String label() {     return UNRESOLVED_PREFIX. }
false;public;0;4;;@Override public String unresolvedMessage() {     return unresolvedMsg. }
false;public,static;2;8;;public static String errorMessage(String name, List<String> potentialMatches) {     String msg = "Unknown column [" + name + "]".     if (!CollectionUtils.isEmpty(potentialMatches)) {         msg += ", did you mean " + (potentialMatches.size() == 1 ? "[" + potentialMatches.get(0) + "]" : "any of " + potentialMatches.toString()) + "?".     }     return msg. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), resolutionMetadata, unresolvedMsg). }
false;public;1;8;;@Override public boolean equals(Object obj) {     if (super.equals(obj)) {         UnresolvedAttribute ua = (UnresolvedAttribute) obj.         return Objects.equals(resolutionMetadata, ua.resolutionMetadata) && Objects.equals(unresolvedMsg, ua.unresolvedMsg).     }     return false. }
