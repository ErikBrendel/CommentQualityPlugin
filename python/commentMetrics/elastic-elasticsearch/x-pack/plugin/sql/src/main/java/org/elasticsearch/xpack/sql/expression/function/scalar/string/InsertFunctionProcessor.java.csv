commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;7;;@Override public final void writeTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(source()).     out.writeNamedWriteable(start()).     out.writeNamedWriteable(length()).     out.writeNamedWriteable(replacement()). }
false;public;1;4;;@Override public Object process(Object input) {     return doProcess(source().process(input), start().process(input), length().process(input), replacement().process(input)). }
false;public,static;4;40;;public static Object doProcess(Object source, Object start, Object length, Object replacement) {     if (source == null) {         return null.     }     if (!(source instanceof String || source instanceof Character)) {         throw new SqlIllegalArgumentException("A string/char is required. received [{}]", source).     }     if (replacement == null) {         return source.     }     if (!(replacement instanceof String || replacement instanceof Character)) {         throw new SqlIllegalArgumentException("A string/char is required. received [{}]", replacement).     }     if (start == null || length == null) {         return source.     }     if (!(start instanceof Number)) {         throw new SqlIllegalArgumentException("A number is required. received [{}]", start).     }     if (!(length instanceof Number)) {         throw new SqlIllegalArgumentException("A number is required. received [{}]", length).     }     if (((Number) length).intValue() < 0) {         throw new SqlIllegalArgumentException("A positive number is required for [length]. received [{}]", length).     }     int startInt = ((Number) start).intValue() - 1.     int realStart = startInt < 0 ? 0 : startInt.     if (startInt > source.toString().length()) {         return source.     }     StringBuilder sb = new StringBuilder(source.toString()).     String replString = (replacement.toString()).     return sb.replace(realStart, realStart + ((Number) length).intValue(), replString).toString(). }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     InsertFunctionProcessor other = (InsertFunctionProcessor) obj.     return Objects.equals(source(), other.source()) && Objects.equals(start(), other.start()) && Objects.equals(length(), other.length()) && Objects.equals(replacement(), other.replacement()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(source(), start(), length(), replacement()). }
false;public;0;3;;public Processor source() {     return source. }
false;public;0;3;;public Processor start() {     return start. }
false;public;0;3;;public Processor length() {     return length. }
false;public;0;3;;public Processor replacement() {     return replacement. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
