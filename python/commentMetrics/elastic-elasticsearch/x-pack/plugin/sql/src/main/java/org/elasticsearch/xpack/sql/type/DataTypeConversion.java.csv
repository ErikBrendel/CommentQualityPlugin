# id;timestamp;commentText;codeText;commentWords;codeWords
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1524684173;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1526029249;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1531179852;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1540847035;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1541092382;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1541502744;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1542461427;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1542807959;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1547713078;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1548330118;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1548451750;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static boolean canConvert(DataType from, DataType to);1549659351;Returns true if the from type can be converted to the to type, false - otherwise;public static boolean canConvert(DataType from, DataType to) {_        _        if (from == to || from == NULL) {_            return true__        }_        _        return from.isPrimitive() && to.isPrimitive() && conversion(from, to) != null__    };returns,true,if,the,from,type,can,be,converted,to,the,to,type,false,otherwise;public,static,boolean,can,convert,data,type,from,data,type,to,if,from,to,from,null,return,true,return,from,is,primitive,to,is,primitive,conversion,from,to,null
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1524684173;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == DataType.NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,data,type,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1526029249;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == DataType.NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,data,type,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1531179852;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == DataType.NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,data,type,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1540847035;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == DataType.NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,data,type,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1541092382;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == DataType.NULL) {_            return Conversion.NULL__        }_        if (from == DataType.NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,data,type,null,return,conversion,null,if,from,data,type,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1541502744;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == DataType.NULL || from == DataType.NULL) {_            return Conversion.NULL__        }_        if (from == DataType.NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,data,type,null,from,data,type,null,return,conversion,null,if,from,data,type,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1542461427;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == DataType.NULL || from == DataType.NULL) {_            return Conversion.NULL__        }_        if (from == DataType.NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,data,type,null,from,data,type,null,return,conversion,null,if,from,data,type,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1542807959;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == NULL || from == NULL) {_            return Conversion.NULL__        }_        if (from == NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,null,from,null,return,conversion,null,if,from,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1547713078;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == NULL || from == NULL) {_            return Conversion.NULL__        }_        if (from == NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,null,from,null,return,conversion,null,if,from,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1548330118;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == NULL || from == NULL) {_            return Conversion.NULL__        }_        if (from == NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,null,from,null,return,conversion,null,if,from,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1548451750;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == NULL || from == NULL) {_            return Conversion.NULL__        }_        if (from == NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,null,from,null,return,conversion,null,if,from,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static Conversion conversionFor(DataType from, DataType to);1549659351;Get the conversion from one type to another.;public static Conversion conversionFor(DataType from, DataType to) {_        _        if (from == to) {_            return Conversion.IDENTITY__        }_        if (to == NULL || from == NULL) {_            return Conversion.NULL__        }_        if (from == NULL) {_            return Conversion.NULL__        }_        _        Conversion conversion = conversion(from, to)__        if (conversion == null) {_            throw new SqlIllegalArgumentException("cannot convert from [" + from + "] to [" + to + "]")__        }_        return conversion__    };get,the,conversion,from,one,type,to,another;public,static,conversion,conversion,for,data,type,from,data,type,to,if,from,to,return,conversion,identity,if,to,null,from,null,return,conversion,null,if,from,null,return,conversion,null,conversion,conversion,conversion,from,to,if,conversion,null,throw,new,sql,illegal,argument,exception,cannot,convert,from,from,to,to,return,conversion
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1524684173;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger) {_                _                if (right.isInteger) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }_        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,return,null
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1526029249;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger) {_                _                if (right.isInteger) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }_        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,return,null
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1531179852;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger) {_                _                if (right.isInteger) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }_        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,return,null
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1540847035;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger) {_                _                if (right.isInteger) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }_        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,return,null
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1541092382;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger) {_                _                if (right.isInteger) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }_        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,return,null
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1541502744;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger) {_                _                if (right.isInteger) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }_        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,return,null
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1542461427;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger) {_                _                if (right.isInteger) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }_        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,return,null
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1542807959;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger()) {_                _                if (right.isInteger()) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger()) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }_        _        if (DataTypes.isInterval(left)) {_            _            if (DataTypes.isInterval(right)) {_                _                return DataTypes.compatibleInterval(left, right)__            }_        }__        if (DataTypes.isInterval(right)) {_            if (left == DATE) {_                return left__            }_        }__        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,if,data,types,is,interval,left,if,data,types,is,interval,right,return,data,types,compatible,interval,left,right,if,data,types,is,interval,right,if,left,date,return,left,return,null
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1547713078;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger()) {_                _                if (right.isInteger()) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger()) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }_        _        if (DataTypes.isInterval(left)) {_            _            if (DataTypes.isInterval(right)) {_                _                return DataTypes.compatibleInterval(left, right)__            }_        }__        if (DataTypes.isInterval(right)) {_            if (left == DATETIME) {_                return left__            }_        }__        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,if,data,types,is,interval,left,if,data,types,is,interval,right,return,data,types,compatible,interval,left,right,if,data,types,is,interval,right,if,left,datetime,return,left,return,null
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1548330118;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger()) {_                _                if (right.isInteger()) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger()) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }__        _        if (left == DATE) {_            if (DataTypes.isInterval(right)) {_                return left__            }_        }_        if (right == DATE) {_            if (DataTypes.isInterval(left)) {_                return right__            }_        }_        if (left == DATETIME) {_            if (right == DATE) {_                return left__            }_            if (DataTypes.isInterval(right)) {_                return left__            }_        }_        if (right == DATETIME) {_            if (left == DATE) {_                return right__            }_            if (DataTypes.isInterval(left)) {_                return right__            }_        }_        if (DataTypes.isInterval(left)) {_            _            if (DataTypes.isInterval(right)) {_                _                return DataTypes.compatibleInterval(left, right)__            }_        }__        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,if,left,date,if,data,types,is,interval,right,return,left,if,right,date,if,data,types,is,interval,left,return,right,if,left,datetime,if,right,date,return,left,if,data,types,is,interval,right,return,left,if,right,datetime,if,left,date,return,right,if,data,types,is,interval,left,return,right,if,data,types,is,interval,left,if,data,types,is,interval,right,return,data,types,compatible,interval,left,right,return,null
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1548451750;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger()) {_                _                if (right.isInteger()) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger()) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }__        _        if (left == DATE) {_            if (DataTypes.isInterval(right)) {_                return left__            }_        }_        if (right == DATE) {_            if (DataTypes.isInterval(left)) {_                return right__            }_        }_        if (left == DATETIME) {_            if (right == DATE) {_                return left__            }_            if (DataTypes.isInterval(right)) {_                return left__            }_        }_        if (right == DATETIME) {_            if (left == DATE) {_                return right__            }_            if (DataTypes.isInterval(left)) {_                return right__            }_        }_        if (DataTypes.isInterval(left)) {_            _            if (DataTypes.isInterval(right)) {_                _                return DataTypes.compatibleInterval(left, right)__            }_        }__        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,if,left,date,if,data,types,is,interval,right,return,left,if,right,date,if,data,types,is,interval,left,return,right,if,left,datetime,if,right,date,return,left,if,data,types,is,interval,right,return,left,if,right,datetime,if,left,date,return,right,if,data,types,is,interval,left,return,right,if,data,types,is,interval,left,if,data,types,is,interval,right,return,data,types,compatible,interval,left,right,return,null
DataTypeConversion -> public static DataType commonType(DataType left, DataType right);1549659351;Returns the type compatible with both left and right types_<p>_If one of the types is null - returns another type_If both types are numeric - returns type with the highest precision int &lt_ long &lt_ float &lt_ double_If one of the types is string and another numeric - returns numeric;public static DataType commonType(DataType left, DataType right) {_        if (left == right) {_            return left__        }_        if (DataTypes.isNull(left)) {_            return right__        }_        if (DataTypes.isNull(right)) {_            return left__        }_        if (left.isNumeric() && right.isNumeric()) {_            _            if (left.isInteger()) {_                _                if (right.isInteger()) {_                    return left.size > right.size ? left : right__                }_                _                return right__            }_            _            if (right.isInteger()) {_                return left__            }_            _            return left.size > right.size ? left : right__        }_        if (left.isString()) {_            if (right.isNumeric()) {_                return right__            }_        }_        if (right.isString()) {_            if (left.isNumeric()) {_                return left__            }_        }__        _        if (left == DATE) {_            if (DataTypes.isInterval(right)) {_                return left__            }_        }_        if (right == DATE) {_            if (DataTypes.isInterval(left)) {_                return right__            }_        }_        if (left == DATETIME) {_            if (right == DATE) {_                return left__            }_            if (DataTypes.isInterval(right)) {_                return left__            }_        }_        if (right == DATETIME) {_            if (left == DATE) {_                return right__            }_            if (DataTypes.isInterval(left)) {_                return right__            }_        }_        if (DataTypes.isInterval(left)) {_            _            if (DataTypes.isInterval(right)) {_                _                return DataTypes.compatibleInterval(left, right)__            }_        }__        _        return null__    };returns,the,type,compatible,with,both,left,and,right,types,p,if,one,of,the,types,is,null,returns,another,type,if,both,types,are,numeric,returns,type,with,the,highest,precision,int,lt,long,lt,float,lt,double,if,one,of,the,types,is,string,and,another,numeric,returns,numeric;public,static,data,type,common,type,data,type,left,data,type,right,if,left,right,return,left,if,data,types,is,null,left,return,right,if,data,types,is,null,right,return,left,if,left,is,numeric,right,is,numeric,if,left,is,integer,if,right,is,integer,return,left,size,right,size,left,right,return,right,if,right,is,integer,return,left,return,left,size,right,size,left,right,if,left,is,string,if,right,is,numeric,return,right,if,right,is,string,if,left,is,numeric,return,left,if,left,date,if,data,types,is,interval,right,return,left,if,right,date,if,data,types,is,interval,left,return,right,if,left,datetime,if,right,date,return,left,if,data,types,is,interval,right,return,left,if,right,datetime,if,left,date,return,right,if,data,types,is,interval,left,return,right,if,data,types,is,interval,left,if,data,types,is,interval,right,return,data,types,compatible,interval,left,right,return,null
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1524684173;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1526029249;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1531179852;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1540847035;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1541092382;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1541502744;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1542461427;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1542807959;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1547713078;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1548330118;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1548451750;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
DataTypeConversion -> public static Object convert(Object value, DataType dataType);1549659351;Converts arbitrary object to the desired data type._<p>_Throws SqlIllegalArgumentException if such conversion is not possible;public static Object convert(Object value, DataType dataType) {_        DataType detectedType = DataTypes.fromJava(value)__        if (detectedType == dataType || value == null) {_            return value__        }_        return conversionFor(detectedType, dataType).convert(value)__    };converts,arbitrary,object,to,the,desired,data,type,p,throws,sql,illegal,argument,exception,if,such,conversion,is,not,possible;public,static,object,convert,object,value,data,type,data,type,data,type,detected,type,data,types,from,java,value,if,detected,type,data,type,value,null,return,value,return,conversion,for,detected,type,data,type,convert,value
