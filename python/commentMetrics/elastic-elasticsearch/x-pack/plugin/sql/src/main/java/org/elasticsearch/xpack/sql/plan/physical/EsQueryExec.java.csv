commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<EsQueryExec> info() {     return NodeInfo.create(this, EsQueryExec::new, index, output, queryContainer). }
false;public;1;3;;public EsQueryExec with(QueryContainer queryContainer) {     return new EsQueryExec(source(), index, output, queryContainer). }
false;public;0;3;;public String index() {     return index. }
false;public;0;3;;public QueryContainer queryContainer() {     return queryContainer. }
false;public;0;4;;@Override public List<Attribute> output() {     return output. }
false;public;2;6;;@Override public void execute(SqlSession session, ActionListener<SchemaRowSet> listener) {     Querier scroller = new Querier(session).     scroller.query(output, queryContainer, index, listener). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(index, queryContainer, output). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     EsQueryExec other = (EsQueryExec) obj.     return Objects.equals(index, other.index) && Objects.equals(queryContainer, other.queryContainer) && Objects.equals(output, other.output). }
false;public;0;4;;@Override public String nodeString() {     return nodeName() + "[" + index + "," + queryContainer + "]". }
