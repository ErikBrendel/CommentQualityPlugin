commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(scrollId).     out.writeVInt(limit).     out.writeNamedWriteableList(extractors).     out.writeByteArray(mask.toByteArray()). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;;0;3;;String scrollId() {     return scrollId. }
false;;0;3;;BitSet mask() {     return mask. }
false;;0;3;;List<HitExtractor> extractors() {     return extractors. }
false;;0;3;;int limit() {     return limit. }
false;public;4;16;;@Override public void nextPage(Configuration cfg, Client client, NamedWriteableRegistry registry, ActionListener<RowSet> listener) {     log.trace("About to execute scroll query {}", scrollId).     SearchScrollRequest request = new SearchScrollRequest(scrollId).scroll(cfg.pageTimeout()).     client.searchScroll(request, ActionListener.wrap((SearchResponse response) -> {         SearchHitRowSet rowSet = new SearchHitRowSet(extractors, mask, response.getHits().getHits(), limit, response.getScrollId()).         if (rowSet.nextPageCursor() == Cursor.EMPTY) {             // we are finished with this cursor, let's clean it before continuing             clear(cfg, client, ActionListener.wrap(success -> listener.onResponse(rowSet), listener::onFailure)).         } else {             listener.onResponse(rowSet).         }     }, listener::onFailure)). }
false;public;3;7;;@Override public void clear(Configuration cfg, Client client, ActionListener<Boolean> listener) {     cleanCursor(client, scrollId, ActionListener.wrap(clearScrollResponse -> listener.onResponse(clearScrollResponse.isSucceeded()), listener::onFailure)). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     ScrollCursor other = (ScrollCursor) obj.     return Objects.equals(scrollId, other.scrollId) && Objects.equals(extractors, other.extractors) && Objects.equals(limit, other.limit). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(scrollId, extractors, limit). }
false;public;0;4;;@Override public String toString() {     return "cursor for scroll [" + scrollId + "]". }
false;public,static;3;5;;public static void cleanCursor(Client client, String scrollId, ActionListener<ClearScrollResponse> listener) {     ClearScrollRequest clearScrollRequest = new ClearScrollRequest().     clearScrollRequest.addScrollId(scrollId).     client.clearScroll(clearScrollRequest, listener). }
