commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String symbol() {     return symbol. }
false;public;2;4;;@Override public Boolean apply(Boolean left, Boolean right) {     return process.apply(left, right). }
false;public,final;2;4;;@Override public final Boolean doApply(Boolean left, Boolean right) {     return null. }
false;public;0;4;;@Override public String toString() {     return symbol. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;protected;1;6;;@Override protected void checkParameter(Object param) {     if (param != null && !(param instanceof Boolean)) {         throw new SqlIllegalArgumentException("A boolean is required. received {}", param).     } }
false;public;1;9;;@Override public Object process(Object input) {     Object l = left().process(input).     checkParameter(l).     Object r = right().process(input).     checkParameter(r).     return doProcess(l, r). }
