# id;timestamp;commentText;codeText;commentWords;codeWords
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1524684173;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key = null___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,null,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1524839522;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key = null___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,null,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1531729807;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key = null___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,null,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1538170812;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key = null___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,null,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1540238977;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key = null___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,null,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1540313026;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1540583181;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1541092382;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1541452987;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1541502744;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1541759558;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1542015747;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1543237322;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            String aggId__            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }_                aggId = ne.id().toString()___                GroupByKey key___                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateKey(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByScriptKey(aggId, nameOf(exp), sf.asScript())__                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByColumnKey(aggId, ne.name())__                }__                aggMap.put(ne.id(), key)__            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }_        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,agg,id,ne,id,to,string,group,by,key,key,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,key,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,script,key,agg,id,name,of,exp,sf,as,script,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,column,key,agg,id,ne,name,agg,map,put,ne,id,key,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1544804437;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.timeZone())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType() == DataType.DATE) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())__                                _                                if (field instanceof FieldAttribute || field instanceof DateTimeHistogramFunction) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.timeZone())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.timeZone())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute || field instanceof DateTimeHistogramFunction) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,time,zone,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,data,type,date,long,interval,as,millis,intervals,in,millis,h,interval,if,field,instanceof,field,attribute,field,instanceof,date,time,histogram,function,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,time,zone,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,time,zone,else,if,field,instanceof,field,attribute,field,instanceof,date,time,histogram,function,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1545047744;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.zoneId())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType() == DataType.DATE) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())__                                _                                if (field instanceof FieldAttribute || field instanceof DateTimeHistogramFunction) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.zoneId())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.zoneId())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute || field instanceof DateTimeHistogramFunction) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,zone,id,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,data,type,date,long,interval,as,millis,intervals,in,millis,h,interval,if,field,instanceof,field,attribute,field,instanceof,date,time,histogram,function,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,zone,id,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,zone,id,else,if,field,instanceof,field,attribute,field,instanceof,date,time,histogram,function,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1545065886;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.zoneId())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType() == DataType.DATE) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())__                                _                                if (field instanceof FieldAttribute || field instanceof DateTimeHistogramFunction) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.zoneId())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.zoneId())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute || field instanceof DateTimeHistogramFunction) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,zone,id,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,data,type,date,long,interval,as,millis,intervals,in,millis,h,interval,if,field,instanceof,field,attribute,field,instanceof,date,time,histogram,function,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,zone,id,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,zone,id,else,if,field,instanceof,field,attribute,field,instanceof,date,time,histogram,function,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1545340316;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.zoneId())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType() == DataType.DATE) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())__                                _                                if (field instanceof FieldAttribute) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.zoneId())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.zoneId())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,zone,id,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,data,type,date,long,interval,as,millis,intervals,in,millis,h,interval,if,field,instanceof,field,attribute,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,zone,id,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,zone,id,else,if,field,instanceof,field,attribute,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1546556270;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.zoneId())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType() == DataType.DATE) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())__                                _                                if (field instanceof FieldAttribute) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.zoneId())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.zoneId())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,zone,id,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,data,type,date,long,interval,as,millis,intervals,in,millis,h,interval,if,field,instanceof,field,attribute,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,zone,id,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,zone,id,else,if,field,instanceof,field,attribute,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1546930055;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.zoneId())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType() == DataType.DATE) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())__                                _                                if (field instanceof FieldAttribute) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.zoneId())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.zoneId())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,zone,id,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,data,type,date,long,interval,as,millis,intervals,in,millis,h,interval,if,field,instanceof,field,attribute,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,zone,id,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,zone,id,else,if,field,instanceof,field,attribute,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1547106711;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.zoneId())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType() == DataType.DATE) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())__                                _                                if (field instanceof FieldAttribute) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.zoneId())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.zoneId())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,zone,id,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,data,type,date,long,interval,as,millis,intervals,in,millis,h,interval,if,field,instanceof,field,attribute,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,zone,id,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,zone,id,else,if,field,instanceof,field,attribute,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1547713078;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.zoneId())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType() == DataType.DATETIME) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())__                                _                                if (field instanceof FieldAttribute) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.zoneId())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.zoneId())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,zone,id,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,data,type,datetime,long,interval,as,millis,intervals,in,millis,h,interval,if,field,instanceof,field,attribute,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,zone,id,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,zone,id,else,if,field,instanceof,field,attribute,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1548330118;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.zoneId())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType().isDateBased()) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())___                                _                                _                                _                                if (h.dataType() == DATE) {_                                    intervalAsMillis = DateUtils.minDayInterval(intervalAsMillis)__                                }_                                _                                if (field instanceof FieldAttribute) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.zoneId())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.zoneId())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,zone,id,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,is,date,based,long,interval,as,millis,intervals,in,millis,h,interval,if,h,data,type,date,interval,as,millis,date,utils,min,day,interval,interval,as,millis,if,field,instanceof,field,attribute,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,zone,id,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,zone,id,else,if,field,instanceof,field,attribute,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1548945185;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.zoneId())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType().isDateBased()) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())___                                _                                _                                _                                if (h.dataType() == DATE) {_                                    intervalAsMillis = DateUtils.minDayInterval(intervalAsMillis)__                                }_                                _                                if (field instanceof FieldAttribute) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.zoneId())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.zoneId())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,zone,id,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,is,date,based,long,interval,as,millis,intervals,in,millis,h,interval,if,h,data,type,date,interval,as,millis,date,utils,min,day,interval,interval,as,millis,if,field,instanceof,field,attribute,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,zone,id,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,zone,id,else,if,field,instanceof,field,attribute,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1549462761;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.zoneId())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType().isDateBased()) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())___                                _                                _                                _                                if (h.dataType() == DATE) {_                                    intervalAsMillis = DateUtils.minDayInterval(intervalAsMillis)__                                }_                                _                                if (field instanceof FieldAttribute) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.zoneId())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.zoneId())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,zone,id,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,is,date,based,long,interval,as,millis,intervals,in,millis,h,interval,if,h,data,type,date,interval,as,millis,date,utils,min,day,interval,interval,as,millis,if,field,instanceof,field,attribute,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,zone,id,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,zone,id,else,if,field,instanceof,field,attribute,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
QueryTranslator -> static GroupingContext groupBy(List<? extends Expression> groupings);1551275139;Creates the list of GroupBy keys;static GroupingContext groupBy(List<? extends Expression> groupings) {_        if (groupings.isEmpty()) {_            return null__        }__        Map<ExpressionId, GroupByKey> aggMap = new LinkedHashMap<>()___        for (Expression exp : groupings) {_            GroupByKey key = null__            ExpressionId id__            String aggId___            if (exp instanceof NamedExpression) {_                NamedExpression ne = (NamedExpression) exp___                id = ne.id()__                aggId = id.toString()___                _                if (exp instanceof FieldAttribute) {_                    FieldAttribute fa = (FieldAttribute) exp__                    if (fa.isInexact()) {_                        ne = fa.exactAttribute()__                    }_                }__                _                if (exp instanceof Function) {_                    _                    if (exp instanceof DateTimeHistogramFunction) {_                        DateTimeHistogramFunction dthf = (DateTimeHistogramFunction) exp__                        key = new GroupByDateHistogram(aggId, nameOf(exp), dthf.interval(), dthf.zoneId())__                    }_                    _                    else if (exp instanceof ScalarFunction) {_                        ScalarFunction sf = (ScalarFunction) exp__                        key = new GroupByValue(aggId, sf.asScript())__                    }_                    _                    else if (exp instanceof GroupingFunction) {_                        if (exp instanceof Histogram) {_                            Histogram h = (Histogram) exp__                            Expression field = h.field()___                            _                            if (h.dataType().isDateBased()) {_                                long intervalAsMillis = Intervals.inMillis(h.interval())___                                _                                _                                _                                if (h.dataType() == DATE) {_                                    intervalAsMillis = DateUtils.minDayInterval(intervalAsMillis)__                                }_                                _                                if (field instanceof FieldAttribute) {_                                    key = new GroupByDateHistogram(aggId, nameOf(field), intervalAsMillis, h.zoneId())__                                } else if (field instanceof Function) {_                                    key = new GroupByDateHistogram(aggId, ((Function) field).asScript(), intervalAsMillis, h.zoneId())__                                }_                            }_                            _                            else {_                                if (field instanceof FieldAttribute) {_                                    key = new GroupByNumericHistogram(aggId, nameOf(field), Foldables.doubleValueOf(h.interval()))__                                } else if (field instanceof Function) {_                                    key = new GroupByNumericHistogram(aggId, ((Function) field).asScript(),_                                            Foldables.doubleValueOf(h.interval()))__                                }_                            }_                            if (key == null) {_                                throw new SqlIllegalArgumentException("Unsupported histogram field {}", field)__                            }_                        }_                        else {_                            throw new SqlIllegalArgumentException("Unsupproted grouping function {}", exp)__                        }_                    }_                    _                    else {_                        throw new SqlIllegalArgumentException("Cannot GROUP BY function {}", exp)__                    }_                }_                else {_                    key = new GroupByValue(aggId, ne.name())__                }_            }_            else {_                throw new SqlIllegalArgumentException("Don't know how to group on {}", exp.nodeString())__            }__            aggMap.put(id, key)__        }_        return new GroupingContext(aggMap)__    };creates,the,list,of,group,by,keys;static,grouping,context,group,by,list,extends,expression,groupings,if,groupings,is,empty,return,null,map,expression,id,group,by,key,agg,map,new,linked,hash,map,for,expression,exp,groupings,group,by,key,key,null,expression,id,id,string,agg,id,if,exp,instanceof,named,expression,named,expression,ne,named,expression,exp,id,ne,id,agg,id,id,to,string,if,exp,instanceof,field,attribute,field,attribute,fa,field,attribute,exp,if,fa,is,inexact,ne,fa,exact,attribute,if,exp,instanceof,function,if,exp,instanceof,date,time,histogram,function,date,time,histogram,function,dthf,date,time,histogram,function,exp,key,new,group,by,date,histogram,agg,id,name,of,exp,dthf,interval,dthf,zone,id,else,if,exp,instanceof,scalar,function,scalar,function,sf,scalar,function,exp,key,new,group,by,value,agg,id,sf,as,script,else,if,exp,instanceof,grouping,function,if,exp,instanceof,histogram,histogram,h,histogram,exp,expression,field,h,field,if,h,data,type,is,date,based,long,interval,as,millis,intervals,in,millis,h,interval,if,h,data,type,date,interval,as,millis,date,utils,min,day,interval,interval,as,millis,if,field,instanceof,field,attribute,key,new,group,by,date,histogram,agg,id,name,of,field,interval,as,millis,h,zone,id,else,if,field,instanceof,function,key,new,group,by,date,histogram,agg,id,function,field,as,script,interval,as,millis,h,zone,id,else,if,field,instanceof,field,attribute,key,new,group,by,numeric,histogram,agg,id,name,of,field,foldables,double,value,of,h,interval,else,if,field,instanceof,function,key,new,group,by,numeric,histogram,agg,id,function,field,as,script,foldables,double,value,of,h,interval,if,key,null,throw,new,sql,illegal,argument,exception,unsupported,histogram,field,field,else,throw,new,sql,illegal,argument,exception,unsupproted,grouping,function,exp,else,throw,new,sql,illegal,argument,exception,cannot,group,by,function,exp,else,key,new,group,by,value,agg,id,ne,name,else,throw,new,sql,illegal,argument,exception,don,t,know,how,to,group,on,exp,node,string,agg,map,put,id,key,return,new,grouping,context,agg,map
