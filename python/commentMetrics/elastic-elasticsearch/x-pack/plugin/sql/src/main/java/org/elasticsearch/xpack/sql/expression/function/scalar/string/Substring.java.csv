commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;18;;@Override protected TypeResolution resolveType() {     if (!childrenResolved()) {         return new TypeResolution("Unresolved children").     }     TypeResolution sourceResolution = isStringAndExact(source, sourceText(), ParamOrdinal.FIRST).     if (sourceResolution.unresolved()) {         return sourceResolution.     }     TypeResolution startResolution = isInteger(start, sourceText(), ParamOrdinal.SECOND).     if (startResolution.unresolved()) {         return startResolution.     }     return isInteger(length, sourceText(), ParamOrdinal.THIRD). }
false;protected;0;7;;@Override protected Pipe makePipe() {     return new SubstringFunctionPipe(source(), this, Expressions.pipe(source), Expressions.pipe(start), Expressions.pipe(length)). }
false;public;0;4;;@Override public boolean foldable() {     return source.foldable() && start.foldable() && length.foldable(). }
false;public;0;4;;@Override public Object fold() {     return doProcess(source.fold(), start.fold(), length.fold()). }
false;protected;0;4;;@Override protected NodeInfo<? extends Expression> info() {     return NodeInfo.create(this, Substring::new, source, start, length). }
false;public;0;8;;@Override public ScriptTemplate asScript() {     ScriptTemplate sourceScript = asScript(source).     ScriptTemplate startScript = asScript(start).     ScriptTemplate lengthScript = asScript(length).     return asScriptFrom(sourceScript, startScript, lengthScript). }
false;protected;3;13;;protected ScriptTemplate asScriptFrom(ScriptTemplate sourceScript, ScriptTemplate startScript, ScriptTemplate lengthScript) {     // basically, transform the script to InternalSqlScriptUtils.[function_name](function_or_field1, function_or_field2,...)     return new ScriptTemplate(format(Locale.ROOT, formatTemplate("{sql}.%s(%s,%s,%s)"), "substring", sourceScript.template(), startScript.template(), lengthScript.template()), paramsBuilder().script(sourceScript.params()).script(startScript.params()).script(lengthScript.params()).build(), dataType()). }
false;public;1;6;;@Override public ScriptTemplate scriptWithField(FieldAttribute field) {     return new ScriptTemplate(processScript("doc[{}].value"), paramsBuilder().variable(field.exactAttribute().name()).build(), dataType()). }
false;public;0;4;;@Override public DataType dataType() {     return DataType.KEYWORD. }
false;public;1;8;;@Override public Expression replaceChildren(List<Expression> newChildren) {     if (newChildren.size() != 3) {         throw new IllegalArgumentException("expected [3] children but received [" + newChildren.size() + "]").     }     return new Substring(source(), newChildren.get(0), newChildren.get(1), newChildren.get(2)). }
