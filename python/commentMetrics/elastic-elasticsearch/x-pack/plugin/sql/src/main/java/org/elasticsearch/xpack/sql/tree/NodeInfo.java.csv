commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Values for all properties on the instance that created  * this {@linkplain NodeInfo}.  */ ;/**  * Values for all properties on the instance that created  * this {@linkplain NodeInfo}.  */ public final List<Object> properties() {     return unmodifiableList(innerProperties()). }
false;protected,abstract;0;1;;protected abstract List<Object> innerProperties().
true;final;2;12;/**  * Transform the properties on {@code node}, returning a new instance  * of {@code N} if any properties change.  */ ;/**  * Transform the properties on {@code node}, returning a new instance  * of {@code N} if any properties change.  */ final <E> T transform(Function<? super E, ? extends E> rule, Class<E> typeToken) {     List<?> children = node.children().     Function<Object, Object> realRule = p -> {         if (p != children && false == children.contains(p) && (p == null || typeToken.isInstance(p))) {             return rule.apply(typeToken.cast(p)).         }         return p.     }.     return innerTransform(realRule). }
false;protected,abstract;1;1;;protected abstract T innerTransform(Function<Object, Object> rule).
false;protected;0;4;;@Override protected List<Object> innerProperties() {     return emptyList(). }
false;protected;1;3;;protected T innerTransform(Function<Object, Object> rule) {     return node. }
true;public,static;1;12;/**  * Builds a {@link NodeInfo} for Nodes without any properties.  */ ;/**  * Builds a {@link NodeInfo} for Nodes without any properties.  */ public static <T extends Node<?>> NodeInfo<T> create(T n) {     return new NodeInfo<T>(n) {          @Override         protected List<Object> innerProperties() {             return emptyList().         }          protected T innerTransform(Function<Object, Object> rule) {             return node.         }     }. }
false;protected;0;4;;@Override protected List<Object> innerProperties() {     return Arrays.asList(p1). }
false;protected;1;9;;protected T innerTransform(Function<Object, Object> rule) {     boolean same = true.     @SuppressWarnings("unchecked")     P1 newP1 = (P1) rule.apply(p1).     same &= Objects.equals(p1, newP1).     return same ? node : ctor.apply(node.source(), newP1). }
false;public,static;3;20;;public static <T extends Node<?>, P1> NodeInfo<T> create(T n, BiFunction<Source, P1, T> ctor, P1 p1) {     return new NodeInfo<T>(n) {          @Override         protected List<Object> innerProperties() {             return Arrays.asList(p1).         }          protected T innerTransform(Function<Object, Object> rule) {             boolean same = true.             @SuppressWarnings("unchecked")             P1 newP1 = (P1) rule.apply(p1).             same &= Objects.equals(p1, newP1).             return same ? node : ctor.apply(node.source(), newP1).         }     }. }
false;protected;0;4;;@Override protected List<Object> innerProperties() {     return Arrays.asList(p1, p2). }
false;protected;1;12;;protected T innerTransform(Function<Object, Object> rule) {     boolean same = true.     @SuppressWarnings("unchecked")     P1 newP1 = (P1) rule.apply(p1).     same &= Objects.equals(p1, newP1).     @SuppressWarnings("unchecked")     P2 newP2 = (P2) rule.apply(p2).     same &= Objects.equals(p2, newP2).     return same ? node : ctor.apply(node.source(), newP1, newP2). }
false;public,static;4;23;;public static <T extends Node<?>, P1, P2> NodeInfo<T> create(T n, NodeCtor2<P1, P2, T> ctor, P1 p1, P2 p2) {     return new NodeInfo<T>(n) {          @Override         protected List<Object> innerProperties() {             return Arrays.asList(p1, p2).         }          protected T innerTransform(Function<Object, Object> rule) {             boolean same = true.             @SuppressWarnings("unchecked")             P1 newP1 = (P1) rule.apply(p1).             same &= Objects.equals(p1, newP1).             @SuppressWarnings("unchecked")             P2 newP2 = (P2) rule.apply(p2).             same &= Objects.equals(p2, newP2).             return same ? node : ctor.apply(node.source(), newP1, newP2).         }     }. }
false;;3;1;;T apply(Source l, P1 p1, P2 p2).
false;protected;0;4;;@Override protected List<Object> innerProperties() {     return Arrays.asList(p1, p2, p3). }
false;protected;1;15;;protected T innerTransform(Function<Object, Object> rule) {     boolean same = true.     @SuppressWarnings("unchecked")     P1 newP1 = (P1) rule.apply(p1).     same &= Objects.equals(p1, newP1).     @SuppressWarnings("unchecked")     P2 newP2 = (P2) rule.apply(p2).     same &= Objects.equals(p2, newP2).     @SuppressWarnings("unchecked")     P3 newP3 = (P3) rule.apply(p3).     same &= Objects.equals(p3, newP3).     return same ? node : ctor.apply(node.source(), newP1, newP2, newP3). }
false;public,static;5;26;;public static <T extends Node<?>, P1, P2, P3> NodeInfo<T> create(T n, NodeCtor3<P1, P2, P3, T> ctor, P1 p1, P2 p2, P3 p3) {     return new NodeInfo<T>(n) {          @Override         protected List<Object> innerProperties() {             return Arrays.asList(p1, p2, p3).         }          protected T innerTransform(Function<Object, Object> rule) {             boolean same = true.             @SuppressWarnings("unchecked")             P1 newP1 = (P1) rule.apply(p1).             same &= Objects.equals(p1, newP1).             @SuppressWarnings("unchecked")             P2 newP2 = (P2) rule.apply(p2).             same &= Objects.equals(p2, newP2).             @SuppressWarnings("unchecked")             P3 newP3 = (P3) rule.apply(p3).             same &= Objects.equals(p3, newP3).             return same ? node : ctor.apply(node.source(), newP1, newP2, newP3).         }     }. }
false;;4;1;;T apply(Source l, P1 p1, P2 p2, P3 p3).
false;protected;0;4;;@Override protected List<Object> innerProperties() {     return Arrays.asList(p1, p2, p3, p4). }
false;protected;1;18;;protected T innerTransform(Function<Object, Object> rule) {     boolean same = true.     @SuppressWarnings("unchecked")     P1 newP1 = (P1) rule.apply(p1).     same &= Objects.equals(p1, newP1).     @SuppressWarnings("unchecked")     P2 newP2 = (P2) rule.apply(p2).     same &= Objects.equals(p2, newP2).     @SuppressWarnings("unchecked")     P3 newP3 = (P3) rule.apply(p3).     same &= Objects.equals(p3, newP3).     @SuppressWarnings("unchecked")     P4 newP4 = (P4) rule.apply(p4).     same &= Objects.equals(p4, newP4).     return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4). }
false;public,static;6;29;;public static <T extends Node<?>, P1, P2, P3, P4> NodeInfo<T> create(T n, NodeCtor4<P1, P2, P3, P4, T> ctor, P1 p1, P2 p2, P3 p3, P4 p4) {     return new NodeInfo<T>(n) {          @Override         protected List<Object> innerProperties() {             return Arrays.asList(p1, p2, p3, p4).         }          protected T innerTransform(Function<Object, Object> rule) {             boolean same = true.             @SuppressWarnings("unchecked")             P1 newP1 = (P1) rule.apply(p1).             same &= Objects.equals(p1, newP1).             @SuppressWarnings("unchecked")             P2 newP2 = (P2) rule.apply(p2).             same &= Objects.equals(p2, newP2).             @SuppressWarnings("unchecked")             P3 newP3 = (P3) rule.apply(p3).             same &= Objects.equals(p3, newP3).             @SuppressWarnings("unchecked")             P4 newP4 = (P4) rule.apply(p4).             same &= Objects.equals(p4, newP4).             return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4).         }     }. }
false;;5;1;;T apply(Source l, P1 p1, P2 p2, P3 p3, P4 p4).
false;protected;0;4;;@Override protected List<Object> innerProperties() {     return Arrays.asList(p1, p2, p3, p4, p5). }
false;protected;1;21;;protected T innerTransform(Function<Object, Object> rule) {     boolean same = true.     @SuppressWarnings("unchecked")     P1 newP1 = (P1) rule.apply(p1).     same &= Objects.equals(p1, newP1).     @SuppressWarnings("unchecked")     P2 newP2 = (P2) rule.apply(p2).     same &= Objects.equals(p2, newP2).     @SuppressWarnings("unchecked")     P3 newP3 = (P3) rule.apply(p3).     same &= Objects.equals(p3, newP3).     @SuppressWarnings("unchecked")     P4 newP4 = (P4) rule.apply(p4).     same &= Objects.equals(p4, newP4).     @SuppressWarnings("unchecked")     P5 newP5 = (P5) rule.apply(p5).     same &= Objects.equals(p5, newP5).     return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5). }
false;public,static;7;32;;public static <T extends Node<?>, P1, P2, P3, P4, P5> NodeInfo<T> create(T n, NodeCtor5<P1, P2, P3, P4, P5, T> ctor, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5) {     return new NodeInfo<T>(n) {          @Override         protected List<Object> innerProperties() {             return Arrays.asList(p1, p2, p3, p4, p5).         }          protected T innerTransform(Function<Object, Object> rule) {             boolean same = true.             @SuppressWarnings("unchecked")             P1 newP1 = (P1) rule.apply(p1).             same &= Objects.equals(p1, newP1).             @SuppressWarnings("unchecked")             P2 newP2 = (P2) rule.apply(p2).             same &= Objects.equals(p2, newP2).             @SuppressWarnings("unchecked")             P3 newP3 = (P3) rule.apply(p3).             same &= Objects.equals(p3, newP3).             @SuppressWarnings("unchecked")             P4 newP4 = (P4) rule.apply(p4).             same &= Objects.equals(p4, newP4).             @SuppressWarnings("unchecked")             P5 newP5 = (P5) rule.apply(p5).             same &= Objects.equals(p5, newP5).             return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5).         }     }. }
false;;6;1;;T apply(Source l, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5).
false;protected;0;4;;@Override protected List<Object> innerProperties() {     return Arrays.asList(p1, p2, p3, p4, p5, p6). }
false;protected;1;24;;protected T innerTransform(Function<Object, Object> rule) {     boolean same = true.     @SuppressWarnings("unchecked")     P1 newP1 = (P1) rule.apply(p1).     same &= Objects.equals(p1, newP1).     @SuppressWarnings("unchecked")     P2 newP2 = (P2) rule.apply(p2).     same &= Objects.equals(p2, newP2).     @SuppressWarnings("unchecked")     P3 newP3 = (P3) rule.apply(p3).     same &= Objects.equals(p3, newP3).     @SuppressWarnings("unchecked")     P4 newP4 = (P4) rule.apply(p4).     same &= Objects.equals(p4, newP4).     @SuppressWarnings("unchecked")     P5 newP5 = (P5) rule.apply(p5).     same &= Objects.equals(p5, newP5).     @SuppressWarnings("unchecked")     P6 newP6 = (P6) rule.apply(p6).     same &= Objects.equals(p6, newP6).     return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5, newP6). }
false;public,static;8;35;;public static <T extends Node<?>, P1, P2, P3, P4, P5, P6> NodeInfo<T> create(T n, NodeCtor6<P1, P2, P3, P4, P5, P6, T> ctor, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6) {     return new NodeInfo<T>(n) {          @Override         protected List<Object> innerProperties() {             return Arrays.asList(p1, p2, p3, p4, p5, p6).         }          protected T innerTransform(Function<Object, Object> rule) {             boolean same = true.             @SuppressWarnings("unchecked")             P1 newP1 = (P1) rule.apply(p1).             same &= Objects.equals(p1, newP1).             @SuppressWarnings("unchecked")             P2 newP2 = (P2) rule.apply(p2).             same &= Objects.equals(p2, newP2).             @SuppressWarnings("unchecked")             P3 newP3 = (P3) rule.apply(p3).             same &= Objects.equals(p3, newP3).             @SuppressWarnings("unchecked")             P4 newP4 = (P4) rule.apply(p4).             same &= Objects.equals(p4, newP4).             @SuppressWarnings("unchecked")             P5 newP5 = (P5) rule.apply(p5).             same &= Objects.equals(p5, newP5).             @SuppressWarnings("unchecked")             P6 newP6 = (P6) rule.apply(p6).             same &= Objects.equals(p6, newP6).             return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5, newP6).         }     }. }
false;;7;1;;T apply(Source l, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6).
false;protected;0;4;;@Override protected List<Object> innerProperties() {     return Arrays.asList(p1, p2, p3, p4, p5, p6, p7). }
false;protected;1;27;;protected T innerTransform(Function<Object, Object> rule) {     boolean same = true.     @SuppressWarnings("unchecked")     P1 newP1 = (P1) rule.apply(p1).     same &= Objects.equals(p1, newP1).     @SuppressWarnings("unchecked")     P2 newP2 = (P2) rule.apply(p2).     same &= Objects.equals(p2, newP2).     @SuppressWarnings("unchecked")     P3 newP3 = (P3) rule.apply(p3).     same &= Objects.equals(p3, newP3).     @SuppressWarnings("unchecked")     P4 newP4 = (P4) rule.apply(p4).     same &= Objects.equals(p4, newP4).     @SuppressWarnings("unchecked")     P5 newP5 = (P5) rule.apply(p5).     same &= Objects.equals(p5, newP5).     @SuppressWarnings("unchecked")     P6 newP6 = (P6) rule.apply(p6).     same &= Objects.equals(p6, newP6).     @SuppressWarnings("unchecked")     P7 newP7 = (P7) rule.apply(p7).     same &= Objects.equals(p7, newP7).     return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5, newP6, newP7). }
false;public,static;9;38;;public static <T extends Node<?>, P1, P2, P3, P4, P5, P6, P7> NodeInfo<T> create(T n, NodeCtor7<P1, P2, P3, P4, P5, P6, P7, T> ctor, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7) {     return new NodeInfo<T>(n) {          @Override         protected List<Object> innerProperties() {             return Arrays.asList(p1, p2, p3, p4, p5, p6, p7).         }          protected T innerTransform(Function<Object, Object> rule) {             boolean same = true.             @SuppressWarnings("unchecked")             P1 newP1 = (P1) rule.apply(p1).             same &= Objects.equals(p1, newP1).             @SuppressWarnings("unchecked")             P2 newP2 = (P2) rule.apply(p2).             same &= Objects.equals(p2, newP2).             @SuppressWarnings("unchecked")             P3 newP3 = (P3) rule.apply(p3).             same &= Objects.equals(p3, newP3).             @SuppressWarnings("unchecked")             P4 newP4 = (P4) rule.apply(p4).             same &= Objects.equals(p4, newP4).             @SuppressWarnings("unchecked")             P5 newP5 = (P5) rule.apply(p5).             same &= Objects.equals(p5, newP5).             @SuppressWarnings("unchecked")             P6 newP6 = (P6) rule.apply(p6).             same &= Objects.equals(p6, newP6).             @SuppressWarnings("unchecked")             P7 newP7 = (P7) rule.apply(p7).             same &= Objects.equals(p7, newP7).             return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5, newP6, newP7).         }     }. }
false;;8;1;;T apply(Source l, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7).
false;protected;0;4;;@Override protected List<Object> innerProperties() {     return Arrays.asList(p1, p2, p3, p4, p5, p6, p7, p8). }
false;protected;1;30;;protected T innerTransform(Function<Object, Object> rule) {     boolean same = true.     @SuppressWarnings("unchecked")     P1 newP1 = (P1) rule.apply(p1).     same &= Objects.equals(p1, newP1).     @SuppressWarnings("unchecked")     P2 newP2 = (P2) rule.apply(p2).     same &= Objects.equals(p2, newP2).     @SuppressWarnings("unchecked")     P3 newP3 = (P3) rule.apply(p3).     same &= Objects.equals(p3, newP3).     @SuppressWarnings("unchecked")     P4 newP4 = (P4) rule.apply(p4).     same &= Objects.equals(p4, newP4).     @SuppressWarnings("unchecked")     P5 newP5 = (P5) rule.apply(p5).     same &= Objects.equals(p5, newP5).     @SuppressWarnings("unchecked")     P6 newP6 = (P6) rule.apply(p6).     same &= Objects.equals(p6, newP6).     @SuppressWarnings("unchecked")     P7 newP7 = (P7) rule.apply(p7).     same &= Objects.equals(p7, newP7).     @SuppressWarnings("unchecked")     P8 newP8 = (P8) rule.apply(p8).     same &= Objects.equals(p8, newP8).     return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5, newP6, newP7, newP8). }
false;public,static;10;41;;public static <T extends Node<?>, P1, P2, P3, P4, P5, P6, P7, P8> NodeInfo<T> create(T n, NodeCtor8<P1, P2, P3, P4, P5, P6, P7, P8, T> ctor, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8) {     return new NodeInfo<T>(n) {          @Override         protected List<Object> innerProperties() {             return Arrays.asList(p1, p2, p3, p4, p5, p6, p7, p8).         }          protected T innerTransform(Function<Object, Object> rule) {             boolean same = true.             @SuppressWarnings("unchecked")             P1 newP1 = (P1) rule.apply(p1).             same &= Objects.equals(p1, newP1).             @SuppressWarnings("unchecked")             P2 newP2 = (P2) rule.apply(p2).             same &= Objects.equals(p2, newP2).             @SuppressWarnings("unchecked")             P3 newP3 = (P3) rule.apply(p3).             same &= Objects.equals(p3, newP3).             @SuppressWarnings("unchecked")             P4 newP4 = (P4) rule.apply(p4).             same &= Objects.equals(p4, newP4).             @SuppressWarnings("unchecked")             P5 newP5 = (P5) rule.apply(p5).             same &= Objects.equals(p5, newP5).             @SuppressWarnings("unchecked")             P6 newP6 = (P6) rule.apply(p6).             same &= Objects.equals(p6, newP6).             @SuppressWarnings("unchecked")             P7 newP7 = (P7) rule.apply(p7).             same &= Objects.equals(p7, newP7).             @SuppressWarnings("unchecked")             P8 newP8 = (P8) rule.apply(p8).             same &= Objects.equals(p8, newP8).             return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5, newP6, newP7, newP8).         }     }. }
false;;9;1;;T apply(Source l, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8).
false;protected;0;4;;@Override protected List<Object> innerProperties() {     return Arrays.asList(p1, p2, p3, p4, p5, p6, p7, p8, p9). }
false;protected;1;33;;protected T innerTransform(Function<Object, Object> rule) {     boolean same = true.     @SuppressWarnings("unchecked")     P1 newP1 = (P1) rule.apply(p1).     same &= Objects.equals(p1, newP1).     @SuppressWarnings("unchecked")     P2 newP2 = (P2) rule.apply(p2).     same &= Objects.equals(p2, newP2).     @SuppressWarnings("unchecked")     P3 newP3 = (P3) rule.apply(p3).     same &= Objects.equals(p3, newP3).     @SuppressWarnings("unchecked")     P4 newP4 = (P4) rule.apply(p4).     same &= Objects.equals(p4, newP4).     @SuppressWarnings("unchecked")     P5 newP5 = (P5) rule.apply(p5).     same &= Objects.equals(p5, newP5).     @SuppressWarnings("unchecked")     P6 newP6 = (P6) rule.apply(p6).     same &= Objects.equals(p6, newP6).     @SuppressWarnings("unchecked")     P7 newP7 = (P7) rule.apply(p7).     same &= Objects.equals(p7, newP7).     @SuppressWarnings("unchecked")     P8 newP8 = (P8) rule.apply(p8).     same &= Objects.equals(p8, newP8).     @SuppressWarnings("unchecked")     P9 newP9 = (P9) rule.apply(p9).     same &= Objects.equals(p9, newP9).     return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5, newP6, newP7, newP8, newP9). }
false;public,static;11;44;;public static <T extends Node<?>, P1, P2, P3, P4, P5, P6, P7, P8, P9> NodeInfo<T> create(T n, NodeCtor9<P1, P2, P3, P4, P5, P6, P7, P8, P9, T> ctor, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8, P9 p9) {     return new NodeInfo<T>(n) {          @Override         protected List<Object> innerProperties() {             return Arrays.asList(p1, p2, p3, p4, p5, p6, p7, p8, p9).         }          protected T innerTransform(Function<Object, Object> rule) {             boolean same = true.             @SuppressWarnings("unchecked")             P1 newP1 = (P1) rule.apply(p1).             same &= Objects.equals(p1, newP1).             @SuppressWarnings("unchecked")             P2 newP2 = (P2) rule.apply(p2).             same &= Objects.equals(p2, newP2).             @SuppressWarnings("unchecked")             P3 newP3 = (P3) rule.apply(p3).             same &= Objects.equals(p3, newP3).             @SuppressWarnings("unchecked")             P4 newP4 = (P4) rule.apply(p4).             same &= Objects.equals(p4, newP4).             @SuppressWarnings("unchecked")             P5 newP5 = (P5) rule.apply(p5).             same &= Objects.equals(p5, newP5).             @SuppressWarnings("unchecked")             P6 newP6 = (P6) rule.apply(p6).             same &= Objects.equals(p6, newP6).             @SuppressWarnings("unchecked")             P7 newP7 = (P7) rule.apply(p7).             same &= Objects.equals(p7, newP7).             @SuppressWarnings("unchecked")             P8 newP8 = (P8) rule.apply(p8).             same &= Objects.equals(p8, newP8).             @SuppressWarnings("unchecked")             P9 newP9 = (P9) rule.apply(p9).             same &= Objects.equals(p9, newP9).             return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5, newP6, newP7, newP8, newP9).         }     }. }
false;;10;1;;T apply(Source l, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8, P9 p9).
false;protected;0;4;;@Override protected List<Object> innerProperties() {     return Arrays.asList(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10). }
false;protected;1;37;;protected T innerTransform(Function<Object, Object> rule) {     boolean same = true.     @SuppressWarnings("unchecked")     P1 newP1 = (P1) rule.apply(p1).     same &= Objects.equals(p1, newP1).     @SuppressWarnings("unchecked")     P2 newP2 = (P2) rule.apply(p2).     same &= Objects.equals(p2, newP2).     @SuppressWarnings("unchecked")     P3 newP3 = (P3) rule.apply(p3).     same &= Objects.equals(p3, newP3).     @SuppressWarnings("unchecked")     P4 newP4 = (P4) rule.apply(p4).     same &= Objects.equals(p4, newP4).     @SuppressWarnings("unchecked")     P5 newP5 = (P5) rule.apply(p5).     same &= Objects.equals(p5, newP5).     @SuppressWarnings("unchecked")     P6 newP6 = (P6) rule.apply(p6).     same &= Objects.equals(p6, newP6).     @SuppressWarnings("unchecked")     P7 newP7 = (P7) rule.apply(p7).     same &= Objects.equals(p7, newP7).     @SuppressWarnings("unchecked")     P8 newP8 = (P8) rule.apply(p8).     same &= Objects.equals(p8, newP8).     @SuppressWarnings("unchecked")     P9 newP9 = (P9) rule.apply(p9).     same &= Objects.equals(p9, newP9).     @SuppressWarnings("unchecked")     P10 newP10 = (P10) rule.apply(p10).     same &= Objects.equals(p10, newP10).     return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5, newP6, newP7, newP8, newP9, newP10). }
false;public,static;12;48;;public static <T extends Node<?>, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10> NodeInfo<T> create(T n, NodeCtor10<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, T> ctor, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8, P9 p9, P10 p10) {     return new NodeInfo<T>(n) {          @Override         protected List<Object> innerProperties() {             return Arrays.asList(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10).         }          protected T innerTransform(Function<Object, Object> rule) {             boolean same = true.             @SuppressWarnings("unchecked")             P1 newP1 = (P1) rule.apply(p1).             same &= Objects.equals(p1, newP1).             @SuppressWarnings("unchecked")             P2 newP2 = (P2) rule.apply(p2).             same &= Objects.equals(p2, newP2).             @SuppressWarnings("unchecked")             P3 newP3 = (P3) rule.apply(p3).             same &= Objects.equals(p3, newP3).             @SuppressWarnings("unchecked")             P4 newP4 = (P4) rule.apply(p4).             same &= Objects.equals(p4, newP4).             @SuppressWarnings("unchecked")             P5 newP5 = (P5) rule.apply(p5).             same &= Objects.equals(p5, newP5).             @SuppressWarnings("unchecked")             P6 newP6 = (P6) rule.apply(p6).             same &= Objects.equals(p6, newP6).             @SuppressWarnings("unchecked")             P7 newP7 = (P7) rule.apply(p7).             same &= Objects.equals(p7, newP7).             @SuppressWarnings("unchecked")             P8 newP8 = (P8) rule.apply(p8).             same &= Objects.equals(p8, newP8).             @SuppressWarnings("unchecked")             P9 newP9 = (P9) rule.apply(p9).             same &= Objects.equals(p9, newP9).             @SuppressWarnings("unchecked")             P10 newP10 = (P10) rule.apply(p10).             same &= Objects.equals(p10, newP10).             return same ? node : ctor.apply(node.source(), newP1, newP2, newP3, newP4, newP5, newP6, newP7, newP8, newP9, newP10).         }     }. }
false;;11;1;;T apply(Source l, P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8, P9 p9, P10 p10).
