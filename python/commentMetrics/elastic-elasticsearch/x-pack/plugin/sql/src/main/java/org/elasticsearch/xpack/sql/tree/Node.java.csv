# id;timestamp;commentText;codeText;commentWords;codeWords
Node -> protected abstract NodeInfo<? extends T> info()_;1524684173;Return the information about this node.;protected abstract NodeInfo<? extends T> info()_;return,the,information,about,this,node;protected,abstract,node,info,extends,t,info
Node -> protected abstract NodeInfo<? extends T> info()_;1525334055;Return the information about this node.;protected abstract NodeInfo<? extends T> info()_;return,the,information,about,this,node;protected,abstract,node,info,extends,t,info
Node -> protected abstract NodeInfo<? extends T> info()_;1546556270;Return the information about this node.;protected abstract NodeInfo<? extends T> info()_;return,the,information,about,this,node;protected,abstract,node,info,extends,t,info
Node -> protected abstract NodeInfo<? extends T> info()_;1549064305;Return the information about this node.;protected abstract NodeInfo<? extends T> info()_;return,the,information,about,this,node;protected,abstract,node,info,extends,t,info
Node -> public String propertiesToString(boolean skipIfChild);1524684173;Render the properties of this {@link Node} one by_one like {@code foo bar baz}. These go inside the_{@code [} and {@code ]} of the output of {@link #treeString}.;public String propertiesToString(boolean skipIfChild) {_        NodeInfo<? extends Node<T>> info = info()__        StringBuilder sb = new StringBuilder()___        List<?> children = children()__        _        int remainingProperties = TO_STRING_MAX_PROP__        int maxWidth = 0__        boolean needsComma = false___        List<Object> props = info.properties()__        for (Object prop : props) {_            _            _            if (!(skipIfChild && (children.contains(prop) || children.equals(prop)))) {_                if (remainingProperties-- < 0) {_                    sb.append("...").append(props.size() - TO_STRING_MAX_PROP).append("fields not shown")__                    break__                }__                if (needsComma) {_                    sb.append(",")__                }_                String stringValue = Objects.toString(prop)__                if (maxWidth + stringValue.length() > TO_STRING_MAX_WIDTH) {_                    int cutoff = Math.max(0, TO_STRING_MAX_WIDTH - maxWidth)__                    sb.append(stringValue.substring(0, cutoff))__                    sb.append("\n")__                    stringValue = stringValue.substring(cutoff)__                    maxWidth = 0__                }_                maxWidth += stringValue.length()__                sb.append(stringValue)___                needsComma = true__            }_        }__        return sb.toString()__    };render,the,properties,of,this,link,node,one,by,one,like,code,foo,bar,baz,these,go,inside,the,code,and,code,of,the,output,of,link,tree,string;public,string,properties,to,string,boolean,skip,if,child,node,info,extends,node,t,info,info,string,builder,sb,new,string,builder,list,children,children,int,remaining,properties,int,max,width,0,boolean,needs,comma,false,list,object,props,info,properties,for,object,prop,props,if,skip,if,child,children,contains,prop,children,equals,prop,if,remaining,properties,0,sb,append,append,props,size,append,fields,not,shown,break,if,needs,comma,sb,append,string,string,value,objects,to,string,prop,if,max,width,string,value,length,int,cutoff,math,max,0,max,width,sb,append,string,value,substring,0,cutoff,sb,append,n,string,value,string,value,substring,cutoff,max,width,0,max,width,string,value,length,sb,append,string,value,needs,comma,true,return,sb,to,string
Node -> public String propertiesToString(boolean skipIfChild);1525334055;Render the properties of this {@link Node} one by_one like {@code foo bar baz}. These go inside the_{@code [} and {@code ]} of the output of {@link #treeString}.;public String propertiesToString(boolean skipIfChild) {_        NodeInfo<? extends Node<T>> info = info()__        StringBuilder sb = new StringBuilder()___        List<?> children = children()__        _        int remainingProperties = TO_STRING_MAX_PROP__        int maxWidth = 0__        boolean needsComma = false___        List<Object> props = info.properties()__        for (Object prop : props) {_            _            _            if (!(skipIfChild && (children.contains(prop) || children.equals(prop)))) {_                if (remainingProperties-- < 0) {_                    sb.append("...").append(props.size() - TO_STRING_MAX_PROP).append("fields not shown")__                    break__                }__                if (needsComma) {_                    sb.append(",")__                }_                String stringValue = Objects.toString(prop)__                if (maxWidth + stringValue.length() > TO_STRING_MAX_WIDTH) {_                    int cutoff = Math.max(0, TO_STRING_MAX_WIDTH - maxWidth)__                    sb.append(stringValue.substring(0, cutoff))__                    sb.append("\n")__                    stringValue = stringValue.substring(cutoff)__                    maxWidth = 0__                }_                maxWidth += stringValue.length()__                sb.append(stringValue)___                needsComma = true__            }_        }__        return sb.toString()__    };render,the,properties,of,this,link,node,one,by,one,like,code,foo,bar,baz,these,go,inside,the,code,and,code,of,the,output,of,link,tree,string;public,string,properties,to,string,boolean,skip,if,child,node,info,extends,node,t,info,info,string,builder,sb,new,string,builder,list,children,children,int,remaining,properties,int,max,width,0,boolean,needs,comma,false,list,object,props,info,properties,for,object,prop,props,if,skip,if,child,children,contains,prop,children,equals,prop,if,remaining,properties,0,sb,append,append,props,size,append,fields,not,shown,break,if,needs,comma,sb,append,string,string,value,objects,to,string,prop,if,max,width,string,value,length,int,cutoff,math,max,0,max,width,sb,append,string,value,substring,0,cutoff,sb,append,n,string,value,string,value,substring,cutoff,max,width,0,max,width,string,value,length,sb,append,string,value,needs,comma,true,return,sb,to,string
Node -> public String propertiesToString(boolean skipIfChild);1546556270;Render the properties of this {@link Node} one by_one like {@code foo bar baz}. These go inside the_{@code [} and {@code ]} of the output of {@link #treeString}.;public String propertiesToString(boolean skipIfChild) {_        NodeInfo<? extends Node<T>> info = info()__        StringBuilder sb = new StringBuilder()___        List<?> children = children()__        _        int remainingProperties = TO_STRING_MAX_PROP__        int maxWidth = 0__        boolean needsComma = false___        List<Object> props = info.properties()__        for (Object prop : props) {_            _            _            if (!(skipIfChild && (children.contains(prop) || children.equals(prop)))) {_                if (remainingProperties-- < 0) {_                    sb.append("...").append(props.size() - TO_STRING_MAX_PROP).append("fields not shown")__                    break__                }__                if (needsComma) {_                    sb.append(",")__                }_                String stringValue = Objects.toString(prop)__                if (maxWidth + stringValue.length() > TO_STRING_MAX_WIDTH) {_                    int cutoff = Math.max(0, TO_STRING_MAX_WIDTH - maxWidth)__                    sb.append(stringValue.substring(0, cutoff))__                    sb.append("\n")__                    stringValue = stringValue.substring(cutoff)__                    maxWidth = 0__                }_                maxWidth += stringValue.length()__                sb.append(stringValue)___                needsComma = true__            }_        }__        return sb.toString()__    };render,the,properties,of,this,link,node,one,by,one,like,code,foo,bar,baz,these,go,inside,the,code,and,code,of,the,output,of,link,tree,string;public,string,properties,to,string,boolean,skip,if,child,node,info,extends,node,t,info,info,string,builder,sb,new,string,builder,list,children,children,int,remaining,properties,int,max,width,0,boolean,needs,comma,false,list,object,props,info,properties,for,object,prop,props,if,skip,if,child,children,contains,prop,children,equals,prop,if,remaining,properties,0,sb,append,append,props,size,append,fields,not,shown,break,if,needs,comma,sb,append,string,string,value,objects,to,string,prop,if,max,width,string,value,length,int,cutoff,math,max,0,max,width,sb,append,string,value,substring,0,cutoff,sb,append,n,string,value,string,value,substring,cutoff,max,width,0,max,width,string,value,length,sb,append,string,value,needs,comma,true,return,sb,to,string
Node -> public String propertiesToString(boolean skipIfChild);1549064305;Render the properties of this {@link Node} one by_one like {@code foo bar baz}. These go inside the_{@code [} and {@code ]} of the output of {@link #treeString}.;public String propertiesToString(boolean skipIfChild) {_        StringBuilder sb = new StringBuilder()___        List<?> children = children()__        _        int remainingProperties = TO_STRING_MAX_PROP__        int maxWidth = 0__        boolean needsComma = false___        List<Object> props = nodeProperties()__        for (Object prop : props) {_            _            _            if (!(skipIfChild && (children.contains(prop) || children.equals(prop)))) {_                if (remainingProperties-- < 0) {_                    sb.append("...").append(props.size() - TO_STRING_MAX_PROP).append("fields not shown")__                    break__                }__                if (needsComma) {_                    sb.append(",")__                }_                String stringValue = Objects.toString(prop)__                if (maxWidth + stringValue.length() > TO_STRING_MAX_WIDTH) {_                    int cutoff = Math.max(0, TO_STRING_MAX_WIDTH - maxWidth)__                    sb.append(stringValue.substring(0, cutoff))__                    sb.append("\n")__                    stringValue = stringValue.substring(cutoff)__                    maxWidth = 0__                }_                maxWidth += stringValue.length()__                sb.append(stringValue)___                needsComma = true__            }_        }__        return sb.toString()__    };render,the,properties,of,this,link,node,one,by,one,like,code,foo,bar,baz,these,go,inside,the,code,and,code,of,the,output,of,link,tree,string;public,string,properties,to,string,boolean,skip,if,child,string,builder,sb,new,string,builder,list,children,children,int,remaining,properties,int,max,width,0,boolean,needs,comma,false,list,object,props,node,properties,for,object,prop,props,if,skip,if,child,children,contains,prop,children,equals,prop,if,remaining,properties,0,sb,append,append,props,size,append,fields,not,shown,break,if,needs,comma,sb,append,string,string,value,objects,to,string,prop,if,max,width,string,value,length,int,cutoff,math,max,0,max,width,sb,append,string,value,substring,0,cutoff,sb,append,n,string,value,string,value,substring,cutoff,max,width,0,max,width,string,value,length,sb,append,string,value,needs,comma,true,return,sb,to,string
Node -> public abstract T replaceChildren(List<T> newChildren)_;1524684173;Replace the children of this node.;public abstract T replaceChildren(List<T> newChildren)_;replace,the,children,of,this,node;public,abstract,t,replace,children,list,t,new,children
Node -> public abstract T replaceChildren(List<T> newChildren)_;1525334055;Replace the children of this node.;public abstract T replaceChildren(List<T> newChildren)_;replace,the,children,of,this,node;public,abstract,t,replace,children,list,t,new,children
Node -> public abstract T replaceChildren(List<T> newChildren)_;1546556270;Replace the children of this node.;public abstract T replaceChildren(List<T> newChildren)_;replace,the,children,of,this,node;public,abstract,t,replace,children,list,t,new,children
Node -> public abstract T replaceChildren(List<T> newChildren)_;1549064305;Replace the children of this node.;public abstract T replaceChildren(List<T> newChildren)_;replace,the,children,of,this,node;public,abstract,t,replace,children,list,t,new,children
Node -> protected final <E> T transformNodeProps(Function<? super E, ? extends E> rule, Class<E> typeToken);1524684173;Transform this node's properties._<p>_This always returns something of the same type as the current_node but since {@link Node} doesn't have a {@code SelfT} parameter_we return the closest thing we do have: {@code T}, which is the_root of the hierarchy for the this node.;protected final <E> T transformNodeProps(Function<? super E, ? extends E> rule, Class<E> typeToken) {_        return info().transform(rule, typeToken)__    };transform,this,node,s,properties,p,this,always,returns,something,of,the,same,type,as,the,current,node,but,since,link,node,doesn,t,have,a,code,self,t,parameter,we,return,the,closest,thing,we,do,have,code,t,which,is,the,root,of,the,hierarchy,for,the,this,node;protected,final,e,t,transform,node,props,function,super,e,extends,e,rule,class,e,type,token,return,info,transform,rule,type,token
Node -> protected final <E> T transformNodeProps(Function<? super E, ? extends E> rule, Class<E> typeToken);1525334055;Transform this node's properties._<p>_This always returns something of the same type as the current_node but since {@link Node} doesn't have a {@code SelfT} parameter_we return the closest thing we do have: {@code T}, which is the_root of the hierarchy for the this node.;protected final <E> T transformNodeProps(Function<? super E, ? extends E> rule, Class<E> typeToken) {_        return info().transform(rule, typeToken)__    };transform,this,node,s,properties,p,this,always,returns,something,of,the,same,type,as,the,current,node,but,since,link,node,doesn,t,have,a,code,self,t,parameter,we,return,the,closest,thing,we,do,have,code,t,which,is,the,root,of,the,hierarchy,for,the,this,node;protected,final,e,t,transform,node,props,function,super,e,extends,e,rule,class,e,type,token,return,info,transform,rule,type,token
Node -> protected final <E> T transformNodeProps(Function<? super E, ? extends E> rule, Class<E> typeToken);1546556270;Transform this node's properties._<p>_This always returns something of the same type as the current_node but since {@link Node} doesn't have a {@code SelfT} parameter_we return the closest thing we do have: {@code T}, which is the_root of the hierarchy for the this node.;protected final <E> T transformNodeProps(Function<? super E, ? extends E> rule, Class<E> typeToken) {_        return info().transform(rule, typeToken)__    };transform,this,node,s,properties,p,this,always,returns,something,of,the,same,type,as,the,current,node,but,since,link,node,doesn,t,have,a,code,self,t,parameter,we,return,the,closest,thing,we,do,have,code,t,which,is,the,root,of,the,hierarchy,for,the,this,node;protected,final,e,t,transform,node,props,function,super,e,extends,e,rule,class,e,type,token,return,info,transform,rule,type,token
Node -> protected final <E> T transformNodeProps(Function<? super E, ? extends E> rule, Class<E> typeToken);1549064305;Transform this node's properties._<p>_This always returns something of the same type as the current_node but since {@link Node} doesn't have a {@code SelfT} parameter_we return the closest thing we do have: {@code T}, which is the_root of the hierarchy for the this node.;protected final <E> T transformNodeProps(Function<? super E, ? extends E> rule, Class<E> typeToken) {_        return info().transform(rule, typeToken)__    };transform,this,node,s,properties,p,this,always,returns,something,of,the,same,type,as,the,current,node,but,since,link,node,doesn,t,have,a,code,self,t,parameter,we,return,the,closest,thing,we,do,have,code,t,which,is,the,root,of,the,hierarchy,for,the,this,node;protected,final,e,t,transform,node,props,function,super,e,extends,e,rule,class,e,type,token,return,info,transform,rule,type,token
Node -> final StringBuilder treeString(StringBuilder sb, int depth, BitSet hasParentPerDepth);1524684173;Render this {@link Node} as a tree like_<pre>_{@code_Project[[i{f}#0]]_\_Filter[i{f}#1]_\_SubQueryAlias[test]_\_EsRelation[test][i{f}#2]__</pre>;final StringBuilder treeString(StringBuilder sb, int depth, BitSet hasParentPerDepth) {_        if (depth > 0) {_            _            for (int column = 0_ column < depth_ column++) {_                if (hasParentPerDepth.get(column)) {_                    sb.append("|")__                    _                    if (column < depth - 1) {_                        sb.append(" ")__                    }_                }_                else {_                    _                    sb.append((column == depth - 1) ? "\\" : "  ")__                }_            }__            sb.append("_")__        }__        sb.append(nodeString())___        List<T> children = children()__        if (!children.isEmpty()) {_            sb.append("\n")__        }_        for (int i = 0_ i < children.size()_ i++) {_            T t = children.get(i)__            hasParentPerDepth.set(depth, i < children.size() - 1)__            t.treeString(sb, depth + 1, hasParentPerDepth)__            if (i < children.size() - 1) {_                sb.append("\n")__            }_        }_        return sb__    };render,this,link,node,as,a,tree,like,pre,code,project,i,f,0,i,f,1,test,test,i,f,2,pre;final,string,builder,tree,string,string,builder,sb,int,depth,bit,set,has,parent,per,depth,if,depth,0,for,int,column,0,column,depth,column,if,has,parent,per,depth,get,column,sb,append,if,column,depth,1,sb,append,else,sb,append,column,depth,1,sb,append,sb,append,node,string,list,t,children,children,if,children,is,empty,sb,append,n,for,int,i,0,i,children,size,i,t,t,children,get,i,has,parent,per,depth,set,depth,i,children,size,1,t,tree,string,sb,depth,1,has,parent,per,depth,if,i,children,size,1,sb,append,n,return,sb
Node -> final StringBuilder treeString(StringBuilder sb, int depth, BitSet hasParentPerDepth);1525334055;Render this {@link Node} as a tree like_<pre>_{@code_Project[[i{f}#0]]_\_Filter[i{f}#1]_\_SubQueryAlias[test]_\_EsRelation[test][i{f}#2]__</pre>;final StringBuilder treeString(StringBuilder sb, int depth, BitSet hasParentPerDepth) {_        if (depth > 0) {_            _            for (int column = 0_ column < depth_ column++) {_                if (hasParentPerDepth.get(column)) {_                    sb.append("|")__                    _                    if (column < depth - 1) {_                        sb.append(" ")__                    }_                }_                else {_                    _                    sb.append((column == depth - 1) ? "\\" : "  ")__                }_            }__            sb.append("_")__        }__        sb.append(nodeString())___        List<T> children = children()__        if (!children.isEmpty()) {_            sb.append("\n")__        }_        for (int i = 0_ i < children.size()_ i++) {_            T t = children.get(i)__            hasParentPerDepth.set(depth, i < children.size() - 1)__            t.treeString(sb, depth + 1, hasParentPerDepth)__            if (i < children.size() - 1) {_                sb.append("\n")__            }_        }_        return sb__    };render,this,link,node,as,a,tree,like,pre,code,project,i,f,0,i,f,1,test,test,i,f,2,pre;final,string,builder,tree,string,string,builder,sb,int,depth,bit,set,has,parent,per,depth,if,depth,0,for,int,column,0,column,depth,column,if,has,parent,per,depth,get,column,sb,append,if,column,depth,1,sb,append,else,sb,append,column,depth,1,sb,append,sb,append,node,string,list,t,children,children,if,children,is,empty,sb,append,n,for,int,i,0,i,children,size,i,t,t,children,get,i,has,parent,per,depth,set,depth,i,children,size,1,t,tree,string,sb,depth,1,has,parent,per,depth,if,i,children,size,1,sb,append,n,return,sb
Node -> final StringBuilder treeString(StringBuilder sb, int depth, BitSet hasParentPerDepth);1546556270;Render this {@link Node} as a tree like_<pre>_{@code_Project[[i{f}#0]]_\_Filter[i{f}#1]_\_SubQueryAlias[test]_\_EsRelation[test][i{f}#2]__</pre>;final StringBuilder treeString(StringBuilder sb, int depth, BitSet hasParentPerDepth) {_        if (depth > 0) {_            _            for (int column = 0_ column < depth_ column++) {_                if (hasParentPerDepth.get(column)) {_                    sb.append("|")__                    _                    if (column < depth - 1) {_                        sb.append(" ")__                    }_                }_                else {_                    _                    sb.append((column == depth - 1) ? "\\" : "  ")__                }_            }__            sb.append("_")__        }__        sb.append(nodeString())___        List<T> children = children()__        if (!children.isEmpty()) {_            sb.append("\n")__        }_        for (int i = 0_ i < children.size()_ i++) {_            T t = children.get(i)__            hasParentPerDepth.set(depth, i < children.size() - 1)__            t.treeString(sb, depth + 1, hasParentPerDepth)__            if (i < children.size() - 1) {_                sb.append("\n")__            }_        }_        return sb__    };render,this,link,node,as,a,tree,like,pre,code,project,i,f,0,i,f,1,test,test,i,f,2,pre;final,string,builder,tree,string,string,builder,sb,int,depth,bit,set,has,parent,per,depth,if,depth,0,for,int,column,0,column,depth,column,if,has,parent,per,depth,get,column,sb,append,if,column,depth,1,sb,append,else,sb,append,column,depth,1,sb,append,sb,append,node,string,list,t,children,children,if,children,is,empty,sb,append,n,for,int,i,0,i,children,size,i,t,t,children,get,i,has,parent,per,depth,set,depth,i,children,size,1,t,tree,string,sb,depth,1,has,parent,per,depth,if,i,children,size,1,sb,append,n,return,sb
Node -> final StringBuilder treeString(StringBuilder sb, int depth, BitSet hasParentPerDepth);1549064305;Render this {@link Node} as a tree like_<pre>_{@code_Project[[i{f}#0]]_\_Filter[i{f}#1]_\_SubQueryAlias[test]_\_EsRelation[test][i{f}#2]__</pre>;final StringBuilder treeString(StringBuilder sb, int depth, BitSet hasParentPerDepth) {_        if (depth > 0) {_            _            for (int column = 0_ column < depth_ column++) {_                if (hasParentPerDepth.get(column)) {_                    sb.append("|")__                    _                    if (column < depth - 1) {_                        sb.append(" ")__                    }_                }_                else {_                    _                    sb.append((column == depth - 1) ? "\\" : "  ")__                }_            }__            sb.append("_")__        }__        sb.append(nodeString())___        List<T> children = children()__        if (!children.isEmpty()) {_            sb.append("\n")__        }_        for (int i = 0_ i < children.size()_ i++) {_            T t = children.get(i)__            hasParentPerDepth.set(depth, i < children.size() - 1)__            t.treeString(sb, depth + 1, hasParentPerDepth)__            if (i < children.size() - 1) {_                sb.append("\n")__            }_        }_        return sb__    };render,this,link,node,as,a,tree,like,pre,code,project,i,f,0,i,f,1,test,test,i,f,2,pre;final,string,builder,tree,string,string,builder,sb,int,depth,bit,set,has,parent,per,depth,if,depth,0,for,int,column,0,column,depth,column,if,has,parent,per,depth,get,column,sb,append,if,column,depth,1,sb,append,else,sb,append,column,depth,1,sb,append,sb,append,node,string,list,t,children,children,if,children,is,empty,sb,append,n,for,int,i,0,i,children,size,i,t,t,children,get,i,has,parent,per,depth,set,depth,i,children,size,1,t,tree,string,sb,depth,1,has,parent,per,depth,if,i,children,size,1,sb,append,n,return,sb
Node -> public List<Object> properties();1524684173;The values of all the properties that are important_to this {@link Node}.;public List<Object> properties() {_        return info().properties()__    };the,values,of,all,the,properties,that,are,important,to,this,link,node;public,list,object,properties,return,info,properties
Node -> public List<Object> properties();1525334055;The values of all the properties that are important_to this {@link Node}.;public List<Object> properties() {_        return info().properties()__    };the,values,of,all,the,properties,that,are,important,to,this,link,node;public,list,object,properties,return,info,properties
Node -> public List<Object> properties();1546556270;The values of all the properties that are important_to this {@link Node}.;public List<Object> properties() {_        return info().properties()__    };the,values,of,all,the,properties,that,are,important,to,this,link,node;public,list,object,properties,return,info,properties
