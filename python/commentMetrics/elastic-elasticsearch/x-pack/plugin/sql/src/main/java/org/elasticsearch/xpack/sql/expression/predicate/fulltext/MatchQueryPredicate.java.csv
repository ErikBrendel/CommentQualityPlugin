commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<MatchQueryPredicate> info() {     return NodeInfo.create(this, MatchQueryPredicate::new, field, query(), options()). }
false;public;1;7;;@Override public MatchQueryPredicate replaceChildren(List<Expression> newChildren) {     if (newChildren.size() != 1) {         throw new IllegalArgumentException("expected [1] child but received [" + newChildren.size() + "]").     }     return new MatchQueryPredicate(source(), newChildren.get(0), query(), options()). }
false;public;0;3;;public Expression field() {     return field. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(field, super.hashCode()). }
false;public;1;8;;@Override public boolean equals(Object obj) {     if (super.equals(obj)) {         MatchQueryPredicate other = (MatchQueryPredicate) obj.         return Objects.equals(field, other.field).     }     return false. }
