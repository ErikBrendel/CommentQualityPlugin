# id;timestamp;commentText;codeText;commentWords;codeWords
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1525334055;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1531179852;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1536828374;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1538170812;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1539951844;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1540238977;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1540313026;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1541008027;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1541092382;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1541452987;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1541502744;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1541716379;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1541759558;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1543007967;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1543237322;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1543252896;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1544804437;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1545292567;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1546556270;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1546792174;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1548348020;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()__            _            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {_                    _                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())__                        _                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                                _                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }_                _            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1548422582;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()___            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {__                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())___                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {__                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())___                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)___                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }__            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1548945185;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()___            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {__                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())___                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {__                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())___                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)___                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }__            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> CombineBinaryComparisons -> private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive);1549064305;Find commonalities between the given comparison in the given list._The method can be applied both for conjunctive (AND) or disjunctive purposes (OR).;private static boolean findExistingComparison(BinaryComparison main, List<BinaryComparison> bcs, boolean conjunctive) {_            Object value = main.right().fold()___            _            for (int i = 0_ i < bcs.size()_ i++) {_                BinaryComparison other = bcs.get(i)__                _                if (!other.right().foldable()) {_                    continue__                }_                _                if ((other instanceof GreaterThan || other instanceof GreaterThanOrEqual) &&_                    (main instanceof GreaterThan || main instanceof GreaterThanOrEqual)) {__                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())___                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThan && other instanceof GreaterThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof GreaterThanOrEqual && other instanceof GreaterThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)__                            }_                            _                            return true__                        }__                        return false__                    }_                }_                _                else if ((other instanceof LessThan || other instanceof LessThanOrEqual) &&_                        (main instanceof LessThan || main instanceof LessThanOrEqual)) {__                    if (main.left().semanticEquals(other.left())) {_                        Integer compare = BinaryComparison.compare(value, other.right().fold())___                        if (compare != null) {_                                 _                            if ((conjunctive &&_                                  _                                  (compare < 0 ||_                                  _                                  (compare == 0 && main instanceof LessThan && other instanceof LessThanOrEqual)))_                                ||_                                _                                (!conjunctive &&_                                  _                                  (compare > 0 ||_                                  _                                  (compare == 0 && main instanceof LessThanOrEqual && other instanceof LessThan)))) {_                                bcs.remove(i)__                                bcs.add(i, main)___                            }_                            _                            return true__                        }__                        return false__                    }_                }_            }__            return false__        };find,commonalities,between,the,given,comparison,in,the,given,list,the,method,can,be,applied,both,for,conjunctive,and,or,disjunctive,purposes,or;private,static,boolean,find,existing,comparison,binary,comparison,main,list,binary,comparison,bcs,boolean,conjunctive,object,value,main,right,fold,for,int,i,0,i,bcs,size,i,binary,comparison,other,bcs,get,i,if,other,right,foldable,continue,if,other,instanceof,greater,than,other,instanceof,greater,than,or,equal,main,instanceof,greater,than,main,instanceof,greater,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,greater,than,other,instanceof,greater,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,greater,than,or,equal,other,instanceof,greater,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,else,if,other,instanceof,less,than,other,instanceof,less,than,or,equal,main,instanceof,less,than,main,instanceof,less,than,or,equal,if,main,left,semantic,equals,other,left,integer,compare,binary,comparison,compare,value,other,right,fold,if,compare,null,if,conjunctive,compare,0,compare,0,main,instanceof,less,than,other,instanceof,less,than,or,equal,conjunctive,compare,0,compare,0,main,instanceof,less,than,or,equal,other,instanceof,less,than,bcs,remove,i,bcs,add,i,main,return,true,return,false,return,false
Optimizer -> SkipQueryIfFoldingProjection -> private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan);1545292567;Check if the plan doesn't model a query with FROM clause on a table_that its filter (WHERE clause) is folded to FALSE.;private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan) {_            return (!(plan.child() instanceof LocalRelation) || (plan.child() instanceof LocalRelation &&_                !(((LocalRelation) plan.child()).executable() instanceof EmptyExecutable)))__        };check,if,the,plan,doesn,t,model,a,query,with,from,clause,on,a,table,that,its,filter,where,clause,is,folded,to,false;private,static,boolean,is,not,query,with,from,clause,and,filter,folded,to,false,unary,plan,plan,return,plan,child,instanceof,local,relation,plan,child,instanceof,local,relation,local,relation,plan,child,executable,instanceof,empty,executable
Optimizer -> SkipQueryIfFoldingProjection -> private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan);1546556270;Check if the plan doesn't model a query with FROM clause on a table_that its filter (WHERE clause) is folded to FALSE.;private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan) {_            return (!(plan.child() instanceof LocalRelation) || (plan.child() instanceof LocalRelation &&_                !(((LocalRelation) plan.child()).executable() instanceof EmptyExecutable)))__        };check,if,the,plan,doesn,t,model,a,query,with,from,clause,on,a,table,that,its,filter,where,clause,is,folded,to,false;private,static,boolean,is,not,query,with,from,clause,and,filter,folded,to,false,unary,plan,plan,return,plan,child,instanceof,local,relation,plan,child,instanceof,local,relation,local,relation,plan,child,executable,instanceof,empty,executable
Optimizer -> SkipQueryIfFoldingProjection -> private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan);1546792174;Check if the plan doesn't model a query with FROM clause on a table_that its filter (WHERE clause) is folded to FALSE.;private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan) {_            return (!(plan.child() instanceof LocalRelation) || (plan.child() instanceof LocalRelation &&_                !(((LocalRelation) plan.child()).executable() instanceof EmptyExecutable)))__        };check,if,the,plan,doesn,t,model,a,query,with,from,clause,on,a,table,that,its,filter,where,clause,is,folded,to,false;private,static,boolean,is,not,query,with,from,clause,and,filter,folded,to,false,unary,plan,plan,return,plan,child,instanceof,local,relation,plan,child,instanceof,local,relation,local,relation,plan,child,executable,instanceof,empty,executable
Optimizer -> SkipQueryIfFoldingProjection -> private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan);1548348020;Check if the plan doesn't model a query with FROM clause on a table_that its filter (WHERE clause) is folded to FALSE.;private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan) {_            return (!(plan.child() instanceof LocalRelation) || (plan.child() instanceof LocalRelation &&_                !(((LocalRelation) plan.child()).executable() instanceof EmptyExecutable)))__        };check,if,the,plan,doesn,t,model,a,query,with,from,clause,on,a,table,that,its,filter,where,clause,is,folded,to,false;private,static,boolean,is,not,query,with,from,clause,and,filter,folded,to,false,unary,plan,plan,return,plan,child,instanceof,local,relation,plan,child,instanceof,local,relation,local,relation,plan,child,executable,instanceof,empty,executable
Optimizer -> SkipQueryIfFoldingProjection -> private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan);1548422582;Check if the plan doesn't model a query with FROM clause on a table_that its filter (WHERE clause) is folded to FALSE.;private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan) {_            return (!(plan.child() instanceof LocalRelation) || (plan.child() instanceof LocalRelation &&_                !(((LocalRelation) plan.child()).executable() instanceof EmptyExecutable)))__        };check,if,the,plan,doesn,t,model,a,query,with,from,clause,on,a,table,that,its,filter,where,clause,is,folded,to,false;private,static,boolean,is,not,query,with,from,clause,and,filter,folded,to,false,unary,plan,plan,return,plan,child,instanceof,local,relation,plan,child,instanceof,local,relation,local,relation,plan,child,executable,instanceof,empty,executable
Optimizer -> SkipQueryIfFoldingProjection -> private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan);1548945185;Check if the plan doesn't model a query with FROM clause on a table_that its filter (WHERE clause) is folded to FALSE.;private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan) {_            return (!(plan.child() instanceof LocalRelation) || (plan.child() instanceof LocalRelation &&_                !(((LocalRelation) plan.child()).executable() instanceof EmptyExecutable)))__        };check,if,the,plan,doesn,t,model,a,query,with,from,clause,on,a,table,that,its,filter,where,clause,is,folded,to,false;private,static,boolean,is,not,query,with,from,clause,and,filter,folded,to,false,unary,plan,plan,return,plan,child,instanceof,local,relation,plan,child,instanceof,local,relation,local,relation,plan,child,executable,instanceof,empty,executable
Optimizer -> SkipQueryIfFoldingProjection -> private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan);1549064305;Check if the plan doesn't model a query with FROM clause on a table_that its filter (WHERE clause) is folded to FALSE.;private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan) {_            return (!(plan.child() instanceof LocalRelation) || (plan.child() instanceof LocalRelation &&_                !(((LocalRelation) plan.child()).executable() instanceof EmptyExecutable)))__        };check,if,the,plan,doesn,t,model,a,query,with,from,clause,on,a,table,that,its,filter,where,clause,is,folded,to,false;private,static,boolean,is,not,query,with,from,clause,and,filter,folded,to,false,unary,plan,plan,return,plan,child,instanceof,local,relation,plan,child,instanceof,local,relation,local,relation,plan,child,executable,instanceof,empty,executable
