commented;modifiers;parameterAmount;loc;comment;code
false;default;1;22;;default ScriptTemplate asScript(Expression exp) {     if (exp.foldable()) {         return scriptWithFoldable(exp).     }     Attribute attr = Expressions.attribute(exp).     if (attr != null) {         if (attr instanceof ScalarFunctionAttribute) {             return scriptWithScalar((ScalarFunctionAttribute) attr).         }         if (attr instanceof AggregateFunctionAttribute) {             return scriptWithAggregate((AggregateFunctionAttribute) attr).         }         if (attr instanceof GroupingFunctionAttribute) {             return scriptWithGrouping((GroupingFunctionAttribute) attr).         }         if (attr instanceof FieldAttribute) {             return scriptWithField((FieldAttribute) attr).         }     }     throw new SqlIllegalArgumentException("Cannot evaluate script for expression {}", exp). }
false;;0;1;;DataType dataType().
false;default;1;19;;default ScriptTemplate scriptWithFoldable(Expression foldable) {     Object fold = foldable.fold().     // wrap intervals with dedicated methods for serialization     if (fold instanceof IntervalYearMonth) {         IntervalYearMonth iym = (IntervalYearMonth) fold.         return new ScriptTemplate(processScript("{sql}.intervalYearMonth({},{})"), paramsBuilder().variable(iym.interval().toString()).variable(iym.dataType().name()).build(), dataType()).     } else if (fold instanceof IntervalDayTime) {         IntervalDayTime idt = (IntervalDayTime) fold.         return new ScriptTemplate(processScript("{sql}.intervalDayTime({},{})"), paramsBuilder().variable(idt.interval().toString()).variable(idt.dataType().name()).build(), dataType()).     }     return new ScriptTemplate(processScript("{}"), paramsBuilder().variable(fold).build(), dataType()). }
false;default;1;6;;default ScriptTemplate scriptWithScalar(ScalarFunctionAttribute scalar) {     ScriptTemplate nested = scalar.script().     return new ScriptTemplate(processScript(nested.template()), paramsBuilder().script(nested.params()).build(), dataType()). }
false;default;1;9;;default ScriptTemplate scriptWithAggregate(AggregateFunctionAttribute aggregate) {     String template = "{}".     if (aggregate.dataType().isDateBased()) {         template = "{sql}.asDateTime({})".     }     return new ScriptTemplate(processScript(template), paramsBuilder().agg(aggregate).build(), dataType()). }
false;default;1;9;;default ScriptTemplate scriptWithGrouping(GroupingFunctionAttribute grouping) {     String template = "{}".     if (grouping.dataType().isDateBased()) {         template = "{sql}.asDateTime({})".     }     return new ScriptTemplate(processScript(template), paramsBuilder().grouping(grouping).build(), dataType()). }
false;default;1;5;;default ScriptTemplate scriptWithField(FieldAttribute field) {     return new ScriptTemplate(processScript("doc[{}].value"), paramsBuilder().variable(field.name()).build(), dataType()). }
false;default;1;3;;default String processScript(String script) {     return formatTemplate(script). }
false;default;1;3;;default String formatTemplate(String template) {     return Scripts.formatTemplate(template). }
