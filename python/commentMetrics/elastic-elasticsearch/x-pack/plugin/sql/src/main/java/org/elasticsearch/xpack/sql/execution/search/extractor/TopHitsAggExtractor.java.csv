commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeEnum(fieldDataType). }
false;;0;3;;String name() {     return name. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;18;;@Override public Object extract(Bucket bucket) {     InternalTopHits agg = bucket.getAggregations().get(name).     if (agg == null) {         throw new SqlIllegalArgumentException("Cannot find an aggregation named {}", name).     }     if (agg.getHits().getTotalHits() == null || agg.getHits().getTotalHits().value == 0) {         return null.     }     Object value = agg.getHits().getAt(0).getFields().values().iterator().next().getValue().     if (fieldDataType.isDateBased()) {         return DateUtils.asDateTime(Long.parseLong(value.toString())).     } else {         return value.     } }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(name, fieldDataType). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     TopHitsAggExtractor other = (TopHitsAggExtractor) obj.     return Objects.equals(name, other.name) && Objects.equals(fieldDataType, other.fieldDataType). }
false;public;0;4;;@Override public String toString() {     return "TopHits>" + name + "[" + fieldDataType + "]". }
