commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;4;;@Override public final int columnCount() {     return mask.cardinality(). }
false;protected;1;4;;@Override protected Object getColumn(int column) {     return extractValue(userExtractor(column)). }
false;;0;3;;List<E> extractors() {     return extractors. }
false;;0;3;;BitSet mask() {     return mask. }
false;;1;11;;E userExtractor(int column) {     int i = -1.     // find the nth set bit     for (i = mask.nextSetBit(0). i >= 0. i = mask.nextSetBit(i + 1)) {         if (column-- == 0) {             return extractors.get(i).         }     }     throw new SqlIllegalArgumentException("Cannot find column [{}]", column). }
false;;1;3;;Object resultColumn(int column) {     return extractValue(extractors().get(column)). }
false;;0;3;;int resultColumnCount() {     return extractors.size(). }
false;;1;7;;void forEachResultColumn(Consumer<? super Object> action) {     Objects.requireNonNull(action).     int rowSize = resultColumnCount().     for (int i = 0. i < rowSize. i++) {         action.accept(resultColumn(i)).     } }
false;protected,abstract;1;1;;protected abstract Object extractValue(E e).
