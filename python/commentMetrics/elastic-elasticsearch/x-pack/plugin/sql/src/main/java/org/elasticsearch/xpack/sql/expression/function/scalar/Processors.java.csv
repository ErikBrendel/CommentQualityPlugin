# id;timestamp;commentText;codeText;commentWords;codeWords
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1524684173;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,return,entries
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1524839522;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new))__        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,binary,math,processor,name,binary,math,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,return,entries
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1531729807;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new))__        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        _        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,binary,math,processor,name,binary,math,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,entries,add,new,entry,processor,class,string,processor,name,string,processor,new,return,entries
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1533143718;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new))__        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        _        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringNumericProcessor.NAME, BinaryStringNumericProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringStringProcessor.NAME, BinaryStringStringProcessor::new))__        entries.add(new Entry(Processor.class, ConcatFunctionProcessor.NAME, ConcatFunctionProcessor::new))__        entries.add(new Entry(Processor.class, InsertFunctionProcessor.NAME, InsertFunctionProcessor::new))__        entries.add(new Entry(Processor.class, LocateFunctionProcessor.NAME, LocateFunctionProcessor::new))__        entries.add(new Entry(Processor.class, ReplaceFunctionProcessor.NAME, ReplaceFunctionProcessor::new))__        entries.add(new Entry(Processor.class, SubstringFunctionProcessor.NAME, SubstringFunctionProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,binary,math,processor,name,binary,math,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,entries,add,new,entry,processor,class,string,processor,name,string,processor,new,entries,add,new,entry,processor,class,binary,string,numeric,processor,name,binary,string,numeric,processor,new,entries,add,new,entry,processor,class,binary,string,string,processor,name,binary,string,string,processor,new,entries,add,new,entry,processor,class,concat,function,processor,name,concat,function,processor,new,entries,add,new,entry,processor,class,insert,function,processor,name,insert,function,processor,new,entries,add,new,entry,processor,class,locate,function,processor,name,locate,function,processor,new,entries,add,new,entry,processor,class,replace,function,processor,name,replace,function,processor,new,entries,add,new,entry,processor,class,substring,function,processor,name,substring,function,processor,new,return,entries
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1536828374;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new))__        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        entries.add(new Entry(Processor.class, NamedDateTimeProcessor.NAME, NamedDateTimeProcessor::new))__        entries.add(new Entry(Processor.class, QuarterProcessor.NAME, QuarterProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        _        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringNumericProcessor.NAME, BinaryStringNumericProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringStringProcessor.NAME, BinaryStringStringProcessor::new))__        entries.add(new Entry(Processor.class, ConcatFunctionProcessor.NAME, ConcatFunctionProcessor::new))__        entries.add(new Entry(Processor.class, InsertFunctionProcessor.NAME, InsertFunctionProcessor::new))__        entries.add(new Entry(Processor.class, LocateFunctionProcessor.NAME, LocateFunctionProcessor::new))__        entries.add(new Entry(Processor.class, ReplaceFunctionProcessor.NAME, ReplaceFunctionProcessor::new))__        entries.add(new Entry(Processor.class, SubstringFunctionProcessor.NAME, SubstringFunctionProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,binary,math,processor,name,binary,math,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,named,date,time,processor,name,named,date,time,processor,new,entries,add,new,entry,processor,class,quarter,processor,name,quarter,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,entries,add,new,entry,processor,class,string,processor,name,string,processor,new,entries,add,new,entry,processor,class,binary,string,numeric,processor,name,binary,string,numeric,processor,new,entries,add,new,entry,processor,class,binary,string,string,processor,name,binary,string,string,processor,new,entries,add,new,entry,processor,class,concat,function,processor,name,concat,function,processor,new,entries,add,new,entry,processor,class,insert,function,processor,name,insert,function,processor,new,entries,add,new,entry,processor,class,locate,function,processor,name,locate,function,processor,new,entries,add,new,entry,processor,class,replace,function,processor,name,replace,function,processor,new,entries,add,new,entry,processor,class,substring,function,processor,name,substring,function,processor,new,return,entries
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1538170812;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new))__        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        entries.add(new Entry(Processor.class, NamedDateTimeProcessor.NAME, NamedDateTimeProcessor::new))__        entries.add(new Entry(Processor.class, QuarterProcessor.NAME, QuarterProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        _        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringNumericProcessor.NAME, BinaryStringNumericProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringStringProcessor.NAME, BinaryStringStringProcessor::new))__        entries.add(new Entry(Processor.class, ConcatFunctionProcessor.NAME, ConcatFunctionProcessor::new))__        entries.add(new Entry(Processor.class, InsertFunctionProcessor.NAME, InsertFunctionProcessor::new))__        entries.add(new Entry(Processor.class, LocateFunctionProcessor.NAME, LocateFunctionProcessor::new))__        entries.add(new Entry(Processor.class, ReplaceFunctionProcessor.NAME, ReplaceFunctionProcessor::new))__        entries.add(new Entry(Processor.class, SubstringFunctionProcessor.NAME, SubstringFunctionProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,comparison,processor,name,binary,comparison,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,binary,math,processor,name,binary,math,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,named,date,time,processor,name,named,date,time,processor,new,entries,add,new,entry,processor,class,quarter,processor,name,quarter,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,entries,add,new,entry,processor,class,string,processor,name,string,processor,new,entries,add,new,entry,processor,class,binary,string,numeric,processor,name,binary,string,numeric,processor,new,entries,add,new,entry,processor,class,binary,string,string,processor,name,binary,string,string,processor,new,entries,add,new,entry,processor,class,concat,function,processor,name,concat,function,processor,new,entries,add,new,entry,processor,class,insert,function,processor,name,insert,function,processor,new,entries,add,new,entry,processor,class,locate,function,processor,name,locate,function,processor,new,entries,add,new,entry,processor,class,replace,function,processor,name,replace,function,processor,new,entries,add,new,entry,processor,class,substring,function,processor,name,substring,function,processor,new,return,entries
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1541092382;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new))__        entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new))__        _        entries.add(new Entry(Processor.class, IsNotNullProcessor.NAME, IsNotNullProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new))__        _        entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new))__        entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new))__        _        entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new))____        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        entries.add(new Entry(Processor.class, NamedDateTimeProcessor.NAME, NamedDateTimeProcessor::new))__        entries.add(new Entry(Processor.class, QuarterProcessor.NAME, QuarterProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        _        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringNumericProcessor.NAME, BinaryStringNumericProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringStringProcessor.NAME, BinaryStringStringProcessor::new))__        entries.add(new Entry(Processor.class, ConcatFunctionProcessor.NAME, ConcatFunctionProcessor::new))__        entries.add(new Entry(Processor.class, InsertFunctionProcessor.NAME, InsertFunctionProcessor::new))__        entries.add(new Entry(Processor.class, LocateFunctionProcessor.NAME, LocateFunctionProcessor::new))__        entries.add(new Entry(Processor.class, ReplaceFunctionProcessor.NAME, ReplaceFunctionProcessor::new))__        entries.add(new Entry(Processor.class, SubstringFunctionProcessor.NAME, SubstringFunctionProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,logic,processor,name,binary,logic,processor,new,entries,add,new,entry,processor,class,not,processor,name,not,processor,new,entries,add,new,entry,processor,class,is,not,null,processor,name,is,not,null,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,binary,math,processor,name,binary,math,processor,new,entries,add,new,entry,processor,class,binary,comparison,processor,name,binary,comparison,processor,new,entries,add,new,entry,processor,class,in,processor,name,in,processor,new,entries,add,new,entry,processor,class,regex,processor,name,regex,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,named,date,time,processor,name,named,date,time,processor,new,entries,add,new,entry,processor,class,quarter,processor,name,quarter,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,entries,add,new,entry,processor,class,string,processor,name,string,processor,new,entries,add,new,entry,processor,class,binary,string,numeric,processor,name,binary,string,numeric,processor,new,entries,add,new,entry,processor,class,binary,string,string,processor,name,binary,string,string,processor,new,entries,add,new,entry,processor,class,concat,function,processor,name,concat,function,processor,new,entries,add,new,entry,processor,class,insert,function,processor,name,insert,function,processor,new,entries,add,new,entry,processor,class,locate,function,processor,name,locate,function,processor,new,entries,add,new,entry,processor,class,replace,function,processor,name,replace,function,processor,new,entries,add,new,entry,processor,class,substring,function,processor,name,substring,function,processor,new,return,entries
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1541502744;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new))__        entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new))__        _        entries.add(new Entry(Processor.class, CoalesceProcessor.NAME, CoalesceProcessor::new))__        entries.add(new Entry(Processor.class, IsNotNullProcessor.NAME, IsNotNullProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new))__        _        entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new))__        entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new))__        _        entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new))____        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        entries.add(new Entry(Processor.class, NamedDateTimeProcessor.NAME, NamedDateTimeProcessor::new))__        entries.add(new Entry(Processor.class, QuarterProcessor.NAME, QuarterProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        _        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringNumericProcessor.NAME, BinaryStringNumericProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringStringProcessor.NAME, BinaryStringStringProcessor::new))__        entries.add(new Entry(Processor.class, ConcatFunctionProcessor.NAME, ConcatFunctionProcessor::new))__        entries.add(new Entry(Processor.class, InsertFunctionProcessor.NAME, InsertFunctionProcessor::new))__        entries.add(new Entry(Processor.class, LocateFunctionProcessor.NAME, LocateFunctionProcessor::new))__        entries.add(new Entry(Processor.class, ReplaceFunctionProcessor.NAME, ReplaceFunctionProcessor::new))__        entries.add(new Entry(Processor.class, SubstringFunctionProcessor.NAME, SubstringFunctionProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,logic,processor,name,binary,logic,processor,new,entries,add,new,entry,processor,class,not,processor,name,not,processor,new,entries,add,new,entry,processor,class,coalesce,processor,name,coalesce,processor,new,entries,add,new,entry,processor,class,is,not,null,processor,name,is,not,null,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,binary,math,processor,name,binary,math,processor,new,entries,add,new,entry,processor,class,binary,comparison,processor,name,binary,comparison,processor,new,entries,add,new,entry,processor,class,in,processor,name,in,processor,new,entries,add,new,entry,processor,class,regex,processor,name,regex,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,named,date,time,processor,name,named,date,time,processor,new,entries,add,new,entry,processor,class,quarter,processor,name,quarter,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,entries,add,new,entry,processor,class,string,processor,name,string,processor,new,entries,add,new,entry,processor,class,binary,string,numeric,processor,name,binary,string,numeric,processor,new,entries,add,new,entry,processor,class,binary,string,string,processor,name,binary,string,string,processor,new,entries,add,new,entry,processor,class,concat,function,processor,name,concat,function,processor,new,entries,add,new,entry,processor,class,insert,function,processor,name,insert,function,processor,new,entries,add,new,entry,processor,class,locate,function,processor,name,locate,function,processor,new,entries,add,new,entry,processor,class,replace,function,processor,name,replace,function,processor,new,entries,add,new,entry,processor,class,substring,function,processor,name,substring,function,processor,new,return,entries
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1541759558;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new))__        entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new))__        _        entries.add(new Entry(Processor.class, CheckNullProcessor.NAME, CheckNullProcessor::new))__        entries.add(new Entry(Processor.class, CoalesceProcessor.NAME, CoalesceProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new))__        _        entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new))__        entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new))__        _        entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new))____        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        entries.add(new Entry(Processor.class, NamedDateTimeProcessor.NAME, NamedDateTimeProcessor::new))__        entries.add(new Entry(Processor.class, QuarterProcessor.NAME, QuarterProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        _        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringNumericProcessor.NAME, BinaryStringNumericProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringStringProcessor.NAME, BinaryStringStringProcessor::new))__        entries.add(new Entry(Processor.class, ConcatFunctionProcessor.NAME, ConcatFunctionProcessor::new))__        entries.add(new Entry(Processor.class, InsertFunctionProcessor.NAME, InsertFunctionProcessor::new))__        entries.add(new Entry(Processor.class, LocateFunctionProcessor.NAME, LocateFunctionProcessor::new))__        entries.add(new Entry(Processor.class, ReplaceFunctionProcessor.NAME, ReplaceFunctionProcessor::new))__        entries.add(new Entry(Processor.class, SubstringFunctionProcessor.NAME, SubstringFunctionProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,logic,processor,name,binary,logic,processor,new,entries,add,new,entry,processor,class,not,processor,name,not,processor,new,entries,add,new,entry,processor,class,check,null,processor,name,check,null,processor,new,entries,add,new,entry,processor,class,coalesce,processor,name,coalesce,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,binary,math,processor,name,binary,math,processor,new,entries,add,new,entry,processor,class,binary,comparison,processor,name,binary,comparison,processor,new,entries,add,new,entry,processor,class,in,processor,name,in,processor,new,entries,add,new,entry,processor,class,regex,processor,name,regex,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,named,date,time,processor,name,named,date,time,processor,new,entries,add,new,entry,processor,class,quarter,processor,name,quarter,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,entries,add,new,entry,processor,class,string,processor,name,string,processor,new,entries,add,new,entry,processor,class,binary,string,numeric,processor,name,binary,string,numeric,processor,new,entries,add,new,entry,processor,class,binary,string,string,processor,name,binary,string,string,processor,new,entries,add,new,entry,processor,class,concat,function,processor,name,concat,function,processor,new,entries,add,new,entry,processor,class,insert,function,processor,name,insert,function,processor,new,entries,add,new,entry,processor,class,locate,function,processor,name,locate,function,processor,new,entries,add,new,entry,processor,class,replace,function,processor,name,replace,function,processor,new,entries,add,new,entry,processor,class,substring,function,processor,name,substring,function,processor,new,return,entries
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1543007967;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new))__        entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new))__        _        entries.add(new Entry(Processor.class, CheckNullProcessor.NAME, CheckNullProcessor::new))__        entries.add(new Entry(Processor.class, CoalesceProcessor.NAME, CoalesceProcessor::new))__        entries.add(new Entry(Processor.class, NullIfProcessor.NAME, NullIfProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new))__        _        entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new))__        entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new))__        _        entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new))____        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        entries.add(new Entry(Processor.class, NamedDateTimeProcessor.NAME, NamedDateTimeProcessor::new))__        entries.add(new Entry(Processor.class, QuarterProcessor.NAME, QuarterProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        _        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringNumericProcessor.NAME, BinaryStringNumericProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringStringProcessor.NAME, BinaryStringStringProcessor::new))__        entries.add(new Entry(Processor.class, ConcatFunctionProcessor.NAME, ConcatFunctionProcessor::new))__        entries.add(new Entry(Processor.class, InsertFunctionProcessor.NAME, InsertFunctionProcessor::new))__        entries.add(new Entry(Processor.class, LocateFunctionProcessor.NAME, LocateFunctionProcessor::new))__        entries.add(new Entry(Processor.class, ReplaceFunctionProcessor.NAME, ReplaceFunctionProcessor::new))__        entries.add(new Entry(Processor.class, SubstringFunctionProcessor.NAME, SubstringFunctionProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,logic,processor,name,binary,logic,processor,new,entries,add,new,entry,processor,class,not,processor,name,not,processor,new,entries,add,new,entry,processor,class,check,null,processor,name,check,null,processor,new,entries,add,new,entry,processor,class,coalesce,processor,name,coalesce,processor,new,entries,add,new,entry,processor,class,null,if,processor,name,null,if,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,binary,math,processor,name,binary,math,processor,new,entries,add,new,entry,processor,class,binary,comparison,processor,name,binary,comparison,processor,new,entries,add,new,entry,processor,class,in,processor,name,in,processor,new,entries,add,new,entry,processor,class,regex,processor,name,regex,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,named,date,time,processor,name,named,date,time,processor,new,entries,add,new,entry,processor,class,quarter,processor,name,quarter,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,entries,add,new,entry,processor,class,string,processor,name,string,processor,new,entries,add,new,entry,processor,class,binary,string,numeric,processor,name,binary,string,numeric,processor,new,entries,add,new,entry,processor,class,binary,string,string,processor,name,binary,string,string,processor,new,entries,add,new,entry,processor,class,concat,function,processor,name,concat,function,processor,new,entries,add,new,entry,processor,class,insert,function,processor,name,insert,function,processor,new,entries,add,new,entry,processor,class,locate,function,processor,name,locate,function,processor,new,entries,add,new,entry,processor,class,replace,function,processor,name,replace,function,processor,new,entries,add,new,entry,processor,class,substring,function,processor,name,substring,function,processor,new,return,entries
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1543252896;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new))__        entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new))__        _        entries.add(new Entry(Processor.class, CheckNullProcessor.NAME, CheckNullProcessor::new))__        entries.add(new Entry(Processor.class, ConditionalProcessor.NAME, ConditionalProcessor::new))__        entries.add(new Entry(Processor.class, NullIfProcessor.NAME, NullIfProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new))__        _        entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new))__        entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new))__        _        entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new))____        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        entries.add(new Entry(Processor.class, NamedDateTimeProcessor.NAME, NamedDateTimeProcessor::new))__        entries.add(new Entry(Processor.class, QuarterProcessor.NAME, QuarterProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        _        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringNumericProcessor.NAME, BinaryStringNumericProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringStringProcessor.NAME, BinaryStringStringProcessor::new))__        entries.add(new Entry(Processor.class, ConcatFunctionProcessor.NAME, ConcatFunctionProcessor::new))__        entries.add(new Entry(Processor.class, InsertFunctionProcessor.NAME, InsertFunctionProcessor::new))__        entries.add(new Entry(Processor.class, LocateFunctionProcessor.NAME, LocateFunctionProcessor::new))__        entries.add(new Entry(Processor.class, ReplaceFunctionProcessor.NAME, ReplaceFunctionProcessor::new))__        entries.add(new Entry(Processor.class, SubstringFunctionProcessor.NAME, SubstringFunctionProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,logic,processor,name,binary,logic,processor,new,entries,add,new,entry,processor,class,not,processor,name,not,processor,new,entries,add,new,entry,processor,class,check,null,processor,name,check,null,processor,new,entries,add,new,entry,processor,class,conditional,processor,name,conditional,processor,new,entries,add,new,entry,processor,class,null,if,processor,name,null,if,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,binary,math,processor,name,binary,math,processor,new,entries,add,new,entry,processor,class,binary,comparison,processor,name,binary,comparison,processor,new,entries,add,new,entry,processor,class,in,processor,name,in,processor,new,entries,add,new,entry,processor,class,regex,processor,name,regex,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,named,date,time,processor,name,named,date,time,processor,new,entries,add,new,entry,processor,class,quarter,processor,name,quarter,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,entries,add,new,entry,processor,class,string,processor,name,string,processor,new,entries,add,new,entry,processor,class,binary,string,numeric,processor,name,binary,string,numeric,processor,new,entries,add,new,entry,processor,class,binary,string,string,processor,name,binary,string,string,processor,new,entries,add,new,entry,processor,class,concat,function,processor,name,concat,function,processor,new,entries,add,new,entry,processor,class,insert,function,processor,name,insert,function,processor,new,entries,add,new,entry,processor,class,locate,function,processor,name,locate,function,processor,new,entries,add,new,entry,processor,class,replace,function,processor,name,replace,function,processor,new,entries,add,new,entry,processor,class,substring,function,processor,name,substring,function,processor,new,return,entries
Processors -> public static List<NamedWriteableRegistry.Entry> getNamedWriteables();1544574542;All of the named writeables needed to deserialize the instances of_{@linkplain Processors}.;public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {_        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>()__        _        entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new))__        entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new))__        entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new))__        entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new))__        entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new))__        entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new))__        _        entries.add(new Entry(Processor.class, CheckNullProcessor.NAME, CheckNullProcessor::new))__        entries.add(new Entry(Processor.class, ConditionalProcessor.NAME, ConditionalProcessor::new))__        entries.add(new Entry(Processor.class, NullIfProcessor.NAME, NullIfProcessor::new))___        _        entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new))__        entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new))__        _        entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new))__        entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new))__        _        entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new))____        _        entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new))__        entries.add(new Entry(Processor.class, NamedDateTimeProcessor.NAME, NamedDateTimeProcessor::new))__        entries.add(new Entry(Processor.class, NonIsoDateTimeProcessor.NAME, NonIsoDateTimeProcessor::new))__        entries.add(new Entry(Processor.class, QuarterProcessor.NAME, QuarterProcessor::new))__        _        entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new))__        _        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringNumericProcessor.NAME, BinaryStringNumericProcessor::new))__        entries.add(new Entry(Processor.class, BinaryStringStringProcessor.NAME, BinaryStringStringProcessor::new))__        entries.add(new Entry(Processor.class, ConcatFunctionProcessor.NAME, ConcatFunctionProcessor::new))__        entries.add(new Entry(Processor.class, InsertFunctionProcessor.NAME, InsertFunctionProcessor::new))__        entries.add(new Entry(Processor.class, LocateFunctionProcessor.NAME, LocateFunctionProcessor::new))__        entries.add(new Entry(Processor.class, ReplaceFunctionProcessor.NAME, ReplaceFunctionProcessor::new))__        entries.add(new Entry(Processor.class, SubstringFunctionProcessor.NAME, SubstringFunctionProcessor::new))__        return entries__    };all,of,the,named,writeables,needed,to,deserialize,the,instances,of,linkplain,processors;public,static,list,named,writeable,registry,entry,get,named,writeables,list,named,writeable,registry,entry,entries,new,array,list,entries,add,new,entry,processor,class,constant,processor,name,constant,processor,new,entries,add,new,entry,processor,class,hit,extractor,processor,name,hit,extractor,processor,new,entries,add,new,entry,processor,class,bucket,extractor,processor,name,bucket,extractor,processor,new,entries,add,new,entry,processor,class,cast,processor,name,cast,processor,new,entries,add,new,entry,processor,class,chaining,processor,name,chaining,processor,new,entries,add,new,entry,processor,class,binary,logic,processor,name,binary,logic,processor,new,entries,add,new,entry,processor,class,not,processor,name,not,processor,new,entries,add,new,entry,processor,class,check,null,processor,name,check,null,processor,new,entries,add,new,entry,processor,class,conditional,processor,name,conditional,processor,new,entries,add,new,entry,processor,class,null,if,processor,name,null,if,processor,new,entries,add,new,entry,processor,class,binary,arithmetic,processor,name,binary,arithmetic,processor,new,entries,add,new,entry,processor,class,unary,arithmetic,processor,name,unary,arithmetic,processor,new,entries,add,new,entry,processor,class,binary,math,processor,name,binary,math,processor,new,entries,add,new,entry,processor,class,binary,comparison,processor,name,binary,comparison,processor,new,entries,add,new,entry,processor,class,in,processor,name,in,processor,new,entries,add,new,entry,processor,class,regex,processor,name,regex,processor,new,entries,add,new,entry,processor,class,date,time,processor,name,date,time,processor,new,entries,add,new,entry,processor,class,named,date,time,processor,name,named,date,time,processor,new,entries,add,new,entry,processor,class,non,iso,date,time,processor,name,non,iso,date,time,processor,new,entries,add,new,entry,processor,class,quarter,processor,name,quarter,processor,new,entries,add,new,entry,processor,class,math,processor,name,math,processor,new,entries,add,new,entry,processor,class,string,processor,name,string,processor,new,entries,add,new,entry,processor,class,binary,string,numeric,processor,name,binary,string,numeric,processor,new,entries,add,new,entry,processor,class,binary,string,string,processor,name,binary,string,string,processor,new,entries,add,new,entry,processor,class,concat,function,processor,name,concat,function,processor,new,entries,add,new,entry,processor,class,insert,function,processor,name,insert,function,processor,new,entries,add,new,entry,processor,class,locate,function,processor,name,locate,function,processor,new,entries,add,new,entry,processor,class,replace,function,processor,name,replace,function,processor,new,entries,add,new,entry,processor,class,substring,function,processor,name,substring,function,processor,new,return,entries
