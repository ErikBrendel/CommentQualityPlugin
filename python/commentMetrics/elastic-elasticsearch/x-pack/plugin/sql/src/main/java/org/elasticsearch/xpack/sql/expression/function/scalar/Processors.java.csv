commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;46;/**  * All of the named writeables needed to deserialize the instances of  * {@linkplain Processors}.  */ ;/**  * All of the named writeables needed to deserialize the instances of  * {@linkplain Processors}.  */ public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {     List<NamedWriteableRegistry.Entry> entries = new ArrayList<>().     // base     entries.add(new Entry(Processor.class, ConstantProcessor.NAME, ConstantProcessor::new)).     entries.add(new Entry(Processor.class, HitExtractorProcessor.NAME, HitExtractorProcessor::new)).     entries.add(new Entry(Processor.class, BucketExtractorProcessor.NAME, BucketExtractorProcessor::new)).     entries.add(new Entry(Processor.class, CastProcessor.NAME, CastProcessor::new)).     entries.add(new Entry(Processor.class, ChainingProcessor.NAME, ChainingProcessor::new)).     // logical     entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new)).     entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new)).     // null     entries.add(new Entry(Processor.class, CheckNullProcessor.NAME, CheckNullProcessor::new)).     entries.add(new Entry(Processor.class, ConditionalProcessor.NAME, ConditionalProcessor::new)).     entries.add(new Entry(Processor.class, NullIfProcessor.NAME, NullIfProcessor::new)).     // arithmetic     entries.add(new Entry(Processor.class, BinaryArithmeticProcessor.NAME, BinaryArithmeticProcessor::new)).     entries.add(new Entry(Processor.class, UnaryArithmeticProcessor.NAME, UnaryArithmeticProcessor::new)).     entries.add(new Entry(Processor.class, BinaryMathProcessor.NAME, BinaryMathProcessor::new)).     // comparators     entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new)).     entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new)).     // regex     entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new)).     // datetime     entries.add(new Entry(Processor.class, DateTimeProcessor.NAME, DateTimeProcessor::new)).     entries.add(new Entry(Processor.class, NamedDateTimeProcessor.NAME, NamedDateTimeProcessor::new)).     entries.add(new Entry(Processor.class, NonIsoDateTimeProcessor.NAME, NonIsoDateTimeProcessor::new)).     entries.add(new Entry(Processor.class, QuarterProcessor.NAME, QuarterProcessor::new)).     // math     entries.add(new Entry(Processor.class, MathProcessor.NAME, MathProcessor::new)).     // string     entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new)).     entries.add(new Entry(Processor.class, BinaryStringNumericProcessor.NAME, BinaryStringNumericProcessor::new)).     entries.add(new Entry(Processor.class, BinaryStringStringProcessor.NAME, BinaryStringStringProcessor::new)).     entries.add(new Entry(Processor.class, ConcatFunctionProcessor.NAME, ConcatFunctionProcessor::new)).     entries.add(new Entry(Processor.class, InsertFunctionProcessor.NAME, InsertFunctionProcessor::new)).     entries.add(new Entry(Processor.class, LocateFunctionProcessor.NAME, LocateFunctionProcessor::new)).     entries.add(new Entry(Processor.class, ReplaceFunctionProcessor.NAME, ReplaceFunctionProcessor::new)).     entries.add(new Entry(Processor.class, SubstringFunctionProcessor.NAME, SubstringFunctionProcessor::new)).     return entries. }
false;public,static;2;7;;public static List<Object> process(List<Processor> processors, Object input) {     List<Object> values = new ArrayList<>(processors.size()).     for (Processor p : processors) {         values.add(p.process(input)).     }     return values. }
