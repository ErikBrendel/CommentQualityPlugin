commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String index() {     return index. }
false;public;0;3;;public LikePattern pattern() {     return pattern. }
false;protected;0;4;;@Override protected NodeInfo<ShowColumns> info() {     return NodeInfo.create(this, ShowColumns::new, index, pattern). }
false;public;0;6;;@Override public List<Attribute> output() {     return asList(new FieldAttribute(source(), "column", new KeywordEsField("column")), new FieldAttribute(source(), "type", new KeywordEsField("type")), new FieldAttribute(source(), "mapping", new KeywordEsField("mapping"))). }
false;public;2;15;;@Override public void execute(SqlSession session, ActionListener<SchemaRowSet> listener) {     String idx = index != null ? index : (pattern != null ? pattern.asIndexNameWildcard() : "*").     String regex = pattern != null ? pattern.asJavaRegex() : null.     session.indexResolver().resolveAsMergedMapping(idx, regex, ActionListener.wrap(indexResult -> {         List<List<?>> rows = emptyList().         if (indexResult.isValid()) {             rows = new ArrayList<>().             fillInRows(indexResult.get().mapping(), null, rows).         }         listener.onResponse(Rows.of(output(), rows)).     }, listener::onFailure)). }
false;private;3;15;;private void fillInRows(Map<String, EsField> mapping, String prefix, List<List<?>> rows) {     for (Entry<String, EsField> e : mapping.entrySet()) {         EsField field = e.getValue().         DataType dt = field.getDataType().         String name = e.getKey().         if (dt != null) {             // show only fields that exist in ES             rows.add(asList(prefix != null ? prefix + "." + name : name, dt.sqlName(), dt.typeName)).             if (field.getProperties().isEmpty() == false) {                 String newPrefix = prefix != null ? prefix + "." + name : name.                 fillInRows(field.getProperties(), newPrefix, rows).             }         }     } }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(index, pattern). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ShowColumns other = (ShowColumns) obj.     return Objects.equals(index, other.index) && Objects.equals(pattern, other.pattern). }
