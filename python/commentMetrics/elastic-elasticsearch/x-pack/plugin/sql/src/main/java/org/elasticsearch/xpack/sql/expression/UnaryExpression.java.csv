commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;7;;@Override public final UnaryExpression replaceChildren(List<Expression> newChildren) {     if (newChildren.size() != 1) {         throw new IllegalArgumentException("expected [1] child but received [" + newChildren.size() + "]").     }     return replaceChild(newChildren.get(0)). }
false;protected,abstract;1;1;;protected abstract UnaryExpression replaceChild(Expression newChild).
false;public;0;3;;public Expression child() {     return child. }
false;public;0;4;;@Override public boolean foldable() {     return child.foldable(). }
false;public;0;4;;@Override public Nullability nullable() {     return child.nullable(). }
false;public;0;4;;@Override public boolean resolved() {     return child.resolved(). }
false;public;0;4;;@Override public DataType dataType() {     return child.dataType(). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(child). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     UnaryExpression other = (UnaryExpression) obj.     return Objects.equals(child, other.child). }
