commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String pattern() {     return pattern. }
false;public;0;3;;public char escape() {     return escape. }
true;public;0;3;/**  * Returns the pattern in (Java) regex format.  */ ;/**  * Returns the pattern in (Java) regex format.  */ public String asJavaRegex() {     return regex. }
true;public;0;3;/**  * Returns the pattern in (Lucene) wildcard format.  */ ;/**  * Returns the pattern in (Lucene) wildcard format.  */ public String asLuceneWildcard() {     return wildcard. }
true;public;0;3;/**  * Returns the pattern in (IndexNameExpressionResolver) wildcard format.  */ ;/**  * Returns the pattern in (IndexNameExpressionResolver) wildcard format.  */ public String asIndexNameWildcard() {     return indexNameWildcard. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(pattern, escape). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     LikePattern other = (LikePattern) obj.     return Objects.equals(pattern, other.pattern) && escape == other.escape. }
