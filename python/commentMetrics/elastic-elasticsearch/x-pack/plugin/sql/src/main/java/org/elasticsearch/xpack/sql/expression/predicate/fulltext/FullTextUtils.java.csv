commented;modifiers;parameterAmount;loc;comment;code
false;static;2;21;;static Map<String, String> parseSettings(String options, Source source) {     if (!Strings.hasText(options)) {         return emptyMap().     }     String[] list = Strings.delimitedListToStringArray(options, DELIMITER).     Map<String, String> op = new LinkedHashMap<>(list.length).     for (String entry : list) {         String[] split = splitInTwo(entry, "=").         if (split == null) {             throw new ParsingException(source, "Cannot parse entry {} in options {}", entry, options).         }         String previous = op.put(split[0], split[1]).         if (previous != null) {             throw new ParsingException(source, "Duplicate option {} detected in options {}", entry, options).         }     }     return op. }
false;static;2;3;;static Map<String, Float> parseFields(Map<String, String> options, Source source) {     return parseFields(options.get("fields"), source). }
false;static;2;30;;static Map<String, Float> parseFields(String fieldString, Source source) {     if (!Strings.hasText(fieldString)) {         return emptyMap().     }     Set<String> fieldNames = Strings.commaDelimitedListToSet(fieldString).     Float defaultBoost = Float.valueOf(1.0f).     Map<String, Float> fields = new LinkedHashMap<>().     for (String fieldName : fieldNames) {         if (fieldName.contains("^")) {             String[] split = splitInTwo(fieldName, "^").             if (split == null) {                 fields.put(fieldName, defaultBoost).             } else {                 try {                     fields.put(split[0], Float.parseFloat(split[1])).                 } catch (NumberFormatException nfe) {                     throw new ParsingException(source, "Cannot parse boosting for {}", fieldName).                 }             }         } else {             fields.put(fieldName, defaultBoost).         }     }     return fields. }
false;private,static;2;7;;private static String[] splitInTwo(String string, String delimiter) {     String[] split = Strings.split(string, delimiter).     if (split == null || split.length != 2) {         return null.     }     return split. }
false;static;2;4;;static FullTextPredicate.Operator operator(Map<String, String> options, String key) {     String value = options.get(key).     return value != null ? Operator.valueOf(value.toUpperCase(Locale.ROOT)) : null. }
