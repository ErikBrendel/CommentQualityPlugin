commented;modifiers;parameterAmount;loc;comment;code
false;private;1;3;;private SqlSession newSession(Configuration cfg) {     return new SqlSession(cfg, client, functionRegistry, indexResolver, preAnalyzer, verifier, optimizer, planner, this). }
false;public;4;24;;public void searchSource(Configuration cfg, String sql, List<SqlTypedParamValue> params, ActionListener<SearchSourceBuilder> listener) {     metrics.translate().     newSession(cfg).sqlExecutable(sql, params, wrap(exec -> {         if (exec instanceof EsQueryExec) {             EsQueryExec e = (EsQueryExec) exec.             listener.onResponse(SourceGenerator.sourceBuilder(e.queryContainer(), cfg.filter(), cfg.pageSize())).         } else // try to provide a better resolution of what failed         {             String message = null.             if (exec instanceof LocalExec) {                 message = "Cannot generate a query DSL for an SQL query that either " + "its WHERE clause evaluates to FALSE or doesn't operate on a table (missing a FROM clause)".             } else if (exec instanceof CommandExec) {                 message = "Cannot generate a query DSL for a special SQL command " + "(e.g.: DESCRIBE, SHOW)".             } else {                 message = "Cannot generate a query DSL".             }             listener.onFailure(new PlanningException(message + ", sql statement: [{}]", sql)).         }     }, listener::onFailure)). }
false;public;4;9;;public void sql(Configuration cfg, String sql, List<SqlTypedParamValue> params, ActionListener<SchemaRowSet> listener) {     QueryMetric metric = QueryMetric.from(cfg.mode(), cfg.clientId()).     metrics.total(metric).     newSession(cfg).sql(sql, params, wrap(listener::onResponse, ex -> {         metrics.failed(metric).         listener.onFailure(ex).     })). }
false;public;3;10;;public void nextPage(Configuration cfg, Cursor cursor, ActionListener<RowSet> listener) {     QueryMetric metric = QueryMetric.from(cfg.mode(), cfg.clientId()).     metrics.total(metric).     metrics.paging(metric).     cursor.nextPage(cfg, client, writableRegistry, wrap(listener::onResponse, ex -> {         metrics.failed(metric).         listener.onFailure(ex).     })). }
false;public;3;3;;public void cleanCursor(Configuration cfg, Cursor cursor, ActionListener<Boolean> listener) {     cursor.clear(cfg, client, listener). }
false;public;0;3;;public Metrics metrics() {     return this.metrics. }
