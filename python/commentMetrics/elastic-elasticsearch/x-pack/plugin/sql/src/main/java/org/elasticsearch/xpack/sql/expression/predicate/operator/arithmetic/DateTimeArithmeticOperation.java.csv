commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;31;;@Override protected TypeResolution resolveType() {     if (!childrenResolved()) {         return new TypeResolution("Unresolved children").     }     // arithmetic operation can work on:     // 1. numbers     // 2. intervals (of compatible types)     // 3. dates and intervals     // 4. single unit intervals and numbers     DataType l = left().dataType().     DataType r = right().dataType().     // 1. both are numbers     if (l.isNumeric() && r.isNumeric()) {         return TypeResolution.TYPE_RESOLVED.     }     // 2. 3. 4. intervals     if ((DataTypes.isInterval(l) || DataTypes.isInterval(r))) {         if (DataTypeConversion.commonType(l, r) == null) {             return new TypeResolution(format("[{}] has arguments with incompatible types [{}] and [{}]", symbol(), l, r)).         } else {             return resolveWithIntervals().         }     }     // fall-back to default checks     return super.resolveType(). }
false;protected;0;3;;protected TypeResolution resolveWithIntervals() {     return TypeResolution.TYPE_RESOLVED. }
