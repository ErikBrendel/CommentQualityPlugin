commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<Score> info() {     return NodeInfo.create(this). }
false;public;1;4;;@Override public Expression replaceChildren(List<Expression> newChildren) {     throw new UnsupportedOperationException("this type of node doesn't have any children to replace"). }
false;public;0;4;;@Override public DataType dataType() {     return DataType.FLOAT. }
false;public;0;4;;@Override public Attribute toAttribute() {     return new ScoreAttribute(source()). }
false;public;1;8;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     Score other = (Score) obj.     return source().equals(other.source()). }
false;public;0;4;;@Override public int hashCode() {     return source().hashCode(). }
false;protected;0;4;;@Override protected Pipe makePipe() {     throw new SqlIllegalArgumentException("Scoring cannot be computed on the client"). }
false;public;0;4;;@Override public ScriptTemplate asScript() {     throw new SqlIllegalArgumentException("Scoring cannot be scripted"). }
