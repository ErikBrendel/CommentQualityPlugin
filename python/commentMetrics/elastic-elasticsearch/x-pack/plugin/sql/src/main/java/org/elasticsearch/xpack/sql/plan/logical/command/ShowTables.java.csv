commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<ShowTables> info() {     return NodeInfo.create(this, ShowTables::new, index, pattern). }
false;public;0;3;;public String index() {     return index. }
false;public;0;3;;public LikePattern pattern() {     return pattern. }
false;public;0;4;;@Override public List<Attribute> output() {     return asList(keyword("name"), keyword("type")). }
false;public,final;2;10;;@Override public final void execute(SqlSession session, ActionListener<SchemaRowSet> listener) {     String idx = index != null ? index : (pattern != null ? pattern.asIndexNameWildcard() : "*").     String regex = pattern != null ? pattern.asJavaRegex() : null.     session.indexResolver().resolveNames(idx, regex, null, ActionListener.wrap(result -> {         listener.onResponse(Rows.of(output(), result.stream().map(t -> asList(t.name(), t.type().toSql())).collect(toList()))).     }, listener::onFailure)). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(index, pattern). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ShowTables other = (ShowTables) obj.     return Objects.equals(index, other.index) && Objects.equals(pattern, other.pattern). }
