commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<Cast> info() {     return NodeInfo.create(this, Cast::new, field(), dataType). }
false;protected;1;4;;@Override protected UnaryScalarFunction replaceChild(Expression newChild) {     return new Cast(source(), newChild, dataType). }
false;public;0;3;;public DataType from() {     return field().dataType(). }
false;public;0;3;;public DataType to() {     return dataType. }
false;public;0;4;;@Override public DataType dataType() {     return dataType. }
false;public;0;4;;@Override public boolean foldable() {     return field().foldable(). }
false;public;0;4;;@Override public Object fold() {     return DataTypeConversion.convert(field().fold(), dataType). }
false;public;0;7;;@Override public Nullability nullable() {     if (DataTypes.isNull(from())) {         return Nullability.TRUE.     }     return field().nullable(). }
false;protected;0;6;;@Override protected TypeResolution resolveType() {     return DataTypeConversion.canConvert(from(), to()) ? TypeResolution.TYPE_RESOLVED : new TypeResolution("Cannot cast [" + from() + "] to [" + to() + "]"). }
false;protected;0;4;;@Override protected Processor makeProcessor() {     return new CastProcessor(DataTypeConversion.conversionFor(from(), to())). }
false;public;0;11;;@Override public ScriptTemplate asScript() {     ScriptTemplate fieldAsScript = asScript(field()).     return new ScriptTemplate(formatTemplate(format("{sql}.", "cast({},{})", fieldAsScript.template())), paramsBuilder().script(fieldAsScript.params()).variable(dataType.name()).build(), dataType()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), dataType). }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || obj.getClass() != getClass()) {         return false.     }     Cast other = (Cast) obj.     return Objects.equals(dataType, other.dataType()) && Objects.equals(field(), other.field()). }
