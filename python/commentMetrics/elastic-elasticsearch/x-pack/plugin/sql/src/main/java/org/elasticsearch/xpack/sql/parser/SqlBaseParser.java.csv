commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override @Deprecated public String[] getTokenNames() {     return tokenNames. }
false;public;0;5;;@Override public Vocabulary getVocabulary() {     return VOCABULARY. }
false;public;0;2;;@Override public String getGrammarFileName() {     return "SqlBase.g4". }
false;public;0;2;;@Override public String[] getRuleNames() {     return ruleNames. }
false;public;0;2;;@Override public String getSerializedATN() {     return _serializedATN. }
false;public;0;2;;@Override public ATN getATN() {     return _ATN. }
false;public;0;3;;public StatementContext statement() {     return getRuleContext(StatementContext.class, 0). }
false;public;0;1;;public TerminalNode EOF() {     return getToken(SqlBaseParser.EOF, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_singleStatement. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterSingleStatement(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitSingleStatement(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitSingleStatement(this).     else         return visitor.visitChildren(this). }
false;public,final;0;22;;public final SingleStatementContext singleStatement() throws RecognitionException {     SingleStatementContext _localctx = new SingleStatementContext(_ctx, getState()).     enterRule(_localctx, 0, RULE_singleStatement).     try {         enterOuterAlt(_localctx, 1).         {             setState(108).             statement().             setState(109).             match(EOF).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode EOF() {     return getToken(SqlBaseParser.EOF, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_singleExpression. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterSingleExpression(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitSingleExpression(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitSingleExpression(this).     else         return visitor.visitChildren(this). }
false;public,final;0;22;;public final SingleExpressionContext singleExpression() throws RecognitionException {     SingleExpressionContext _localctx = new SingleExpressionContext(_ctx, getState()).     enterRule(_localctx, 2, RULE_singleExpression).     try {         enterOuterAlt(_localctx, 1).         {             setState(111).             expression().             setState(112).             match(EOF).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_statement. }
false;public;1;3;;public void copyFrom(StatementContext ctx) {     super.copyFrom(ctx). }
false;public;0;1;;public TerminalNode EXPLAIN() {     return getToken(SqlBaseParser.EXPLAIN, 0). }
false;public;0;3;;public StatementContext statement() {     return getRuleContext(StatementContext.class, 0). }
false;public;0;1;;public List<TerminalNode> PLAN() {     return getTokens(SqlBaseParser.PLAN). }
false;public;1;3;;public TerminalNode PLAN(int i) {     return getToken(SqlBaseParser.PLAN, i). }
false;public;0;1;;public List<TerminalNode> FORMAT() {     return getTokens(SqlBaseParser.FORMAT). }
false;public;1;3;;public TerminalNode FORMAT(int i) {     return getToken(SqlBaseParser.FORMAT, i). }
false;public;0;1;;public List<TerminalNode> VERIFY() {     return getTokens(SqlBaseParser.VERIFY). }
false;public;1;3;;public TerminalNode VERIFY(int i) {     return getToken(SqlBaseParser.VERIFY, i). }
false;public;0;3;;public List<BooleanValueContext> booleanValue() {     return getRuleContexts(BooleanValueContext.class). }
false;public;1;3;;public BooleanValueContext booleanValue(int i) {     return getRuleContext(BooleanValueContext.class, i). }
false;public;0;1;;public List<TerminalNode> PARSED() {     return getTokens(SqlBaseParser.PARSED). }
false;public;1;3;;public TerminalNode PARSED(int i) {     return getToken(SqlBaseParser.PARSED, i). }
false;public;0;1;;public List<TerminalNode> ANALYZED() {     return getTokens(SqlBaseParser.ANALYZED). }
false;public;1;3;;public TerminalNode ANALYZED(int i) {     return getToken(SqlBaseParser.ANALYZED, i). }
false;public;0;1;;public List<TerminalNode> OPTIMIZED() {     return getTokens(SqlBaseParser.OPTIMIZED). }
false;public;1;3;;public TerminalNode OPTIMIZED(int i) {     return getToken(SqlBaseParser.OPTIMIZED, i). }
false;public;0;1;;public List<TerminalNode> MAPPED() {     return getTokens(SqlBaseParser.MAPPED). }
false;public;1;3;;public TerminalNode MAPPED(int i) {     return getToken(SqlBaseParser.MAPPED, i). }
false;public;0;1;;public List<TerminalNode> EXECUTABLE() {     return getTokens(SqlBaseParser.EXECUTABLE). }
false;public;1;3;;public TerminalNode EXECUTABLE(int i) {     return getToken(SqlBaseParser.EXECUTABLE, i). }
false;public;0;1;;public List<TerminalNode> ALL() {     return getTokens(SqlBaseParser.ALL). }
false;public;1;3;;public TerminalNode ALL(int i) {     return getToken(SqlBaseParser.ALL, i). }
false;public;0;1;;public List<TerminalNode> TEXT() {     return getTokens(SqlBaseParser.TEXT). }
false;public;1;3;;public TerminalNode TEXT(int i) {     return getToken(SqlBaseParser.TEXT, i). }
false;public;0;1;;public List<TerminalNode> GRAPHVIZ() {     return getTokens(SqlBaseParser.GRAPHVIZ). }
false;public;1;3;;public TerminalNode GRAPHVIZ(int i) {     return getToken(SqlBaseParser.GRAPHVIZ, i). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterExplain(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitExplain(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitExplain(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode SYS() {     return getToken(SqlBaseParser.SYS, 0). }
false;public;0;1;;public TerminalNode COLUMNS() {     return getToken(SqlBaseParser.COLUMNS, 0). }
false;public;0;1;;public TerminalNode CATALOG() {     return getToken(SqlBaseParser.CATALOG, 0). }
false;public;0;1;;public TerminalNode TABLE() {     return getToken(SqlBaseParser.TABLE, 0). }
false;public;0;3;;public StringContext string() {     return getRuleContext(StringContext.class, 0). }
false;public;0;3;;public List<LikePatternContext> likePattern() {     return getRuleContexts(LikePatternContext.class). }
false;public;1;3;;public LikePatternContext likePattern(int i) {     return getRuleContext(LikePatternContext.class, i). }
false;public;0;3;;public TableIdentifierContext tableIdentifier() {     return getRuleContext(TableIdentifierContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterSysColumns(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitSysColumns(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitSysColumns(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode SYS() {     return getToken(SqlBaseParser.SYS, 0). }
false;public;0;1;;public TerminalNode TYPES() {     return getToken(SqlBaseParser.TYPES, 0). }
false;public;0;3;;public NumberContext number() {     return getRuleContext(NumberContext.class, 0). }
false;public;0;1;;public TerminalNode PLUS() {     return getToken(SqlBaseParser.PLUS, 0). }
false;public;0;1;;public TerminalNode MINUS() {     return getToken(SqlBaseParser.MINUS, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterSysTypes(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitSysTypes(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitSysTypes(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode DEBUG() {     return getToken(SqlBaseParser.DEBUG, 0). }
false;public;0;3;;public StatementContext statement() {     return getRuleContext(StatementContext.class, 0). }
false;public;0;1;;public List<TerminalNode> PLAN() {     return getTokens(SqlBaseParser.PLAN). }
false;public;1;3;;public TerminalNode PLAN(int i) {     return getToken(SqlBaseParser.PLAN, i). }
false;public;0;1;;public List<TerminalNode> FORMAT() {     return getTokens(SqlBaseParser.FORMAT). }
false;public;1;3;;public TerminalNode FORMAT(int i) {     return getToken(SqlBaseParser.FORMAT, i). }
false;public;0;1;;public List<TerminalNode> ANALYZED() {     return getTokens(SqlBaseParser.ANALYZED). }
false;public;1;3;;public TerminalNode ANALYZED(int i) {     return getToken(SqlBaseParser.ANALYZED, i). }
false;public;0;1;;public List<TerminalNode> OPTIMIZED() {     return getTokens(SqlBaseParser.OPTIMIZED). }
false;public;1;3;;public TerminalNode OPTIMIZED(int i) {     return getToken(SqlBaseParser.OPTIMIZED, i). }
false;public;0;1;;public List<TerminalNode> TEXT() {     return getTokens(SqlBaseParser.TEXT). }
false;public;1;3;;public TerminalNode TEXT(int i) {     return getToken(SqlBaseParser.TEXT, i). }
false;public;0;1;;public List<TerminalNode> GRAPHVIZ() {     return getTokens(SqlBaseParser.GRAPHVIZ). }
false;public;1;3;;public TerminalNode GRAPHVIZ(int i) {     return getToken(SqlBaseParser.GRAPHVIZ, i). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterDebug(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitDebug(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitDebug(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public QueryContext query() {     return getRuleContext(QueryContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterStatementDefault(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitStatementDefault(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitStatementDefault(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode SYS() {     return getToken(SqlBaseParser.SYS, 0). }
false;public;0;1;;public TerminalNode TABLES() {     return getToken(SqlBaseParser.TABLES, 0). }
false;public;0;1;;public TerminalNode CATALOG() {     return getToken(SqlBaseParser.CATALOG, 0). }
false;public;0;1;;public TerminalNode TYPE() {     return getToken(SqlBaseParser.TYPE, 0). }
false;public;0;3;;public List<StringContext> string() {     return getRuleContexts(StringContext.class). }
false;public;1;3;;public StringContext string(int i) {     return getRuleContext(StringContext.class, i). }
false;public;0;3;;public List<LikePatternContext> likePattern() {     return getRuleContexts(LikePatternContext.class). }
false;public;1;3;;public LikePatternContext likePattern(int i) {     return getRuleContext(LikePatternContext.class, i). }
false;public;0;3;;public TableIdentifierContext tableIdentifier() {     return getRuleContext(TableIdentifierContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterSysTables(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitSysTables(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitSysTables(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode SHOW() {     return getToken(SqlBaseParser.SHOW, 0). }
false;public;0;1;;public TerminalNode FUNCTIONS() {     return getToken(SqlBaseParser.FUNCTIONS, 0). }
false;public;0;3;;public LikePatternContext likePattern() {     return getRuleContext(LikePatternContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterShowFunctions(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitShowFunctions(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitShowFunctions(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode SHOW() {     return getToken(SqlBaseParser.SHOW, 0). }
false;public;0;1;;public TerminalNode TABLES() {     return getToken(SqlBaseParser.TABLES, 0). }
false;public;0;3;;public LikePatternContext likePattern() {     return getRuleContext(LikePatternContext.class, 0). }
false;public;0;3;;public TableIdentifierContext tableIdentifier() {     return getRuleContext(TableIdentifierContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterShowTables(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitShowTables(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitShowTables(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode SHOW() {     return getToken(SqlBaseParser.SHOW, 0). }
false;public;0;1;;public TerminalNode SCHEMAS() {     return getToken(SqlBaseParser.SCHEMAS, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterShowSchemas(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitShowSchemas(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitShowSchemas(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode SHOW() {     return getToken(SqlBaseParser.SHOW, 0). }
false;public;0;1;;public TerminalNode COLUMNS() {     return getToken(SqlBaseParser.COLUMNS, 0). }
false;public;0;1;;public TerminalNode FROM() {     return getToken(SqlBaseParser.FROM, 0). }
false;public;0;1;;public TerminalNode IN() {     return getToken(SqlBaseParser.IN, 0). }
false;public;0;3;;public LikePatternContext likePattern() {     return getRuleContext(LikePatternContext.class, 0). }
false;public;0;3;;public TableIdentifierContext tableIdentifier() {     return getRuleContext(TableIdentifierContext.class, 0). }
false;public;0;1;;public TerminalNode DESCRIBE() {     return getToken(SqlBaseParser.DESCRIBE, 0). }
false;public;0;1;;public TerminalNode DESC() {     return getToken(SqlBaseParser.DESC, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterShowColumns(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitShowColumns(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitShowColumns(this).     else         return visitor.visitChildren(this). }
false;public,final;0;597;;public final StatementContext statement() throws RecognitionException {     StatementContext _localctx = new StatementContext(_ctx, getState()).     enterRule(_localctx, 4, RULE_statement).     int _la.     try {         setState(215).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 19, _ctx)) {             case 1:                 _localctx = new StatementDefaultContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(114).                     query().                 }                 break.             case 2:                 _localctx = new ExplainContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(115).                     match(EXPLAIN).                     setState(129).                     _errHandler.sync(this).                     switch(getInterpreter().adaptivePredict(_input, 2, _ctx)) {                         case 1:                             {                                 setState(116).                                 match(T__0).                                 setState(125).                                 _errHandler.sync(this).                                 _la = _input.LA(1).                                 while (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (FORMAT - 34)) | (1L << (PLAN - 34)) | (1L << (VERIFY - 34)))) != 0)) {                                     {                                         setState(123).                                         switch(_input.LA(1)) {                                             case PLAN:                                                 {                                                     setState(117).                                                     match(PLAN).                                                     setState(118).                                                     ((ExplainContext) _localctx).type = _input.LT(1).                                                     _la = _input.LA(1).                                                     if (!(((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & ((1L << (ALL - 5)) | (1L << (ANALYZED - 5)) | (1L << (EXECUTABLE - 5)) | (1L << (MAPPED - 5)) | (1L << (OPTIMIZED - 5)) | (1L << (PARSED - 5)))) != 0))) {                                                         ((ExplainContext) _localctx).type = (Token) _errHandler.recoverInline(this).                                                     } else {                                                         consume().                                                     }                                                 }                                                 break.                                             case FORMAT:                                                 {                                                     setState(119).                                                     match(FORMAT).                                                     setState(120).                                                     ((ExplainContext) _localctx).format = _input.LT(1).                                                     _la = _input.LA(1).                                                     if (!(_la == GRAPHVIZ || _la == TEXT)) {                                                         ((ExplainContext) _localctx).format = (Token) _errHandler.recoverInline(this).                                                     } else {                                                         consume().                                                     }                                                 }                                                 break.                                             case VERIFY:                                                 {                                                     setState(121).                                                     match(VERIFY).                                                     setState(122).                                                     ((ExplainContext) _localctx).verify = booleanValue().                                                 }                                                 break.                                             default:                                                 throw new NoViableAltException(this).                                         }                                     }                                     setState(127).                                     _errHandler.sync(this).                                     _la = _input.LA(1).                                 }                                 setState(128).                                 match(T__1).                             }                             break.                     }                     setState(131).                     statement().                 }                 break.             case 3:                 _localctx = new DebugContext(_localctx).                 enterOuterAlt(_localctx, 3).                 {                     setState(132).                     match(DEBUG).                     setState(144).                     _errHandler.sync(this).                     switch(getInterpreter().adaptivePredict(_input, 5, _ctx)) {                         case 1:                             {                                 setState(133).                                 match(T__0).                                 setState(140).                                 _errHandler.sync(this).                                 _la = _input.LA(1).                                 while (_la == FORMAT || _la == PLAN) {                                     {                                         setState(138).                                         switch(_input.LA(1)) {                                             case PLAN:                                                 {                                                     setState(134).                                                     match(PLAN).                                                     setState(135).                                                     ((DebugContext) _localctx).type = _input.LT(1).                                                     _la = _input.LA(1).                                                     if (!(_la == ANALYZED || _la == OPTIMIZED)) {                                                         ((DebugContext) _localctx).type = (Token) _errHandler.recoverInline(this).                                                     } else {                                                         consume().                                                     }                                                 }                                                 break.                                             case FORMAT:                                                 {                                                     setState(136).                                                     match(FORMAT).                                                     setState(137).                                                     ((DebugContext) _localctx).format = _input.LT(1).                                                     _la = _input.LA(1).                                                     if (!(_la == GRAPHVIZ || _la == TEXT)) {                                                         ((DebugContext) _localctx).format = (Token) _errHandler.recoverInline(this).                                                     } else {                                                         consume().                                                     }                                                 }                                                 break.                                             default:                                                 throw new NoViableAltException(this).                                         }                                     }                                     setState(142).                                     _errHandler.sync(this).                                     _la = _input.LA(1).                                 }                                 setState(143).                                 match(T__1).                             }                             break.                     }                     setState(146).                     statement().                 }                 break.             case 4:                 _localctx = new ShowTablesContext(_localctx).                 enterOuterAlt(_localctx, 4).                 {                     setState(147).                     match(SHOW).                     setState(148).                     match(TABLES).                     setState(151).                     switch(_input.LA(1)) {                         case LIKE:                             {                                 setState(149).                                 ((ShowTablesContext) _localctx).tableLike = likePattern().                             }                             break.                         case ANALYZE:                         case ANALYZED:                         case CATALOGS:                         case COLUMNS:                         case DAY:                         case DEBUG:                         case EXECUTABLE:                         case EXPLAIN:                         case FIRST:                         case FORMAT:                         case FULL:                         case FUNCTIONS:                         case GRAPHVIZ:                         case HOUR:                         case INTERVAL:                         case LAST:                         case LIMIT:                         case MAPPED:                         case MINUTE:                         case MONTH:                         case OPTIMIZED:                         case PARSED:                         case PHYSICAL:                         case PLAN:                         case RLIKE:                         case QUERY:                         case SCHEMAS:                         case SECOND:                         case SHOW:                         case SYS:                         case TABLES:                         case TEXT:                         case TYPE:                         case TYPES:                         case VERIFY:                         case YEAR:                         case IDENTIFIER:                         case DIGIT_IDENTIFIER:                         case TABLE_IDENTIFIER:                         case QUOTED_IDENTIFIER:                         case BACKQUOTED_IDENTIFIER:                             {                                 setState(150).                                 ((ShowTablesContext) _localctx).tableIdent = tableIdentifier().                             }                             break.                         case EOF:                             break.                         default:                             throw new NoViableAltException(this).                     }                 }                 break.             case 5:                 _localctx = new ShowColumnsContext(_localctx).                 enterOuterAlt(_localctx, 5).                 {                     setState(153).                     match(SHOW).                     setState(154).                     match(COLUMNS).                     setState(155).                     _la = _input.LA(1).                     if (!(_la == FROM || _la == IN)) {                         _errHandler.recoverInline(this).                     } else {                         consume().                     }                     setState(158).                     switch(_input.LA(1)) {                         case LIKE:                             {                                 setState(156).                                 ((ShowColumnsContext) _localctx).tableLike = likePattern().                             }                             break.                         case ANALYZE:                         case ANALYZED:                         case CATALOGS:                         case COLUMNS:                         case DAY:                         case DEBUG:                         case EXECUTABLE:                         case EXPLAIN:                         case FIRST:                         case FORMAT:                         case FULL:                         case FUNCTIONS:                         case GRAPHVIZ:                         case HOUR:                         case INTERVAL:                         case LAST:                         case LIMIT:                         case MAPPED:                         case MINUTE:                         case MONTH:                         case OPTIMIZED:                         case PARSED:                         case PHYSICAL:                         case PLAN:                         case RLIKE:                         case QUERY:                         case SCHEMAS:                         case SECOND:                         case SHOW:                         case SYS:                         case TABLES:                         case TEXT:                         case TYPE:                         case TYPES:                         case VERIFY:                         case YEAR:                         case IDENTIFIER:                         case DIGIT_IDENTIFIER:                         case TABLE_IDENTIFIER:                         case QUOTED_IDENTIFIER:                         case BACKQUOTED_IDENTIFIER:                             {                                 setState(157).                                 ((ShowColumnsContext) _localctx).tableIdent = tableIdentifier().                             }                             break.                         default:                             throw new NoViableAltException(this).                     }                 }                 break.             case 6:                 _localctx = new ShowColumnsContext(_localctx).                 enterOuterAlt(_localctx, 6).                 {                     setState(160).                     _la = _input.LA(1).                     if (!(_la == DESC || _la == DESCRIBE)) {                         _errHandler.recoverInline(this).                     } else {                         consume().                     }                     setState(163).                     switch(_input.LA(1)) {                         case LIKE:                             {                                 setState(161).                                 ((ShowColumnsContext) _localctx).tableLike = likePattern().                             }                             break.                         case ANALYZE:                         case ANALYZED:                         case CATALOGS:                         case COLUMNS:                         case DAY:                         case DEBUG:                         case EXECUTABLE:                         case EXPLAIN:                         case FIRST:                         case FORMAT:                         case FULL:                         case FUNCTIONS:                         case GRAPHVIZ:                         case HOUR:                         case INTERVAL:                         case LAST:                         case LIMIT:                         case MAPPED:                         case MINUTE:                         case MONTH:                         case OPTIMIZED:                         case PARSED:                         case PHYSICAL:                         case PLAN:                         case RLIKE:                         case QUERY:                         case SCHEMAS:                         case SECOND:                         case SHOW:                         case SYS:                         case TABLES:                         case TEXT:                         case TYPE:                         case TYPES:                         case VERIFY:                         case YEAR:                         case IDENTIFIER:                         case DIGIT_IDENTIFIER:                         case TABLE_IDENTIFIER:                         case QUOTED_IDENTIFIER:                         case BACKQUOTED_IDENTIFIER:                             {                                 setState(162).                                 ((ShowColumnsContext) _localctx).tableIdent = tableIdentifier().                             }                             break.                         default:                             throw new NoViableAltException(this).                     }                 }                 break.             case 7:                 _localctx = new ShowFunctionsContext(_localctx).                 enterOuterAlt(_localctx, 7).                 {                     setState(165).                     match(SHOW).                     setState(166).                     match(FUNCTIONS).                     setState(168).                     _la = _input.LA(1).                     if (_la == LIKE) {                         {                             setState(167).                             likePattern().                         }                     }                 }                 break.             case 8:                 _localctx = new ShowSchemasContext(_localctx).                 enterOuterAlt(_localctx, 8).                 {                     setState(170).                     match(SHOW).                     setState(171).                     match(SCHEMAS).                 }                 break.             case 9:                 _localctx = new SysTablesContext(_localctx).                 enterOuterAlt(_localctx, 9).                 {                     setState(172).                     match(SYS).                     setState(173).                     match(TABLES).                     setState(176).                     _la = _input.LA(1).                     if (_la == CATALOG) {                         {                             setState(174).                             match(CATALOG).                             setState(175).                             ((SysTablesContext) _localctx).clusterLike = likePattern().                         }                     }                     setState(180).                     _errHandler.sync(this).                     switch(getInterpreter().adaptivePredict(_input, 11, _ctx)) {                         case 1:                             {                                 setState(178).                                 ((SysTablesContext) _localctx).tableLike = likePattern().                             }                             break.                         case 2:                             {                                 setState(179).                                 ((SysTablesContext) _localctx).tableIdent = tableIdentifier().                             }                             break.                     }                     setState(191).                     _la = _input.LA(1).                     if (_la == TYPE) {                         {                             setState(182).                             match(TYPE).                             setState(183).                             string().                             setState(188).                             _errHandler.sync(this).                             _la = _input.LA(1).                             while (_la == T__2) {                                 {                                     {                                         setState(184).                                         match(T__2).                                         setState(185).                                         string().                                     }                                 }                                 setState(190).                                 _errHandler.sync(this).                                 _la = _input.LA(1).                             }                         }                     }                 }                 break.             case 10:                 _localctx = new SysColumnsContext(_localctx).                 enterOuterAlt(_localctx, 10).                 {                     setState(193).                     match(SYS).                     setState(194).                     match(COLUMNS).                     setState(197).                     _la = _input.LA(1).                     if (_la == CATALOG) {                         {                             setState(195).                             match(CATALOG).                             setState(196).                             ((SysColumnsContext) _localctx).cluster = string().                         }                     }                     setState(202).                     switch(_input.LA(1)) {                         case TABLE:                             {                                 setState(199).                                 match(TABLE).                                 setState(200).                                 ((SysColumnsContext) _localctx).tableLike = likePattern().                             }                             break.                         case ANALYZE:                         case ANALYZED:                         case CATALOGS:                         case COLUMNS:                         case DAY:                         case DEBUG:                         case EXECUTABLE:                         case EXPLAIN:                         case FIRST:                         case FORMAT:                         case FULL:                         case FUNCTIONS:                         case GRAPHVIZ:                         case HOUR:                         case INTERVAL:                         case LAST:                         case LIMIT:                         case MAPPED:                         case MINUTE:                         case MONTH:                         case OPTIMIZED:                         case PARSED:                         case PHYSICAL:                         case PLAN:                         case RLIKE:                         case QUERY:                         case SCHEMAS:                         case SECOND:                         case SHOW:                         case SYS:                         case TABLES:                         case TEXT:                         case TYPE:                         case TYPES:                         case VERIFY:                         case YEAR:                         case IDENTIFIER:                         case DIGIT_IDENTIFIER:                         case TABLE_IDENTIFIER:                         case QUOTED_IDENTIFIER:                         case BACKQUOTED_IDENTIFIER:                             {                                 setState(201).                                 ((SysColumnsContext) _localctx).tableIdent = tableIdentifier().                             }                             break.                         case EOF:                         case LIKE:                             break.                         default:                             throw new NoViableAltException(this).                     }                     setState(205).                     _la = _input.LA(1).                     if (_la == LIKE) {                         {                             setState(204).                             ((SysColumnsContext) _localctx).columnPattern = likePattern().                         }                     }                 }                 break.             case 11:                 _localctx = new SysTypesContext(_localctx).                 enterOuterAlt(_localctx, 11).                 {                     setState(207).                     match(SYS).                     setState(208).                     match(TYPES).                     setState(213).                     _la = _input.LA(1).                     if (((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (PLUS - 107)) | (1L << (MINUS - 107)) | (1L << (INTEGER_VALUE - 107)) | (1L << (DECIMAL_VALUE - 107)))) != 0)) {                         {                             setState(210).                             _la = _input.LA(1).                             if (_la == PLUS || _la == MINUS) {                                 {                                     setState(209).                                     _la = _input.LA(1).                                     if (!(_la == PLUS || _la == MINUS)) {                                         _errHandler.recoverInline(this).                                     } else {                                         consume().                                     }                                 }                             }                             setState(212).                             ((SysTypesContext) _localctx).type = number().                         }                     }                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public QueryNoWithContext queryNoWith() {     return getRuleContext(QueryNoWithContext.class, 0). }
false;public;0;1;;public TerminalNode WITH() {     return getToken(SqlBaseParser.WITH, 0). }
false;public;0;3;;public List<NamedQueryContext> namedQuery() {     return getRuleContexts(NamedQueryContext.class). }
false;public;1;3;;public NamedQueryContext namedQuery(int i) {     return getRuleContext(NamedQueryContext.class, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_query. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterQuery(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitQuery(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitQuery(this).     else         return visitor.visitChildren(this). }
false;public,final;0;48;;public final QueryContext query() throws RecognitionException {     QueryContext _localctx = new QueryContext(_ctx, getState()).     enterRule(_localctx, 6, RULE_query).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(226).             _la = _input.LA(1).             if (_la == WITH) {                 {                     setState(217).                     match(WITH).                     setState(218).                     namedQuery().                     setState(223).                     _errHandler.sync(this).                     _la = _input.LA(1).                     while (_la == T__2) {                         {                             {                                 setState(219).                                 match(T__2).                                 setState(220).                                 namedQuery().                             }                         }                         setState(225).                         _errHandler.sync(this).                         _la = _input.LA(1).                     }                 }             }             setState(228).             queryNoWith().         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public QueryTermContext queryTerm() {     return getRuleContext(QueryTermContext.class, 0). }
false;public;0;1;;public TerminalNode ORDER() {     return getToken(SqlBaseParser.ORDER, 0). }
false;public;0;1;;public TerminalNode BY() {     return getToken(SqlBaseParser.BY, 0). }
false;public;0;3;;public List<OrderByContext> orderBy() {     return getRuleContexts(OrderByContext.class). }
false;public;1;3;;public OrderByContext orderBy(int i) {     return getRuleContext(OrderByContext.class, i). }
false;public;0;3;;public LimitClauseContext limitClause() {     return getRuleContext(LimitClauseContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_queryNoWith. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterQueryNoWith(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitQueryNoWith(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitQueryNoWith(this).     else         return visitor.visitChildren(this). }
false;public,final;0;59;;public final QueryNoWithContext queryNoWith() throws RecognitionException {     QueryNoWithContext _localctx = new QueryNoWithContext(_ctx, getState()).     enterRule(_localctx, 8, RULE_queryNoWith).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(230).             queryTerm().             setState(241).             _la = _input.LA(1).             if (_la == ORDER) {                 {                     setState(231).                     match(ORDER).                     setState(232).                     match(BY).                     setState(233).                     orderBy().                     setState(238).                     _errHandler.sync(this).                     _la = _input.LA(1).                     while (_la == T__2) {                         {                             {                                 setState(234).                                 match(T__2).                                 setState(235).                                 orderBy().                             }                         }                         setState(240).                         _errHandler.sync(this).                         _la = _input.LA(1).                     }                 }             }             setState(244).             _la = _input.LA(1).             if (_la == LIMIT || _la == LIMIT_ESC) {                 {                     setState(243).                     limitClause().                 }             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode LIMIT() {     return getToken(SqlBaseParser.LIMIT, 0). }
false;public;0;1;;public TerminalNode INTEGER_VALUE() {     return getToken(SqlBaseParser.INTEGER_VALUE, 0). }
false;public;0;1;;public TerminalNode ALL() {     return getToken(SqlBaseParser.ALL, 0). }
false;public;0;1;;public TerminalNode LIMIT_ESC() {     return getToken(SqlBaseParser.LIMIT_ESC, 0). }
false;public;0;1;;public TerminalNode ESC_END() {     return getToken(SqlBaseParser.ESC_END, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_limitClause. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterLimitClause(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitLimitClause(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitLimitClause(this).     else         return visitor.visitChildren(this). }
false;public,final;0;53;;public final LimitClauseContext limitClause() throws RecognitionException {     LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState()).     enterRule(_localctx, 10, RULE_limitClause).     int _la.     try {         setState(251).         switch(_input.LA(1)) {             case LIMIT:                 enterOuterAlt(_localctx, 1).                 {                     setState(246).                     match(LIMIT).                     setState(247).                     ((LimitClauseContext) _localctx).limit = _input.LT(1).                     _la = _input.LA(1).                     if (!(_la == ALL || _la == INTEGER_VALUE)) {                         ((LimitClauseContext) _localctx).limit = (Token) _errHandler.recoverInline(this).                     } else {                         consume().                     }                 }                 break.             case LIMIT_ESC:                 enterOuterAlt(_localctx, 2).                 {                     setState(248).                     match(LIMIT_ESC).                     setState(249).                     ((LimitClauseContext) _localctx).limit = _input.LT(1).                     _la = _input.LA(1).                     if (!(_la == ALL || _la == INTEGER_VALUE)) {                         ((LimitClauseContext) _localctx).limit = (Token) _errHandler.recoverInline(this).                     } else {                         consume().                     }                     setState(250).                     match(ESC_END).                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_queryTerm. }
false;public;1;3;;public void copyFrom(QueryTermContext ctx) {     super.copyFrom(ctx). }
false;public;0;3;;public QueryNoWithContext queryNoWith() {     return getRuleContext(QueryNoWithContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterSubquery(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitSubquery(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitSubquery(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public QuerySpecificationContext querySpecification() {     return getRuleContext(QuerySpecificationContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterQueryPrimaryDefault(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitQueryPrimaryDefault(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitQueryPrimaryDefault(this).     else         return visitor.visitChildren(this). }
false;public,final;0;40;;public final QueryTermContext queryTerm() throws RecognitionException {     QueryTermContext _localctx = new QueryTermContext(_ctx, getState()).     enterRule(_localctx, 12, RULE_queryTerm).     try {         setState(258).         switch(_input.LA(1)) {             case SELECT:                 _localctx = new QueryPrimaryDefaultContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(253).                     querySpecification().                 }                 break.             case T__0:                 _localctx = new SubqueryContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(254).                     match(T__0).                     setState(255).                     queryNoWith().                     setState(256).                     match(T__1).                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode NULLS() {     return getToken(SqlBaseParser.NULLS, 0). }
false;public;0;1;;public TerminalNode ASC() {     return getToken(SqlBaseParser.ASC, 0). }
false;public;0;1;;public TerminalNode DESC() {     return getToken(SqlBaseParser.DESC, 0). }
false;public;0;1;;public TerminalNode FIRST() {     return getToken(SqlBaseParser.FIRST, 0). }
false;public;0;1;;public TerminalNode LAST() {     return getToken(SqlBaseParser.LAST, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_orderBy. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterOrderBy(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitOrderBy(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitOrderBy(this).     else         return visitor.visitChildren(this). }
false;public,final;0;53;;public final OrderByContext orderBy() throws RecognitionException {     OrderByContext _localctx = new OrderByContext(_ctx, getState()).     enterRule(_localctx, 14, RULE_orderBy).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(260).             expression().             setState(262).             _la = _input.LA(1).             if (_la == ASC || _la == DESC) {                 {                     setState(261).                     ((OrderByContext) _localctx).ordering = _input.LT(1).                     _la = _input.LA(1).                     if (!(_la == ASC || _la == DESC)) {                         ((OrderByContext) _localctx).ordering = (Token) _errHandler.recoverInline(this).                     } else {                         consume().                     }                 }             }             setState(266).             _la = _input.LA(1).             if (_la == NULLS) {                 {                     setState(264).                     match(NULLS).                     setState(265).                     ((OrderByContext) _localctx).nullOrdering = _input.LT(1).                     _la = _input.LA(1).                     if (!(_la == FIRST || _la == LAST)) {                         ((OrderByContext) _localctx).nullOrdering = (Token) _errHandler.recoverInline(this).                     } else {                         consume().                     }                 }             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode SELECT() {     return getToken(SqlBaseParser.SELECT, 0). }
false;public;0;3;;public List<SelectItemContext> selectItem() {     return getRuleContexts(SelectItemContext.class). }
false;public;1;3;;public SelectItemContext selectItem(int i) {     return getRuleContext(SelectItemContext.class, i). }
false;public;0;3;;public SetQuantifierContext setQuantifier() {     return getRuleContext(SetQuantifierContext.class, 0). }
false;public;0;3;;public FromClauseContext fromClause() {     return getRuleContext(FromClauseContext.class, 0). }
false;public;0;1;;public TerminalNode WHERE() {     return getToken(SqlBaseParser.WHERE, 0). }
false;public;0;1;;public TerminalNode GROUP() {     return getToken(SqlBaseParser.GROUP, 0). }
false;public;0;1;;public TerminalNode BY() {     return getToken(SqlBaseParser.BY, 0). }
false;public;0;3;;public GroupByContext groupBy() {     return getRuleContext(GroupByContext.class, 0). }
false;public;0;1;;public TerminalNode HAVING() {     return getToken(SqlBaseParser.HAVING, 0). }
false;public;0;3;;public List<BooleanExpressionContext> booleanExpression() {     return getRuleContexts(BooleanExpressionContext.class). }
false;public;1;3;;public BooleanExpressionContext booleanExpression(int i) {     return getRuleContext(BooleanExpressionContext.class, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_querySpecification. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterQuerySpecification(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitQuerySpecification(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitQuerySpecification(this).     else         return visitor.visitChildren(this). }
false;public,final;0;92;;public final QuerySpecificationContext querySpecification() throws RecognitionException {     QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState()).     enterRule(_localctx, 16, RULE_querySpecification).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(268).             match(SELECT).             setState(270).             _la = _input.LA(1).             if (_la == ALL || _la == DISTINCT) {                 {                     setState(269).                     setQuantifier().                 }             }             setState(272).             selectItem().             setState(277).             _errHandler.sync(this).             _la = _input.LA(1).             while (_la == T__2) {                 {                     {                         setState(273).                         match(T__2).                         setState(274).                         selectItem().                     }                 }                 setState(279).                 _errHandler.sync(this).                 _la = _input.LA(1).             }             setState(281).             _la = _input.LA(1).             if (_la == FROM) {                 {                     setState(280).                     fromClause().                 }             }             setState(285).             _la = _input.LA(1).             if (_la == WHERE) {                 {                     setState(283).                     match(WHERE).                     setState(284).                     ((QuerySpecificationContext) _localctx).where = booleanExpression(0).                 }             }             setState(290).             _la = _input.LA(1).             if (_la == GROUP) {                 {                     setState(287).                     match(GROUP).                     setState(288).                     match(BY).                     setState(289).                     groupBy().                 }             }             setState(294).             _la = _input.LA(1).             if (_la == HAVING) {                 {                     setState(292).                     match(HAVING).                     setState(293).                     ((QuerySpecificationContext) _localctx).having = booleanExpression(0).                 }             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode FROM() {     return getToken(SqlBaseParser.FROM, 0). }
false;public;0;3;;public List<RelationContext> relation() {     return getRuleContexts(RelationContext.class). }
false;public;1;3;;public RelationContext relation(int i) {     return getRuleContext(RelationContext.class, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_fromClause. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterFromClause(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitFromClause(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitFromClause(this).     else         return visitor.visitChildren(this). }
false;public,final;0;39;;public final FromClauseContext fromClause() throws RecognitionException {     FromClauseContext _localctx = new FromClauseContext(_ctx, getState()).     enterRule(_localctx, 18, RULE_fromClause).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(296).             match(FROM).             setState(297).             relation().             setState(302).             _errHandler.sync(this).             _la = _input.LA(1).             while (_la == T__2) {                 {                     {                         setState(298).                         match(T__2).                         setState(299).                         relation().                     }                 }                 setState(304).                 _errHandler.sync(this).                 _la = _input.LA(1).             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public List<GroupingElementContext> groupingElement() {     return getRuleContexts(GroupingElementContext.class). }
false;public;1;3;;public GroupingElementContext groupingElement(int i) {     return getRuleContext(GroupingElementContext.class, i). }
false;public;0;3;;public SetQuantifierContext setQuantifier() {     return getRuleContext(SetQuantifierContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_groupBy. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterGroupBy(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitGroupBy(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitGroupBy(this).     else         return visitor.visitChildren(this). }
false;public,final;0;46;;public final GroupByContext groupBy() throws RecognitionException {     GroupByContext _localctx = new GroupByContext(_ctx, getState()).     enterRule(_localctx, 20, RULE_groupBy).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(306).             _la = _input.LA(1).             if (_la == ALL || _la == DISTINCT) {                 {                     setState(305).                     setQuantifier().                 }             }             setState(308).             groupingElement().             setState(313).             _errHandler.sync(this).             _la = _input.LA(1).             while (_la == T__2) {                 {                     {                         setState(309).                         match(T__2).                         setState(310).                         groupingElement().                     }                 }                 setState(315).                 _errHandler.sync(this).                 _la = _input.LA(1).             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_groupingElement. }
false;public;1;3;;public void copyFrom(GroupingElementContext ctx) {     super.copyFrom(ctx). }
false;public;0;3;;public GroupingExpressionsContext groupingExpressions() {     return getRuleContext(GroupingExpressionsContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterSingleGroupingSet(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitSingleGroupingSet(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitSingleGroupingSet(this).     else         return visitor.visitChildren(this). }
false;public,final;0;21;;public final GroupingElementContext groupingElement() throws RecognitionException {     GroupingElementContext _localctx = new GroupingElementContext(_ctx, getState()).     enterRule(_localctx, 22, RULE_groupingElement).     try {         _localctx = new SingleGroupingSetContext(_localctx).         enterOuterAlt(_localctx, 1).         {             setState(316).             groupingExpressions().         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_groupingExpressions. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterGroupingExpressions(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitGroupingExpressions(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitGroupingExpressions(this).     else         return visitor.visitChildren(this). }
false;public,final;0;61;;public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {     GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState()).     enterRule(_localctx, 24, RULE_groupingExpressions).     int _la.     try {         setState(331).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 40, _ctx)) {             case 1:                 enterOuterAlt(_localctx, 1).                 {                     setState(318).                     match(T__0).                     setState(327).                     _la = _input.LA(1).                     if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {                         {                             setState(319).                             expression().                             setState(324).                             _errHandler.sync(this).                             _la = _input.LA(1).                             while (_la == T__2) {                                 {                                     {                                         setState(320).                                         match(T__2).                                         setState(321).                                         expression().                                     }                                 }                                 setState(326).                                 _errHandler.sync(this).                                 _la = _input.LA(1).                             }                         }                     }                     setState(329).                     match(T__1).                 }                 break.             case 2:                 enterOuterAlt(_localctx, 2).                 {                     setState(330).                     expression().                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode AS() {     return getToken(SqlBaseParser.AS, 0). }
false;public;0;3;;public QueryNoWithContext queryNoWith() {     return getRuleContext(QueryNoWithContext.class, 0). }
false;public;0;3;;public IdentifierContext identifier() {     return getRuleContext(IdentifierContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_namedQuery. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterNamedQuery(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitNamedQuery(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitNamedQuery(this).     else         return visitor.visitChildren(this). }
false;public,final;0;28;;public final NamedQueryContext namedQuery() throws RecognitionException {     NamedQueryContext _localctx = new NamedQueryContext(_ctx, getState()).     enterRule(_localctx, 26, RULE_namedQuery).     try {         enterOuterAlt(_localctx, 1).         {             setState(333).             ((NamedQueryContext) _localctx).name = identifier().             setState(334).             match(AS).             setState(335).             match(T__0).             setState(336).             queryNoWith().             setState(337).             match(T__1).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode DISTINCT() {     return getToken(SqlBaseParser.DISTINCT, 0). }
false;public;0;1;;public TerminalNode ALL() {     return getToken(SqlBaseParser.ALL, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_setQuantifier. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterSetQuantifier(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitSetQuantifier(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitSetQuantifier(this).     else         return visitor.visitChildren(this). }
false;public,final;0;26;;public final SetQuantifierContext setQuantifier() throws RecognitionException {     SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState()).     enterRule(_localctx, 28, RULE_setQuantifier).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(339).             _la = _input.LA(1).             if (!(_la == ALL || _la == DISTINCT)) {                 _errHandler.recoverInline(this).             } else {                 consume().             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_selectItem. }
false;public;1;3;;public void copyFrom(SelectItemContext ctx) {     super.copyFrom(ctx). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;3;;public IdentifierContext identifier() {     return getRuleContext(IdentifierContext.class, 0). }
false;public;0;1;;public TerminalNode AS() {     return getToken(SqlBaseParser.AS, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterSelectExpression(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitSelectExpression(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitSelectExpression(this).     else         return visitor.visitChildren(this). }
false;public,final;0;41;;public final SelectItemContext selectItem() throws RecognitionException {     SelectItemContext _localctx = new SelectItemContext(_ctx, getState()).     enterRule(_localctx, 30, RULE_selectItem).     int _la.     try {         _localctx = new SelectExpressionContext(_localctx).         enterOuterAlt(_localctx, 1).         {             setState(341).             expression().             setState(346).             _errHandler.sync(this).             switch(getInterpreter().adaptivePredict(_input, 42, _ctx)) {                 case 1:                     {                         setState(343).                         _la = _input.LA(1).                         if (_la == AS) {                             {                                 setState(342).                                 match(AS).                             }                         }                         setState(345).                         identifier().                     }                     break.             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public RelationPrimaryContext relationPrimary() {     return getRuleContext(RelationPrimaryContext.class, 0). }
false;public;0;3;;public List<JoinRelationContext> joinRelation() {     return getRuleContexts(JoinRelationContext.class). }
false;public;1;3;;public JoinRelationContext joinRelation(int i) {     return getRuleContext(JoinRelationContext.class, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_relation. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterRelation(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitRelation(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitRelation(this).     else         return visitor.visitChildren(this). }
false;public,final;0;35;;public final RelationContext relation() throws RecognitionException {     RelationContext _localctx = new RelationContext(_ctx, getState()).     enterRule(_localctx, 32, RULE_relation).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(348).             relationPrimary().             setState(352).             _errHandler.sync(this).             _la = _input.LA(1).             while (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (FULL - 36)) | (1L << (INNER - 36)) | (1L << (JOIN - 36)) | (1L << (LEFT - 36)) | (1L << (NATURAL - 36)) | (1L << (RIGHT - 36)))) != 0)) {                 {                     {                         setState(349).                         joinRelation().                     }                 }                 setState(354).                 _errHandler.sync(this).                 _la = _input.LA(1).             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode JOIN() {     return getToken(SqlBaseParser.JOIN, 0). }
false;public;0;3;;public RelationPrimaryContext relationPrimary() {     return getRuleContext(RelationPrimaryContext.class, 0). }
false;public;0;3;;public JoinTypeContext joinType() {     return getRuleContext(JoinTypeContext.class, 0). }
false;public;0;3;;public JoinCriteriaContext joinCriteria() {     return getRuleContext(JoinCriteriaContext.class, 0). }
false;public;0;1;;public TerminalNode NATURAL() {     return getToken(SqlBaseParser.NATURAL, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_joinRelation. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterJoinRelation(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitJoinRelation(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitJoinRelation(this).     else         return visitor.visitChildren(this). }
false;public,final;0;60;;public final JoinRelationContext joinRelation() throws RecognitionException {     JoinRelationContext _localctx = new JoinRelationContext(_ctx, getState()).     enterRule(_localctx, 34, RULE_joinRelation).     int _la.     try {         setState(366).         switch(_input.LA(1)) {             case FULL:             case INNER:             case JOIN:             case LEFT:             case RIGHT:                 enterOuterAlt(_localctx, 1).                 {                     {                         setState(355).                         joinType().                     }                     setState(356).                     match(JOIN).                     setState(357).                     ((JoinRelationContext) _localctx).right = relationPrimary().                     setState(359).                     _la = _input.LA(1).                     if (_la == ON || _la == USING) {                         {                             setState(358).                             joinCriteria().                         }                     }                 }                 break.             case NATURAL:                 enterOuterAlt(_localctx, 2).                 {                     setState(361).                     match(NATURAL).                     setState(362).                     joinType().                     setState(363).                     match(JOIN).                     setState(364).                     ((JoinRelationContext) _localctx).right = relationPrimary().                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode INNER() {     return getToken(SqlBaseParser.INNER, 0). }
false;public;0;1;;public TerminalNode LEFT() {     return getToken(SqlBaseParser.LEFT, 0). }
false;public;0;1;;public TerminalNode OUTER() {     return getToken(SqlBaseParser.OUTER, 0). }
false;public;0;1;;public TerminalNode RIGHT() {     return getToken(SqlBaseParser.RIGHT, 0). }
false;public;0;1;;public TerminalNode FULL() {     return getToken(SqlBaseParser.FULL, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_joinType. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterJoinType(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitJoinType(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitJoinType(this).     else         return visitor.visitChildren(this). }
false;public,final;0;84;;public final JoinTypeContext joinType() throws RecognitionException {     JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState()).     enterRule(_localctx, 36, RULE_joinType).     int _la.     try {         setState(383).         switch(_input.LA(1)) {             case INNER:             case JOIN:                 enterOuterAlt(_localctx, 1).                 {                     setState(369).                     _la = _input.LA(1).                     if (_la == INNER) {                         {                             setState(368).                             match(INNER).                         }                     }                 }                 break.             case LEFT:                 enterOuterAlt(_localctx, 2).                 {                     setState(371).                     match(LEFT).                     setState(373).                     _la = _input.LA(1).                     if (_la == OUTER) {                         {                             setState(372).                             match(OUTER).                         }                     }                 }                 break.             case RIGHT:                 enterOuterAlt(_localctx, 3).                 {                     setState(375).                     match(RIGHT).                     setState(377).                     _la = _input.LA(1).                     if (_la == OUTER) {                         {                             setState(376).                             match(OUTER).                         }                     }                 }                 break.             case FULL:                 enterOuterAlt(_localctx, 4).                 {                     setState(379).                     match(FULL).                     setState(381).                     _la = _input.LA(1).                     if (_la == OUTER) {                         {                             setState(380).                             match(OUTER).                         }                     }                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode ON() {     return getToken(SqlBaseParser.ON, 0). }
false;public;0;3;;public BooleanExpressionContext booleanExpression() {     return getRuleContext(BooleanExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode USING() {     return getToken(SqlBaseParser.USING, 0). }
false;public;0;3;;public List<IdentifierContext> identifier() {     return getRuleContexts(IdentifierContext.class). }
false;public;1;3;;public IdentifierContext identifier(int i) {     return getRuleContext(IdentifierContext.class, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_joinCriteria. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterJoinCriteria(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitJoinCriteria(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitJoinCriteria(this).     else         return visitor.visitChildren(this). }
false;public,final;0;59;;public final JoinCriteriaContext joinCriteria() throws RecognitionException {     JoinCriteriaContext _localctx = new JoinCriteriaContext(_ctx, getState()).     enterRule(_localctx, 38, RULE_joinCriteria).     int _la.     try {         setState(399).         switch(_input.LA(1)) {             case ON:                 enterOuterAlt(_localctx, 1).                 {                     setState(385).                     match(ON).                     setState(386).                     booleanExpression(0).                 }                 break.             case USING:                 enterOuterAlt(_localctx, 2).                 {                     setState(387).                     match(USING).                     setState(388).                     match(T__0).                     setState(389).                     identifier().                     setState(394).                     _errHandler.sync(this).                     _la = _input.LA(1).                     while (_la == T__2) {                         {                             {                                 setState(390).                                 match(T__2).                                 setState(391).                                 identifier().                             }                         }                         setState(396).                         _errHandler.sync(this).                         _la = _input.LA(1).                     }                     setState(397).                     match(T__1).                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_relationPrimary. }
false;public;1;3;;public void copyFrom(RelationPrimaryContext ctx) {     super.copyFrom(ctx). }
false;public;0;3;;public RelationContext relation() {     return getRuleContext(RelationContext.class, 0). }
false;public;0;3;;public QualifiedNameContext qualifiedName() {     return getRuleContext(QualifiedNameContext.class, 0). }
false;public;0;1;;public TerminalNode AS() {     return getToken(SqlBaseParser.AS, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterAliasedRelation(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitAliasedRelation(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitAliasedRelation(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public QueryNoWithContext queryNoWith() {     return getRuleContext(QueryNoWithContext.class, 0). }
false;public;0;3;;public QualifiedNameContext qualifiedName() {     return getRuleContext(QualifiedNameContext.class, 0). }
false;public;0;1;;public TerminalNode AS() {     return getToken(SqlBaseParser.AS, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterAliasedQuery(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitAliasedQuery(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitAliasedQuery(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public TableIdentifierContext tableIdentifier() {     return getRuleContext(TableIdentifierContext.class, 0). }
false;public;0;3;;public QualifiedNameContext qualifiedName() {     return getRuleContext(QualifiedNameContext.class, 0). }
false;public;0;1;;public TerminalNode AS() {     return getToken(SqlBaseParser.AS, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterTableName(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitTableName(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitTableName(this).     else         return visitor.visitChildren(this). }
false;public,final;0;109;;public final RelationPrimaryContext relationPrimary() throws RecognitionException {     RelationPrimaryContext _localctx = new RelationPrimaryContext(_ctx, getState()).     enterRule(_localctx, 40, RULE_relationPrimary).     int _la.     try {         setState(426).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 59, _ctx)) {             case 1:                 _localctx = new TableNameContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(401).                     tableIdentifier().                     setState(406).                     _errHandler.sync(this).                     switch(getInterpreter().adaptivePredict(_input, 54, _ctx)) {                         case 1:                             {                                 setState(403).                                 _la = _input.LA(1).                                 if (_la == AS) {                                     {                                         setState(402).                                         match(AS).                                     }                                 }                                 setState(405).                                 qualifiedName().                             }                             break.                     }                 }                 break.             case 2:                 _localctx = new AliasedQueryContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(408).                     match(T__0).                     setState(409).                     queryNoWith().                     setState(410).                     match(T__1).                     setState(415).                     _errHandler.sync(this).                     switch(getInterpreter().adaptivePredict(_input, 56, _ctx)) {                         case 1:                             {                                 setState(412).                                 _la = _input.LA(1).                                 if (_la == AS) {                                     {                                         setState(411).                                         match(AS).                                     }                                 }                                 setState(414).                                 qualifiedName().                             }                             break.                     }                 }                 break.             case 3:                 _localctx = new AliasedRelationContext(_localctx).                 enterOuterAlt(_localctx, 3).                 {                     setState(417).                     match(T__0).                     setState(418).                     relation().                     setState(419).                     match(T__1).                     setState(424).                     _errHandler.sync(this).                     switch(getInterpreter().adaptivePredict(_input, 58, _ctx)) {                         case 1:                             {                                 setState(421).                                 _la = _input.LA(1).                                 if (_la == AS) {                                     {                                         setState(420).                                         match(AS).                                     }                                 }                                 setState(423).                                 qualifiedName().                             }                             break.                     }                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public BooleanExpressionContext booleanExpression() {     return getRuleContext(BooleanExpressionContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_expression. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterExpression(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitExpression(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitExpression(this).     else         return visitor.visitChildren(this). }
false;public,final;0;20;;public final ExpressionContext expression() throws RecognitionException {     ExpressionContext _localctx = new ExpressionContext(_ctx, getState()).     enterRule(_localctx, 42, RULE_expression).     try {         enterOuterAlt(_localctx, 1).         {             setState(428).             booleanExpression(0).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_booleanExpression. }
false;public;1;3;;public void copyFrom(BooleanExpressionContext ctx) {     super.copyFrom(ctx). }
false;public;0;1;;public TerminalNode NOT() {     return getToken(SqlBaseParser.NOT, 0). }
false;public;0;3;;public BooleanExpressionContext booleanExpression() {     return getRuleContext(BooleanExpressionContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterLogicalNot(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitLogicalNot(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitLogicalNot(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode QUERY() {     return getToken(SqlBaseParser.QUERY, 0). }
false;public;0;3;;public MatchQueryOptionsContext matchQueryOptions() {     return getRuleContext(MatchQueryOptionsContext.class, 0). }
false;public;0;3;;public StringContext string() {     return getRuleContext(StringContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterStringQuery(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitStringQuery(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitStringQuery(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public PredicatedContext predicated() {     return getRuleContext(PredicatedContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterBooleanDefault(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitBooleanDefault(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitBooleanDefault(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode EXISTS() {     return getToken(SqlBaseParser.EXISTS, 0). }
false;public;0;3;;public QueryContext query() {     return getRuleContext(QueryContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterExists(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitExists(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitExists(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode MATCH() {     return getToken(SqlBaseParser.MATCH, 0). }
false;public;0;3;;public MatchQueryOptionsContext matchQueryOptions() {     return getRuleContext(MatchQueryOptionsContext.class, 0). }
false;public;0;3;;public List<StringContext> string() {     return getRuleContexts(StringContext.class). }
false;public;1;3;;public StringContext string(int i) {     return getRuleContext(StringContext.class, i). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterMultiMatchQuery(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitMultiMatchQuery(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitMultiMatchQuery(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode MATCH() {     return getToken(SqlBaseParser.MATCH, 0). }
false;public;0;3;;public MatchQueryOptionsContext matchQueryOptions() {     return getRuleContext(MatchQueryOptionsContext.class, 0). }
false;public;0;3;;public QualifiedNameContext qualifiedName() {     return getRuleContext(QualifiedNameContext.class, 0). }
false;public;0;3;;public StringContext string() {     return getRuleContext(StringContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterMatchQuery(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitMatchQuery(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitMatchQuery(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public List<BooleanExpressionContext> booleanExpression() {     return getRuleContexts(BooleanExpressionContext.class). }
false;public;1;3;;public BooleanExpressionContext booleanExpression(int i) {     return getRuleContext(BooleanExpressionContext.class, i). }
false;public;0;1;;public TerminalNode AND() {     return getToken(SqlBaseParser.AND, 0). }
false;public;0;1;;public TerminalNode OR() {     return getToken(SqlBaseParser.OR, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterLogicalBinary(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitLogicalBinary(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitLogicalBinary(this).     else         return visitor.visitChildren(this). }
false;public,final;0;3;;public final BooleanExpressionContext booleanExpression() throws RecognitionException {     return booleanExpression(0). }
false;private;1;167;;private BooleanExpressionContext booleanExpression(int _p) throws RecognitionException {     ParserRuleContext _parentctx = _ctx.     int _parentState = getState().     BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, _parentState).     BooleanExpressionContext _prevctx = _localctx.     int _startState = 44.     enterRecursionRule(_localctx, 44, RULE_booleanExpression, _p).     try {         int _alt.         enterOuterAlt(_localctx, 1).         {             setState(461).             _errHandler.sync(this).             switch(getInterpreter().adaptivePredict(_input, 60, _ctx)) {                 case 1:                     {                         _localctx = new LogicalNotContext(_localctx).                         _ctx = _localctx.                         _prevctx = _localctx.                         setState(431).                         match(NOT).                         setState(432).                         booleanExpression(8).                     }                     break.                 case 2:                     {                         _localctx = new ExistsContext(_localctx).                         _ctx = _localctx.                         _prevctx = _localctx.                         setState(433).                         match(EXISTS).                         setState(434).                         match(T__0).                         setState(435).                         query().                         setState(436).                         match(T__1).                     }                     break.                 case 3:                     {                         _localctx = new StringQueryContext(_localctx).                         _ctx = _localctx.                         _prevctx = _localctx.                         setState(438).                         match(QUERY).                         setState(439).                         match(T__0).                         setState(440).                         ((StringQueryContext) _localctx).queryString = string().                         setState(441).                         matchQueryOptions().                         setState(442).                         match(T__1).                     }                     break.                 case 4:                     {                         _localctx = new MatchQueryContext(_localctx).                         _ctx = _localctx.                         _prevctx = _localctx.                         setState(444).                         match(MATCH).                         setState(445).                         match(T__0).                         setState(446).                         ((MatchQueryContext) _localctx).singleField = qualifiedName().                         setState(447).                         match(T__2).                         setState(448).                         ((MatchQueryContext) _localctx).queryString = string().                         setState(449).                         matchQueryOptions().                         setState(450).                         match(T__1).                     }                     break.                 case 5:                     {                         _localctx = new MultiMatchQueryContext(_localctx).                         _ctx = _localctx.                         _prevctx = _localctx.                         setState(452).                         match(MATCH).                         setState(453).                         match(T__0).                         setState(454).                         ((MultiMatchQueryContext) _localctx).multiFields = string().                         setState(455).                         match(T__2).                         setState(456).                         ((MultiMatchQueryContext) _localctx).queryString = string().                         setState(457).                         matchQueryOptions().                         setState(458).                         match(T__1).                     }                     break.                 case 6:                     {                         _localctx = new BooleanDefaultContext(_localctx).                         _ctx = _localctx.                         _prevctx = _localctx.                         setState(460).                         predicated().                     }                     break.             }             _ctx.stop = _input.LT(-1).             setState(471).             _errHandler.sync(this).             _alt = getInterpreter().adaptivePredict(_input, 62, _ctx).             while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {                 if (_alt == 1) {                     if (_parseListeners != null)                         triggerExitRuleEvent().                     _prevctx = _localctx.                     {                         setState(469).                         _errHandler.sync(this).                         switch(getInterpreter().adaptivePredict(_input, 61, _ctx)) {                             case 1:                                 {                                     _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState)).                                     ((LogicalBinaryContext) _localctx).left = _prevctx.                                     pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression).                                     setState(463).                                     if (!(precpred(_ctx, 2)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 2)").                                     setState(464).                                     ((LogicalBinaryContext) _localctx).operator = match(AND).                                     setState(465).                                     ((LogicalBinaryContext) _localctx).right = booleanExpression(3).                                 }                                 break.                             case 2:                                 {                                     _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState)).                                     ((LogicalBinaryContext) _localctx).left = _prevctx.                                     pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression).                                     setState(466).                                     if (!(precpred(_ctx, 1)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 1)").                                     setState(467).                                     ((LogicalBinaryContext) _localctx).operator = match(OR).                                     setState(468).                                     ((LogicalBinaryContext) _localctx).right = booleanExpression(2).                                 }                                 break.                         }                     }                 }                 setState(473).                 _errHandler.sync(this).                 _alt = getInterpreter().adaptivePredict(_input, 62, _ctx).             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         unrollRecursionContexts(_parentctx).     }     return _localctx. }
false;public;0;3;;public List<StringContext> string() {     return getRuleContexts(StringContext.class). }
false;public;1;3;;public StringContext string(int i) {     return getRuleContext(StringContext.class, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_matchQueryOptions. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterMatchQueryOptions(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitMatchQueryOptions(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitMatchQueryOptions(this).     else         return visitor.visitChildren(this). }
false;public,final;0;35;;public final MatchQueryOptionsContext matchQueryOptions() throws RecognitionException {     MatchQueryOptionsContext _localctx = new MatchQueryOptionsContext(_ctx, getState()).     enterRule(_localctx, 46, RULE_matchQueryOptions).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(478).             _errHandler.sync(this).             _la = _input.LA(1).             while (_la == T__2) {                 {                     {                         setState(474).                         match(T__2).                         setState(475).                         string().                     }                 }                 setState(480).                 _errHandler.sync(this).                 _la = _input.LA(1).             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public ValueExpressionContext valueExpression() {     return getRuleContext(ValueExpressionContext.class, 0). }
false;public;0;3;;public PredicateContext predicate() {     return getRuleContext(PredicateContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_predicated. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterPredicated(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitPredicated(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitPredicated(this).     else         return visitor.visitChildren(this). }
false;public,final;0;30;;public final PredicatedContext predicated() throws RecognitionException {     PredicatedContext _localctx = new PredicatedContext(_ctx, getState()).     enterRule(_localctx, 48, RULE_predicated).     try {         enterOuterAlt(_localctx, 1).         {             setState(481).             valueExpression(0).             setState(483).             _errHandler.sync(this).             switch(getInterpreter().adaptivePredict(_input, 64, _ctx)) {                 case 1:                     {                         setState(482).                         predicate().                     }                     break.             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode AND() {     return getToken(SqlBaseParser.AND, 0). }
false;public;0;1;;public TerminalNode BETWEEN() {     return getToken(SqlBaseParser.BETWEEN, 0). }
false;public;0;3;;public List<ValueExpressionContext> valueExpression() {     return getRuleContexts(ValueExpressionContext.class). }
false;public;1;3;;public ValueExpressionContext valueExpression(int i) {     return getRuleContext(ValueExpressionContext.class, i). }
false;public;0;1;;public TerminalNode NOT() {     return getToken(SqlBaseParser.NOT, 0). }
false;public;0;1;;public TerminalNode IN() {     return getToken(SqlBaseParser.IN, 0). }
false;public;0;3;;public QueryContext query() {     return getRuleContext(QueryContext.class, 0). }
false;public;0;3;;public PatternContext pattern() {     return getRuleContext(PatternContext.class, 0). }
false;public;0;1;;public TerminalNode LIKE() {     return getToken(SqlBaseParser.LIKE, 0). }
false;public;0;1;;public TerminalNode RLIKE() {     return getToken(SqlBaseParser.RLIKE, 0). }
false;public;0;3;;public StringContext string() {     return getRuleContext(StringContext.class, 0). }
false;public;0;1;;public TerminalNode IS() {     return getToken(SqlBaseParser.IS, 0). }
false;public;0;1;;public TerminalNode NULL() {     return getToken(SqlBaseParser.NULL, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_predicate. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterPredicate(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitPredicate(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitPredicate(this).     else         return visitor.visitChildren(this). }
false;public,final;0;156;;public final PredicateContext predicate() throws RecognitionException {     PredicateContext _localctx = new PredicateContext(_ctx, getState()).     enterRule(_localctx, 50, RULE_predicate).     int _la.     try {         setState(531).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 72, _ctx)) {             case 1:                 enterOuterAlt(_localctx, 1).                 {                     setState(486).                     _la = _input.LA(1).                     if (_la == NOT) {                         {                             setState(485).                             match(NOT).                         }                     }                     setState(488).                     ((PredicateContext) _localctx).kind = match(BETWEEN).                     setState(489).                     ((PredicateContext) _localctx).lower = valueExpression(0).                     setState(490).                     match(AND).                     setState(491).                     ((PredicateContext) _localctx).upper = valueExpression(0).                 }                 break.             case 2:                 enterOuterAlt(_localctx, 2).                 {                     setState(494).                     _la = _input.LA(1).                     if (_la == NOT) {                         {                             setState(493).                             match(NOT).                         }                     }                     setState(496).                     ((PredicateContext) _localctx).kind = match(IN).                     setState(497).                     match(T__0).                     setState(498).                     valueExpression(0).                     setState(503).                     _errHandler.sync(this).                     _la = _input.LA(1).                     while (_la == T__2) {                         {                             {                                 setState(499).                                 match(T__2).                                 setState(500).                                 valueExpression(0).                             }                         }                         setState(505).                         _errHandler.sync(this).                         _la = _input.LA(1).                     }                     setState(506).                     match(T__1).                 }                 break.             case 3:                 enterOuterAlt(_localctx, 3).                 {                     setState(509).                     _la = _input.LA(1).                     if (_la == NOT) {                         {                             setState(508).                             match(NOT).                         }                     }                     setState(511).                     ((PredicateContext) _localctx).kind = match(IN).                     setState(512).                     match(T__0).                     setState(513).                     query().                     setState(514).                     match(T__1).                 }                 break.             case 4:                 enterOuterAlt(_localctx, 4).                 {                     setState(517).                     _la = _input.LA(1).                     if (_la == NOT) {                         {                             setState(516).                             match(NOT).                         }                     }                     setState(519).                     ((PredicateContext) _localctx).kind = match(LIKE).                     setState(520).                     pattern().                 }                 break.             case 5:                 enterOuterAlt(_localctx, 5).                 {                     setState(522).                     _la = _input.LA(1).                     if (_la == NOT) {                         {                             setState(521).                             match(NOT).                         }                     }                     setState(524).                     ((PredicateContext) _localctx).kind = match(RLIKE).                     setState(525).                     ((PredicateContext) _localctx).regex = string().                 }                 break.             case 6:                 enterOuterAlt(_localctx, 6).                 {                     setState(526).                     match(IS).                     setState(528).                     _la = _input.LA(1).                     if (_la == NOT) {                         {                             setState(527).                             match(NOT).                         }                     }                     setState(530).                     ((PredicateContext) _localctx).kind = match(NULL).                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode LIKE() {     return getToken(SqlBaseParser.LIKE, 0). }
false;public;0;3;;public PatternContext pattern() {     return getRuleContext(PatternContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_likePattern. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterLikePattern(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitLikePattern(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitLikePattern(this).     else         return visitor.visitChildren(this). }
false;public,final;0;22;;public final LikePatternContext likePattern() throws RecognitionException {     LikePatternContext _localctx = new LikePatternContext(_ctx, getState()).     enterRule(_localctx, 52, RULE_likePattern).     try {         enterOuterAlt(_localctx, 1).         {             setState(533).             match(LIKE).             setState(534).             pattern().         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public StringContext string() {     return getRuleContext(StringContext.class, 0). }
false;public;0;3;;public PatternEscapeContext patternEscape() {     return getRuleContext(PatternEscapeContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_pattern. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterPattern(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitPattern(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitPattern(this).     else         return visitor.visitChildren(this). }
false;public,final;0;30;;public final PatternContext pattern() throws RecognitionException {     PatternContext _localctx = new PatternContext(_ctx, getState()).     enterRule(_localctx, 54, RULE_pattern).     try {         enterOuterAlt(_localctx, 1).         {             setState(536).             ((PatternContext) _localctx).value = string().             setState(538).             _errHandler.sync(this).             switch(getInterpreter().adaptivePredict(_input, 73, _ctx)) {                 case 1:                     {                         setState(537).                         patternEscape().                     }                     break.             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode ESCAPE() {     return getToken(SqlBaseParser.ESCAPE, 0). }
false;public;0;3;;public StringContext string() {     return getRuleContext(StringContext.class, 0). }
false;public;0;1;;public TerminalNode ESCAPE_ESC() {     return getToken(SqlBaseParser.ESCAPE_ESC, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_patternEscape. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterPatternEscape(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitPatternEscape(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitPatternEscape(this).     else         return visitor.visitChildren(this). }
false;public,final;0;40;;public final PatternEscapeContext patternEscape() throws RecognitionException {     PatternEscapeContext _localctx = new PatternEscapeContext(_ctx, getState()).     enterRule(_localctx, 56, RULE_patternEscape).     try {         setState(546).         switch(_input.LA(1)) {             case ESCAPE:                 enterOuterAlt(_localctx, 1).                 {                     setState(540).                     match(ESCAPE).                     setState(541).                     ((PatternEscapeContext) _localctx).escape = string().                 }                 break.             case ESCAPE_ESC:                 enterOuterAlt(_localctx, 2).                 {                     setState(542).                     match(ESCAPE_ESC).                     setState(543).                     ((PatternEscapeContext) _localctx).escape = string().                     setState(544).                     match(ESC_END).                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_valueExpression. }
false;public;1;3;;public void copyFrom(ValueExpressionContext ctx) {     super.copyFrom(ctx). }
false;public;0;3;;public PrimaryExpressionContext primaryExpression() {     return getRuleContext(PrimaryExpressionContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterValueExpressionDefault(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitValueExpressionDefault(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitValueExpressionDefault(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ComparisonOperatorContext comparisonOperator() {     return getRuleContext(ComparisonOperatorContext.class, 0). }
false;public;0;3;;public List<ValueExpressionContext> valueExpression() {     return getRuleContexts(ValueExpressionContext.class). }
false;public;1;3;;public ValueExpressionContext valueExpression(int i) {     return getRuleContext(ValueExpressionContext.class, i). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterComparison(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitComparison(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitComparison(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ValueExpressionContext valueExpression() {     return getRuleContext(ValueExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode CAST_OP() {     return getToken(SqlBaseParser.CAST_OP, 0). }
false;public;0;3;;public DataTypeContext dataType() {     return getRuleContext(DataTypeContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterCastOperatorExpression(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitCastOperatorExpression(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitCastOperatorExpression(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public List<ValueExpressionContext> valueExpression() {     return getRuleContexts(ValueExpressionContext.class). }
false;public;1;3;;public ValueExpressionContext valueExpression(int i) {     return getRuleContext(ValueExpressionContext.class, i). }
false;public;0;1;;public TerminalNode ASTERISK() {     return getToken(SqlBaseParser.ASTERISK, 0). }
false;public;0;1;;public TerminalNode SLASH() {     return getToken(SqlBaseParser.SLASH, 0). }
false;public;0;1;;public TerminalNode PERCENT() {     return getToken(SqlBaseParser.PERCENT, 0). }
false;public;0;1;;public TerminalNode PLUS() {     return getToken(SqlBaseParser.PLUS, 0). }
false;public;0;1;;public TerminalNode MINUS() {     return getToken(SqlBaseParser.MINUS, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterArithmeticBinary(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitArithmeticBinary(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitArithmeticBinary(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ValueExpressionContext valueExpression() {     return getRuleContext(ValueExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode MINUS() {     return getToken(SqlBaseParser.MINUS, 0). }
false;public;0;1;;public TerminalNode PLUS() {     return getToken(SqlBaseParser.PLUS, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterArithmeticUnary(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitArithmeticUnary(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitArithmeticUnary(this).     else         return visitor.visitChildren(this). }
false;public,final;0;3;;public final ValueExpressionContext valueExpression() throws RecognitionException {     return valueExpression(0). }
false;private;1;199;;private ValueExpressionContext valueExpression(int _p) throws RecognitionException {     ParserRuleContext _parentctx = _ctx.     int _parentState = getState().     ValueExpressionContext _localctx = new ValueExpressionContext(_ctx, _parentState).     ValueExpressionContext _prevctx = _localctx.     int _startState = 58.     enterRecursionRule(_localctx, 58, RULE_valueExpression, _p).     int _la.     try {         int _alt.         enterOuterAlt(_localctx, 1).         {             setState(552).             switch(_input.LA(1)) {                 case T__0:                 case ANALYZE:                 case ANALYZED:                 case CAST:                 case CATALOGS:                 case COLUMNS:                 case CONVERT:                 case CURRENT_DATE:                 case CURRENT_TIMESTAMP:                 case DAY:                 case DEBUG:                 case EXECUTABLE:                 case EXPLAIN:                 case EXTRACT:                 case FALSE:                 case FIRST:                 case FORMAT:                 case FULL:                 case FUNCTIONS:                 case GRAPHVIZ:                 case HOUR:                 case INTERVAL:                 case LAST:                 case LEFT:                 case LIMIT:                 case MAPPED:                 case MINUTE:                 case MONTH:                 case NULL:                 case OPTIMIZED:                 case PARSED:                 case PHYSICAL:                 case PLAN:                 case RIGHT:                 case RLIKE:                 case QUERY:                 case SCHEMAS:                 case SECOND:                 case SHOW:                 case SYS:                 case TABLES:                 case TEXT:                 case TRUE:                 case TYPE:                 case TYPES:                 case VERIFY:                 case YEAR:                 case FUNCTION_ESC:                 case DATE_ESC:                 case TIME_ESC:                 case TIMESTAMP_ESC:                 case GUID_ESC:                 case ASTERISK:                 case PARAM:                 case STRING:                 case INTEGER_VALUE:                 case DECIMAL_VALUE:                 case IDENTIFIER:                 case DIGIT_IDENTIFIER:                 case QUOTED_IDENTIFIER:                 case BACKQUOTED_IDENTIFIER:                     {                         _localctx = new ValueExpressionDefaultContext(_localctx).                         _ctx = _localctx.                         _prevctx = _localctx.                         setState(549).                         primaryExpression().                     }                     break.                 case PLUS:                 case MINUS:                     {                         _localctx = new ArithmeticUnaryContext(_localctx).                         _ctx = _localctx.                         _prevctx = _localctx.                         setState(550).                         ((ArithmeticUnaryContext) _localctx).operator = _input.LT(1).                         _la = _input.LA(1).                         if (!(_la == PLUS || _la == MINUS)) {                             ((ArithmeticUnaryContext) _localctx).operator = (Token) _errHandler.recoverInline(this).                         } else {                             consume().                         }                         setState(551).                         valueExpression(5).                     }                     break.                 default:                     throw new NoViableAltException(this).             }             _ctx.stop = _input.LT(-1).             setState(569).             _errHandler.sync(this).             _alt = getInterpreter().adaptivePredict(_input, 77, _ctx).             while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {                 if (_alt == 1) {                     if (_parseListeners != null)                         triggerExitRuleEvent().                     _prevctx = _localctx.                     {                         setState(567).                         _errHandler.sync(this).                         switch(getInterpreter().adaptivePredict(_input, 76, _ctx)) {                             case 1:                                 {                                     _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState)).                                     ((ArithmeticBinaryContext) _localctx).left = _prevctx.                                     pushNewRecursionContext(_localctx, _startState, RULE_valueExpression).                                     setState(554).                                     if (!(precpred(_ctx, 4)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 4)").                                     setState(555).                                     ((ArithmeticBinaryContext) _localctx).operator = _input.LT(1).                                     _la = _input.LA(1).                                     if (!(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (ASTERISK - 109)) | (1L << (SLASH - 109)) | (1L << (PERCENT - 109)))) != 0))) {                                         ((ArithmeticBinaryContext) _localctx).operator = (Token) _errHandler.recoverInline(this).                                     } else {                                         consume().                                     }                                     setState(556).                                     ((ArithmeticBinaryContext) _localctx).right = valueExpression(5).                                 }                                 break.                             case 2:                                 {                                     _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState)).                                     ((ArithmeticBinaryContext) _localctx).left = _prevctx.                                     pushNewRecursionContext(_localctx, _startState, RULE_valueExpression).                                     setState(557).                                     if (!(precpred(_ctx, 3)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 3)").                                     setState(558).                                     ((ArithmeticBinaryContext) _localctx).operator = _input.LT(1).                                     _la = _input.LA(1).                                     if (!(_la == PLUS || _la == MINUS)) {                                         ((ArithmeticBinaryContext) _localctx).operator = (Token) _errHandler.recoverInline(this).                                     } else {                                         consume().                                     }                                     setState(559).                                     ((ArithmeticBinaryContext) _localctx).right = valueExpression(4).                                 }                                 break.                             case 3:                                 {                                     _localctx = new ComparisonContext(new ValueExpressionContext(_parentctx, _parentState)).                                     ((ComparisonContext) _localctx).left = _prevctx.                                     pushNewRecursionContext(_localctx, _startState, RULE_valueExpression).                                     setState(560).                                     if (!(precpred(_ctx, 2)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 2)").                                     setState(561).                                     comparisonOperator().                                     setState(562).                                     ((ComparisonContext) _localctx).right = valueExpression(3).                                 }                                 break.                             case 4:                                 {                                     _localctx = new CastOperatorExpressionContext(new ValueExpressionContext(_parentctx, _parentState)).                                     pushNewRecursionContext(_localctx, _startState, RULE_valueExpression).                                     setState(564).                                     if (!(precpred(_ctx, 1)))                                         throw new FailedPredicateException(this, "precpred(_ctx, 1)").                                     setState(565).                                     match(CAST_OP).                                     setState(566).                                     dataType().                                 }                                 break.                         }                     }                 }                 setState(571).                 _errHandler.sync(this).                 _alt = getInterpreter().adaptivePredict(_input, 77, _ctx).             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         unrollRecursionContexts(_parentctx).     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_primaryExpression. }
false;public;1;3;;public void copyFrom(PrimaryExpressionContext ctx) {     super.copyFrom(ctx). }
false;public;0;3;;public QualifiedNameContext qualifiedName() {     return getRuleContext(QualifiedNameContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterDereference(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitDereference(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitDereference(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public CastExpressionContext castExpression() {     return getRuleContext(CastExpressionContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterCast(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitCast(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitCast(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ConstantContext constant() {     return getRuleContext(ConstantContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterConstantDefault(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitConstantDefault(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitConstantDefault(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ExtractExpressionContext extractExpression() {     return getRuleContext(ExtractExpressionContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterExtract(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitExtract(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitExtract(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterParenthesizedExpression(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitParenthesizedExpression(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitParenthesizedExpression(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode ASTERISK() {     return getToken(SqlBaseParser.ASTERISK, 0). }
false;public;0;3;;public QualifiedNameContext qualifiedName() {     return getRuleContext(QualifiedNameContext.class, 0). }
false;public;0;1;;public TerminalNode DOT() {     return getToken(SqlBaseParser.DOT, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterStar(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitStar(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitStar(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public FunctionExpressionContext functionExpression() {     return getRuleContext(FunctionExpressionContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterFunction(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitFunction(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitFunction(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public BuiltinDateTimeFunctionContext builtinDateTimeFunction() {     return getRuleContext(BuiltinDateTimeFunctionContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterCurrentDateTimeFunction(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitCurrentDateTimeFunction(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitCurrentDateTimeFunction(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public QueryContext query() {     return getRuleContext(QueryContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterSubqueryExpression(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitSubqueryExpression(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitSubqueryExpression(this).     else         return visitor.visitChildren(this). }
false;public,final;0;111;;public final PrimaryExpressionContext primaryExpression() throws RecognitionException {     PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState()).     enterRule(_localctx, 60, RULE_primaryExpression).     int _la.     try {         setState(592).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 79, _ctx)) {             case 1:                 _localctx = new CastContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(572).                     castExpression().                 }                 break.             case 2:                 _localctx = new ExtractContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(573).                     extractExpression().                 }                 break.             case 3:                 _localctx = new CurrentDateTimeFunctionContext(_localctx).                 enterOuterAlt(_localctx, 3).                 {                     setState(574).                     builtinDateTimeFunction().                 }                 break.             case 4:                 _localctx = new ConstantDefaultContext(_localctx).                 enterOuterAlt(_localctx, 4).                 {                     setState(575).                     constant().                 }                 break.             case 5:                 _localctx = new StarContext(_localctx).                 enterOuterAlt(_localctx, 5).                 {                     setState(579).                     _la = _input.LA(1).                     if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {                         {                             setState(576).                             qualifiedName().                             setState(577).                             match(DOT).                         }                     }                     setState(581).                     match(ASTERISK).                 }                 break.             case 6:                 _localctx = new FunctionContext(_localctx).                 enterOuterAlt(_localctx, 6).                 {                     setState(582).                     functionExpression().                 }                 break.             case 7:                 _localctx = new SubqueryExpressionContext(_localctx).                 enterOuterAlt(_localctx, 7).                 {                     setState(583).                     match(T__0).                     setState(584).                     query().                     setState(585).                     match(T__1).                 }                 break.             case 8:                 _localctx = new DereferenceContext(_localctx).                 enterOuterAlt(_localctx, 8).                 {                     setState(587).                     qualifiedName().                 }                 break.             case 9:                 _localctx = new ParenthesizedExpressionContext(_localctx).                 enterOuterAlt(_localctx, 9).                 {                     setState(588).                     match(T__0).                     setState(589).                     expression().                     setState(590).                     match(T__1).                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode CURRENT_DATE() {     return getToken(SqlBaseParser.CURRENT_DATE, 0). }
false;public;0;1;;public TerminalNode CURRENT_TIMESTAMP() {     return getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0). }
false;public;0;1;;public TerminalNode INTEGER_VALUE() {     return getToken(SqlBaseParser.INTEGER_VALUE, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_builtinDateTimeFunction. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterBuiltinDateTimeFunction(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitBuiltinDateTimeFunction(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitBuiltinDateTimeFunction(this).     else         return visitor.visitChildren(this). }
false;public,final;0;68;;public final BuiltinDateTimeFunctionContext builtinDateTimeFunction() throws RecognitionException {     BuiltinDateTimeFunctionContext _localctx = new BuiltinDateTimeFunctionContext(_ctx, getState()).     enterRule(_localctx, 62, RULE_builtinDateTimeFunction).     int _la.     try {         setState(607).         switch(_input.LA(1)) {             case CURRENT_DATE:                 enterOuterAlt(_localctx, 1).                 {                     setState(594).                     ((BuiltinDateTimeFunctionContext) _localctx).name = match(CURRENT_DATE).                     setState(597).                     _errHandler.sync(this).                     switch(getInterpreter().adaptivePredict(_input, 80, _ctx)) {                         case 1:                             {                                 setState(595).                                 match(T__0).                                 setState(596).                                 match(T__1).                             }                             break.                     }                 }                 break.             case CURRENT_TIMESTAMP:                 enterOuterAlt(_localctx, 2).                 {                     setState(599).                     ((BuiltinDateTimeFunctionContext) _localctx).name = match(CURRENT_TIMESTAMP).                     setState(605).                     _errHandler.sync(this).                     switch(getInterpreter().adaptivePredict(_input, 82, _ctx)) {                         case 1:                             {                                 setState(600).                                 match(T__0).                                 setState(602).                                 _la = _input.LA(1).                                 if (_la == INTEGER_VALUE) {                                     {                                         setState(601).                                         ((BuiltinDateTimeFunctionContext) _localctx).precision = match(INTEGER_VALUE).                                     }                                 }                                 setState(604).                                 match(T__1).                             }                             break.                     }                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public CastTemplateContext castTemplate() {     return getRuleContext(CastTemplateContext.class, 0). }
false;public;0;1;;public TerminalNode FUNCTION_ESC() {     return getToken(SqlBaseParser.FUNCTION_ESC, 0). }
false;public;0;1;;public TerminalNode ESC_END() {     return getToken(SqlBaseParser.ESC_END, 0). }
false;public;0;3;;public ConvertTemplateContext convertTemplate() {     return getRuleContext(ConvertTemplateContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_castExpression. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterCastExpression(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitCastExpression(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitCastExpression(this).     else         return visitor.visitChildren(this). }
false;public,final;0;55;;public final CastExpressionContext castExpression() throws RecognitionException {     CastExpressionContext _localctx = new CastExpressionContext(_ctx, getState()).     enterRule(_localctx, 64, RULE_castExpression).     try {         setState(619).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 84, _ctx)) {             case 1:                 enterOuterAlt(_localctx, 1).                 {                     setState(609).                     castTemplate().                 }                 break.             case 2:                 enterOuterAlt(_localctx, 2).                 {                     setState(610).                     match(FUNCTION_ESC).                     setState(611).                     castTemplate().                     setState(612).                     match(ESC_END).                 }                 break.             case 3:                 enterOuterAlt(_localctx, 3).                 {                     setState(614).                     convertTemplate().                 }                 break.             case 4:                 enterOuterAlt(_localctx, 4).                 {                     setState(615).                     match(FUNCTION_ESC).                     setState(616).                     convertTemplate().                     setState(617).                     match(ESC_END).                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode CAST() {     return getToken(SqlBaseParser.CAST, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;1;;public TerminalNode AS() {     return getToken(SqlBaseParser.AS, 0). }
false;public;0;3;;public DataTypeContext dataType() {     return getRuleContext(DataTypeContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_castTemplate. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterCastTemplate(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitCastTemplate(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitCastTemplate(this).     else         return visitor.visitChildren(this). }
false;public,final;0;30;;public final CastTemplateContext castTemplate() throws RecognitionException {     CastTemplateContext _localctx = new CastTemplateContext(_ctx, getState()).     enterRule(_localctx, 66, RULE_castTemplate).     try {         enterOuterAlt(_localctx, 1).         {             setState(621).             match(CAST).             setState(622).             match(T__0).             setState(623).             expression().             setState(624).             match(AS).             setState(625).             dataType().             setState(626).             match(T__1).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode CONVERT() {     return getToken(SqlBaseParser.CONVERT, 0). }
false;public;0;3;;public ExpressionContext expression() {     return getRuleContext(ExpressionContext.class, 0). }
false;public;0;3;;public DataTypeContext dataType() {     return getRuleContext(DataTypeContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_convertTemplate. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterConvertTemplate(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitConvertTemplate(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitConvertTemplate(this).     else         return visitor.visitChildren(this). }
false;public,final;0;30;;public final ConvertTemplateContext convertTemplate() throws RecognitionException {     ConvertTemplateContext _localctx = new ConvertTemplateContext(_ctx, getState()).     enterRule(_localctx, 68, RULE_convertTemplate).     try {         enterOuterAlt(_localctx, 1).         {             setState(628).             match(CONVERT).             setState(629).             match(T__0).             setState(630).             expression().             setState(631).             match(T__2).             setState(632).             dataType().             setState(633).             match(T__1).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public ExtractTemplateContext extractTemplate() {     return getRuleContext(ExtractTemplateContext.class, 0). }
false;public;0;1;;public TerminalNode FUNCTION_ESC() {     return getToken(SqlBaseParser.FUNCTION_ESC, 0). }
false;public;0;1;;public TerminalNode ESC_END() {     return getToken(SqlBaseParser.ESC_END, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_extractExpression. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterExtractExpression(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitExtractExpression(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitExtractExpression(this).     else         return visitor.visitChildren(this). }
false;public,final;0;38;;public final ExtractExpressionContext extractExpression() throws RecognitionException {     ExtractExpressionContext _localctx = new ExtractExpressionContext(_ctx, getState()).     enterRule(_localctx, 70, RULE_extractExpression).     try {         setState(640).         switch(_input.LA(1)) {             case EXTRACT:                 enterOuterAlt(_localctx, 1).                 {                     setState(635).                     extractTemplate().                 }                 break.             case FUNCTION_ESC:                 enterOuterAlt(_localctx, 2).                 {                     setState(636).                     match(FUNCTION_ESC).                     setState(637).                     extractTemplate().                     setState(638).                     match(ESC_END).                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode EXTRACT() {     return getToken(SqlBaseParser.EXTRACT, 0). }
false;public;0;1;;public TerminalNode FROM() {     return getToken(SqlBaseParser.FROM, 0). }
false;public;0;3;;public ValueExpressionContext valueExpression() {     return getRuleContext(ValueExpressionContext.class, 0). }
false;public;0;3;;public IdentifierContext identifier() {     return getRuleContext(IdentifierContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_extractTemplate. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterExtractTemplate(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitExtractTemplate(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitExtractTemplate(this).     else         return visitor.visitChildren(this). }
false;public,final;0;30;;public final ExtractTemplateContext extractTemplate() throws RecognitionException {     ExtractTemplateContext _localctx = new ExtractTemplateContext(_ctx, getState()).     enterRule(_localctx, 72, RULE_extractTemplate).     try {         enterOuterAlt(_localctx, 1).         {             setState(642).             match(EXTRACT).             setState(643).             match(T__0).             setState(644).             ((ExtractTemplateContext) _localctx).field = identifier().             setState(645).             match(FROM).             setState(646).             valueExpression(0).             setState(647).             match(T__1).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public FunctionTemplateContext functionTemplate() {     return getRuleContext(FunctionTemplateContext.class, 0). }
false;public;0;1;;public TerminalNode FUNCTION_ESC() {     return getToken(SqlBaseParser.FUNCTION_ESC, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_functionExpression. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterFunctionExpression(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitFunctionExpression(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitFunctionExpression(this).     else         return visitor.visitChildren(this). }
false;public,final;0;79;;public final FunctionExpressionContext functionExpression() throws RecognitionException {     FunctionExpressionContext _localctx = new FunctionExpressionContext(_ctx, getState()).     enterRule(_localctx, 74, RULE_functionExpression).     try {         setState(654).         switch(_input.LA(1)) {             case ANALYZE:             case ANALYZED:             case CATALOGS:             case COLUMNS:             case DAY:             case DEBUG:             case EXECUTABLE:             case EXPLAIN:             case FIRST:             case FORMAT:             case FULL:             case FUNCTIONS:             case GRAPHVIZ:             case HOUR:             case INTERVAL:             case LAST:             case LEFT:             case LIMIT:             case MAPPED:             case MINUTE:             case MONTH:             case OPTIMIZED:             case PARSED:             case PHYSICAL:             case PLAN:             case RIGHT:             case RLIKE:             case QUERY:             case SCHEMAS:             case SECOND:             case SHOW:             case SYS:             case TABLES:             case TEXT:             case TYPE:             case TYPES:             case VERIFY:             case YEAR:             case IDENTIFIER:             case DIGIT_IDENTIFIER:             case QUOTED_IDENTIFIER:             case BACKQUOTED_IDENTIFIER:                 enterOuterAlt(_localctx, 1).                 {                     setState(649).                     functionTemplate().                 }                 break.             case FUNCTION_ESC:                 enterOuterAlt(_localctx, 2).                 {                     setState(650).                     match(FUNCTION_ESC).                     setState(651).                     functionTemplate().                     setState(652).                     match(ESC_END).                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public FunctionNameContext functionName() {     return getRuleContext(FunctionNameContext.class, 0). }
false;public;0;3;;public List<ExpressionContext> expression() {     return getRuleContexts(ExpressionContext.class). }
false;public;1;3;;public ExpressionContext expression(int i) {     return getRuleContext(ExpressionContext.class, i). }
false;public;0;3;;public SetQuantifierContext setQuantifier() {     return getRuleContext(SetQuantifierContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_functionTemplate. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterFunctionTemplate(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitFunctionTemplate(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitFunctionTemplate(this).     else         return visitor.visitChildren(this). }
false;public,final;0;59;;public final FunctionTemplateContext functionTemplate() throws RecognitionException {     FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState()).     enterRule(_localctx, 76, RULE_functionTemplate).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(656).             functionName().             setState(657).             match(T__0).             setState(669).             _la = _input.LA(1).             if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {                 {                     setState(659).                     _la = _input.LA(1).                     if (_la == ALL || _la == DISTINCT) {                         {                             setState(658).                             setQuantifier().                         }                     }                     setState(661).                     expression().                     setState(666).                     _errHandler.sync(this).                     _la = _input.LA(1).                     while (_la == T__2) {                         {                             {                                 setState(662).                                 match(T__2).                                 setState(663).                                 expression().                             }                         }                         setState(668).                         _errHandler.sync(this).                         _la = _input.LA(1).                     }                 }             }             setState(671).             match(T__1).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode LEFT() {     return getToken(SqlBaseParser.LEFT, 0). }
false;public;0;1;;public TerminalNode RIGHT() {     return getToken(SqlBaseParser.RIGHT, 0). }
false;public;0;3;;public IdentifierContext identifier() {     return getRuleContext(IdentifierContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_functionName. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterFunctionName(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitFunctionName(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitFunctionName(this).     else         return visitor.visitChildren(this). }
false;public,final;0;80;;public final FunctionNameContext functionName() throws RecognitionException {     FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState()).     enterRule(_localctx, 78, RULE_functionName).     try {         setState(676).         switch(_input.LA(1)) {             case LEFT:                 enterOuterAlt(_localctx, 1).                 {                     setState(673).                     match(LEFT).                 }                 break.             case RIGHT:                 enterOuterAlt(_localctx, 2).                 {                     setState(674).                     match(RIGHT).                 }                 break.             case ANALYZE:             case ANALYZED:             case CATALOGS:             case COLUMNS:             case DAY:             case DEBUG:             case EXECUTABLE:             case EXPLAIN:             case FIRST:             case FORMAT:             case FULL:             case FUNCTIONS:             case GRAPHVIZ:             case HOUR:             case INTERVAL:             case LAST:             case LIMIT:             case MAPPED:             case MINUTE:             case MONTH:             case OPTIMIZED:             case PARSED:             case PHYSICAL:             case PLAN:             case RLIKE:             case QUERY:             case SCHEMAS:             case SECOND:             case SHOW:             case SYS:             case TABLES:             case TEXT:             case TYPE:             case TYPES:             case VERIFY:             case YEAR:             case IDENTIFIER:             case DIGIT_IDENTIFIER:             case QUOTED_IDENTIFIER:             case BACKQUOTED_IDENTIFIER:                 enterOuterAlt(_localctx, 3).                 {                     setState(675).                     identifier().                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_constant. }
false;public;1;3;;public void copyFrom(ConstantContext ctx) {     super.copyFrom(ctx). }
false;public;0;1;;public TerminalNode NULL() {     return getToken(SqlBaseParser.NULL, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterNullLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitNullLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitNullLiteral(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode TIMESTAMP_ESC() {     return getToken(SqlBaseParser.TIMESTAMP_ESC, 0). }
false;public;0;3;;public StringContext string() {     return getRuleContext(StringContext.class, 0). }
false;public;0;1;;public TerminalNode ESC_END() {     return getToken(SqlBaseParser.ESC_END, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterTimestampEscapedLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitTimestampEscapedLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitTimestampEscapedLiteral(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public List<TerminalNode> STRING() {     return getTokens(SqlBaseParser.STRING). }
false;public;1;3;;public TerminalNode STRING(int i) {     return getToken(SqlBaseParser.STRING, i). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterStringLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitStringLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitStringLiteral(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode PARAM() {     return getToken(SqlBaseParser.PARAM, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterParamLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitParamLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitParamLiteral(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode TIME_ESC() {     return getToken(SqlBaseParser.TIME_ESC, 0). }
false;public;0;3;;public StringContext string() {     return getRuleContext(StringContext.class, 0). }
false;public;0;1;;public TerminalNode ESC_END() {     return getToken(SqlBaseParser.ESC_END, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterTimeEscapedLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitTimeEscapedLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitTimeEscapedLiteral(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode DATE_ESC() {     return getToken(SqlBaseParser.DATE_ESC, 0). }
false;public;0;3;;public StringContext string() {     return getRuleContext(StringContext.class, 0). }
false;public;0;1;;public TerminalNode ESC_END() {     return getToken(SqlBaseParser.ESC_END, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterDateEscapedLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitDateEscapedLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitDateEscapedLiteral(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public IntervalContext interval() {     return getRuleContext(IntervalContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterIntervalLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitIntervalLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitIntervalLiteral(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public NumberContext number() {     return getRuleContext(NumberContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterNumericLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitNumericLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitNumericLiteral(this).     else         return visitor.visitChildren(this). }
false;public;0;3;;public BooleanValueContext booleanValue() {     return getRuleContext(BooleanValueContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterBooleanLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitBooleanLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitBooleanLiteral(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode GUID_ESC() {     return getToken(SqlBaseParser.GUID_ESC, 0). }
false;public;0;3;;public StringContext string() {     return getRuleContext(StringContext.class, 0). }
false;public;0;1;;public TerminalNode ESC_END() {     return getToken(SqlBaseParser.ESC_END, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterGuidEscapedLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitGuidEscapedLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitGuidEscapedLiteral(this).     else         return visitor.visitChildren(this). }
false;public,final;0;137;;public final ConstantContext constant() throws RecognitionException {     ConstantContext _localctx = new ConstantContext(_ctx, getState()).     enterRule(_localctx, 80, RULE_constant).     try {         int _alt.         setState(704).         switch(_input.LA(1)) {             case NULL:                 _localctx = new NullLiteralContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(678).                     match(NULL).                 }                 break.             case INTERVAL:                 _localctx = new IntervalLiteralContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(679).                     interval().                 }                 break.             case INTEGER_VALUE:             case DECIMAL_VALUE:                 _localctx = new NumericLiteralContext(_localctx).                 enterOuterAlt(_localctx, 3).                 {                     setState(680).                     number().                 }                 break.             case FALSE:             case TRUE:                 _localctx = new BooleanLiteralContext(_localctx).                 enterOuterAlt(_localctx, 4).                 {                     setState(681).                     booleanValue().                 }                 break.             case STRING:                 _localctx = new StringLiteralContext(_localctx).                 enterOuterAlt(_localctx, 5).                 {                     setState(683).                     _errHandler.sync(this).                     _alt = 1.                     do {                         switch(_alt) {                             case 1:                                 {                                     {                                         setState(682).                                         match(STRING).                                     }                                 }                                 break.                             default:                                 throw new NoViableAltException(this).                         }                         setState(685).                         _errHandler.sync(this).                         _alt = getInterpreter().adaptivePredict(_input, 91, _ctx).                     } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER).                 }                 break.             case PARAM:                 _localctx = new ParamLiteralContext(_localctx).                 enterOuterAlt(_localctx, 6).                 {                     setState(687).                     match(PARAM).                 }                 break.             case DATE_ESC:                 _localctx = new DateEscapedLiteralContext(_localctx).                 enterOuterAlt(_localctx, 7).                 {                     setState(688).                     match(DATE_ESC).                     setState(689).                     string().                     setState(690).                     match(ESC_END).                 }                 break.             case TIME_ESC:                 _localctx = new TimeEscapedLiteralContext(_localctx).                 enterOuterAlt(_localctx, 8).                 {                     setState(692).                     match(TIME_ESC).                     setState(693).                     string().                     setState(694).                     match(ESC_END).                 }                 break.             case TIMESTAMP_ESC:                 _localctx = new TimestampEscapedLiteralContext(_localctx).                 enterOuterAlt(_localctx, 9).                 {                     setState(696).                     match(TIMESTAMP_ESC).                     setState(697).                     string().                     setState(698).                     match(ESC_END).                 }                 break.             case GUID_ESC:                 _localctx = new GuidEscapedLiteralContext(_localctx).                 enterOuterAlt(_localctx, 10).                 {                     setState(700).                     match(GUID_ESC).                     setState(701).                     string().                     setState(702).                     match(ESC_END).                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode EQ() {     return getToken(SqlBaseParser.EQ, 0). }
false;public;0;1;;public TerminalNode NULLEQ() {     return getToken(SqlBaseParser.NULLEQ, 0). }
false;public;0;1;;public TerminalNode NEQ() {     return getToken(SqlBaseParser.NEQ, 0). }
false;public;0;1;;public TerminalNode LT() {     return getToken(SqlBaseParser.LT, 0). }
false;public;0;1;;public TerminalNode LTE() {     return getToken(SqlBaseParser.LTE, 0). }
false;public;0;1;;public TerminalNode GT() {     return getToken(SqlBaseParser.GT, 0). }
false;public;0;1;;public TerminalNode GTE() {     return getToken(SqlBaseParser.GTE, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_comparisonOperator. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterComparisonOperator(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitComparisonOperator(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitComparisonOperator(this).     else         return visitor.visitChildren(this). }
false;public,final;0;26;;public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {     ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState()).     enterRule(_localctx, 82, RULE_comparisonOperator).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(706).             _la = _input.LA(1).             if (!(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (EQ - 100)) | (1L << (NULLEQ - 100)) | (1L << (NEQ - 100)) | (1L << (LT - 100)) | (1L << (LTE - 100)) | (1L << (GT - 100)) | (1L << (GTE - 100)))) != 0))) {                 _errHandler.recoverInline(this).             } else {                 consume().             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode TRUE() {     return getToken(SqlBaseParser.TRUE, 0). }
false;public;0;1;;public TerminalNode FALSE() {     return getToken(SqlBaseParser.FALSE, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_booleanValue. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterBooleanValue(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitBooleanValue(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitBooleanValue(this).     else         return visitor.visitChildren(this). }
false;public,final;0;26;;public final BooleanValueContext booleanValue() throws RecognitionException {     BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState()).     enterRule(_localctx, 84, RULE_booleanValue).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(708).             _la = _input.LA(1).             if (!(_la == FALSE || _la == TRUE)) {                 _errHandler.recoverInline(this).             } else {                 consume().             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode INTERVAL() {     return getToken(SqlBaseParser.INTERVAL, 0). }
false;public;0;3;;public List<IntervalFieldContext> intervalField() {     return getRuleContexts(IntervalFieldContext.class). }
false;public;1;3;;public IntervalFieldContext intervalField(int i) {     return getRuleContext(IntervalFieldContext.class, i). }
false;public;0;3;;public NumberContext number() {     return getRuleContext(NumberContext.class, 0). }
false;public;0;3;;public StringContext string() {     return getRuleContext(StringContext.class, 0). }
false;public;0;1;;public TerminalNode TO() {     return getToken(SqlBaseParser.TO, 0). }
false;public;0;1;;public TerminalNode PLUS() {     return getToken(SqlBaseParser.PLUS, 0). }
false;public;0;1;;public TerminalNode MINUS() {     return getToken(SqlBaseParser.MINUS, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_interval. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterInterval(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitInterval(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitInterval(this).     else         return visitor.visitChildren(this). }
false;public,final;0;69;;public final IntervalContext interval() throws RecognitionException {     IntervalContext _localctx = new IntervalContext(_ctx, getState()).     enterRule(_localctx, 86, RULE_interval).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(710).             match(INTERVAL).             setState(712).             _la = _input.LA(1).             if (_la == PLUS || _la == MINUS) {                 {                     setState(711).                     ((IntervalContext) _localctx).sign = _input.LT(1).                     _la = _input.LA(1).                     if (!(_la == PLUS || _la == MINUS)) {                         ((IntervalContext) _localctx).sign = (Token) _errHandler.recoverInline(this).                     } else {                         consume().                     }                 }             }             setState(716).             switch(_input.LA(1)) {                 case INTEGER_VALUE:                 case DECIMAL_VALUE:                     {                         setState(714).                         ((IntervalContext) _localctx).valueNumeric = number().                     }                     break.                 case PARAM:                 case STRING:                     {                         setState(715).                         ((IntervalContext) _localctx).valuePattern = string().                     }                     break.                 default:                     throw new NoViableAltException(this).             }             setState(718).             ((IntervalContext) _localctx).leading = intervalField().             setState(721).             _errHandler.sync(this).             switch(getInterpreter().adaptivePredict(_input, 95, _ctx)) {                 case 1:                     {                         setState(719).                         match(TO).                         setState(720).                         ((IntervalContext) _localctx).trailing = intervalField().                     }                     break.             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode YEAR() {     return getToken(SqlBaseParser.YEAR, 0). }
false;public;0;1;;public TerminalNode YEARS() {     return getToken(SqlBaseParser.YEARS, 0). }
false;public;0;1;;public TerminalNode MONTH() {     return getToken(SqlBaseParser.MONTH, 0). }
false;public;0;1;;public TerminalNode MONTHS() {     return getToken(SqlBaseParser.MONTHS, 0). }
false;public;0;1;;public TerminalNode DAY() {     return getToken(SqlBaseParser.DAY, 0). }
false;public;0;1;;public TerminalNode DAYS() {     return getToken(SqlBaseParser.DAYS, 0). }
false;public;0;1;;public TerminalNode HOUR() {     return getToken(SqlBaseParser.HOUR, 0). }
false;public;0;1;;public TerminalNode HOURS() {     return getToken(SqlBaseParser.HOURS, 0). }
false;public;0;1;;public TerminalNode MINUTE() {     return getToken(SqlBaseParser.MINUTE, 0). }
false;public;0;1;;public TerminalNode MINUTES() {     return getToken(SqlBaseParser.MINUTES, 0). }
false;public;0;1;;public TerminalNode SECOND() {     return getToken(SqlBaseParser.SECOND, 0). }
false;public;0;1;;public TerminalNode SECONDS() {     return getToken(SqlBaseParser.SECONDS, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_intervalField. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterIntervalField(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitIntervalField(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitIntervalField(this).     else         return visitor.visitChildren(this). }
false;public,final;0;26;;public final IntervalFieldContext intervalField() throws RecognitionException {     IntervalFieldContext _localctx = new IntervalFieldContext(_ctx, getState()).     enterRule(_localctx, 88, RULE_intervalField).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(723).             _la = _input.LA(1).             if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAY) | (1L << DAYS) | (1L << HOUR) | (1L << HOURS) | (1L << MINUTE) | (1L << MINUTES) | (1L << MONTH) | (1L << MONTHS))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (SECOND - 74)) | (1L << (SECONDS - 74)) | (1L << (YEAR - 74)) | (1L << (YEARS - 74)))) != 0))) {                 _errHandler.recoverInline(this).             } else {                 consume().             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_dataType. }
false;public;1;3;;public void copyFrom(DataTypeContext ctx) {     super.copyFrom(ctx). }
false;public;0;3;;public IdentifierContext identifier() {     return getRuleContext(IdentifierContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterPrimitiveDataType(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitPrimitiveDataType(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitPrimitiveDataType(this).     else         return visitor.visitChildren(this). }
false;public,final;0;21;;public final DataTypeContext dataType() throws RecognitionException {     DataTypeContext _localctx = new DataTypeContext(_ctx, getState()).     enterRule(_localctx, 90, RULE_dataType).     try {         _localctx = new PrimitiveDataTypeContext(_localctx).         enterOuterAlt(_localctx, 1).         {             setState(725).             identifier().         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public List<IdentifierContext> identifier() {     return getRuleContexts(IdentifierContext.class). }
false;public;1;3;;public IdentifierContext identifier(int i) {     return getRuleContext(IdentifierContext.class, i). }
false;public;0;1;;public List<TerminalNode> DOT() {     return getTokens(SqlBaseParser.DOT). }
false;public;1;3;;public TerminalNode DOT(int i) {     return getToken(SqlBaseParser.DOT, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_qualifiedName. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterQualifiedName(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitQualifiedName(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitQualifiedName(this).     else         return visitor.visitChildren(this). }
false;public,final;0;39;;public final QualifiedNameContext qualifiedName() throws RecognitionException {     QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState()).     enterRule(_localctx, 92, RULE_qualifiedName).     try {         int _alt.         enterOuterAlt(_localctx, 1).         {             setState(732).             _errHandler.sync(this).             _alt = getInterpreter().adaptivePredict(_input, 96, _ctx).             while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {                 if (_alt == 1) {                     {                         {                             setState(727).                             identifier().                             setState(728).                             match(DOT).                         }                     }                 }                 setState(734).                 _errHandler.sync(this).                 _alt = getInterpreter().adaptivePredict(_input, 96, _ctx).             }             setState(735).             identifier().         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;3;;public QuoteIdentifierContext quoteIdentifier() {     return getRuleContext(QuoteIdentifierContext.class, 0). }
false;public;0;3;;public UnquoteIdentifierContext unquoteIdentifier() {     return getRuleContext(UnquoteIdentifierContext.class, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_identifier. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterIdentifier(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitIdentifier(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitIdentifier(this).     else         return visitor.visitChildren(this). }
false;public,final;0;72;;public final IdentifierContext identifier() throws RecognitionException {     IdentifierContext _localctx = new IdentifierContext(_ctx, getState()).     enterRule(_localctx, 94, RULE_identifier).     try {         setState(739).         switch(_input.LA(1)) {             case QUOTED_IDENTIFIER:             case BACKQUOTED_IDENTIFIER:                 enterOuterAlt(_localctx, 1).                 {                     setState(737).                     quoteIdentifier().                 }                 break.             case ANALYZE:             case ANALYZED:             case CATALOGS:             case COLUMNS:             case DAY:             case DEBUG:             case EXECUTABLE:             case EXPLAIN:             case FIRST:             case FORMAT:             case FULL:             case FUNCTIONS:             case GRAPHVIZ:             case HOUR:             case INTERVAL:             case LAST:             case LIMIT:             case MAPPED:             case MINUTE:             case MONTH:             case OPTIMIZED:             case PARSED:             case PHYSICAL:             case PLAN:             case RLIKE:             case QUERY:             case SCHEMAS:             case SECOND:             case SHOW:             case SYS:             case TABLES:             case TEXT:             case TYPE:             case TYPES:             case VERIFY:             case YEAR:             case IDENTIFIER:             case DIGIT_IDENTIFIER:                 enterOuterAlt(_localctx, 2).                 {                     setState(738).                     unquoteIdentifier().                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode TABLE_IDENTIFIER() {     return getToken(SqlBaseParser.TABLE_IDENTIFIER, 0). }
false;public;0;3;;public List<IdentifierContext> identifier() {     return getRuleContexts(IdentifierContext.class). }
false;public;1;3;;public IdentifierContext identifier(int i) {     return getRuleContext(IdentifierContext.class, i). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_tableIdentifier. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterTableIdentifier(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitTableIdentifier(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitTableIdentifier(this).     else         return visitor.visitChildren(this). }
false;public,final;0;57;;public final TableIdentifierContext tableIdentifier() throws RecognitionException {     TableIdentifierContext _localctx = new TableIdentifierContext(_ctx, getState()).     enterRule(_localctx, 96, RULE_tableIdentifier).     int _la.     try {         setState(753).         _errHandler.sync(this).         switch(getInterpreter().adaptivePredict(_input, 100, _ctx)) {             case 1:                 enterOuterAlt(_localctx, 1).                 {                     setState(744).                     _la = _input.LA(1).                     if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {                         {                             setState(741).                             ((TableIdentifierContext) _localctx).catalog = identifier().                             setState(742).                             match(T__3).                         }                     }                     setState(746).                     match(TABLE_IDENTIFIER).                 }                 break.             case 2:                 enterOuterAlt(_localctx, 2).                 {                     setState(750).                     _errHandler.sync(this).                     switch(getInterpreter().adaptivePredict(_input, 99, _ctx)) {                         case 1:                             {                                 setState(747).                                 ((TableIdentifierContext) _localctx).catalog = identifier().                                 setState(748).                                 match(T__3).                             }                             break.                     }                     setState(752).                     ((TableIdentifierContext) _localctx).name = identifier().                 }                 break.         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_quoteIdentifier. }
false;public;1;3;;public void copyFrom(QuoteIdentifierContext ctx) {     super.copyFrom(ctx). }
false;public;0;1;;public TerminalNode BACKQUOTED_IDENTIFIER() {     return getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterBackQuotedIdentifier(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitBackQuotedIdentifier(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitBackQuotedIdentifier(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode QUOTED_IDENTIFIER() {     return getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterQuotedIdentifier(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitQuotedIdentifier(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitQuotedIdentifier(this).     else         return visitor.visitChildren(this). }
false;public,final;0;36;;public final QuoteIdentifierContext quoteIdentifier() throws RecognitionException {     QuoteIdentifierContext _localctx = new QuoteIdentifierContext(_ctx, getState()).     enterRule(_localctx, 98, RULE_quoteIdentifier).     try {         setState(757).         switch(_input.LA(1)) {             case QUOTED_IDENTIFIER:                 _localctx = new QuotedIdentifierContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(755).                     match(QUOTED_IDENTIFIER).                 }                 break.             case BACKQUOTED_IDENTIFIER:                 _localctx = new BackQuotedIdentifierContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(756).                     match(BACKQUOTED_IDENTIFIER).                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_unquoteIdentifier. }
false;public;1;3;;public void copyFrom(UnquoteIdentifierContext ctx) {     super.copyFrom(ctx). }
false;public;0;1;;public TerminalNode DIGIT_IDENTIFIER() {     return getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterDigitIdentifier(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitDigitIdentifier(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitDigitIdentifier(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode IDENTIFIER() {     return getToken(SqlBaseParser.IDENTIFIER, 0). }
false;public;0;3;;public NonReservedContext nonReserved() {     return getRuleContext(NonReservedContext.class, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterUnquotedIdentifier(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitUnquotedIdentifier(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitUnquotedIdentifier(this).     else         return visitor.visitChildren(this). }
false;public,final;0;79;;public final UnquoteIdentifierContext unquoteIdentifier() throws RecognitionException {     UnquoteIdentifierContext _localctx = new UnquoteIdentifierContext(_ctx, getState()).     enterRule(_localctx, 100, RULE_unquoteIdentifier).     try {         setState(762).         switch(_input.LA(1)) {             case IDENTIFIER:                 _localctx = new UnquotedIdentifierContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(759).                     match(IDENTIFIER).                 }                 break.             case ANALYZE:             case ANALYZED:             case CATALOGS:             case COLUMNS:             case DAY:             case DEBUG:             case EXECUTABLE:             case EXPLAIN:             case FIRST:             case FORMAT:             case FULL:             case FUNCTIONS:             case GRAPHVIZ:             case HOUR:             case INTERVAL:             case LAST:             case LIMIT:             case MAPPED:             case MINUTE:             case MONTH:             case OPTIMIZED:             case PARSED:             case PHYSICAL:             case PLAN:             case RLIKE:             case QUERY:             case SCHEMAS:             case SECOND:             case SHOW:             case SYS:             case TABLES:             case TEXT:             case TYPE:             case TYPES:             case VERIFY:             case YEAR:                 _localctx = new UnquotedIdentifierContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(760).                     nonReserved().                 }                 break.             case DIGIT_IDENTIFIER:                 _localctx = new DigitIdentifierContext(_localctx).                 enterOuterAlt(_localctx, 3).                 {                     setState(761).                     match(DIGIT_IDENTIFIER).                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_number. }
false;public;1;3;;public void copyFrom(NumberContext ctx) {     super.copyFrom(ctx). }
false;public;0;1;;public TerminalNode DECIMAL_VALUE() {     return getToken(SqlBaseParser.DECIMAL_VALUE, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterDecimalLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitDecimalLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitDecimalLiteral(this).     else         return visitor.visitChildren(this). }
false;public;0;1;;public TerminalNode INTEGER_VALUE() {     return getToken(SqlBaseParser.INTEGER_VALUE, 0). }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterIntegerLiteral(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitIntegerLiteral(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitIntegerLiteral(this).     else         return visitor.visitChildren(this). }
false;public,final;0;36;;public final NumberContext number() throws RecognitionException {     NumberContext _localctx = new NumberContext(_ctx, getState()).     enterRule(_localctx, 102, RULE_number).     try {         setState(766).         switch(_input.LA(1)) {             case DECIMAL_VALUE:                 _localctx = new DecimalLiteralContext(_localctx).                 enterOuterAlt(_localctx, 1).                 {                     setState(764).                     match(DECIMAL_VALUE).                 }                 break.             case INTEGER_VALUE:                 _localctx = new IntegerLiteralContext(_localctx).                 enterOuterAlt(_localctx, 2).                 {                     setState(765).                     match(INTEGER_VALUE).                 }                 break.             default:                 throw new NoViableAltException(this).         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode PARAM() {     return getToken(SqlBaseParser.PARAM, 0). }
false;public;0;1;;public TerminalNode STRING() {     return getToken(SqlBaseParser.STRING, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_string. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterString(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitString(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitString(this).     else         return visitor.visitChildren(this). }
false;public,final;0;26;;public final StringContext string() throws RecognitionException {     StringContext _localctx = new StringContext(_ctx, getState()).     enterRule(_localctx, 104, RULE_string).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(768).             _la = _input.LA(1).             if (!(_la == PARAM || _la == STRING)) {                 _errHandler.recoverInline(this).             } else {                 consume().             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;0;1;;public TerminalNode ANALYZE() {     return getToken(SqlBaseParser.ANALYZE, 0). }
false;public;0;1;;public TerminalNode ANALYZED() {     return getToken(SqlBaseParser.ANALYZED, 0). }
false;public;0;1;;public TerminalNode CATALOGS() {     return getToken(SqlBaseParser.CATALOGS, 0). }
false;public;0;1;;public TerminalNode COLUMNS() {     return getToken(SqlBaseParser.COLUMNS, 0). }
false;public;0;1;;public TerminalNode DAY() {     return getToken(SqlBaseParser.DAY, 0). }
false;public;0;1;;public TerminalNode DEBUG() {     return getToken(SqlBaseParser.DEBUG, 0). }
false;public;0;1;;public TerminalNode EXECUTABLE() {     return getToken(SqlBaseParser.EXECUTABLE, 0). }
false;public;0;1;;public TerminalNode EXPLAIN() {     return getToken(SqlBaseParser.EXPLAIN, 0). }
false;public;0;1;;public TerminalNode FIRST() {     return getToken(SqlBaseParser.FIRST, 0). }
false;public;0;1;;public TerminalNode FORMAT() {     return getToken(SqlBaseParser.FORMAT, 0). }
false;public;0;1;;public TerminalNode FULL() {     return getToken(SqlBaseParser.FULL, 0). }
false;public;0;1;;public TerminalNode FUNCTIONS() {     return getToken(SqlBaseParser.FUNCTIONS, 0). }
false;public;0;1;;public TerminalNode GRAPHVIZ() {     return getToken(SqlBaseParser.GRAPHVIZ, 0). }
false;public;0;1;;public TerminalNode HOUR() {     return getToken(SqlBaseParser.HOUR, 0). }
false;public;0;1;;public TerminalNode INTERVAL() {     return getToken(SqlBaseParser.INTERVAL, 0). }
false;public;0;1;;public TerminalNode LAST() {     return getToken(SqlBaseParser.LAST, 0). }
false;public;0;1;;public TerminalNode LIMIT() {     return getToken(SqlBaseParser.LIMIT, 0). }
false;public;0;1;;public TerminalNode MAPPED() {     return getToken(SqlBaseParser.MAPPED, 0). }
false;public;0;1;;public TerminalNode MINUTE() {     return getToken(SqlBaseParser.MINUTE, 0). }
false;public;0;1;;public TerminalNode MONTH() {     return getToken(SqlBaseParser.MONTH, 0). }
false;public;0;1;;public TerminalNode OPTIMIZED() {     return getToken(SqlBaseParser.OPTIMIZED, 0). }
false;public;0;1;;public TerminalNode PARSED() {     return getToken(SqlBaseParser.PARSED, 0). }
false;public;0;1;;public TerminalNode PHYSICAL() {     return getToken(SqlBaseParser.PHYSICAL, 0). }
false;public;0;1;;public TerminalNode PLAN() {     return getToken(SqlBaseParser.PLAN, 0). }
false;public;0;1;;public TerminalNode QUERY() {     return getToken(SqlBaseParser.QUERY, 0). }
false;public;0;1;;public TerminalNode RLIKE() {     return getToken(SqlBaseParser.RLIKE, 0). }
false;public;0;1;;public TerminalNode SCHEMAS() {     return getToken(SqlBaseParser.SCHEMAS, 0). }
false;public;0;1;;public TerminalNode SECOND() {     return getToken(SqlBaseParser.SECOND, 0). }
false;public;0;1;;public TerminalNode SHOW() {     return getToken(SqlBaseParser.SHOW, 0). }
false;public;0;1;;public TerminalNode SYS() {     return getToken(SqlBaseParser.SYS, 0). }
false;public;0;1;;public TerminalNode TABLES() {     return getToken(SqlBaseParser.TABLES, 0). }
false;public;0;1;;public TerminalNode TEXT() {     return getToken(SqlBaseParser.TEXT, 0). }
false;public;0;1;;public TerminalNode TYPE() {     return getToken(SqlBaseParser.TYPE, 0). }
false;public;0;1;;public TerminalNode TYPES() {     return getToken(SqlBaseParser.TYPES, 0). }
false;public;0;1;;public TerminalNode VERIFY() {     return getToken(SqlBaseParser.VERIFY, 0). }
false;public;0;1;;public TerminalNode YEAR() {     return getToken(SqlBaseParser.YEAR, 0). }
false;public;0;1;;@Override public int getRuleIndex() {     return RULE_nonReserved. }
false;public;1;4;;@Override public void enterRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).enterNonReserved(this). }
false;public;1;4;;@Override public void exitRule(ParseTreeListener listener) {     if (listener instanceof SqlBaseListener)         ((SqlBaseListener) listener).exitNonReserved(this). }
false;public;1;5;;@Override public <T> T accept(ParseTreeVisitor<? extends T> visitor) {     if (visitor instanceof SqlBaseVisitor)         return ((SqlBaseVisitor<? extends T>) visitor).visitNonReserved(this).     else         return visitor.visitChildren(this). }
false;public,final;0;26;;public final NonReservedContext nonReserved() throws RecognitionException {     NonReservedContext _localctx = new NonReservedContext(_ctx, getState()).     enterRule(_localctx, 106, RULE_nonReserved).     int _la.     try {         enterOuterAlt(_localctx, 1).         {             setState(770).             _la = _input.LA(1).             if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0))) {                 _errHandler.recoverInline(this).             } else {                 consume().             }         }     } catch (RecognitionException re) {         _localctx.exception = re.         _errHandler.reportError(this, re).         _errHandler.recover(this, re).     } finally {         exitRule().     }     return _localctx. }
false;public;3;9;;public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {     switch(ruleIndex) {         case 22:             return booleanExpression_sempred((BooleanExpressionContext) _localctx, predIndex).         case 29:             return valueExpression_sempred((ValueExpressionContext) _localctx, predIndex).     }     return true. }
false;private;2;9;;private boolean booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {     switch(predIndex) {         case 0:             return precpred(_ctx, 2).         case 1:             return precpred(_ctx, 1).     }     return true. }
false;private;2;13;;private boolean valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {     switch(predIndex) {         case 2:             return precpred(_ctx, 4).         case 3:             return precpred(_ctx, 3).         case 4:             return precpred(_ctx, 2).         case 5:             return precpred(_ctx, 1).     }     return true. }
