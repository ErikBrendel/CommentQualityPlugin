commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return this.name().toLowerCase(Locale.ROOT). }
true;public;1;3;/**  * Increments the "total" counter for a metric  * This method should be called only once per query.  */ ;/**  * Increments the "total" counter for a metric  * This method should be called only once per query.  */ public void total(QueryMetric metric) {     inc(metric, OperationType.TOTAL). }
true;public;1;3;/**  * Increments the "failed" counter for a metric  */ ;/**  * Increments the "failed" counter for a metric  */ public void failed(QueryMetric metric) {     inc(metric, OperationType.FAILED). }
true;public;1;3;/**  * Increments the "paging" counter for a metric  */ ;/**  * Increments the "paging" counter for a metric  */ public void paging(QueryMetric metric) {     inc(metric, OperationType.PAGING). }
true;public;0;3;/**  * Increments the "translate" metric  */ ;/**  * Increments the "translate" metric  */ public void translate() {     translateMetric.inc(). }
false;private;2;3;;private void inc(QueryMetric metric, OperationType op) {     this.opsByTypeMetrics.get(metric).get(op).inc(). }
false;public;1;3;;public void inc(FeatureMetric metric) {     this.featuresMetrics.get(metric).inc(). }
false;public;0;30;;public Counters stats() {     Counters counters = new Counters().     // queries metrics     for (Entry<QueryMetric, Map<OperationType, CounterMetric>> entry : opsByTypeMetrics.entrySet()) {         String metricName = entry.getKey().toString().         for (OperationType type : OperationType.values()) {             long metricCounter = entry.getValue().get(type).count().             String operationTypeName = type.toString().             counters.inc(QPREFIX + metricName + "." + operationTypeName, metricCounter).             counters.inc(QPREFIX + "_all." + operationTypeName, metricCounter).             // compute the ODBC total metric             if (ODBC_CLIENT_IDS.contains(metricName)) {                 counters.inc(QPREFIX + ODBC.toString() + "." + operationTypeName, metricCounter).             }         }     }     // features metrics     for (Entry<FeatureMetric, CounterMetric> entry : featuresMetrics.entrySet()) {         counters.inc(FPREFIX + entry.getKey().toString(), entry.getValue().count()).     }     // translate operation metric     counters.inc(TRANSLATE_METRIC, translateMetric.count()).     return counters. }
