# id;timestamp;commentText;codeText;commentWords;codeWords
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             ConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1544460729;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the cluster name (DATABASE()) or the user name (USER()).;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            ConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,cluster,name,database,or,the,user,name,user;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             ConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1544574542;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the cluster name (DATABASE()) or the user name (USER()).;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            ConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,cluster,name,database,or,the,user,name,user;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             ConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1544794956;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the cluster name (DATABASE()) or the user name (USER()).;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            ConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,cluster,name,database,or,the,user,name,user;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             ConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1544804437;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the cluster name (DATABASE()) or the user name (USER()).;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            ConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,cluster,name,database,or,the,user,name,user;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             ConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1545047744;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the cluster name (DATABASE()) or the user name (USER()).;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            ConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,cluster,name,database,or,the,user,name,user;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             ConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1546556270;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the cluster name (DATABASE()) or the user name (USER()).;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            ConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,cluster,name,database,or,the,user,name,user;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             ConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1548945185;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the cluster name (DATABASE()) or the user name (USER()).;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            ConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,cluster,name,database,or,the,user,name,user;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             ConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1549383326;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the cluster name (DATABASE()) or the user name (USER()).;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            ConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,cluster,name,database,or,the,user,name,user;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,cfg,return,def,function,builder,false,names
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... names);1544460729;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,names
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... names);1544574542;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,names
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... names);1544794956;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,names
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... names);1544804437;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,names
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... names);1545047744;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... aliases);1540847035;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, aliases)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... aliases);1541502744;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, aliases)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... aliases);1542816427;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, aliases)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... aliases);1542838510;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, aliases)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... aliases);1542883260;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, aliases)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... aliases);1543007967;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, aliases)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... aliases);1543252896;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, aliases)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... aliases);1543411204;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... aliases) {_        FunctionBuilder builder = (location, children, distinct, cfg) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, aliases)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,cfg,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function, DatetimeBinaryFunctionBuilder<T> ctorRef, String... names);1544804437;Build a {@linkplain FunctionDefinition} for a binary function that_requires a timezone.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function, DatetimeBinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.get(1), cfg.timeZone())__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,requires,a,timezone;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,get,1,cfg,time,zone,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function, DatetimeBinaryFunctionBuilder<T> ctorRef, String... names);1545047744;Build a {@linkplain FunctionDefinition} for a binary function that_requires a timezone.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function, DatetimeBinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.get(1), cfg.zoneId())__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,requires,a,timezone;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,get,1,cfg,zone,id,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function, DatetimeBinaryFunctionBuilder<T> ctorRef, String... names);1546556270;Build a {@linkplain FunctionDefinition} for a binary function that_requires a timezone.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function, DatetimeBinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children.get(0), children.get(1), cfg.zoneId())__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,requires,a,timezone;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,get,0,children,get,1,cfg,zone,id,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function, DatetimeBinaryFunctionBuilder<T> ctorRef, String... names);1548945185;Build a {@linkplain FunctionDefinition} for a binary function that_requires a timezone.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function, DatetimeBinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children.get(0), children.get(1), cfg.zoneId())__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,requires,a,timezone;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,get,0,children,get,1,cfg,zone,id,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function, DatetimeBinaryFunctionBuilder<T> ctorRef, String... names);1549383326;Build a {@linkplain FunctionDefinition} for a binary function that_requires a timezone.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function, DatetimeBinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children.get(0), children.get(1), cfg.zoneId())__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,requires,a,timezone;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,get,0,children,get,1,cfg,zone,id,return,def,function,builder,false,names
FunctionRegistry -> public FunctionRegistry();1524684173;Constructor to build with the default list of functions.;public FunctionRegistry() {_        this(DEFAULT_FUNCTIONS)__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,this
FunctionRegistry -> public FunctionRegistry();1528762805;Constructor to build with the default list of functions.;public FunctionRegistry() {_        this(DEFAULT_FUNCTIONS)__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,this
FunctionRegistry -> public FunctionRegistry();1531729807;Constructor to build with the default list of functions.;public FunctionRegistry() {_        this(DEFAULT_FUNCTIONS)__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,this
FunctionRegistry -> public FunctionRegistry();1533143718;Constructor to build with the default list of functions.;public FunctionRegistry() {_        this(DEFAULT_FUNCTIONS)__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,this
FunctionRegistry -> public FunctionRegistry();1536828374;Constructor to build with the default list of functions.;public FunctionRegistry() {_        this(DEFAULT_FUNCTIONS)__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,this
FunctionRegistry -> public FunctionRegistry();1536964057;Constructor to build with the default list of functions.;public FunctionRegistry() {_        this(DEFAULT_FUNCTIONS)__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,this
FunctionRegistry -> public FunctionRegistry();1537806831;Constructor to build with the default list of functions.;public FunctionRegistry() {_        this(DEFAULT_FUNCTIONS)__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,this
FunctionRegistry -> public FunctionRegistry();1538170812;Constructor to build with the default list of functions.;public FunctionRegistry() {_        this(DEFAULT_FUNCTIONS)__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,this
FunctionRegistry -> public FunctionRegistry();1538509426;Constructor to build with the default list of functions.;public FunctionRegistry() {_        this(DEFAULT_FUNCTIONS)__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,this
FunctionRegistry -> public FunctionRegistry();1539615817;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1540847035;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1541502744;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1542816427;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1542838510;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1542883260;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1543007967;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1543252896;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1543411204;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1544460729;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1544574542;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1544794956;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1544804437;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1545047744;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1546556270;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1548945185;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> public FunctionRegistry();1549383326;Constructor to build with the default list of functions.;public FunctionRegistry() {_        defineDefaultFunctions()__    };constructor,to,build,with,the,default,list,of,functions;public,function,registry,define,default,functions
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names);1544460729;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names);1544574542;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names);1544794956;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names);1544804437;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names);1545047744;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names);1546556270;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(source, children.get(0), distinct)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,source,children,get,0,distinct,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names);1548945185;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(source, children.get(0), distinct)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,source,children,get,0,distinct,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names);1549383326;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(source, children.get(0), distinct)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,source,children,get,0,distinct,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,                                           boolean datetime, String... names);1544460729;Main method to register a function/_@param names Must always have at least one entry which is the method's primary name;@SuppressWarnings("overloads")_    private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,_                                          boolean datetime, String... names) {_        Check.isTrue(names.length > 0, "At least one name must be provided for the function")__        String primaryName = names[0]__        List<String> aliases = Arrays.asList(names).subList(1, names.length)__        FunctionDefinition.Builder realBuilder = (uf, distinct, cfg) -> {_            try {_                return builder.build(uf.location(), uf.children(), distinct, cfg)__            } catch (IllegalArgumentException e) {_                throw new ParsingException("error building [" + primaryName + "]: " + e.getMessage(), e,_                        uf.location().getLineNumber(), uf.location().getColumnNumber())__            }_        }__        return new FunctionDefinition(primaryName, unmodifiableList(aliases), function, datetime, realBuilder)__    };main,method,to,register,a,function,param,names,must,always,have,at,least,one,entry,which,is,the,method,s,primary,name;suppress,warnings,overloads,private,static,function,definition,def,class,extends,function,function,function,builder,builder,boolean,datetime,string,names,check,is,true,names,length,0,at,least,one,name,must,be,provided,for,the,function,string,primary,name,names,0,list,string,aliases,arrays,as,list,names,sub,list,1,names,length,function,definition,builder,real,builder,uf,distinct,cfg,try,return,builder,build,uf,location,uf,children,distinct,cfg,catch,illegal,argument,exception,e,throw,new,parsing,exception,error,building,primary,name,e,get,message,e,uf,location,get,line,number,uf,location,get,column,number,return,new,function,definition,primary,name,unmodifiable,list,aliases,function,datetime,real,builder
FunctionRegistry -> @SuppressWarnings("overloads")     private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,                                           boolean datetime, String... names);1544574542;Main method to register a function/_@param names Must always have at least one entry which is the method's primary name;@SuppressWarnings("overloads")_    private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,_                                          boolean datetime, String... names) {_        Check.isTrue(names.length > 0, "At least one name must be provided for the function")__        String primaryName = names[0]__        List<String> aliases = Arrays.asList(names).subList(1, names.length)__        FunctionDefinition.Builder realBuilder = (uf, distinct, cfg) -> {_            try {_                return builder.build(uf.location(), uf.children(), distinct, cfg)__            } catch (IllegalArgumentException e) {_                throw new ParsingException("error building [" + primaryName + "]: " + e.getMessage(), e,_                        uf.location().getLineNumber(), uf.location().getColumnNumber())__            }_        }__        return new FunctionDefinition(primaryName, unmodifiableList(aliases), function, datetime, realBuilder)__    };main,method,to,register,a,function,param,names,must,always,have,at,least,one,entry,which,is,the,method,s,primary,name;suppress,warnings,overloads,private,static,function,definition,def,class,extends,function,function,function,builder,builder,boolean,datetime,string,names,check,is,true,names,length,0,at,least,one,name,must,be,provided,for,the,function,string,primary,name,names,0,list,string,aliases,arrays,as,list,names,sub,list,1,names,length,function,definition,builder,real,builder,uf,distinct,cfg,try,return,builder,build,uf,location,uf,children,distinct,cfg,catch,illegal,argument,exception,e,throw,new,parsing,exception,error,building,primary,name,e,get,message,e,uf,location,get,line,number,uf,location,get,column,number,return,new,function,definition,primary,name,unmodifiable,list,aliases,function,datetime,real,builder
FunctionRegistry -> @SuppressWarnings("overloads")     private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,                                           boolean datetime, String... names);1544794956;Main method to register a function/_@param names Must always have at least one entry which is the method's primary name;@SuppressWarnings("overloads")_    private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,_                                          boolean datetime, String... names) {_        Check.isTrue(names.length > 0, "At least one name must be provided for the function")__        String primaryName = names[0]__        List<String> aliases = Arrays.asList(names).subList(1, names.length)__        FunctionDefinition.Builder realBuilder = (uf, distinct, cfg) -> {_            try {_                return builder.build(uf.location(), uf.children(), distinct, cfg)__            } catch (IllegalArgumentException e) {_                throw new ParsingException("error building [" + primaryName + "]: " + e.getMessage(), e,_                        uf.location().getLineNumber(), uf.location().getColumnNumber())__            }_        }__        return new FunctionDefinition(primaryName, unmodifiableList(aliases), function, datetime, realBuilder)__    };main,method,to,register,a,function,param,names,must,always,have,at,least,one,entry,which,is,the,method,s,primary,name;suppress,warnings,overloads,private,static,function,definition,def,class,extends,function,function,function,builder,builder,boolean,datetime,string,names,check,is,true,names,length,0,at,least,one,name,must,be,provided,for,the,function,string,primary,name,names,0,list,string,aliases,arrays,as,list,names,sub,list,1,names,length,function,definition,builder,real,builder,uf,distinct,cfg,try,return,builder,build,uf,location,uf,children,distinct,cfg,catch,illegal,argument,exception,e,throw,new,parsing,exception,error,building,primary,name,e,get,message,e,uf,location,get,line,number,uf,location,get,column,number,return,new,function,definition,primary,name,unmodifiable,list,aliases,function,datetime,real,builder
FunctionRegistry -> @SuppressWarnings("overloads")     private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,                                           boolean datetime, String... names);1544804437;Main method to register a function/_@param names Must always have at least one entry which is the method's primary name;@SuppressWarnings("overloads")_    private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,_                                          boolean datetime, String... names) {_        Check.isTrue(names.length > 0, "At least one name must be provided for the function")__        String primaryName = names[0]__        List<String> aliases = Arrays.asList(names).subList(1, names.length)__        FunctionDefinition.Builder realBuilder = (uf, distinct, cfg) -> {_            try {_                return builder.build(uf.location(), uf.children(), distinct, cfg)__            } catch (IllegalArgumentException e) {_                throw new ParsingException("error building [" + primaryName + "]: " + e.getMessage(), e,_                        uf.location().getLineNumber(), uf.location().getColumnNumber())__            }_        }__        return new FunctionDefinition(primaryName, unmodifiableList(aliases), function, datetime, realBuilder)__    };main,method,to,register,a,function,param,names,must,always,have,at,least,one,entry,which,is,the,method,s,primary,name;suppress,warnings,overloads,private,static,function,definition,def,class,extends,function,function,function,builder,builder,boolean,datetime,string,names,check,is,true,names,length,0,at,least,one,name,must,be,provided,for,the,function,string,primary,name,names,0,list,string,aliases,arrays,as,list,names,sub,list,1,names,length,function,definition,builder,real,builder,uf,distinct,cfg,try,return,builder,build,uf,location,uf,children,distinct,cfg,catch,illegal,argument,exception,e,throw,new,parsing,exception,error,building,primary,name,e,get,message,e,uf,location,get,line,number,uf,location,get,column,number,return,new,function,definition,primary,name,unmodifiable,list,aliases,function,datetime,real,builder
FunctionRegistry -> @SuppressWarnings("overloads")     private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,                                           boolean datetime, String... names);1545047744;Main method to register a function/_@param names Must always have at least one entry which is the method's primary name;@SuppressWarnings("overloads")_    private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,_                                          boolean datetime, String... names) {_        Check.isTrue(names.length > 0, "At least one name must be provided for the function")__        String primaryName = names[0]__        List<String> aliases = Arrays.asList(names).subList(1, names.length)__        FunctionDefinition.Builder realBuilder = (uf, distinct, cfg) -> {_            try {_                return builder.build(uf.location(), uf.children(), distinct, cfg)__            } catch (IllegalArgumentException e) {_                throw new ParsingException("error building [" + primaryName + "]: " + e.getMessage(), e,_                        uf.location().getLineNumber(), uf.location().getColumnNumber())__            }_        }__        return new FunctionDefinition(primaryName, unmodifiableList(aliases), function, datetime, realBuilder)__    };main,method,to,register,a,function,param,names,must,always,have,at,least,one,entry,which,is,the,method,s,primary,name;suppress,warnings,overloads,private,static,function,definition,def,class,extends,function,function,function,builder,builder,boolean,datetime,string,names,check,is,true,names,length,0,at,least,one,name,must,be,provided,for,the,function,string,primary,name,names,0,list,string,aliases,arrays,as,list,names,sub,list,1,names,length,function,definition,builder,real,builder,uf,distinct,cfg,try,return,builder,build,uf,location,uf,children,distinct,cfg,catch,illegal,argument,exception,e,throw,new,parsing,exception,error,building,primary,name,e,get,message,e,uf,location,get,line,number,uf,location,get,column,number,return,new,function,definition,primary,name,unmodifiable,list,aliases,function,datetime,real,builder
FunctionRegistry -> @SuppressWarnings("overloads")     private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,                                           boolean datetime, String... names);1546556270;Main method to register a function/_@param names Must always have at least one entry which is the method's primary name;@SuppressWarnings("overloads")_    private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,_                                          boolean datetime, String... names) {_        Check.isTrue(names.length > 0, "At least one name must be provided for the function")__        String primaryName = names[0]__        List<String> aliases = Arrays.asList(names).subList(1, names.length)__        FunctionDefinition.Builder realBuilder = (uf, distinct, cfg) -> {_            try {_                return builder.build(uf.source(), uf.children(), distinct, cfg)__            } catch (IllegalArgumentException e) {_                throw new ParsingException(uf.source(), "error building [" + primaryName + "]: " + e.getMessage(), e)__            }_        }__        return new FunctionDefinition(primaryName, unmodifiableList(aliases), function, datetime, realBuilder)__    };main,method,to,register,a,function,param,names,must,always,have,at,least,one,entry,which,is,the,method,s,primary,name;suppress,warnings,overloads,private,static,function,definition,def,class,extends,function,function,function,builder,builder,boolean,datetime,string,names,check,is,true,names,length,0,at,least,one,name,must,be,provided,for,the,function,string,primary,name,names,0,list,string,aliases,arrays,as,list,names,sub,list,1,names,length,function,definition,builder,real,builder,uf,distinct,cfg,try,return,builder,build,uf,source,uf,children,distinct,cfg,catch,illegal,argument,exception,e,throw,new,parsing,exception,uf,source,error,building,primary,name,e,get,message,e,return,new,function,definition,primary,name,unmodifiable,list,aliases,function,datetime,real,builder
FunctionRegistry -> @SuppressWarnings("overloads")     private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,                                           boolean datetime, String... names);1548945185;Main method to register a function/_@param names Must always have at least one entry which is the method's primary name;@SuppressWarnings("overloads")_    private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,_                                          boolean datetime, String... names) {_        Check.isTrue(names.length > 0, "At least one name must be provided for the function")__        String primaryName = names[0]__        List<String> aliases = Arrays.asList(names).subList(1, names.length)__        FunctionDefinition.Builder realBuilder = (uf, distinct, cfg) -> {_            try {_                return builder.build(uf.source(), uf.children(), distinct, cfg)__            } catch (IllegalArgumentException e) {_                throw new ParsingException(uf.source(), "error building [" + primaryName + "]: " + e.getMessage(), e)__            }_        }__        return new FunctionDefinition(primaryName, unmodifiableList(aliases), function, datetime, realBuilder)__    };main,method,to,register,a,function,param,names,must,always,have,at,least,one,entry,which,is,the,method,s,primary,name;suppress,warnings,overloads,private,static,function,definition,def,class,extends,function,function,function,builder,builder,boolean,datetime,string,names,check,is,true,names,length,0,at,least,one,name,must,be,provided,for,the,function,string,primary,name,names,0,list,string,aliases,arrays,as,list,names,sub,list,1,names,length,function,definition,builder,real,builder,uf,distinct,cfg,try,return,builder,build,uf,source,uf,children,distinct,cfg,catch,illegal,argument,exception,e,throw,new,parsing,exception,uf,source,error,building,primary,name,e,get,message,e,return,new,function,definition,primary,name,unmodifiable,list,aliases,function,datetime,real,builder
FunctionRegistry -> @SuppressWarnings("overloads")     private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,                                           boolean datetime, String... names);1549383326;Main method to register a function/_@param names Must always have at least one entry which is the method's primary name;@SuppressWarnings("overloads")_    private static FunctionDefinition def(Class<? extends Function> function, FunctionBuilder builder,_                                          boolean datetime, String... names) {_        Check.isTrue(names.length > 0, "At least one name must be provided for the function")__        String primaryName = names[0]__        List<String> aliases = Arrays.asList(names).subList(1, names.length)__        FunctionDefinition.Builder realBuilder = (uf, distinct, cfg) -> {_            try {_                return builder.build(uf.source(), uf.children(), distinct, cfg)__            } catch (IllegalArgumentException e) {_                throw new ParsingException(uf.source(), "error building [" + primaryName + "]: " + e.getMessage(), e)__            }_        }__        return new FunctionDefinition(primaryName, unmodifiableList(aliases), function, datetime, realBuilder)__    };main,method,to,register,a,function,param,names,must,always,have,at,least,one,entry,which,is,the,method,s,primary,name;suppress,warnings,overloads,private,static,function,definition,def,class,extends,function,function,function,builder,builder,boolean,datetime,string,names,check,is,true,names,length,0,at,least,one,name,must,be,provided,for,the,function,string,primary,name,names,0,list,string,aliases,arrays,as,list,names,sub,list,1,names,length,function,definition,builder,real,builder,uf,distinct,cfg,try,return,builder,build,uf,source,uf,children,distinct,cfg,catch,illegal,argument,exception,e,throw,new,parsing,exception,uf,source,error,building,primary,name,e,get,message,e,return,new,function,definition,primary,name,unmodifiable,list,aliases,function,datetime,real,builder
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... names);1544460729;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, names)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... names);1544574542;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, names)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... names);1544794956;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, names)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... names);1544804437;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, names)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... names);1545047744;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) ->_            ctorRef.build(location, children.get(0), children.get(0).dataType())__        return def(function, builder, false, names)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,ctor,ref,build,location,children,get,0,children,get,0,data,type,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... names);1546556270;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) ->_            ctorRef.build(source, children.get(0), children.get(0).dataType())__        return def(function, builder, false, names)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,ctor,ref,build,source,children,get,0,children,get,0,data,type,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... names);1548945185;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) ->_            ctorRef.build(source, children.get(0), children.get(0).dataType())__        return def(function, builder, false, names)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,ctor,ref,build,source,children,get,0,children,get,0,data,type,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       private static <T extends Function> FunctionDefinition def(Class<T> function,                                                                CastFunctionBuilder<T> ctorRef,                                                                String... names);1549383326;Special method to create function definition for {@link Cast} as its_signature is not compatible with {@link UnresolvedFunction}__@return Cast function definition;@SuppressWarnings("overloads")  _    private static <T extends Function> FunctionDefinition def(Class<T> function,_                                                               CastFunctionBuilder<T> ctorRef,_                                                               String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) ->_            ctorRef.build(source, children.get(0), children.get(0).dataType())__        return def(function, builder, false, names)__    };special,method,to,create,function,definition,for,link,cast,as,its,signature,is,not,compatible,with,link,unresolved,function,return,cast,function,definition;suppress,warnings,overloads,private,static,t,extends,function,function,definition,def,class,t,function,cast,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,ctor,ref,build,source,children,get,0,children,get,0,data,type,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1544794956;Build a {@linkplain FunctionDefinition} for a one-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the configuration object.;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() > 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            Expression ex = children.size() == 1 ? children.get(0) : null__            return ctorRef.build(location, ex, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,one,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,configuration,object;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,unary,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,expression,ex,children,size,1,children,get,0,null,return,ctor,ref,build,location,ex,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1544804437;Build a {@linkplain FunctionDefinition} for a one-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the configuration object.;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() > 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            Expression ex = children.size() == 1 ? children.get(0) : null__            return ctorRef.build(location, ex, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,one,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,configuration,object;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,unary,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,expression,ex,children,size,1,children,get,0,null,return,ctor,ref,build,location,ex,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1545047744;Build a {@linkplain FunctionDefinition} for a one-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the configuration object.;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() > 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            Expression ex = children.size() == 1 ? children.get(0) : null__            return ctorRef.build(location, ex, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,one,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,configuration,object;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,unary,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,expression,ex,children,size,1,children,get,0,null,return,ctor,ref,build,location,ex,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1546556270;Build a {@linkplain FunctionDefinition} for a one-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the configuration object.;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() > 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            Expression ex = children.size() == 1 ? children.get(0) : null__            return ctorRef.build(source, ex, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,one,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,configuration,object;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,unary,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,expression,ex,children,size,1,children,get,0,null,return,ctor,ref,build,source,ex,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1548945185;Build a {@linkplain FunctionDefinition} for a one-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the configuration object.;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() > 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            Expression ex = children.size() == 1 ? children.get(0) : null__            return ctorRef.build(source, ex, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,one,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,configuration,object;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,unary,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,expression,ex,children,size,1,children,get,0,null,return,ctor,ref,build,source,ex,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")     static <T extends Function> FunctionDefinition def(Class<T> function,             UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names);1549383326;Build a {@linkplain FunctionDefinition} for a one-argument function that_is not aware of time zone, does not support {@code DISTINCT} and needs_the configuration object.;@SuppressWarnings("overloads")_    static <T extends Function> FunctionDefinition def(Class<T> function,_            UnaryConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() > 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            Expression ex = children.size() == 1 ? children.get(0) : null__            return ctorRef.build(source, ex, cfg)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,one,argument,function,that,is,not,aware,of,time,zone,does,not,support,code,distinct,and,needs,the,configuration,object;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,unary,configuration,aware,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,expression,ex,children,size,1,children,get,0,null,return,ctor,ref,build,source,ex,cfg,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1524684173;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.get(1))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,get,1,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1528762805;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.get(1))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,get,1,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1531729807;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.get(1))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,get,1,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1533143718;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.get(1))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,get,1,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1536828374;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.get(1))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,get,1,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1536964057;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.get(1))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,get,1,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1537806831;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1538170812;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1538509426;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1539615817;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1540847035;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1541502744;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1542816427;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1542838510;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1542883260;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1543007967;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1543252896;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... aliases);1543411204;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,cfg,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Source, T> ctorRef, String... names);1546556270;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Source, T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(source)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,source,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,source,return,def,function,builder,false,names
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Source, T> ctorRef, String... names);1548945185;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Source, T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(source)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,source,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,source,return,def,function,builder,false,names
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Source, T> ctorRef, String... names);1549383326;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Source, T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(source)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,source,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,source,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1524684173;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1528762805;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1531729807;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1533143718;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1536828374;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1536964057;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1537806831;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1538170812;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1538509426;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1539615817;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1540847035;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1541502744;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1542816427;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1542838510;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1542883260;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1543007967;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1543252896;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... aliases);1543411204;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,aliases
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1539615817;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1540847035;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1541502744;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1542816427;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1542838510;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1542883260;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1543007967;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1543252896;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1543411204;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1544460729;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1544574542;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1544794956;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1544804437;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1545047744;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1546556270;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1548945185;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> FunctionRegistry(FunctionDefinition... functions);1549383326;Constructor specifying alternate functions for testing.;FunctionRegistry(FunctionDefinition... functions) {_        addToMap(functions)__    };constructor,specifying,alternate,functions,for,testing;function,registry,function,definition,functions,add,to,map,functions
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... names);1544460729;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... names);1544574542;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... names);1544794956;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... names);1544804437;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... names);1545047744;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... names);1546556270;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... names);1548945185;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)_                    || TopHits.class.isAssignableFrom(function)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,top,hits,class,is,assignable,from,function,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BinaryFunctionBuilder<T> ctorRef, String... names);1549383326;Build a {@linkplain FunctionDefinition} for a binary function that is_not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BinaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            boolean isBinaryOptionalParamFunction = function.isAssignableFrom(Round.class) || function.isAssignableFrom(Truncate.class)_                    || TopHits.class.isAssignableFrom(function)__            if (isBinaryOptionalParamFunction && (children.size() > 2 || children.size() < 1)) {_                throw new IllegalArgumentException("expects one or two arguments")__            } else if (!isBinaryOptionalParamFunction && children.size() != 2) {_                throw new IllegalArgumentException("expects exactly two arguments")__            }__            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children.get(0), children.size() == 2 ? children.get(1) : null)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,binary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,binary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,boolean,is,binary,optional,param,function,function,is,assignable,from,round,class,function,is,assignable,from,truncate,class,top,hits,class,is,assignable,from,function,if,is,binary,optional,param,function,children,size,2,children,size,1,throw,new,illegal,argument,exception,expects,one,or,two,arguments,else,if,is,binary,optional,param,function,children,size,2,throw,new,illegal,argument,exception,expects,exactly,two,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,get,0,children,size,2,children,get,1,null,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... aliases);1541502744;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... aliases);1542816427;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... aliases);1542838510;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... aliases);1542883260;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... aliases);1543007967;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... aliases);1543252896;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... aliases);1543411204;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,cfg,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1524684173;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1528762805;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1531729807;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1533143718;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1536828374;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1536964057;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1537806831;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1538170812;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1538509426;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1539615817;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1540847035;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1541502744;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1542816427;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1542838510;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1542883260;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1543007967;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1543252896;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases);1543411204;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone but does support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            return ctorRef.build(location, children.get(0), distinct)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,but,does,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,distinct,aware,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,return,ctor,ref,build,location,children,get,0,distinct,return,def,function,builder,false,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Source, Expression, T> ctorRef, String... names);1546556270;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Source, Expression, T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(source, children.get(0))__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,source,expression,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,source,children,get,0,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Source, Expression, T> ctorRef, String... names);1548945185;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Source, Expression, T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(source, children.get(0))__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,source,expression,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,source,children,get,0,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Source, Expression, T> ctorRef, String... names);1549383326;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Source, Expression, T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(source, children.get(0))__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,source,expression,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,source,children,get,0,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... names);1544460729;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... names);1544574542;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... names);1544794956;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... names);1544804437;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             BiFunction<Location, Expression, T> ctorRef, String... names);1545047744;Build a {@linkplain FunctionDefinition} for a unary function that is not_aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            BiFunction<Location, Expression, T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location, children.get(0))__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,bi,function,location,expression,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,children,get,0,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... names);1544460729;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), cfg.timeZone())__        }__        return def(function, builder, true, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,cfg,time,zone,return,def,function,builder,true,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... names);1544574542;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), cfg.timeZone())__        }__        return def(function, builder, true, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,cfg,time,zone,return,def,function,builder,true,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... names);1544794956;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), cfg.timeZone())__        }__        return def(function, builder, true, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,cfg,time,zone,return,def,function,builder,true,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... names);1544804437;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), cfg.timeZone())__        }__        return def(function, builder, true, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,cfg,time,zone,return,def,function,builder,true,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... names);1545047744;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), cfg.zoneId())__        }__        return def(function, builder, true, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,cfg,zone,id,return,def,function,builder,true,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... names);1546556270;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children.get(0), cfg.zoneId())__        }__        return def(function, builder, true, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,get,0,cfg,zone,id,return,def,function,builder,true,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... names);1548945185;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children.get(0), cfg.zoneId())__        }__        return def(function, builder, true, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,get,0,cfg,zone,id,return,def,function,builder,true,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... names);1549383326;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children.get(0), cfg.zoneId())__        }__        return def(function, builder, true, names)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,get,0,cfg,zone,id,return,def,function,builder,true,names
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1524684173;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1528762805;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1531729807;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1533143718;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1536828374;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1536964057;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1537806831;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1538170812;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1538509426;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1539615817;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1540847035;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1541502744;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1542816427;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1542838510;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1542883260;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1543007967;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1543252896;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), tz)__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,tz,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")       static <T extends Function> FunctionDefinition def(Class<T> function,             DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases);1543411204;Build a {@linkplain FunctionDefinition} for a unary function that_operates on a datetime.;@SuppressWarnings("overloads")  _    static <T extends Function> FunctionDefinition def(Class<T> function,_            DatetimeUnaryFunctionBuilder<T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (children.size() != 1) {_                throw new IllegalArgumentException("expects exactly one argument")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children.get(0), cfg.timeZone())__        }__        return def(function, builder, true, aliases)__    };build,a,linkplain,function,definition,for,a,unary,function,that,operates,on,a,datetime;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,datetime,unary,function,builder,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,cfg,if,children,size,1,throw,new,illegal,argument,exception,expects,exactly,one,argument,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,get,0,cfg,time,zone,return,def,function,builder,true,aliases
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... names);1544460729;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... names);1544574542;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... names);1544794956;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... names);1544804437;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... names);1545047744;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(location, children)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,names,function,builder,builder,location,children,distinct,cfg,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,location,children,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... names);1546556270;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... names);1548945185;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,return,def,function,builder,false,names
FunctionRegistry -> @SuppressWarnings("overloads")      static <T extends Function> FunctionDefinition def(Class<T> function,             MultiFunctionBuilder<T> ctorRef, String... names);1549383326;Build a {@linkplain FunctionDefinition} for multi-arg function that_is not aware of time zone and does not support {@code DISTINCT}.;@SuppressWarnings("overloads") _    static <T extends Function> FunctionDefinition def(Class<T> function,_            MultiFunctionBuilder<T> ctorRef, String... names) {_        FunctionBuilder builder = (source, children, distinct, cfg) -> {_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.build(source, children)__        }__        return def(function, builder, false, names)__    };build,a,linkplain,function,definition,for,multi,arg,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;suppress,warnings,overloads,static,t,extends,function,function,definition,def,class,t,function,multi,function,builder,t,ctor,ref,string,names,function,builder,builder,source,children,distinct,cfg,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,build,source,children,return,def,function,builder,false,names
FunctionRegistry -> FunctionRegistry(List<FunctionDefinition> functions);1524684173;Constructor specifying alternate functions for testing.;FunctionRegistry(List<FunctionDefinition> functions) {_        this.aliases = new HashMap<>()__        for (FunctionDefinition f : functions) {_            defs.put(f.name(), f)__            for (String alias : f.aliases()) {_                Object old = aliases.put(alias, f.name())__                if (old != null) {_                    throw new IllegalArgumentException("alias [" + alias + "] is used by [" + old + "] and [" + f.name() + "]")__                }_                defs.put(alias, f)__            }_        }_    };constructor,specifying,alternate,functions,for,testing;function,registry,list,function,definition,functions,this,aliases,new,hash,map,for,function,definition,f,functions,defs,put,f,name,f,for,string,alias,f,aliases,object,old,aliases,put,alias,f,name,if,old,null,throw,new,illegal,argument,exception,alias,alias,is,used,by,old,and,f,name,defs,put,alias,f
FunctionRegistry -> FunctionRegistry(List<FunctionDefinition> functions);1528762805;Constructor specifying alternate functions for testing.;FunctionRegistry(List<FunctionDefinition> functions) {_        this.aliases = new HashMap<>()__        for (FunctionDefinition f : functions) {_            defs.put(f.name(), f)__            for (String alias : f.aliases()) {_                Object old = aliases.put(alias, f.name())__                if (old != null) {_                    throw new IllegalArgumentException("alias [" + alias + "] is used by [" + old + "] and [" + f.name() + "]")__                }_                defs.put(alias, f)__            }_        }_    };constructor,specifying,alternate,functions,for,testing;function,registry,list,function,definition,functions,this,aliases,new,hash,map,for,function,definition,f,functions,defs,put,f,name,f,for,string,alias,f,aliases,object,old,aliases,put,alias,f,name,if,old,null,throw,new,illegal,argument,exception,alias,alias,is,used,by,old,and,f,name,defs,put,alias,f
FunctionRegistry -> FunctionRegistry(List<FunctionDefinition> functions);1531729807;Constructor specifying alternate functions for testing.;FunctionRegistry(List<FunctionDefinition> functions) {_        this.aliases = new HashMap<>()__        for (FunctionDefinition f : functions) {_            defs.put(f.name(), f)__            for (String alias : f.aliases()) {_                Object old = aliases.put(alias, f.name())__                if (old != null) {_                    throw new IllegalArgumentException("alias [" + alias + "] is used by [" + old + "] and [" + f.name() + "]")__                }_                defs.put(alias, f)__            }_        }_    };constructor,specifying,alternate,functions,for,testing;function,registry,list,function,definition,functions,this,aliases,new,hash,map,for,function,definition,f,functions,defs,put,f,name,f,for,string,alias,f,aliases,object,old,aliases,put,alias,f,name,if,old,null,throw,new,illegal,argument,exception,alias,alias,is,used,by,old,and,f,name,defs,put,alias,f
FunctionRegistry -> FunctionRegistry(List<FunctionDefinition> functions);1533143718;Constructor specifying alternate functions for testing.;FunctionRegistry(List<FunctionDefinition> functions) {_        this.aliases = new HashMap<>()__        for (FunctionDefinition f : functions) {_            defs.put(f.name(), f)__            for (String alias : f.aliases()) {_                Object old = aliases.put(alias, f.name())__                if (old != null) {_                    throw new IllegalArgumentException("alias [" + alias + "] is used by [" + old + "] and [" + f.name() + "]")__                }_                defs.put(alias, f)__            }_        }_    };constructor,specifying,alternate,functions,for,testing;function,registry,list,function,definition,functions,this,aliases,new,hash,map,for,function,definition,f,functions,defs,put,f,name,f,for,string,alias,f,aliases,object,old,aliases,put,alias,f,name,if,old,null,throw,new,illegal,argument,exception,alias,alias,is,used,by,old,and,f,name,defs,put,alias,f
FunctionRegistry -> FunctionRegistry(List<FunctionDefinition> functions);1536828374;Constructor specifying alternate functions for testing.;FunctionRegistry(List<FunctionDefinition> functions) {_        this.aliases = new HashMap<>()__        for (FunctionDefinition f : functions) {_            defs.put(f.name(), f)__            for (String alias : f.aliases()) {_                Object old = aliases.put(alias, f.name())__                if (old != null) {_                    throw new IllegalArgumentException("alias [" + alias + "] is used by [" + old + "] and [" + f.name() + "]")__                }_                defs.put(alias, f)__            }_        }_    };constructor,specifying,alternate,functions,for,testing;function,registry,list,function,definition,functions,this,aliases,new,hash,map,for,function,definition,f,functions,defs,put,f,name,f,for,string,alias,f,aliases,object,old,aliases,put,alias,f,name,if,old,null,throw,new,illegal,argument,exception,alias,alias,is,used,by,old,and,f,name,defs,put,alias,f
FunctionRegistry -> FunctionRegistry(List<FunctionDefinition> functions);1536964057;Constructor specifying alternate functions for testing.;FunctionRegistry(List<FunctionDefinition> functions) {_        this.aliases = new HashMap<>()__        for (FunctionDefinition f : functions) {_            defs.put(f.name(), f)__            for (String alias : f.aliases()) {_                Object old = aliases.put(alias, f.name())__                if (old != null) {_                    throw new IllegalArgumentException("alias [" + alias + "] is used by [" + old + "] and [" + f.name() + "]")__                }_                defs.put(alias, f)__            }_        }_    };constructor,specifying,alternate,functions,for,testing;function,registry,list,function,definition,functions,this,aliases,new,hash,map,for,function,definition,f,functions,defs,put,f,name,f,for,string,alias,f,aliases,object,old,aliases,put,alias,f,name,if,old,null,throw,new,illegal,argument,exception,alias,alias,is,used,by,old,and,f,name,defs,put,alias,f
FunctionRegistry -> FunctionRegistry(List<FunctionDefinition> functions);1537806831;Constructor specifying alternate functions for testing.;FunctionRegistry(List<FunctionDefinition> functions) {_        this.aliases = new HashMap<>()__        for (FunctionDefinition f : functions) {_            defs.put(f.name(), f)__            for (String alias : f.aliases()) {_                Object old = aliases.put(alias, f.name())__                if (old != null) {_                    throw new IllegalArgumentException("alias [" + alias + "] is used by [" + old + "] and [" + f.name() + "]")__                }_                defs.put(alias, f)__            }_        }_    };constructor,specifying,alternate,functions,for,testing;function,registry,list,function,definition,functions,this,aliases,new,hash,map,for,function,definition,f,functions,defs,put,f,name,f,for,string,alias,f,aliases,object,old,aliases,put,alias,f,name,if,old,null,throw,new,illegal,argument,exception,alias,alias,is,used,by,old,and,f,name,defs,put,alias,f
FunctionRegistry -> FunctionRegistry(List<FunctionDefinition> functions);1538170812;Constructor specifying alternate functions for testing.;FunctionRegistry(List<FunctionDefinition> functions) {_        this.aliases = new HashMap<>()__        for (FunctionDefinition f : functions) {_            defs.put(f.name(), f)__            for (String alias : f.aliases()) {_                Object old = aliases.put(alias, f.name())__                if (old != null) {_                    throw new IllegalArgumentException("alias [" + alias + "] is used by [" + old + "] and [" + f.name() + "]")__                }_                defs.put(alias, f)__            }_        }_    };constructor,specifying,alternate,functions,for,testing;function,registry,list,function,definition,functions,this,aliases,new,hash,map,for,function,definition,f,functions,defs,put,f,name,f,for,string,alias,f,aliases,object,old,aliases,put,alias,f,name,if,old,null,throw,new,illegal,argument,exception,alias,alias,is,used,by,old,and,f,name,defs,put,alias,f
FunctionRegistry -> FunctionRegistry(List<FunctionDefinition> functions);1538509426;Constructor specifying alternate functions for testing.;FunctionRegistry(List<FunctionDefinition> functions) {_        this.aliases = new HashMap<>()__        for (FunctionDefinition f : functions) {_            defs.put(f.name(), f)__            for (String alias : f.aliases()) {_                Object old = aliases.put(alias, f.name())__                if (old != null) {_                    throw new IllegalArgumentException("alias [" + alias + "] is used by [" + old + "] and [" + f.name() + "]")__                }_                defs.put(alias, f)__            }_        }_    };constructor,specifying,alternate,functions,for,testing;function,registry,list,function,definition,functions,this,aliases,new,hash,map,for,function,definition,f,functions,defs,put,f,name,f,for,string,alias,f,aliases,object,old,aliases,put,alias,f,name,if,old,null,throw,new,illegal,argument,exception,alias,alias,is,used,by,old,and,f,name,defs,put,alias,f
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1524684173;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1528762805;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1531729807;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1533143718;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1536828374;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1536964057;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1537806831;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1538170812;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1538509426;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1539615817;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1540847035;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1541502744;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1542816427;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1542838510;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1542883260;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1543007967;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1543252896;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, tz) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,tz,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
FunctionRegistry -> static <T extends Function> FunctionDefinition def(Class<T> function,             java.util.function.Function<Location, T> ctorRef, String... aliases);1543411204;Build a {@linkplain FunctionDefinition} for a no-argument function that_is not aware of time zone and does not support {@code DISTINCT}.;static <T extends Function> FunctionDefinition def(Class<T> function,_            java.util.function.Function<Location, T> ctorRef, String... aliases) {_        FunctionBuilder builder = (location, children, distinct, cfg) -> {_            if (false == children.isEmpty()) {_                throw new IllegalArgumentException("expects no arguments")__            }_            if (distinct) {_                throw new IllegalArgumentException("does not support DISTINCT yet it was specified")__            }_            return ctorRef.apply(location)__        }__        return def(function, builder, false, aliases)__    };build,a,linkplain,function,definition,for,a,no,argument,function,that,is,not,aware,of,time,zone,and,does,not,support,code,distinct;static,t,extends,function,function,definition,def,class,t,function,java,util,function,function,location,t,ctor,ref,string,aliases,function,builder,builder,location,children,distinct,cfg,if,false,children,is,empty,throw,new,illegal,argument,exception,expects,no,arguments,if,distinct,throw,new,illegal,argument,exception,does,not,support,distinct,yet,it,was,specified,return,ctor,ref,apply,location,return,def,function,builder,false,aliases
