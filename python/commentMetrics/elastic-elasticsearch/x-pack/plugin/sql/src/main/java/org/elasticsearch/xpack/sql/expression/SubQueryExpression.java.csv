commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;4;;@Override public final Expression replaceChildren(List<Expression> newChildren) {     throw new UnsupportedOperationException("this type of node doesn't have any children to replace"). }
false;public;0;3;;public LogicalPlan query() {     return query. }
false;public;0;3;;public ExpressionId id() {     return id. }
false;public;0;4;;@Override public boolean resolved() {     return false. }
false;public;1;3;;public SubQueryExpression withQuery(LogicalPlan newQuery) {     return (Objects.equals(query, newQuery) ? this : clone(newQuery)). }
false;protected,abstract;1;1;;protected abstract SubQueryExpression clone(LogicalPlan newQuery).
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(query()). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     SubQueryExpression other = (SubQueryExpression) obj.     return Objects.equals(query(), other.query()). }
