commented;modifiers;parameterAmount;loc;comment;code
false;static;1;13;;static Object coalesce(Collection<Object> values) {     if (values == null || values.isEmpty()) {         return null.     }     for (Object object : values) {         if (object != null) {             return object.         }     }     return null. }
false;static;2;9;;static Object coalesceInput(List<Processor> processors, Object input) {     for (Processor proc : processors) {         Object result = proc.process(input).         if (result != null) {             return result.         }     }     return null. }
false;static;1;3;;static Object greatest(Collection<Object> values) {     return extremum(values, Comparisons::gt). }
false;static;2;7;;static Object greatestInput(Collection<Processor> processors, Object input) {     List<Object> values = new ArrayList<>(processors.size()).     for (Processor processor : processors) {         values.add(processor.process(input)).     }     return greatest(values). }
false;static;1;3;;static Object least(Collection<Object> values) {     return extremum(values, Comparisons::lt). }
false;static;2;7;;static Object leastInput(List<Processor> processors, Object input) {     List<Object> values = new ArrayList<>(processors.size()).     for (Processor processor : processors) {         values.add(processor.process(input)).     }     return least(values). }
false;private,static;2;15;;private static Object extremum(Collection<Object> values, BiFunction<Object, Object, Boolean> comparison) {     if (values == null || values.isEmpty()) {         return null.     }     Object result = null.     boolean isFirst = true.     for (Object value : values) {         if (isFirst || (result == null) || (comparison.apply(value, result) == Boolean.TRUE)) {             result = value.         }         isFirst = false.     }     return result. }
