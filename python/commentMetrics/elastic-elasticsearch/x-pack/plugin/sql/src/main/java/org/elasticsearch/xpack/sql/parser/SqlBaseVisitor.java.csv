commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#singleStatement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#singleStatement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitSingleStatement(SqlBaseParser.SingleStatementContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#singleExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#singleExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitSingleExpression(SqlBaseParser.SingleExpressionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code statementDefault}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code statementDefault}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitStatementDefault(SqlBaseParser.StatementDefaultContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code explain}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code explain}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitExplain(SqlBaseParser.ExplainContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code debug}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code debug}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitDebug(SqlBaseParser.DebugContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code showTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code showTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitShowTables(SqlBaseParser.ShowTablesContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code showColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code showColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitShowColumns(SqlBaseParser.ShowColumnsContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code showFunctions}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code showFunctions}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitShowFunctions(SqlBaseParser.ShowFunctionsContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code showSchemas}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code showSchemas}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitShowSchemas(SqlBaseParser.ShowSchemasContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code sysTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code sysTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitSysTables(SqlBaseParser.SysTablesContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code sysColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code sysColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitSysColumns(SqlBaseParser.SysColumnsContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code sysTypes}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code sysTypes}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitSysTypes(SqlBaseParser.SysTypesContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#query}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#query}.  * @param ctx the parse tree  * @return the visitor result  */ T visitQuery(SqlBaseParser.QueryContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#queryNoWith}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#queryNoWith}.  * @param ctx the parse tree  * @return the visitor result  */ T visitQueryNoWith(SqlBaseParser.QueryNoWithContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#limitClause}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#limitClause}.  * @param ctx the parse tree  * @return the visitor result  */ T visitLimitClause(SqlBaseParser.LimitClauseContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code queryPrimaryDefault}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code queryPrimaryDefault}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  * @return the visitor result  */ T visitQueryPrimaryDefault(SqlBaseParser.QueryPrimaryDefaultContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code subquery}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code subquery}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  * @return the visitor result  */ T visitSubquery(SqlBaseParser.SubqueryContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#orderBy}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#orderBy}.  * @param ctx the parse tree  * @return the visitor result  */ T visitOrderBy(SqlBaseParser.OrderByContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#querySpecification}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#querySpecification}.  * @param ctx the parse tree  * @return the visitor result  */ T visitQuerySpecification(SqlBaseParser.QuerySpecificationContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#fromClause}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#fromClause}.  * @param ctx the parse tree  * @return the visitor result  */ T visitFromClause(SqlBaseParser.FromClauseContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#groupBy}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#groupBy}.  * @param ctx the parse tree  * @return the visitor result  */ T visitGroupBy(SqlBaseParser.GroupByContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code singleGroupingSet}  * labeled alternative in {@link SqlBaseParser#groupingElement}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code singleGroupingSet}  * labeled alternative in {@link SqlBaseParser#groupingElement}.  * @param ctx the parse tree  * @return the visitor result  */ T visitSingleGroupingSet(SqlBaseParser.SingleGroupingSetContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#groupingExpressions}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#groupingExpressions}.  * @param ctx the parse tree  * @return the visitor result  */ T visitGroupingExpressions(SqlBaseParser.GroupingExpressionsContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#namedQuery}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#namedQuery}.  * @param ctx the parse tree  * @return the visitor result  */ T visitNamedQuery(SqlBaseParser.NamedQueryContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#setQuantifier}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#setQuantifier}.  * @param ctx the parse tree  * @return the visitor result  */ T visitSetQuantifier(SqlBaseParser.SetQuantifierContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code selectExpression}  * labeled alternative in {@link SqlBaseParser#selectItem}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code selectExpression}  * labeled alternative in {@link SqlBaseParser#selectItem}.  * @param ctx the parse tree  * @return the visitor result  */ T visitSelectExpression(SqlBaseParser.SelectExpressionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#relation}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#relation}.  * @param ctx the parse tree  * @return the visitor result  */ T visitRelation(SqlBaseParser.RelationContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#joinRelation}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#joinRelation}.  * @param ctx the parse tree  * @return the visitor result  */ T visitJoinRelation(SqlBaseParser.JoinRelationContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#joinType}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#joinType}.  * @param ctx the parse tree  * @return the visitor result  */ T visitJoinType(SqlBaseParser.JoinTypeContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#joinCriteria}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#joinCriteria}.  * @param ctx the parse tree  * @return the visitor result  */ T visitJoinCriteria(SqlBaseParser.JoinCriteriaContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code tableName}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code tableName}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  * @return the visitor result  */ T visitTableName(SqlBaseParser.TableNameContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code aliasedQuery}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code aliasedQuery}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  * @return the visitor result  */ T visitAliasedQuery(SqlBaseParser.AliasedQueryContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code aliasedRelation}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code aliasedRelation}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  * @return the visitor result  */ T visitAliasedRelation(SqlBaseParser.AliasedRelationContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#expression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#expression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitExpression(SqlBaseParser.ExpressionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code logicalNot}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code logicalNot}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitLogicalNot(SqlBaseParser.LogicalNotContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code stringQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code stringQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitStringQuery(SqlBaseParser.StringQueryContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code booleanDefault}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code booleanDefault}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitBooleanDefault(SqlBaseParser.BooleanDefaultContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code exists}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code exists}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitExists(SqlBaseParser.ExistsContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code multiMatchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code multiMatchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitMultiMatchQuery(SqlBaseParser.MultiMatchQueryContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code matchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code matchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitMatchQuery(SqlBaseParser.MatchQueryContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code logicalBinary}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code logicalBinary}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitLogicalBinary(SqlBaseParser.LogicalBinaryContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#matchQueryOptions}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#matchQueryOptions}.  * @param ctx the parse tree  * @return the visitor result  */ T visitMatchQueryOptions(SqlBaseParser.MatchQueryOptionsContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#predicated}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#predicated}.  * @param ctx the parse tree  * @return the visitor result  */ T visitPredicated(SqlBaseParser.PredicatedContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#predicate}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#predicate}.  * @param ctx the parse tree  * @return the visitor result  */ T visitPredicate(SqlBaseParser.PredicateContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#likePattern}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#likePattern}.  * @param ctx the parse tree  * @return the visitor result  */ T visitLikePattern(SqlBaseParser.LikePatternContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#pattern}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#pattern}.  * @param ctx the parse tree  * @return the visitor result  */ T visitPattern(SqlBaseParser.PatternContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#patternEscape}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#patternEscape}.  * @param ctx the parse tree  * @return the visitor result  */ T visitPatternEscape(SqlBaseParser.PatternEscapeContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code valueExpressionDefault}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code valueExpressionDefault}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitValueExpressionDefault(SqlBaseParser.ValueExpressionDefaultContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code comparison}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code comparison}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitComparison(SqlBaseParser.ComparisonContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code castOperatorExpression}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code castOperatorExpression}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitCastOperatorExpression(SqlBaseParser.CastOperatorExpressionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code arithmeticBinary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code arithmeticBinary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitArithmeticBinary(SqlBaseParser.ArithmeticBinaryContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code arithmeticUnary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code arithmeticUnary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitArithmeticUnary(SqlBaseParser.ArithmeticUnaryContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code cast}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code cast}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitCast(SqlBaseParser.CastContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code extract}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code extract}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitExtract(SqlBaseParser.ExtractContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code currentDateTimeFunction}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code currentDateTimeFunction}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitCurrentDateTimeFunction(SqlBaseParser.CurrentDateTimeFunctionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code constantDefault}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code constantDefault}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitConstantDefault(SqlBaseParser.ConstantDefaultContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code star}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code star}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitStar(SqlBaseParser.StarContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code function}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code function}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitFunction(SqlBaseParser.FunctionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code subqueryExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code subqueryExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitSubqueryExpression(SqlBaseParser.SubqueryExpressionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code dereference}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code dereference}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitDereference(SqlBaseParser.DereferenceContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code parenthesizedExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code parenthesizedExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitParenthesizedExpression(SqlBaseParser.ParenthesizedExpressionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#builtinDateTimeFunction}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#builtinDateTimeFunction}.  * @param ctx the parse tree  * @return the visitor result  */ T visitBuiltinDateTimeFunction(SqlBaseParser.BuiltinDateTimeFunctionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#castExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#castExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitCastExpression(SqlBaseParser.CastExpressionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#castTemplate}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#castTemplate}.  * @param ctx the parse tree  * @return the visitor result  */ T visitCastTemplate(SqlBaseParser.CastTemplateContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#convertTemplate}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#convertTemplate}.  * @param ctx the parse tree  * @return the visitor result  */ T visitConvertTemplate(SqlBaseParser.ConvertTemplateContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#extractExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#extractExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitExtractExpression(SqlBaseParser.ExtractExpressionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#extractTemplate}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#extractTemplate}.  * @param ctx the parse tree  * @return the visitor result  */ T visitExtractTemplate(SqlBaseParser.ExtractTemplateContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#functionExpression}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#functionExpression}.  * @param ctx the parse tree  * @return the visitor result  */ T visitFunctionExpression(SqlBaseParser.FunctionExpressionContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#functionTemplate}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#functionTemplate}.  * @param ctx the parse tree  * @return the visitor result  */ T visitFunctionTemplate(SqlBaseParser.FunctionTemplateContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#functionName}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#functionName}.  * @param ctx the parse tree  * @return the visitor result  */ T visitFunctionName(SqlBaseParser.FunctionNameContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code nullLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code nullLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ T visitNullLiteral(SqlBaseParser.NullLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code intervalLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code intervalLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ T visitIntervalLiteral(SqlBaseParser.IntervalLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code numericLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code numericLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ T visitNumericLiteral(SqlBaseParser.NumericLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code booleanLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code booleanLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ T visitBooleanLiteral(SqlBaseParser.BooleanLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code stringLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code stringLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ T visitStringLiteral(SqlBaseParser.StringLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code paramLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code paramLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ T visitParamLiteral(SqlBaseParser.ParamLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code dateEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code dateEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ T visitDateEscapedLiteral(SqlBaseParser.DateEscapedLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code timeEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code timeEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ T visitTimeEscapedLiteral(SqlBaseParser.TimeEscapedLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code timestampEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code timestampEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ T visitTimestampEscapedLiteral(SqlBaseParser.TimestampEscapedLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code guidEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code guidEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  * @return the visitor result  */ T visitGuidEscapedLiteral(SqlBaseParser.GuidEscapedLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#comparisonOperator}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#comparisonOperator}.  * @param ctx the parse tree  * @return the visitor result  */ T visitComparisonOperator(SqlBaseParser.ComparisonOperatorContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#booleanValue}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#booleanValue}.  * @param ctx the parse tree  * @return the visitor result  */ T visitBooleanValue(SqlBaseParser.BooleanValueContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#interval}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#interval}.  * @param ctx the parse tree  * @return the visitor result  */ T visitInterval(SqlBaseParser.IntervalContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#intervalField}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#intervalField}.  * @param ctx the parse tree  * @return the visitor result  */ T visitIntervalField(SqlBaseParser.IntervalFieldContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code primitiveDataType}  * labeled alternative in {@link SqlBaseParser#dataType}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code primitiveDataType}  * labeled alternative in {@link SqlBaseParser#dataType}.  * @param ctx the parse tree  * @return the visitor result  */ T visitPrimitiveDataType(SqlBaseParser.PrimitiveDataTypeContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#qualifiedName}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#qualifiedName}.  * @param ctx the parse tree  * @return the visitor result  */ T visitQualifiedName(SqlBaseParser.QualifiedNameContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#identifier}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#identifier}.  * @param ctx the parse tree  * @return the visitor result  */ T visitIdentifier(SqlBaseParser.IdentifierContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#tableIdentifier}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#tableIdentifier}.  * @param ctx the parse tree  * @return the visitor result  */ T visitTableIdentifier(SqlBaseParser.TableIdentifierContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code quotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code quotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  * @return the visitor result  */ T visitQuotedIdentifier(SqlBaseParser.QuotedIdentifierContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code backQuotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code backQuotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  * @return the visitor result  */ T visitBackQuotedIdentifier(SqlBaseParser.BackQuotedIdentifierContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code unquotedIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code unquotedIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  * @return the visitor result  */ T visitUnquotedIdentifier(SqlBaseParser.UnquotedIdentifierContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code digitIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code digitIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  * @return the visitor result  */ T visitDigitIdentifier(SqlBaseParser.DigitIdentifierContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code decimalLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code decimalLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  * @return the visitor result  */ T visitDecimalLiteral(SqlBaseParser.DecimalLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by the {@code integerLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by the {@code integerLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  * @return the visitor result  */ T visitIntegerLiteral(SqlBaseParser.IntegerLiteralContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#string}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#string}.  * @param ctx the parse tree  * @return the visitor result  */ T visitString(SqlBaseParser.StringContext ctx).
true;;1;1;/**  * Visit a parse tree produced by {@link SqlBaseParser#nonReserved}.  * @param ctx the parse tree  * @return the visitor result  */ ;/**  * Visit a parse tree produced by {@link SqlBaseParser#nonReserved}.  * @param ctx the parse tree  * @return the visitor result  */ T visitNonReserved(SqlBaseParser.NonReservedContext ctx).
