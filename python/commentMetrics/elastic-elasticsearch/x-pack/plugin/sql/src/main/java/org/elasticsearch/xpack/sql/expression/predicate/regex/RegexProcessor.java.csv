commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;11;;public static Boolean match(Object value, Pattern pattern) {     if (pattern == null) {         return Boolean.TRUE.     }     if (value == null) {         return null.     }     return pattern.matcher(value.toString()).matches(). }
false;public,static;2;11;;public static Boolean match(Object value, String pattern) {     if (pattern == null) {         return Boolean.TRUE.     }     if (value == null) {         return null.     }     return Pattern.compile(pattern).matcher(value.toString()).matches(). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(pattern != null ? pattern.toString() : null). }
false;public;1;4;;@Override public Object process(Object input) {     return RegexOperation.match(input, pattern). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(pattern). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     RegexProcessor other = (RegexProcessor) obj.     return Objects.equals(pattern, other.pattern). }
