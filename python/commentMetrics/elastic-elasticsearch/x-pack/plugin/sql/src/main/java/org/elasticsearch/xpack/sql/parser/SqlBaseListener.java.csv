commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#singleStatement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#singleStatement}.  * @param ctx the parse tree  */ void enterSingleStatement(SqlBaseParser.SingleStatementContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#singleStatement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#singleStatement}.  * @param ctx the parse tree  */ void exitSingleStatement(SqlBaseParser.SingleStatementContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#singleExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#singleExpression}.  * @param ctx the parse tree  */ void enterSingleExpression(SqlBaseParser.SingleExpressionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#singleExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#singleExpression}.  * @param ctx the parse tree  */ void exitSingleExpression(SqlBaseParser.SingleExpressionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code statementDefault}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code statementDefault}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void enterStatementDefault(SqlBaseParser.StatementDefaultContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code statementDefault}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code statementDefault}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void exitStatementDefault(SqlBaseParser.StatementDefaultContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code explain}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code explain}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void enterExplain(SqlBaseParser.ExplainContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code explain}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code explain}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void exitExplain(SqlBaseParser.ExplainContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code debug}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code debug}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void enterDebug(SqlBaseParser.DebugContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code debug}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code debug}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void exitDebug(SqlBaseParser.DebugContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code showTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code showTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void enterShowTables(SqlBaseParser.ShowTablesContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code showTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code showTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void exitShowTables(SqlBaseParser.ShowTablesContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code showColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code showColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void enterShowColumns(SqlBaseParser.ShowColumnsContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code showColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code showColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void exitShowColumns(SqlBaseParser.ShowColumnsContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code showFunctions}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code showFunctions}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void enterShowFunctions(SqlBaseParser.ShowFunctionsContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code showFunctions}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code showFunctions}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void exitShowFunctions(SqlBaseParser.ShowFunctionsContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code showSchemas}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code showSchemas}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void enterShowSchemas(SqlBaseParser.ShowSchemasContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code showSchemas}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code showSchemas}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void exitShowSchemas(SqlBaseParser.ShowSchemasContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code sysTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code sysTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void enterSysTables(SqlBaseParser.SysTablesContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code sysTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code sysTables}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void exitSysTables(SqlBaseParser.SysTablesContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code sysColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code sysColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void enterSysColumns(SqlBaseParser.SysColumnsContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code sysColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code sysColumns}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void exitSysColumns(SqlBaseParser.SysColumnsContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code sysTypes}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code sysTypes}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void enterSysTypes(SqlBaseParser.SysTypesContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code sysTypes}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code sysTypes}  * labeled alternative in {@link SqlBaseParser#statement}.  * @param ctx the parse tree  */ void exitSysTypes(SqlBaseParser.SysTypesContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#query}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#query}.  * @param ctx the parse tree  */ void enterQuery(SqlBaseParser.QueryContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#query}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#query}.  * @param ctx the parse tree  */ void exitQuery(SqlBaseParser.QueryContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#queryNoWith}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#queryNoWith}.  * @param ctx the parse tree  */ void enterQueryNoWith(SqlBaseParser.QueryNoWithContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#queryNoWith}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#queryNoWith}.  * @param ctx the parse tree  */ void exitQueryNoWith(SqlBaseParser.QueryNoWithContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#limitClause}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#limitClause}.  * @param ctx the parse tree  */ void enterLimitClause(SqlBaseParser.LimitClauseContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#limitClause}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#limitClause}.  * @param ctx the parse tree  */ void exitLimitClause(SqlBaseParser.LimitClauseContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code queryPrimaryDefault}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code queryPrimaryDefault}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  */ void enterQueryPrimaryDefault(SqlBaseParser.QueryPrimaryDefaultContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code queryPrimaryDefault}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code queryPrimaryDefault}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  */ void exitQueryPrimaryDefault(SqlBaseParser.QueryPrimaryDefaultContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code subquery}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code subquery}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  */ void enterSubquery(SqlBaseParser.SubqueryContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code subquery}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code subquery}  * labeled alternative in {@link SqlBaseParser#queryTerm}.  * @param ctx the parse tree  */ void exitSubquery(SqlBaseParser.SubqueryContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#orderBy}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#orderBy}.  * @param ctx the parse tree  */ void enterOrderBy(SqlBaseParser.OrderByContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#orderBy}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#orderBy}.  * @param ctx the parse tree  */ void exitOrderBy(SqlBaseParser.OrderByContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#querySpecification}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#querySpecification}.  * @param ctx the parse tree  */ void enterQuerySpecification(SqlBaseParser.QuerySpecificationContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#querySpecification}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#querySpecification}.  * @param ctx the parse tree  */ void exitQuerySpecification(SqlBaseParser.QuerySpecificationContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#fromClause}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#fromClause}.  * @param ctx the parse tree  */ void enterFromClause(SqlBaseParser.FromClauseContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#fromClause}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#fromClause}.  * @param ctx the parse tree  */ void exitFromClause(SqlBaseParser.FromClauseContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#groupBy}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#groupBy}.  * @param ctx the parse tree  */ void enterGroupBy(SqlBaseParser.GroupByContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#groupBy}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#groupBy}.  * @param ctx the parse tree  */ void exitGroupBy(SqlBaseParser.GroupByContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code singleGroupingSet}  * labeled alternative in {@link SqlBaseParser#groupingElement}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code singleGroupingSet}  * labeled alternative in {@link SqlBaseParser#groupingElement}.  * @param ctx the parse tree  */ void enterSingleGroupingSet(SqlBaseParser.SingleGroupingSetContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code singleGroupingSet}  * labeled alternative in {@link SqlBaseParser#groupingElement}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code singleGroupingSet}  * labeled alternative in {@link SqlBaseParser#groupingElement}.  * @param ctx the parse tree  */ void exitSingleGroupingSet(SqlBaseParser.SingleGroupingSetContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#groupingExpressions}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#groupingExpressions}.  * @param ctx the parse tree  */ void enterGroupingExpressions(SqlBaseParser.GroupingExpressionsContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#groupingExpressions}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#groupingExpressions}.  * @param ctx the parse tree  */ void exitGroupingExpressions(SqlBaseParser.GroupingExpressionsContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#namedQuery}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#namedQuery}.  * @param ctx the parse tree  */ void enterNamedQuery(SqlBaseParser.NamedQueryContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#namedQuery}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#namedQuery}.  * @param ctx the parse tree  */ void exitNamedQuery(SqlBaseParser.NamedQueryContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#setQuantifier}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#setQuantifier}.  * @param ctx the parse tree  */ void enterSetQuantifier(SqlBaseParser.SetQuantifierContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#setQuantifier}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#setQuantifier}.  * @param ctx the parse tree  */ void exitSetQuantifier(SqlBaseParser.SetQuantifierContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code selectExpression}  * labeled alternative in {@link SqlBaseParser#selectItem}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code selectExpression}  * labeled alternative in {@link SqlBaseParser#selectItem}.  * @param ctx the parse tree  */ void enterSelectExpression(SqlBaseParser.SelectExpressionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code selectExpression}  * labeled alternative in {@link SqlBaseParser#selectItem}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code selectExpression}  * labeled alternative in {@link SqlBaseParser#selectItem}.  * @param ctx the parse tree  */ void exitSelectExpression(SqlBaseParser.SelectExpressionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#relation}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#relation}.  * @param ctx the parse tree  */ void enterRelation(SqlBaseParser.RelationContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#relation}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#relation}.  * @param ctx the parse tree  */ void exitRelation(SqlBaseParser.RelationContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#joinRelation}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#joinRelation}.  * @param ctx the parse tree  */ void enterJoinRelation(SqlBaseParser.JoinRelationContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#joinRelation}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#joinRelation}.  * @param ctx the parse tree  */ void exitJoinRelation(SqlBaseParser.JoinRelationContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#joinType}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#joinType}.  * @param ctx the parse tree  */ void enterJoinType(SqlBaseParser.JoinTypeContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#joinType}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#joinType}.  * @param ctx the parse tree  */ void exitJoinType(SqlBaseParser.JoinTypeContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#joinCriteria}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#joinCriteria}.  * @param ctx the parse tree  */ void enterJoinCriteria(SqlBaseParser.JoinCriteriaContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#joinCriteria}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#joinCriteria}.  * @param ctx the parse tree  */ void exitJoinCriteria(SqlBaseParser.JoinCriteriaContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code tableName}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code tableName}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ void enterTableName(SqlBaseParser.TableNameContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code tableName}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code tableName}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ void exitTableName(SqlBaseParser.TableNameContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code aliasedQuery}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code aliasedQuery}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ void enterAliasedQuery(SqlBaseParser.AliasedQueryContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code aliasedQuery}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code aliasedQuery}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ void exitAliasedQuery(SqlBaseParser.AliasedQueryContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code aliasedRelation}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code aliasedRelation}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ void enterAliasedRelation(SqlBaseParser.AliasedRelationContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code aliasedRelation}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code aliasedRelation}  * labeled alternative in {@link SqlBaseParser#relationPrimary}.  * @param ctx the parse tree  */ void exitAliasedRelation(SqlBaseParser.AliasedRelationContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#expression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#expression}.  * @param ctx the parse tree  */ void enterExpression(SqlBaseParser.ExpressionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#expression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#expression}.  * @param ctx the parse tree  */ void exitExpression(SqlBaseParser.ExpressionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code logicalNot}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code logicalNot}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void enterLogicalNot(SqlBaseParser.LogicalNotContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code logicalNot}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code logicalNot}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void exitLogicalNot(SqlBaseParser.LogicalNotContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code stringQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code stringQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void enterStringQuery(SqlBaseParser.StringQueryContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code stringQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code stringQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void exitStringQuery(SqlBaseParser.StringQueryContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code booleanDefault}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code booleanDefault}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void enterBooleanDefault(SqlBaseParser.BooleanDefaultContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code booleanDefault}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code booleanDefault}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void exitBooleanDefault(SqlBaseParser.BooleanDefaultContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code exists}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code exists}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void enterExists(SqlBaseParser.ExistsContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code exists}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code exists}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void exitExists(SqlBaseParser.ExistsContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code multiMatchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code multiMatchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void enterMultiMatchQuery(SqlBaseParser.MultiMatchQueryContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code multiMatchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code multiMatchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void exitMultiMatchQuery(SqlBaseParser.MultiMatchQueryContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code matchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code matchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void enterMatchQuery(SqlBaseParser.MatchQueryContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code matchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code matchQuery}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void exitMatchQuery(SqlBaseParser.MatchQueryContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code logicalBinary}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code logicalBinary}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void enterLogicalBinary(SqlBaseParser.LogicalBinaryContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code logicalBinary}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code logicalBinary}  * labeled alternative in {@link SqlBaseParser#booleanExpression}.  * @param ctx the parse tree  */ void exitLogicalBinary(SqlBaseParser.LogicalBinaryContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#matchQueryOptions}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#matchQueryOptions}.  * @param ctx the parse tree  */ void enterMatchQueryOptions(SqlBaseParser.MatchQueryOptionsContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#matchQueryOptions}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#matchQueryOptions}.  * @param ctx the parse tree  */ void exitMatchQueryOptions(SqlBaseParser.MatchQueryOptionsContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#predicated}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#predicated}.  * @param ctx the parse tree  */ void enterPredicated(SqlBaseParser.PredicatedContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#predicated}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#predicated}.  * @param ctx the parse tree  */ void exitPredicated(SqlBaseParser.PredicatedContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#predicate}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#predicate}.  * @param ctx the parse tree  */ void enterPredicate(SqlBaseParser.PredicateContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#predicate}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#predicate}.  * @param ctx the parse tree  */ void exitPredicate(SqlBaseParser.PredicateContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#likePattern}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#likePattern}.  * @param ctx the parse tree  */ void enterLikePattern(SqlBaseParser.LikePatternContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#likePattern}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#likePattern}.  * @param ctx the parse tree  */ void exitLikePattern(SqlBaseParser.LikePatternContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#pattern}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#pattern}.  * @param ctx the parse tree  */ void enterPattern(SqlBaseParser.PatternContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#pattern}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#pattern}.  * @param ctx the parse tree  */ void exitPattern(SqlBaseParser.PatternContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#patternEscape}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#patternEscape}.  * @param ctx the parse tree  */ void enterPatternEscape(SqlBaseParser.PatternEscapeContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#patternEscape}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#patternEscape}.  * @param ctx the parse tree  */ void exitPatternEscape(SqlBaseParser.PatternEscapeContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code valueExpressionDefault}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code valueExpressionDefault}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ void enterValueExpressionDefault(SqlBaseParser.ValueExpressionDefaultContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code valueExpressionDefault}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code valueExpressionDefault}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ void exitValueExpressionDefault(SqlBaseParser.ValueExpressionDefaultContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code comparison}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code comparison}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ void enterComparison(SqlBaseParser.ComparisonContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code comparison}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code comparison}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ void exitComparison(SqlBaseParser.ComparisonContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code castOperatorExpression}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code castOperatorExpression}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ void enterCastOperatorExpression(SqlBaseParser.CastOperatorExpressionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code castOperatorExpression}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code castOperatorExpression}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ void exitCastOperatorExpression(SqlBaseParser.CastOperatorExpressionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code arithmeticBinary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code arithmeticBinary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ void enterArithmeticBinary(SqlBaseParser.ArithmeticBinaryContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code arithmeticBinary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code arithmeticBinary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ void exitArithmeticBinary(SqlBaseParser.ArithmeticBinaryContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code arithmeticUnary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code arithmeticUnary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ void enterArithmeticUnary(SqlBaseParser.ArithmeticUnaryContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code arithmeticUnary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code arithmeticUnary}  * labeled alternative in {@link SqlBaseParser#valueExpression}.  * @param ctx the parse tree  */ void exitArithmeticUnary(SqlBaseParser.ArithmeticUnaryContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code cast}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code cast}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void enterCast(SqlBaseParser.CastContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code cast}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code cast}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void exitCast(SqlBaseParser.CastContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code extract}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code extract}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void enterExtract(SqlBaseParser.ExtractContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code extract}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code extract}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void exitExtract(SqlBaseParser.ExtractContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code currentDateTimeFunction}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code currentDateTimeFunction}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void enterCurrentDateTimeFunction(SqlBaseParser.CurrentDateTimeFunctionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code currentDateTimeFunction}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code currentDateTimeFunction}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void exitCurrentDateTimeFunction(SqlBaseParser.CurrentDateTimeFunctionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code constantDefault}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code constantDefault}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void enterConstantDefault(SqlBaseParser.ConstantDefaultContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code constantDefault}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code constantDefault}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void exitConstantDefault(SqlBaseParser.ConstantDefaultContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code star}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code star}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void enterStar(SqlBaseParser.StarContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code star}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code star}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void exitStar(SqlBaseParser.StarContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code function}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code function}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void enterFunction(SqlBaseParser.FunctionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code function}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code function}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void exitFunction(SqlBaseParser.FunctionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code subqueryExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code subqueryExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void enterSubqueryExpression(SqlBaseParser.SubqueryExpressionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code subqueryExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code subqueryExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void exitSubqueryExpression(SqlBaseParser.SubqueryExpressionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code dereference}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code dereference}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void enterDereference(SqlBaseParser.DereferenceContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code dereference}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code dereference}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void exitDereference(SqlBaseParser.DereferenceContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code parenthesizedExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code parenthesizedExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void enterParenthesizedExpression(SqlBaseParser.ParenthesizedExpressionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code parenthesizedExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code parenthesizedExpression}  * labeled alternative in {@link SqlBaseParser#primaryExpression}.  * @param ctx the parse tree  */ void exitParenthesizedExpression(SqlBaseParser.ParenthesizedExpressionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#builtinDateTimeFunction}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#builtinDateTimeFunction}.  * @param ctx the parse tree  */ void enterBuiltinDateTimeFunction(SqlBaseParser.BuiltinDateTimeFunctionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#builtinDateTimeFunction}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#builtinDateTimeFunction}.  * @param ctx the parse tree  */ void exitBuiltinDateTimeFunction(SqlBaseParser.BuiltinDateTimeFunctionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#castExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#castExpression}.  * @param ctx the parse tree  */ void enterCastExpression(SqlBaseParser.CastExpressionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#castExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#castExpression}.  * @param ctx the parse tree  */ void exitCastExpression(SqlBaseParser.CastExpressionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#castTemplate}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#castTemplate}.  * @param ctx the parse tree  */ void enterCastTemplate(SqlBaseParser.CastTemplateContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#castTemplate}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#castTemplate}.  * @param ctx the parse tree  */ void exitCastTemplate(SqlBaseParser.CastTemplateContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#convertTemplate}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#convertTemplate}.  * @param ctx the parse tree  */ void enterConvertTemplate(SqlBaseParser.ConvertTemplateContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#convertTemplate}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#convertTemplate}.  * @param ctx the parse tree  */ void exitConvertTemplate(SqlBaseParser.ConvertTemplateContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#extractExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#extractExpression}.  * @param ctx the parse tree  */ void enterExtractExpression(SqlBaseParser.ExtractExpressionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#extractExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#extractExpression}.  * @param ctx the parse tree  */ void exitExtractExpression(SqlBaseParser.ExtractExpressionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#extractTemplate}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#extractTemplate}.  * @param ctx the parse tree  */ void enterExtractTemplate(SqlBaseParser.ExtractTemplateContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#extractTemplate}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#extractTemplate}.  * @param ctx the parse tree  */ void exitExtractTemplate(SqlBaseParser.ExtractTemplateContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#functionExpression}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#functionExpression}.  * @param ctx the parse tree  */ void enterFunctionExpression(SqlBaseParser.FunctionExpressionContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#functionExpression}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#functionExpression}.  * @param ctx the parse tree  */ void exitFunctionExpression(SqlBaseParser.FunctionExpressionContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#functionTemplate}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#functionTemplate}.  * @param ctx the parse tree  */ void enterFunctionTemplate(SqlBaseParser.FunctionTemplateContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#functionTemplate}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#functionTemplate}.  * @param ctx the parse tree  */ void exitFunctionTemplate(SqlBaseParser.FunctionTemplateContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#functionName}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#functionName}.  * @param ctx the parse tree  */ void enterFunctionName(SqlBaseParser.FunctionNameContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#functionName}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#functionName}.  * @param ctx the parse tree  */ void exitFunctionName(SqlBaseParser.FunctionNameContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code nullLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code nullLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void enterNullLiteral(SqlBaseParser.NullLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code nullLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code nullLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void exitNullLiteral(SqlBaseParser.NullLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code intervalLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code intervalLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void enterIntervalLiteral(SqlBaseParser.IntervalLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code intervalLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code intervalLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void exitIntervalLiteral(SqlBaseParser.IntervalLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code numericLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code numericLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void enterNumericLiteral(SqlBaseParser.NumericLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code numericLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code numericLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void exitNumericLiteral(SqlBaseParser.NumericLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code booleanLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code booleanLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void enterBooleanLiteral(SqlBaseParser.BooleanLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code booleanLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code booleanLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void exitBooleanLiteral(SqlBaseParser.BooleanLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code stringLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code stringLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void enterStringLiteral(SqlBaseParser.StringLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code stringLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code stringLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void exitStringLiteral(SqlBaseParser.StringLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code paramLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code paramLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void enterParamLiteral(SqlBaseParser.ParamLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code paramLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code paramLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void exitParamLiteral(SqlBaseParser.ParamLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code dateEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code dateEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void enterDateEscapedLiteral(SqlBaseParser.DateEscapedLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code dateEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code dateEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void exitDateEscapedLiteral(SqlBaseParser.DateEscapedLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code timeEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code timeEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void enterTimeEscapedLiteral(SqlBaseParser.TimeEscapedLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code timeEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code timeEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void exitTimeEscapedLiteral(SqlBaseParser.TimeEscapedLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code timestampEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code timestampEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void enterTimestampEscapedLiteral(SqlBaseParser.TimestampEscapedLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code timestampEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code timestampEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void exitTimestampEscapedLiteral(SqlBaseParser.TimestampEscapedLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code guidEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code guidEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void enterGuidEscapedLiteral(SqlBaseParser.GuidEscapedLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code guidEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code guidEscapedLiteral}  * labeled alternative in {@link SqlBaseParser#constant}.  * @param ctx the parse tree  */ void exitGuidEscapedLiteral(SqlBaseParser.GuidEscapedLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#comparisonOperator}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#comparisonOperator}.  * @param ctx the parse tree  */ void enterComparisonOperator(SqlBaseParser.ComparisonOperatorContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#comparisonOperator}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#comparisonOperator}.  * @param ctx the parse tree  */ void exitComparisonOperator(SqlBaseParser.ComparisonOperatorContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#booleanValue}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#booleanValue}.  * @param ctx the parse tree  */ void enterBooleanValue(SqlBaseParser.BooleanValueContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#booleanValue}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#booleanValue}.  * @param ctx the parse tree  */ void exitBooleanValue(SqlBaseParser.BooleanValueContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#interval}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#interval}.  * @param ctx the parse tree  */ void enterInterval(SqlBaseParser.IntervalContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#interval}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#interval}.  * @param ctx the parse tree  */ void exitInterval(SqlBaseParser.IntervalContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#intervalField}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#intervalField}.  * @param ctx the parse tree  */ void enterIntervalField(SqlBaseParser.IntervalFieldContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#intervalField}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#intervalField}.  * @param ctx the parse tree  */ void exitIntervalField(SqlBaseParser.IntervalFieldContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code primitiveDataType}  * labeled alternative in {@link SqlBaseParser#dataType}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code primitiveDataType}  * labeled alternative in {@link SqlBaseParser#dataType}.  * @param ctx the parse tree  */ void enterPrimitiveDataType(SqlBaseParser.PrimitiveDataTypeContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code primitiveDataType}  * labeled alternative in {@link SqlBaseParser#dataType}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code primitiveDataType}  * labeled alternative in {@link SqlBaseParser#dataType}.  * @param ctx the parse tree  */ void exitPrimitiveDataType(SqlBaseParser.PrimitiveDataTypeContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#qualifiedName}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#qualifiedName}.  * @param ctx the parse tree  */ void enterQualifiedName(SqlBaseParser.QualifiedNameContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#qualifiedName}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#qualifiedName}.  * @param ctx the parse tree  */ void exitQualifiedName(SqlBaseParser.QualifiedNameContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#identifier}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#identifier}.  * @param ctx the parse tree  */ void enterIdentifier(SqlBaseParser.IdentifierContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#identifier}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#identifier}.  * @param ctx the parse tree  */ void exitIdentifier(SqlBaseParser.IdentifierContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#tableIdentifier}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#tableIdentifier}.  * @param ctx the parse tree  */ void enterTableIdentifier(SqlBaseParser.TableIdentifierContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#tableIdentifier}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#tableIdentifier}.  * @param ctx the parse tree  */ void exitTableIdentifier(SqlBaseParser.TableIdentifierContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code quotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code quotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  */ void enterQuotedIdentifier(SqlBaseParser.QuotedIdentifierContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code quotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code quotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  */ void exitQuotedIdentifier(SqlBaseParser.QuotedIdentifierContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code backQuotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code backQuotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  */ void enterBackQuotedIdentifier(SqlBaseParser.BackQuotedIdentifierContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code backQuotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code backQuotedIdentifier}  * labeled alternative in {@link SqlBaseParser#quoteIdentifier}.  * @param ctx the parse tree  */ void exitBackQuotedIdentifier(SqlBaseParser.BackQuotedIdentifierContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code unquotedIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code unquotedIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  */ void enterUnquotedIdentifier(SqlBaseParser.UnquotedIdentifierContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code unquotedIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code unquotedIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  */ void exitUnquotedIdentifier(SqlBaseParser.UnquotedIdentifierContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code digitIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code digitIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  */ void enterDigitIdentifier(SqlBaseParser.DigitIdentifierContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code digitIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code digitIdentifier}  * labeled alternative in {@link SqlBaseParser#unquoteIdentifier}.  * @param ctx the parse tree  */ void exitDigitIdentifier(SqlBaseParser.DigitIdentifierContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code decimalLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code decimalLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  */ void enterDecimalLiteral(SqlBaseParser.DecimalLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code decimalLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code decimalLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  */ void exitDecimalLiteral(SqlBaseParser.DecimalLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by the {@code integerLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by the {@code integerLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  */ void enterIntegerLiteral(SqlBaseParser.IntegerLiteralContext ctx).
true;;1;1;/**  * Exit a parse tree produced by the {@code integerLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by the {@code integerLiteral}  * labeled alternative in {@link SqlBaseParser#number}.  * @param ctx the parse tree  */ void exitIntegerLiteral(SqlBaseParser.IntegerLiteralContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#string}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#string}.  * @param ctx the parse tree  */ void enterString(SqlBaseParser.StringContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#string}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#string}.  * @param ctx the parse tree  */ void exitString(SqlBaseParser.StringContext ctx).
true;;1;1;/**  * Enter a parse tree produced by {@link SqlBaseParser#nonReserved}.  * @param ctx the parse tree  */ ;/**  * Enter a parse tree produced by {@link SqlBaseParser#nonReserved}.  * @param ctx the parse tree  */ void enterNonReserved(SqlBaseParser.NonReservedContext ctx).
true;;1;1;/**  * Exit a parse tree produced by {@link SqlBaseParser#nonReserved}.  * @param ctx the parse tree  */ ;/**  * Exit a parse tree produced by {@link SqlBaseParser#nonReserved}.  * @param ctx the parse tree  */ void exitNonReserved(SqlBaseParser.NonReservedContext ctx).
