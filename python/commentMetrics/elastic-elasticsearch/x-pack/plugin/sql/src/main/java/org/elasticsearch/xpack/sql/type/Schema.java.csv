commented;modifiers;parameterAmount;loc;comment;code
false;;0;1;;String name().
false;;0;1;;DataType type().
false;public;0;4;;@Override public String name() {     return name. }
false;public;0;4;;@Override public DataType type() {     return type. }
false;public;0;3;;public List<String> names() {     return names. }
false;public;0;3;;public List<DataType> types() {     return types. }
false;public;0;3;;public int size() {     return names.size(). }
false;public;1;3;;public Entry get(int i) {     return new DefaultEntry(names.get(i), types.get(i)). }
false;public;1;7;;public DataType type(String name) {     int indexOf = names.indexOf(name).     if (indexOf < 0) {         return null.     }     return types.get(indexOf). }
false;public;0;4;;@Override public boolean hasNext() {     return pos < size - 1. }
false;public;0;7;;@Override public Entry next() {     if (pos++ >= size) {         throw new NoSuchElementException().     }     return get(pos). }
false;public;0;20;;@Override public Iterator<Entry> iterator() {     return new Iterator<Entry>() {          private final int size = size().          private int pos = -1.          @Override         public boolean hasNext() {             return pos < size - 1.         }          @Override         public Entry next() {             if (pos++ >= size) {                 throw new NoSuchElementException().             }             return get(pos).         }     }. }
false;public;0;3;;public Stream<Entry> stream() {     return StreamSupport.stream(spliterator(), false). }
false;public;0;4;;@Override public Spliterator<Entry> spliterator() {     return Spliterators.spliterator(iterator(), size(), 0). }
false;public;0;15;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     sb.append("[").     for (int i = 0. i < names.size(). i++) {         if (i > 0) {             sb.append(",").         }         sb.append(names.get(i)).         sb.append(":").         sb.append(types.get(i).typeName).     }     sb.append("]").     return sb.toString(). }
