commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;3;;public final Double apply(Object l) {     return apply.apply(l). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeEnum(processor). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;8;;@Override public Object process(Object input) {     if (input != null && !(input instanceof Number)) {         throw new SqlIllegalArgumentException("A number is required. received [{}]", input).     }     return processor.apply(input). }
false;;0;3;;MathOperation processor() {     return processor. }
false;public;1;8;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     MathProcessor other = (MathProcessor) obj.     return processor == other.processor. }
false;public;0;4;;@Override public int hashCode() {     return processor.hashCode(). }
false;public;0;4;;@Override public String toString() {     return processor.toString(). }
