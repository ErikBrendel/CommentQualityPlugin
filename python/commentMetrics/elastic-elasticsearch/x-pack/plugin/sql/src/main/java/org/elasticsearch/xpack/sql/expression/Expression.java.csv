commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean unresolved() {     return failed. }
false;public;0;3;;public boolean resolved() {     return !failed. }
false;public;0;3;;public String message() {     return message. }
true;public;0;3;// whether the expression can be evaluated statically (folded) or not ;// whether the expression can be evaluated statically (folded) or not public boolean foldable() {     return false. }
false;public;0;3;;public Object fold() {     throw new SqlIllegalArgumentException("Should not fold expression"). }
false;public,abstract;0;1;;public abstract Nullability nullable().
true;public;0;6;// the references/inputs/leaves of the expression tree ;// the references/inputs/leaves of the expression tree public AttributeSet references() {     if (lazyReferences == null) {         lazyReferences = Expressions.references(children()).     }     return lazyReferences. }
false;public;0;6;;public boolean childrenResolved() {     if (lazyChildrenResolved == null) {         lazyChildrenResolved = Boolean.valueOf(Resolvables.resolved(children())).     }     return lazyChildrenResolved. }
false;public,final;0;6;;public final TypeResolution typeResolved() {     if (lazyTypeResolution == null) {         lazyTypeResolution = resolveType().     }     return lazyTypeResolution. }
false;protected;0;3;;protected TypeResolution resolveType() {     return TypeResolution.TYPE_RESOLVED. }
false;public,final;0;6;;public final Expression canonical() {     if (lazyCanonical == null) {         lazyCanonical = canonicalize().     }     return lazyCanonical. }
false;protected;0;3;;protected Expression canonicalize() {     return this. }
false;public;1;3;;public boolean semanticEquals(Expression other) {     return canonical().equals(other.canonical()). }
false;public;0;3;;public int semanticHash() {     return canonical().hashCode(). }
false;public;0;4;;@Override public boolean resolved() {     return childrenResolved() && typeResolved().resolved(). }
false;public,abstract;0;1;;public abstract DataType dataType().
false;public,abstract;0;2;;@Override public abstract int hashCode().
false;public;0;4;;@Override public String toString() {     return nodeName() + "[" + propertiesToString(false) + "]". }
