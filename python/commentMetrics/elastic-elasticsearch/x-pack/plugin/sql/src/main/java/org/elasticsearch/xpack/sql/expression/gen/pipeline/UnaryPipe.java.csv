commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<UnaryPipe> info() {     return NodeInfo.create(this, UnaryPipe::new, expression(), child, action). }
false;public;1;7;;@Override public Pipe replaceChildren(List<Pipe> newChildren) {     if (newChildren.size() != 1) {         throw new IllegalArgumentException("expected [1] child but received [" + newChildren.size() + "]").     }     return new UnaryPipe(source(), expression(), newChildren.get(0), action). }
false;public;0;3;;public Pipe child() {     return child. }
false;public;0;3;;public Processor action() {     return action. }
false;public;0;4;;@Override public boolean resolved() {     return child.resolved(). }
false;public;0;4;;@Override public Processor asProcessor() {     return new ChainingProcessor(child.asProcessor(), action). }
false;public;0;4;;@Override public boolean supportedByAggsOnlyQuery() {     return child.supportedByAggsOnlyQuery(). }
false;public;1;8;;@Override public Pipe resolveAttributes(AttributeResolver resolver) {     Pipe newChild = child.resolveAttributes(resolver).     if (newChild == child) {         return this.     }     return new UnaryPipe(source(), expression(), newChild, action). }
false;public;1;4;;@Override public void collectFields(SqlSourceBuilder sourceBuilder) {     child.collectFields(sourceBuilder). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(expression(), child, action). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     UnaryPipe other = (UnaryPipe) obj.     return Objects.equals(action, other.action) && Objects.equals(child, other.child) && Objects.equals(expression(), other.expression()). }
