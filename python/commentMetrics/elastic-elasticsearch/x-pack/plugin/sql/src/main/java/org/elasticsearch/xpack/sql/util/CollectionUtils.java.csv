commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static boolean isEmpty(Collection<?> col) {     return col == null || col.isEmpty(). }
false;public,static;2;18;;@SuppressWarnings("unchecked") public static <T> List<T> combine(List<? extends T> left, List<? extends T> right) {     if (right.isEmpty()) {         return (List<T>) left.     }     if (left.isEmpty()) {         return (List<T>) right.     }     List<T> list = new ArrayList<>(left.size() + right.size()).     if (!left.isEmpty()) {         list.addAll(left).     }     if (!right.isEmpty()) {         list.addAll(right).     }     return list. }
false;public,static;1;21;;@SafeVarargs @SuppressWarnings("varargs") public static <T> List<T> combine(Collection<? extends T>... collections) {     if (org.elasticsearch.common.util.CollectionUtils.isEmpty(collections)) {         return emptyList().     }     List<T> list = new ArrayList<>().     for (Collection<? extends T> col : collections) {         // typically AttributeSet which ends up iterating anyway plus creating a redundant array         if (col instanceof Set) {             for (T t : col) {                 list.add(t).             }         } else {             list.addAll(col).         }     }     return list. }
false;public,static;2;12;;@SafeVarargs @SuppressWarnings("varargs") public static <T> List<T> combine(Collection<? extends T> left, T... entries) {     List<T> list = new ArrayList<>(left.size() + entries.length).     if (!left.isEmpty()) {         list.addAll(left).     }     if (entries.length > 0) {         Collections.addAll(list, entries).     }     return list. }
