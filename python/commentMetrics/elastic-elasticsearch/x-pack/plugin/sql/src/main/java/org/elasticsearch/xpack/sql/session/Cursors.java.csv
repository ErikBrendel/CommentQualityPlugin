commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;20;/**  * The {@link NamedWriteable}s required to deserialize {@link Cursor}s.  */ ;/**  * The {@link NamedWriteable}s required to deserialize {@link Cursor}s.  */ public static List<NamedWriteableRegistry.Entry> getNamedWriteables() {     List<NamedWriteableRegistry.Entry> entries = new ArrayList<>().     // cursors     entries.add(new NamedWriteableRegistry.Entry(Cursor.class, EmptyCursor.NAME, in -> Cursor.EMPTY)).     entries.add(new NamedWriteableRegistry.Entry(Cursor.class, ScrollCursor.NAME, ScrollCursor::new)).     entries.add(new NamedWriteableRegistry.Entry(Cursor.class, CompositeAggregationCursor.NAME, CompositeAggregationCursor::new)).     entries.add(new NamedWriteableRegistry.Entry(Cursor.class, TextFormatterCursor.NAME, TextFormatterCursor::new)).     entries.add(new NamedWriteableRegistry.Entry(Cursor.class, PagingListCursor.NAME, PagingListCursor::new)).     // plus all their dependencies     entries.addAll(Processors.getNamedWriteables()).     entries.addAll(HitExtractors.getNamedWriteables()).     entries.addAll(BucketExtractors.getNamedWriteables()).     // and custom types     entries.addAll(Intervals.getNamedWriteables()).     return entries. }
true;public,static;2;14;/**  * Write a {@linkplain Cursor} to a string for serialization across xcontent.  */ ;/**  * Write a {@linkplain Cursor} to a string for serialization across xcontent.  */ public static String encodeToString(Version version, Cursor info) {     if (info == Cursor.EMPTY) {         return "".     }     try (ByteArrayOutputStream os = new ByteArrayOutputStream()) {         try (OutputStream base64 = Base64.getEncoder().wrap(os).             StreamOutput out = new OutputStreamStreamOutput(base64)) {             Version.writeVersion(version, out).             out.writeNamedWriteable(info).         }         return os.toString(StandardCharsets.UTF_8.name()).     } catch (Exception ex) {         throw new SqlIllegalArgumentException("Unexpected failure retriving next page", ex).     } }
true;public,static;1;18;/**  * Read a {@linkplain Cursor} from a string.  */ ;/**  * Read a {@linkplain Cursor} from a string.  */ public static Cursor decodeFromString(String info) {     if (info.isEmpty()) {         return Cursor.EMPTY.     }     byte[] bytes = info.getBytes(StandardCharsets.UTF_8).     try (StreamInput in = new NamedWriteableAwareStreamInput(StreamInput.wrap(Base64.getDecoder().decode(bytes)), WRITEABLE_REGISTRY)) {         Version version = Version.readVersion(in).         if (version.after(Version.CURRENT)) {             throw new SqlIllegalArgumentException("Unsupported cursor version " + version).         }         in.setVersion(version).         return in.readNamedWriteable(Cursor.class).     } catch (SqlIllegalArgumentException ex) {         throw ex.     } catch (Exception ex) {         throw new SqlIllegalArgumentException("Unexpected failure decoding cursor", ex).     } }
