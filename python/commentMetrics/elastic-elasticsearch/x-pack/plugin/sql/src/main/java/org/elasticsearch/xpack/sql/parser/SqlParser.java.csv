# id;timestamp;commentText;codeText;commentWords;codeWords
SqlParser -> public LogicalPlan createStatement(String sql);1524684173;Used only in tests;public LogicalPlan createStatement(String sql) {_        return createStatement(sql, Collections.emptyList())__    };used,only,in,tests;public,logical,plan,create,statement,string,sql,return,create,statement,sql,collections,empty,list
SqlParser -> public LogicalPlan createStatement(String sql);1526374795;Used only in tests;public LogicalPlan createStatement(String sql) {_        return createStatement(sql, Collections.emptyList())__    };used,only,in,tests;public,logical,plan,create,statement,string,sql,return,create,statement,sql,collections,empty,list
SqlParser -> public LogicalPlan createStatement(String sql);1531382259;Used only in tests;public LogicalPlan createStatement(String sql) {_        return createStatement(sql, Collections.emptyList())__    };used,only,in,tests;public,logical,plan,create,statement,string,sql,return,create,statement,sql,collections,empty,list
SqlParser -> public LogicalPlan createStatement(String sql);1537806831;Used only in tests;public LogicalPlan createStatement(String sql) {_        return createStatement(sql, Collections.emptyList())__    };used,only,in,tests;public,logical,plan,create,statement,string,sql,return,create,statement,sql,collections,empty,list
SqlParser -> public LogicalPlan createStatement(String sql);1538067637;Used only in tests;public LogicalPlan createStatement(String sql) {_        return createStatement(sql, Collections.emptyList())__    };used,only,in,tests;public,logical,plan,create,statement,string,sql,return,create,statement,sql,collections,empty,list
SqlParser -> public LogicalPlan createStatement(String sql);1541588912;Used only in tests;public LogicalPlan createStatement(String sql) {_        return createStatement(sql, Collections.emptyList())__    };used,only,in,tests;public,logical,plan,create,statement,string,sql,return,create,statement,sql,collections,empty,list
SqlParser -> public LogicalPlan createStatement(String sql);1545145647;Used only in tests;public LogicalPlan createStatement(String sql) {_        return createStatement(sql, Collections.emptyList())__    };used,only,in,tests;public,logical,plan,create,statement,string,sql,return,create,statement,sql,collections,empty,list
SqlParser -> public LogicalPlan createStatement(String sql);1546556270;Used only in tests;public LogicalPlan createStatement(String sql) {_        return createStatement(sql, Collections.emptyList())__    };used,only,in,tests;public,logical,plan,create,statement,string,sql,return,create,statement,sql,collections,empty,list
SqlParser -> public LogicalPlan createStatement(String sql);1548422582;Used only in tests;public LogicalPlan createStatement(String sql) {_        return createStatement(sql, Collections.emptyList())__    };used,only,in,tests;public,logical,plan,create,statement,string,sql,return,create,statement,sql,collections,empty,list
SqlParser -> public LogicalPlan createStatement(String sql);1549696651;Used only in tests;public LogicalPlan createStatement(String sql) {_        return createStatement(sql, Collections.emptyList())__    };used,only,in,tests;public,logical,plan,create,statement,string,sql,return,create,statement,sql,collections,empty,list
SqlParser -> public Expression createExpression(String expression, List<SqlTypedParamValue> params);1524684173;Parses an expression - Used only in tests;public Expression createExpression(String expression, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as expression: {}", expression)__        }__        return invokeParser(expression, params, SqlBaseParser::singleExpression, AstBuilder::expression)__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,expression,expression,return,invoke,parser,expression,params,sql,base,parser,single,expression,ast,builder,expression
SqlParser -> public Expression createExpression(String expression, List<SqlTypedParamValue> params);1526374795;Parses an expression - Used only in tests;public Expression createExpression(String expression, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as expression: {}", expression)__        }__        return invokeParser(expression, params, SqlBaseParser::singleExpression, AstBuilder::expression)__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,expression,expression,return,invoke,parser,expression,params,sql,base,parser,single,expression,ast,builder,expression
SqlParser -> public Expression createExpression(String expression, List<SqlTypedParamValue> params);1531382259;Parses an expression - Used only in tests;public Expression createExpression(String expression, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as expression: {}", expression)__        }__        return invokeParser(expression, params, SqlBaseParser::singleExpression, AstBuilder::expression)__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,expression,expression,return,invoke,parser,expression,params,sql,base,parser,single,expression,ast,builder,expression
SqlParser -> public Expression createExpression(String expression, List<SqlTypedParamValue> params);1537806831;Parses an expression - Used only in tests;public Expression createExpression(String expression, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as expression: {}", expression)__        }__        return invokeParser(expression, params, SqlBaseParser::singleExpression, AstBuilder::expression)__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,expression,expression,return,invoke,parser,expression,params,sql,base,parser,single,expression,ast,builder,expression
SqlParser -> public Expression createExpression(String expression, List<SqlTypedParamValue> params);1538067637;Parses an expression - Used only in tests;public Expression createExpression(String expression, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as expression: {}", expression)__        }__        return invokeParser(expression, params, SqlBaseParser::singleExpression, AstBuilder::expression)__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,expression,expression,return,invoke,parser,expression,params,sql,base,parser,single,expression,ast,builder,expression
SqlParser -> public Expression createExpression(String expression, List<SqlTypedParamValue> params);1541588912;Parses an expression - Used only in tests;public Expression createExpression(String expression, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as expression: {}", expression)__        }__        return invokeParser(expression, params, SqlBaseParser::singleExpression, AstBuilder::expression)__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,expression,expression,return,invoke,parser,expression,params,sql,base,parser,single,expression,ast,builder,expression
SqlParser -> public Expression createExpression(String expression, List<SqlTypedParamValue> params);1545145647;Parses an expression - Used only in tests;public Expression createExpression(String expression, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as expression: {}", expression)__        }__        return invokeParser(expression, params, SqlBaseParser::singleExpression, AstBuilder::expression)__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,expression,expression,return,invoke,parser,expression,params,sql,base,parser,single,expression,ast,builder,expression
SqlParser -> public Expression createExpression(String expression, List<SqlTypedParamValue> params);1546556270;Parses an expression - Used only in tests;public Expression createExpression(String expression, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as expression: {}", expression)__        }__        return invokeParser(expression, params, SqlBaseParser::singleExpression, AstBuilder::expression)__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,expression,expression,return,invoke,parser,expression,params,sql,base,parser,single,expression,ast,builder,expression
SqlParser -> public Expression createExpression(String expression, List<SqlTypedParamValue> params);1548422582;Parses an expression - Used only in tests;public Expression createExpression(String expression, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as expression: {}", expression)__        }__        return invokeParser(expression, params, SqlBaseParser::singleExpression, AstBuilder::expression)__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,expression,expression,return,invoke,parser,expression,params,sql,base,parser,single,expression,ast,builder,expression
SqlParser -> public Expression createExpression(String expression, List<SqlTypedParamValue> params);1549696651;Parses an expression - Used only in tests;public Expression createExpression(String expression, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as expression: {}", expression)__        }__        return invokeParser(expression, params, SqlBaseParser::singleExpression, AstBuilder::expression)__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,expression,expression,return,invoke,parser,expression,params,sql,base,parser,single,expression,ast,builder,expression
SqlParser -> public Expression createExpression(String expression);1524684173;Parses an expression - used only in tests;public Expression createExpression(String expression) {_        return createExpression(expression, Collections.emptyList())__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,return,create,expression,expression,collections,empty,list
SqlParser -> public Expression createExpression(String expression);1526374795;Parses an expression - used only in tests;public Expression createExpression(String expression) {_        return createExpression(expression, Collections.emptyList())__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,return,create,expression,expression,collections,empty,list
SqlParser -> public Expression createExpression(String expression);1531382259;Parses an expression - used only in tests;public Expression createExpression(String expression) {_        return createExpression(expression, Collections.emptyList())__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,return,create,expression,expression,collections,empty,list
SqlParser -> public Expression createExpression(String expression);1537806831;Parses an expression - used only in tests;public Expression createExpression(String expression) {_        return createExpression(expression, Collections.emptyList())__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,return,create,expression,expression,collections,empty,list
SqlParser -> public Expression createExpression(String expression);1538067637;Parses an expression - used only in tests;public Expression createExpression(String expression) {_        return createExpression(expression, Collections.emptyList())__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,return,create,expression,expression,collections,empty,list
SqlParser -> public Expression createExpression(String expression);1541588912;Parses an expression - used only in tests;public Expression createExpression(String expression) {_        return createExpression(expression, Collections.emptyList())__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,return,create,expression,expression,collections,empty,list
SqlParser -> public Expression createExpression(String expression);1545145647;Parses an expression - used only in tests;public Expression createExpression(String expression) {_        return createExpression(expression, Collections.emptyList())__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,return,create,expression,expression,collections,empty,list
SqlParser -> public Expression createExpression(String expression);1546556270;Parses an expression - used only in tests;public Expression createExpression(String expression) {_        return createExpression(expression, Collections.emptyList())__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,return,create,expression,expression,collections,empty,list
SqlParser -> public Expression createExpression(String expression);1548422582;Parses an expression - used only in tests;public Expression createExpression(String expression) {_        return createExpression(expression, Collections.emptyList())__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,return,create,expression,expression,collections,empty,list
SqlParser -> public Expression createExpression(String expression);1549696651;Parses an expression - used only in tests;public Expression createExpression(String expression) {_        return createExpression(expression, Collections.emptyList())__    };parses,an,expression,used,only,in,tests;public,expression,create,expression,string,expression,return,create,expression,expression,collections,empty,list
SqlParser -> public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params);1524684173;Parses an SQL statement into execution plan_@param sql - the SQL statement_@param params - a list of parameters for the statement if the statement is parametrized_@return logical plan;public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as statement: {}", sql)__        }_        return invokeParser(sql, params, SqlBaseParser::singleStatement, AstBuilder::plan)__    };parses,an,sql,statement,into,execution,plan,param,sql,the,sql,statement,param,params,a,list,of,parameters,for,the,statement,if,the,statement,is,parametrized,return,logical,plan;public,logical,plan,create,statement,string,sql,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,statement,sql,return,invoke,parser,sql,params,sql,base,parser,single,statement,ast,builder,plan
SqlParser -> public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params);1526374795;Parses an SQL statement into execution plan_@param sql - the SQL statement_@param params - a list of parameters for the statement if the statement is parametrized_@return logical plan;public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as statement: {}", sql)__        }_        return invokeParser(sql, params, SqlBaseParser::singleStatement, AstBuilder::plan)__    };parses,an,sql,statement,into,execution,plan,param,sql,the,sql,statement,param,params,a,list,of,parameters,for,the,statement,if,the,statement,is,parametrized,return,logical,plan;public,logical,plan,create,statement,string,sql,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,statement,sql,return,invoke,parser,sql,params,sql,base,parser,single,statement,ast,builder,plan
SqlParser -> public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params);1531382259;Parses an SQL statement into execution plan_@param sql - the SQL statement_@param params - a list of parameters for the statement if the statement is parametrized_@return logical plan;public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as statement: {}", sql)__        }_        return invokeParser(sql, params, SqlBaseParser::singleStatement, AstBuilder::plan)__    };parses,an,sql,statement,into,execution,plan,param,sql,the,sql,statement,param,params,a,list,of,parameters,for,the,statement,if,the,statement,is,parametrized,return,logical,plan;public,logical,plan,create,statement,string,sql,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,statement,sql,return,invoke,parser,sql,params,sql,base,parser,single,statement,ast,builder,plan
SqlParser -> public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params);1537806831;Parses an SQL statement into execution plan_@param sql - the SQL statement_@param params - a list of parameters for the statement if the statement is parametrized_@return logical plan;public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as statement: {}", sql)__        }_        return invokeParser(sql, params, SqlBaseParser::singleStatement, AstBuilder::plan)__    };parses,an,sql,statement,into,execution,plan,param,sql,the,sql,statement,param,params,a,list,of,parameters,for,the,statement,if,the,statement,is,parametrized,return,logical,plan;public,logical,plan,create,statement,string,sql,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,statement,sql,return,invoke,parser,sql,params,sql,base,parser,single,statement,ast,builder,plan
SqlParser -> public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params);1538067637;Parses an SQL statement into execution plan_@param sql - the SQL statement_@param params - a list of parameters for the statement if the statement is parametrized_@return logical plan;public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as statement: {}", sql)__        }_        return invokeParser(sql, params, SqlBaseParser::singleStatement, AstBuilder::plan)__    };parses,an,sql,statement,into,execution,plan,param,sql,the,sql,statement,param,params,a,list,of,parameters,for,the,statement,if,the,statement,is,parametrized,return,logical,plan;public,logical,plan,create,statement,string,sql,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,statement,sql,return,invoke,parser,sql,params,sql,base,parser,single,statement,ast,builder,plan
SqlParser -> public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params);1541588912;Parses an SQL statement into execution plan_@param sql - the SQL statement_@param params - a list of parameters for the statement if the statement is parametrized_@return logical plan;public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as statement: {}", sql)__        }_        return invokeParser(sql, params, SqlBaseParser::singleStatement, AstBuilder::plan)__    };parses,an,sql,statement,into,execution,plan,param,sql,the,sql,statement,param,params,a,list,of,parameters,for,the,statement,if,the,statement,is,parametrized,return,logical,plan;public,logical,plan,create,statement,string,sql,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,statement,sql,return,invoke,parser,sql,params,sql,base,parser,single,statement,ast,builder,plan
SqlParser -> public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params);1545145647;Parses an SQL statement into execution plan_@param sql - the SQL statement_@param params - a list of parameters for the statement if the statement is parametrized_@return logical plan;public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as statement: {}", sql)__        }_        return invokeParser(sql, params, SqlBaseParser::singleStatement, AstBuilder::plan)__    };parses,an,sql,statement,into,execution,plan,param,sql,the,sql,statement,param,params,a,list,of,parameters,for,the,statement,if,the,statement,is,parametrized,return,logical,plan;public,logical,plan,create,statement,string,sql,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,statement,sql,return,invoke,parser,sql,params,sql,base,parser,single,statement,ast,builder,plan
SqlParser -> public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params);1546556270;Parses an SQL statement into execution plan_@param sql - the SQL statement_@param params - a list of parameters for the statement if the statement is parametrized_@return logical plan;public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as statement: {}", sql)__        }_        return invokeParser(sql, params, SqlBaseParser::singleStatement, AstBuilder::plan)__    };parses,an,sql,statement,into,execution,plan,param,sql,the,sql,statement,param,params,a,list,of,parameters,for,the,statement,if,the,statement,is,parametrized,return,logical,plan;public,logical,plan,create,statement,string,sql,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,statement,sql,return,invoke,parser,sql,params,sql,base,parser,single,statement,ast,builder,plan
SqlParser -> public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params);1548422582;Parses an SQL statement into execution plan_@param sql - the SQL statement_@param params - a list of parameters for the statement if the statement is parametrized_@return logical plan;public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as statement: {}", sql)__        }_        return invokeParser(sql, params, SqlBaseParser::singleStatement, AstBuilder::plan)__    };parses,an,sql,statement,into,execution,plan,param,sql,the,sql,statement,param,params,a,list,of,parameters,for,the,statement,if,the,statement,is,parametrized,return,logical,plan;public,logical,plan,create,statement,string,sql,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,statement,sql,return,invoke,parser,sql,params,sql,base,parser,single,statement,ast,builder,plan
SqlParser -> public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params);1549696651;Parses an SQL statement into execution plan_@param sql - the SQL statement_@param params - a list of parameters for the statement if the statement is parametrized_@return logical plan;public LogicalPlan createStatement(String sql, List<SqlTypedParamValue> params) {_        if (log.isDebugEnabled()) {_            log.debug("Parsing as statement: {}", sql)__        }_        return invokeParser(sql, params, SqlBaseParser::singleStatement, AstBuilder::plan)__    };parses,an,sql,statement,into,execution,plan,param,sql,the,sql,statement,param,params,a,list,of,parameters,for,the,statement,if,the,statement,is,parametrized,return,logical,plan;public,logical,plan,create,statement,string,sql,list,sql,typed,param,value,params,if,log,is,debug,enabled,log,debug,parsing,as,statement,sql,return,invoke,parser,sql,params,sql,base,parser,single,statement,ast,builder,plan
