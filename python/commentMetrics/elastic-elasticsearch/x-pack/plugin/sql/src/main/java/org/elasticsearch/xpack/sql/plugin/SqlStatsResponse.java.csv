commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected List<NodeStatsResponse> readNodesFrom(StreamInput in) throws IOException {     return in.readList(NodeStatsResponse::readNodeResponse). }
false;protected;2;4;;@Override protected void writeNodesTo(StreamOutput out, List<NodeStatsResponse> nodes) throws IOException {     out.writeStreamableList(nodes). }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startArray("stats").     for (NodeStatsResponse node : getNodes()) {         node.toXContent(builder, params).     }     builder.endArray().     return builder. }
false;public;0;3;;public Counters getStats() {     return stats. }
false;public;1;3;;public void setStats(Counters stats) {     this.stats = stats. }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     if (in.readBoolean()) {         stats = Counters.read(in).     } }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(stats != null).     if (stats != null) {         stats.writeTo(out).     } }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (stats != null && stats.hasCounters()) {         builder.field("stats", stats.toNestedMap()).     }     builder.endObject().     return builder. }
false;static;1;5;;static SqlStatsResponse.NodeStatsResponse readNodeResponse(StreamInput in) throws IOException {     SqlStatsResponse.NodeStatsResponse node = new SqlStatsResponse.NodeStatsResponse().     node.readFrom(in).     return node. }
