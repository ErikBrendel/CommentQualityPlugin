commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;13;;@Override protected TypeResolution resolveType() {     if (!childrenResolved()) {         return new TypeResolution("Unresolved children").     }     TypeResolution resolution = isStringAndExact(left(), functionName(), ParamOrdinal.FIRST).     if (resolution.unresolved()) {         return resolution.     }     return isStringAndExact(right(), functionName(), ParamOrdinal.SECOND). }
false;protected;0;4;;@Override protected Pipe makePipe() {     return new ConcatFunctionPipe(source(), this, Expressions.pipe(left()), Expressions.pipe(right())). }
false;public;0;4;;@Override public Nullability nullable() {     return Nullability.FALSE. }
false;public;0;4;;@Override public boolean foldable() {     return left().foldable() && right().foldable(). }
false;public;0;4;;@Override public Object fold() {     return process(left().fold(), right().fold()). }
false;protected;2;4;;@Override protected Concat replaceChildren(Expression newLeft, Expression newRight) {     return new Concat(source(), newLeft, newRight). }
false;protected;0;4;;@Override protected NodeInfo<? extends Expression> info() {     return NodeInfo.create(this, Concat::new, left(), right()). }
false;public;1;6;;@Override public ScriptTemplate scriptWithField(FieldAttribute field) {     return new ScriptTemplate(processScript("doc[{}].value"), paramsBuilder().variable(field.exactAttribute().name()).build(), dataType()). }
false;public;0;4;;@Override public DataType dataType() {     return DataType.KEYWORD. }
