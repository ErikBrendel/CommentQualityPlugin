commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;1;// overridable by tests ;// overridable by tests protected XPackLicenseState getLicenseState() {     return XPackPlugin.getSharedLicenseState(). }
false;public;9;8;;@Override public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool, ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry, Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry) {     return createComponents(client, clusterService.getClusterName().value(), namedWriteableRegistry). }
true;;3;7;/**  * Create components used by the sql plugin.  */ ;/**  * Create components used by the sql plugin.  */ Collection<Object> createComponents(Client client, String clusterName, NamedWriteableRegistry namedWriteableRegistry) {     if (false == enabled) {         return emptyList().     }     IndexResolver indexResolver = new IndexResolver(client, clusterName).     return Arrays.asList(sqlLicenseChecker, indexResolver, new PlanExecutor(client, indexResolver, namedWriteableRegistry)). }
false;public;0;6;;@Override public Collection<Module> createGuiceModules() {     List<Module> modules = new ArrayList<>().     modules.add(b -> XPackPlugin.bindFeatureSet(b, SqlFeatureSet.class)).     return modules. }
false;public;7;15;;@Override public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings, IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver, Supplier<DiscoveryNodes> nodesInCluster) {     if (false == enabled) {         return emptyList().     }     return Arrays.asList(new RestSqlQueryAction(settings, restController), new RestSqlTranslateAction(settings, restController), new RestSqlClearCursorAction(settings, restController), new RestSqlStatsAction(settings, restController)). }
false;public;0;11;;@Override public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {     if (false == enabled) {         return emptyList().     }     return Arrays.asList(new ActionHandler<>(SqlQueryAction.INSTANCE, TransportSqlQueryAction.class), new ActionHandler<>(SqlTranslateAction.INSTANCE, TransportSqlTranslateAction.class), new ActionHandler<>(SqlClearCursorAction.INSTANCE, TransportSqlClearCursorAction.class), new ActionHandler<>(SqlStatsAction.INSTANCE, TransportSqlStatsAction.class)). }
