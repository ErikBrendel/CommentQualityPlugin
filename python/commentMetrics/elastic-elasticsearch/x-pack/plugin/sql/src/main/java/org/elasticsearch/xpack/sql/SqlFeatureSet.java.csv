commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String name() {     return XPackField.SQL. }
false;public;0;4;;@Override public String description() {     return "SQL access to Elasticsearch". }
false;public;0;4;;@Override public boolean available() {     return licenseState != null && licenseState.isSqlAllowed(). }
false;public;0;4;;@Override public boolean enabled() {     return enabled. }
false;public;0;4;;@Override public Map<String, Object> nativeCodeInfo() {     return null. }
false;public;1;18;;@Override public void usage(ActionListener<XPackFeatureSet.Usage> listener) {     if (enabled) {         SqlStatsRequest request = new SqlStatsRequest().         request.includeStats(true).         client.execute(SqlStatsAction.INSTANCE, request, ActionListener.wrap(r -> {             List<Counters> countersPerNode = r.getNodes().stream().map(SqlStatsResponse.NodeStatsResponse::getStats).filter(Objects::nonNull).collect(Collectors.toList()).             Counters mergedCounters = Counters.merge(countersPerNode).             listener.onResponse(new SqlFeatureSetUsage(available(), enabled(), mergedCounters.toNestedMap())).         }, listener::onFailure)).     } else {         listener.onResponse(new SqlFeatureSetUsage(available(), enabled(), Collections.emptyMap())).     } }
