commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;4;;public static Boolean eq(Object l, Object r) {     Integer i = compare(l, r).     return i == null ? null : i.intValue() == 0. }
false;public,static;2;7;;public static boolean nulleq(Object l, Object r) {     if (l == null && r == null) {         return true.     }     Integer i = compare(l, r).     return i == null ? false : i.intValue() == 0. }
false;static;2;4;;static Boolean neq(Object l, Object r) {     Integer i = compare(l, r).     return i == null ? null : i.intValue() != 0. }
false;public,static;2;4;;public static Boolean lt(Object l, Object r) {     Integer i = compare(l, r).     return i == null ? null : i.intValue() < 0. }
false;static;2;4;;static Boolean lte(Object l, Object r) {     Integer i = compare(l, r).     return i == null ? null : i.intValue() <= 0. }
false;public,static;2;4;;public static Boolean gt(Object l, Object r) {     Integer i = compare(l, r).     return i == null ? null : i.intValue() > 0. }
false;static;2;4;;static Boolean gte(Object l, Object r) {     Integer i = compare(l, r).     return i == null ? null : i.intValue() >= 0. }
false;static;2;3;;static Boolean in(Object l, Set<Object> r) {     return r.contains(l). }
true;static;2;22;/**  * Compares two expression arguments (typically Numbers), if possible.  * Otherwise returns null (the arguments are not comparable or at least  * one of them is null).  */ ;/**  * Compares two expression arguments (typically Numbers), if possible.  * Otherwise returns null (the arguments are not comparable or at least  * one of them is null).  */ @SuppressWarnings({ "rawtypes", "unchecked" }) static Integer compare(Object l, Object r) {     if (l == null || r == null) {         return null.     }     // typical number comparison     if (l instanceof Number && r instanceof Number) {         return compare((Number) l, (Number) r).     }     if (l instanceof Comparable && r instanceof Comparable) {         try {             return Integer.valueOf(((Comparable) l).compareTo(r)).         } catch (ClassCastException cce) {             // fall back to null             return null.         }     }     return null. }
false;private,static;2;13;;private static Integer compare(Number l, Number r) {     if (l instanceof Double || r instanceof Double) {         return Double.compare(l.doubleValue(), r.doubleValue()).     }     if (l instanceof Float || r instanceof Float) {         return Float.compare(l.floatValue(), r.floatValue()).     }     if (l instanceof Long || r instanceof Long) {         return Long.compare(l.longValue(), r.longValue()).     }     return Integer.valueOf(Integer.compare(l.intValue(), r.intValue())). }
