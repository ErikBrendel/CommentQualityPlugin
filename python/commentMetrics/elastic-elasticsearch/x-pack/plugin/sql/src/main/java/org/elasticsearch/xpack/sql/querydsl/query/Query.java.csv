commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Location in the source statement.  */ ;/**  * Location in the source statement.  */ public Source source() {     return source. }
true;public,abstract;2;1;/**  * Does this query contain a particular nested field?  */ ;/**  * Does this query contain a particular nested field?  */ public abstract boolean containsNestedField(String path, String field).
true;public,abstract;4;1;/**  * Rewrite this query to one that contains the specified nested field.  * <p>  * Used to make sure that we fetch nested fields even if they aren't  * explicitly part of the query.  * @return a new query if we could add the nested field, the same query  *      instance otherwise  */ ;/**  * Rewrite this query to one that contains the specified nested field.  * <p>  * Used to make sure that we fetch nested fields even if they aren't  * explicitly part of the query.  * @return a new query if we could add the nested field, the same query  *      instance otherwise  */ public abstract Query addNestedField(String path, String field, String format, boolean hasDocValues).
true;public,abstract;1;1;/**  * Attach the one and only one matching nested query's filter to this  * sort.  */ ;/**  * Attach the one and only one matching nested query's filter to this  * sort.  */ public abstract void enrichNestedSort(NestedSortBuilder sort).
true;public,abstract;0;1;/**  * Convert to an Elasticsearch {@link QueryBuilder} all set up to execute  * the query.  */ ;/**  * Convert to an Elasticsearch {@link QueryBuilder} all set up to execute  * the query.  */ public abstract QueryBuilder asBuilder().
true;protected,abstract;0;1;/**  * Used by {@link Query#toString()} to produce a pretty string.  */ ;/**  * Used by {@link Query#toString()} to produce a pretty string.  */ protected abstract String innerToString().
false;public;1;8;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     Query other = (Query) obj.     return source.equals(other.source). }
false;public;0;4;;@Override public int hashCode() {     return source.hashCode(). }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + source + "[" + innerToString() + "]". }
