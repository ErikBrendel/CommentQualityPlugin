commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(processor).     out.writeOptionalString(hitName). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;0;3;;public Processor processor() {     return processor. }
false;public;1;3;;public Object extract(Object input) {     return processor.process(input). }
false;public;1;4;;@Override public Object extract(Bucket bucket) {     return processor.process(bucket). }
false;public;1;4;;@Override public Object extract(SearchHit hit) {     return processor.process(hit). }
false;public;0;4;;@Override public String hitName() {     return hitName. }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     ComputingExtractor other = (ComputingExtractor) obj.     return Objects.equals(processor, other.processor) && Objects.equals(hitName, other.hitName). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(processor, hitName). }
false;public;0;4;;@Override public String toString() {     return processor.toString(). }
