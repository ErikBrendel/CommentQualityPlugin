commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int hashCode() {     return attr.semanticHash(). }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (obj instanceof AttributeWrapper) {         AttributeWrapper aw = (AttributeWrapper) obj.         return attr.semanticEquals(aw.attr).     }     return false. }
false;public;0;4;;@Override public String toString() {     return attr.toString(). }
false;public;0;4;;@Override public boolean hasNext() {     return i.hasNext(). }
false;public;0;4;;@Override public U next() {     return unwrap(i.next()). }
false;public;0;16;;@Override public Iterator<U> iterator() {     return new Iterator<U>() {          final Iterator<W> i = set.iterator().          @Override         public boolean hasNext() {             return i.hasNext().         }          @Override         public U next() {             return unwrap(i.next()).         }     }. }
false;protected,abstract;1;1;;protected abstract U unwrap(W next).
false;public;0;4;;@Override public Stream<U> stream() {     return set.stream().map(this::unwrap). }
false;public;0;4;;@Override public Stream<U> parallelStream() {     return set.parallelStream().map(this::unwrap). }
false;public;0;4;;@Override public int size() {     return set.size(). }
false;public;1;4;;@Override public boolean equals(Object o) {     return set.equals(o). }
false;public;0;4;;@Override public int hashCode() {     return set.hashCode(). }
false;public;0;8;;@Override public Object[] toArray() {     Object[] array = set.toArray().     for (int i = 0. i < array.length. i++) {         array[i] = ((AttributeWrapper) array[i]).attr.     }     return array. }
false;public;1;18;;@Override @SuppressWarnings("unchecked") public <A> A[] toArray(A[] a) {     // collection is immutable so use that to our advantage     if (a.length < size()) {         a = (A[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size()).     }     int i = 0.     Object[] result = a.     for (U u : this) {         result[i++] = u.     }     // array larger than size, mark the ending element as null     if (a.length > size()) {         a[size()] = null.     }     return a. }
false;public;0;4;;@Override public String toString() {     return set.toString(). }
false;public,static,final;0;4;;@SuppressWarnings("unchecked") public static final <E> AttributeMap<E> emptyAttributeMap() {     return EMPTY. }
false;;2;3;;void add(Attribute key, E value) {     delegate.put(new AttributeWrapper(key), value). }
true;;1;3;// a set from a collection of sets without (too much) copying ;// a set from a collection of sets without (too much) copying void addAll(AttributeMap<E> other) {     delegate.putAll(other.delegate). }
false;public;1;7;;public AttributeMap<E> combine(AttributeMap<E> other) {     AttributeMap<E> combine = new AttributeMap<>().     combine.addAll(this).     combine.addAll(other).     return combine. }
false;public;1;10;;public AttributeMap<E> subtract(AttributeMap<E> other) {     AttributeMap<E> diff = new AttributeMap<>().     for (Entry<AttributeWrapper, E> entry : this.delegate.entrySet()) {         if (!other.delegate.containsKey(entry.getKey())) {             diff.delegate.put(entry.getKey(), entry.getValue()).         }     }     return diff. }
false;public;1;13;;public AttributeMap<E> intersect(AttributeMap<E> other) {     AttributeMap<E> smaller = (other.size() > size() ? this : other).     AttributeMap<E> larger = (smaller == this ? other : this).     AttributeMap<E> intersect = new AttributeMap<>().     for (Entry<AttributeWrapper, E> entry : smaller.delegate.entrySet()) {         if (larger.delegate.containsKey(entry.getKey())) {             intersect.delegate.put(entry.getKey(), entry.getValue()).         }     }     return intersect. }
false;public;1;12;;public boolean subsetOf(AttributeMap<E> other) {     if (this.size() > other.size()) {         return false.     }     for (AttributeWrapper aw : delegate.keySet()) {         if (!other.delegate.containsKey(aw)) {             return false.         }     }     return true. }
false;public;0;8;;public Set<String> attributeNames() {     Set<String> s = new LinkedHashSet<>(size()).     for (AttributeWrapper aw : delegate.keySet()) {         s.add(aw.attr.name()).     }     return s. }
false;public;0;4;;@Override public int size() {     return delegate.size(). }
false;public;0;4;;@Override public boolean isEmpty() {     return delegate.isEmpty(). }
false;public;1;7;;@Override public boolean containsKey(Object key) {     if (key instanceof NamedExpression) {         return delegate.keySet().contains(new AttributeWrapper(((NamedExpression) key).toAttribute())).     }     return false. }
false;public;1;4;;@Override public boolean containsValue(Object value) {     return delegate.values().contains(value). }
false;public;1;7;;@Override public E get(Object key) {     if (key instanceof NamedExpression) {         return delegate.get(new AttributeWrapper(((NamedExpression) key).toAttribute())).     }     return null. }
false;public;2;7;;@Override public E getOrDefault(Object key, E defaultValue) {     E e.     return (((e = get(key)) != null) || containsKey(key)) ? e : defaultValue. }
false;public;2;4;;@Override public E put(Attribute key, E value) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public E remove(Object key) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void putAll(Map<? extends Attribute, ? extends E> m) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public void clear() {     throw new UnsupportedOperationException(). }
false;protected;1;4;;@Override protected Attribute unwrap(AttributeWrapper next) {     return next.attr. }
false;public;0;12;;@Override public Set<Attribute> keySet() {     if (keySet == null) {         keySet = new UnwrappingSet<AttributeWrapper, Attribute>(delegate.keySet()) {              @Override             protected Attribute unwrap(AttributeWrapper next) {                 return next.attr.             }         }.     }     return keySet. }
false;public;0;7;;@Override public Collection<E> values() {     if (values == null) {         values = unmodifiableCollection(delegate.values()).     }     return values. }
false;public;0;4;;@Override public Attribute getKey() {     return next.getKey().attr. }
false;public;0;4;;@Override public E getValue() {     return next.getValue(). }
false;public;1;4;;@Override public E setValue(E value) {     throw new UnsupportedOperationException(). }
false;protected;1;19;;@Override protected Entry<Attribute, E> unwrap(final Entry<AttributeWrapper, E> next) {     return new Entry<Attribute, E>() {          @Override         public Attribute getKey() {             return next.getKey().attr.         }          @Override         public E getValue() {             return next.getValue().         }          @Override         public E setValue(E value) {             throw new UnsupportedOperationException().         }     }. }
false;public;0;27;;@Override public Set<Entry<Attribute, E>> entrySet() {     if (entrySet == null) {         entrySet = new UnwrappingSet<Entry<AttributeWrapper, E>, Entry<Attribute, E>>(delegate.entrySet()) {              @Override             protected Entry<Attribute, E> unwrap(final Entry<AttributeWrapper, E> next) {                 return new Entry<Attribute, E>() {                      @Override                     public Attribute getKey() {                         return next.getKey().attr.                     }                      @Override                     public E getValue() {                         return next.getValue().                     }                      @Override                     public E setValue(E value) {                         throw new UnsupportedOperationException().                     }                 }.             }         }.     }     return entrySet. }
false;public;1;4;;@Override public void forEach(BiConsumer<? super Attribute, ? super E> action) {     delegate.forEach((k, v) -> action.accept(k.attr, v)). }
false;public;0;4;;@Override public int hashCode() {     return delegate.hashCode(). }
false;public;1;7;;@Override public boolean equals(Object obj) {     if (obj instanceof AttributeMap<?>) {         obj = ((AttributeMap<?>) obj).delegate.     }     return delegate.equals(obj). }
false;public;0;4;;@Override public String toString() {     return delegate.toString(). }
