commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@SuppressWarnings("unchecked") public static <T extends Expression> ExpressionSet<T> emptySet() {     return (ExpressionSet<T>) EMPTY. }
true;public;1;3;// Returns the equivalent expression (if already exists in the set) or null if none is found ;// Returns the equivalent expression (if already exists in the set) or null if none is found public E get(Expression e) {     return map.get(e.canonical()). }
false;public;0;4;;@Override public int size() {     return map.size(). }
false;public;0;4;;@Override public boolean isEmpty() {     return map.isEmpty(). }
false;public;1;7;;@Override public boolean contains(Object o) {     if (o instanceof Expression) {         return map.containsKey(((Expression) o).canonical()).     }     return false. }
false;public;1;9;;@Override public boolean containsAll(Collection<?> c) {     for (Object o : c) {         if (!contains(o)) {             return false.         }     }     return true. }
false;public;0;4;;@Override public Iterator<E> iterator() {     return map.values().iterator(). }
false;public;1;4;;@Override public boolean add(E e) {     return map.putIfAbsent(e.canonical(), e) == null. }
false;public;1;8;;@Override public boolean addAll(Collection<? extends E> c) {     boolean result = true.     for (E o : c) {         result &= add(o).     }     return result. }
false;public;1;24;;@Override public boolean retainAll(Collection<?> c) {     boolean modified = false.     Iterator<Expression> keys = map.keySet().iterator().     while (keys.hasNext()) {         Expression key = keys.next().         boolean found = false.         for (Object o : c) {             if (o instanceof Expression) {                 o = ((Expression) o).canonical().             }             if (key.equals(o)) {                 found = true.                 break.             }         }         if (!found) {             keys.remove().         }     }     return modified. }
false;public;1;7;;@Override public boolean remove(Object o) {     if (o instanceof Expression) {         return map.remove(((Expression) o).canonical()) != null.     }     return false. }
false;public;1;8;;@Override public boolean removeAll(Collection<?> c) {     boolean modified = false.     for (Object o : c) {         modified |= remove(o).     }     return modified. }
false;public;0;4;;@Override public void clear() {     map.clear(). }
false;public;0;4;;@Override public Object[] toArray() {     return map.values().toArray(). }
false;public;1;4;;@Override public <T> T[] toArray(T[] a) {     return map.values().toArray(a). }
false;public;0;4;;@Override public String toString() {     return map.toString(). }
