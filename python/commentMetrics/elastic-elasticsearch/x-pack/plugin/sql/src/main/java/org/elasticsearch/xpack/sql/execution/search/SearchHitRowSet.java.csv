commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected boolean isLimitReached() {     return cursor == Cursor.EMPTY. }
false;protected;1;17;;@Override protected Object extractValue(HitExtractor e) {     int extractorLevel = e.hitName() == null ? 0 : 1.     SearchHit hit = null.     SearchHit[] sh = hits.     for (int lvl = 0. lvl <= extractorLevel. lvl++) {         // TODO: add support for multi-nested doc         if (hit != null) {             SearchHits innerHits = hit.getInnerHits().get(innerHit).             sh = innerHits == null ? SearchHits.EMPTY : innerHits.getHits().         }         hit = sh[indexPerLevel[lvl]].     }     return e.extract(hit). }
false;protected;0;4;;@Override protected boolean doHasCurrent() {     return row < size. }
false;protected;0;33;;@Override protected boolean doNext() {     if (row < size - 1) {         row++.         // increment last row         indexPerLevel[indexPerLevel.length - 1]++.         // then check size         SearchHit[] sh = hits.         for (int lvl = 0. lvl < indexPerLevel.length. lvl++) {             if (indexPerLevel[lvl] == sh.length) {                 // reset the current branch                 indexPerLevel[lvl] = 0.                 // bump the parent - if it's too big it, the loop will restart again from that position                 indexPerLevel[lvl - 1]++.                 // restart the loop                 lvl = 0.                 sh = hits.             } else {                 SearchHit h = sh[indexPerLevel[lvl]].                 // TODO: improve this for multi-nested responses                 String path = lvl == 0 ? innerHit : null.                 if (path != null) {                     SearchHits innerHits = h.getInnerHits().get(path).                     sh = innerHits == null ? SearchHits.EMPTY : innerHits.getHits().                 }             }         }         return true.     }     return false. }
false;protected;0;5;;@Override protected void doReset() {     row = 0.     Arrays.fill(indexPerLevel, 0). }
false;public;0;4;;@Override public int size() {     return size. }
false;public;0;4;;@Override public Cursor nextPageCursor() {     return cursor. }
