commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<Join> info() {     return NodeInfo.create(this, Join::new, left(), right(), type, condition). }
false;public;1;7;;@Override public LogicalPlan replaceChildren(List<LogicalPlan> newChildren) {     if (newChildren.size() != 2) {         throw new IllegalArgumentException("expected [2] children but received [" + newChildren.size() + "]").     }     return new Join(source(), newChildren.get(0), newChildren.get(1), type, condition). }
false;public;0;3;;public JoinType type() {     return type. }
false;public;0;3;;public Expression condition() {     return condition. }
false;public;0;17;;@Override public List<Attribute> output() {     switch(type) {         case LEFT:             // right side can be null             return combine(left().output(), makeNullable(right().output())).         case RIGHT:             // left side can be null             return combine(makeNullable(left().output()), right().output()).         case FULL:             // both sides can be null             return combine(makeNullable(left().output()), makeNullable(right().output())).         // INNER         default:             return combine(left().output(), right().output()).     } }
false;private,static;1;5;;private static List<Attribute> makeNullable(List<Attribute> output) {     return output.stream().map(a -> a.withNullability(Nullability.TRUE)).collect(toList()). }
false;public;0;4;;@Override public boolean expressionsResolved() {     return condition == null || condition.resolved(). }
false;public;0;3;;public boolean duplicatesResolved() {     return left().outputSet().intersect(right().outputSet()).isEmpty(). }
false;public;0;11;;@Override public boolean resolved() {     // - the condition (if present) is resolved to a boolean     return childrenResolved() && duplicatesResolved() && expressionsResolved() && (condition == null || DataType.BOOLEAN == condition.dataType()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(type, condition, left(), right()). }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     Join other = (Join) obj.     return Objects.equals(type, other.type) && Objects.equals(condition, other.condition) && Objects.equals(left(), other.left()) && Objects.equals(right(), other.right()). }
