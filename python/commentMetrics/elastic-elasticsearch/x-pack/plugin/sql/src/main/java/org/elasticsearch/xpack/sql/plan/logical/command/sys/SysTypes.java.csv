commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<SysTypes> info() {     return NodeInfo.create(this, SysTypes::new, type). }
false;public;0;24;;@Override public List<Attribute> output() {     return asList(keyword("TYPE_NAME"), field("DATA_TYPE", INTEGER), field("PRECISION", INTEGER), keyword("LITERAL_PREFIX"), keyword("LITERAL_SUFFIX"), keyword("CREATE_PARAMS"), field("NULLABLE", SHORT), field("CASE_SENSITIVE", BOOLEAN), field("SEARCHABLE", SHORT), field("UNSIGNED_ATTRIBUTE", BOOLEAN), field("FIXED_PREC_SCALE", BOOLEAN), field("AUTO_INCREMENT", BOOLEAN), keyword("LOCAL_TYPE_NAME"), field("MINIMUM_SCALE", SHORT), field("MAXIMUM_SCALE", SHORT), field("SQL_DATA_TYPE", INTEGER), field("SQL_DATETIME_SUB", INTEGER), field("NUM_PREC_RADIX", INTEGER), // ODBC     field("INTERVAL_PRECISION", INTEGER)). }
false;public,final;2;42;;@Override public final void execute(SqlSession session, ActionListener<SchemaRowSet> listener) {     Stream<DataType> values = Stream.of(DataType.values()).     if (type.intValue() != 0) {         values = values.filter(t -> type.equals(t.sqlType.getVendorTypeNumber())).     }     List<List<?>> rows = values.sorted(Comparator.comparing((DataType t) -> t.sqlType.getVendorTypeNumber()).thenComparing(DataType::sqlName)).map(t -> asList(t.toString(), t.sqlType.getVendorTypeNumber(), // https://docs.microsoft.com/en-us/sql/odbc/reference/appendixes/column-size?view=sql-server-2017     t.defaultPrecision, "'", "'", null, // don't be specific on nullable     DatabaseMetaData.typeNullableUnknown, // all strings are case-sensitive     t.isString(), // everything is searchable,     DatabaseMetaData.typeSearchable, // only numerics are signed     !t.isSigned(), // no fixed precision scale SQL_FALSE     Boolean.FALSE, // not auto-incremented     Boolean.FALSE, null, DataTypes.metaSqlMinimumScale(t), DataTypes.metaSqlMaximumScale(t), // SQL_DATA_TYPE - ODBC wants this to be not null     DataTypes.metaSqlDataType(t), DataTypes.metaSqlDateTimeSub(t), // Radix     DataTypes.metaSqlRadix(t), null)).collect(toList()).     listener.onResponse(Rows.of(output(), rows)). }
false;public;0;4;;@Override public int hashCode() {     return type.hashCode(). }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     return type.equals(((SysTypes) obj).type). }
