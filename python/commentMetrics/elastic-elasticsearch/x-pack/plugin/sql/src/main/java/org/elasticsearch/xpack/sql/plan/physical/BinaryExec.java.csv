commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;7;;@Override public final BinaryExec replaceChildren(List<PhysicalPlan> newChildren) {     if (newChildren.size() != 2) {         throw new IllegalArgumentException("expected [2] children but received [" + newChildren.size() + "]").     }     return replaceChildren(newChildren.get(0), newChildren.get(1)). }
false;protected,abstract;2;1;;protected abstract BinaryExec replaceChildren(PhysicalPlan newLeft, PhysicalPlan newRight).
false;public;0;3;;public PhysicalPlan left() {     return left. }
false;public;0;3;;public PhysicalPlan right() {     return right. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(left, right). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     BinaryExec other = (BinaryExec) obj.     return Objects.equals(left, other.left) && Objects.equals(right, other.right). }
