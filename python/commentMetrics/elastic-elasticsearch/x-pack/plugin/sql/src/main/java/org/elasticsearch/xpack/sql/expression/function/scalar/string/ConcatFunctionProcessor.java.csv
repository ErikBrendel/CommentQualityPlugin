commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public Object process(Object input) {     Object l = left().process(input).     checkParameter(l).     Object r = right().process(input).     checkParameter(r).     return doProcess(l, r). }
false;protected;2;4;;@Override protected Object doProcess(Object left, Object right) {     return process(left, right). }
true;public,static;2;19;/**  * Used in Painless scripting  */ ;/**  * Used in Painless scripting  */ public static Object process(Object source1, Object source2) {     if (source1 == null && source2 == null) {         return StringUtils.EMPTY.     }     if (source1 == null) {         return source2.     }     if (source2 == null) {         return source1.     }     if (!(source1 instanceof String || source1 instanceof Character)) {         throw new SqlIllegalArgumentException("A string/char is required. received [{}]", source1).     }     if (!(source2 instanceof String || source2 instanceof Character)) {         throw new SqlIllegalArgumentException("A string/char is required. received [{}]", source2).     }     return source1.toString().concat(source2.toString()). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ConcatFunctionProcessor other = (ConcatFunctionProcessor) obj.     return Objects.equals(left(), other.left()) && Objects.equals(right(), other.right()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(left(), right()). }
false;protected;1;3;;@Override protected void doWrite(StreamOutput out) throws IOException { }
