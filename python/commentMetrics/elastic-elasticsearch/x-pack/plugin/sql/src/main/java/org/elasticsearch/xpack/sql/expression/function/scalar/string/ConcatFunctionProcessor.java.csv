# id;timestamp;commentText;codeText;commentWords;codeWords
ConcatFunctionProcessor -> public static Object doProcessInScripts(Object source1, Object source2);1533143718;Used in Painless scripting;public static Object doProcessInScripts(Object source1, Object source2) {_        if (source1 == null) {_            return source2__        }_        if (source2 == null) {_            return source1__        }_        if (!(source1 instanceof String || source1 instanceof Character)) {_            throw new SqlIllegalArgumentException("A string/char is required_ received [{}]", source1)__        }_        if (!(source2 instanceof String || source2 instanceof Character)) {_            throw new SqlIllegalArgumentException("A string/char is required_ received [{}]", source2)__        }__        return source1.toString().concat(source2.toString())__    };used,in,painless,scripting;public,static,object,do,process,in,scripts,object,source1,object,source2,if,source1,null,return,source2,if,source2,null,return,source1,if,source1,instanceof,string,source1,instanceof,character,throw,new,sql,illegal,argument,exception,a,string,char,is,required,received,source1,if,source2,instanceof,string,source2,instanceof,character,throw,new,sql,illegal,argument,exception,a,string,char,is,required,received,source2,return,source1,to,string,concat,source2,to,string
ConcatFunctionProcessor -> public static Object doProcessInScripts(Object source1, Object source2);1538170812;Used in Painless scripting;public static Object doProcessInScripts(Object source1, Object source2) {_        if (source1 == null) {_            return source2__        }_        if (source2 == null) {_            return source1__        }_        if (!(source1 instanceof String || source1 instanceof Character)) {_            throw new SqlIllegalArgumentException("A string/char is required_ received [{}]", source1)__        }_        if (!(source2 instanceof String || source2 instanceof Character)) {_            throw new SqlIllegalArgumentException("A string/char is required_ received [{}]", source2)__        }__        return source1.toString().concat(source2.toString())__    };used,in,painless,scripting;public,static,object,do,process,in,scripts,object,source1,object,source2,if,source1,null,return,source2,if,source2,null,return,source1,if,source1,instanceof,string,source1,instanceof,character,throw,new,sql,illegal,argument,exception,a,string,char,is,required,received,source1,if,source2,instanceof,string,source2,instanceof,character,throw,new,sql,illegal,argument,exception,a,string,char,is,required,received,source2,return,source1,to,string,concat,source2,to,string
