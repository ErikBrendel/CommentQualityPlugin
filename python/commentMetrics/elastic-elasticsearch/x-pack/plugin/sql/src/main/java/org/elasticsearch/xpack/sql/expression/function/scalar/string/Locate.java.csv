commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;18;;@Override protected TypeResolution resolveType() {     if (!childrenResolved()) {         return new TypeResolution("Unresolved children").     }     TypeResolution patternResolution = isStringAndExact(pattern, sourceText(), ParamOrdinal.FIRST).     if (patternResolution.unresolved()) {         return patternResolution.     }     TypeResolution sourceResolution = isStringAndExact(source, sourceText(), ParamOrdinal.SECOND).     if (sourceResolution.unresolved()) {         return sourceResolution.     }     return start == null ? TypeResolution.TYPE_RESOLVED : isNumeric(start, sourceText(), ParamOrdinal.THIRD). }
false;protected;0;7;;@Override protected Pipe makePipe() {     return new LocateFunctionPipe(source(), this, Expressions.pipe(pattern), Expressions.pipe(source), start == null ? null : Expressions.pipe(start)). }
false;protected;0;4;;@Override protected NodeInfo<? extends Expression> info() {     return NodeInfo.create(this, Locate::new, pattern, source, start). }
false;public;0;6;;@Override public boolean foldable() {     return pattern.foldable() && source.foldable() && (start == null || start.foldable()). }
false;public;0;4;;@Override public Object fold() {     return doProcess(pattern.fold(), source.fold(), (start == null ? null : start.fold())). }
false;public;0;8;;@Override public ScriptTemplate asScript() {     ScriptTemplate patternScript = asScript(pattern).     ScriptTemplate sourceScript = asScript(source).     ScriptTemplate startScript = start == null ? null : asScript(start).     return asScriptFrom(patternScript, sourceScript, startScript). }
false;private;3;21;;private ScriptTemplate asScriptFrom(ScriptTemplate patternScript, ScriptTemplate sourceScript, ScriptTemplate startScript) {     if (start == null) {         return new ScriptTemplate(format(Locale.ROOT, formatTemplate("{sql}.%s(%s,%s)"), "locate", patternScript.template(), sourceScript.template()), paramsBuilder().script(patternScript.params()).script(sourceScript.params()).build(), dataType()).     }     // basically, transform the script to InternalSqlScriptUtils.[function_name](function_or_field1, function_or_field2,...)     return new ScriptTemplate(format(Locale.ROOT, formatTemplate("{sql}.%s(%s,%s,%s)"), "locate", patternScript.template(), sourceScript.template(), startScript.template()), paramsBuilder().script(patternScript.params()).script(sourceScript.params()).script(startScript.params()).build(), dataType()). }
false;public;1;6;;@Override public ScriptTemplate scriptWithField(FieldAttribute field) {     return new ScriptTemplate(processScript("doc[{}].value"), paramsBuilder().variable(field.exactAttribute().name()).build(), dataType()). }
false;public;0;4;;@Override public DataType dataType() {     return DataType.INTEGER. }
false;public;1;8;;@Override public Expression replaceChildren(List<Expression> newChildren) {     if (newChildren.size() != 3) {         throw new IllegalArgumentException("expected [3] children but received [" + newChildren.size() + "]").     }     return new Locate(source(), newChildren.get(0), newChildren.get(1), newChildren.get(2)). }
