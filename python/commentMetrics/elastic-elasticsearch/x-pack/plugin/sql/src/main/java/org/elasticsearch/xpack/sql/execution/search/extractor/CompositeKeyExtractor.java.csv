commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(key).     out.writeEnum(property).     if (zoneId == null) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         out.writeString(zoneId.getId()).     } }
false;;0;3;;String key() {     return key. }
false;;0;3;;Property property() {     return property. }
false;;0;3;;ZoneId zoneId() {     return zoneId. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;26;;@Override public Object extract(Bucket bucket) {     if (property == Property.COUNT) {         return bucket.getDocCount().     }     // get the composite value     Object m = bucket.getKey().     if (!(m instanceof Map)) {         throw new SqlIllegalArgumentException("Unexpected bucket returned: {}", m).     }     Object object = ((Map<?, ?>) m).get(key).     if (zoneId != null) {         if (object == null) {             return object.         } else if (object instanceof Long) {             object = DateUtils.asDateTime(((Long) object).longValue(), zoneId).         } else {             throw new SqlIllegalArgumentException("Invalid date key returned: {}", object).         }     }     return object. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(key, property, zoneId). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     CompositeKeyExtractor other = (CompositeKeyExtractor) obj.     return Objects.equals(key, other.key) && Objects.equals(property, other.property) && Objects.equals(zoneId, other.zoneId). }
false;public;0;4;;@Override public String toString() {     return "|" + key + "|". }
