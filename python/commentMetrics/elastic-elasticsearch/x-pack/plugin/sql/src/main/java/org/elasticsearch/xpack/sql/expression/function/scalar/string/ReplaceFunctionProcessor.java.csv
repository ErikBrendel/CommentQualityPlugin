commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;6;;@Override public final void writeTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(source).     out.writeNamedWriteable(pattern).     out.writeNamedWriteable(replacement). }
false;public;1;4;;@Override public Object process(Object input) {     return doProcess(source().process(input), pattern().process(input), replacement().process(input)). }
false;public,static;3;21;;public static Object doProcess(Object source, Object pattern, Object replacement) {     if (source == null) {         return null.     }     if (!(source instanceof String || source instanceof Character)) {         throw new SqlIllegalArgumentException("A string/char is required. received [{}]", source).     }     if (pattern == null || replacement == null) {         return source.     }     if (!(pattern instanceof String || pattern instanceof Character)) {         throw new SqlIllegalArgumentException("A string/char is required. received [{}]", pattern).     }     if (!(replacement instanceof String || replacement instanceof Character)) {         throw new SqlIllegalArgumentException("A string/char is required. received [{}]", replacement).     }     return Strings.replace(source instanceof Character ? source.toString() : (String) source, pattern instanceof Character ? pattern.toString() : (String) pattern, replacement instanceof Character ? replacement.toString() : (String) replacement). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ReplaceFunctionProcessor other = (ReplaceFunctionProcessor) obj.     return Objects.equals(source(), other.source()) && Objects.equals(pattern(), other.pattern()) && Objects.equals(replacement(), other.replacement()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(source(), pattern(), replacement()). }
false;public;0;3;;public Processor source() {     return source. }
false;public;0;3;;public Processor pattern() {     return pattern. }
false;public;0;3;;public Processor replacement() {     return replacement. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
