commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;Node<?> source() {     return source. }
false;;0;3;;String message() {     return message. }
false;public;0;4;;@Override public int hashCode() {     return source.hashCode(). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     Verifier.Failure other = (Verifier.Failure) obj.     return Objects.equals(source, other.source). }
false;private,static;2;3;;private static Failure fail(Node<?> source, String message) {     return new Failure(source, message). }
false;static;1;16;;static List<Failure> verifyMappingPlan(PhysicalPlan plan) {     List<Failure> failures = new ArrayList<>().     plan.forEachUp(p -> {         if (p instanceof UnplannedExec) {             failures.add(fail(p, "Unplanned item")).         }         p.forEachExpressionsUp(e -> {             if (e.childrenResolved() && !e.resolved()) {                 failures.add(fail(e, "Unresolved expression")).             }         }).     }).     return failures. }
false;static;1;16;;static List<Failure> verifyExecutingPlan(PhysicalPlan plan) {     List<Failure> failures = new ArrayList<>().     plan.forEachUp(p -> {         if (p instanceof Unexecutable) {             failures.add(fail(p, "Unexecutable item")).         }         p.forEachExpressionsUp(e -> {             if (e.childrenResolved() && !e.resolved()) {                 failures.add(fail(e, "Unresolved expression")).             }         }).     }).     return failures. }
