commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public boolean containsNestedField(String path, String field) {     return left.containsNestedField(path, field) || right.containsNestedField(path, field). }
false;public;4;9;;@Override public Query addNestedField(String path, String field, String format, boolean hasDocValues) {     Query rewrittenLeft = left.addNestedField(path, field, format, hasDocValues).     Query rewrittenRight = right.addNestedField(path, field, format, hasDocValues).     if (rewrittenLeft == left && rewrittenRight == right) {         return this.     }     return new BoolQuery(source(), isAnd, rewrittenLeft, rewrittenRight). }
false;public;1;5;;@Override public void enrichNestedSort(NestedSortBuilder sort) {     left.enrichNestedSort(sort).     right.enrichNestedSort(sort). }
false;public;0;12;;@Override public QueryBuilder asBuilder() {     BoolQueryBuilder boolQuery = boolQuery().     if (isAnd) {         boolQuery.must(left.asBuilder()).         boolQuery.must(right.asBuilder()).     } else {         boolQuery.should(left.asBuilder()).         boolQuery.should(right.asBuilder()).     }     return boolQuery. }
false;;0;3;;boolean isAnd() {     return isAnd. }
false;;0;3;;Query left() {     return left. }
false;;0;3;;Query right() {     return right. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), isAnd, left, right). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (false == super.equals(obj)) {         return false.     }     BoolQuery other = (BoolQuery) obj.     return isAnd == other.isAnd && left.equals(other.left) && right.equals(other.right). }
false;protected;0;4;;@Override protected String innerToString() {     return left + (isAnd ? " AND " : " OR ") + right. }
