commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Turns on returning the {@code _score} for documents.  */ ;/**  * Turns on returning the {@code _score} for documents.  */ public void trackScores() {     this.trackScores = true. }
true;public;1;3;/**  * Retrieve the requested field from the {@code _source} of the document  */ ;/**  * Retrieve the requested field from the {@code _source} of the document  */ public void addSourceField(String field) {     sourceFields.add(field). }
true;public;2;3;/**  * Retrieve the requested field from doc values (or fielddata) of the document  */ ;/**  * Retrieve the requested field from doc values (or fielddata) of the document  */ public void addDocField(String field, String format) {     docFields.add(new FieldAndFormat(field, format)). }
true;public;2;3;/**  * Return the given field as a script field with the supplied script  */ ;/**  * Return the given field as a script field with the supplied script  */ public void addScriptField(String name, Script script) {     scriptFields.put(name, script). }
true;public;1;8;/**  * Collect the necessary fields, modifying the {@code SearchSourceBuilder}  * to retrieve them from the document.  */ ;/**  * Collect the necessary fields, modifying the {@code SearchSourceBuilder}  * to retrieve them from the document.  */ public void build(SearchSourceBuilder sourceBuilder) {     sourceBuilder.trackScores(this.trackScores).     if (!sourceFields.isEmpty()) {         sourceBuilder.fetchSource(sourceFields.toArray(Strings.EMPTY_ARRAY), null).     }     docFields.forEach(field -> sourceBuilder.docValueField(field.field, field.format)).     scriptFields.forEach(sourceBuilder::scriptField). }
