commented;modifiers;parameterAmount;loc;comment;code
true;;0;14;// return vars and aggs in the declared order for binding them to the script ;// return vars and aggs in the declared order for binding them to the script List<String> asCodeNames() {     if (params.isEmpty()) {         return emptyList().     }     List<String> names = new ArrayList<>(params.size()).     int aggs = 0, vars = 0.     for (Param<?> p : params) {         names.add(p.prefix() + (p instanceof Agg ? aggs++ : vars++)).     }     return names. }
true;;0;13;// agg refs are returned separately to be provided as bucket_paths ;// return only the vars (as parameter for a script) // agg refs are returned separately to be provided as bucket_paths Map<String, Object> asParams() {     Map<String, Object> map = new LinkedHashMap<>(params.size()).     int count = 0.     for (Param<?> p : params) {         if (p instanceof Var) {             map.put(p.prefix() + count++, p.value()).         }     }     return map. }
true;;0;19;// return agg refs in a format suitable for bucket_paths ;// return agg refs in a format suitable for bucket_paths Map<String, String> asAggPaths() {     Map<String, String> map = new LinkedHashMap<>().     int aggs = 0.     for (Param<?> p : params) {         if (p instanceof Agg) {             Agg a = (Agg) p.             String s = a.aggProperty() != null ? a.aggProperty() : a.aggName().             map.put(p.prefix() + aggs++, s).         }         if (p instanceof Grouping) {             Grouping g = (Grouping) p.             map.put(p.prefix() + aggs++, g.groupName()).         }     }     return map. }
false;private,static;1;25;;private static List<Param<?>> flatten(List<Param<?>> params) {     List<Param<?>> flatten = emptyList().     if (!params.isEmpty()) {         flatten = new ArrayList<>().         for (Param<?> p : params) {             if (p instanceof Script) {                 flatten.addAll(flatten(((Script) p).value().params)).             } else if (p instanceof Agg) {                 flatten.add(p).             } else if (p instanceof Grouping) {                 flatten.add(p).             } else if (p instanceof Var) {                 flatten.add(p).             } else {                 throw new SqlIllegalArgumentException("Unsupported field {}", p).             }         }     }     return flatten. }
false;public;0;4;;@Override public String toString() {     return params.toString(). }
