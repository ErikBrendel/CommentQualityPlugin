commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Override public QueryBuilder asBuilder() {     final MultiMatchQueryBuilder queryBuilder = QueryBuilders.multiMatchQuery(query).     queryBuilder.fields(fields).     queryBuilder.analyzer(predicate.analyzer()).     options.forEach((k, v) -> {         if (BUILDER_APPLIERS.containsKey(k)) {             BUILDER_APPLIERS.get(k).accept(queryBuilder, v).         } else {             throw new IllegalArgumentException("illegal multi_match option [" + k + "]").         }     }).     return queryBuilder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(query, fields, predicate). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     MultiMatchQuery other = (MultiMatchQuery) obj.     return Objects.equals(query, other.query) && Objects.equals(fields, other.fields) && Objects.equals(predicate, other.predicate). }
false;protected;0;4;;@Override protected String innerToString() {     return fields + ":" + query. }
