commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<EsRelation> info() {     return NodeInfo.create(this, EsRelation::new, index). }
false;private,static;2;3;;private static List<Attribute> flatten(Source source, Map<String, EsField> mapping) {     return flatten(source, mapping, null). }
false;private,static;3;18;;private static List<Attribute> flatten(Source source, Map<String, EsField> mapping, FieldAttribute parent) {     List<Attribute> list = new ArrayList<>().     for (Entry<String, EsField> entry : mapping.entrySet()) {         String name = entry.getKey().         EsField t = entry.getValue().         if (t != null) {             FieldAttribute f = new FieldAttribute(source, parent, parent != null ? parent.name() + "." + name : name, t).             list.add(f).             // object or nested             if (t.getProperties().isEmpty() == false) {                 list.addAll(flatten(source, t.getProperties(), f)).             }         }     }     return list. }
false;public;0;3;;public EsIndex index() {     return index. }
false;public;0;4;;@Override public List<Attribute> output() {     return attrs. }
false;public;0;4;;@Override public boolean expressionsResolved() {     return true. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(index). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     EsRelation other = (EsRelation) obj.     return Objects.equals(index, other.index). }
false;private,static;1;25;;private static <E> String limitedToString(Collection<E> c) {     Iterator<E> it = c.iterator().     if (!it.hasNext()) {         return "[]".     }     // ..]     StringBuilder sb = new StringBuilder(TO_STRING_LIMIT + 4).     sb.append('[').     for (. . ) {         E e = it.next().         String next = e == c ? "(this Collection)" : String.valueOf(e).         if (next.length() + sb.length() > TO_STRING_LIMIT) {             sb.append(next.substring(0, Math.max(0, TO_STRING_LIMIT - sb.length()))).             sb.append('.').append('.').append(']').             return sb.toString().         } else {             sb.append(next).         }         if (!it.hasNext()) {             return sb.append(']').toString().         }         sb.append(',').append(' ').     } }
false;public;0;4;;@Override public String nodeString() {     return nodeName() + "[" + index + "]" + limitedToString(attrs). }
