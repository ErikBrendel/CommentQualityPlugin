commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<SubQueryAlias> info() {     return NodeInfo.create(this, SubQueryAlias::new, child(), alias). }
false;protected;1;4;;@Override protected SubQueryAlias replaceChild(LogicalPlan newChild) {     return new SubQueryAlias(source(), newChild, alias). }
false;public;0;3;;public String alias() {     return alias. }
false;public;0;8;;@Override public List<Attribute> output() {     return (alias == null ? child().output() : child().output().stream().map(e -> e.withQualifier(alias)).collect(toList())). }
false;public;0;4;;@Override public boolean expressionsResolved() {     return true. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(alias, super.hashCode()). }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (!super.equals(obj)) {         return false.     }     SubQueryAlias other = (SubQueryAlias) obj.     return Objects.equals(alias, other.alias). }
