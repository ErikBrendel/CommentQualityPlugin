commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;6;;@Override public final void writeTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(pattern).     out.writeNamedWriteable(source).     out.writeOptionalNamedWriteable(start). }
false;public;1;4;;@Override public Object process(Object input) {     return doProcess(pattern().process(input), source().process(input), start() == null ? null : start().process(input)). }
false;public,static;3;25;;public static Integer doProcess(Object pattern, Object source, Object start) {     if (source == null) {         return null.     }     if (!(source instanceof String || source instanceof Character)) {         throw new SqlIllegalArgumentException("A string/char is required. received [{}]", source).     }     if (pattern == null) {         return 0.     }     if (!(pattern instanceof String || pattern instanceof Character)) {         throw new SqlIllegalArgumentException("A string/char is required. received [{}]", pattern).     }     if (start != null && !(start instanceof Number)) {         throw new SqlIllegalArgumentException("A number is required. received [{}]", start).     }     String stringSource = source instanceof Character ? source.toString() : (String) source.     String stringPattern = pattern instanceof Character ? pattern.toString() : (String) pattern.     return Integer.valueOf(1 + (start != null ? stringSource.indexOf(stringPattern, ((Number) start).intValue() - 1) : stringSource.indexOf(stringPattern))). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     LocateFunctionProcessor other = (LocateFunctionProcessor) obj.     return Objects.equals(pattern(), other.pattern()) && Objects.equals(source(), other.source()) && Objects.equals(start(), other.start()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(pattern(), source(), start()). }
false;public;0;3;;public Processor pattern() {     return pattern. }
false;public;0;3;;public Processor source() {     return source. }
false;public;0;3;;public Processor start() {     return start. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
