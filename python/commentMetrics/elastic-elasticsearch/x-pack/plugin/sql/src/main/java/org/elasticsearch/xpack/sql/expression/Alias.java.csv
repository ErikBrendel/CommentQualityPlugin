commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<Alias> info() {     return NodeInfo.create(this, Alias::new, name(), qualifier, child, id(), synthetic()). }
false;public;1;7;;@Override public Expression replaceChildren(List<Expression> newChildren) {     if (newChildren.size() != 1) {         throw new IllegalArgumentException("expected [1] child but received [" + newChildren.size() + "]").     }     return new Alias(source(), name(), qualifier, newChildren.get(0), id(), synthetic()). }
false;public;0;3;;public Expression child() {     return child. }
false;public;0;3;;public String qualifier() {     return qualifier. }
false;public;0;3;;public String qualifiedName() {     return qualifier == null ? name() : qualifier + "." + name(). }
false;public;0;4;;@Override public Nullability nullable() {     return child.nullable(). }
false;public;0;4;;@Override public DataType dataType() {     return child.dataType(). }
false;public;0;7;;@Override public Attribute toAttribute() {     if (lazyAttribute == null) {         lazyAttribute = createAttribute().     }     return lazyAttribute. }
false;public;0;4;;@Override public ScriptTemplate asScript() {     throw new SqlIllegalArgumentException("Encountered a bug. an alias should never be scripted"). }
false;private;0;18;;private Attribute createAttribute() {     if (resolved()) {         Expression c = child().         Attribute attr = Expressions.attribute(c).         if (attr != null) {             return attr.clone(source(), name(), qualifier, child.nullable(), id(), synthetic()).         } else {             // TODO: WE need to fix this fake Field             return new FieldAttribute(source(), null, name(), new EsField(name(), child.dataType(), Collections.emptyMap(), true), qualifier, child.nullable(), id(), synthetic()).         }     }     return new UnresolvedAttribute(source(), name(), qualifier). }
false;public;0;4;;@Override public String toString() {     return child + " AS " + name() + "#" + id(). }
