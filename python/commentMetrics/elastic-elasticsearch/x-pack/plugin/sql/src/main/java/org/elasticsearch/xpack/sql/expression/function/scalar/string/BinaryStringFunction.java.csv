commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;0;1;/*      * the operation the binary function handles can receive one String argument, a number or String as second argument      * and it can return a number or a String. The BiFunction below is the base operation for the subsequent implementations.      * T is the second argument, R is the result of applying the operation.      */ ;/*      * the operation the binary function handles can receive one String argument, a number or String as second argument      * and it can return a number or a String. The BiFunction below is the base operation for the subsequent implementations.      * T is the second argument, R is the result of applying the operation.      */ protected abstract BiFunction<String, T, R> operation().
false;protected;0;13;;@Override protected TypeResolution resolveType() {     if (!childrenResolved()) {         return new TypeResolution("Unresolved children").     }     TypeResolution resolution = isStringAndExact(left(), sourceText(), ParamOrdinal.FIRST).     if (resolution.unresolved()) {         return resolution.     }     return resolveSecondParameterInputType(right()). }
false;protected,abstract;1;1;;protected abstract TypeResolution resolveSecondParameterInputType(Expression e).
false;public;0;6;;@Override public Object fold() {     @SuppressWarnings("unchecked")     T fold = (T) right().fold().     return operation().apply((String) left().fold(), fold). }
false;protected;0;4;;@Override protected String scriptMethodName() {     return operation().toString().toLowerCase(Locale.ROOT). }
false;public;1;6;;@Override public ScriptTemplate scriptWithField(FieldAttribute field) {     return new ScriptTemplate(processScript("doc[{}].value"), paramsBuilder().variable(field.exactAttribute().name()).build(), dataType()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(left(), right()). }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     BinaryStringFunction<?, ?> other = (BinaryStringFunction<?, ?>) obj.     return Objects.equals(other.left(), left()) && Objects.equals(other.right(), right()). }
