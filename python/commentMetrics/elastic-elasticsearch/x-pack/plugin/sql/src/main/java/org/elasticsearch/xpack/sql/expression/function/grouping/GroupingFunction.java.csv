commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Expression field() {     return field. }
false;public;0;3;;public List<Expression> parameters() {     return parameters. }
false;public;0;8;;@Override public GroupingFunctionAttribute toAttribute() {     if (lazyAttribute == null) {         // this is highly correlated with QueryFolder$FoldAggregate#addAggFunction (regarding the function name within the querydsl)         lazyAttribute = new GroupingFunctionAttribute(source(), name(), dataType(), id(), functionId()).     }     return lazyAttribute. }
false;protected;0;5;;@Override protected Pipe makePipe() {     // unresolved AggNameInput (should always get replaced by the folder)     return new AggNameInput(source(), this, name()). }
false;public;0;4;;@Override public ScriptTemplate asScript() {     throw new SqlIllegalArgumentException("Grouping functions cannot be scripted"). }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (false == super.equals(obj)) {         return false.     }     GroupingFunction other = (GroupingFunction) obj.     return Objects.equals(other.field(), field()) && Objects.equals(other.parameters(), parameters()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(field(), parameters()). }
