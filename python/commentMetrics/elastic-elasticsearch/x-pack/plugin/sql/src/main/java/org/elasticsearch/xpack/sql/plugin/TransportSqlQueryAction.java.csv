commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;5;;@Override protected void doExecute(Task task, SqlQueryRequest request, ActionListener<SqlQueryResponse> listener) {     sqlLicenseChecker.checkIfSqlAllowed(request.mode()).     operation(planExecutor, request, listener, username(securityContext), clusterName(clusterService)). }
true;public,static;5;16;/**  * Actual implementation of the action. Statically available to support embedded mode.  */ ;/**  * Actual implementation of the action. Statically available to support embedded mode.  */ public static void operation(PlanExecutor planExecutor, SqlQueryRequest request, ActionListener<SqlQueryResponse> listener, String username, String clusterName) {     // The configuration is always created however when dealing with the next page, only the timeouts are relevant     // the rest having default values (since the query is already created)     Configuration cfg = new Configuration(request.zoneId(), request.fetchSize(), request.requestTimeout(), request.pageTimeout(), request.filter(), request.mode(), request.clientId(), username, clusterName).     if (Strings.hasText(request.cursor()) == false) {         planExecutor.sql(cfg, request.query(), request.params(), wrap(rowSet -> listener.onResponse(createResponse(request, rowSet)), listener::onFailure)).     } else {         planExecutor.nextPage(cfg, Cursors.decodeFromString(request.cursor()), wrap(rowSet -> listener.onResponse(createResponse(request.mode(), request.columnar(), rowSet, null)), listener::onFailure)).     } }
false;static;2;12;;static SqlQueryResponse createResponse(SqlQueryRequest request, SchemaRowSet rowSet) {     List<ColumnInfo> columns = new ArrayList<>(rowSet.columnCount()).     for (Schema.Entry entry : rowSet.schema()) {         if (Mode.isDriver(request.mode())) {             columns.add(new ColumnInfo("", entry.name(), entry.type().typeName, entry.type().displaySize)).         } else {             columns.add(new ColumnInfo("", entry.name(), entry.type().typeName)).         }     }     columns = unmodifiableList(columns).     return createResponse(request.mode(), request.columnar(), rowSet, columns). }
false;static;4;15;;static SqlQueryResponse createResponse(Mode mode, boolean columnar, RowSet rowSet, List<ColumnInfo> columns) {     List<List<Object>> rows = new ArrayList<>().     rowSet.forEachRow(rowView -> {         List<Object> row = new ArrayList<>(rowView.columnCount()).         rowView.forEachColumn(row::add).         rows.add(unmodifiableList(row)).     }).     return new SqlQueryResponse(Cursors.encodeToString(Version.CURRENT, rowSet.nextPageCursor()), mode, columnar, columns, rows). }
