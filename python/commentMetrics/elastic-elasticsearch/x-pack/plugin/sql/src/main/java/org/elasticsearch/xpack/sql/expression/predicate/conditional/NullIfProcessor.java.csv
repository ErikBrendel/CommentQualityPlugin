commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(leftProcessor).     out.writeNamedWriteable(rightProcessor). }
false;public;1;6;;@Override public Object process(Object input) {     Object leftValue = leftProcessor.process(input).     Object rightValue = rightProcessor.process(input).     return apply(leftValue, rightValue). }
false;public,static;2;6;;public static Object apply(Object leftValue, Object rightValue) {     if (EQ.apply(leftValue, rightValue) == Boolean.TRUE) {         return null.     }     return leftValue. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     NullIfProcessor that = (NullIfProcessor) o.     return Objects.equals(leftProcessor, that.leftProcessor) && Objects.equals(rightProcessor, that.rightProcessor). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(leftProcessor, rightProcessor). }
