commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected NodeInfo<Not> info() {     return NodeInfo.create(this, Not::new, field()). }
false;protected;1;4;;@Override protected Not replaceChild(Expression newChild) {     return new Not(source(), newChild). }
false;protected;0;7;;@Override protected TypeResolution resolveType() {     if (DataType.BOOLEAN == field().dataType()) {         return TypeResolution.TYPE_RESOLVED.     }     return isBoolean(field(), sourceText(), ParamOrdinal.DEFAULT). }
false;public;0;4;;@Override public Object fold() {     return NotProcessor.INSTANCE.process(field().fold()). }
false;protected;0;4;;@Override protected Processor makeProcessor() {     return NotProcessor.INSTANCE. }
false;public;1;4;;@Override public String processScript(String script) {     return Scripts.formatTemplate(Scripts.SQL_SCRIPTS + ".not(" + script + ")"). }
false;protected;0;8;;@Override protected Expression canonicalize() {     Expression canonicalChild = field().canonical().     if (canonicalChild instanceof Negatable) {         return ((Negatable) canonicalChild).negate().     }     return this. }
false;public;0;4;;@Override public DataType dataType() {     return DataType.BOOLEAN. }
