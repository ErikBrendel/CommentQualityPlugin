commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;7;;@Override public final Pipe replaceChildren(List<Pipe> newChildren) {     if (newChildren.size() != 2) {         throw new IllegalArgumentException("expected [2] children but received [" + newChildren.size() + "]").     }     return replaceChildren(newChildren.get(0), newChildren.get(1)). }
false;public;0;3;;public Pipe left() {     return left. }
false;public;0;3;;public Pipe right() {     return right. }
false;public;0;4;;@Override public boolean supportedByAggsOnlyQuery() {     return left.supportedByAggsOnlyQuery() || right.supportedByAggsOnlyQuery(). }
false;public,final;1;9;;@Override public final Pipe resolveAttributes(AttributeResolver resolver) {     Pipe newLeft = left.resolveAttributes(resolver).     Pipe newRight = right.resolveAttributes(resolver).     if (newLeft == left && newRight == right) {         return this.     }     return replaceChildren(newLeft, newRight). }
true;protected,abstract;2;1;/**  * Build a copy of this object with new left and right children. Used by  * {@link #resolveAttributes(AttributeResolver)}.  */ ;/**  * Build a copy of this object with new left and right children. Used by  * {@link #resolveAttributes(AttributeResolver)}.  */ protected abstract BinaryPipe replaceChildren(Pipe left, Pipe right).
false;public;0;4;;@Override public boolean resolved() {     return left().resolved() && right().resolved(). }
false;public,final;1;5;;@Override public final void collectFields(SqlSourceBuilder sourceBuilder) {     left.collectFields(sourceBuilder).     right.collectFields(sourceBuilder). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(left(), right()). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     BinaryPipe other = (BinaryPipe) obj.     return Objects.equals(left(), other.left()) && Objects.equals(right(), other.right()). }
