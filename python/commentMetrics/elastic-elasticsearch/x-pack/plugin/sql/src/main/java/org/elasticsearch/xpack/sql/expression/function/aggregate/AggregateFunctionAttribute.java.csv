commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected NodeInfo<AggregateFunctionAttribute> info() {     return NodeInfo.create(this, AggregateFunctionAttribute::new, name(), dataType(), qualifier(), nullable(), id(), synthetic(), functionId(), innerId, propertyPath). }
false;public;0;3;;public ExpressionId innerId() {     return innerId != null ? innerId : id(). }
false;public;0;3;;public String propertyPath() {     return propertyPath. }
false;protected;0;4;;@Override protected Expression canonicalize() {     return new AggregateFunctionAttribute(source(), "<none>", dataType(), null, Nullability.TRUE, id(), false, "<none>", null, null). }
false;protected;6;7;;@Override protected Attribute clone(Source source, String name, String qualifier, Nullability nullability, ExpressionId id, boolean synthetic) {     // that is the functionId is actually derived from the expression id to easily track it across contexts     return new AggregateFunctionAttribute(source, name, dataType(), qualifier, nullability, id, synthetic, functionId(), innerId, propertyPath). }
false;public;2;4;;public AggregateFunctionAttribute withFunctionId(String functionId, String propertyPath) {     return new AggregateFunctionAttribute(source(), name(), dataType(), qualifier(), nullable(), id(), synthetic(), functionId, innerId, propertyPath). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), innerId, propertyPath). }
false;public;1;8;;@Override public boolean equals(Object obj) {     if (super.equals(obj)) {         AggregateFunctionAttribute other = (AggregateFunctionAttribute) obj.         return Objects.equals(innerId, other.innerId) && Objects.equals(propertyPath, other.propertyPath).     }     return false. }
false;protected;0;4;;@Override protected String label() {     return "a->" + innerId(). }
