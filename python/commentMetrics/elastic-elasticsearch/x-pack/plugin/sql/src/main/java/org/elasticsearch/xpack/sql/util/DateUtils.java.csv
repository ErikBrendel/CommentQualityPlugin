commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Creates an date for SQL DATE type from the millis since epoch.  */ ;/**  * Creates an date for SQL DATE type from the millis since epoch.  */ public static ZonedDateTime asDateOnly(long millis) {     return ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), UTC).toLocalDate().atStartOfDay(UTC). }
true;public,static;1;3;/**  * Creates a datetime from the millis since epoch (thus the time-zone is UTC).  */ ;/**  * Creates a datetime from the millis since epoch (thus the time-zone is UTC).  */ public static ZonedDateTime asDateTime(long millis) {     return ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), UTC). }
true;public,static;2;3;/**  * Creates a datetime from the millis since epoch then translates the date into the given timezone.  */ ;/**  * Creates a datetime from the millis since epoch then translates the date into the given timezone.  */ public static ZonedDateTime asDateTime(long millis, ZoneId id) {     return ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), id). }
true;public,static;1;3;/**  * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.  */ ;/**  * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.  */ public static ZonedDateTime asDateOnly(String dateFormat) {     return LocalDate.parse(dateFormat, ISO_LOCAL_DATE).atStartOfDay(UTC). }
false;public,static;1;3;;public static ZonedDateTime asDateOnly(ZonedDateTime zdt) {     return zdt.toLocalDate().atStartOfDay(zdt.getZone()). }
true;public,static;1;3;/**  * Parses the given string into a DateTime using UTC as a default timezone.  */ ;/**  * Parses the given string into a DateTime using UTC as a default timezone.  */ public static ZonedDateTime asDateTime(String dateFormat) {     return DateFormatters.from(UTC_DATE_TIME_FORMATTER.parse(dateFormat)).withZoneSameInstant(UTC). }
false;public,static;1;3;;public static ZonedDateTime ofEscapedLiteral(String dateFormat) {     return ZonedDateTime.parse(dateFormat, DATE_TIME_ESCAPED_LITERAL_FORMATTER.withZone(UTC)). }
false;public,static;1;3;;public static String toString(ZonedDateTime dateTime) {     return StringUtils.toString(dateTime). }
false;public,static;1;3;;public static String toDateString(ZonedDateTime date) {     return date.format(ISO_LOCAL_DATE). }
false;public,static;1;6;;public static long minDayInterval(long l) {     if (l < DAY_IN_MILLIS) {         return DAY_IN_MILLIS.     }     return l - (l % DAY_IN_MILLIS). }
