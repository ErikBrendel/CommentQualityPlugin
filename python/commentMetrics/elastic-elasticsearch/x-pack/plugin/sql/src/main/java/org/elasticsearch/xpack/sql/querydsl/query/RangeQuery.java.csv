commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String field() {     return field. }
false;public;0;3;;public Object lower() {     return lower. }
false;public;0;3;;public Object upper() {     return upper. }
false;public;0;3;;public boolean includeLower() {     return includeLower. }
false;public;0;3;;public boolean includeUpper() {     return includeUpper. }
false;public;0;3;;public String format() {     return format. }
false;public;0;9;;@Override public QueryBuilder asBuilder() {     RangeQueryBuilder queryBuilder = rangeQuery(field).from(lower, includeLower).to(upper, includeUpper).     if (Strings.hasText(format)) {         queryBuilder.format(format).     }     return queryBuilder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(field, lower, upper, includeLower, includeUpper, format). }
false;public;1;18;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     RangeQuery other = (RangeQuery) obj.     return Objects.equals(field, other.field) && Objects.equals(includeLower, other.includeLower) && Objects.equals(includeUpper, other.includeUpper) && Objects.equals(lower, other.lower) && Objects.equals(upper, other.upper) && Objects.equals(format, other.format). }
false;protected;0;6;;@Override protected String innerToString() {     return field + ":" + (includeLower ? "[" : "(") + lower + ", " + upper + (includeUpper ? "]" : ")"). }
