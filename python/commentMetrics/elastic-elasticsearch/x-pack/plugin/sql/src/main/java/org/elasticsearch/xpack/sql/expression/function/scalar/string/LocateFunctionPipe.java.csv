commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;8;;@Override public final Pipe replaceChildren(List<Pipe> newChildren) {     int childrenSize = newChildren.size().     if (childrenSize > 3 || childrenSize < 2) {         throw new IllegalArgumentException("expected [2 or 3] children but received [" + newChildren.size() + "]").     }     return replaceChildren(newChildren.get(0), newChildren.get(1), childrenSize == 2 ? null : newChildren.get(2)). }
false;public,final;1;10;;@Override public final Pipe resolveAttributes(AttributeResolver resolver) {     Pipe newPattern = pattern.resolveAttributes(resolver).     Pipe newSource = source.resolveAttributes(resolver).     Pipe newStart = start == null ? start : start.resolveAttributes(resolver).     if (newPattern == pattern && newSource == source && newStart == start) {         return this.     }     return replaceChildren(newPattern, newSource, newStart). }
false;public;0;5;;@Override public boolean supportedByAggsOnlyQuery() {     return pattern.supportedByAggsOnlyQuery() && source.supportedByAggsOnlyQuery() && (start == null || start.supportedByAggsOnlyQuery()). }
false;public;0;4;;@Override public boolean resolved() {     return pattern.resolved() && source.resolved() && (start == null || start.resolved()). }
false;protected;3;4;;protected Pipe replaceChildren(Pipe newPattern, Pipe newSource, Pipe newStart) {     return new LocateFunctionPipe(source(), expression(), newPattern, newSource, newStart). }
false;public,final;1;8;;@Override public final void collectFields(SqlSourceBuilder sourceBuilder) {     pattern.collectFields(sourceBuilder).     source.collectFields(sourceBuilder).     if (start != null) {         start.collectFields(sourceBuilder).     } }
false;protected;0;4;;@Override protected NodeInfo<LocateFunctionPipe> info() {     return NodeInfo.create(this, LocateFunctionPipe::new, expression(), pattern, source, start). }
false;public;0;4;;@Override public LocateFunctionProcessor asProcessor() {     return new LocateFunctionProcessor(pattern.asProcessor(), source.asProcessor(), start == null ? null : start.asProcessor()). }
false;public;0;3;;public Pipe src() {     return source. }
false;public;0;3;;public Pipe start() {     return start. }
false;public;0;3;;public Pipe pattern() {     return pattern. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(pattern, source, start). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     LocateFunctionPipe other = (LocateFunctionPipe) obj.     return Objects.equals(pattern, other.pattern) && Objects.equals(source, other.source) && Objects.equals(start, other.start). }
