commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@ParametersFactory public static Iterable<Object[]> params() {     return Stream.of("+", "-", "").map(s -> new Object[] { s }).collect(toList()). }
false;public;0;5;;public void testYearInterval() throws Exception {     int random = randomNonNegativeInt().     TemporalAmount amount = parseInterval(EMPTY, sign + random, INTERVAL_YEAR).     assertEquals(maybeNegate(sign, Period.ofYears(random)), amount). }
false;public;0;5;;public void testMonthInterval() throws Exception {     int random = randomNonNegativeInt().     TemporalAmount amount = parseInterval(EMPTY, sign + random, INTERVAL_MONTH).     assertEquals(maybeNegate(sign, Period.ofMonths(random)), amount). }
false;public;0;5;;public void testDayInterval() throws Exception {     int random = randomNonNegativeInt().     TemporalAmount amount = parseInterval(EMPTY, sign + random, INTERVAL_DAY).     assertEquals(maybeNegate(sign, Duration.ofDays(random)), amount). }
false;public;0;5;;public void testHourInterval() throws Exception {     int random = randomNonNegativeInt().     TemporalAmount amount = parseInterval(EMPTY, sign + random, INTERVAL_HOUR).     assertEquals(maybeNegate(sign, Duration.ofHours(random)), amount). }
false;public;0;5;;public void testMinuteInterval() throws Exception {     int random = randomNonNegativeInt().     TemporalAmount amount = parseInterval(EMPTY, sign + random, INTERVAL_MINUTE).     assertEquals(maybeNegate(sign, Duration.ofMinutes(random)), amount). }
false;public;0;7;;public void testSecondInterval() throws Exception {     int randomSeconds = randomNonNegativeInt().     int randomMillis = randomBoolean() ? (randomBoolean() ? 0 : 999) : randomInt(999).     String value = format(Locale.ROOT, "%s%d.%d", sign, randomSeconds, randomMillis).     TemporalAmount amount = parseInterval(EMPTY, value, INTERVAL_SECOND).     assertEquals(maybeNegate(sign, Duration.ofSeconds(randomSeconds).plusMillis(randomMillis)), amount). }
false;public;0;6;;public void testSecondNoMillisInterval() throws Exception {     int randomSeconds = randomNonNegativeInt().     String value = format(Locale.ROOT, "%s%d", sign, randomSeconds).     TemporalAmount amount = parseInterval(EMPTY, value, INTERVAL_SECOND).     assertEquals(maybeNegate(sign, Duration.ofSeconds(randomSeconds)), amount). }
false;public;0;7;;public void testYearToMonth() throws Exception {     int randomYear = randomNonNegativeInt().     int randomMonth = randomInt(11).     String value = format(Locale.ROOT, "%s%d-%d", sign, randomYear, randomMonth).     TemporalAmount amount = parseInterval(EMPTY, value, INTERVAL_YEAR_TO_MONTH).     assertEquals(maybeNegate(sign, Period.ofYears(randomYear).plusMonths(randomMonth)), amount). }
false;public;0;7;;public void testDayToHour() throws Exception {     int randomDay = randomNonNegativeInt().     int randomHour = randomInt(23).     String value = format(Locale.ROOT, "%s%d %d", sign, randomDay, randomHour).     TemporalAmount amount = parseInterval(EMPTY, value, INTERVAL_DAY_TO_HOUR).     assertEquals(maybeNegate(sign, Duration.ofDays(randomDay).plusHours(randomHour)), amount). }
false;public;0;8;;public void testDayToMinute() throws Exception {     int randomDay = randomNonNegativeInt().     int randomHour = randomInt(23).     int randomMinute = randomInt(59).     String value = format(Locale.ROOT, "%s%d %d:%d", sign, randomDay, randomHour, randomMinute).     TemporalAmount amount = parseInterval(EMPTY, value, INTERVAL_DAY_TO_MINUTE).     assertEquals(maybeNegate(sign, Duration.ofDays(randomDay).plusHours(randomHour).plusMinutes(randomMinute)), amount). }
false;public;0;15;;public void testDayToSecond() throws Exception {     int randomDay = randomNonNegativeInt().     int randomHour = randomInt(23).     int randomMinute = randomInt(59).     int randomSecond = randomInt(59).     boolean withMillis = randomBoolean().     int randomMilli = withMillis ? randomInt(999) : 0.     String millisString = withMillis ? "." + randomMilli : "".     String value = format(Locale.ROOT, "%s%d %d:%d:%d%s", sign, randomDay, randomHour, randomMinute, randomSecond, millisString).     TemporalAmount amount = parseInterval(EMPTY, value, INTERVAL_DAY_TO_SECOND).     assertEquals(maybeNegate(sign, Duration.ofDays(randomDay).plusHours(randomHour).plusMinutes(randomMinute).plusSeconds(randomSecond).plusMillis(randomMilli)), amount). }
false;public;0;7;;public void testHourToMinute() throws Exception {     int randomHour = randomNonNegativeInt().     int randomMinute = randomInt(59).     String value = format(Locale.ROOT, "%s%d:%d", sign, randomHour, randomMinute).     TemporalAmount amount = parseInterval(EMPTY, value, INTERVAL_HOUR_TO_MINUTE).     assertEquals(maybeNegate(sign, Duration.ofHours(randomHour).plusMinutes(randomMinute)), amount). }
false;public;0;14;;public void testHourToSecond() throws Exception {     int randomHour = randomNonNegativeInt().     int randomMinute = randomInt(59).     int randomSecond = randomInt(59).     boolean withMillis = randomBoolean().     int randomMilli = withMillis ? randomInt(999) : 0.     String millisString = withMillis ? "." + randomMilli : "".     String value = format(Locale.ROOT, "%s%d:%d:%d%s", sign, randomHour, randomMinute, randomSecond, millisString).     TemporalAmount amount = parseInterval(EMPTY, value, INTERVAL_HOUR_TO_SECOND).     assertEquals(maybeNegate(sign, Duration.ofHours(randomHour).plusMinutes(randomMinute).plusSeconds(randomSecond).plusMillis(randomMilli)), amount). }
false;public;0;12;;public void testMinuteToSecond() throws Exception {     int randomMinute = randomNonNegativeInt().     int randomSecond = randomInt(59).     boolean withMillis = randomBoolean().     int randomMilli = withMillis ? randomInt(999) : 0.     String millisString = withMillis ? "." + randomMilli : "".     String value = format(Locale.ROOT, "%s%d:%d%s", sign, randomMinute, randomSecond, millisString).     TemporalAmount amount = parseInterval(EMPTY, value, INTERVAL_MINUTE_TO_SECOND).     assertEquals(maybeNegate(sign, Duration.ofMinutes(randomMinute).plusSeconds(randomSecond).plusMillis(randomMilli)), amount). }
true;public;0;8;// validation ;// validation public void testYearToMonthTooBig() throws Exception {     int randomYear = randomNonNegativeInt().     int randomTooBig = randomIntBetween(12, 9999).     String value = format(Locale.ROOT, "%s%d-%d", sign, randomYear, randomTooBig).     ParsingException pe = expectThrows(ParsingException.class, () -> parseInterval(EMPTY, value, INTERVAL_YEAR_TO_MONTH)).     assertEquals("line -1:0: Invalid [INTERVAL YEAR TO MONTH] value [" + value + "]: [MONTH] unit has illegal value [" + randomTooBig + "], expected a positive number up to [11]", pe.getMessage()). }
false;public;0;8;;public void testMillisTooBig() throws Exception {     int randomSeconds = randomNonNegativeInt().     int millisTooLarge = 1234.     String value = format(Locale.ROOT, "%s%d.%d", sign, randomSeconds, millisTooLarge).     ParsingException pe = expectThrows(ParsingException.class, () -> parseInterval(EMPTY, value, INTERVAL_SECOND)).     assertEquals("line -1:0: Invalid [INTERVAL SECOND] value [" + value + "]: [MILLISECOND] unit has illegal value [" + millisTooLarge + "], expected a positive number up to [999]", pe.getMessage()). }
false;public;0;9;;public void testDayToMinuteTooBig() throws Exception {     int randomDay = randomNonNegativeInt().     int randomHour = randomIntBetween(24, 9999).     int randomMinute = randomInt(59).     String value = format(Locale.ROOT, "%s%d %d:%d", sign, randomDay, randomHour, randomMinute).     ParsingException pe = expectThrows(ParsingException.class, () -> parseInterval(EMPTY, value, INTERVAL_DAY_TO_MINUTE)).     assertEquals("line -1:0: Invalid [INTERVAL DAY TO MINUTE] value [" + value + "]: [HOUR] unit has illegal value [" + randomHour + "], expected a positive number up to [23]", pe.getMessage()). }
false;public;0;6;;public void testIncompleteYearToMonthInterval() throws Exception {     String value = "123-".     ParsingException pe = expectThrows(ParsingException.class, () -> parseInterval(EMPTY, value, INTERVAL_YEAR_TO_MONTH)).     assertEquals("line -1:0: Invalid [INTERVAL YEAR TO MONTH] value [123-]: incorrect format, expecting [numeric]-[numeric]", pe.getMessage()). }
false;public;0;6;;public void testIncompleteDayToHourInterval() throws Exception {     String value = "123 23:".     ParsingException pe = expectThrows(ParsingException.class, () -> parseInterval(EMPTY, value, INTERVAL_DAY_TO_HOUR)).     assertEquals("line -1:0: Invalid [INTERVAL DAY TO HOUR] value [123 23:]: unexpected trailing characters found [:]", pe.getMessage()). }
false;public;0;5;;public void testExtraCharLeading() throws Exception {     String value = "a123".     ParsingException pe = expectThrows(ParsingException.class, () -> parseInterval(EMPTY, value, INTERVAL_YEAR)).     assertEquals("line -1:0: Invalid [INTERVAL YEAR] value [a123]: expected digit (at [0]) but found [a]", pe.getMessage()). }
false;public;0;5;;public void testExtraCharTrailing() throws Exception {     String value = "123x".     ParsingException pe = expectThrows(ParsingException.class, () -> parseInterval(EMPTY, value, INTERVAL_YEAR)).     assertEquals("line -1:0: Invalid [INTERVAL YEAR] value [123x]: unexpected trailing characters found [x]", pe.getMessage()). }
false;public;0;5;;public void testIncorrectSeparator() throws Exception {     String value = "123^456".     ParsingException pe = expectThrows(ParsingException.class, () -> parseInterval(EMPTY, value, INTERVAL_SECOND)).     assertEquals("line -1:0: Invalid [INTERVAL SECOND] value [123^456]: expected [.] (at [3]) but found [^]", pe.getMessage()). }
false;public;0;4;;public void testOfValueTooLarge() throws Exception {     ParsingException pe = expectThrows(ParsingException.class, () -> of(EMPTY, Long.MAX_VALUE, TimeUnit.YEAR)).     assertEquals("line -1:0: Value [9223372036854775807] cannot be used as it is too large to convert into [YEAR]s", pe.getMessage()). }
false;public;0;4;;public void testIntervalType() throws Exception {     ParsingException pe = expectThrows(ParsingException.class, () -> intervalType(EMPTY, TimeUnit.DAY, TimeUnit.YEAR)).     assertEquals("line -1:0: Cannot determine datatype for combination [DAY] [YEAR]", pe.getMessage()). }
false;private,static;0;4;;private static int randomNonNegativeInt() {     int random = randomInt().     return random == Integer.MIN_VALUE ? 0 : Math.abs(random). }
false;private;2;3;;private Object maybeNegate(String sign, TemporalAmount interval) {     return "-".equals(sign) ? Intervals.negate(interval) : interval. }
