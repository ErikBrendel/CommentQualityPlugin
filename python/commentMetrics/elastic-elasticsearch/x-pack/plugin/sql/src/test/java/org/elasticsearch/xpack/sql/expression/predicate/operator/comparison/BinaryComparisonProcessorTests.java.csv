commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;6;;public static BinaryComparisonProcessor randomProcessor() {     return new BinaryComparisonProcessor(new ConstantProcessor(randomLong()), new ConstantProcessor(randomLong()), randomFrom(BinaryComparisonProcessor.BinaryComparisonOperation.values())). }
false;protected;0;4;;@Override protected BinaryComparisonProcessor createTestInstance() {     return randomProcessor(). }
false;protected;0;4;;@Override protected Reader<BinaryComparisonProcessor> instanceReader() {     return BinaryComparisonProcessor::new. }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Processors.getNamedWriteables()). }
false;public;0;4;;public void testEq() {     assertEquals(true, new Equals(EMPTY, l(4), l(4)).makePipe().asProcessor().process(null)).     assertEquals(false, new Equals(EMPTY, l(3), l(4)).makePipe().asProcessor().process(null)). }
false;public;0;7;;public void testNullEq() {     assertEquals(true, new NullEquals(EMPTY, l(4), l(4)).makePipe().asProcessor().process(null)).     assertEquals(false, new NullEquals(EMPTY, l(3), l(4)).makePipe().asProcessor().process(null)).     assertEquals(true, new NullEquals(EMPTY, NULL, NULL).makePipe().asProcessor().process(null)).     assertEquals(false, new NullEquals(EMPTY, l(4), NULL).makePipe().asProcessor().process(null)).     assertEquals(false, new NullEquals(EMPTY, NULL, l(4)).makePipe().asProcessor().process(null)). }
false;public;0;4;;public void testNEq() {     assertEquals(false, new NotEquals(EMPTY, l(4), l(4)).makePipe().asProcessor().process(null)).     assertEquals(true, new NotEquals(EMPTY, l(3), l(4)).makePipe().asProcessor().process(null)). }
false;public;0;5;;public void testGt() {     assertEquals(true, new GreaterThan(EMPTY, l(4), l(3)).makePipe().asProcessor().process(null)).     assertEquals(false, new GreaterThan(EMPTY, l(3), l(4)).makePipe().asProcessor().process(null)).     assertEquals(false, new GreaterThan(EMPTY, l(3), l(3)).makePipe().asProcessor().process(null)). }
false;public;0;5;;public void testGte() {     assertEquals(true, new GreaterThanOrEqual(EMPTY, l(4), l(3)).makePipe().asProcessor().process(null)).     assertEquals(false, new GreaterThanOrEqual(EMPTY, l(3), l(4)).makePipe().asProcessor().process(null)).     assertEquals(true, new GreaterThanOrEqual(EMPTY, l(3), l(3)).makePipe().asProcessor().process(null)). }
false;public;0;5;;public void testLt() {     assertEquals(false, new LessThan(EMPTY, l(4), l(3)).makePipe().asProcessor().process(null)).     assertEquals(true, new LessThan(EMPTY, l(3), l(4)).makePipe().asProcessor().process(null)).     assertEquals(false, new LessThan(EMPTY, l(3), l(3)).makePipe().asProcessor().process(null)). }
false;public;0;5;;public void testLte() {     assertEquals(false, new LessThanOrEqual(EMPTY, l(4), l(3)).makePipe().asProcessor().process(null)).     assertEquals(true, new LessThanOrEqual(EMPTY, l(3), l(4)).makePipe().asProcessor().process(null)).     assertEquals(true, new LessThanOrEqual(EMPTY, l(3), l(3)).makePipe().asProcessor().process(null)). }
false;public;0;8;;public void testHandleNull() {     assertNull(new Equals(EMPTY, NULL, l(3)).makePipe().asProcessor().process(null)).     assertNull(new NotEquals(EMPTY, NULL, l(3)).makePipe().asProcessor().process(null)).     assertNull(new GreaterThan(EMPTY, NULL, l(3)).makePipe().asProcessor().process(null)).     assertNull(new GreaterThanOrEqual(EMPTY, NULL, l(3)).makePipe().asProcessor().process(null)).     assertNull(new LessThan(EMPTY, NULL, l(3)).makePipe().asProcessor().process(null)).     assertNull(new LessThanOrEqual(EMPTY, NULL, l(3)).makePipe().asProcessor().process(null)). }
false;private,static;1;3;;private static Literal l(Object value) {     return Literal.of(EMPTY, value). }
