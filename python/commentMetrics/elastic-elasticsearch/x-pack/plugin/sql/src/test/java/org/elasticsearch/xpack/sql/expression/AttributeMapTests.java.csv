commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static Attribute a(String name) {     return new UnresolvedAttribute(Source.EMPTY, name). }
false;private,static;0;8;;private static AttributeMap<String> threeMap() {     Map<Attribute, String> map = new LinkedHashMap<>().     map.put(a("one"), "one").     map.put(a("two"), "two").     map.put(a("three"), "three").     return new AttributeMap<>(map). }
false;public;0;5;;public void testEmptyConstructor() {     AttributeMap<Object> m = new AttributeMap<>().     assertThat(m.size(), is(0)).     assertThat(m.isEmpty(), is(true)). }
false;public;0;23;;public void testMapConstructor() {     Map<Attribute, String> map = new LinkedHashMap<>().     map.put(a("one"), "one").     map.put(a("two"), "two").     map.put(a("three"), "three").     AttributeMap<String> m = new AttributeMap<>(map).     assertThat(m.size(), is(3)).     assertThat(m.isEmpty(), is(false)).     Attribute one = m.keySet().iterator().next().     assertThat(m.containsKey(one), is(true)).     assertThat(m.containsKey(a("one")), is(false)).     assertThat(m.containsValue("one"), is(true)).     assertThat(m.containsValue("on"), is(false)).     assertThat(m.attributeNames(), contains("one", "two", "three")).     assertThat(m.values(), contains(map.values().toArray())).     // defensive copying     map.put(a("four"), "four").     assertThat(m.size(), is(3)).     assertThat(m.isEmpty(), is(false)). }
false;public;0;11;;public void testSingleItemConstructor() {     Attribute one = a("one").     AttributeMap<String> m = new AttributeMap<>(one, "one").     assertThat(m.size(), is(1)).     assertThat(m.isEmpty(), is(false)).     assertThat(m.containsKey(one), is(true)).     assertThat(m.containsKey(a("one")), is(false)).     assertThat(m.containsValue("one"), is(true)).     assertThat(m.containsValue("on"), is(false)). }
false;public;0;14;;public void testSubtract() {     AttributeMap<String> m = threeMap().     AttributeMap<String> mo = new AttributeMap<>(m.keySet().iterator().next(), "one").     AttributeMap<String> empty = new AttributeMap<>().     assertThat(m.subtract(empty), is(m)).     assertThat(m.subtract(m), is(empty)).     assertThat(mo.subtract(m), is(empty)).     AttributeMap<String> subtract = m.subtract(mo).     assertThat(subtract.size(), is(2)).     assertThat(subtract.attributeNames(), contains("two", "three")). }
false;public;0;9;;public void testIntersect() {     AttributeMap<String> m = threeMap().     AttributeMap<String> mo = new AttributeMap<>(m.keySet().iterator().next(), "one").     AttributeMap<String> empty = new AttributeMap<>().     assertThat(m.intersect(empty), is(empty)).     assertThat(m.intersect(m), is(m)).     assertThat(mo.intersect(m), is(mo)). }
false;public;0;12;;public void testSubsetOf() {     AttributeMap<String> m = threeMap().     AttributeMap<String> mo = new AttributeMap<>(m.keySet().iterator().next(), "one").     AttributeMap<String> empty = new AttributeMap<>().     assertThat(m.subsetOf(empty), is(false)).     assertThat(m.subsetOf(m), is(true)).     assertThat(mo.subsetOf(m), is(true)).     assertThat(empty.subsetOf(m), is(true)).     assertThat(mo.subsetOf(m), is(true)). }
false;public;0;19;;public void testKeySet() {     Attribute one = a("one").     Attribute two = a("two").     Attribute three = a("three").     Map<Attribute, String> map = new LinkedHashMap<>().     map.put(one, "one").     map.put(two, "two").     map.put(three, "three").     Set<Attribute> keySet = new AttributeMap<>(map).keySet().     assertThat(keySet, contains(one, two, three)).     // toObject     Object[] array = keySet.toArray().     assertThat(array, arrayWithSize(3)).     assertThat(array, arrayContaining(one, two, three)). }
false;public;0;7;;public void testValues() {     AttributeMap<String> m = threeMap().     Collection<String> values = m.values().     assertThat(values, hasSize(3)).     assertThat(values, contains("one", "two", "three")). }
false;public;0;23;;public void testEntrySet() {     Attribute one = a("one").     Attribute two = a("two").     Attribute three = a("three").     Map<Attribute, String> map = new LinkedHashMap<>().     map.put(one, "one").     map.put(two, "two").     map.put(three, "three").     Set<Entry<Attribute, String>> set = new AttributeMap<>(map).entrySet().     assertThat(set, hasSize(3)).     List<Attribute> keys = set.stream().map(Map.Entry::getKey).collect(toList()).     List<String> values = set.stream().map(Map.Entry::getValue).collect(toList()).     assertThat(keys, hasSize(3)).     assertThat(values, hasSize(3)).     assertThat(values, contains("one", "two", "three")). }
false;public;0;9;;public void testForEach() {     AttributeMap<String> m = threeMap().     Map<Attribute, String> collect = new LinkedHashMap<>().     m.forEach(collect::put).     AttributeMap<String> copy = new AttributeMap<>(collect).     assertThat(m, is(copy)). }
