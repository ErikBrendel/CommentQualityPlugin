commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testNullMap() {     Map<String, EsField> fromEs = Types.fromEs(null).     assertThat(fromEs.isEmpty(), is(true)). }
false;public;0;4;;public void testEmptyMap() {     Map<String, EsField> fromEs = Types.fromEs(emptyMap()).     assertThat(fromEs.isEmpty(), is(true)). }
false;public;0;10;;public void testBasicMapping() {     Map<String, EsField> mapping = loadMapping("mapping-basic.json").     assertThat(mapping.size(), is(7)).     assertThat(mapping.get("emp_no").getDataType(), is(INTEGER)).     assertThat(mapping.get("first_name"), instanceOf(TextEsField.class)).     assertThat(mapping.get("last_name").getDataType(), is(TEXT)).     assertThat(mapping.get("gender").getDataType(), is(KEYWORD)).     assertThat(mapping.get("salary").getDataType(), is(INTEGER)).     assertThat(mapping.get("_meta_field").getDataType(), is(KEYWORD)). }
false;public;0;6;;public void testDefaultStringMapping() {     Map<String, EsField> mapping = loadMapping("mapping-default-string.json").     assertThat(mapping.size(), is(1)).     assertThat(mapping.get("dep_no").getDataType(), is(TEXT)). }
false;public;0;11;;public void testTextField() {     Map<String, EsField> mapping = loadMapping("mapping-text.json").     assertThat(mapping.size(), is(1)).     EsField type = mapping.get("full_name").     assertThat(type, instanceOf(TextEsField.class)).     assertThat(type.isAggregatable(), is(false)).     TextEsField ttype = (TextEsField) type.     assertThat(type.getPrecision(), is(Integer.MAX_VALUE)).     assertThat(ttype.isAggregatable(), is(false)). }
false;public;0;9;;public void testKeywordField() {     Map<String, EsField> mapping = loadMapping("mapping-keyword.json").     assertThat(mapping.size(), is(1)).     EsField field = mapping.get("full_name").     assertThat(field, instanceOf(KeywordEsField.class)).     assertThat(field.isAggregatable(), is(true)).     assertThat(field.getPrecision(), is(256)). }
false;public;0;9;;public void testDateField() {     Map<String, EsField> mapping = loadMapping("mapping-date.json").     assertThat(mapping.size(), is(1)).     EsField field = mapping.get("date").     assertThat(field.getDataType(), is(DATETIME)).     assertThat(field.isAggregatable(), is(true)).     assertThat(field.getPrecision(), is(24)). }
false;public;0;9;;public void testDateNoFormat() {     Map<String, EsField> mapping = loadMapping("mapping-date-no-format.json").     assertThat(mapping.size(), is(1)).     EsField field = mapping.get("date").     assertThat(field.getDataType(), is(DATETIME)).     assertThat(field.isAggregatable(), is(true)).     DateEsField dfield = (DateEsField) field. }
false;public;0;9;;public void testDateMulti() {     Map<String, EsField> mapping = loadMapping("mapping-date-multi.json").     assertThat(mapping.size(), is(1)).     EsField field = mapping.get("date").     assertThat(field.getDataType(), is(DATETIME)).     assertThat(field.isAggregatable(), is(true)).     DateEsField dfield = (DateEsField) field. }
false;public;0;9;;public void testDocValueField() {     Map<String, EsField> mapping = loadMapping("mapping-docvalues.json").     assertThat(mapping.size(), is(1)).     EsField field = mapping.get("session_id").     assertThat(field, instanceOf(KeywordEsField.class)).     assertThat(field.getPrecision(), is(15)).     assertThat(field.isAggregatable(), is(false)). }
false;public;0;14;;public void testDottedField() {     Map<String, EsField> mapping = loadMapping("mapping-object.json").     assertThat(mapping.size(), is(2)).     EsField field = mapping.get("manager").     assertThat(field.getDataType().isPrimitive(), is(false)).     assertThat(field.getDataType(), is(OBJECT)).     Map<String, EsField> children = field.getProperties().     assertThat(children.size(), is(2)).     EsField names = children.get("name").     children = names.getProperties().     assertThat(children.size(), is(2)).     assertThat(children.get("first").getDataType(), is(TEXT)). }
false;public;0;12;;public void testMultiField() {     Map<String, EsField> mapping = loadMapping("mapping-multi-field.json").     assertThat(mapping.size(), is(1)).     EsField field = mapping.get("text").     assertThat(field.getDataType().isPrimitive(), is(true)).     assertThat(field.getDataType(), is(TEXT)).     Map<String, EsField> fields = field.getProperties().     assertThat(fields.size(), is(2)).     assertThat(fields.get("raw").getDataType(), is(KEYWORD)).     assertThat(fields.get("english").getDataType(), is(TEXT)). }
false;public;0;12;;public void testMultiFieldTooManyOptions() {     Map<String, EsField> mapping = loadMapping("mapping-multi-field.json").     assertThat(mapping.size(), is(1)).     EsField field = mapping.get("text").     assertThat(field.getDataType().isPrimitive(), is(true)).     assertThat(field, instanceOf(TextEsField.class)).     Map<String, EsField> fields = field.getProperties().     assertThat(fields.size(), is(2)).     assertThat(fields.get("raw").getDataType(), is(KEYWORD)).     assertThat(fields.get("english").getDataType(), is(TEXT)). }
false;public;0;12;;public void testNestedDoc() {     Map<String, EsField> mapping = loadMapping("mapping-nested.json").     assertThat(mapping.size(), is(1)).     EsField field = mapping.get("dep").     assertThat(field.getDataType().isPrimitive(), is(false)).     assertThat(field.getDataType(), is(NESTED)).     Map<String, EsField> children = field.getProperties().     assertThat(children.size(), is(4)).     assertThat(children.get("dep_name").getDataType(), is(TEXT)).     assertThat(children.get("start_date").getDataType(), is(DATETIME)). }
false;public;0;5;;public void testGeoField() {     Map<String, EsField> mapping = loadMapping("mapping-geo.json").     EsField dt = mapping.get("location").     assertThat(dt.getDataType().typeName, is("unsupported")). }
false;public;0;6;;public void testIpField() {     Map<String, EsField> mapping = loadMapping("mapping-ip.json").     assertThat(mapping.size(), is(1)).     EsField dt = mapping.get("ip_addr").     assertThat(dt.getDataType().typeName, is("ip")). }
false;public;0;5;;public void testUnsupportedTypes() {     Map<String, EsField> mapping = loadMapping("mapping-unsupported.json").     EsField dt = mapping.get("range").     assertThat(dt.getDataType().typeName, is("unsupported")). }
false;public,static;1;5;;public static Map<String, EsField> loadMapping(String name) {     InputStream stream = TypesTests.class.getResourceAsStream("/" + name).     assertNotNull("Could not find mapping resource:" + name, stream).     return Types.fromEs(XContentHelper.convertToMap(JsonXContent.jsonXContent, stream, randomBoolean())). }
false;public,static;2;5;;public static Map<String, EsField> loadMapping(String name, boolean ordered) {     InputStream stream = TypesTests.class.getResourceAsStream("/" + name).     assertNotNull("Could not find mapping resource:" + name, stream).     return Types.fromEs(XContentHelper.convertToMap(JsonXContent.jsonXContent, stream, ordered)). }
