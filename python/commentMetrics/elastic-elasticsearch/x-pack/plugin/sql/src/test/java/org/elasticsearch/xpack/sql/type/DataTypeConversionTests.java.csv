# id;timestamp;commentText;codeText;commentWords;codeWords
DataTypeConversionTests -> public void testConversionToLong();1524684173;Test conversion to long.;public void testConversionToLong() {_        DataType to = DataType.LONG__        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1, conversion.convert(true))__            assertEquals(0, conversion.convert(false))__        }_        Conversion conversion = DataTypeConversion.conversionFor(DataType.KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,data,type,long,conversion,conversion,data,type,conversion,conversion,for,data,type,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,data,type,conversion,conversion,for,data,type,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,data,type,conversion,conversion,for,data,type,boolean,to,assert,null,conversion,convert,null,assert,equals,1,conversion,convert,true,assert,equals,0,conversion,convert,false,conversion,conversion,data,type,conversion,conversion,for,data,type,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1526029249;Test conversion to long.;public void testConversionToLong() {_        DataType to = DataType.LONG__        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1, conversion.convert(true))__            assertEquals(0, conversion.convert(false))__        }_        Conversion conversion = DataTypeConversion.conversionFor(DataType.KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,data,type,long,conversion,conversion,data,type,conversion,conversion,for,data,type,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,data,type,conversion,conversion,for,data,type,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,data,type,conversion,conversion,for,data,type,boolean,to,assert,null,conversion,convert,null,assert,equals,1,conversion,convert,true,assert,equals,0,conversion,convert,false,conversion,conversion,data,type,conversion,conversion,for,data,type,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1531179852;Test conversion to long.;public void testConversionToLong() {_        DataType to = DataType.LONG__        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = DataTypeConversion.conversionFor(DataType.KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,data,type,long,conversion,conversion,data,type,conversion,conversion,for,data,type,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,data,type,conversion,conversion,for,data,type,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,data,type,conversion,conversion,for,data,type,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,data,type,conversion,conversion,for,data,type,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1540313026;Test conversion to long.;public void testConversionToLong() {_        DataType to = DataType.LONG__        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = DataTypeConversion.conversionFor(DataType.KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,data,type,long,conversion,conversion,data,type,conversion,conversion,for,data,type,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,data,type,conversion,conversion,for,data,type,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,data,type,conversion,conversion,for,data,type,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,data,type,conversion,conversion,for,data,type,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1540847035;Test conversion to long.;public void testConversionToLong() {_        DataType to = DataType.LONG__        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = DataTypeConversion.conversionFor(DataType.KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,data,type,long,conversion,conversion,data,type,conversion,conversion,for,data,type,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,data,type,conversion,conversion,for,data,type,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,data,type,conversion,conversion,for,data,type,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,data,type,conversion,conversion,for,data,type,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1541092382;Test conversion to long.;public void testConversionToLong() {_        DataType to = DataType.LONG__        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = DataTypeConversion.conversionFor(DataType.KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,data,type,long,conversion,conversion,data,type,conversion,conversion,for,data,type,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,data,type,conversion,conversion,for,data,type,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,data,type,conversion,conversion,for,data,type,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,data,type,conversion,conversion,for,data,type,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1542461427;Test conversion to long.;public void testConversionToLong() {_        DataType to = DataType.LONG__        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = DataTypeConversion.conversionFor(DataType.KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,data,type,long,conversion,conversion,data,type,conversion,conversion,for,data,type,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,data,type,conversion,conversion,for,data,type,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,data,type,conversion,conversion,for,data,type,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,data,type,conversion,conversion,for,data,type,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1542632133;Test conversion to long.;public void testConversionToLong() {_        DataType to = DataType.LONG__        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = DataTypeConversion.conversionFor(DataType.BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = DataTypeConversion.conversionFor(DataType.KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,data,type,long,conversion,conversion,data,type,conversion,conversion,for,data,type,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,data,type,conversion,conversion,for,data,type,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,data,type,conversion,conversion,for,data,type,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,data,type,conversion,conversion,for,data,type,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1542807959;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = conversionFor(KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1544794956;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = conversionFor(KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1545047744;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = conversionFor(KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1545305995;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = conversionFor(KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1546556270;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = conversionFor(KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1547336422;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = conversionFor(KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1547713078;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [Long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        Conversion conversion = conversionFor(KEYWORD, to)__        assertNull(conversion.convert(null))__        assertEquals(1L, conversion.convert("1"))__        assertEquals(0L, conversion.convert("-0"))__        Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__        assertEquals("cannot cast [0xff] to [Long]", e.getMessage())__    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1548330118;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        {_            Conversion conversion = conversionFor(DATE, to)__            assertNull(conversion.convert(null))__            assertEquals(123379200L, conversion.convert(DateUtils.asDateOnly(123456789101L)))__            assertEquals(-123465600L, conversion.convert(DateUtils.asDateOnly(-123456789101L)))__        }_        {_            Conversion conversion = conversionFor(DATETIME, to)__            assertNull(conversion.convert(null))__            assertEquals(123456789L, conversion.convert(asDateTime(123456789101L)))__            assertEquals(-123456790L, conversion.convert(asDateTime(-123456789101L)))__        }_        {_            Conversion conversion = conversionFor(KEYWORD, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert("1"))__            assertEquals(0L, conversion.convert("-0"))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__            assertEquals("cannot cast [0xff] to [long]", e.getMessage())__        }_    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,date,to,assert,null,conversion,convert,null,assert,equals,123379200l,conversion,convert,date,utils,as,date,only,123456789101l,assert,equals,123465600l,conversion,convert,date,utils,as,date,only,123456789101l,conversion,conversion,conversion,for,datetime,to,assert,null,conversion,convert,null,assert,equals,123456789l,conversion,convert,as,date,time,123456789101l,assert,equals,123456790l,conversion,convert,as,date,time,123456789101l,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1548451750;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        {_            Conversion conversion = conversionFor(DATE, to)__            assertNull(conversion.convert(null))__            assertEquals(123379200000L, conversion.convert(DateUtils.asDateOnly(123456789101L)))__            assertEquals(-123465600000L, conversion.convert(DateUtils.asDateOnly(-123456789101L)))__        }_        {_            Conversion conversion = conversionFor(DATETIME, to)__            assertNull(conversion.convert(null))__            assertEquals(123456789101L, conversion.convert(asDateTime(123456789101L)))__            assertEquals(-123456789101L, conversion.convert(asDateTime(-123456789101L)))__        }_        {_            Conversion conversion = conversionFor(KEYWORD, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert("1"))__            assertEquals(0L, conversion.convert("-0"))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__            assertEquals("cannot cast [0xff] to [long]", e.getMessage())__        }_    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,date,to,assert,null,conversion,convert,null,assert,equals,123379200000l,conversion,convert,date,utils,as,date,only,123456789101l,assert,equals,123465600000l,conversion,convert,date,utils,as,date,only,123456789101l,conversion,conversion,conversion,for,datetime,to,assert,null,conversion,convert,null,assert,equals,123456789101l,conversion,convert,as,date,time,123456789101l,assert,equals,123456789101l,conversion,convert,as,date,time,123456789101l,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1549401172;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        {_            Conversion conversion = conversionFor(DATE, to)__            assertNull(conversion.convert(null))__            assertEquals(123379200000L, conversion.convert(DateUtils.asDateOnly(123456789101L)))__            assertEquals(-123465600000L, conversion.convert(DateUtils.asDateOnly(-123456789101L)))__        }_        {_            Conversion conversion = conversionFor(DATETIME, to)__            assertNull(conversion.convert(null))__            assertEquals(123456789101L, conversion.convert(asDateTime(123456789101L)))__            assertEquals(-123456789101L, conversion.convert(asDateTime(-123456789101L)))__        }_        {_            Conversion conversion = conversionFor(KEYWORD, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert("1"))__            assertEquals(0L, conversion.convert("-0"))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__            assertEquals("cannot cast [0xff] to [long]", e.getMessage())__        }_    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,date,to,assert,null,conversion,convert,null,assert,equals,123379200000l,conversion,convert,date,utils,as,date,only,123456789101l,assert,equals,123465600000l,conversion,convert,date,utils,as,date,only,123456789101l,conversion,conversion,conversion,for,datetime,to,assert,null,conversion,convert,null,assert,equals,123456789101l,conversion,convert,as,date,time,123456789101l,assert,equals,123456789101l,conversion,convert,as,date,time,123456789101l,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1549632251;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        {_            Conversion conversion = conversionFor(DATE, to)__            assertNull(conversion.convert(null))__            assertEquals(123379200000L, conversion.convert(DateUtils.asDateOnly(123456789101L)))__            assertEquals(-123465600000L, conversion.convert(DateUtils.asDateOnly(-123456789101L)))__        }_        {_            Conversion conversion = conversionFor(DATETIME, to)__            assertNull(conversion.convert(null))__            assertEquals(123456789101L, conversion.convert(asDateTime(123456789101L)))__            assertEquals(-123456789101L, conversion.convert(asDateTime(-123456789101L)))__        }_        {_            Conversion conversion = conversionFor(KEYWORD, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert("1"))__            assertEquals(0L, conversion.convert("-0"))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__            assertEquals("cannot cast [0xff] to [long]", e.getMessage())__        }_    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,date,to,assert,null,conversion,convert,null,assert,equals,123379200000l,conversion,convert,date,utils,as,date,only,123456789101l,assert,equals,123465600000l,conversion,convert,date,utils,as,date,only,123456789101l,conversion,conversion,conversion,for,datetime,to,assert,null,conversion,convert,null,assert,equals,123456789101l,conversion,convert,as,date,time,123456789101l,assert,equals,123456789101l,conversion,convert,as,date,time,123456789101l,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
DataTypeConversionTests -> public void testConversionToLong();1549659351;Test conversion to long.;public void testConversionToLong() {_        DataType to = LONG__        {_            Conversion conversion = conversionFor(DOUBLE, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10.0))__            assertEquals(10L, conversion.convert(10.1))__            assertEquals(11L, conversion.convert(10.6))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(Double.MAX_VALUE))__            assertEquals("[" + Double.MAX_VALUE + "] out of [long] range", e.getMessage())__        }_        {_            Conversion conversion = conversionFor(INTEGER, to)__            assertNull(conversion.convert(null))__            assertEquals(10L, conversion.convert(10))__            assertEquals(-134L, conversion.convert(-134))__        }_        {_            Conversion conversion = conversionFor(BOOLEAN, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert(true))__            assertEquals(0L, conversion.convert(false))__        }_        {_            Conversion conversion = conversionFor(DATE, to)__            assertNull(conversion.convert(null))__            assertEquals(123379200000L, conversion.convert(DateUtils.asDateOnly(123456789101L)))__            assertEquals(-123465600000L, conversion.convert(DateUtils.asDateOnly(-123456789101L)))__        }_        {_            Conversion conversion = conversionFor(DATETIME, to)__            assertNull(conversion.convert(null))__            assertEquals(123456789101L, conversion.convert(asDateTime(123456789101L)))__            assertEquals(-123456789101L, conversion.convert(asDateTime(-123456789101L)))__        }_        {_            Conversion conversion = conversionFor(KEYWORD, to)__            assertNull(conversion.convert(null))__            assertEquals(1L, conversion.convert("1"))__            assertEquals(0L, conversion.convert("-0"))__            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert("0xff"))__            assertEquals("cannot cast [0xff] to [long]", e.getMessage())__        }_    };test,conversion,to,long;public,void,test,conversion,to,long,data,type,to,long,conversion,conversion,conversion,for,double,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,0,assert,equals,10l,conversion,convert,10,1,assert,equals,11l,conversion,convert,10,6,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,double,assert,equals,double,out,of,long,range,e,get,message,conversion,conversion,conversion,for,integer,to,assert,null,conversion,convert,null,assert,equals,10l,conversion,convert,10,assert,equals,134l,conversion,convert,134,conversion,conversion,conversion,for,boolean,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,true,assert,equals,0l,conversion,convert,false,conversion,conversion,conversion,for,date,to,assert,null,conversion,convert,null,assert,equals,123379200000l,conversion,convert,date,utils,as,date,only,123456789101l,assert,equals,123465600000l,conversion,convert,date,utils,as,date,only,123456789101l,conversion,conversion,conversion,for,datetime,to,assert,null,conversion,convert,null,assert,equals,123456789101l,conversion,convert,as,date,time,123456789101l,assert,equals,123456789101l,conversion,convert,as,date,time,123456789101l,conversion,conversion,conversion,for,keyword,to,assert,null,conversion,convert,null,assert,equals,1l,conversion,convert,1,assert,equals,0l,conversion,convert,0,exception,e,expect,throws,sql,illegal,argument,exception,class,conversion,convert,0xff,assert,equals,cannot,cast,0xff,to,long,e,get,message
