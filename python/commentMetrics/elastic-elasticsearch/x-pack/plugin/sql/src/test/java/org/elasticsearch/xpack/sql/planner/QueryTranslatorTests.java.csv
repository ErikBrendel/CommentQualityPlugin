commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;11;;@BeforeClass public static void init() {     parser = new SqlParser().     Map<String, EsField> mapping = TypesTests.loadMapping("mapping-multi-field-variation.json").     EsIndex test = new EsIndex("test", mapping).     IndexResolution getIndexResult = IndexResolution.valid(test).     analyzer = new Analyzer(TestUtils.TEST_CFG, new FunctionRegistry(), getIndexResult, new Verifier(new Metrics())).     optimizer = new Optimizer().     planner = new Planner(). }
false;public,static;0;5;;@AfterClass public static void destroy() {     parser = null.     analyzer = null. }
false;private;1;3;;private LogicalPlan plan(String sql) {     return analyzer.analyze(parser.createStatement(sql), true). }
false;private;1;3;;private PhysicalPlan optimizeAndPlan(String sql) {     return planner.plan(optimizer.optimize(plan(sql)), true). }
false;public;0;13;;public void testTermEqualityAnalyzer() {     LogicalPlan p = plan("SELECT some.string FROM test WHERE some.string = 'value'").     assertTrue(p instanceof Project).     p = ((Project) p).child().     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     Query query = translation.query.     assertTrue(query instanceof TermQuery).     TermQuery tq = (TermQuery) query.     assertEquals("some.string.typical", tq.term()).     assertEquals("value", tq.value()). }
false;public;0;13;;public void testTermEqualityNotAnalyzed() {     LogicalPlan p = plan("SELECT some.string FROM test WHERE int = 5").     assertTrue(p instanceof Project).     p = ((Project) p).child().     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     Query query = translation.query.     assertTrue(query instanceof TermQuery).     TermQuery tq = (TermQuery) query.     assertEquals("int", tq.term()).     assertEquals(5, tq.value()). }
false;public;0;9;;public void testComparisonAgainstColumns() {     LogicalPlan p = plan("SELECT some.string FROM test WHERE date > int").     assertTrue(p instanceof Project).     p = ((Project) p).child().     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     SqlIllegalArgumentException ex = expectThrows(SqlIllegalArgumentException.class, () -> QueryTranslator.toQuery(condition, false)).     assertEquals("Line 1:43: Comparisons against variables are not (currently) supported. offender [int] in [>]", ex.getMessage()). }
false;public;0;13;;public void testDateRange() {     LogicalPlan p = plan("SELECT some.string FROM test WHERE date > 1969-05-13").     assertTrue(p instanceof Project).     p = ((Project) p).child().     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     Query query = translation.query.     assertTrue(query instanceof RangeQuery).     RangeQuery rq = (RangeQuery) query.     assertEquals("date", rq.field()).     assertEquals(1951, rq.lower()). }
false;public;0;13;;public void testDateRangeLiteral() {     LogicalPlan p = plan("SELECT some.string FROM test WHERE date > '1969-05-13'").     assertTrue(p instanceof Project).     p = ((Project) p).child().     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     Query query = translation.query.     assertTrue(query instanceof RangeQuery).     RangeQuery rq = (RangeQuery) query.     assertEquals("date", rq.field()).     assertEquals("1969-05-13", rq.lower()). }
false;public;0;13;;public void testDateRangeCast() {     LogicalPlan p = plan("SELECT some.string FROM test WHERE date > CAST('1969-05-13T12:34:56Z' AS DATETIME)").     assertTrue(p instanceof Project).     p = ((Project) p).child().     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     Query query = translation.query.     assertTrue(query instanceof RangeQuery).     RangeQuery rq = (RangeQuery) query.     assertEquals("date", rq.field()).     assertEquals(DateUtils.asDateTime("1969-05-13T12:34:56Z"), rq.lower()). }
false;public;0;12;;public void testLikeOnInexact() {     LogicalPlan p = plan("SELECT * FROM test WHERE some.string LIKE '%a%'").     assertTrue(p instanceof Project).     p = ((Project) p).child().     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     QueryTranslation qt = QueryTranslator.toQuery(condition, false).     assertEquals(QueryStringQuery.class, qt.query.getClass()).     QueryStringQuery qsq = ((QueryStringQuery) qt.query).     assertEquals(1, qsq.fields().size()).     assertEquals("some.string.typical", qsq.fields().keySet().iterator().next()). }
false;public;0;9;;public void testLikeConstructsNotSupported() {     LogicalPlan p = plan("SELECT LTRIM(keyword) lt FROM test WHERE LTRIM(keyword) LIKE '%a%'").     assertTrue(p instanceof Project).     p = ((Project) p).child().     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     SqlIllegalArgumentException ex = expectThrows(SqlIllegalArgumentException.class, () -> QueryTranslator.toQuery(condition, false)).     assertEquals("Scalar function (LTRIM(keyword)) not allowed (yet) as arguments for LIKE", ex.getMessage()). }
false;public;0;15;;public void testTranslateNotExpression_WhereClause_Painless() {     LogicalPlan p = plan("SELECT * FROM test WHERE NOT(POSITION('x', keyword) = 0)").     assertTrue(p instanceof Project).     assertTrue(p.children().get(0) instanceof Filter).     Expression condition = ((Filter) p.children().get(0)).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     assertTrue(translation.query instanceof ScriptQuery).     ScriptQuery sc = (ScriptQuery) translation.query.     assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.not(" + "InternalSqlScriptUtils.eq(InternalSqlScriptUtils.position(" + "params.v0,InternalSqlScriptUtils.docValue(doc,params.v1)),params.v2)))", sc.script().toString()).     assertEquals("[{v=x}, {v=keyword}, {v=0}]", sc.script().params().toString()). }
false;public;0;14;;public void testTranslateIsNullExpression_WhereClause() {     LogicalPlan p = plan("SELECT * FROM test WHERE keyword IS NULL").     assertTrue(p instanceof Project).     assertTrue(p.children().get(0) instanceof Filter).     Expression condition = ((Filter) p.children().get(0)).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     assertTrue(translation.query instanceof NotQuery).     NotQuery tq = (NotQuery) translation.query.     assertTrue(tq.child() instanceof ExistsQuery).     ExistsQuery eq = (ExistsQuery) tq.child().     assertEquals("{\"exists\":{\"field\":\"keyword\",\"boost\":1.0}}", eq.asBuilder().toString().replaceAll("\\s+", "")). }
false;public;0;14;;public void testTranslateIsNullExpression_WhereClause_Painless() {     LogicalPlan p = plan("SELECT * FROM test WHERE POSITION('x', keyword) IS NULL").     assertTrue(p instanceof Project).     assertTrue(p.children().get(0) instanceof Filter).     Expression condition = ((Filter) p.children().get(0)).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     assertTrue(translation.query instanceof ScriptQuery).     ScriptQuery sc = (ScriptQuery) translation.query.     assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.isNull(" + "InternalSqlScriptUtils.position(params.v0,InternalSqlScriptUtils.docValue(doc,params.v1))))", sc.script().toString()).     assertEquals("[{v=x}, {v=keyword}]", sc.script().params().toString()). }
false;public;0;12;;public void testTranslateIsNotNullExpression_WhereClause() {     LogicalPlan p = plan("SELECT * FROM test WHERE keyword IS NOT NULL").     assertTrue(p instanceof Project).     assertTrue(p.children().get(0) instanceof Filter).     Expression condition = ((Filter) p.children().get(0)).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     assertTrue(translation.query instanceof ExistsQuery).     ExistsQuery eq = (ExistsQuery) translation.query.     assertEquals("{\"exists\":{\"field\":\"keyword\",\"boost\":1.0}}", eq.asBuilder().toString().replaceAll("\\s+", "")). }
false;public;0;14;;public void testTranslateIsNotNullExpression_WhereClause_Painless() {     LogicalPlan p = plan("SELECT * FROM test WHERE POSITION('x', keyword) IS NOT NULL").     assertTrue(p instanceof Project).     assertTrue(p.children().get(0) instanceof Filter).     Expression condition = ((Filter) p.children().get(0)).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     assertTrue(translation.query instanceof ScriptQuery).     ScriptQuery sc = (ScriptQuery) translation.query.     assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.isNotNull(" + "InternalSqlScriptUtils.position(params.v0,InternalSqlScriptUtils.docValue(doc,params.v1))))", sc.script().toString()).     assertEquals("[{v=x}, {v=keyword}]", sc.script().params().toString()). }
false;public;0;12;;public void testTranslateIsNullExpression_HavingClause_Painless() {     LogicalPlan p = plan("SELECT keyword, max(int) FROM test GROUP BY keyword HAVING max(int) IS NULL").     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, true).     assertNull(translation.query).     AggFilter aggFilter = translation.aggFilter.     assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.isNull(params.a0))", aggFilter.scriptTemplate().toString()).     assertThat(aggFilter.scriptTemplate().params().toString(), startsWith("[{a=max(int){a->")). }
false;public;0;12;;public void testTranslateIsNotNullExpression_HavingClause_Painless() {     LogicalPlan p = plan("SELECT keyword, max(int) FROM test GROUP BY keyword HAVING max(int) IS NOT NULL").     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, true).     assertNull(translation.query).     AggFilter aggFilter = translation.aggFilter.     assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.isNotNull(params.a0))", aggFilter.scriptTemplate().toString()).     assertThat(aggFilter.scriptTemplate().params().toString(), startsWith("[{a=max(int){a->")). }
false;public;0;13;;public void testTranslateInExpression_WhereClause() {     LogicalPlan p = plan("SELECT * FROM test WHERE keyword IN ('foo', 'bar', 'lala', 'foo', concat('la', 'la'))").     assertTrue(p instanceof Project).     assertTrue(p.children().get(0) instanceof Filter).     Expression condition = ((Filter) p.children().get(0)).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     Query query = translation.query.     assertTrue(query instanceof TermsQuery).     TermsQuery tq = (TermsQuery) query.     assertEquals("{\"terms\":{\"keyword\":[\"foo\",\"bar\",\"lala\"],\"boost\":1.0}}", tq.asBuilder().toString().replaceAll("\\s", "")). }
false;public;0;13;;public void testTranslateInExpression_WhereClause_TextFieldWithKeyword() {     LogicalPlan p = plan("SELECT * FROM test WHERE some.string IN ('foo', 'bar', 'lala', 'foo', concat('la', 'la'))").     assertTrue(p instanceof Project).     assertTrue(p.children().get(0) instanceof Filter).     Expression condition = ((Filter) p.children().get(0)).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     Query query = translation.query.     assertTrue(query instanceof TermsQuery).     TermsQuery tq = (TermsQuery) query.     assertEquals("{\"terms\":{\"some.string.typical\":[\"foo\",\"bar\",\"lala\"],\"boost\":1.0}}", tq.asBuilder().toString().replaceAll("\\s", "")). }
false;public;0;13;;public void testTranslateInExpression_WhereClauseAndNullHandling() {     LogicalPlan p = plan("SELECT * FROM test WHERE keyword IN ('foo', null, 'lala', null, 'foo', concat('la', 'la'))").     assertTrue(p instanceof Project).     assertTrue(p.children().get(0) instanceof Filter).     Expression condition = ((Filter) p.children().get(0)).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     Query query = translation.query.     assertTrue(query instanceof TermsQuery).     TermsQuery tq = (TermsQuery) query.     assertEquals("{\"terms\":{\"keyword\":[\"foo\",\"lala\"],\"boost\":1.0}}", tq.asBuilder().toString().replaceAll("\\s", "")). }
false;public;0;15;;public void testTranslateInExpression_WhereClause_Painless() {     LogicalPlan p = plan("SELECT int FROM test WHERE POWER(int, 2) IN (10, null, 20, 30 - 10)").     assertTrue(p instanceof Project).     assertTrue(p.children().get(0) instanceof Filter).     Expression condition = ((Filter) p.children().get(0)).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, false).     assertNull(translation.aggFilter).     assertTrue(translation.query instanceof ScriptQuery).     ScriptQuery sc = (ScriptQuery) translation.query.     assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.in(" + "InternalSqlScriptUtils.power(InternalSqlScriptUtils.docValue(doc,params.v0),params.v1), params.v2))", sc.script().toString()).     assertEquals("[{v=int}, {v=2}, {v=[10.0, null, 20.0]}]", sc.script().params().toString()). }
false;public;0;13;;public void testTranslateInExpression_HavingClause_Painless() {     LogicalPlan p = plan("SELECT keyword, max(int) FROM test GROUP BY keyword HAVING max(int) IN (10, 20, 30 - 10)").     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, true).     assertNull(translation.query).     AggFilter aggFilter = translation.aggFilter.     assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.in(params.a0, params.v0))", aggFilter.scriptTemplate().toString()).     assertThat(aggFilter.scriptTemplate().params().toString(), startsWith("[{a=max(int){a->")).     assertThat(aggFilter.scriptTemplate().params().toString(), endsWith(", {v=[10, 20]}]")). }
false;public;0;14;;public void testTranslateInExpression_HavingClause_PainlessOneArg() {     LogicalPlan p = plan("SELECT keyword, max(int) FROM test GROUP BY keyword HAVING max(int) IN (10, 30 - 20)").     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, true).     assertNull(translation.query).     AggFilter aggFilter = translation.aggFilter.     assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.in(params.a0, params.v0))", aggFilter.scriptTemplate().toString()).     assertThat(aggFilter.scriptTemplate().params().toString(), startsWith("[{a=max(int){a->")).     assertThat(aggFilter.scriptTemplate().params().toString(), endsWith(", {v=[10]}]")). }
false;public;0;13;;public void testTranslateInExpression_HavingClause_PainlessAndNullHandling() {     LogicalPlan p = plan("SELECT keyword, max(int) FROM test GROUP BY keyword HAVING max(int) IN (10, null, 20, 30, null, 30 - 10)").     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, true).     assertNull(translation.query).     AggFilter aggFilter = translation.aggFilter.     assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.in(params.a0, params.v0))", aggFilter.scriptTemplate().toString()).     assertThat(aggFilter.scriptTemplate().params().toString(), startsWith("[{a=max(int){a->")).     assertThat(aggFilter.scriptTemplate().params().toString(), endsWith(", {v=[10, null, 20, 30]}]")). }
false;public;0;18;;public void testTranslateMathFunction_HavingClause_Painless() {     MathOperation operation = (MathOperation) randomFrom(Stream.of(MathOperation.values()).filter(o -> o != PI && o != E).toArray()).     LogicalPlan p = plan("SELECT keyword, max(int) FROM test GROUP BY keyword HAVING " + operation.name() + "(max(int)) > 10").     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, true).     assertNull(translation.query).     AggFilter aggFilter = translation.aggFilter.     assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(InternalSqlScriptUtils." + operation.name().toLowerCase(Locale.ROOT) + "(params.a0),params.v0))", aggFilter.scriptTemplate().toString()).     assertThat(aggFilter.scriptTemplate().params().toString(), startsWith("[{a=max(int){a->")).     assertThat(aggFilter.scriptTemplate().params().toString(), endsWith(", {v=10}]")). }
false;public;0;14;;public void testGroupByAndHavingWithFunctionOnTopOfAggregation() {     LogicalPlan p = plan("SELECT keyword, MAX(int) FROM test GROUP BY 1 HAVING ABS(MAX(int)) > 10").     assertTrue(p instanceof Filter).     Expression condition = ((Filter) p).condition().     assertFalse(condition.foldable()).     QueryTranslation translation = QueryTranslator.toQuery(condition, true).     assertNull(translation.query).     AggFilter aggFilter = translation.aggFilter.     assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(InternalSqlScriptUtils.abs" + "(params.a0),params.v0))", aggFilter.scriptTemplate().toString()).     assertThat(aggFilter.scriptTemplate().params().toString(), startsWith("[{a=MAX(int){a->")).     assertThat(aggFilter.scriptTemplate().params().toString(), endsWith(", {v=10}]")). }
false;public;0;12;;public void testTranslateCoalesce_GroupBy_Painless() {     LogicalPlan p = plan("SELECT COALESCE(int, 10) FROM test GROUP BY 1").     assertTrue(p instanceof Aggregate).     Expression condition = ((Aggregate) p).groupings().get(0).     assertFalse(condition.foldable()).     QueryTranslator.GroupingContext groupingContext = QueryTranslator.groupBy(((Aggregate) p).groupings()).     assertNotNull(groupingContext).     ScriptTemplate scriptTemplate = groupingContext.tail.script().     assertEquals("InternalSqlScriptUtils.coalesce([InternalSqlScriptUtils.docValue(doc,params.v0),params.v1])", scriptTemplate.toString()).     assertEquals("[{v=int}, {v=10}]", scriptTemplate.params().toString()). }
false;public;0;12;;public void testTranslateNullIf_GroupBy_Painless() {     LogicalPlan p = plan("SELECT NULLIF(int, 10) FROM test GROUP BY 1").     assertTrue(p instanceof Aggregate).     Expression condition = ((Aggregate) p).groupings().get(0).     assertFalse(condition.foldable()).     QueryTranslator.GroupingContext groupingContext = QueryTranslator.groupBy(((Aggregate) p).groupings()).     assertNotNull(groupingContext).     ScriptTemplate scriptTemplate = groupingContext.tail.script().     assertEquals("InternalSqlScriptUtils.nullif(InternalSqlScriptUtils.docValue(doc,params.v0),params.v1)", scriptTemplate.toString()).     assertEquals("[{v=int}, {v=10}]", scriptTemplate.params().toString()). }
false;public;0;14;;public void testGroupByDateHistogram() {     LogicalPlan p = plan("SELECT MAX(int) FROM test GROUP BY HISTOGRAM(int, 1000)").     assertTrue(p instanceof Aggregate).     Aggregate a = (Aggregate) p.     List<Expression> groupings = a.groupings().     assertEquals(1, groupings.size()).     Expression exp = groupings.get(0).     assertEquals(Histogram.class, exp.getClass()).     Histogram h = (Histogram) exp.     assertEquals(1000, h.interval().fold()).     Expression field = h.field().     assertEquals(FieldAttribute.class, field.getClass()).     assertEquals(DataType.INTEGER, field.dataType()). }
false;public;0;14;;public void testGroupByHistogram() {     LogicalPlan p = plan("SELECT MAX(int) FROM test GROUP BY HISTOGRAM(date, INTERVAL 2 YEARS)").     assertTrue(p instanceof Aggregate).     Aggregate a = (Aggregate) p.     List<Expression> groupings = a.groupings().     assertEquals(1, groupings.size()).     Expression exp = groupings.get(0).     assertEquals(Histogram.class, exp.getClass()).     Histogram h = (Histogram) exp.     assertEquals("+2-0", h.interval().fold().toString()).     Expression field = h.field().     assertEquals(FieldAttribute.class, field.getClass()).     assertEquals(DataType.DATETIME, field.dataType()). }
false;public;0;14;;public void testGroupByHistogramWithDate() {     LogicalPlan p = plan("SELECT MAX(int) FROM test GROUP BY HISTOGRAM(CAST(date AS DATE), INTERVAL 2 MONTHS)").     assertTrue(p instanceof Aggregate).     Aggregate a = (Aggregate) p.     List<Expression> groupings = a.groupings().     assertEquals(1, groupings.size()).     Expression exp = groupings.get(0).     assertEquals(Histogram.class, exp.getClass()).     Histogram h = (Histogram) exp.     assertEquals("+0-2", h.interval().fold().toString()).     Expression field = h.field().     assertEquals(Cast.class, field.getClass()).     assertEquals(DataType.DATE, field.dataType()). }
false;public;0;9;;public void testGroupByHistogramWithDateAndSmallInterval() {     PhysicalPlan p = optimizeAndPlan("SELECT MAX(int) FROM test GROUP BY " + "HISTOGRAM(CAST(date AS DATE), INTERVAL 5 MINUTES)").     assertEquals(EsQueryExec.class, p.getClass()).     EsQueryExec eqe = (EsQueryExec) p.     assertEquals(1, eqe.queryContainer().aggs().groups().size()).     assertEquals(GroupByDateHistogram.class, eqe.queryContainer().aggs().groups().get(0).getClass()).     assertEquals(86400000L, ((GroupByDateHistogram) eqe.queryContainer().aggs().groups().get(0)).interval()). }
false;public;0;20;;public void testGroupByHistogramWithDateTruncateIntervalToDayMultiples() {     {         PhysicalPlan p = optimizeAndPlan("SELECT MAX(int) FROM test GROUP BY " + "HISTOGRAM(CAST(date AS DATE), INTERVAL '2 3:04' DAY TO MINUTE)").         assertEquals(EsQueryExec.class, p.getClass()).         EsQueryExec eqe = (EsQueryExec) p.         assertEquals(1, eqe.queryContainer().aggs().groups().size()).         assertEquals(GroupByDateHistogram.class, eqe.queryContainer().aggs().groups().get(0).getClass()).         assertEquals(172800000L, ((GroupByDateHistogram) eqe.queryContainer().aggs().groups().get(0)).interval()).     }     {         PhysicalPlan p = optimizeAndPlan("SELECT MAX(int) FROM test GROUP BY " + "HISTOGRAM(CAST(date AS DATE), INTERVAL 4409 MINUTES)").         assertEquals(EsQueryExec.class, p.getClass()).         EsQueryExec eqe = (EsQueryExec) p.         assertEquals(1, eqe.queryContainer().aggs().groups().size()).         assertEquals(GroupByDateHistogram.class, eqe.queryContainer().aggs().groups().get(0).getClass()).         assertEquals(259200000L, ((GroupByDateHistogram) eqe.queryContainer().aggs().groups().get(0)).interval()).     } }
false;public;0;23;;public void testCountAndCountDistinctFolding() {     PhysicalPlan p = optimizeAndPlan("SELECT COUNT(DISTINCT keyword) dkey, COUNT(keyword) key FROM test").     assertEquals(EsQueryExec.class, p.getClass()).     EsQueryExec ee = (EsQueryExec) p.     assertEquals(2, ee.output().size()).     assertThat(ee.output().get(0).toString(), startsWith("dkey{a->")).     assertThat(ee.output().get(1).toString(), startsWith("key{a->")).     Collection<AggregationBuilder> subAggs = ee.queryContainer().aggs().asAggBuilder().getSubAggregations().     assertEquals(2, subAggs.size()).     assertTrue(subAggs.toArray()[0] instanceof CardinalityAggregationBuilder).     assertTrue(subAggs.toArray()[1] instanceof FilterAggregationBuilder).     CardinalityAggregationBuilder cardinalityKeyword = (CardinalityAggregationBuilder) subAggs.toArray()[0].     assertEquals("keyword", cardinalityKeyword.field()).     FilterAggregationBuilder existsKeyword = (FilterAggregationBuilder) subAggs.toArray()[1].     assertTrue(existsKeyword.getFilter() instanceof ExistsQueryBuilder).     assertEquals("keyword", ((ExistsQueryBuilder) existsKeyword.getFilter()).fieldName()).     assertThat(ee.queryContainer().aggs().asAggBuilder().toString().replaceAll("\\s+", ""), endsWith("{\"filter\":{\"exists\":{\"field\":\"keyword\",\"boost\":1.0}}}}}}")). }
false;public;0;62;;public void testAllCountVariantsWithHavingGenerateCorrectAggregations() {     PhysicalPlan p = optimizeAndPlan("SELECT AVG(int), COUNT(keyword) ln, COUNT(distinct keyword) dln, COUNT(some.dotted.field) fn," + "COUNT(distinct some.dotted.field) dfn, COUNT(*) ccc FROM test GROUP BY bool " + "HAVING dln > 3 AND ln > 32 AND dfn > 1 AND fn > 2 AND ccc > 5 AND AVG(int) > 50000").     assertEquals(EsQueryExec.class, p.getClass()).     EsQueryExec ee = (EsQueryExec) p.     assertEquals(6, ee.output().size()).     assertThat(ee.output().get(0).toString(), startsWith("AVG(int){a->")).     assertThat(ee.output().get(1).toString(), startsWith("ln{a->")).     assertThat(ee.output().get(2).toString(), startsWith("dln{a->")).     assertThat(ee.output().get(3).toString(), startsWith("fn{a->")).     assertThat(ee.output().get(4).toString(), startsWith("dfn{a->")).     assertThat(ee.output().get(5).toString(), startsWith("ccc{a->")).     Collection<AggregationBuilder> subAggs = ee.queryContainer().aggs().asAggBuilder().getSubAggregations().     assertEquals(5, subAggs.size()).     assertTrue(subAggs.toArray()[0] instanceof AvgAggregationBuilder).     assertTrue(subAggs.toArray()[1] instanceof FilterAggregationBuilder).     assertTrue(subAggs.toArray()[2] instanceof CardinalityAggregationBuilder).     assertTrue(subAggs.toArray()[3] instanceof FilterAggregationBuilder).     assertTrue(subAggs.toArray()[4] instanceof CardinalityAggregationBuilder).     AvgAggregationBuilder avgInt = (AvgAggregationBuilder) subAggs.toArray()[0].     assertEquals("int", avgInt.field()).     FilterAggregationBuilder existsKeyword = (FilterAggregationBuilder) subAggs.toArray()[1].     assertTrue(existsKeyword.getFilter() instanceof ExistsQueryBuilder).     assertEquals("keyword", ((ExistsQueryBuilder) existsKeyword.getFilter()).fieldName()).     CardinalityAggregationBuilder cardinalityKeyword = (CardinalityAggregationBuilder) subAggs.toArray()[2].     assertEquals("keyword", cardinalityKeyword.field()).     FilterAggregationBuilder existsDottedField = (FilterAggregationBuilder) subAggs.toArray()[3].     assertTrue(existsDottedField.getFilter() instanceof ExistsQueryBuilder).     assertEquals("some.dotted.field", ((ExistsQueryBuilder) existsDottedField.getFilter()).fieldName()).     CardinalityAggregationBuilder cardinalityDottedField = (CardinalityAggregationBuilder) subAggs.toArray()[4].     assertEquals("some.dotted.field", cardinalityDottedField.field()).     assertThat(ee.queryContainer().aggs().asAggBuilder().toString().replaceAll("\\s+", ""), endsWith("{\"buckets_path\":{" + "\"a0\":\"" + cardinalityKeyword.getName() + "\"," + "\"a1\":\"" + existsKeyword.getName() + "._count\"," + "\"a2\":\"" + cardinalityDottedField.getName() + "\"," + "\"a3\":\"" + existsDottedField.getName() + "._count\"," + "\"a4\":\"_count\"," + "\"a5\":\"" + avgInt.getName() + "\"}," + "\"script\":{\"source\":\"" + "InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.and(" + "InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.and(" + "InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.and(" + "InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.and(" + "InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.and(" + "InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(params.a0,params.v0))," + "InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(params.a1,params.v1))))," + "InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(params.a2,params.v2))))," + "InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(params.a3,params.v3))))," + "InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(params.a4,params.v4))))," + "InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(params.a5,params.v5))))\"," + "\"lang\":\"painless\",\"params\":{\"v0\":3,\"v1\":32,\"v2\":1,\"v3\":2,\"v4\":5,\"v5\":50000}}," + "\"gap_policy\":\"skip\"}}}}}")). }
false;public;0;26;;public void testTopHitsAggregationWithOneArg() {     {         PhysicalPlan p = optimizeAndPlan("SELECT FIRST(keyword) FROM test").         assertEquals(EsQueryExec.class, p.getClass()).         EsQueryExec eqe = (EsQueryExec) p.         assertEquals(1, eqe.output().size()).         assertEquals("FIRST(keyword)", eqe.output().get(0).qualifiedName()).         assertEquals(DataType.KEYWORD, eqe.output().get(0).dataType()).         assertThat(eqe.queryContainer().aggs().asAggBuilder().toString().replaceAll("\\s+", ""), endsWith("\"top_hits\":{\"from\":0,\"size\":1,\"version\":false,\"seq_no_primary_term\":false," + "\"explain\":false,\"docvalue_fields\":[{\"field\":\"keyword\"}]," + "\"sort\":[{\"keyword\":{\"order\":\"asc\",\"missing\":\"_last\",\"unmapped_type\":\"keyword\"}}]}}}}}")).     }     {         PhysicalPlan p = optimizeAndPlan("SELECT LAST(date) FROM test").         assertEquals(EsQueryExec.class, p.getClass()).         EsQueryExec eqe = (EsQueryExec) p.         assertEquals(1, eqe.output().size()).         assertEquals("LAST(date)", eqe.output().get(0).qualifiedName()).         assertEquals(DataType.DATETIME, eqe.output().get(0).dataType()).         assertThat(eqe.queryContainer().aggs().asAggBuilder().toString().replaceAll("\\s+", ""), endsWith("\"top_hits\":{\"from\":0,\"size\":1,\"version\":false,\"seq_no_primary_term\":false," + "\"explain\":false,\"docvalue_fields\":[{\"field\":\"date\",\"format\":\"epoch_millis\"}]," + "\"sort\":[{\"date\":{\"order\":\"desc\",\"missing\":\"_last\",\"unmapped_type\":\"date\"}}]}}}}}")).     } }
false;public;0;29;;public void testTopHitsAggregationWithTwoArgs() {     {         PhysicalPlan p = optimizeAndPlan("SELECT FIRST(keyword, int) FROM test").         assertEquals(EsQueryExec.class, p.getClass()).         EsQueryExec eqe = (EsQueryExec) p.         assertEquals(1, eqe.output().size()).         assertEquals("FIRST(keyword, int)", eqe.output().get(0).qualifiedName()).         assertEquals(DataType.KEYWORD, eqe.output().get(0).dataType()).         assertThat(eqe.queryContainer().aggs().asAggBuilder().toString().replaceAll("\\s+", ""), endsWith("\"top_hits\":{\"from\":0,\"size\":1,\"version\":false,\"seq_no_primary_term\":false," + "\"explain\":false,\"docvalue_fields\":[{\"field\":\"keyword\"}]," + "\"sort\":[{\"int\":{\"order\":\"asc\",\"missing\":\"_last\",\"unmapped_type\":\"integer\"}}," + "{\"keyword\":{\"order\":\"asc\",\"missing\":\"_last\",\"unmapped_type\":\"keyword\"}}]}}}}}")).     }     {         PhysicalPlan p = optimizeAndPlan("SELECT LAST(date, int) FROM test").         assertEquals(EsQueryExec.class, p.getClass()).         EsQueryExec eqe = (EsQueryExec) p.         assertEquals(1, eqe.output().size()).         assertEquals("LAST(date, int)", eqe.output().get(0).qualifiedName()).         assertEquals(DataType.DATETIME, eqe.output().get(0).dataType()).         assertThat(eqe.queryContainer().aggs().asAggBuilder().toString().replaceAll("\\s+", ""), endsWith("\"top_hits\":{\"from\":0,\"size\":1,\"version\":false,\"seq_no_primary_term\":false," + "\"explain\":false,\"docvalue_fields\":[{\"field\":\"date\",\"format\":\"epoch_millis\"}]," + "\"sort\":[{\"int\":{\"order\":\"desc\",\"missing\":\"_last\",\"unmapped_type\":\"integer\"}}," + "{\"date\":{\"order\":\"desc\",\"missing\":\"_last\",\"unmapped_type\":\"date\"}}]}}}}}")).     } }
false;public;0;6;;public void testGlobalCountInImplicitGroupByForcesTrackHits() throws Exception {     PhysicalPlan p = optimizeAndPlan("SELECT COUNT(*) FROM test").     assertEquals(EsQueryExec.class, p.getClass()).     EsQueryExec eqe = (EsQueryExec) p.     assertTrue("Should be tracking hits", eqe.queryContainer().shouldTrackHits()). }
false;public;0;6;;public void testGlobalCountAllInImplicitGroupByForcesTrackHits() throws Exception {     PhysicalPlan p = optimizeAndPlan("SELECT COUNT(ALL *) FROM test").     assertEquals(EsQueryExec.class, p.getClass()).     EsQueryExec eqe = (EsQueryExec) p.     assertTrue("Should be tracking hits", eqe.queryContainer().shouldTrackHits()). }
false;public;0;6;;public void testGlobalCountInSpecificGroupByDoesNotForceTrackHits() throws Exception {     PhysicalPlan p = optimizeAndPlan("SELECT COUNT(*) FROM test GROUP BY int").     assertEquals(EsQueryExec.class, p.getClass()).     EsQueryExec eqe = (EsQueryExec) p.     assertFalse("Should NOT be tracking hits", eqe.queryContainer().shouldTrackHits()). }
false;public;0;6;;public void testFieldAllCountDoesNotTrackHits() throws Exception {     PhysicalPlan p = optimizeAndPlan("SELECT COUNT(ALL int) FROM test").     assertEquals(EsQueryExec.class, p.getClass()).     EsQueryExec eqe = (EsQueryExec) p.     assertFalse("Should NOT be tracking hits", eqe.queryContainer().shouldTrackHits()). }
false;public;0;6;;public void testFieldCountDoesNotTrackHits() throws Exception {     PhysicalPlan p = optimizeAndPlan("SELECT COUNT(int) FROM test").     assertEquals(EsQueryExec.class, p.getClass()).     EsQueryExec eqe = (EsQueryExec) p.     assertFalse("Should NOT be tracking hits", eqe.queryContainer().shouldTrackHits()). }
false;public;0;6;;public void testDistinctCountDoesNotTrackHits() throws Exception {     PhysicalPlan p = optimizeAndPlan("SELECT COUNT(DISTINCT int) FROM test").     assertEquals(EsQueryExec.class, p.getClass()).     EsQueryExec eqe = (EsQueryExec) p.     assertFalse("Should NOT be tracking hits", eqe.queryContainer().shouldTrackHits()). }
false;public;0;6;;public void testNoCountDoesNotTrackHits() throws Exception {     PhysicalPlan p = optimizeAndPlan("SELECT int FROM test").     assertEquals(EsQueryExec.class, p.getClass()).     EsQueryExec eqe = (EsQueryExec) p.     assertFalse("Should NOT be tracking hits", eqe.queryContainer().shouldTrackHits()). }
