# id;timestamp;commentText;codeText;commentWords;codeWords
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1524684173;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1538170812;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1538509426;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1540486836;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1540847035;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1541092382;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1542816427;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1543007967;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1544794956;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1544804437;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1545065886;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1545340316;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1546556270;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1549064305;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @ParametersFactory     @SuppressWarnings("rawtypes")     public static List<Object[]> nodeSubclasses() throws IOException;1549383326;Scans the {@code .class} files to identify all classes and_checks if they are subclasses of {@link Node}.;@ParametersFactory_    @SuppressWarnings("rawtypes")_    public static List<Object[]> nodeSubclasses() throws IOException {_        return subclassesOf(Node.class).stream()_            .filter(c -> testClassFor(c) == null)_            .map(c -> new Object[] {c})_            .collect(toList())__    };scans,the,code,class,files,to,identify,all,classes,and,checks,if,they,are,subclasses,of,link,node;parameters,factory,suppress,warnings,rawtypes,public,static,list,object,node,subclasses,throws,ioexception,return,subclasses,of,node,class,stream,filter,c,test,class,for,c,null,map,c,new,object,c,collect,to,list
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1524684173;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {_        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                Map<Object, Object> map = new HashMap<>()__                int size = between(0, 10)__                while (map.size() < size) {_                    Object key = makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                    Object value = makeArg(toBuildClass, pt.getActualTypeArguments()[1])__                    map.put(key, value)__                }_                return map__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt, between(1, 10))__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == LikePattern.class) {_            _            if (argClass == char.class) {_                return randomFrom('\\', '|', '/', '`')__            }_        }__        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }_        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,map,object,object,map,new,hash,map,int,size,between,0,10,while,map,size,size,object,key,make,arg,to,build,class,pt,get,actual,type,arguments,0,object,value,make,arg,to,build,class,pt,get,actual,type,arguments,1,map,put,key,value,return,map,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,between,1,10,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,pattern,class,if,arg,class,char,class,return,random,from,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1538170812;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {_        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                Map<Object, Object> map = new HashMap<>()__                int size = between(0, 10)__                while (map.size() < size) {_                    Object key = makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                    Object value = makeArg(toBuildClass, pt.getActualTypeArguments()[1])__                    map.put(key, value)__                }_                return map__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt, between(1, 10))__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == LikePattern.class) {_            _            if (argClass == char.class) {_                return randomFrom('\\', '|', '/', '`')__            }_        }__        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,map,object,object,map,new,hash,map,int,size,between,0,10,while,map,size,size,object,key,make,arg,to,build,class,pt,get,actual,type,arguments,0,object,value,make,arg,to,build,class,pt,get,actual,type,arguments,1,map,put,key,value,return,map,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,between,1,10,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,pattern,class,if,arg,class,char,class,return,random,from,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1538509426;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {_        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                Map<Object, Object> map = new HashMap<>()__                int size = between(0, 10)__                while (map.size() < size) {_                    Object key = makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                    Object value = makeArg(toBuildClass, pt.getActualTypeArguments()[1])__                    map.put(key, value)__                }_                return map__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt, between(1, 10))__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == LikePattern.class) {_            _            if (argClass == char.class) {_                return randomFrom('\\', '|', '/', '`')__            }_        }__        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,map,object,object,map,new,hash,map,int,size,between,0,10,while,map,size,size,object,key,make,arg,to,build,class,pt,get,actual,type,arguments,0,object,value,make,arg,to,build,class,pt,get,actual,type,arguments,1,map,put,key,value,return,map,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,between,1,10,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,pattern,class,if,arg,class,char,class,return,random,from,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1540486836;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {_        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                Map<Object, Object> map = new HashMap<>()__                int size = between(0, 10)__                while (map.size() < size) {_                    Object key = makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                    Object value = makeArg(toBuildClass, pt.getActualTypeArguments()[1])__                    map.put(key, value)__                }_                return map__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt, between(1, 10))__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == LikePattern.class) {_            _            if (argClass == char.class) {_                return randomFrom('\\', '|', '/', '`')__            }_        }__        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,map,object,object,map,new,hash,map,int,size,between,0,10,while,map,size,size,object,key,make,arg,to,build,class,pt,get,actual,type,arguments,0,object,value,make,arg,to,build,class,pt,get,actual,type,arguments,1,map,put,key,value,return,map,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,between,1,10,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,pattern,class,if,arg,class,char,class,return,random,from,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1540847035;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {__        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                return makeMap(toBuildClass, pt)__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt)__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == LikePattern.class) {_            _            if (argClass == char.class) {_                return randomFrom('\\', '|', '/', '`')__            }_        }__        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,return,make,map,to,build,class,pt,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,pattern,class,if,arg,class,char,class,return,random,from,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1541092382;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {__        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                return makeMap(toBuildClass, pt)__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt)__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == LikePattern.class) {_            _            if (argClass == char.class) {_                return randomFrom('\\', '|', '/', '`')__            }_        }__        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,return,make,map,to,build,class,pt,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,pattern,class,if,arg,class,char,class,return,random,from,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1542816427;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {__        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                return makeMap(toBuildClass, pt)__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt)__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == LikePattern.class) {_            _            if (argClass == char.class) {_                return randomFrom('\\', '|', '/', '`')__            }_        }__        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,return,make,map,to,build,class,pt,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,pattern,class,if,arg,class,char,class,return,random,from,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1543007967;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {__        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                return makeMap(toBuildClass, pt)__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt)__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == LikePattern.class) {_            _            if (argClass == char.class) {_                return randomFrom('\\', '|', '/', '`')__            }_        }__        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,return,make,map,to,build,class,pt,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,pattern,class,if,arg,class,char,class,return,random,from,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1544794956;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {__        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                return makeMap(toBuildClass, pt)__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt)__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == LikePattern.class) {_            _            if (argClass == char.class) {_                return randomFrom('\\', '|', '/', '`')__            }_        } else if (toBuildClass == CurrentDateTime.class) {_            if (argClass == Expression.class) {_                return Literal.of(LocationTests.randomLocation(), randomInt(9))__            }_        }_        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,return,make,map,to,build,class,pt,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,pattern,class,if,arg,class,char,class,return,random,from,else,if,to,build,class,current,date,time,class,if,arg,class,expression,class,return,literal,of,location,tests,random,location,random,int,9,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1544804437;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {__        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                return makeMap(toBuildClass, pt)__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt)__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == LikePattern.class) {_            _            if (argClass == char.class) {_                return randomFrom('\\', '|', '/', '`')__            }_        } else if (toBuildClass == Histogram.class) {_            if (argClass == Expression.class) {_                return LiteralTests.randomLiteral()__            }_        } else if (toBuildClass == CurrentDateTime.class) {_            if (argClass == Expression.class) {_                return Literal.of(LocationTests.randomLocation(), randomInt(9))__            }_        }_        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,return,make,map,to,build,class,pt,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,pattern,class,if,arg,class,char,class,return,random,from,else,if,to,build,class,histogram,class,if,arg,class,expression,class,return,literal,tests,random,literal,else,if,to,build,class,current,date,time,class,if,arg,class,expression,class,return,literal,of,location,tests,random,location,random,int,9,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1545065886;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {__        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                return makeMap(toBuildClass, pt)__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt)__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == Like.class) {__            if (argClass == LikePattern.class) {_                return new LikePattern(randomAlphaOfLength(16), randomFrom('\\', '|', '/', '`'))__            }__        } else if (toBuildClass == Histogram.class) {_            if (argClass == Expression.class) {_                return LiteralTests.randomLiteral()__            }_        } else if (toBuildClass == CurrentDateTime.class) {_            if (argClass == Expression.class) {_                return Literal.of(LocationTests.randomLocation(), randomInt(9))__            }_        }_        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,return,make,map,to,build,class,pt,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,class,if,arg,class,like,pattern,class,return,new,like,pattern,random,alpha,of,length,16,random,from,else,if,to,build,class,histogram,class,if,arg,class,expression,class,return,literal,tests,random,literal,else,if,to,build,class,current,date,time,class,if,arg,class,expression,class,return,literal,of,location,tests,random,location,random,int,9,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1545340316;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {__        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                return makeMap(toBuildClass, pt)__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt)__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == Like.class) {__            if (argClass == LikePattern.class) {_                return new LikePattern(randomAlphaOfLength(16), randomFrom('\\', '|', '/', '`'))__            }__        } else if (toBuildClass == Histogram.class) {_            if (argClass == Expression.class) {_                return LiteralTests.randomLiteral()__            }_        } else if (toBuildClass == CurrentDateTime.class) {_            if (argClass == Expression.class) {_                return Literal.of(LocationTests.randomLocation(), randomInt(9))__            }_        }_        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Location.class) {_            _            return LocationTests.randomLocation()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,return,make,map,to,build,class,pt,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,class,if,arg,class,like,pattern,class,return,new,like,pattern,random,alpha,of,length,16,random,from,else,if,to,build,class,histogram,class,if,arg,class,expression,class,return,literal,tests,random,literal,else,if,to,build,class,current,date,time,class,if,arg,class,expression,class,return,literal,of,location,tests,random,location,random,int,9,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,location,class,return,location,tests,random,location,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1546556270;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {__        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                return makeMap(toBuildClass, pt)__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt)__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == Like.class) {__            if (argClass == LikePattern.class) {_                return new LikePattern(randomAlphaOfLength(16), randomFrom('\\', '|', '/', '`'))__            }__        } else if (toBuildClass == Histogram.class) {_            if (argClass == Expression.class) {_                return LiteralTests.randomLiteral()__            }_        } else if (toBuildClass == CurrentDateTime.class) {_            if (argClass == Expression.class) {_                return Literal.of(SourceTests.randomSource(), randomInt(9))__            }_        }_        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Source.class) {_            _            return SourceTests.randomSource()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,return,make,map,to,build,class,pt,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,class,if,arg,class,like,pattern,class,return,new,like,pattern,random,alpha,of,length,16,random,from,else,if,to,build,class,histogram,class,if,arg,class,expression,class,return,literal,tests,random,literal,else,if,to,build,class,current,date,time,class,if,arg,class,expression,class,return,literal,of,source,tests,random,source,random,int,9,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,source,class,return,source,tests,random,source,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1549064305;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {__        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                return makeMap(toBuildClass, pt)__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt)__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == Like.class) {__            if (argClass == LikePattern.class) {_                return new LikePattern(randomAlphaOfLength(16), randomFrom('\\', '|', '/', '`'))__            }__        } else if (toBuildClass == Histogram.class) {_            if (argClass == Expression.class) {_                return LiteralTests.randomLiteral()__            }_        } else if (toBuildClass == CurrentDateTime.class) {_            if (argClass == Expression.class) {_                return Literal.of(SourceTests.randomSource(), randomInt(9))__            }_        }_        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Source.class) {_            _            return SourceTests.randomSource()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,return,make,map,to,build,class,pt,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,class,if,arg,class,like,pattern,class,return,new,like,pattern,random,alpha,of,length,16,random,from,else,if,to,build,class,histogram,class,if,arg,class,expression,class,return,literal,tests,random,literal,else,if,to,build,class,current,date,time,class,if,arg,class,expression,class,return,literal,of,source,tests,random,source,random,int,9,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,source,class,return,source,tests,random,source,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> @SuppressWarnings("unchecked")     private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception;1549383326;Make an argument to feed to the constructor for {@code toBuildClass}.;@SuppressWarnings("unchecked")_    private static Object makeArg(Class<? extends Node<?>> toBuildClass, Type argType) throws Exception {__        if (argType instanceof ParameterizedType) {_            ParameterizedType pt = (ParameterizedType) argType__            if (pt.getRawType() == Map.class) {_                return makeMap(toBuildClass, pt)__            }_            if (pt.getRawType() == List.class) {_                return makeList(toBuildClass, pt)__            }_            if (pt.getRawType() == EnumSet.class) {_                @SuppressWarnings("rawtypes")_                Enum enm = (Enum) makeArg(toBuildClass, pt.getActualTypeArguments()[0])__                return EnumSet.of(enm)__            }_            if (pt.getRawType() == Supplier.class) {_                if (toBuildClass == AggExtractorInput.class) {_                    _                    Object o = randomBoolean() ? null : randomAlphaOfLength(5)__                    _                    return new Supplier<Object>() {_                        @Override_                        public Object get() {_                            return o__                        }__                        @Override_                        public int hashCode() {_                            return Objects.hash(o)__                        }__                        @Override_                        public boolean equals(Object obj) {_                            if (obj == null || obj.getClass() != getClass()) {_                                return false__                            }_                            Supplier<?> other = (Supplier<?>) obj__                            return Objects.equals(o, other.get())__                        }_                    }__                }__            }_            throw new IllegalArgumentException("Unsupported parameterized type [" + pt + "]")__        }_        if (argType instanceof WildcardType) {_            WildcardType wt = (WildcardType) argType__            if (wt.getLowerBounds().length > 0 || wt.getUpperBounds().length > 1) {_                throw new IllegalArgumentException("Unsupported wildcard type [" + wt + "]")__            }_            return makeArg(toBuildClass, wt.getUpperBounds()[0])__        }_        Class<?> argClass = (Class<?>) argType___        _        if (toBuildClass == InnerAggregate.class) {_            _            if (argClass == AggregateFunction.class) {_                return makeNode(Avg.class)__            }_        } else if (toBuildClass == FieldAttribute.class) {_            _            if (argClass == FieldAttribute.class && randomBoolean()) {_                return null__            }_        } else if (toBuildClass == ChildrenAreAProperty.class) {_            _            if (argClass == Dummy.class) {_                return makeNode(NoChildren.class)__            }_        } else if (FullTextPredicate.class.isAssignableFrom(toBuildClass)) {_            _            if (argClass == String.class) {_                int size = between(0, 5)__                StringBuilder b = new StringBuilder()__                for (int i = 0_ i < size_ i++) {_                    if (i != 0) {_                        b.append('_')__                    }_                    b.append(randomAlphaOfLength(5)).append('=').append(randomAlphaOfLength(5))__                }_                return b.toString()__            }_        } else if (toBuildClass == Like.class) {__            if (argClass == LikePattern.class) {_                return new LikePattern(randomAlphaOfLength(16), randomFrom('\\', '|', '/', '`'))__            }__        } else if (toBuildClass == Histogram.class) {_            if (argClass == Expression.class) {_                return LiteralTests.randomLiteral()__            }_        } else if (toBuildClass == CurrentDateTime.class) {_            if (argClass == Expression.class) {_                return Literal.of(SourceTests.randomSource(), randomInt(9))__            }_        }_        if (Expression.class == argClass) {_            _            return UnresolvedAttributeTests.randomUnresolvedAttribute()__        }__        if (Pipe.class == argClass) {_            _            return BinaryPipesTests.randomUnaryPipe()__        }__        if (Processor.class == argClass) {_            _            return new ConstantProcessor(randomAlphaOfLength(16))__        }__        if (Node.class.isAssignableFrom(argClass)) {_            _            @SuppressWarnings("unchecked") _            Class<? extends Node<?>> asNodeSubclass = (Class<? extends Node<?>>) argType__            return makeNode(asNodeSubclass)__        }__        if (argClass.isEnum()) {_            _            return randomFrom(argClass.getEnumConstants())__        }_        if (argClass == boolean.class) {_            _            return randomBoolean()__        }_        if (argClass == int.class) {_            return randomInt()__        }_        if (argClass == String.class) {_            _            return randomAlphaOfLength(5)__        }_        if (argClass == Source.class) {_            _            return SourceTests.randomSource()__        }_        try {_            return mock(argClass)__        } catch (MockitoException e) {_            throw new RuntimeException("failed to mock [" + argClass.getName() + "] for [" + toBuildClass.getName() + "]", e)__        }_    };make,an,argument,to,feed,to,the,constructor,for,code,to,build,class;suppress,warnings,unchecked,private,static,object,make,arg,class,extends,node,to,build,class,type,arg,type,throws,exception,if,arg,type,instanceof,parameterized,type,parameterized,type,pt,parameterized,type,arg,type,if,pt,get,raw,type,map,class,return,make,map,to,build,class,pt,if,pt,get,raw,type,list,class,return,make,list,to,build,class,pt,if,pt,get,raw,type,enum,set,class,suppress,warnings,rawtypes,enum,enm,enum,make,arg,to,build,class,pt,get,actual,type,arguments,0,return,enum,set,of,enm,if,pt,get,raw,type,supplier,class,if,to,build,class,agg,extractor,input,class,object,o,random,boolean,null,random,alpha,of,length,5,return,new,supplier,object,override,public,object,get,return,o,override,public,int,hash,code,return,objects,hash,o,override,public,boolean,equals,object,obj,if,obj,null,obj,get,class,get,class,return,false,supplier,other,supplier,obj,return,objects,equals,o,other,get,throw,new,illegal,argument,exception,unsupported,parameterized,type,pt,if,arg,type,instanceof,wildcard,type,wildcard,type,wt,wildcard,type,arg,type,if,wt,get,lower,bounds,length,0,wt,get,upper,bounds,length,1,throw,new,illegal,argument,exception,unsupported,wildcard,type,wt,return,make,arg,to,build,class,wt,get,upper,bounds,0,class,arg,class,class,arg,type,if,to,build,class,inner,aggregate,class,if,arg,class,aggregate,function,class,return,make,node,avg,class,else,if,to,build,class,field,attribute,class,if,arg,class,field,attribute,class,random,boolean,return,null,else,if,to,build,class,children,are,aproperty,class,if,arg,class,dummy,class,return,make,node,no,children,class,else,if,full,text,predicate,class,is,assignable,from,to,build,class,if,arg,class,string,class,int,size,between,0,5,string,builder,b,new,string,builder,for,int,i,0,i,size,i,if,i,0,b,append,b,append,random,alpha,of,length,5,append,append,random,alpha,of,length,5,return,b,to,string,else,if,to,build,class,like,class,if,arg,class,like,pattern,class,return,new,like,pattern,random,alpha,of,length,16,random,from,else,if,to,build,class,histogram,class,if,arg,class,expression,class,return,literal,tests,random,literal,else,if,to,build,class,current,date,time,class,if,arg,class,expression,class,return,literal,of,source,tests,random,source,random,int,9,if,expression,class,arg,class,return,unresolved,attribute,tests,random,unresolved,attribute,if,pipe,class,arg,class,return,binary,pipes,tests,random,unary,pipe,if,processor,class,arg,class,return,new,constant,processor,random,alpha,of,length,16,if,node,class,is,assignable,from,arg,class,suppress,warnings,unchecked,class,extends,node,as,node,subclass,class,extends,node,arg,type,return,make,node,as,node,subclass,if,arg,class,is,enum,return,random,from,arg,class,get,enum,constants,if,arg,class,boolean,class,return,random,boolean,if,arg,class,int,class,return,random,int,if,arg,class,string,class,return,random,alpha,of,length,5,if,arg,class,source,class,return,source,tests,random,source,try,return,mock,arg,class,catch,mockito,exception,e,throw,new,runtime,exception,failed,to,mock,arg,class,get,name,for,to,build,class,get,name,e
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1524684173;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1538170812;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1538509426;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1540486836;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1540847035;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1541092382;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1542816427;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1543007967;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1544794956;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1544804437;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1545065886;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1545340316;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1546556270;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1549064305;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception;1549383326;Build a list of arguments to use when calling_{@code ctor} that make sense when {@code ctor}_builds subclasses of {@link Node}.;private static Object[] ctorArgs(Constructor<? extends Node<?>> ctor) throws Exception {_        Type[] argTypes = ctor.getGenericParameterTypes()__        Object[] args = new Object[argTypes.length]__        for (int i = 0_ i < argTypes.length_ i++) {_            final int currentArgIndex = i__            args[i] = randomValueOtherThanMany(candidate -> {_                    for (int a = 0_ a < currentArgIndex_ a++) {_                        if (Objects.equals(args[a], candidate)) {_                            return true__                        }_                    }_                    return false__                }, () -> {_                    try {_                        return makeArg(ctor.getDeclaringClass(), argTypes[currentArgIndex])__                    } catch (Exception e) {_                        throw new RuntimeException(e)__                    }_                })__        }_        return args__    };build,a,list,of,arguments,to,use,when,calling,code,ctor,that,make,sense,when,code,ctor,builds,subclasses,of,link,node;private,static,object,ctor,args,constructor,extends,node,ctor,throws,exception,type,arg,types,ctor,get,generic,parameter,types,object,args,new,object,arg,types,length,for,int,i,0,i,arg,types,length,i,final,int,current,arg,index,i,args,i,random,value,other,than,many,candidate,for,int,a,0,a,current,arg,index,a,if,objects,equals,args,a,candidate,return,true,return,false,try,return,make,arg,ctor,get,declaring,class,arg,types,current,arg,index,catch,exception,e,throw,new,runtime,exception,e,return,args
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1524684173;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1538170812;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1538509426;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1540486836;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1540847035;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1541092382;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1542816427;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1543007967;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1544794956;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1544804437;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1545065886;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1545340316;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1546556270;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1549064305;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> private static Class<?> testClassFor(Class<?> nodeSubclass);1549383326;The test class for some subclass of node or {@code null}_if there isn't such a class or it doesn't extend_{@link AbstractNodeTestCase}.;private static Class<?> testClassFor(Class<?> nodeSubclass) {_        String testClassName = nodeSubclass.getName() + "Tests"__        try {_            Class<?> c = Class.forName(testClassName)__            if (AbstractNodeTestCase.class.isAssignableFrom(c)) {_                return c__            }_            return null__        } catch (ClassNotFoundException e) {_            return null__        }_    };the,test,class,for,some,subclass,of,node,or,code,null,if,there,isn,t,such,a,class,or,it,doesn,t,extend,link,abstract,node,test,case;private,static,class,test,class,for,class,node,subclass,string,test,class,name,node,subclass,get,name,tests,try,class,c,class,for,name,test,class,name,if,abstract,node,test,case,class,is,assignable,from,c,return,c,return,null,catch,class,not,found,exception,e,return,null
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1524684173;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1538170812;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1538509426;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1540486836;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1540847035;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1541092382;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1542816427;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1543007967;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1544794956;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1544804437;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1545065886;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1545340316;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1546556270;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1549064305;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> static <T> Constructor<T> longestCtor(Class<T> clazz);1549383326;Find the longest constructor of the given class._By convention, for all subclasses of {@link Node},_this constructor should have "all" of the state of_the node. All other constructors should all delegate_to this constructor.;static <T> Constructor<T> longestCtor(Class<T> clazz) {_        Constructor<T> longest = null__        for (Constructor<?> ctor: clazz.getConstructors()) {_            if (longest == null || longest.getParameterCount() < ctor.getParameterCount()) {_                @SuppressWarnings("unchecked") _                Constructor<T> castCtor = (Constructor<T>) ctor__                longest = castCtor__            }_        }_        if (longest == null) {_            throw new IllegalArgumentException("Couldn't find any constructors for [" + clazz.getName() + "]")__        }_        return longest__    };find,the,longest,constructor,of,the,given,class,by,convention,for,all,subclasses,of,link,node,this,constructor,should,have,all,of,the,state,of,the,node,all,other,constructors,should,all,delegate,to,this,constructor;static,t,constructor,t,longest,ctor,class,t,clazz,constructor,t,longest,null,for,constructor,ctor,clazz,get,constructors,if,longest,null,longest,get,parameter,count,ctor,get,parameter,count,suppress,warnings,unchecked,constructor,t,cast,ctor,constructor,t,ctor,longest,cast,ctor,if,longest,null,throw,new,illegal,argument,exception,couldn,t,find,any,constructors,for,clazz,get,name,return,longest
NodeSubclassTests -> private static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1524684173;Find all subclasses of a particular class.;private static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;private,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> private static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1538170812;Find all subclasses of a particular class.;private static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;private,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> private static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1538509426;Find all subclasses of a particular class.;private static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;private,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> private static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1540486836;Find all subclasses of a particular class.;private static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;private,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> private static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1540847035;Find all subclasses of a particular class.;private static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;private,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1541092382;Find all subclasses of a particular class.;public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;public,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1542816427;Find all subclasses of a particular class.;public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;public,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1543007967;Find all subclasses of a particular class.;public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;public,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1544794956;Find all subclasses of a particular class.;public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;public,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1544804437;Find all subclasses of a particular class.;public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;public,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1545065886;Find all subclasses of a particular class.;public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;public,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1545340316;Find all subclasses of a particular class.;public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;public,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1546556270;Find all subclasses of a particular class.;public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;public,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1549064305;Find all subclasses of a particular class.;public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;public,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException;1549383326;Find all subclasses of a particular class.;public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {_        @SuppressWarnings("unchecked") _        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz)__        if (lookup != null) {_            return lookup__        }_        List<Class<? extends T>> results = new ArrayList<>()__        String[] paths = System.getProperty("java.class.path").split(System.getProperty("path.separator"))__        for (String path: paths) {_            Path root = PathUtils.get(path)__            int rootLength = root.toString().length() + 1__            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {__                @Override_                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(".class")) {_                        String className = file.toString()__                        _                        className = className.substring(rootLength, className.length() - ".class".length())__                        _                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), ".")___                        _                        _                        if (!className.startsWith("org.elasticsearch.xpack.sql")) {_                            return FileVisitResult.CONTINUE__                        }__                        Class<?> c__                        try {_                            c = Class.forName(className)__                        } catch (ClassNotFoundException e) {_                            throw new IOException("Couldn't find " + file, e)__                        }__                        if (false == Modifier.isAbstract(c.getModifiers())_                                && false == c.isAnonymousClass()_                                && clazz.isAssignableFrom(c)) {_                            Class<? extends T> s = c.asSubclass(clazz)__                            results.add(s)__                        }_                    }_                    return FileVisitResult.CONTINUE__                }_            })__        }_        subclassCache.put(clazz, results)__        return results__    };find,all,subclasses,of,a,particular,class;public,static,t,list,class,extends,t,subclasses,of,class,t,clazz,throws,ioexception,suppress,warnings,unchecked,list,class,extends,t,lookup,list,class,extends,t,subclass,cache,get,clazz,if,lookup,null,return,lookup,list,class,extends,t,results,new,array,list,string,paths,system,get,property,java,class,path,split,system,get,property,path,separator,for,string,path,paths,path,root,path,utils,get,path,int,root,length,root,to,string,length,1,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,if,files,is,regular,file,file,file,get,file,name,to,string,ends,with,class,string,class,name,file,to,string,class,name,class,name,substring,root,length,class,name,length,class,length,class,name,class,name,replace,path,utils,get,default,file,system,get,separator,if,class,name,starts,with,org,elasticsearch,xpack,sql,return,file,visit,result,continue,class,c,try,c,class,for,name,class,name,catch,class,not,found,exception,e,throw,new,ioexception,couldn,t,find,file,e,if,false,modifier,is,abstract,c,get,modifiers,false,c,is,anonymous,class,clazz,is,assignable,from,c,class,extends,t,s,c,as,subclass,clazz,results,add,s,return,file,visit,result,continue,subclass,cache,put,clazz,results,return,results
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1524684173;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1538170812;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1538509426;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1540847035;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1541092382;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1542816427;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1543007967;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1544794956;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1544804437;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1545065886;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1545340316;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1546556270;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1549064305;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testReplaceChildren() throws Exception;1549383326;Test {@link Node#replaceChildren} implementation on {@link #subclass}.;public void testReplaceChildren() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]__            Type changedArgType = argTypes[changedArgOffset]___            if (originalArgValue instanceof Collection) {_                Collection<?> col = (Collection<?>) originalArgValue___                if (col.isEmpty() || col instanceof EnumSet) {_                    __                    continue__                }__                List<?> originalList = (List<?>) originalArgValue___                if (node.children().equals(originalList)) {_                    _                    @SuppressWarnings("unchecked") _                    List<B> newChildren = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChildren)__                } else if (false == originalList.isEmpty() && node.children().containsAll(originalList)) {_                    __                    _                    @SuppressWarnings("unchecked") _                    List<B> newCollection = (List<B>) makeListOfSameSizeOtherThan(changedArgType, originalList)___                    _                    List<B> originalChildren = node.children()__                    List<B> newChildren = new ArrayList<>(originalChildren.size())__                    int originalOffset = 0__                    for (int i = 0_ i < originalChildren.size()_ i++) {_                        if (originalOffset < originalList.size() && originalChildren.get(i).equals(originalList.get(originalOffset))) {_                            newChildren.add(newCollection.get(originalOffset))__                            originalOffset++__                        } else {_                            newChildren.add(originalChildren.get(i))__                        }_                    }__                    _                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newCollection)__                } else {_                    _                }_            } else {_                if (node.children().contains(originalArgValue)) {_                    _                    List<B> newChildren = new ArrayList<>(node.children())__                    @SuppressWarnings("unchecked") _                    B newChild = (B) randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))__                    newChildren.replaceAll(e -> Objects.equals(originalArgValue, e) ? newChild : e)__                    B transformed = node.replaceChildren(newChildren)__                    assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, newChild)__                } else {_                    _                }_            }_        }_    };test,link,node,replace,children,implementation,on,link,subclass;public,void,test,replace,children,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,if,original,arg,value,instanceof,collection,collection,col,collection,original,arg,value,if,col,is,empty,col,instanceof,enum,set,continue,list,original,list,list,original,arg,value,if,node,children,equals,original,list,suppress,warnings,unchecked,list,b,new,children,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,children,else,if,false,original,list,is,empty,node,children,contains,all,original,list,suppress,warnings,unchecked,list,b,new,collection,list,b,make,list,of,same,size,other,than,changed,arg,type,original,list,list,b,original,children,node,children,list,b,new,children,new,array,list,original,children,size,int,original,offset,0,for,int,i,0,i,original,children,size,i,if,original,offset,original,list,size,original,children,get,i,equals,original,list,get,original,offset,new,children,add,new,collection,get,original,offset,original,offset,else,new,children,add,original,children,get,i,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,collection,else,else,if,node,children,contains,original,arg,value,list,b,new,children,new,array,list,node,children,suppress,warnings,unchecked,b,new,child,b,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,new,children,replace,all,e,objects,equals,original,arg,value,e,new,child,e,b,transformed,node,replace,children,new,children,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,new,child,else
NodeSubclassTests -> public void testTransform() throws Exception;1524684173;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1538170812;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1538509426;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1540486836;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1540847035;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1541092382;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1542816427;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1543007967;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1544794956;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1544804437;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1545065886;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1545340316;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1546556270;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1549064305;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> {_                return Objects.equals(prop, originalArgValue) ? changedArgValue : prop__            }, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,return,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> public void testTransform() throws Exception;1549383326;Test {@link Node#transformPropertiesOnly(java.util.function.Function, Class)}_implementation on {@link #subclass} which tests the implementation of_{@link Node#info()}. And tests the actual {@link NodeInfo} subclass_implementations in the process.;public void testTransform() throws Exception {_        Constructor<T> ctor = longestCtor(subclass)__        Object[] nodeCtorArgs = ctorArgs(ctor)__        T node = ctor.newInstance(nodeCtorArgs)___        Type[] argTypes = ctor.getGenericParameterTypes()__        _        for (int changedArgOffset = 1_ changedArgOffset < ctor.getParameterCount()_ changedArgOffset++) {_            Object originalArgValue = nodeCtorArgs[changedArgOffset]___            Type changedArgType = argTypes[changedArgOffset]__            Object changedArgValue = randomValueOtherThan(nodeCtorArgs[changedArgOffset], () -> makeArg(changedArgType))___            B transformed = node.transformNodeProps(prop -> Objects.equals(prop, originalArgValue) ? changedArgValue : prop, Object.class)___            if (node.children().contains(originalArgValue) || node.children().equals(originalArgValue)) {_                if (node.children().equals(emptyList()) && originalArgValue.equals(emptyList())) {_                    _                    continue__                }_                _                assertSame(node, transformed)__            } else {_                assertTransformedOrReplacedChildren(node, transformed, ctor, nodeCtorArgs, changedArgOffset, changedArgValue)__            }_        }_    };test,link,node,transform,properties,only,java,util,function,function,class,implementation,on,link,subclass,which,tests,the,implementation,of,link,node,info,and,tests,the,actual,link,node,info,subclass,implementations,in,the,process;public,void,test,transform,throws,exception,constructor,t,ctor,longest,ctor,subclass,object,node,ctor,args,ctor,args,ctor,t,node,ctor,new,instance,node,ctor,args,type,arg,types,ctor,get,generic,parameter,types,for,int,changed,arg,offset,1,changed,arg,offset,ctor,get,parameter,count,changed,arg,offset,object,original,arg,value,node,ctor,args,changed,arg,offset,type,changed,arg,type,arg,types,changed,arg,offset,object,changed,arg,value,random,value,other,than,node,ctor,args,changed,arg,offset,make,arg,changed,arg,type,b,transformed,node,transform,node,props,prop,objects,equals,prop,original,arg,value,changed,arg,value,prop,object,class,if,node,children,contains,original,arg,value,node,children,equals,original,arg,value,if,node,children,equals,empty,list,original,arg,value,equals,empty,list,continue,assert,same,node,transformed,else,assert,transformed,or,replaced,children,node,transformed,ctor,node,ctor,args,changed,arg,offset,changed,arg,value
NodeSubclassTests -> private Object makeArg(Type argType);1524684173;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1538170812;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1538509426;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1540486836;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1540847035;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1541092382;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1542816427;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1543007967;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1544794956;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1544804437;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1545065886;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1545340316;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1546556270;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1549064305;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
NodeSubclassTests -> private Object makeArg(Type argType);1549383326;Make an argument to feed the {@link #subclass}'s ctor.;private Object makeArg(Type argType) {_        try {_            return makeArg(subclass, argType)__        } catch (Exception e) {_            _            throw new RuntimeException(e)__        }_    };make,an,argument,to,feed,the,link,subclass,s,ctor;private,object,make,arg,type,arg,type,try,return,make,arg,subclass,arg,type,catch,exception,e,throw,new,runtime,exception,e
