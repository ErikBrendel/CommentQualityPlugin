commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;6;;public static BinaryArithmeticProcessor randomProcessor() {     return new BinaryArithmeticProcessor(new ConstantProcessor(randomLong()), new ConstantProcessor(randomLong()), randomFrom(BinaryArithmeticProcessor.BinaryArithmeticOperation.values())). }
false;protected;0;4;;@Override protected BinaryArithmeticProcessor createTestInstance() {     return randomProcessor(). }
false;protected;0;4;;@Override protected Reader<BinaryArithmeticProcessor> instanceReader() {     return BinaryArithmeticProcessor::new. }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Processors.getNamedWriteables()). }
false;public;0;4;;public void testAdd() {     Processor ba = new Add(EMPTY, l(7), l(3)).makePipe().asProcessor().     assertEquals(10, ba.process(null)). }
false;public;0;4;;public void testSub() {     Processor ba = new Sub(EMPTY, l(7), l(3)).makePipe().asProcessor().     assertEquals(4, ba.process(null)). }
false;public;0;4;;public void testMul() {     Processor ba = new Mul(EMPTY, l(7), l(3)).makePipe().asProcessor().     assertEquals(21, ba.process(null)). }
false;public;0;6;;public void testDiv() {     Processor ba = new Div(EMPTY, l(7), l(3)).makePipe().asProcessor().     assertEquals(2, ((Number) ba.process(null)).longValue()).     ba = new Div(EMPTY, l((double) 7), l(3)).makePipe().asProcessor().     assertEquals(2.33, ((Number) ba.process(null)).doubleValue(), 0.01d). }
false;public;0;4;;public void testMod() {     Processor ba = new Mod(EMPTY, l(7), l(3)).makePipe().asProcessor().     assertEquals(1, ba.process(null)). }
false;public;0;4;;public void testNegate() {     Processor ba = new Neg(EMPTY, l(7)).asPipe().asProcessor().     assertEquals(-7, ba.process(null)). }
true;public;0;10;// ((3*2+4)/2-2)%2 ;// ((3*2+4)/2-2)%2 public void testTree() {     Expression mul = new Mul(EMPTY, l(3), l(2)).     Expression add = new Add(EMPTY, mul, l(4)).     Expression div = new Div(EMPTY, add, l(2)).     Expression sub = new Sub(EMPTY, div, l(2)).     Mod mod = new Mod(EMPTY, sub, l(2)).     Processor proc = mod.makePipe().asProcessor().     assertEquals(1, proc.process(null)). }
false;public;0;8;;public void testHandleNull() {     assertNull(new Add(EMPTY, l(null), l(3)).makePipe().asProcessor().process(null)).     assertNull(new Sub(EMPTY, l(null), l(3)).makePipe().asProcessor().process(null)).     assertNull(new Mul(EMPTY, l(null), l(3)).makePipe().asProcessor().process(null)).     assertNull(new Div(EMPTY, l(null), l(3)).makePipe().asProcessor().process(null)).     assertNull(new Mod(EMPTY, l(null), l(3)).makePipe().asProcessor().process(null)).     assertNull(new Neg(EMPTY, l(null)).makePipe().asProcessor().process(null)). }
false;private,static;1;3;;private static Literal l(Object value) {     return Literal.of(EMPTY, value). }
