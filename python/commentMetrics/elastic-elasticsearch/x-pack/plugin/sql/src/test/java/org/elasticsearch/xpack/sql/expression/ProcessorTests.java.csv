commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void init() throws Exception {     processors = NodeSubclassTests.subclassesOf(Processor.class). }
false;public;0;36;;public void testProcessorRegistration() throws Exception {     LinkedHashSet<String> registered = Processors.getNamedWriteables().stream().map(e -> e.name).collect(toCollection(LinkedHashSet::new)).     // discover available processors     int missing = processors.size() - registered.size().     if (missing > 0) {         List<String> notRegistered = new ArrayList<>().         for (Class<? extends Processor> proc : processors) {             String procName = proc.getName().             assertTrue(procName + " does NOT implement NamedWriteable", NamedWriteable.class.isAssignableFrom(proc)).             Field name = null.             String value = null.             try {                 name = proc.getField("NAME").             } catch (Exception ex) {                 fail(procName + " does NOT provide a NAME field\n" + ex).             }             try {                 value = name.get(proc).toString().             } catch (Exception ex) {                 fail(procName + " does NOT provide a static NAME field\n" + ex).             }             if (!registered.contains(value)) {                 notRegistered.add(procName).             }         }         fail(missing + " processor(s) not registered : " + notRegistered).     } else {         assertEquals("Detection failed: discovered more registered processors than classes", 0, missing).     } }
