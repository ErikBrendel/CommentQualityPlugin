commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static UnresolvedAttribute from(String s) {     return new UnresolvedAttribute(Source.EMPTY, s). }
false;public;0;7;;public void testBasicString() {     String s = "someField".     UnresolvedAttribute ua = from(s).     assertThat(ua.name(), equalTo(s)).     assertThat(ua.qualifiedName(), equalTo(s)).     assertThat(ua.qualifier(), nullValue()). }
false;public;0;7;;public void testSingleQuoteLiteral() {     String name = "@timestamp".     Expression exp = new SqlParser().createExpression("'" + name + "'").     assertThat(exp, instanceOf(Literal.class)).     Literal l = (Literal) exp.     assertThat(l.value(), equalTo(name)). }
false;public;0;8;;public void testMultiSingleQuotedLiteral() {     String first = "bucket".     String second = "head".     Expression exp = new SqlParser().createExpression(format(null, "'{}' '{}'", first, second)).     assertThat(exp, instanceOf(Literal.class)).     Literal l = (Literal) exp.     assertThat(l.value(), equalTo(first + second)). }
false;public;0;10;;public void testQuotedAttribute() {     String quote = "\"".     String name = "@timestamp".     Expression exp = new SqlParser().createExpression(quote + name + quote).     assertThat(exp, instanceOf(UnresolvedAttribute.class)).     UnresolvedAttribute ua = (UnresolvedAttribute) exp.     assertThat(ua.name(), equalTo(name)).     assertThat(ua.qualifiedName(), equalTo(name)).     assertThat(ua.qualifier(), nullValue()). }
false;public;0;7;;public void testBackQuotedAttribute() {     String quote = "`".     String name = "@timestamp".     ParsingException ex = expectThrows(ParsingException.class, () -> new SqlParser().createExpression(quote + name + quote)).     assertThat(ex.getMessage(), equalTo("line 1:1: backquoted identifiers not supported. please use double quotes instead")). }
false;public;0;11;;public void testQuotedAttributeAndQualifier() {     String quote = "\"".     String qualifier = "table".     String name = "@timestamp".     Expression exp = new SqlParser().createExpression(quote + qualifier + quote + "." + quote + name + quote).     assertThat(exp, instanceOf(UnresolvedAttribute.class)).     UnresolvedAttribute ua = (UnresolvedAttribute) exp.     assertThat(ua.name(), equalTo(qualifier + "." + name)).     assertThat(ua.qualifiedName(), equalTo(qualifier + "." + name)).     assertThat(ua.qualifier(), is(nullValue())). }
false;public;0;8;;public void testBackQuotedAttributeAndQualifier() {     String quote = "`".     String qualifier = "table".     String name = "@timestamp".     ParsingException ex = expectThrows(ParsingException.class, () -> new SqlParser().createExpression(quote + qualifier + quote + "." + quote + name + quote)).     assertThat(ex.getMessage(), equalTo("line 1:1: backquoted identifiers not supported. please use double quotes instead")). }
false;public;0;7;;public void testGreedyQuoting() {     LogicalPlan plan = new SqlParser().createStatement("SELECT * FROM \"table\" ORDER BY \"field\"").     final List<LogicalPlan> plans = new ArrayList<>().     plan.forEachDown(plans::add).     assertThat(plans, hasSize(4)).     assertThat(plans.get(1), instanceOf(OrderBy.class)). }
