commented;modifiers;parameterAmount;loc;comment;code
false;private;1;18;;@SuppressWarnings({ "rawtypes", "unchecked" }) private Tuple<Command, SqlSession> sql(String sql) {     EsIndex test = new EsIndex("test", mapping).     Analyzer analyzer = new Analyzer(TestUtils.TEST_CFG, new FunctionRegistry(), IndexResolution.valid(test), new Verifier(new Metrics())).     Command cmd = (Command) analyzer.analyze(parser.createStatement(sql), true).     IndexResolver resolver = mock(IndexResolver.class).     when(resolver.clusterName()).thenReturn("cluster").     doAnswer(invocation -> {         ((ActionListener) invocation.getArguments()[2]).onResponse(singletonList(test)).         return Void.TYPE.     }).when(resolver).resolveAsSeparateMappings(any(), any(), any()).     SqlSession session = new SqlSession(TestUtils.TEST_CFG, null, null, resolver, null, null, null, null, null).     return new Tuple<>(cmd, session). }
false;public;0;28;;public void testSysTypes() throws Exception {     Command cmd = sql("SYS TYPES").v1().     List<String> names = asList("BYTE", "LONG", "BINARY", "NULL", "INTEGER", "SHORT", "HALF_FLOAT", "SCALED_FLOAT", "FLOAT", "DOUBLE", "KEYWORD", "TEXT", "IP", "BOOLEAN", "DATE", "DATETIME", "INTERVAL_YEAR", "INTERVAL_MONTH", "INTERVAL_DAY", "INTERVAL_HOUR", "INTERVAL_MINUTE", "INTERVAL_SECOND", "INTERVAL_YEAR_TO_MONTH", "INTERVAL_DAY_TO_HOUR", "INTERVAL_DAY_TO_MINUTE", "INTERVAL_DAY_TO_SECOND", "INTERVAL_HOUR_TO_MINUTE", "INTERVAL_HOUR_TO_SECOND", "INTERVAL_MINUTE_TO_SECOND", "UNSUPPORTED", "OBJECT", "NESTED").     cmd.execute(null, ActionListener.wrap(r -> {         assertEquals(19, r.columnCount()).         assertEquals(DataType.values().length, r.size()).         assertFalse(r.schema().types().contains(DataType.NULL)).         // test numeric as signed         assertFalse(r.column(9, Boolean.class)).         // make sure precision is returned as boolean (not int)         assertFalse(r.column(10, Boolean.class)).         // no auto-increment         assertFalse(r.column(11, Boolean.class)).         for (int i = 0. i < r.size(). i++) {             assertEquals(names.get(i), r.column(0)).             r.advanceRow().         }     }, ex -> fail(ex.getMessage()))). }
false;public;0;3;;public void testSysColsNoArgs() throws Exception {     runSysColumns("SYS COLUMNS"). }
false;public;0;8;;public void testSysColumnEmptyCatalog() throws Exception {     Tuple<Command, SqlSession> sql = sql("SYS COLUMNS CATALOG '' TABLE LIKE '%' LIKE '%'").     sql.v1().execute(sql.v2(), ActionListener.wrap(r -> {         assertEquals(24, r.columnCount()).         assertEquals(22, r.size()).     }, ex -> fail(ex.getMessage()))). }
false;public;0;8;;public void testSysColsTableOnlyCatalog() throws Exception {     Tuple<Command, SqlSession> sql = sql("SYS COLUMNS CATALOG 'catalog'").     sql.v1().execute(sql.v2(), ActionListener.wrap(r -> {         assertEquals(24, r.columnCount()).         assertEquals(0, r.size()).     }, ex -> fail(ex.getMessage()))). }
false;public;0;3;;public void testSysColsTableOnlyPattern() throws Exception {     runSysColumns("SYS COLUMNS TABLE LIKE 'test'"). }
false;public;0;3;;public void testSysColsColOnlyPattern() throws Exception {     runSysColumns("SYS COLUMNS LIKE '%'"). }
false;public;0;3;;public void testSysColsTableAndColsPattern() throws Exception {     runSysColumns("SYS COLUMNS TABLE LIKE 'test' LIKE '%'"). }
false;private;1;39;;private void runSysColumns(String commandVariation) throws Exception {     Tuple<Command, SqlSession> sql = sql(commandVariation).     List<String> names = asList("bool", "int", "text", "keyword", "unsupported", "date", "some", "some.dotted", "some.dotted.field", "some.string", "some.string.normalized", "some.string.typical", "some.ambiguous", "some.ambiguous.one", "some.ambiguous.two", "some.ambiguous.normalized", "dep", "dep.dep_name", "dep.dep_id", "dep.dep_id.keyword", "dep.end_date", "dep.start_date").     sql.v1().execute(sql.v2(), ActionListener.wrap(r -> {         assertEquals(24, r.columnCount()).         assertEquals(22, r.size()).         for (int i = 0. i < r.size(). i++) {             assertEquals("cluster", r.column(0)).             assertNull(r.column(1)).             assertEquals("test", r.column(2)).             assertEquals(names.get(i), r.column(3)).             r.advanceRow().         }     }, ex -> fail(ex.getMessage()))). }
