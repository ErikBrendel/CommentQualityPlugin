commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public QueryBuilder asBuilder() {     return null. }
false;protected;0;4;;@Override protected String innerToString() {     return "". }
false;public;0;4;;public void testEqualsAndHashCode() {     DummyLeafQuery query = new DummyLeafQuery(SourceTests.randomSource()).     checkEqualsAndHashCode(query, LeafQueryTests::copy, LeafQueryTests::mutate). }
false;private,static;1;3;;private static DummyLeafQuery copy(DummyLeafQuery query) {     return new DummyLeafQuery(query.source()). }
false;private,static;1;3;;private static DummyLeafQuery mutate(DummyLeafQuery query) {     return new DummyLeafQuery(SourceTests.mutate(query.source())). }
false;public;0;5;;public void testContainsNestedField() {     Query query = new DummyLeafQuery(SourceTests.randomSource()).     // Leaf queries don't contain nested fields.     assertFalse(query.containsNestedField(randomAlphaOfLength(5), randomAlphaOfLength(5))). }
false;public;0;5;;public void testAddNestedField() {     Query query = new DummyLeafQuery(SourceTests.randomSource()).     // Leaf queries don't contain nested fields.     assertSame(query, query.addNestedField(randomAlphaOfLength(5), randomAlphaOfLength(5), null, randomBoolean())). }
false;public;0;7;;public void testEnrichNestedSort() {     Query query = new DummyLeafQuery(SourceTests.randomSource()).     // Leaf queries don't contain nested fields.     NestedSortBuilder sort = new NestedSortBuilder(randomAlphaOfLength(5)).     query.enrichNestedSort(sort).     assertNull(sort.getFilter()). }
false;public;0;3;;public void testToString() {     assertEquals("DummyLeafQuery@1:2[]", new DummyLeafQuery(new Source(1, 1, StringUtils.EMPTY)).toString()). }
