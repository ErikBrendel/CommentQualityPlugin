commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected ConcatFunctionProcessor createTestInstance() {     return new ConcatFunctionProcessor(new ConstantProcessor(randomRealisticUnicodeOfLengthBetween(0, 128)), new ConstantProcessor(randomRealisticUnicodeOfLengthBetween(0, 128))). }
false;protected;0;4;;@Override protected Reader<ConcatFunctionProcessor> instanceReader() {     return ConcatFunctionProcessor::new. }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Processors.getNamedWriteables()). }
false;public;0;4;;public void testConcatFunctionWithValidInput() {     assertEquals("foobar", new Concat(EMPTY, l("foo"), l("bar")).makePipe().asProcessor().process(null)).     assertEquals("fb", new Concat(EMPTY, l('f'), l('b')).makePipe().asProcessor().process(null)). }
false;public;0;5;;public void testConcatFunctionWithEdgeCases() {     assertEquals("foo", new Concat(EMPTY, l("foo"), l(null)).makePipe().asProcessor().process(null)).     assertEquals("bar", new Concat(EMPTY, l(null), l("bar")).makePipe().asProcessor().process(null)).     assertEquals("", new Concat(EMPTY, l(null), l(null)).makePipe().asProcessor().process(null)). }
false;public;0;8;;public void testConcatFunctionInputsValidation() {     SqlIllegalArgumentException siae = expectThrows(SqlIllegalArgumentException.class, () -> new Concat(EMPTY, l(5), l("foo")).makePipe().asProcessor().process(null)).     assertEquals("A string/char is required. received [5]", siae.getMessage()).     siae = expectThrows(SqlIllegalArgumentException.class, () -> new Concat(EMPTY, l("foo bar"), l(3)).makePipe().asProcessor().process(null)).     assertEquals("A string/char is required. received [3]", siae.getMessage()). }
