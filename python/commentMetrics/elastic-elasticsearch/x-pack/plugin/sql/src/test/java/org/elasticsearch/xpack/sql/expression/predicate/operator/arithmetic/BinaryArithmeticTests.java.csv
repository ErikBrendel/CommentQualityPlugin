commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void testAddNumbers() {     assertEquals(Long.valueOf(3), add(1L, 2L)). }
false;public;0;21;;public void testMod() {     assertEquals(2, mod(10, 8)).     assertEquals(2, mod(10, -8)).     assertEquals(-2, mod(-10, 8)).     assertEquals(-2, mod(-10, -8)).     assertEquals(2L, mod(10L, 8)).     assertEquals(2L, mod(10, -8L)).     assertEquals(-2L, mod(-10L, 8L)).     assertEquals(-2L, mod(-10L, -8L)).     assertEquals(2.3000002f, mod(10.3f, 8L)).     assertEquals(1.5f, mod(10, -8.5f)).     assertEquals(-1.8000002f, mod(-10.3f, 8.5f)).     assertEquals(-1.8000002f, mod(-10.3f, -8.5f)).     assertEquals(2.3000000000000007d, mod(10.3d, 8L)).     assertEquals(1.5d, mod(10, -8.5d)).     assertEquals(-1.8000001907348633d, mod(-10.3f, 8.5d)).     assertEquals(-1.8000000000000007, mod(-10.3d, -8.5d)). }
false;public;0;6;;public void testAddYearMonthIntervals() {     Literal l = interval(Period.ofYears(1), INTERVAL_YEAR).     Literal r = interval(Period.ofMonths(2), INTERVAL_MONTH).     IntervalYearMonth x = add(l, r).     assertEquals(interval(Period.ofYears(1).plusMonths(2), INTERVAL_YEAR_TO_MONTH), L(x)). }
false;public;0;6;;public void testAddYearMonthMixedIntervals() {     Literal l = interval(Period.ofYears(1).plusMonths(5), INTERVAL_YEAR_TO_MONTH).     Literal r = interval(Period.ofMonths(2), INTERVAL_MONTH).     IntervalYearMonth x = add(l, r).     assertEquals(interval(Period.ofYears(1).plusMonths(7), INTERVAL_YEAR_TO_MONTH), L(x)). }
false;public;0;6;;public void testAddDayTimeIntervals() {     Literal l = interval(Duration.ofDays(1), INTERVAL_DAY).     Literal r = interval(Duration.ofHours(2), INTERVAL_HOUR).     IntervalDayTime x = add(l, r).     assertEquals(interval(Duration.ofDays(1).plusHours(2), INTERVAL_DAY_TO_HOUR), L(x)). }
false;public;0;8;;public void testAddYearMonthIntervalToDateTime() {     ZonedDateTime now = ZonedDateTime.now(DateUtils.UTC).     Literal l = L(now).     TemporalAmount t = Period.ofYears(100).plusMonths(50).     Literal r = interval(t, INTERVAL_HOUR).     ZonedDateTime x = add(l, r).     assertEquals(L(now.plus(t)), L(x)). }
false;public;0;8;;public void testAddDayTimeIntervalToDateTime() {     ZonedDateTime now = ZonedDateTime.now(DateUtils.UTC).     Literal l = L(now).     TemporalAmount t = Duration.ofHours(2).     Literal r = interval(Duration.ofHours(2), INTERVAL_HOUR).     ZonedDateTime x = add(l, r).     assertEquals(L(now.plus(t)), L(x)). }
false;public;0;8;;public void testAddDayTimeIntervalToDateTimeReverse() {     ZonedDateTime now = ZonedDateTime.now(DateUtils.UTC).     Literal l = L(now).     TemporalAmount t = Duration.ofHours(2).     Literal r = interval(Duration.ofHours(2), INTERVAL_HOUR).     ZonedDateTime x = add(r, l).     assertEquals(L(now.plus(t)), L(x)). }
false;public;0;5;;public void testAddNumberToIntervalIllegal() {     Literal r = interval(Duration.ofHours(2), INTERVAL_HOUR).     SqlIllegalArgumentException expect = expectThrows(SqlIllegalArgumentException.class, () -> add(r, L(1))).     assertEquals("Cannot compute [+] between [IntervalDayTime] [Integer]", expect.getMessage()). }
false;public;0;6;;public void testSubYearMonthIntervals() {     Literal l = interval(Period.ofYears(1), INTERVAL_YEAR).     Literal r = interval(Period.ofMonths(2), INTERVAL_MONTH).     IntervalYearMonth x = sub(l, r).     assertEquals(interval(Period.ofMonths(10), INTERVAL_YEAR_TO_MONTH), L(x)). }
false;public;0;6;;public void testSubDayTimeIntervals() {     Literal l = interval(Duration.ofDays(1).plusHours(10), INTERVAL_DAY_TO_HOUR).     Literal r = interval(Duration.ofHours(2), INTERVAL_HOUR).     IntervalDayTime x = sub(l, r).     assertEquals(interval(Duration.ofDays(1).plusHours(8), INTERVAL_DAY_TO_HOUR), L(x)). }
false;public;0;8;;public void testSubYearMonthIntervalToDateTime() {     ZonedDateTime now = ZonedDateTime.now(DateUtils.UTC).     Literal l = L(now).     TemporalAmount t = Period.ofYears(100).plusMonths(50).     Literal r = interval(t, INTERVAL_HOUR).     ZonedDateTime x = sub(l, r).     assertEquals(L(now.minus(t)), L(x)). }
false;public;0;8;;public void testSubYearMonthIntervalToDateTimeIllegal() {     ZonedDateTime now = ZonedDateTime.now(DateUtils.UTC).     Literal l = L(now).     TemporalAmount t = Period.ofYears(100).plusMonths(50).     Literal r = interval(t, INTERVAL_HOUR).     SqlIllegalArgumentException ex = expectThrows(SqlIllegalArgumentException.class, () -> sub(r, l)).     assertEquals("Cannot subtract a date from an interval. do you mean the reverse?", ex.getMessage()). }
false;public;0;5;;public void testSubNumberFromIntervalIllegal() {     Literal r = interval(Duration.ofHours(2), INTERVAL_HOUR).     SqlIllegalArgumentException expect = expectThrows(SqlIllegalArgumentException.class, () -> sub(r, L(1))).     assertEquals("Cannot compute [-] between [IntervalDayTime] [Integer]", expect.getMessage()). }
false;public;0;8;;public void testSubDayTimeIntervalToDateTime() {     ZonedDateTime now = ZonedDateTime.now(DateUtils.UTC).     Literal l = L(now).     TemporalAmount t = Duration.ofHours(2).     Literal r = interval(Duration.ofHours(2), INTERVAL_HOUR).     ZonedDateTime x = sub(l, r).     assertEquals(L(now.minus(t)), L(x)). }
false;public;0;7;;public void testMulIntervalNumber() throws Exception {     Literal l = interval(Duration.ofHours(2), INTERVAL_HOUR).     IntervalDayTime interval = mul(l, -1).     assertEquals(INTERVAL_HOUR, interval.dataType()).     Duration p = interval.interval().     assertEquals(Duration.ofHours(2).negated(), p). }
false;public;0;7;;public void testMulNumberInterval() throws Exception {     Literal r = interval(Period.ofYears(1), INTERVAL_YEAR).     IntervalYearMonth interval = mul(-2, r).     assertEquals(INTERVAL_YEAR, interval.dataType()).     Period p = interval.interval().     assertEquals(Period.ofYears(2).negated(), p). }
false;private,static;2;6;;@SuppressWarnings("unchecked") private static <T> T add(Object l, Object r) {     Add add = new Add(EMPTY, L(l), L(r)).     assertTrue(add.foldable()).     return (T) add.fold(). }
false;private,static;2;6;;@SuppressWarnings("unchecked") private static <T> T sub(Object l, Object r) {     Sub sub = new Sub(EMPTY, L(l), L(r)).     assertTrue(sub.foldable()).     return (T) sub.fold(). }
false;private,static;2;6;;@SuppressWarnings("unchecked") private static <T> T mul(Object l, Object r) {     Mul mul = new Mul(EMPTY, L(l), L(r)).     assertTrue(mul.foldable()).     return (T) mul.fold(). }
false;private,static;1;3;;private static Literal L(Object value) {     return Literal.of(EMPTY, value). }
false;private,static;2;5;;private static Literal interval(TemporalAmount value, DataType intervalType) {     Object i = value instanceof Period ? new IntervalYearMonth((Period) value, intervalType) : new IntervalDayTime((Duration) value, intervalType).     return Literal.of(EMPTY, i). }
