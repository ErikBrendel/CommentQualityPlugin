commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;public void testArithmeticFunctionName() {     String e = "5 +  2".     Add add = new Add(s(e), l(5), l(2)).     assertEquals(e, add.sourceText()).     e = "5 /  2".     Div div = new Div(s(e), l(5), l(2)).     assertEquals(e, div.sourceText()).     e = "5%2".     Mod mod = new Mod(s(e), l(5), l(2)).     assertEquals(e, mod.sourceText()).     e = "5  *  2".     Mul mul = new Mul(s(e), l(5), l(2)).     assertEquals(e, mul.sourceText()).     e = "5 -2".     Sub sub = new Sub(s(e), l(5), l(2)).     assertEquals(e, sub.sourceText()).     e = " -  5".     Neg neg = new Neg(s(e), l(5)).     assertEquals(e, neg.sourceText()). }
false;public;0;6;;public void testNameForArithmeticFunctionAppliedOnTableColumn() {     FieldAttribute fa = new FieldAttribute(EMPTY, "myField", new EsField("myESField", DataType.INTEGER, emptyMap(), true)).     String e = "myField  + 10".     Add add = new Add(s(e), fa, l(10)).     assertEquals(e, add.sourceText()). }
false;private,static;1;3;;private static Source s(String text) {     return new Source(Location.EMPTY, text). }
false;private,static;1;3;;private static Literal l(Object value) {     return Literal.of(EMPTY, value). }
