commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static ComputingExtractor randomComputingExtractor() {     return new ComputingExtractor(randomProcessor(), randomAlphaOfLength(10)). }
false;public,static;0;8;;public static Processor randomProcessor() {     List<Supplier<Processor>> options = new ArrayList<>().     options.add(() -> ChainingProcessorTests.randomComposeProcessor()).     options.add(CastProcessorTests::randomCastProcessor).     options.add(DateTimeProcessorTests::randomDateTimeProcessor).     options.add(MathFunctionProcessorTests::randomMathFunctionProcessor).     return randomFrom(options).get(). }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(combine(Processors.getNamedWriteables(), HitExtractors.getNamedWriteables())). }
false;protected;0;4;;@Override protected ComputingExtractor createTestInstance() {     return randomComputingExtractor(). }
false;protected;0;4;;@Override protected Reader<ComputingExtractor> instanceReader() {     return ComputingExtractor::new. }
false;protected;1;7;;@Override protected ComputingExtractor mutateInstance(ComputingExtractor instance) throws IOException {     return new ComputingExtractor(randomValueOtherThan(instance.processor(), () -> randomProcessor()), randomValueOtherThan(instance.hitName(), () -> randomAlphaOfLength(10))). }
false;public;0;16;;public void testGet() {     String fieldName = randomAlphaOfLength(5).     ChainingProcessor extractor = new ChainingProcessor(new HitExtractorProcessor(new FieldHitExtractor(fieldName, null, true)), new MathProcessor(MathOperation.LOG)).     int times = between(1, 1000).     for (int i = 0. i < times. i++) {         double value = randomDouble().         double expected = Math.log(value).         SearchHit hit = new SearchHit(1).         DocumentField field = new DocumentField(fieldName, singletonList(value)).         hit.fields(singletonMap(fieldName, field)).         assertEquals(expected, extractor.process(hit)).     } }
