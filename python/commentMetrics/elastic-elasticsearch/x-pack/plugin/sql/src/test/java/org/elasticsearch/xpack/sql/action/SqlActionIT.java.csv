commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;public void testSqlAction() {     assertAcked(client().admin().indices().prepareCreate("test").get()).     client().prepareBulk().add(new IndexRequest("test").id("1").source("data", "bar", "count", 42)).add(new IndexRequest("test").id("2").source("data", "baz", "count", 43)).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).get().     ensureYellow("test").     boolean dataBeforeCount = randomBoolean().     String columns = dataBeforeCount ? "data, count" : "count, data".     SqlQueryResponse response = new SqlQueryRequestBuilder(client(), SqlQueryAction.INSTANCE).query("SELECT " + columns + " FROM test ORDER BY count").mode(Mode.JDBC).get().     assertThat(response.size(), equalTo(2L)).     assertThat(response.columns(), hasSize(2)).     int dataIndex = dataBeforeCount ? 0 : 1.     int countIndex = dataBeforeCount ? 1 : 0.     assertEquals(new ColumnInfo("", "data", "text", 0), response.columns().get(dataIndex)).     assertEquals(new ColumnInfo("", "count", "long", 20), response.columns().get(countIndex)).     assertThat(response.rows(), hasSize(2)).     assertEquals("bar", response.rows().get(0).get(dataIndex)).     assertEquals(42L, response.rows().get(0).get(countIndex)).     assertEquals("baz", response.rows().get(1).get(dataIndex)).     assertEquals(43L, response.rows().get(1).get(countIndex)). }
