commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testPlainTextDetection() {     TextFormat text = TextFormat.fromMediaTypeOrFormat("text/plain").     assertThat(text, is(TextFormat.PLAIN_TEXT)). }
false;public;0;4;;public void testCsvDetection() {     TextFormat text = TextFormat.fromMediaTypeOrFormat("text/csv").     assertThat(text, is(CSV)). }
false;public;0;4;;public void testTsvDetection() {     TextFormat text = TextFormat.fromMediaTypeOrFormat("text/tab-separated-values").     assertThat(text, is(TSV)). }
false;public;0;4;;public void testInvalidFormat() {     Exception e = expectThrows(IllegalArgumentException.class, () -> TextFormat.fromMediaTypeOrFormat("text/garbage")).     assertEquals("invalid format [text/garbage]", e.getMessage()). }
false;public;0;3;;public void testCsvContentType() {     assertEquals("text/csv. charset=utf-8. header=present", CSV.contentType(req())). }
false;public;0;3;;public void testCsvContentTypeWithoutHeader() {     assertEquals("text/csv. charset=utf-8. header=absent", CSV.contentType(reqNoHeader())). }
false;public;0;3;;public void testTsvContentType() {     assertEquals("text/tab-separated-values. charset=utf-8", TSV.contentType(req())). }
false;public;0;7;;public void testCsvEscaping() {     assertEquals("string", CSV.maybeEscape("string")).     assertEquals("", CSV.maybeEscape("")).     assertEquals("\"\"\"\"", CSV.maybeEscape("\"")).     assertEquals("\"\"\",\"\"\"", CSV.maybeEscape("\",\"")).     assertEquals("\"\"\"quo\"\"ted\"\"\"", CSV.maybeEscape("\"quo\"ted\"")). }
false;public;0;7;;public void testTsvEscaping() {     assertEquals("string", TSV.maybeEscape("string")).     assertEquals("", TSV.maybeEscape("")).     assertEquals("\"", TSV.maybeEscape("\"")).     assertEquals("\\t", TSV.maybeEscape("\t")).     assertEquals("\\n\"\\t", TSV.maybeEscape("\n\"\t")). }
false;public;0;4;;public void testCsvFormatWithEmptyData() {     String text = CSV.format(null, req(), emptyData()).     assertEquals("name\r\n", text). }
false;public;0;4;;public void testTsvFormatWithEmptyData() {     String text = TSV.format(null, req(), emptyData()).     assertEquals("name\n", text). }
false;public;0;7;;public void testCsvFormatWithRegularData() {     String text = CSV.format(null, req(), regularData()).     assertEquals("string,number\r\n" + "Along The River Bank,708\r\n" + "Mind Train,280\r\n", text). }
false;public;0;7;;public void testTsvFormatWithRegularData() {     String text = TSV.format(null, req(), regularData()).     assertEquals("string\tnumber\n" + "Along The River Bank\t708\n" + "Mind Train\t280\n", text). }
false;public;0;7;;public void testCsvFormatWithEscapedData() {     String text = CSV.format(null, req(), escapedData()).     assertEquals("first,\"\"\"special\"\"\"\r\n" + "normal,\"\"\"quo\"\"ted\"\",\n\"\r\n" + "commas,\"a,b,c,\n,d,e,\t\n\"\r\n", text). }
false;public;0;7;;public void testTsvFormatWithEscapedData() {     String text = TSV.format(null, req(), escapedData()).     assertEquals("first\t\"special\"\n" + "normal\t\"quo\"ted\",\\n\n" + "commas\ta,b,c,\\n,d,e,\\t\\n\n", text). }
false;private,static;0;3;;private static SqlQueryResponse emptyData() {     return new SqlQueryResponse(null, Mode.JDBC, false, singletonList(new ColumnInfo("index", "name", "keyword")), emptyList()). }
false;private,static;0;13;;private static SqlQueryResponse regularData() {     // headers     List<ColumnInfo> headers = new ArrayList<>().     headers.add(new ColumnInfo("index", "string", "keyword")).     headers.add(new ColumnInfo("index", "number", "integer")).     // values     List<List<Object>> values = new ArrayList<>().     values.add(asList("Along The River Bank", 11 * 60 + 48)).     values.add(asList("Mind Train", 4 * 60 + 40)).     return new SqlQueryResponse(null, Mode.JDBC, false, headers, values). }
false;private,static;0;13;;private static SqlQueryResponse escapedData() {     // headers     List<ColumnInfo> headers = new ArrayList<>().     headers.add(new ColumnInfo("index", "first", "keyword")).     headers.add(new ColumnInfo("index", "\"special\"", "keyword")).     // values     List<List<Object>> values = new ArrayList<>().     values.add(asList("normal", "\"quo\"ted\",\n")).     values.add(asList("commas", "a,b,c,\n,d,e,\t\n")).     return new SqlQueryResponse(null, Mode.JDBC, false, headers, values). }
false;private,static;0;3;;private static RestRequest req() {     return new FakeRestRequest(). }
false;private,static;0;3;;private static RestRequest reqNoHeader() {     return new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY).withParams(singletonMap("header", "absent")).build(). }
