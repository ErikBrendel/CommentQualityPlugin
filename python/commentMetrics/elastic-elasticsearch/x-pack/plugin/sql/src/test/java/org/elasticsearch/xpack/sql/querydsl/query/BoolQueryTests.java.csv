commented;modifiers;parameterAmount;loc;comment;code
false;static;1;4;;static BoolQuery randomBoolQuery(int depth) {     return new BoolQuery(SourceTests.randomSource(), randomBoolean(), NestedQueryTests.randomQuery(depth), NestedQueryTests.randomQuery(depth)). }
false;public;0;3;;public void testEqualsAndHashCode() {     checkEqualsAndHashCode(randomBoolQuery(5), BoolQueryTests::copy, BoolQueryTests::mutate). }
false;private,static;1;3;;private static BoolQuery copy(BoolQuery query) {     return new BoolQuery(query.source(), query.isAnd(), query.left(), query.right()). }
false;private,static;1;8;;private static BoolQuery mutate(BoolQuery query) {     List<Function<BoolQuery, BoolQuery>> options = Arrays.asList(q -> new BoolQuery(SourceTests.mutate(q.source()), q.isAnd(), q.left(), q.right()), q -> new BoolQuery(q.source(), false == q.isAnd(), q.left(), q.right()), q -> new BoolQuery(q.source(), q.isAnd(), randomValueOtherThan(q.left(), () -> NestedQueryTests.randomQuery(5)), q.right()), q -> new BoolQuery(q.source(), q.isAnd(), q.left(), randomValueOtherThan(q.right(), () -> NestedQueryTests.randomQuery(5)))).     return randomFrom(options).apply(query). }
false;public;0;7;;public void testContainsNestedField() {     assertFalse(boolQueryWithoutNestedChildren().containsNestedField(randomAlphaOfLength(5), randomAlphaOfLength(5))).     String path = randomAlphaOfLength(5).     String field = randomAlphaOfLength(5).     assertTrue(boolQueryWithNestedChildren(path, field).containsNestedField(path, field)). }
false;public;0;13;;public void testAddNestedField() {     Query q = boolQueryWithoutNestedChildren().     assertSame(q, q.addNestedField(randomAlphaOfLength(5), randomAlphaOfLength(5), null, randomBoolean())).     String path = randomAlphaOfLength(5).     String field = randomAlphaOfLength(5).     q = boolQueryWithNestedChildren(path, field).     String newField = randomAlphaOfLength(5).     boolean hasDocValues = randomBoolean().     Query rewritten = q.addNestedField(path, newField, null, hasDocValues).     assertNotSame(q, rewritten).     assertTrue(rewritten.containsNestedField(path, newField)). }
false;public;0;13;;public void testEnrichNestedSort() {     Query q = boolQueryWithoutNestedChildren().     NestedSortBuilder sort = new NestedSortBuilder(randomAlphaOfLength(5)).     q.enrichNestedSort(sort).     assertNull(sort.getFilter()).     String path = randomAlphaOfLength(5).     String field = randomAlphaOfLength(5).     q = boolQueryWithNestedChildren(path, field).     sort = new NestedSortBuilder(path).     q.enrichNestedSort(sort).     assertNotNull(sort.getFilter()). }
false;private;0;4;;private Query boolQueryWithoutNestedChildren() {     return new BoolQuery(SourceTests.randomSource(), randomBoolean(), new MatchAll(SourceTests.randomSource()), new MatchAll(SourceTests.randomSource())). }
false;private;2;16;;private Query boolQueryWithNestedChildren(String path, String field) {     NestedQuery match = new NestedQuery(SourceTests.randomSource(), path, singletonMap(field, new SimpleImmutableEntry<>(randomBoolean(), null)), new MatchAll(SourceTests.randomSource())).     Query matchAll = new MatchAll(SourceTests.randomSource()).     Query left.     Query right.     if (randomBoolean()) {         left = match.         right = matchAll.     } else {         left = matchAll.         right = match.     }     return new BoolQuery(SourceTests.randomSource(), randomBoolean(), left, right). }
false;public;0;6;;public void testToString() {     assertEquals("BoolQuery@1:2[ExistsQuery@1:2[f1] AND ExistsQuery@1:8[f2]]", new BoolQuery(new Source(1, 1, StringUtils.EMPTY), true, new ExistsQuery(new Source(1, 1, StringUtils.EMPTY), "f1"), new ExistsQuery(new Source(1, 7, StringUtils.EMPTY), "f2")).toString()). }
