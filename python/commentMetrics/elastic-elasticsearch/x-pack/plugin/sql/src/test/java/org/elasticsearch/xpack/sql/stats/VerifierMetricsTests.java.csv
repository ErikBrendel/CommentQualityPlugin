commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testWhereQuery() {     Counters c = sql("SELECT emp_no FROM test WHERE languages > 2").     assertEquals(1L, where(c)).     assertEquals(0, limit(c)).     assertEquals(0, groupby(c)).     assertEquals(0, having(c)).     assertEquals(0, orderby(c)).     assertEquals(0, command(c)).     assertEquals(0, local(c)). }
false;public;0;10;;public void testLimitQuery() {     Counters c = sql("SELECT emp_no FROM test LIMIT 4").     assertEquals(0, where(c)).     assertEquals(1L, limit(c)).     assertEquals(0, groupby(c)).     assertEquals(0, having(c)).     assertEquals(0, orderby(c)).     assertEquals(0, command(c)).     assertEquals(0, local(c)). }
false;public;0;10;;public void testGroupByQuery() {     Counters c = sql("SELECT languages, MAX(languages) FROM test GROUP BY languages").     assertEquals(0, where(c)).     assertEquals(0, limit(c)).     assertEquals(1L, groupby(c)).     assertEquals(0, having(c)).     assertEquals(0, orderby(c)).     assertEquals(0, command(c)).     assertEquals(0, local(c)). }
false;public;0;10;;public void testHavingQuery() {     Counters c = sql("SELECT UCASE(gender), MAX(languages) FROM test GROUP BY gender HAVING MAX(languages) > 3").     assertEquals(0, where(c)).     assertEquals(0, limit(c)).     assertEquals(1L, groupby(c)).     assertEquals(1L, having(c)).     assertEquals(0, orderby(c)).     assertEquals(0, command(c)).     assertEquals(0, local(c)). }
false;public;0;10;;public void testOrderByQuery() {     Counters c = sql("SELECT UCASE(gender) FROM test ORDER BY emp_no").     assertEquals(0, where(c)).     assertEquals(0, limit(c)).     assertEquals(0, groupby(c)).     assertEquals(0, having(c)).     assertEquals(1L, orderby(c)).     assertEquals(0, command(c)).     assertEquals(0, local(c)). }
false;public;0;11;;public void testCommand() {     Counters c = sql(randomFrom("SHOW FUNCTIONS", "SHOW COLUMNS FROM library", "SHOW SCHEMAS", "SHOW TABLES", "SYS COLUMNS LIKE '%name'", "SYS TABLES", "SYS TYPES")).     assertEquals(0, where(c)).     assertEquals(0, limit(c)).     assertEquals(0, groupby(c)).     assertEquals(0, having(c)).     assertEquals(0, orderby(c)).     assertEquals(1L, command(c)).     assertEquals(0, local(c)). }
false;public;0;10;;public void testLocalQuery() {     Counters c = sql("SELECT CONCAT('Elastic','search')").     assertEquals(0, where(c)).     assertEquals(0, limit(c)).     assertEquals(0, groupby(c)).     assertEquals(0, having(c)).     assertEquals(0, orderby(c)).     assertEquals(0, command(c)).     assertEquals(1L, local(c)). }
false;public;0;10;;public void testWhereAndLimitQuery() {     Counters c = sql("SELECT emp_no FROM test WHERE languages > 2 LIMIT 5").     assertEquals(1L, where(c)).     assertEquals(1L, limit(c)).     assertEquals(0, groupby(c)).     assertEquals(0, having(c)).     assertEquals(0, orderby(c)).     assertEquals(0, command(c)).     assertEquals(0, local(c)). }
false;public;0;10;;public void testWhereLimitGroupByQuery() {     Counters c = sql("SELECT languages FROM test WHERE languages > 2 GROUP BY languages LIMIT 5").     assertEquals(1L, where(c)).     assertEquals(1L, limit(c)).     assertEquals(1L, groupby(c)).     assertEquals(0, having(c)).     assertEquals(0, orderby(c)).     assertEquals(0, command(c)).     assertEquals(0, local(c)). }
false;public;0;10;;public void testWhereLimitGroupByHavingQuery() {     Counters c = sql("SELECT languages FROM test WHERE languages > 2 GROUP BY languages HAVING MAX(languages) > 3 LIMIT 5").     assertEquals(1L, where(c)).     assertEquals(1L, limit(c)).     assertEquals(1L, groupby(c)).     assertEquals(1L, having(c)).     assertEquals(0, orderby(c)).     assertEquals(0, command(c)).     assertEquals(0, local(c)). }
false;public;0;11;;public void testWhereLimitGroupByHavingOrderByQuery() {     Counters c = sql("SELECT languages FROM test WHERE languages > 2 GROUP BY languages HAVING MAX(languages) > 3" + " ORDER BY languages LIMIT 5").     assertEquals(1L, where(c)).     assertEquals(1L, limit(c)).     assertEquals(1L, groupby(c)).     assertEquals(1L, having(c)).     assertEquals(1L, orderby(c)).     assertEquals(0, command(c)).     assertEquals(0, local(c)). }
false;public;0;16;;public void testTwoQueriesExecuted() {     Metrics metrics = new Metrics().     Verifier verifier = new Verifier(metrics).     sqlWithVerifier("SELECT languages FROM test WHERE languages > 2 GROUP BY languages LIMIT 5", verifier).     sqlWithVerifier("SELECT languages FROM test WHERE languages > 2 GROUP BY languages HAVING MAX(languages) > 3 " + "ORDER BY languages LIMIT 5", verifier).     Counters c = metrics.stats().     assertEquals(2L, where(c)).     assertEquals(2L, limit(c)).     assertEquals(2L, groupby(c)).     assertEquals(1L, having(c)).     assertEquals(1L, orderby(c)).     assertEquals(0, command(c)).     assertEquals(0, local(c)). }
false;public;0;16;;public void testTwoCommandsExecuted() {     String command1 = randomFrom(commands).     Metrics metrics = new Metrics().     Verifier verifier = new Verifier(metrics).     sqlWithVerifier(command1, verifier).     sqlWithVerifier(randomValueOtherThan(command1, () -> randomFrom(commands)), verifier).     Counters c = metrics.stats().     assertEquals(0, where(c)).     assertEquals(0, limit(c)).     assertEquals(0, groupby(c)).     assertEquals(0, having(c)).     assertEquals(0, orderby(c)).     assertEquals(2, command(c)).     assertEquals(0, local(c)). }
false;private;1;3;;private long where(Counters c) {     return c.get(FPREFIX + WHERE). }
false;private;1;3;;private long groupby(Counters c) {     return c.get(FPREFIX + GROUPBY). }
false;private;1;3;;private long limit(Counters c) {     return c.get(FPREFIX + LIMIT). }
false;private;1;3;;private long local(Counters c) {     return c.get(FPREFIX + LOCAL). }
false;private;1;3;;private long having(Counters c) {     return c.get(FPREFIX + HAVING). }
false;private;1;3;;private long orderby(Counters c) {     return c.get(FPREFIX + ORDERBY). }
false;private;1;3;;private long command(Counters c) {     return c.get(FPREFIX + COMMAND). }
false;private;1;3;;private Counters sql(String sql) {     return sql(sql, null). }
false;private;2;3;;private void sqlWithVerifier(String sql, Verifier verifier) {     sql(sql, verifier). }
false;private;2;16;;private Counters sql(String sql, Verifier v) {     Map<String, EsField> mapping = TypesTests.loadMapping("mapping-basic.json").     EsIndex test = new EsIndex("test", mapping).     Verifier verifier = v.     Metrics metrics = null.     if (v == null) {         metrics = new Metrics().         verifier = new Verifier(metrics).     }     Analyzer analyzer = new Analyzer(TestUtils.TEST_CFG, new FunctionRegistry(), IndexResolution.valid(test), verifier).     analyzer.analyze(parser.createStatement(sql), true).     return metrics == null ? null : metrics.stats(). }
