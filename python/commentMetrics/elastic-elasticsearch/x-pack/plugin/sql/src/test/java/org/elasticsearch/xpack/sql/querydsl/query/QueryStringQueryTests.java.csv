commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testQueryBuilding() {     QueryStringQueryBuilder qb = getBuilder("lenient=true").     assertThat(qb.lenient(), equalTo(true)).     qb = getBuilder("lenient=true.default_operator=AND").     assertThat(qb.lenient(), equalTo(true)).     assertThat(qb.defaultOperator(), equalTo(Operator.AND)).     Exception e = expectThrows(IllegalArgumentException.class, () -> getBuilder("pizza=yummy")).     assertThat(e.getMessage(), equalTo("illegal query_string option [pizza]")).     e = expectThrows(ElasticsearchParseException.class, () -> getBuilder("type=aoeu")).     assertThat(e.getMessage(), equalTo("failed to parse [multi_match] query type [aoeu]. unknown type.")). }
false;private,static;1;6;;private static QueryStringQueryBuilder getBuilder(String options) {     final Source source = new Source(1, 1, StringUtils.EMPTY).     final StringQueryPredicate mmqp = new StringQueryPredicate(source, "eggplant", options).     final QueryStringQuery mmq = new QueryStringQuery(source, "eggplant", Collections.singletonMap("foo", 1.0f), mmqp).     return (QueryStringQueryBuilder) mmq.asBuilder(). }
false;public;0;6;;public void testToString() {     final Source source = new Source(1, 1, StringUtils.EMPTY).     final StringQueryPredicate mmqp = new StringQueryPredicate(source, "eggplant", "").     final QueryStringQuery mmq = new QueryStringQuery(source, "eggplant", Collections.singletonMap("foo", 1.0f), mmqp).     assertEquals("QueryStringQuery@1:2[{foo=1.0}:eggplant]", mmq.toString()). }
