commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static CompositeKeyExtractor randomCompositeKeyExtractor() {     return new CompositeKeyExtractor(randomAlphaOfLength(16), randomFrom(asList(Property.values())), randomSafeZone()). }
false;protected;0;4;;@Override protected CompositeKeyExtractor createTestInstance() {     return randomCompositeKeyExtractor(). }
false;protected;0;4;;@Override protected Reader<CompositeKeyExtractor> instanceReader() {     return CompositeKeyExtractor::new. }
false;protected;1;4;;@Override protected CompositeKeyExtractor mutateInstance(CompositeKeyExtractor instance) throws IOException {     return new CompositeKeyExtractor(instance.key() + "mutated", instance.property(), instance.zoneId()). }
false;public;0;6;;public void testExtractBucketCount() {     Bucket bucket = new TestBucket(emptyMap(), randomLong(), new Aggregations(emptyList())).     CompositeKeyExtractor extractor = new CompositeKeyExtractor(randomAlphaOfLength(16), Property.COUNT, randomZone()).     assertEquals(bucket.getDocCount(), extractor.extract(bucket)). }
false;public;0;7;;public void testExtractKey() {     CompositeKeyExtractor extractor = new CompositeKeyExtractor(randomAlphaOfLength(16), Property.VALUE, null).     Object value = new Object().     Bucket bucket = new TestBucket(singletonMap(extractor.key(), value), randomLong(), new Aggregations(emptyList())).     assertEquals(value, extractor.extract(bucket)). }
false;public;0;7;;public void testExtractDate() {     CompositeKeyExtractor extractor = new CompositeKeyExtractor(randomAlphaOfLength(16), Property.VALUE, randomSafeZone()).     long millis = System.currentTimeMillis().     Bucket bucket = new TestBucket(singletonMap(extractor.key(), millis), randomLong(), new Aggregations(emptyList())).     assertEquals(DateUtils.asDateTime(millis, extractor.zoneId()), extractor.extract(bucket)). }
false;public;0;8;;public void testExtractIncorrectDateKey() {     CompositeKeyExtractor extractor = new CompositeKeyExtractor(randomAlphaOfLength(16), Property.VALUE, randomZone()).     Object value = new Object().     Bucket bucket = new TestBucket(singletonMap(extractor.key(), value), randomLong(), new Aggregations(emptyList())).     SqlIllegalArgumentException exception = expectThrows(SqlIllegalArgumentException.class, () -> extractor.extract(bucket)).     assertEquals("Invalid date key returned: " + value, exception.getMessage()). }
true;private,static;0;3;/**  * We need to exclude SystemV/* time zones because they cannot be converted  * back to DateTimeZone which we currently still need to do internally,  * e.g. in bwc serialization and in the extract() method  */ ;/**  * We need to exclude SystemV/* time zones because they cannot be converted  * back to DateTimeZone which we currently still need to do internally,  * e.g. in bwc serialization and in the extract() method  */ private static ZoneId randomSafeZone() {     return randomValueOtherThanMany(zi -> zi.getId().startsWith("SystemV"), () -> randomZone()). }
