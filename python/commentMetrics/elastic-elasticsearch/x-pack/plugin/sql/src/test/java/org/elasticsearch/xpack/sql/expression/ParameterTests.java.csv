commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testSingleParameter() {     Expression expression = new SqlParser().createExpression("a = \n?", Collections.singletonList(new SqlTypedParamValue(DataType.KEYWORD.typeName, "foo"))).     logger.info(expression).     assertThat(expression, instanceOf(Equals.class)).     Expression right = ((Equals) expression).right().     assertThat(right, instanceOf(Literal.class)).     Literal param = (Literal) right.     assertThat(param.dataType(), equalTo(DataType.KEYWORD)).     assertThat(param.dataType(), equalTo(DataType.KEYWORD)).     assertThat(param.value(), equalTo("foo")). }
false;public;0;18;;public void testMultipleParameters() {     Expression expression = new SqlParser().createExpression("(? + ? * ?) - ?", Arrays.asList(new SqlTypedParamValue(DataType.LONG.typeName, 1L), new SqlTypedParamValue(DataType.LONG.typeName, 2L), new SqlTypedParamValue(DataType.LONG.typeName, 3L), new SqlTypedParamValue(DataType.LONG.typeName, 4L))).     assertThat(expression, instanceOf(Sub.class)).     Sub sub = (Sub) expression.     assertThat(((Literal) sub.right()).value(), equalTo(4L)).     assertThat(sub.left(), instanceOf(Add.class)).     Add add = (Add) sub.left().     assertThat(((Literal) add.left()).value(), equalTo(1L)).     assertThat(add.right(), instanceOf(Mul.class)).     Mul mul = (Mul) add.right().     assertThat(((Literal) mul.left()).value(), equalTo(2L)).     assertThat(((Literal) mul.right()).value(), equalTo(3L)). }
false;public;0;9;;public void testNotEnoughParameters() {     ParsingException ex = expectThrows(ParsingException.class, () -> new SqlParser().createExpression("(? + ? * ?) - ?", Arrays.asList(new SqlTypedParamValue(DataType.LONG.typeName, 1L), new SqlTypedParamValue(DataType.LONG.typeName, 2L), new SqlTypedParamValue(DataType.LONG.typeName, 3L)))).     assertThat(ex.getMessage(), containsString("Not enough actual parameters")). }
