commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testMetaDataType() {     assertEquals(Integer.valueOf(9), metaSqlDataType(DATETIME)).     DataType t = randomDataTypeNoDateTime().     assertEquals(t.sqlType.getVendorTypeNumber(), metaSqlDataType(t)). }
false;public;0;4;;public void testMetaDateTypeSub() {     assertEquals(Integer.valueOf(3), metaSqlDateTimeSub(DATETIME)).     assertEquals(Integer.valueOf(0), metaSqlDateTimeSub(randomDataTypeNoDateTime())). }
false;public;0;6;;public void testMetaMinimumScale() {     assertEquals(Short.valueOf((short) 3), metaSqlMinimumScale(DATETIME)).     assertEquals(Short.valueOf((short) 0), metaSqlMinimumScale(LONG)).     assertEquals(Short.valueOf((short) 0), metaSqlMinimumScale(FLOAT)).     assertNull(metaSqlMinimumScale(KEYWORD)). }
false;public;0;6;;public void testMetaMaximumScale() {     assertEquals(Short.valueOf((short) 3), metaSqlMaximumScale(DATETIME)).     assertEquals(Short.valueOf((short) 0), metaSqlMaximumScale(LONG)).     assertEquals(Short.valueOf((short) FLOAT.defaultPrecision), metaSqlMaximumScale(FLOAT)).     assertNull(metaSqlMaximumScale(KEYWORD)). }
false;public;0;6;;public void testMetaRadix() {     assertNull(metaSqlRadix(DATETIME)).     assertNull(metaSqlRadix(KEYWORD)).     assertEquals(Integer.valueOf(10), metaSqlRadix(LONG)).     assertEquals(Integer.valueOf(2), metaSqlRadix(FLOAT)). }
true;public;0;5;// type checks ;// type checks public void testIsInterval() throws Exception {     for (DataType dataType : EnumSet.range(INTERVAL_YEAR, INTERVAL_MINUTE_TO_SECOND)) {         assertTrue(isInterval(dataType)).     } }
false;public;0;6;;public void testIntervalCompatibilityYearMonth() throws Exception {     assertEquals(INTERVAL_YEAR_TO_MONTH, compatibleInterval(INTERVAL_YEAR, INTERVAL_MONTH)).     assertEquals(INTERVAL_YEAR_TO_MONTH, compatibleInterval(INTERVAL_YEAR, INTERVAL_YEAR_TO_MONTH)).     assertEquals(INTERVAL_YEAR_TO_MONTH, compatibleInterval(INTERVAL_MONTH, INTERVAL_YEAR)).     assertEquals(INTERVAL_YEAR_TO_MONTH, compatibleInterval(INTERVAL_MONTH, INTERVAL_YEAR_TO_MONTH)). }
false;public;0;17;;public void testIntervalCompatibilityDayTime() throws Exception {     assertEquals(INTERVAL_DAY_TO_HOUR, compatibleInterval(INTERVAL_DAY, INTERVAL_HOUR)).     assertEquals(INTERVAL_DAY_TO_HOUR, compatibleInterval(INTERVAL_DAY_TO_HOUR, INTERVAL_HOUR)).     assertEquals(INTERVAL_DAY_TO_MINUTE, compatibleInterval(INTERVAL_DAY, INTERVAL_MINUTE)).     assertEquals(INTERVAL_DAY_TO_MINUTE, compatibleInterval(INTERVAL_DAY_TO_HOUR, INTERVAL_HOUR_TO_MINUTE)).     assertEquals(INTERVAL_DAY_TO_MINUTE, compatibleInterval(INTERVAL_MINUTE, INTERVAL_DAY_TO_HOUR)).     assertEquals(INTERVAL_DAY_TO_MINUTE, compatibleInterval(INTERVAL_DAY, INTERVAL_DAY_TO_MINUTE)).     assertEquals(INTERVAL_DAY_TO_SECOND, compatibleInterval(INTERVAL_DAY, INTERVAL_SECOND)).     assertEquals(INTERVAL_DAY_TO_SECOND, compatibleInterval(INTERVAL_MINUTE, INTERVAL_DAY_TO_SECOND)).     assertEquals(INTERVAL_HOUR_TO_MINUTE, compatibleInterval(INTERVAL_MINUTE, INTERVAL_HOUR)).     assertEquals(INTERVAL_HOUR_TO_SECOND, compatibleInterval(INTERVAL_SECOND, INTERVAL_HOUR)).     assertEquals(INTERVAL_HOUR_TO_SECOND, compatibleInterval(INTERVAL_SECOND, INTERVAL_HOUR_TO_MINUTE)).     assertEquals(INTERVAL_HOUR_TO_SECOND, compatibleInterval(INTERVAL_SECOND, INTERVAL_HOUR_TO_MINUTE)).     assertEquals(INTERVAL_MINUTE_TO_SECOND, compatibleInterval(INTERVAL_SECOND, INTERVAL_MINUTE)). }
false;public;0;6;;public void testIncompatibleInterval() throws Exception {     assertNull(compatibleInterval(INTERVAL_YEAR, INTERVAL_SECOND)).     assertNull(compatibleInterval(INTERVAL_YEAR, INTERVAL_DAY_TO_HOUR)).     assertNull(compatibleInterval(INTERVAL_HOUR, INTERVAL_MONTH)).     assertNull(compatibleInterval(INTERVAL_MINUTE_TO_SECOND, INTERVAL_MONTH)). }
false;private;0;3;;private DataType randomDataTypeNoDateTime() {     return randomValueOtherThan(DataType.DATETIME, () -> randomFrom(DataType.values())). }
