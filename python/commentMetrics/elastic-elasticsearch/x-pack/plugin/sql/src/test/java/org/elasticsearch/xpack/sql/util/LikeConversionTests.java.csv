commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static String regex(String pattern) {     return likeToJavaPattern(pattern, '|'). }
false;private,static;1;3;;private static String wildcard(String pattern) {     return likeToLuceneWildcard(pattern, '|'). }
false;public;0;3;;public void testNoRegex() {     assertEquals("^fooBar$", regex("fooBar")). }
false;public;0;3;;public void testEscapedSqlWildcard() {     assertEquals("^foo\\\\_bar$", regex("foo\\|_bar")). }
false;public;0;3;;public void testEscapedSqlWildcardGreedy() {     assertEquals("^foo.*%bar$", regex("foo%|%bar")). }
false;public;0;3;;public void testSimpleSqlRegex1() {     assertEquals("^foo.bar$", regex("foo_bar")). }
false;public;0;3;;public void testSimpleSqlRegex2() {     assertEquals("^foo.*bar$", regex("foo%bar")). }
false;public;0;3;;public void testMultipleSqlRegexes() {     assertEquals("^foo.*bar.$", regex("foo%bar_")). }
false;public;0;3;;public void testJavaRegexNoSqlRegex() {     assertEquals("^foo\\.\\*bar$", regex("foo.*bar")). }
false;public;0;3;;public void testMultipleRegexAndSqlRegex() {     assertEquals("^foo\\\\\\.\\*bar\\..*$", regex("foo\\.*bar.%")). }
false;public;0;3;;public void testEscapedJavaRegex() {     assertEquals("^\\[a-zA-Z\\]$", regex("[a-zA-Z]")). }
false;public;0;3;;public void testComplicatedJavaRegex() {     assertEquals("^\\^\\[0\\.\\.9\\]\\.\\*\\$$", regex("^[0..9].*$")). }
false;public;0;3;;public void testNoWildcard() {     assertEquals("foo", wildcard("foo")). }
false;public;0;3;;public void testQuestionMarkWildcard() {     assertEquals("foo?bar", wildcard("foo_bar")). }
false;public;0;3;;public void testStarWildcard() {     assertEquals("foo*", wildcard("foo%")). }
false;public;0;3;;public void testWildcardEscapeLuceneWildcard() {     assertEquals("foo\\*bar*", wildcard("foo*bar%")). }
false;public;0;3;;public void testWildcardEscapedWildcard() {     assertEquals("foo\\*bar%", wildcard("foo*bar|%")). }
false;public;0;3;;public void testEscapedLuceneEscape() {     assertEquals("foo\\\\\\*bar", wildcard("foo\\*bar")). }
false;public;0;3;;public void testMixOfEscapedLuceneAndSqlEscapes() {     assertEquals("foo\\\\?_\\*bar*", wildcard("foo\\_|_*bar%")). }
false;public;0;3;;public void testWildcardIgnoreEscapedWildcard() {     assertEquals("foo\\\\\\*bar*", wildcard("foo\\*bar%")). }
false;public;0;3;;public void testWildcardDoubleEscaping() {     assertEquals("foo\\\\\\\\bar", wildcard("foo\\\\bar")). }
false;public;0;3;;public void testWildcardTripleEscaping() {     assertEquals("foo\\\\\\\\bar\\?\\\\?", wildcard("foo\\\\bar?\\_")). }
false;public;0;3;;public void testWildcardIgnoreDoubleEscapedButSkipEscapingOfSql() {     assertEquals("foo\\\\\\*bar\\\\?\\?", wildcard("foo\\*bar\\_?")). }
