# id;timestamp;commentText;codeText;commentWords;codeWords
TestUtils -> public static final ZonedDateTime now();1545305995;Returns the current UTC date-time with milliseconds precision._In Java 9+ (as opposed to Java 8) the {@code Clock} implementation uses system's best clock implementation (which could mean_that the precision of the clock can be milliseconds, microseconds or nanoseconds), whereas in Java 8_{@code System.currentTimeMillis()} is always used. To account for these differences, this method defines a new {@code Clock}_which will offer a value for {@code ZonedDateTime.now()} set to always have milliseconds precision.__@return {@link ZonedDateTime} instance for the current date-time with milliseconds precision in UTC;public static final ZonedDateTime now() {_        return ZonedDateTime.now(Clock.tick(Clock.system(DateUtils.UTC), Duration.ofMillis(1)))__    };returns,the,current,utc,date,time,with,milliseconds,precision,in,java,9,as,opposed,to,java,8,the,code,clock,implementation,uses,system,s,best,clock,implementation,which,could,mean,that,the,precision,of,the,clock,can,be,milliseconds,microseconds,or,nanoseconds,whereas,in,java,8,code,system,current,time,millis,is,always,used,to,account,for,these,differences,this,method,defines,a,new,code,clock,which,will,offer,a,value,for,code,zoned,date,time,now,set,to,always,have,milliseconds,precision,return,link,zoned,date,time,instance,for,the,current,date,time,with,milliseconds,precision,in,utc;public,static,final,zoned,date,time,now,return,zoned,date,time,now,clock,tick,clock,system,date,utils,utc,duration,of,millis,1
TestUtils -> public static final ZonedDateTime now();1549225895;Returns the current UTC date-time with milliseconds precision._In Java 9+ (as opposed to Java 8) the {@code Clock} implementation uses system's best clock implementation (which could mean_that the precision of the clock can be milliseconds, microseconds or nanoseconds), whereas in Java 8_{@code System.currentTimeMillis()} is always used. To account for these differences, this method defines a new {@code Clock}_which will offer a value for {@code ZonedDateTime.now()} set to always have milliseconds precision.__@return {@link ZonedDateTime} instance for the current date-time with milliseconds precision in UTC;public static final ZonedDateTime now() {_        return ZonedDateTime.now(Clock.tick(Clock.system(DateUtils.UTC), Duration.ofMillis(1)))__    };returns,the,current,utc,date,time,with,milliseconds,precision,in,java,9,as,opposed,to,java,8,the,code,clock,implementation,uses,system,s,best,clock,implementation,which,could,mean,that,the,precision,of,the,clock,can,be,milliseconds,microseconds,or,nanoseconds,whereas,in,java,8,code,system,current,time,millis,is,always,used,to,account,for,these,differences,this,method,defines,a,new,code,clock,which,will,offer,a,value,for,code,zoned,date,time,now,set,to,always,have,milliseconds,precision,return,link,zoned,date,time,instance,for,the,current,date,time,with,milliseconds,precision,in,utc;public,static,final,zoned,date,time,now,return,zoned,date,time,now,clock,tick,clock,system,date,utils,utc,duration,of,millis,1
