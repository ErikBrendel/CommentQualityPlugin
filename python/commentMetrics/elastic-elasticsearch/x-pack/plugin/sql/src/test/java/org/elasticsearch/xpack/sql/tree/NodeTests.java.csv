commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;public void testToString() {     assertEquals("NoChildren[thing]", new NoChildren(randomSource(), "thing").toString()).     {         ChildrenAreAProperty empty = new ChildrenAreAProperty(randomSource(), emptyList(), "thing").         assertEquals("ChildrenAreAProperty[thing]", empty.toString()).         assertEquals("ChildrenAreAProperty[single]\n\\_ChildrenAreAProperty[thing]", new ChildrenAreAProperty(randomSource(), singletonList(empty), "single").toString()).         assertEquals("ChildrenAreAProperty[many]\n" + "|_ChildrenAreAProperty[thing]\n" + "\\_ChildrenAreAProperty[thing]", new ChildrenAreAProperty(randomSource(), Arrays.asList(empty, empty), "many").toString()).     }     {         NoChildren empty = new NoChildren(randomSource(), "thing").         assertEquals("AChildIsAProperty[single]\n" + "\\_NoChildren[thing]", new AChildIsAProperty(randomSource(), empty, "single").toString()).     } }
false;public;0;3;;public String thing() {     return thing. }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null || obj.getClass() != getClass()) {         return false.     }     Dummy other = (Dummy) obj.     return thing.equals(other.thing) && children().equals(other.children()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(thing, children()). }
false;protected;0;4;;@Override protected NodeInfo<ChildrenAreAProperty> info() {     return NodeInfo.create(this, ChildrenAreAProperty::new, children(), thing()). }
false;public;1;4;;@Override public ChildrenAreAProperty replaceChildren(List<Dummy> newChildren) {     return new ChildrenAreAProperty(source(), newChildren, thing()). }
false;protected;0;4;;@Override protected NodeInfo<AChildIsAProperty> info() {     return NodeInfo.create(this, AChildIsAProperty::new, child(), thing()). }
false;public;1;7;;@Override public AChildIsAProperty replaceChildren(List<Dummy> newChildren) {     if (newChildren.size() != 1) {         throw new IllegalArgumentException("expected [1] child but received [" + newChildren.size() + "]").     }     return new AChildIsAProperty(source(), newChildren.get(0), thing()). }
false;public;0;3;;public Dummy child() {     return children().get(0). }
false;protected;0;4;;@Override protected NodeInfo<NoChildren> info() {     return NodeInfo.create(this, NoChildren::new, thing()). }
false;public;1;4;;@Override public Dummy replaceChildren(List<Dummy> newChildren) {     throw new UnsupportedOperationException("no children to replace"). }
