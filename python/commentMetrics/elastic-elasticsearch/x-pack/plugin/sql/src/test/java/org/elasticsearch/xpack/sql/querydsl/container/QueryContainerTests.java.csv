commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testRewriteToContainNestedFieldNoQuery() {     Query expected = new NestedQuery(source, path, singletonMap(name, new SimpleImmutableEntry<>(hasDocValues, format)), new MatchAll(source)).     assertEquals(expected, QueryContainer.rewriteToContainNestedField(null, source, path, name, format, hasDocValues)). }
false;public;0;7;;public void testRewriteToContainsNestedFieldWhenContainsNestedField() {     Query original = new BoolQuery(source, true, new NestedQuery(source, path, singletonMap(name, new SimpleImmutableEntry<>(hasDocValues, format)), new MatchAll(source)), new RangeQuery(source, randomAlphaOfLength(5), 0, randomBoolean(), 100, randomBoolean())).     assertSame(original, QueryContainer.rewriteToContainNestedField(original, source, path, name, format, randomBoolean())). }
false;public;0;11;;public void testRewriteToContainsNestedFieldWhenCanAddNestedField() {     Query buddy = new RangeQuery(source, randomAlphaOfLength(5), 0, randomBoolean(), 100, randomBoolean()).     Query original = new BoolQuery(source, true, new NestedQuery(source, path, emptyMap(), new MatchAll(source)), buddy).     Query expected = new BoolQuery(source, true, new NestedQuery(source, path, singletonMap(name, new SimpleImmutableEntry<>(hasDocValues, format)), new MatchAll(source)), buddy).     assertEquals(expected, QueryContainer.rewriteToContainNestedField(original, source, path, name, format, hasDocValues)). }
false;public;0;8;;public void testRewriteToContainsNestedFieldWhenDoesNotContainNestedFieldAndCantAdd() {     Query original = new RangeQuery(source, randomAlphaOfLength(5), 0, randomBoolean(), 100, randomBoolean()).     Query expected = new BoolQuery(source, true, original, new NestedQuery(source, path, singletonMap(name, new SimpleImmutableEntry<>(hasDocValues, format)), new MatchAll(source))).     assertEquals(expected, QueryContainer.rewriteToContainNestedField(original, source, path, name, format, hasDocValues)). }
