commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected BinaryStringStringProcessor createTestInstance() {     return new BinaryStringStringProcessor(new ConstantProcessor(randomRealisticUnicodeOfLengthBetween(1, 128)), new ConstantProcessor(randomRealisticUnicodeOfLengthBetween(1, 128)), randomFrom(BinaryStringStringOperation.values())). }
false;protected;0;4;;@Override protected Reader<BinaryStringStringProcessor> instanceReader() {     return BinaryStringStringProcessor::new. }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Processors.getNamedWriteables()). }
false;public;0;8;;public void testPositionFunctionWithValidInput() {     assertEquals(4, new Position(EMPTY, l("bar"), l("foobar")).makePipe().asProcessor().process(null)).     assertEquals(1, new Position(EMPTY, l("foo"), l("foobar")).makePipe().asProcessor().process(null)).     assertEquals(0, new Position(EMPTY, l("foo"), l("bar")).makePipe().asProcessor().process(null)).     assertEquals(3, new Position(EMPTY, l('r'), l("bar")).makePipe().asProcessor().process(null)).     assertEquals(0, new Position(EMPTY, l('z'), l("bar")).makePipe().asProcessor().process(null)).     assertEquals(1, new Position(EMPTY, l('b'), l('b')).makePipe().asProcessor().process(null)). }
false;public;0;5;;public void testPositionFunctionWithEdgeCases() {     assertNull(new Position(EMPTY, l("foo"), l(null)).makePipe().asProcessor().process(null)).     assertNull(new Position(EMPTY, l(null), l("foo")).makePipe().asProcessor().process(null)).     assertNull(new Position(EMPTY, l(null), l(null)).makePipe().asProcessor().process(null)). }
false;public;0;8;;public void testPositionFunctionInputsValidation() {     SqlIllegalArgumentException siae = expectThrows(SqlIllegalArgumentException.class, () -> new Position(EMPTY, l(5), l("foo")).makePipe().asProcessor().process(null)).     assertEquals("A string/char is required. received [5]", siae.getMessage()).     siae = expectThrows(SqlIllegalArgumentException.class, () -> new Position(EMPTY, l("foo bar"), l(3)).makePipe().asProcessor().process(null)).     assertEquals("A string/char is required. received [3]", siae.getMessage()). }
