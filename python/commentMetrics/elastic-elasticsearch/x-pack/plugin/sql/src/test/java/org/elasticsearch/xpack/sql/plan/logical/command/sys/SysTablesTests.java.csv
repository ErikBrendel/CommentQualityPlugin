commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testSysTablesEnumerateCatalog() throws Exception {     executeCommand("SYS TABLES CATALOG LIKE '%'", r -> {         assertEquals(1, r.size()).         assertEquals(CLUSTER_NAME, r.column(0)).     }). }
false;public;0;8;;public void testSysTablesEnumerateTypes() throws Exception {     executeCommand("SYS TABLES TYPE '%'", r -> {         assertEquals(2, r.size()).         assertEquals("BASE TABLE", r.column(3)).         assertTrue(r.advanceRow()).         assertEquals("VIEW", r.column(3)).     }). }
false;public;0;6;;public void testSysTablesDifferentCatalog() throws Exception {     executeCommand("SYS TABLES CATALOG LIKE 'foo'", r -> {         assertEquals(0, r.size()).         assertFalse(r.hasCurrentRow()).     }). }
false;public;0;8;;public void testSysTablesNoTypes() throws Exception {     executeCommand("SYS TABLES", r -> {         assertEquals(2, r.size()).         assertEquals("BASE TABLE", r.column(3)).         assertTrue(r.advanceRow()).         assertEquals("VIEW", r.column(3)).     }, index, alias). }
false;public;0;8;;public void testSysTablesPattern() throws Exception {     executeCommand("SYS TABLES LIKE '%'", r -> {         assertEquals("test", r.column(2)).         assertTrue(r.advanceRow()).         assertEquals(2, r.size()).         assertEquals("alias", r.column(2)).     }, index, alias). }
false;public;0;9;;public void testSysTablesPatternParameterized() throws Exception {     List<SqlTypedParamValue> params = asList(param("%")).     executeCommand("SYS TABLES LIKE ?", params, r -> {         assertEquals("test", r.column(2)).         assertTrue(r.advanceRow()).         assertEquals(2, r.size()).         assertEquals("alias", r.column(2)).     }, alias, index). }
false;public;0;6;;public void testSysTablesOnlyAliases() throws Exception {     executeCommand("SYS TABLES LIKE 'test' TYPE 'ALIAS'", r -> {         assertEquals(1, r.size()).         assertEquals("alias", r.column(2)).     }, alias). }
false;public;0;7;;public void testSysTablesOnlyAliasesParameterized() throws Exception {     List<SqlTypedParamValue> params = asList(param("ALIAS")).     executeCommand("SYS TABLES LIKE 'test' TYPE ?", params, r -> {         assertEquals(1, r.size()).         assertEquals("alias", r.column(2)).     }, alias). }
false;public;0;6;;public void testSysTablesOnlyIndices() throws Exception {     executeCommand("SYS TABLES LIKE 'test' TYPE 'BASE TABLE'", r -> {         assertEquals(1, r.size()).         assertEquals("test", r.column(2)).     }, index). }
false;public;0;8;;public void testSysTablesOnlyIndicesInLegacyMode() throws Exception {     executeCommand("SYS TABLES LIKE 'test' TYPE 'TABLE'", r -> {         assertEquals(1, r.size()).         assertEquals("test", r.column(2)).         assertEquals("TABLE", r.column(3)).     }, index). }
false;public;0;7;;public void testSysTablesOnlyIndicesLegacyModeParameterized() throws Exception {     executeCommand("SYS TABLES LIKE 'test' TYPE ?", asList(param("TABLE")), r -> {         assertEquals(1, r.size()).         assertEquals("test", r.column(2)).         assertEquals("TABLE", r.column(3)).     }, index). }
false;public;0;6;;public void testSysTablesOnlyIndicesParameterized() throws Exception {     executeCommand("SYS TABLES LIKE 'test' TYPE ?", asList(param("ALIAS")), r -> {         assertEquals(1, r.size()).         assertEquals("test", r.column(2)).     }, index). }
false;public;0;8;;public void testSysTablesOnlyIndicesAndAliases() throws Exception {     executeCommand("SYS TABLES LIKE 'test' TYPE 'VIEW', 'BASE TABLE'", r -> {         assertEquals(2, r.size()).         assertEquals("test", r.column(2)).         assertTrue(r.advanceRow()).         assertEquals("alias", r.column(2)).     }, index, alias). }
false;public;0;9;;public void testSysTablesOnlyIndicesAndAliasesParameterized() throws Exception {     List<SqlTypedParamValue> params = asList(param("VIEW"), param("BASE TABLE")).     executeCommand("SYS TABLES LIKE 'test' TYPE ?, ?", params, r -> {         assertEquals(2, r.size()).         assertEquals("test", r.column(2)).         assertTrue(r.advanceRow()).         assertEquals("alias", r.column(2)).     }, index, alias). }
false;public;0;11;;public void testSysTablesOnlyIndicesLegacyAndAliasesParameterized() throws Exception {     List<SqlTypedParamValue> params = asList(param("VIEW"), param("TABLE")).     executeCommand("SYS TABLES LIKE 'test' TYPE ?, ?", params, r -> {         assertEquals(2, r.size()).         assertEquals("test", r.column(2)).         assertEquals("TABLE", r.column(3)).         assertTrue(r.advanceRow()).         assertEquals("alias", r.column(2)).         assertEquals("VIEW", r.column(3)).     }, index, alias). }
false;public;0;6;;public void testSysTablesWithCatalogOnlyAliases() throws Exception {     executeCommand("SYS TABLES CATALOG LIKE '%' LIKE 'test' TYPE 'VIEW'", r -> {         assertEquals(1, r.size()).         assertEquals("alias", r.column(2)).     }, alias). }
false;public;0;5;;public void testSysTablesWithInvalidType() throws Exception {     executeCommand("SYS TABLES LIKE 'test' TYPE 'QUE HORA ES'", r -> {         assertEquals(0, r.size()).     }, new IndexInfo[0]). }
false;public;0;10;;public void testSysTablesCatalogEnumeration() throws Exception {     executeCommand("SYS TABLES CATALOG LIKE '%' LIKE ''", r -> {         assertEquals(1, r.size()).         assertEquals(CLUSTER_NAME, r.column(0)).         // everything else should be null         for (int i = 1. i < 10. i++) {             assertNull(r.column(i)).         }     }, new IndexInfo[0]). }
false;public;0;20;;public void testSysTablesTypesEnumeration() throws Exception {     executeCommand("SYS TABLES CATALOG LIKE '' LIKE '' TYPE '%'", r -> {         assertEquals(2, r.size()).         Iterator<IndexType> it = IndexType.VALID.stream().sorted(Comparator.comparing(IndexType::toSql)).iterator().         for (int t = 0. t < r.size(). t++) {             assertEquals(it.next().toSql(), r.column(3)).             // everything else should be null             for (int i = 0. i < 10. i++) {                 if (i != 3) {                     assertNull(r.column(i)).                 }             }             r.advanceRow().         }     }, new IndexInfo[0]). }
false;public;0;5;;public void testSysTablesTypesEnumerationWoString() throws Exception {     executeCommand("SYS TABLES CATALOG LIKE '' LIKE '' ", r -> {         assertEquals(0, r.size()).     }, new IndexInfo[0]). }
false;private;1;3;;private SqlTypedParamValue param(Object value) {     return new SqlTypedParamValue(DataTypes.fromJava(value).typeName, value). }
false;private;2;12;;private Tuple<Command, SqlSession> sql(String sql, List<SqlTypedParamValue> params) {     EsIndex test = new EsIndex("test", mapping).     Analyzer analyzer = new Analyzer(TestUtils.TEST_CFG, new FunctionRegistry(), IndexResolution.valid(test), new Verifier(new Metrics())).     Command cmd = (Command) analyzer.analyze(parser.createStatement(sql, params), true).     IndexResolver resolver = mock(IndexResolver.class).     when(resolver.clusterName()).thenReturn(CLUSTER_NAME).     SqlSession session = new SqlSession(null, null, null, resolver, null, null, null, null, null).     return new Tuple<>(cmd, session). }
false;private;3;3;;private void executeCommand(String sql, Consumer<SchemaRowSet> consumer, IndexInfo... infos) throws Exception {     executeCommand(sql, emptyList(), consumer, infos). }
false;private;4;14;;@SuppressWarnings({ "unchecked", "rawtypes" }) private void executeCommand(String sql, List<SqlTypedParamValue> params, Consumer<SchemaRowSet> consumer, IndexInfo... infos) throws Exception {     Tuple<Command, SqlSession> tuple = sql(sql, params).     IndexResolver resolver = tuple.v2().indexResolver().     doAnswer(invocation -> {         ((ActionListener) invocation.getArguments()[3]).onResponse(new LinkedHashSet<>(asList(infos))).         return Void.TYPE.     }).when(resolver).resolveNames(any(), any(), any(), any()).     tuple.v1().execute(tuple.v2(), wrap(consumer::accept, ex -> fail(ex.getMessage()))). }
