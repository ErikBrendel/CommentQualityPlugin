commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;public void testEqualsAndHashCode() {     Source source = new Source(between(1, 1000), between(1, 1000), randomAlphaOfLength(16)).     TableIdentifier table = new TableIdentifier(source, randomAlphaOfLength(5), randomAlphaOfLength(5)).     String alias = randomBoolean() ? null : randomAlphaOfLength(5).     String unresolvedMessage = randomAlphaOfLength(5).     UnresolvedRelation relation = new UnresolvedRelation(source, table, alias, unresolvedMessage).     List<Function<UnresolvedRelation, UnresolvedRelation>> mutators = new ArrayList<>().     mutators.add(r -> new UnresolvedRelation(SourceTests.mutate(r.source()), r.table(), r.alias(), r.unresolvedMessage())).     mutators.add(r -> new UnresolvedRelation(r.source(), new TableIdentifier(r.source(), r.table().cluster(), r.table().index() + "m"), r.alias(), r.unresolvedMessage())).     mutators.add(r -> new UnresolvedRelation(r.source(), r.table(), randomValueOtherThanMany(a -> Objects.equals(a, r.alias()), () -> randomBoolean() ? null : randomAlphaOfLength(5)), r.unresolvedMessage())).     mutators.add(r -> new UnresolvedRelation(r.source(), r.table(), r.alias(), randomValueOtherThan(r.unresolvedMessage(), () -> randomAlphaOfLength(5)))).     checkEqualsAndHashCode(relation, r -> new UnresolvedRelation(r.source(), r.table(), r.alias(), r.unresolvedMessage()), r -> randomFrom(mutators).apply(r)). }
