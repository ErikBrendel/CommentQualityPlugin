commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testSupportedByAggsOnlyQuery() {     Pipe supported = new DummyPipe(true).     Pipe unsupported = new DummyPipe(false).     assertFalse(new DummyBinaryPipe(unsupported, unsupported).supportedByAggsOnlyQuery()).     assertTrue(new DummyBinaryPipe(unsupported, supported).supportedByAggsOnlyQuery()).     assertTrue(new DummyBinaryPipe(supported, unsupported).supportedByAggsOnlyQuery()).     assertTrue(new DummyBinaryPipe(supported, supported).supportedByAggsOnlyQuery()). }
false;public;1;4;;@Override public Pipe resolveAttributes(AttributeResolver resolver) {     return resolvesTo. }
false;public;0;25;;public void testResolveAttributes() {     Pipe needsNothing = new DummyPipe(randomBoolean()).     Pipe resolvesTo = new DummyPipe(randomBoolean()).     Pipe needsResolution = new DummyPipe(randomBoolean()) {          @Override         public Pipe resolveAttributes(AttributeResolver resolver) {             return resolvesTo.         }     }.     AttributeResolver resolver = a -> {         fail("not exepected").         return null.     }.     Pipe d = new DummyBinaryPipe(needsNothing, needsNothing).     assertSame(d, d.resolveAttributes(resolver)).     d = new DummyBinaryPipe(needsNothing, needsResolution).     Pipe expected = new DummyBinaryPipe(needsNothing, resolvesTo).     assertEquals(expected, d.resolveAttributes(resolver)).     d = new DummyBinaryPipe(needsResolution, needsNothing).     expected = new DummyBinaryPipe(resolvesTo, needsNothing).     assertEquals(expected, d.resolveAttributes(resolver)). }
false;public;1;4;;@Override public void collectFields(SqlSourceBuilder sourceBuilder) {     sourceBuilder.trackScores(). }
false;public;0;12;;public void testCollectFields() {     DummyPipe wantsScore = new DummyPipe(randomBoolean()) {          @Override         public void collectFields(SqlSourceBuilder sourceBuilder) {             sourceBuilder.trackScores().         }     }.     DummyPipe wantsNothing = new DummyPipe(randomBoolean()).     assertFalse(tracksScores(new DummyBinaryPipe(wantsNothing, wantsNothing))).     assertTrue(tracksScores(new DummyBinaryPipe(wantsScore, wantsNothing))).     assertTrue(tracksScores(new DummyBinaryPipe(wantsNothing, wantsScore))). }
true;static;1;7;/**  * Returns {@code true} if the processor defintion builds a query that  * tracks scores, {@code false} otherwise. Used for testing  * {@link Pipe#collectFields(SqlSourceBuilder)}.  */ ;/**  * Returns {@code true} if the processor defintion builds a query that  * tracks scores, {@code false} otherwise. Used for testing  * {@link Pipe#collectFields(SqlSourceBuilder)}.  */ static boolean tracksScores(Pipe d) {     SqlSourceBuilder b = new SqlSourceBuilder().     d.collectFields(b).     SearchSourceBuilder source = new SearchSourceBuilder().     b.build(source).     return source.trackScores(). }
false;public,static;0;3;;public static BinaryPipe randomBinaryPipe() {     return new DummyBinaryPipe(randomUnaryPipe(), randomUnaryPipe()). }
false;public,static;0;3;;public static Pipe randomUnaryPipe() {     return new ConstantInput(Source.EMPTY, Literal.of(Source.EMPTY, randomAlphaOfLength(16)), randomAlphaOfLength(16)). }
false;protected;0;4;;@Override protected NodeInfo<BinaryPipe> info() {     return NodeInfo.create(this, DummyBinaryPipe::new, left(), right()). }
false;public;0;4;;@Override public Processor asProcessor() {     return null. }
false;protected;2;4;;@Override protected BinaryPipe replaceChildren(Pipe left, Pipe right) {     return new DummyBinaryPipe(source(), left, right). }
false;protected;0;4;;@Override protected NodeInfo<DummyPipe> info() {     return NodeInfo.create(this, DummyPipe::new, supportedByAggsOnlyQuery). }
false;public;1;4;;@Override public Pipe replaceChildren(List<Pipe> newChildren) {     throw new UnsupportedOperationException("this type of node doesn't have any children to replace"). }
false;public;0;4;;@Override public boolean supportedByAggsOnlyQuery() {     return supportedByAggsOnlyQuery. }
false;public;0;4;;@Override public boolean resolved() {     return true. }
false;public;0;4;;@Override public Processor asProcessor() {     return null. }
false;public;1;4;;@Override public Pipe resolveAttributes(AttributeResolver resolver) {     return this. }
false;public;1;3;;@Override public void collectFields(SqlSourceBuilder sourceBuilder) { }
