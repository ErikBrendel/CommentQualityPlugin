commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void init() throws Exception {     licenseState = mock(XPackLicenseState.class).     client = mock(Client.class).     ThreadPool threadPool = mock(ThreadPool.class).     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     when(threadPool.getThreadContext()).thenReturn(threadContext).     when(client.threadPool()).thenReturn(threadPool). }
false;public;0;6;;public void testAvailable() {     SqlFeatureSet featureSet = new SqlFeatureSet(Settings.EMPTY, licenseState, client).     boolean available = randomBoolean().     when(licenseState.isSqlAllowed()).thenReturn(available).     assertThat(featureSet.available(), is(available)). }
false;public;0;13;;public void testEnabled() {     boolean enabled = randomBoolean().     Settings.Builder settings = Settings.builder().     if (enabled) {         if (randomBoolean()) {             settings.put("xpack.sql.enabled", enabled).         }     } else {         settings.put("xpack.sql.enabled", enabled).     }     SqlFeatureSet featureSet = new SqlFeatureSet(settings.build(), licenseState, client).     assertThat(featureSet.enabled(), is(enabled)). }
false;public;0;40;;@SuppressWarnings("unchecked") public void testUsageStats() throws Exception {     doAnswer(mock -> {         ActionListener<SqlStatsResponse> listener = (ActionListener<SqlStatsResponse>) mock.getArguments()[2].         List<SqlStatsResponse.NodeStatsResponse> nodes = new ArrayList<>().         DiscoveryNode first = new DiscoveryNode("first", buildNewFakeTransportAddress(), Version.CURRENT).         SqlStatsResponse.NodeStatsResponse firstNode = new SqlStatsResponse.NodeStatsResponse(first).         Counters firstCounters = new Counters().         firstCounters.inc("foo.foo", 1).         firstCounters.inc("foo.bar.baz", 1).         firstNode.setStats(firstCounters).         nodes.add(firstNode).         DiscoveryNode second = new DiscoveryNode("second", buildNewFakeTransportAddress(), Version.CURRENT).         SqlStatsResponse.NodeStatsResponse secondNode = new SqlStatsResponse.NodeStatsResponse(second).         Counters secondCounters = new Counters().         secondCounters.inc("spam", 1).         secondCounters.inc("foo.bar.baz", 4).         secondNode.setStats(secondCounters).         nodes.add(secondNode).         listener.onResponse(new SqlStatsResponse(new ClusterName("whatever"), nodes, Collections.emptyList())).         return null.     }).when(client).execute(eq(SqlStatsAction.INSTANCE), any(), any()).     PlainActionFuture<SqlFeatureSet.Usage> future = new PlainActionFuture<>().     new SqlFeatureSet(Settings.EMPTY, licenseState, client).usage(future).     SqlFeatureSetUsage sqlUsage = (SqlFeatureSetUsage) future.get().     long fooBarBaz = ObjectPath.eval("foo.bar.baz", sqlUsage.stats()).     long fooFoo = ObjectPath.eval("foo.foo", sqlUsage.stats()).     long spam = ObjectPath.eval("spam", sqlUsage.stats()).     assertThat(sqlUsage.stats().keySet(), containsInAnyOrder("foo", "spam")).     assertThat(fooBarBaz, is(5L)).     assertThat(fooFoo, is(1L)).     assertThat(spam, is(1L)). }
