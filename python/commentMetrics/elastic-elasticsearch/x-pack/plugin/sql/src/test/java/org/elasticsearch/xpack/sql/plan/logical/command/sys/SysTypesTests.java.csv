commented;modifiers;parameterAmount;loc;comment;code
false;private;1;9;;private Tuple<Command, SqlSession> sql(String sql) {     EsIndex test = new EsIndex("test", TypesTests.loadMapping("mapping-multi-field-with-nested.json", true)).     Analyzer analyzer = new Analyzer(TestUtils.TEST_CFG, new FunctionRegistry(), IndexResolution.valid(test), null).     Command cmd = (Command) analyzer.analyze(parser.createStatement(sql), false).     IndexResolver resolver = mock(IndexResolver.class).     SqlSession session = new SqlSession(null, null, null, resolver, null, null, null, null, null).     return new Tuple<>(cmd, session). }
false;public;0;28;;public void testSysTypes() throws Exception {     Command cmd = sql("SYS TYPES").v1().     List<String> names = asList("BYTE", "LONG", "BINARY", "NULL", "INTEGER", "SHORT", "HALF_FLOAT", "SCALED_FLOAT", "FLOAT", "DOUBLE", "KEYWORD", "TEXT", "IP", "BOOLEAN", "DATE", "DATETIME", "INTERVAL_YEAR", "INTERVAL_MONTH", "INTERVAL_DAY", "INTERVAL_HOUR", "INTERVAL_MINUTE", "INTERVAL_SECOND", "INTERVAL_YEAR_TO_MONTH", "INTERVAL_DAY_TO_HOUR", "INTERVAL_DAY_TO_MINUTE", "INTERVAL_DAY_TO_SECOND", "INTERVAL_HOUR_TO_MINUTE", "INTERVAL_HOUR_TO_SECOND", "INTERVAL_MINUTE_TO_SECOND", "UNSUPPORTED", "OBJECT", "NESTED").     cmd.execute(null, wrap(r -> {         assertEquals(19, r.columnCount()).         assertEquals(DataType.values().length, r.size()).         assertFalse(r.schema().types().contains(DataType.NULL)).         // test numeric as signed         assertFalse(r.column(9, Boolean.class)).         // make sure precision is returned as boolean (not int)         assertFalse(r.column(10, Boolean.class)).         // no auto-increment         assertFalse(r.column(11, Boolean.class)).         for (int i = 0. i < r.size(). i++) {             assertEquals(names.get(i), r.column(0)).             r.advanceRow().         }     }, ex -> fail(ex.getMessage()))). }
false;public;0;7;;public void testSysTypesDefaultFiltering() throws Exception {     Command cmd = sql("SYS TYPES 0").v1().     cmd.execute(null, wrap(r -> {         assertEquals(DataType.values().length, r.size()).     }, ex -> fail(ex.getMessage()))). }
false;public;0;9;;public void testSysTypesPositiveFiltering() throws Exception {     // boolean = 16     Command cmd = sql("SYS TYPES " + JDBCType.BOOLEAN.getVendorTypeNumber()).v1().     cmd.execute(null, wrap(r -> {         assertEquals(1, r.size()).         assertEquals("BOOLEAN", r.column(0)).     }, ex -> fail(ex.getMessage()))). }
false;public;0;8;;public void testSysTypesNegativeFiltering() throws Exception {     Command cmd = sql("SYS TYPES " + JDBCType.TINYINT.getVendorTypeNumber()).v1().     cmd.execute(null, wrap(r -> {         assertEquals(1, r.size()).         assertEquals("BYTE", r.column(0)).     }, ex -> fail(ex.getMessage()))). }
false;public;0;12;;public void testSysTypesMultipleMatches() throws Exception {     Command cmd = sql("SYS TYPES " + JDBCType.VARCHAR.getVendorTypeNumber()).v1().     cmd.execute(null, wrap(r -> {         assertEquals(3, r.size()).         assertEquals("KEYWORD", r.column(0)).         assertTrue(r.advanceRow()).         assertEquals("TEXT", r.column(0)).         assertTrue(r.advanceRow()).         assertEquals("IP", r.column(0)).     }, ex -> fail(ex.getMessage()))). }
