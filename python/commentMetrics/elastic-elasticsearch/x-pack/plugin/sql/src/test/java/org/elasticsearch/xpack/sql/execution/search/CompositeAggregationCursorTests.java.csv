commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;10;;public static CompositeAggregationCursor randomCompositeCursor() {     int extractorsSize = between(1, 20).     List<BucketExtractor> extractors = new ArrayList<>(extractorsSize).     for (int i = 0. i < extractorsSize. i++) {         extractors.add(randomBucketExtractor()).     }     return new CompositeAggregationCursor(new byte[randomInt(256)], extractors, randomBitSet(extractorsSize), randomIntBetween(10, 1024), randomAlphaOfLength(5)). }
false;static;0;7;;static BucketExtractor randomBucketExtractor() {     List<Supplier<BucketExtractor>> options = new ArrayList<>().     options.add(ConstantExtractorTests::randomConstantExtractor).     options.add(MetricAggExtractorTests::randomMetricAggExtractor).     options.add(CompositeKeyExtractorTests::randomCompositeKeyExtractor).     return randomFrom(options).get(). }
false;protected;1;7;;@Override protected CompositeAggregationCursor mutateInstance(CompositeAggregationCursor instance) throws IOException {     return new CompositeAggregationCursor(instance.next(), instance.extractors(), randomValueOtherThan(instance.mask(), () -> randomBitSet(instance.extractors().size())), randomValueOtherThan(instance.limit(), () -> randomIntBetween(1, 512)), instance.indices()). }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Cursors.getNamedWriteables()). }
false;protected;0;4;;@Override protected CompositeAggregationCursor createTestInstance() {     return randomCompositeCursor(). }
false;protected;0;4;;@Override protected Reader<CompositeAggregationCursor> instanceReader() {     return CompositeAggregationCursor::new. }
false;protected;2;9;;@Override protected CompositeAggregationCursor copyInstance(CompositeAggregationCursor instance, Version version) throws IOException {     /* Randomly choose between internal protocol round trip and String based          * round trips used to toXContent. */     if (randomBoolean()) {         return super.copyInstance(instance, version).     }     return (CompositeAggregationCursor) Cursors.decodeFromString(Cursors.encodeToString(version, instance)). }
false;static;1;7;;static BitSet randomBitSet(int size) {     BitSet mask = new BitSet(size).     for (int i = 0. i < size. i++) {         mask.set(i, randomBoolean()).     }     return mask. }
