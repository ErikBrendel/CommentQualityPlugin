commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;9;;public static ScrollCursor randomScrollCursor() {     int extractorsSize = between(1, 20).     List<HitExtractor> extractors = new ArrayList<>(extractorsSize).     for (int i = 0. i < extractorsSize. i++) {         extractors.add(randomHitExtractor(0)).     }     return new ScrollCursor(randomAlphaOfLength(5), extractors, CompositeAggregationCursorTests.randomBitSet(extractorsSize), randomIntBetween(10, 1024)). }
false;static;1;9;;static HitExtractor randomHitExtractor(int depth) {     List<Supplier<HitExtractor>> options = new ArrayList<>().     if (depth < 5) {         options.add(() -> ComputingExtractorTests.randomComputingExtractor()).     }     options.add(ConstantExtractorTests::randomConstantExtractor).     options.add(FieldHitExtractorTests::randomFieldHitExtractor).     return randomFrom(options).get(). }
false;protected;1;6;;@Override protected ScrollCursor mutateInstance(ScrollCursor instance) throws IOException {     return new ScrollCursor(instance.scrollId(), instance.extractors(), randomValueOtherThan(instance.mask(), () -> CompositeAggregationCursorTests.randomBitSet(instance.extractors().size())), randomValueOtherThan(instance.limit(), () -> randomIntBetween(1, 1024))). }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Cursors.getNamedWriteables()). }
false;protected;0;4;;@Override protected ScrollCursor createTestInstance() {     return randomScrollCursor(). }
false;protected;0;4;;@Override protected Reader<ScrollCursor> instanceReader() {     return ScrollCursor::new. }
false;protected;2;9;;@Override protected ScrollCursor copyInstance(ScrollCursor instance, Version version) throws IOException {     /* Randomly choose between internal protocol round trip and String based          * round trips used to toXContent. */     if (randomBoolean()) {         return super.copyInstance(instance, version).     }     return (ScrollCursor) Cursors.decodeFromString(Cursors.encodeToString(version, instance)). }
