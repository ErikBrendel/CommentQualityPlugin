commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testBasicIndex() {     LogicalPlan plan = parser.createStatement("SELECT * FROM index").     PreAnalysis result = preAnalyzer.preAnalyze(plan).     assertThat(plan.preAnalyzed(), is(true)).     assertThat(result.indices, hasSize(1)).     assertThat(result.indices.get(0).cluster(), nullValue()).     assertThat(result.indices.get(0).index(), is("index")). }
false;public;0;8;;public void testBasicIndexWithCatalog() {     LogicalPlan plan = parser.createStatement("SELECT * FROM elastic:index").     PreAnalysis result = preAnalyzer.preAnalyze(plan).     assertThat(plan.preAnalyzed(), is(true)).     assertThat(result.indices, hasSize(1)).     assertThat(result.indices.get(0).cluster(), is("elastic")).     assertThat(result.indices.get(0).index(), is("index")). }
false;public;0;8;;public void testWildIndexWithCatalog() {     LogicalPlan plan = parser.createStatement("SELECT * FROM elastic:\"index*\"").     PreAnalysis result = preAnalyzer.preAnalyze(plan).     assertThat(plan.preAnalyzed(), is(true)).     assertThat(result.indices, hasSize(1)).     assertThat(result.indices.get(0).cluster(), is("elastic")).     assertThat(result.indices.get(0).index(), is("index*")). }
false;public;0;8;;public void testQuotedIndex() {     LogicalPlan plan = parser.createStatement("SELECT * FROM \"aaa\"").     PreAnalysis result = preAnalyzer.preAnalyze(plan).     assertThat(plan.preAnalyzed(), is(true)).     assertThat(result.indices, hasSize(1)).     assertThat(result.indices.get(0).cluster(), nullValue()).     assertThat(result.indices.get(0).index(), is("aaa")). }
false;public;0;8;;public void testQuotedCatalog() {     LogicalPlan plan = parser.createStatement("SELECT * FROM \"elastic\":\"aaa\"").     PreAnalysis result = preAnalyzer.preAnalyze(plan).     assertThat(plan.preAnalyzed(), is(true)).     assertThat(result.indices, hasSize(1)).     assertThat(result.indices.get(0).cluster(), is("elastic")).     assertThat(result.indices.get(0).index(), is("aaa")). }
false;public;0;8;;public void testComplicatedQuery() {     LogicalPlan plan = parser.createStatement("SELECT MAX(a) FROM aaa WHERE d > 10 GROUP BY b HAVING AVG(c) ORDER BY e ASC").     PreAnalysis result = preAnalyzer.preAnalyze(plan).     assertThat(plan.preAnalyzed(), is(true)).     assertThat(result.indices, hasSize(1)).     assertThat(result.indices.get(0).cluster(), nullValue()).     assertThat(result.indices.get(0).index(), is("aaa")). }
