commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static MetricAggExtractor randomMetricAggExtractor() {     return new MetricAggExtractor(randomAlphaOfLength(16), randomAlphaOfLength(16), randomAlphaOfLength(16)). }
false;protected;0;4;;@Override protected MetricAggExtractor createTestInstance() {     return randomMetricAggExtractor(). }
false;protected;0;4;;@Override protected Reader<MetricAggExtractor> instanceReader() {     return MetricAggExtractor::new. }
false;protected;1;4;;@Override protected MetricAggExtractor mutateInstance(MetricAggExtractor instance) throws IOException {     return new MetricAggExtractor(instance.name() + "mutated", instance.property(), instance.innerKey()). }
false;public;0;6;;public void testNoAggs() {     Bucket bucket = new TestBucket(emptyMap(), 0, new Aggregations(emptyList())).     MetricAggExtractor extractor = randomMetricAggExtractor().     SqlException exception = expectThrows(SqlException.class, () -> extractor.extract(bucket)).     assertEquals("Cannot find an aggregation named " + extractor.name(), exception.getMessage()). }
false;public;0;8;;public void testSingleValueProperty() {     MetricAggExtractor extractor = randomMetricAggExtractor().     double value = randomDouble().     Aggregation agg = new TestSingleValueAggregation(extractor.name(), singletonList(extractor.property()), value).     Bucket bucket = new TestBucket(emptyMap(), 0, new Aggregations(singletonList(agg))).     assertEquals(value, extractor.extract(bucket)). }
false;public;0;8;;public void testSingleValueInnerKey() {     MetricAggExtractor extractor = randomMetricAggExtractor().     double innerValue = randomDouble().     Aggregation agg = new TestSingleValueAggregation(extractor.name(), singletonList(extractor.property()), singletonMap(extractor.innerKey(), innerValue)).     Bucket bucket = new TestBucket(emptyMap(), 0, new Aggregations(singletonList(agg))).     assertEquals(innerValue, extractor.extract(bucket)). }
false;public;0;8;;public void testMultiValueProperty() {     MetricAggExtractor extractor = randomMetricAggExtractor().     double value = randomDouble().     Aggregation agg = new TestMultiValueAggregation(extractor.name(), singletonMap(extractor.property(), value)).     Bucket bucket = new TestBucket(emptyMap(), 0, new Aggregations(singletonList(agg))).     assertEquals(value, extractor.extract(bucket)). }
