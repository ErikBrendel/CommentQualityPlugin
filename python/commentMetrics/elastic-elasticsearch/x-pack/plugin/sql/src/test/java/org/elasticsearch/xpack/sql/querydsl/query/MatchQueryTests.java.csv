commented;modifiers;parameterAmount;loc;comment;code
false;static;0;7;;static MatchQuery randomMatchQuery() {     return new MatchQuery(SourceTests.randomSource(), randomAlphaOfLength(5), randomAlphaOfLength(5)). // TODO add the predicate }
false;public;0;3;;public void testEqualsAndHashCode() {     checkEqualsAndHashCode(randomMatchQuery(), MatchQueryTests::copy, MatchQueryTests::mutate). }
false;private,static;1;3;;private static MatchQuery copy(MatchQuery query) {     return new MatchQuery(query.source(), query.name(), query.text(), query.predicate()). }
false;private,static;1;8;;private static MatchQuery mutate(MatchQuery query) {     List<Function<MatchQuery, MatchQuery>> options = Arrays.asList(q -> new MatchQuery(SourceTests.mutate(q.source()), q.name(), q.text(), q.predicate()), q -> new MatchQuery(q.source(), randomValueOtherThan(q.name(), () -> randomAlphaOfLength(5)), q.text(), q.predicate()), q -> new MatchQuery(q.source(), q.name(), randomValueOtherThan(q.text(), () -> randomAlphaOfLength(5)), q.predicate())).     // TODO mutate the predicate     return randomFrom(options).apply(query). }
false;public;0;14;;public void testQueryBuilding() {     MatchQueryBuilder qb = getBuilder("lenient=true").     assertThat(qb.lenient(), equalTo(true)).     qb = getBuilder("lenient=true.operator=AND").     assertThat(qb.lenient(), equalTo(true)).     assertThat(qb.operator(), equalTo(Operator.AND)).     Exception e = expectThrows(IllegalArgumentException.class, () -> getBuilder("pizza=yummy")).     assertThat(e.getMessage(), equalTo("illegal match option [pizza]")).     e = expectThrows(IllegalArgumentException.class, () -> getBuilder("operator=aoeu")).     assertThat(e.getMessage(), equalTo("No enum constant org.elasticsearch.index.query.Operator.AOEU")). }
false;private,static;1;7;;private static MatchQueryBuilder getBuilder(String options) {     final Source source = new Source(1, 1, StringUtils.EMPTY).     FieldAttribute fa = new FieldAttribute(EMPTY, "a", new EsField("af", DataType.KEYWORD, emptyMap(), true)).     final MatchQueryPredicate mmqp = new MatchQueryPredicate(source, fa, "eggplant", options).     final MatchQuery mmq = new MatchQuery(source, "eggplant", "foo", mmqp).     return (MatchQueryBuilder) mmq.asBuilder(). }
false;public;0;7;;public void testToString() {     final Source source = new Source(1, 1, StringUtils.EMPTY).     FieldAttribute fa = new FieldAttribute(EMPTY, "a", new EsField("af", DataType.KEYWORD, emptyMap(), true)).     final MatchQueryPredicate mmqp = new MatchQueryPredicate(source, fa, "eggplant", "").     final MatchQuery mmq = new MatchQuery(source, "eggplant", "foo", mmqp).     assertEquals("MatchQuery@1:2[eggplant:foo]", mmq.toString()). }
