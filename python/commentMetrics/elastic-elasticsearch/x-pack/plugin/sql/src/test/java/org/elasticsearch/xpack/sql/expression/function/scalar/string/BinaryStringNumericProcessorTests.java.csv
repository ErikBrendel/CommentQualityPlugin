commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected BinaryStringNumericProcessor createTestInstance() {     return new BinaryStringNumericProcessor(new ConstantProcessor(randomRealisticUnicodeOfLengthBetween(1, 128)), new ConstantProcessor(randomInt(256)), randomFrom(BinaryStringNumericOperation.values())). }
false;protected;0;4;;@Override protected Reader<BinaryStringNumericProcessor> instanceReader() {     return BinaryStringNumericProcessor::new. }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Processors.getNamedWriteables()). }
false;public;0;6;;public void testLeftFunctionWithValidInput() {     assertEquals("foo", new Left(EMPTY, l("foo bar"), l(3)).makePipe().asProcessor().process(null)).     assertEquals("foo bar", new Left(EMPTY, l("foo bar"), l(7)).makePipe().asProcessor().process(null)).     assertEquals("foo bar", new Left(EMPTY, l("foo bar"), l(123)).makePipe().asProcessor().process(null)).     assertEquals("f", new Left(EMPTY, l('f'), l(1)).makePipe().asProcessor().process(null)). }
false;public;0;8;;public void testLeftFunctionWithEdgeCases() {     assertNull(new Left(EMPTY, l("foo bar"), l(null)).makePipe().asProcessor().process(null)).     assertNull(new Left(EMPTY, l(null), l(3)).makePipe().asProcessor().process(null)).     assertNull(new Left(EMPTY, l(null), l(null)).makePipe().asProcessor().process(null)).     assertEquals("", new Left(EMPTY, l("foo bar"), l(-1)).makePipe().asProcessor().process(null)).     assertEquals("", new Left(EMPTY, l("foo bar"), l(0)).makePipe().asProcessor().process(null)).     assertEquals("", new Left(EMPTY, l('f'), l(0)).makePipe().asProcessor().process(null)). }
false;public;0;8;;public void testLeftFunctionInputValidation() {     SqlIllegalArgumentException siae = expectThrows(SqlIllegalArgumentException.class, () -> new Left(EMPTY, l(5), l(3)).makePipe().asProcessor().process(null)).     assertEquals("A string/char is required. received [5]", siae.getMessage()).     siae = expectThrows(SqlIllegalArgumentException.class, () -> new Left(EMPTY, l("foo bar"), l("baz")).makePipe().asProcessor().process(null)).     assertEquals("A number is required. received [baz]", siae.getMessage()). }
false;public;0;6;;public void testRightFunctionWithValidInput() {     assertEquals("bar", new Right(EMPTY, l("foo bar"), l(3)).makePipe().asProcessor().process(null)).     assertEquals("foo bar", new Right(EMPTY, l("foo bar"), l(7)).makePipe().asProcessor().process(null)).     assertEquals("foo bar", new Right(EMPTY, l("foo bar"), l(123)).makePipe().asProcessor().process(null)).     assertEquals("f", new Right(EMPTY, l('f'), l(1)).makePipe().asProcessor().process(null)). }
false;public;0;8;;public void testRightFunctionWithEdgeCases() {     assertNull(new Right(EMPTY, l("foo bar"), l(null)).makePipe().asProcessor().process(null)).     assertNull(new Right(EMPTY, l(null), l(3)).makePipe().asProcessor().process(null)).     assertNull(new Right(EMPTY, l(null), l(null)).makePipe().asProcessor().process(null)).     assertEquals("", new Right(EMPTY, l("foo bar"), l(-1)).makePipe().asProcessor().process(null)).     assertEquals("", new Right(EMPTY, l("foo bar"), l(0)).makePipe().asProcessor().process(null)).     assertEquals("", new Right(EMPTY, l('f'), l(0)).makePipe().asProcessor().process(null)). }
false;public;0;8;;public void testRightFunctionInputValidation() {     SqlIllegalArgumentException siae = expectThrows(SqlIllegalArgumentException.class, () -> new Right(EMPTY, l(5), l(3)).makePipe().asProcessor().process(null)).     assertEquals("A string/char is required. received [5]", siae.getMessage()).     siae = expectThrows(SqlIllegalArgumentException.class, () -> new Right(EMPTY, l("foo bar"), l("baz")).makePipe().asProcessor().process(null)).     assertEquals("A number is required. received [baz]", siae.getMessage()). }
false;public;0;5;;public void testRepeatFunctionWithValidInput() {     assertEquals("foofoofoo", new Repeat(EMPTY, l("foo"), l(3)).makePipe().asProcessor().process(null)).     assertEquals("foo", new Repeat(EMPTY, l("foo"), l(1)).makePipe().asProcessor().process(null)).     assertEquals("fff", new Repeat(EMPTY, l('f'), l(3)).makePipe().asProcessor().process(null)). }
false;public;0;7;;public void testRepeatFunctionWithEdgeCases() {     assertNull(new Repeat(EMPTY, l("foo"), l(null)).makePipe().asProcessor().process(null)).     assertNull(new Repeat(EMPTY, l(null), l(3)).makePipe().asProcessor().process(null)).     assertNull(new Repeat(EMPTY, l(null), l(null)).makePipe().asProcessor().process(null)).     assertNull(new Repeat(EMPTY, l("foo"), l(-1)).makePipe().asProcessor().process(null)).     assertNull(new Repeat(EMPTY, l("foo"), l(0)).makePipe().asProcessor().process(null)). }
false;public;0;8;;public void testRepeatFunctionInputsValidation() {     SqlIllegalArgumentException siae = expectThrows(SqlIllegalArgumentException.class, () -> new Repeat(EMPTY, l(5), l(3)).makePipe().asProcessor().process(null)).     assertEquals("A string/char is required. received [5]", siae.getMessage()).     siae = expectThrows(SqlIllegalArgumentException.class, () -> new Repeat(EMPTY, l("foo bar"), l("baz")).makePipe().asProcessor().process(null)).     assertEquals("A number is required. received [baz]", siae.getMessage()). }
