# id;timestamp;commentText;codeText;commentWords;codeWords
BasicFormatterTests -> public void testFormatWithoutHeader();1548161728;Tests for {@link BasicFormatter#formatWithoutHeader} and_truncation of long columns.;public void testFormatWithoutHeader() {_        String[] result = formatter.formatWithoutHeader(_                Arrays.asList(_                        Arrays.asList("ohnotruncateddata", 4, 1, 77, "wombat", "1955-01-21T01:02:03.342Z"),_                        Arrays.asList("dog", 2, 123124.888, 9912, "goat", "2231-12-31T23:59:59.999Z"))).split("\n")__        assertThat(result, arrayWithSize(2))__        assertEquals("ohnotruncatedd~|4                     |1              |77                   |wombat         |"_                + "1955-01-21T01:02:03.342Z", result[0])__        assertEquals("dog            |2                     |123124.888     |9912                 |goat           |"_                + "2231-12-31T23:59:59.999Z", result[1])__    };tests,for,link,basic,formatter,format,without,header,and,truncation,of,long,columns;public,void,test,format,without,header,string,result,formatter,format,without,header,arrays,as,list,arrays,as,list,ohnotruncateddata,4,1,77,wombat,1955,01,21t01,02,03,342z,arrays,as,list,dog,2,123124,888,9912,goat,2231,12,31t23,59,59,999z,split,n,assert,that,result,array,with,size,2,assert,equals,ohnotruncatedd,4,1,77,wombat,1955,01,21t01,02,03,342z,result,0,assert,equals,dog,2,123124,888,9912,goat,2231,12,31t23,59,59,999z,result,1
BasicFormatterTests -> public void testFormatWithoutHeader();1548337251;Tests for {@link BasicFormatter#formatWithoutHeader} and_truncation of long columns.;public void testFormatWithoutHeader() {_        String[] result = formatter.formatWithoutHeader(_                Arrays.asList(_                        Arrays.asList("ohnotruncateddata", 4, 1, null, 77, "wombat", "1955-01-21T01:02:03.342Z", null),_                        Arrays.asList("dog", 2, 123124.888, null, 9912, "goat", "2231-12-31T23:59:59.999Z", null))).split("\n")__        assertThat(result, arrayWithSize(2))__        assertEquals("ohnotruncatedd~|4                     |1              |null           |77                   |wombat         |"_                + "1955-01-21T01:02:03.342Z|null           ", result[0])__        assertEquals("dog            |2                     |123124.888     |null           |9912                 |goat           |"_                + "2231-12-31T23:59:59.999Z|null           ", result[1])__    };tests,for,link,basic,formatter,format,without,header,and,truncation,of,long,columns;public,void,test,format,without,header,string,result,formatter,format,without,header,arrays,as,list,arrays,as,list,ohnotruncateddata,4,1,null,77,wombat,1955,01,21t01,02,03,342z,null,arrays,as,list,dog,2,123124,888,null,9912,goat,2231,12,31t23,59,59,999z,null,split,n,assert,that,result,array,with,size,2,assert,equals,ohnotruncatedd,4,1,null,77,wombat,1955,01,21t01,02,03,342z,null,result,0,assert,equals,dog,2,123124,888,null,9912,goat,2231,12,31t23,59,59,999z,null,result,1
BasicFormatterTests -> public void testFormatWithoutHeader();1551252292;Tests for {@link BasicFormatter#formatWithoutHeader} and_truncation of long columns.;public void testFormatWithoutHeader() {_        String[] result = formatter.formatWithoutHeader(_                Arrays.asList(_                        Arrays.asList("ohnotruncateddata", 4, 1, null, 77, "wombat", "1955-01-21T01:02:03.342Z", null),_                        Arrays.asList("dog", 2, 123124.888, null, 9912, "goat", "2231-12-31T23:59:59.999Z", null))).split("\n")__        assertThat(result, arrayWithSize(2))__        assertEquals("ohnotruncatedd~|4                     |1              |null           |77                   |wombat         |"_                + "1955-01-21T01:02:03.342Z|null           ", result[0])__        assertEquals("dog            |2                     |123124.888     |null           |9912                 |goat           |"_                + "2231-12-31T23:59:59.999Z|null           ", result[1])__    };tests,for,link,basic,formatter,format,without,header,and,truncation,of,long,columns;public,void,test,format,without,header,string,result,formatter,format,without,header,arrays,as,list,arrays,as,list,ohnotruncateddata,4,1,null,77,wombat,1955,01,21t01,02,03,342z,null,arrays,as,list,dog,2,123124,888,null,9912,goat,2231,12,31t23,59,59,999z,null,split,n,assert,that,result,array,with,size,2,assert,equals,ohnotruncatedd,4,1,null,77,wombat,1955,01,21t01,02,03,342z,null,result,0,assert,equals,dog,2,123124,888,null,9912,goat,2231,12,31t23,59,59,999z,null,result,1
BasicFormatterTests -> public void testEstimateSize();1548161728;Ensure that our estimates are perfect in at least some cases.;public void testEstimateSize() {_        assertEquals(formatter.formatWithHeader(firstResponse.columns(), firstResponse.rows()).length(),_                formatter.estimateSize(firstResponse.rows().size() + 2))__        assertEquals(formatter.formatWithoutHeader(firstResponse.rows()).length(),_                formatter.estimateSize(firstResponse.rows().size()))__    };ensure,that,our,estimates,are,perfect,in,at,least,some,cases;public,void,test,estimate,size,assert,equals,formatter,format,with,header,first,response,columns,first,response,rows,length,formatter,estimate,size,first,response,rows,size,2,assert,equals,formatter,format,without,header,first,response,rows,length,formatter,estimate,size,first,response,rows,size
BasicFormatterTests -> public void testEstimateSize();1548337251;Ensure that our estimates are perfect in at least some cases.;public void testEstimateSize() {_        assertEquals(formatter.formatWithHeader(firstResponse.columns(), firstResponse.rows()).length(),_                formatter.estimateSize(firstResponse.rows().size() + 2))__        assertEquals(formatter.formatWithoutHeader(firstResponse.rows()).length(),_                formatter.estimateSize(firstResponse.rows().size()))__    };ensure,that,our,estimates,are,perfect,in,at,least,some,cases;public,void,test,estimate,size,assert,equals,formatter,format,with,header,first,response,columns,first,response,rows,length,formatter,estimate,size,first,response,rows,size,2,assert,equals,formatter,format,without,header,first,response,rows,length,formatter,estimate,size,first,response,rows,size
BasicFormatterTests -> public void testEstimateSize();1551252292;Ensure that our estimates are perfect in at least some cases.;public void testEstimateSize() {_        assertEquals(formatter.formatWithHeader(firstResponse.columns(), firstResponse.rows()).length(),_                formatter.estimateSize(firstResponse.rows().size() + 2))__        assertEquals(formatter.formatWithoutHeader(firstResponse.rows()).length(),_                formatter.estimateSize(firstResponse.rows().size()))__    };ensure,that,our,estimates,are,perfect,in,at,least,some,cases;public,void,test,estimate,size,assert,equals,formatter,format,with,header,first,response,columns,first,response,rows,length,formatter,estimate,size,first,response,rows,size,2,assert,equals,formatter,format,without,header,first,response,rows,length,formatter,estimate,size,first,response,rows,size
BasicFormatterTests -> public void testFormatWithHeader();1548161728;Tests for {@link BasicFormatter#formatWithHeader}, values_of exactly the minimum column size, column names of exactly_the minimum column size, column headers longer than the_minimum column size, and values longer than the minimum_column size.;public void testFormatWithHeader() {_        String[] result = formatter.formatWithHeader(firstResponse.columns(), firstResponse.rows()).split("\n")__        assertThat(result, arrayWithSize(4))__        assertEquals("      foo      |         bar          |15charwidename!|superduperwidename!!!|      baz      |"_                + "          date          ", result[0])__        assertEquals("---------------+----------------------+---------------+---------------------+---------------+"_                + "------------------------", result[1])__        assertEquals("15charwidedata!|1                     |6.888          |12                   |rabbit         |"_                + "1953-09-02T00:00:00.000Z", result[2])__        assertEquals("dog            |1.7976931348623157E308|123124.888     |9912                 |goat           |"_                + "2000-03-15T21:34:37.443Z", result[3])__    };tests,for,link,basic,formatter,format,with,header,values,of,exactly,the,minimum,column,size,column,names,of,exactly,the,minimum,column,size,column,headers,longer,than,the,minimum,column,size,and,values,longer,than,the,minimum,column,size;public,void,test,format,with,header,string,result,formatter,format,with,header,first,response,columns,first,response,rows,split,n,assert,that,result,array,with,size,4,assert,equals,foo,bar,15charwidename,superduperwidename,baz,date,result,0,assert,equals,result,1,assert,equals,15charwidedata,1,6,888,12,rabbit,1953,09,02t00,00,00,000z,result,2,assert,equals,dog,1,7976931348623157e308,123124,888,9912,goat,2000,03,15t21,34,37,443z,result,3
BasicFormatterTests -> public void testFormatWithHeader();1548337251;Tests for {@link BasicFormatter#formatWithHeader}, values_of exactly the minimum column size, column names of exactly_the minimum column size, column headers longer than the_minimum column size, and values longer than the minimum_column size.;public void testFormatWithHeader() {_        String[] result = formatter.formatWithHeader(firstResponse.columns(), firstResponse.rows()).split("\n")__        assertThat(result, arrayWithSize(4))__        assertEquals("      foo      |         bar          |15charwidename!|  null_field1  |superduperwidename!!!|      baz      |"_                + "          date          |  null_field2  ", result[0])__        assertEquals("---------------+----------------------+---------------+---------------+---------------------+---------------+"_                + "------------------------+---------------", result[1])__        assertEquals("15charwidedata!|1                     |6.888          |null           |12                   |rabbit         |"_                + "1953-09-02T00:00:00.000Z|null           ", result[2])__        assertEquals("dog            |1.7976931348623157E308|123124.888     |null           |9912                 |goat           |"_                + "2000-03-15T21:34:37.443Z|null           ", result[3])__    };tests,for,link,basic,formatter,format,with,header,values,of,exactly,the,minimum,column,size,column,names,of,exactly,the,minimum,column,size,column,headers,longer,than,the,minimum,column,size,and,values,longer,than,the,minimum,column,size;public,void,test,format,with,header,string,result,formatter,format,with,header,first,response,columns,first,response,rows,split,n,assert,that,result,array,with,size,4,assert,equals,foo,bar,15charwidename,superduperwidename,baz,date,result,0,assert,equals,result,1,assert,equals,15charwidedata,1,6,888,null,12,rabbit,1953,09,02t00,00,00,000z,null,result,2,assert,equals,dog,1,7976931348623157e308,123124,888,null,9912,goat,2000,03,15t21,34,37,443z,null,result,3
BasicFormatterTests -> public void testFormatWithHeader();1551252292;Tests for {@link BasicFormatter#formatWithHeader}, values_of exactly the minimum column size, column names of exactly_the minimum column size, column headers longer than the_minimum column size, and values longer than the minimum_column size.;public void testFormatWithHeader() {_        String[] result = formatter.formatWithHeader(firstResponse.columns(), firstResponse.rows()).split("\n")__        assertThat(result, arrayWithSize(4))__        assertEquals("      foo      |         bar          |15charwidename!|  null_field1  |superduperwidename!!!|      baz      |"_                + "          date          |  null_field2  ", result[0])__        assertEquals("---------------+----------------------+---------------+---------------+---------------------+---------------+"_                + "------------------------+---------------", result[1])__        assertEquals("15charwidedata!|1                     |6.888          |null           |12                   |rabbit         |"_                + "1953-09-02T00:00:00.000Z|null           ", result[2])__        assertEquals("dog            |1.7976931348623157E308|123124.888     |null           |9912                 |goat           |"_                + "2000-03-15T21:34:37.443Z|null           ", result[3])__    };tests,for,link,basic,formatter,format,with,header,values,of,exactly,the,minimum,column,size,column,names,of,exactly,the,minimum,column,size,column,headers,longer,than,the,minimum,column,size,and,values,longer,than,the,minimum,column,size;public,void,test,format,with,header,string,result,formatter,format,with,header,first,response,columns,first,response,rows,split,n,assert,that,result,array,with,size,4,assert,equals,foo,bar,15charwidename,superduperwidename,baz,date,result,0,assert,equals,result,1,assert,equals,15charwidedata,1,6,888,null,12,rabbit,1953,09,02t00,00,00,000z,null,result,2,assert,equals,dog,1,7976931348623157e308,123124,888,null,9912,goat,2000,03,15t21,34,37,443z,null,result,3
