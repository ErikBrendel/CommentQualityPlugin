commented;modifiers;parameterAmount;loc;comment;code
true;public;0;12;/**  * Tests for {@link BasicFormatter#formatWithHeader}, values  * of exactly the minimum column size, column names of exactly  * the minimum column size, column headers longer than the  * minimum column size, and values longer than the minimum  * column size.  */ ;/**  * Tests for {@link BasicFormatter#formatWithHeader}, values  * of exactly the minimum column size, column names of exactly  * the minimum column size, column headers longer than the  * minimum column size, and values longer than the minimum  * column size.  */ public void testFormatWithHeader() {     String[] result = formatter.formatWithHeader(firstResponse.columns(), firstResponse.rows()).split("\n").     assertThat(result, arrayWithSize(4)).     assertEquals("      foo      |         bar          |15charwidename!|  null_field1  |superduperwidename!!!|      baz      |" + "          date          |  null_field2  ", result[0]).     assertEquals("---------------+----------------------+---------------+---------------+---------------------+---------------+" + "------------------------+---------------", result[1]).     assertEquals("15charwidedata!|1                     |6.888          |null           |12                   |rabbit         |" + "1953-09-02T00:00:00.000Z|null           ", result[2]).     assertEquals("dog            |1.7976931348623157E308|123124.888     |null           |9912                 |goat           |" + "2000-03-15T21:34:37.443Z|null           ", result[3]). }
true;public;0;11;/**  * Tests for {@link BasicFormatter#formatWithoutHeader} and  * truncation of long columns.  */ ;/**  * Tests for {@link BasicFormatter#formatWithoutHeader} and  * truncation of long columns.  */ public void testFormatWithoutHeader() {     String[] result = formatter.formatWithoutHeader(Arrays.asList(Arrays.asList("ohnotruncateddata", 4, 1, null, 77, "wombat", "1955-01-21T01:02:03.342Z", null), Arrays.asList("dog", 2, 123124.888, null, 9912, "goat", "2231-12-31T23:59:59.999Z", null))).split("\n").     assertThat(result, arrayWithSize(2)).     assertEquals("ohnotruncatedd~|4                     |1              |null           |77                   |wombat         |" + "1955-01-21T01:02:03.342Z|null           ", result[0]).     assertEquals("dog            |2                     |123124.888     |null           |9912                 |goat           |" + "2231-12-31T23:59:59.999Z|null           ", result[1]). }
true;public;0;6;/**  * Ensure that our estimates are perfect in at least some cases.  */ ;/**  * Ensure that our estimates are perfect in at least some cases.  */ public void testEstimateSize() {     assertEquals(formatter.formatWithHeader(firstResponse.columns(), firstResponse.rows()).length(), formatter.estimateSize(firstResponse.rows().size() + 2)).     assertEquals(formatter.formatWithoutHeader(firstResponse.rows()).length(), formatter.estimateSize(firstResponse.rows().size())). }
