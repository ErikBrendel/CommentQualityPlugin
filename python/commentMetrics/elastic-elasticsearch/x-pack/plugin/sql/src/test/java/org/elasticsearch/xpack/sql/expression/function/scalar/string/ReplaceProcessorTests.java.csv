commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected ReplaceFunctionProcessor createTestInstance() {     return new ReplaceFunctionProcessor(new ConstantProcessor(randomRealisticUnicodeOfLengthBetween(0, 128)), new ConstantProcessor(randomRealisticUnicodeOfLengthBetween(0, 128)), new ConstantProcessor(randomRealisticUnicodeOfLengthBetween(0, 128))). }
false;protected;0;4;;@Override protected Reader<ReplaceFunctionProcessor> instanceReader() {     return ReplaceFunctionProcessor::new. }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Processors.getNamedWriteables()). }
false;public;0;6;;public void testReplaceFunctionWithValidInput() {     assertEquals("foobazbaz", new Replace(EMPTY, l("foobarbar"), l("bar"), l("baz")).makePipe().asProcessor().process(null)).     assertEquals("foobXrbXr", new Replace(EMPTY, l("foobarbar"), l('a'), l('X')).makePipe().asProcessor().process(null)).     assertEquals("z", new Replace(EMPTY, l('f'), l('f'), l('z')).makePipe().asProcessor().process(null)). }
false;public;0;8;;public void testReplaceFunctionWithEdgeCases() {     assertEquals("foobarbar", new Replace(EMPTY, l("foobarbar"), l("bar"), l(null)).makePipe().asProcessor().process(null)).     assertEquals("foobarbar", new Replace(EMPTY, l("foobarbar"), l(null), l("baz")).makePipe().asProcessor().process(null)).     assertNull(new Replace(EMPTY, l(null), l("bar"), l("baz")).makePipe().asProcessor().process(null)).     assertNull(new Replace(EMPTY, l(null), l(null), l(null)).makePipe().asProcessor().process(null)). }
false;public;0;11;;public void testReplaceFunctionInputsValidation() {     SqlIllegalArgumentException siae = expectThrows(SqlIllegalArgumentException.class, () -> new Replace(EMPTY, l(5), l("bar"), l("baz")).makePipe().asProcessor().process(null)).     assertEquals("A string/char is required. received [5]", siae.getMessage()).     siae = expectThrows(SqlIllegalArgumentException.class, () -> new Replace(EMPTY, l("foobarbar"), l(4), l("baz")).makePipe().asProcessor().process(null)).     assertEquals("A string/char is required. received [4]", siae.getMessage()).     siae = expectThrows(SqlIllegalArgumentException.class, () -> new Replace(EMPTY, l("foobarbar"), l("bar"), l(3)).makePipe().asProcessor().process(null)).     assertEquals("A string/char is required. received [3]", siae.getMessage()). }
