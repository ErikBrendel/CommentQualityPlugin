# id;timestamp;commentText;codeText;commentWords;codeWords
SqlParserTests -> private OrderBy orderBy(LogicalPlan plan);1524684173;Find the one and only {@code ORDER BY} in a plan.;private OrderBy orderBy(LogicalPlan plan) {_        List<LogicalPlan> l = plan.children().stream()_            .filter(c -> c instanceof OrderBy)_            .collect(toList())__        assertThat("expected only one ORDER BY", l, hasSize(1))__        return (OrderBy) l.get(0)__    };find,the,one,and,only,code,order,by,in,a,plan;private,order,by,order,by,logical,plan,plan,list,logical,plan,l,plan,children,stream,filter,c,c,instanceof,order,by,collect,to,list,assert,that,expected,only,one,order,by,l,has,size,1,return,order,by,l,get,0
SqlParserTests -> private OrderBy orderBy(LogicalPlan plan);1531910483;Find the one and only {@code ORDER BY} in a plan.;private OrderBy orderBy(LogicalPlan plan) {_        List<LogicalPlan> l = plan.children().stream()_            .filter(c -> c instanceof OrderBy)_            .collect(toList())__        assertThat("expected only one ORDER BY", l, hasSize(1))__        return (OrderBy) l.get(0)__    };find,the,one,and,only,code,order,by,in,a,plan;private,order,by,order,by,logical,plan,plan,list,logical,plan,l,plan,children,stream,filter,c,c,instanceof,order,by,collect,to,list,assert,that,expected,only,one,order,by,l,has,size,1,return,order,by,l,get,0
SqlParserTests -> private OrderBy orderBy(LogicalPlan plan);1537371806;Find the one and only {@code ORDER BY} in a plan.;private OrderBy orderBy(LogicalPlan plan) {_        List<LogicalPlan> l = plan.children().stream()_            .filter(c -> c instanceof OrderBy)_            .collect(toList())__        assertThat("expected only one ORDER BY", l, hasSize(1))__        return (OrderBy) l.get(0)__    };find,the,one,and,only,code,order,by,in,a,plan;private,order,by,order,by,logical,plan,plan,list,logical,plan,l,plan,children,stream,filter,c,c,instanceof,order,by,collect,to,list,assert,that,expected,only,one,order,by,l,has,size,1,return,order,by,l,get,0
SqlParserTests -> private OrderBy orderBy(LogicalPlan plan);1538067637;Find the one and only {@code ORDER BY} in a plan.;private OrderBy orderBy(LogicalPlan plan) {_        List<LogicalPlan> l = plan.children().stream()_            .filter(c -> c instanceof OrderBy)_            .collect(toList())__        assertThat("expected only one ORDER BY", l, hasSize(1))__        return (OrderBy) l.get(0)__    };find,the,one,and,only,code,order,by,in,a,plan;private,order,by,order,by,logical,plan,plan,list,logical,plan,l,plan,children,stream,filter,c,c,instanceof,order,by,collect,to,list,assert,that,expected,only,one,order,by,l,has,size,1,return,order,by,l,get,0
SqlParserTests -> private OrderBy orderBy(LogicalPlan plan);1541588912;Find the one and only {@code ORDER BY} in a plan.;private OrderBy orderBy(LogicalPlan plan) {_        List<LogicalPlan> l = plan.children().stream()_            .filter(c -> c instanceof OrderBy)_            .collect(toList())__        assertThat("expected only one ORDER BY", l, hasSize(1))__        return (OrderBy) l.get(0)__    };find,the,one,and,only,code,order,by,in,a,plan;private,order,by,order,by,logical,plan,plan,list,logical,plan,l,plan,children,stream,filter,c,c,instanceof,order,by,collect,to,list,assert,that,expected,only,one,order,by,l,has,size,1,return,order,by,l,get,0
SqlParserTests -> private OrderBy orderBy(LogicalPlan plan);1545145647;Find the one and only {@code ORDER BY} in a plan.;private OrderBy orderBy(LogicalPlan plan) {_        List<LogicalPlan> l = plan.children().stream()_            .filter(c -> c instanceof OrderBy)_            .collect(toList())__        assertThat("expected only one ORDER BY", l, hasSize(1))__        return (OrderBy) l.get(0)__    };find,the,one,and,only,code,order,by,in,a,plan;private,order,by,order,by,logical,plan,plan,list,logical,plan,l,plan,children,stream,filter,c,c,instanceof,order,by,collect,to,list,assert,that,expected,only,one,order,by,l,has,size,1,return,order,by,l,get,0
SqlParserTests -> private OrderBy orderBy(LogicalPlan plan);1547240880;Find the one and only {@code ORDER BY} in a plan.;private OrderBy orderBy(LogicalPlan plan) {_        List<LogicalPlan> l = plan.children().stream()_            .filter(c -> c instanceof OrderBy)_            .collect(toList())__        assertThat("expected only one ORDER BY", l, hasSize(1))__        return (OrderBy) l.get(0)__    };find,the,one,and,only,code,order,by,in,a,plan;private,order,by,order,by,logical,plan,plan,list,logical,plan,l,plan,children,stream,filter,c,c,instanceof,order,by,collect,to,list,assert,that,expected,only,one,order,by,l,has,size,1,return,order,by,l,get,0
SqlParserTests -> private OrderBy orderBy(LogicalPlan plan);1547336422;Find the one and only {@code ORDER BY} in a plan.;private OrderBy orderBy(LogicalPlan plan) {_        List<LogicalPlan> l = plan.children().stream()_            .filter(c -> c instanceof OrderBy)_            .collect(toList())__        assertThat("expected only one ORDER BY", l, hasSize(1))__        return (OrderBy) l.get(0)__    };find,the,one,and,only,code,order,by,in,a,plan;private,order,by,order,by,logical,plan,plan,list,logical,plan,l,plan,children,stream,filter,c,c,instanceof,order,by,collect,to,list,assert,that,expected,only,one,order,by,l,has,size,1,return,order,by,l,get,0
SqlParserTests -> private OrderBy orderBy(LogicalPlan plan);1549064305;Find the one and only {@code ORDER BY} in a plan.;private OrderBy orderBy(LogicalPlan plan) {_        List<LogicalPlan> l = plan.children().stream()_            .filter(c -> c instanceof OrderBy)_            .collect(toList())__        assertThat("expected only one ORDER BY", l, hasSize(1))__        return (OrderBy) l.get(0)__    };find,the,one,and,only,code,order,by,in,a,plan;private,order,by,order,by,logical,plan,plan,list,logical,plan,l,plan,children,stream,filter,c,c,instanceof,order,by,collect,to,list,assert,that,expected,only,one,order,by,l,has,size,1,return,order,by,l,get,0
SqlParserTests -> private OrderBy orderBy(LogicalPlan plan);1549696651;Find the one and only {@code ORDER BY} in a plan.;private OrderBy orderBy(LogicalPlan plan) {_        List<LogicalPlan> l = plan.children().stream()_            .filter(c -> c instanceof OrderBy)_            .collect(toList())__        assertThat("expected only one ORDER BY", l, hasSize(1))__        return (OrderBy) l.get(0)__    };find,the,one,and,only,code,order,by,in,a,plan;private,order,by,order,by,logical,plan,plan,list,logical,plan,l,plan,children,stream,filter,c,c,instanceof,order,by,collect,to,list,assert,that,expected,only,one,order,by,l,has,size,1,return,order,by,l,get,0
SqlParserTests -> private String stringForDirection(Order.OrderDirection dir);1524684173;Convert a direction into a string that represents that parses to_that direction.;private String stringForDirection(Order.OrderDirection dir) {_        String dirStr = dir.toString()__        return randomBoolean() && dirStr.equals("ASC") ? "" : " " + dirStr__    };convert,a,direction,into,a,string,that,represents,that,parses,to,that,direction;private,string,string,for,direction,order,order,direction,dir,string,dir,str,dir,to,string,return,random,boolean,dir,str,equals,asc,dir,str
SqlParserTests -> private String stringForDirection(Order.OrderDirection dir);1531910483;Convert a direction into a string that represents that parses to_that direction.;private String stringForDirection(Order.OrderDirection dir) {_        String dirStr = dir.toString()__        return randomBoolean() && dirStr.equals("ASC") ? "" : " " + dirStr__    };convert,a,direction,into,a,string,that,represents,that,parses,to,that,direction;private,string,string,for,direction,order,order,direction,dir,string,dir,str,dir,to,string,return,random,boolean,dir,str,equals,asc,dir,str
SqlParserTests -> private String stringForDirection(Order.OrderDirection dir);1537371806;Convert a direction into a string that represents that parses to_that direction.;private String stringForDirection(Order.OrderDirection dir) {_        String dirStr = dir.toString()__        return randomBoolean() && dirStr.equals("ASC") ? "" : " " + dirStr__    };convert,a,direction,into,a,string,that,represents,that,parses,to,that,direction;private,string,string,for,direction,order,order,direction,dir,string,dir,str,dir,to,string,return,random,boolean,dir,str,equals,asc,dir,str
SqlParserTests -> private String stringForDirection(Order.OrderDirection dir);1538067637;Convert a direction into a string that represents that parses to_that direction.;private String stringForDirection(Order.OrderDirection dir) {_        String dirStr = dir.toString()__        return randomBoolean() && dirStr.equals("ASC") ? "" : " " + dirStr__    };convert,a,direction,into,a,string,that,represents,that,parses,to,that,direction;private,string,string,for,direction,order,order,direction,dir,string,dir,str,dir,to,string,return,random,boolean,dir,str,equals,asc,dir,str
SqlParserTests -> private String stringForDirection(Order.OrderDirection dir);1541588912;Convert a direction into a string that represents that parses to_that direction.;private String stringForDirection(Order.OrderDirection dir) {_        String dirStr = dir.toString()__        return randomBoolean() && dirStr.equals("ASC") ? "" : " " + dirStr__    };convert,a,direction,into,a,string,that,represents,that,parses,to,that,direction;private,string,string,for,direction,order,order,direction,dir,string,dir,str,dir,to,string,return,random,boolean,dir,str,equals,asc,dir,str
SqlParserTests -> private String stringForDirection(Order.OrderDirection dir);1545145647;Convert a direction into a string that represents that parses to_that direction.;private String stringForDirection(Order.OrderDirection dir) {_        String dirStr = dir.toString()__        return randomBoolean() && dirStr.equals("ASC") ? "" : " " + dirStr__    };convert,a,direction,into,a,string,that,represents,that,parses,to,that,direction;private,string,string,for,direction,order,order,direction,dir,string,dir,str,dir,to,string,return,random,boolean,dir,str,equals,asc,dir,str
SqlParserTests -> private String stringForDirection(Order.OrderDirection dir);1547240880;Convert a direction into a string that represents that parses to_that direction.;private String stringForDirection(Order.OrderDirection dir) {_        String dirStr = dir.toString()__        return randomBoolean() && dirStr.equals("ASC") ? "" : " " + dirStr__    };convert,a,direction,into,a,string,that,represents,that,parses,to,that,direction;private,string,string,for,direction,order,order,direction,dir,string,dir,str,dir,to,string,return,random,boolean,dir,str,equals,asc,dir,str
SqlParserTests -> private String stringForDirection(Order.OrderDirection dir);1547336422;Convert a direction into a string that represents that parses to_that direction.;private String stringForDirection(Order.OrderDirection dir) {_        String dirStr = dir.toString()__        return randomBoolean() && dirStr.equals("ASC") ? "" : " " + dirStr__    };convert,a,direction,into,a,string,that,represents,that,parses,to,that,direction;private,string,string,for,direction,order,order,direction,dir,string,dir,str,dir,to,string,return,random,boolean,dir,str,equals,asc,dir,str
SqlParserTests -> private String stringForDirection(Order.OrderDirection dir);1549064305;Convert a direction into a string that represents that parses to_that direction.;private String stringForDirection(Order.OrderDirection dir) {_        String dirStr = dir.toString()__        return randomBoolean() && dirStr.equals("ASC") ? "" : " " + dirStr__    };convert,a,direction,into,a,string,that,represents,that,parses,to,that,direction;private,string,string,for,direction,order,order,direction,dir,string,dir,str,dir,to,string,return,random,boolean,dir,str,equals,asc,dir,str
SqlParserTests -> private String stringForDirection(Order.OrderDirection dir);1549696651;Convert a direction into a string that represents that parses to_that direction.;private String stringForDirection(Order.OrderDirection dir) {_        String dirStr = dir.toString()__        return randomBoolean() && dirStr.equals("ASC") ? "" : " " + dirStr__    };convert,a,direction,into,a,string,that,represents,that,parses,to,that,direction;private,string,string,for,direction,order,order,direction,dir,string,dir,str,dir,to,string,return,random,boolean,dir,str,equals,asc,dir,str
