commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public int getParameterCount() throws SQLException {     ps.checkOpen().     return ps.query.paramCount(). }
false;public;1;5;;@Override public int isNullable(int param) throws SQLException {     ps.checkOpen().     return parameterNullableUnknown. }
false;public;1;4;;@Override public boolean isSigned(int param) throws SQLException {     return TypeUtils.isSigned(paramInfo(param).type). }
false;public;1;5;;@Override public int getPrecision(int param) throws SQLException {     ps.checkOpen().     return 0. }
false;public;1;5;;@Override public int getScale(int param) throws SQLException {     ps.checkOpen().     return 0. }
false;public;1;4;;@Override public int getParameterType(int param) throws SQLException {     return paramInfo(param).type.getVendorTypeNumber().intValue(). }
false;public;1;4;;@Override public String getParameterTypeName(int param) throws SQLException {     return paramInfo(param).type.getName(). }
false;public;1;4;;@Override public String getParameterClassName(int param) throws SQLException {     return TypeUtils.classOf(paramInfo(param).type).getName(). }
false;public;1;5;;@Override public int getParameterMode(int param) throws SQLException {     ps.checkOpen().     return parameterModeUnknown. }
false;private;1;4;;private ParamInfo paramInfo(int param) throws SQLException {     ps.checkOpen().     return ps.query.getParam(param). }
