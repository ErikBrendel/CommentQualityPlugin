commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testNoParameters() throws Exception {     assertEquals(0, SqlQueryParameterAnalyzer.parametersCount("SELECT * FROM table")).     assertEquals(0, SqlQueryParameterAnalyzer.parametersCount("SELECT * FROM 'table'")).     assertEquals(0, SqlQueryParameterAnalyzer.parametersCount("SELECT * FROM \"table\"")).     assertEquals(0, SqlQueryParameterAnalyzer.parametersCount("SELECT * FROM \"table\" WHERE i = 0")).     assertEquals(0, SqlQueryParameterAnalyzer.parametersCount("SELECT * FROM 'table' WHERE s = '?'")).     assertEquals(0, SqlQueryParameterAnalyzer.parametersCount("SELECT * FROM 'table' WHERE s = 'foo''bar''?'")).     assertEquals(0, SqlQueryParameterAnalyzer.parametersCount("SELECT * FROM `table` where b = 'fo\"o\\\"b{ar\\}?b\"az?}\\-?\"?\\?{'")). }
false;public;0;10;;public void testSingleParameter() throws Exception {     assertEquals(1, SqlQueryParameterAnalyzer.parametersCount("SELECT * FROM 'table' WHERE s = '?' AND b = ?")).     assertEquals(1, SqlQueryParameterAnalyzer.parametersCount("SELECT * FROM 'table' WHERE b = ? AND s = '?'")).     assertEquals(1, SqlQueryParameterAnalyzer.parametersCount("SELECT ?/10 /* multiline  \n" + " * query \n" + " * more ? /* lines */ ? here \n" + " */ FROM foo")).     assertEquals(1, SqlQueryParameterAnalyzer.parametersCount("SELECT ?")). }
false;public;0;8;;public void testMultipleParameters() throws Exception {     assertEquals(4, SqlQueryParameterAnalyzer.parametersCount("SELECT ?, ?, ? , ?")).     assertEquals(3, SqlQueryParameterAnalyzer.parametersCount("SELECT ?, ?, '?' , ?")).     assertEquals(3, SqlQueryParameterAnalyzer.parametersCount("SELECT ?, ?\n, '?' , ?")).     assertEquals(3, SqlQueryParameterAnalyzer.parametersCount("SELECT ? - 10 -- first parameter with ????\n" + ", ? -- second parameter with random \" and ' \n" + ", ? -- last parameter without new line")). }
false;public;0;4;;public void testUnclosedJdbcEscape() {     SQLException exception = expectThrows(SQLException.class, () -> SqlQueryParameterAnalyzer.parametersCount("SELECT {foobar")).     assertEquals("Jdbc escape sequences are not supported yet", exception.getMessage()). }
false;public;0;4;;public void testUnclosedMultilineComment() {     SQLException exception = expectThrows(SQLException.class, () -> SqlQueryParameterAnalyzer.parametersCount("SELECT /* * * * ")).     assertEquals("Cannot parse given sql. unclosed /* comment", exception.getMessage()). }
false;public;0;4;;public void testUnclosedSingleQuoteStrign() {     SQLException exception = expectThrows(SQLException.class, () -> SqlQueryParameterAnalyzer.parametersCount("SELECT ' '' '' ")).     assertEquals("Cannot parse given sql. unclosed string", exception.getMessage()). }
