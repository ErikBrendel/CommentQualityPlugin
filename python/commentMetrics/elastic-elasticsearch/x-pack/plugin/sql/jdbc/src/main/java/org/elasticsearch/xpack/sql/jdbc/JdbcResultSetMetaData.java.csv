commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public int getColumnCount() throws SQLException {     checkOpen().     return columns.size(). }
false;public;1;5;;@Override public boolean isAutoIncrement(int column) throws SQLException {     column(column).     return false. }
false;public;1;5;;@Override public boolean isCaseSensitive(int column) throws SQLException {     column(column).     return true. }
false;public;1;5;;@Override public boolean isSearchable(int column) throws SQLException {     column(column).     return true. }
false;public;1;5;;@Override public boolean isCurrency(int column) throws SQLException {     column(column).     return false. }
false;public;1;5;;@Override public int isNullable(int column) throws SQLException {     column(column).     return columnNullableUnknown. }
false;public;1;4;;@Override public boolean isSigned(int column) throws SQLException {     return TypeUtils.isSigned(column(column).type). }
false;public;1;4;;@Override public int getColumnDisplaySize(int column) throws SQLException {     return column(column).displaySize(). }
false;public;1;5;;@Override public String getColumnLabel(int column) throws SQLException {     JdbcColumnInfo info = column(column).     return true == EMPTY.equals(info.label) ? info.name : info.label. }
false;public;1;4;;@Override public String getColumnName(int column) throws SQLException {     return column(column).name. }
false;public;1;4;;@Override public String getSchemaName(int column) throws SQLException {     return column(column).schema. }
false;public;1;5;;@Override public int getPrecision(int column) throws SQLException {     column(column).     return 0. }
false;public;1;5;;@Override public int getScale(int column) throws SQLException {     column(column).     return 0. }
false;public;1;4;;@Override public String getTableName(int column) throws SQLException {     return column(column).table. }
false;public;1;4;;@Override public String getCatalogName(int column) throws SQLException {     return column(column).catalog. }
false;public;1;4;;@Override public int getColumnType(int column) throws SQLException {     return column(column).type.getVendorTypeNumber(). }
false;public;1;4;;@Override public String getColumnTypeName(int column) throws SQLException {     return column(column).type.getName(). }
false;public;1;5;;@Override public boolean isReadOnly(int column) throws SQLException {     column(column).     return true. }
false;public;1;5;;@Override public boolean isWritable(int column) throws SQLException {     column(column).     return false. }
false;public;1;5;;@Override public boolean isDefinitelyWritable(int column) throws SQLException {     column(column).     return false. }
false;public;1;4;;@Override public String getColumnClassName(int column) throws SQLException {     return TypeUtils.classOf(column(column).type).getName(). }
false;private;0;5;;private void checkOpen() throws SQLException {     if (rs != null) {         rs.checkOpen().     } }
false;private;1;7;;private JdbcColumnInfo column(int column) throws SQLException {     checkOpen().     if (column < 1 || column > columns.size()) {         throw new SQLException("Invalid column index [" + column + "]").     }     return columns.get(column - 1). }
false;public;0;4;;@Override public String toString() {     return format(Locale.ROOT, "%s(%s)", getClass().getSimpleName(), columns). }
