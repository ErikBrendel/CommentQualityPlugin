commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;22;;public static JdbcConfiguration create(String u, Properties props, int loginTimeoutSeconds) throws JdbcSQLException {     URI uri = parseUrl(u).     Properties urlProps = parseProperties(uri, u).     uri = removeQuery(uri, u, DEFAULT_URI).     // override properties set in the URL with the ones specified programmatically     if (props != null) {         urlProps.putAll(props).     }     if (loginTimeoutSeconds > 0) {         urlProps.setProperty(CONNECT_TIMEOUT, Long.toString(TimeUnit.SECONDS.toMillis(loginTimeoutSeconds))).     }     try {         return new JdbcConfiguration(uri, u, urlProps).     } catch (JdbcSQLException e) {         throw e.     } catch (Exception ex) {         throw new JdbcSQLException(ex, ex.getMessage()).     } }
false;private,static;1;13;;private static URI parseUrl(String u) throws JdbcSQLException {     String url = u.     String format = "jdbc:es://[http|https]?[host[:port]]*/[prefix]*[?[option=value]&]*".     if (!canAccept(u)) {         throw new JdbcSQLException("Expected [" + URL_PREFIX + "] url, received [" + u + "]").     }     try {         return parseURI(removeJdbcPrefix(u), DEFAULT_URI).     } catch (IllegalArgumentException ex) {         throw new JdbcSQLException(ex, "Invalid URL [" + url + "], format should be [" + format + "]").     } }
false;private,static;1;7;;private static String removeJdbcPrefix(String connectionString) throws JdbcSQLException {     if (connectionString.startsWith(URL_PREFIX)) {         return connectionString.substring(URL_PREFIX.length()).     } else {         throw new JdbcSQLException("Expected [" + URL_PREFIX + "] url, received [" + connectionString + "]").     } }
false;private,static;2;23;;private static Properties parseProperties(URI uri, String u) throws JdbcSQLException {     Properties props = new Properties().     try {         if (uri.getRawQuery() != null) {             // parse properties             List<String> prms = StringUtils.tokenize(uri.getRawQuery(), "&").             for (String param : prms) {                 List<String> args = StringUtils.tokenize(param, "=").                 if (args.size() != 2) {                     throw new JdbcSQLException("Invalid parameter [" + param + "], format needs to be key=value").                 }                 // further validation happens in the constructor (since extra properties might be specified either way)                 props.setProperty(args.get(0).trim(), args.get(1).trim()).             }         }     } catch (JdbcSQLException e) {         throw e.     } catch (Exception e) {         // Add the url to unexpected exceptions         throw new IllegalArgumentException("Failed to parse acceptable jdbc url [" + u + "]", e).     }     return props. }
false;protected;0;4;;@Override protected Collection<? extends String> extraOptions() {     return OPTION_NAMES. }
false;public;0;3;;public boolean debug() {     return debug. }
false;public;0;3;;public String debugOut() {     return debugOut. }
false;public;0;3;;public TimeZone timeZone() {     return zoneId != null ? TimeZone.getTimeZone(zoneId) : null. }
false;public;1;3;;public void timeZone(TimeZone timeZone) {     this.zoneId = timeZone != null ? timeZone.toZoneId() : null. }
false;public,static;1;3;;public static boolean canAccept(String url) {     return (StringUtils.hasText(url) && url.trim().startsWith(JdbcConfiguration.URL_PREFIX)). }
false;public;0;10;;public DriverPropertyInfo[] driverPropertyInfo() {     List<DriverPropertyInfo> info = new ArrayList<>().     for (String option : OPTION_NAMES) {         String value = null.         DriverPropertyInfo prop = new DriverPropertyInfo(option, value).         info.add(prop).     }     return info.toArray(new DriverPropertyInfo[info.size()]). }
