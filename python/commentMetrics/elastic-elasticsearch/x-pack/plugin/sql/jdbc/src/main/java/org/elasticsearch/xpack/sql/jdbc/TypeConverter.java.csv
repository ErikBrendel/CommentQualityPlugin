# id;timestamp;commentText;codeText;commentWords;codeWords
TypeConverter -> static Time convertTime(Long millis, Calendar cal);1543402106;Converts millisecond after epoc to time;static Time convertTime(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> {_            c.set(ERA, GregorianCalendar.AD)__            c.set(YEAR, 1970)__            c.set(MONTH, 0)__            c.set(DAY_OF_MONTH, 1)__            return new Time(c.getTimeInMillis())__        })__    };converts,millisecond,after,epoc,to,time;static,time,convert,time,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,c,set,era,gregorian,calendar,ad,c,set,year,1970,c,set,month,0,c,set,1,return,new,time,c,get,time,in,millis
TypeConverter -> static Time convertTime(Long millis, Calendar cal);1544804437;Converts millisecond after epoc to time;static Time convertTime(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> {_            c.set(ERA, GregorianCalendar.AD)__            c.set(YEAR, 1970)__            c.set(MONTH, 0)__            c.set(DAY_OF_MONTH, 1)__            return new Time(c.getTimeInMillis())__        })__    };converts,millisecond,after,epoc,to,time;static,time,convert,time,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,c,set,era,gregorian,calendar,ad,c,set,year,1970,c,set,month,0,c,set,1,return,new,time,c,get,time,in,millis
TypeConverter -> static Time convertTime(Long millis, Calendar cal);1545230176;Converts millisecond after epoc to time;static Time convertTime(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> {_            c.set(ERA, GregorianCalendar.AD)__            c.set(YEAR, 1970)__            c.set(MONTH, 0)__            c.set(DAY_OF_MONTH, 1)__            return new Time(c.getTimeInMillis())__        })__    };converts,millisecond,after,epoc,to,time;static,time,convert,time,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,c,set,era,gregorian,calendar,ad,c,set,year,1970,c,set,month,0,c,set,1,return,new,time,c,get,time,in,millis
TypeConverter -> static Time convertTime(Long millis, Calendar cal);1547713078;Converts millisecond after epoc to time;static Time convertTime(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> {_            c.set(ERA, GregorianCalendar.AD)__            c.set(YEAR, 1970)__            c.set(MONTH, 0)__            c.set(DAY_OF_MONTH, 1)__            return new Time(c.getTimeInMillis())__        })__    };converts,millisecond,after,epoc,to,time;static,time,convert,time,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,c,set,era,gregorian,calendar,ad,c,set,year,1970,c,set,month,0,c,set,1,return,new,time,c,get,time,in,millis
TypeConverter -> static Time convertTime(Long millis, Calendar cal);1548330118;Converts millisecond after epoc to time;static Time convertTime(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> {_            c.set(ERA, GregorianCalendar.AD)__            c.set(YEAR, 1970)__            c.set(MONTH, 0)__            c.set(DAY_OF_MONTH, 1)__            return new Time(c.getTimeInMillis())__        })__    };converts,millisecond,after,epoc,to,time;static,time,convert,time,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,c,set,era,gregorian,calendar,ad,c,set,year,1970,c,set,month,0,c,set,1,return,new,time,c,get,time,in,millis
TypeConverter -> static Timestamp convertTimestamp(Long millis, Calendar cal);1543402106;Converts millisecond after epoc to timestamp;static Timestamp convertTimestamp(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> new Timestamp(c.getTimeInMillis()))__    };converts,millisecond,after,epoc,to,timestamp;static,timestamp,convert,timestamp,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,new,timestamp,c,get,time,in,millis
TypeConverter -> static Timestamp convertTimestamp(Long millis, Calendar cal);1544804437;Converts millisecond after epoc to timestamp;static Timestamp convertTimestamp(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> new Timestamp(c.getTimeInMillis()))__    };converts,millisecond,after,epoc,to,timestamp;static,timestamp,convert,timestamp,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,new,timestamp,c,get,time,in,millis
TypeConverter -> static Timestamp convertTimestamp(Long millis, Calendar cal);1545230176;Converts millisecond after epoc to timestamp;static Timestamp convertTimestamp(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> new Timestamp(c.getTimeInMillis()))__    };converts,millisecond,after,epoc,to,timestamp;static,timestamp,convert,timestamp,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,new,timestamp,c,get,time,in,millis
TypeConverter -> static Timestamp convertTimestamp(Long millis, Calendar cal);1547713078;Converts millisecond after epoc to timestamp;static Timestamp convertTimestamp(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> new Timestamp(c.getTimeInMillis()))__    };converts,millisecond,after,epoc,to,timestamp;static,timestamp,convert,timestamp,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,new,timestamp,c,get,time,in,millis
TypeConverter -> static Timestamp convertTimestamp(Long millis, Calendar cal);1548330118;Converts millisecond after epoc to timestamp;static Timestamp convertTimestamp(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> new Timestamp(c.getTimeInMillis()))__    };converts,millisecond,after,epoc,to,timestamp;static,timestamp,convert,timestamp,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,new,timestamp,c,get,time,in,millis
TypeConverter -> static Date convertDate(Long millis, Calendar cal);1543402106;Converts millisecond after epoc to date;static Date convertDate(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> {_            c.set(HOUR_OF_DAY, 0)__            c.set(MINUTE, 0)__            c.set(SECOND, 0)__            c.set(MILLISECOND, 0)__            return new Date(c.getTimeInMillis())__        })__    };converts,millisecond,after,epoc,to,date;static,date,convert,date,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,c,set,0,c,set,minute,0,c,set,second,0,c,set,millisecond,0,return,new,date,c,get,time,in,millis
TypeConverter -> static Date convertDate(Long millis, Calendar cal);1544804437;Converts millisecond after epoc to date;static Date convertDate(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> {_            c.set(HOUR_OF_DAY, 0)__            c.set(MINUTE, 0)__            c.set(SECOND, 0)__            c.set(MILLISECOND, 0)__            return new Date(c.getTimeInMillis())__        })__    };converts,millisecond,after,epoc,to,date;static,date,convert,date,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,c,set,0,c,set,minute,0,c,set,second,0,c,set,millisecond,0,return,new,date,c,get,time,in,millis
TypeConverter -> static Date convertDate(Long millis, Calendar cal);1545230176;Converts millisecond after epoc to date;static Date convertDate(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> {_            c.set(HOUR_OF_DAY, 0)__            c.set(MINUTE, 0)__            c.set(SECOND, 0)__            c.set(MILLISECOND, 0)__            return new Date(c.getTimeInMillis())__        })__    };converts,millisecond,after,epoc,to,date;static,date,convert,date,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,c,set,0,c,set,minute,0,c,set,second,0,c,set,millisecond,0,return,new,date,c,get,time,in,millis
TypeConverter -> static Date convertDate(Long millis, Calendar cal);1547713078;Converts millisecond after epoc to date;static Date convertDate(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> {_            c.set(HOUR_OF_DAY, 0)__            c.set(MINUTE, 0)__            c.set(SECOND, 0)__            c.set(MILLISECOND, 0)__            return new Date(c.getTimeInMillis())__        })__    };converts,millisecond,after,epoc,to,date;static,date,convert,date,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,c,set,0,c,set,minute,0,c,set,second,0,c,set,millisecond,0,return,new,date,c,get,time,in,millis
TypeConverter -> static Date convertDate(Long millis, Calendar cal);1548330118;Converts millisecond after epoc to date;static Date convertDate(Long millis, Calendar cal) {_        return dateTimeConvert(millis, cal, c -> {_            c.set(HOUR_OF_DAY, 0)__            c.set(MINUTE, 0)__            c.set(SECOND, 0)__            c.set(MILLISECOND, 0)__            return new Date(c.getTimeInMillis())__        })__    };converts,millisecond,after,epoc,to,date;static,date,convert,date,long,millis,calendar,cal,return,date,time,convert,millis,cal,c,c,set,0,c,set,minute,0,c,set,second,0,c,set,millisecond,0,return,new,date,c,get,time,in,millis
TypeConverter -> static Object convert(Object v, EsType columnType, String typeString) throws SQLException;1543402106;Converts the object from JSON representation to the specified JDBCType;static Object convert(Object v, EsType columnType, String typeString) throws SQLException {_        switch (columnType) {_            case NULL:_                return null__            case BOOLEAN:_            case TEXT:_            case KEYWORD:_                return v_ _            case BYTE:_                return ((Number) v).byteValue()_ _            case SHORT:_                return ((Number) v).shortValue()_ _            case INTEGER:_                return ((Number) v).intValue()__            case LONG:_                return ((Number) v).longValue()__            case HALF_FLOAT:_            case SCALED_FLOAT:_            case DOUBLE:_                return doubleValue(v)_ _            case FLOAT:_                return floatValue(v)_ _            case DATE:_                return new Timestamp(((Number) v).longValue())__            case INTERVAL_YEAR:_            case INTERVAL_MONTH:_            case INTERVAL_YEAR_TO_MONTH:_                return Period.parse(v.toString())__            case INTERVAL_DAY:_            case INTERVAL_HOUR:_            case INTERVAL_MINUTE:_            case INTERVAL_SECOND:_            case INTERVAL_DAY_TO_HOUR:_            case INTERVAL_DAY_TO_MINUTE:_            case INTERVAL_DAY_TO_SECOND:_            case INTERVAL_HOUR_TO_MINUTE:_            case INTERVAL_HOUR_TO_SECOND:_            case INTERVAL_MINUTE_TO_SECOND:_                return Duration.parse(v.toString())__            default:_                throw new SQLException("Unexpected column type [" + typeString + "]")___        }_    };converts,the,object,from,json,representation,to,the,specified,jdbctype;static,object,convert,object,v,es,type,column,type,string,type,string,throws,sqlexception,switch,column,type,case,null,return,null,case,boolean,case,text,case,keyword,return,v,case,byte,return,number,v,byte,value,case,short,return,number,v,short,value,case,integer,return,number,v,int,value,case,long,return,number,v,long,value,case,case,case,double,return,double,value,v,case,float,return,float,value,v,case,date,return,new,timestamp,number,v,long,value,case,case,case,return,period,parse,v,to,string,case,case,case,case,case,case,case,case,case,case,return,duration,parse,v,to,string,default,throw,new,sqlexception,unexpected,column,type,type,string
TypeConverter -> static Object convert(Object v, EsType columnType, String typeString) throws SQLException;1544804437;Converts the object from JSON representation to the specified JDBCType;static Object convert(Object v, EsType columnType, String typeString) throws SQLException {_        switch (columnType) {_            case NULL:_                return null__            case BOOLEAN:_            case TEXT:_            case KEYWORD:_                return v_ _            case BYTE:_                return ((Number) v).byteValue()_ _            case SHORT:_                return ((Number) v).shortValue()_ _            case INTEGER:_                return ((Number) v).intValue()__            case LONG:_                return ((Number) v).longValue()__            case HALF_FLOAT:_            case SCALED_FLOAT:_            case DOUBLE:_                return doubleValue(v)_ _            case FLOAT:_                return floatValue(v)_ _            case DATE:_                return new Timestamp(((Number) v).longValue())__            case INTERVAL_YEAR:_            case INTERVAL_MONTH:_            case INTERVAL_YEAR_TO_MONTH:_                return Period.parse(v.toString())__            case INTERVAL_DAY:_            case INTERVAL_HOUR:_            case INTERVAL_MINUTE:_            case INTERVAL_SECOND:_            case INTERVAL_DAY_TO_HOUR:_            case INTERVAL_DAY_TO_MINUTE:_            case INTERVAL_DAY_TO_SECOND:_            case INTERVAL_HOUR_TO_MINUTE:_            case INTERVAL_HOUR_TO_SECOND:_            case INTERVAL_MINUTE_TO_SECOND:_                return Duration.parse(v.toString())__            default:_                throw new SQLException("Unexpected column type [" + typeString + "]")___        }_    };converts,the,object,from,json,representation,to,the,specified,jdbctype;static,object,convert,object,v,es,type,column,type,string,type,string,throws,sqlexception,switch,column,type,case,null,return,null,case,boolean,case,text,case,keyword,return,v,case,byte,return,number,v,byte,value,case,short,return,number,v,short,value,case,integer,return,number,v,int,value,case,long,return,number,v,long,value,case,case,case,double,return,double,value,v,case,float,return,float,value,v,case,date,return,new,timestamp,number,v,long,value,case,case,case,return,period,parse,v,to,string,case,case,case,case,case,case,case,case,case,case,return,duration,parse,v,to,string,default,throw,new,sqlexception,unexpected,column,type,type,string
TypeConverter -> static Object convert(Object v, EsType columnType, String typeString) throws SQLException;1545230176;Converts the object from JSON representation to the specified JDBCType;static Object convert(Object v, EsType columnType, String typeString) throws SQLException {_        switch (columnType) {_            case NULL:_                return null__            case BOOLEAN:_            case TEXT:_            case KEYWORD:_                return v_ _            case BYTE:_                return ((Number) v).byteValue()_ _            case SHORT:_                return ((Number) v).shortValue()_ _            case INTEGER:_                return ((Number) v).intValue()__            case LONG:_                return ((Number) v).longValue()__            case HALF_FLOAT:_            case SCALED_FLOAT:_            case DOUBLE:_                return doubleValue(v)_ _            case FLOAT:_                return floatValue(v)_ _            case DATE:_                return JdbcDateUtils.asDateTimeField(v, JdbcDateUtils::asTimestamp, Timestamp::new)__            case INTERVAL_YEAR:_            case INTERVAL_MONTH:_            case INTERVAL_YEAR_TO_MONTH:_                return Period.parse(v.toString())__            case INTERVAL_DAY:_            case INTERVAL_HOUR:_            case INTERVAL_MINUTE:_            case INTERVAL_SECOND:_            case INTERVAL_DAY_TO_HOUR:_            case INTERVAL_DAY_TO_MINUTE:_            case INTERVAL_DAY_TO_SECOND:_            case INTERVAL_HOUR_TO_MINUTE:_            case INTERVAL_HOUR_TO_SECOND:_            case INTERVAL_MINUTE_TO_SECOND:_                return Duration.parse(v.toString())__            default:_                throw new SQLException("Unexpected column type [" + typeString + "]")___        }_    };converts,the,object,from,json,representation,to,the,specified,jdbctype;static,object,convert,object,v,es,type,column,type,string,type,string,throws,sqlexception,switch,column,type,case,null,return,null,case,boolean,case,text,case,keyword,return,v,case,byte,return,number,v,byte,value,case,short,return,number,v,short,value,case,integer,return,number,v,int,value,case,long,return,number,v,long,value,case,case,case,double,return,double,value,v,case,float,return,float,value,v,case,date,return,jdbc,date,utils,as,date,time,field,v,jdbc,date,utils,as,timestamp,timestamp,new,case,case,case,return,period,parse,v,to,string,case,case,case,case,case,case,case,case,case,case,return,duration,parse,v,to,string,default,throw,new,sqlexception,unexpected,column,type,type,string
TypeConverter -> static Object convert(Object v, EsType columnType, String typeString) throws SQLException;1547713078;Converts the object from JSON representation to the specified JDBCType;static Object convert(Object v, EsType columnType, String typeString) throws SQLException {_        switch (columnType) {_            case NULL:_                return null__            case BOOLEAN:_            case TEXT:_            case KEYWORD:_                return v_ _            case BYTE:_                return ((Number) v).byteValue()_ _            case SHORT:_                return ((Number) v).shortValue()_ _            case INTEGER:_                return ((Number) v).intValue()__            case LONG:_                return ((Number) v).longValue()__            case HALF_FLOAT:_            case SCALED_FLOAT:_            case DOUBLE:_                return doubleValue(v)_ _            case FLOAT:_                return floatValue(v)_ _            case DATETIME:_                return JdbcDateUtils.asDateTimeField(v, JdbcDateUtils::asTimestamp, Timestamp::new)__            case INTERVAL_YEAR:_            case INTERVAL_MONTH:_            case INTERVAL_YEAR_TO_MONTH:_                return Period.parse(v.toString())__            case INTERVAL_DAY:_            case INTERVAL_HOUR:_            case INTERVAL_MINUTE:_            case INTERVAL_SECOND:_            case INTERVAL_DAY_TO_HOUR:_            case INTERVAL_DAY_TO_MINUTE:_            case INTERVAL_DAY_TO_SECOND:_            case INTERVAL_HOUR_TO_MINUTE:_            case INTERVAL_HOUR_TO_SECOND:_            case INTERVAL_MINUTE_TO_SECOND:_                return Duration.parse(v.toString())__            default:_                throw new SQLException("Unexpected column type [" + typeString + "]")___        }_    };converts,the,object,from,json,representation,to,the,specified,jdbctype;static,object,convert,object,v,es,type,column,type,string,type,string,throws,sqlexception,switch,column,type,case,null,return,null,case,boolean,case,text,case,keyword,return,v,case,byte,return,number,v,byte,value,case,short,return,number,v,short,value,case,integer,return,number,v,int,value,case,long,return,number,v,long,value,case,case,case,double,return,double,value,v,case,float,return,float,value,v,case,datetime,return,jdbc,date,utils,as,date,time,field,v,jdbc,date,utils,as,timestamp,timestamp,new,case,case,case,return,period,parse,v,to,string,case,case,case,case,case,case,case,case,case,case,return,duration,parse,v,to,string,default,throw,new,sqlexception,unexpected,column,type,type,string
TypeConverter -> static Object convert(Object v, EsType columnType, String typeString) throws SQLException;1548330118;Converts the object from JSON representation to the specified JDBCType;static Object convert(Object v, EsType columnType, String typeString) throws SQLException {_        switch (columnType) {_            case NULL:_                return null__            case BOOLEAN:_            case TEXT:_            case KEYWORD:_                return v_ _            case BYTE:_                return ((Number) v).byteValue()_ _            case SHORT:_                return ((Number) v).shortValue()_ _            case INTEGER:_                return ((Number) v).intValue()__            case LONG:_                return ((Number) v).longValue()__            case HALF_FLOAT:_            case SCALED_FLOAT:_            case DOUBLE:_                return doubleValue(v)_ _            case FLOAT:_                return floatValue(v)_ _            case DATE:_                return JdbcDateUtils.asDateTimeField(v, JdbcDateUtils::asDate, Date::new)__            case DATETIME:_                return JdbcDateUtils.asDateTimeField(v, JdbcDateUtils::asTimestamp, Timestamp::new)__            case INTERVAL_YEAR:_            case INTERVAL_MONTH:_            case INTERVAL_YEAR_TO_MONTH:_                return Period.parse(v.toString())__            case INTERVAL_DAY:_            case INTERVAL_HOUR:_            case INTERVAL_MINUTE:_            case INTERVAL_SECOND:_            case INTERVAL_DAY_TO_HOUR:_            case INTERVAL_DAY_TO_MINUTE:_            case INTERVAL_DAY_TO_SECOND:_            case INTERVAL_HOUR_TO_MINUTE:_            case INTERVAL_HOUR_TO_SECOND:_            case INTERVAL_MINUTE_TO_SECOND:_                return Duration.parse(v.toString())__            default:_                throw new SQLException("Unexpected column type [" + typeString + "]")___        }_    };converts,the,object,from,json,representation,to,the,specified,jdbctype;static,object,convert,object,v,es,type,column,type,string,type,string,throws,sqlexception,switch,column,type,case,null,return,null,case,boolean,case,text,case,keyword,return,v,case,byte,return,number,v,byte,value,case,short,return,number,v,short,value,case,integer,return,number,v,int,value,case,long,return,number,v,long,value,case,case,case,double,return,double,value,v,case,float,return,float,value,v,case,date,return,jdbc,date,utils,as,date,time,field,v,jdbc,date,utils,as,date,date,new,case,datetime,return,jdbc,date,utils,as,date,time,field,v,jdbc,date,utils,as,timestamp,timestamp,new,case,case,case,return,period,parse,v,to,string,case,case,case,case,case,case,case,case,case,case,return,duration,parse,v,to,string,default,throw,new,sqlexception,unexpected,column,type,type,string
TypeConverter -> @SuppressWarnings("unchecked")     static <T> T convert(Object val, EsType columnType, Class<T> type, String typeString) throws SQLException;1543402106;Converts object val from columnType to type;@SuppressWarnings("unchecked")_    static <T> T convert(Object val, EsType columnType, Class<T> type, String typeString) throws SQLException {_        if (type == null) {_            return (T) convert(val, columnType, typeString)__        }__        _        _        _        if (!(type == Long.class && columnType == EsType.DATE) && type.isInstance(val)) {_            try {_                return type.cast(val)__            } catch (ClassCastException cce) {_                failConversion(val, columnType, typeString, type, cce)__            }_        }__        if (type == String.class) {_            return (T) asString(convert(val, columnType, typeString))__        }_        if (type == Boolean.class) {_            return (T) asBoolean(val, columnType, typeString)__        }_        if (type == Byte.class) {_            return (T) asByte(val, columnType, typeString)__        }_        if (type == Short.class) {_            return (T) asShort(val, columnType, typeString)__        }_        if (type == Integer.class) {_            return (T) asInteger(val, columnType, typeString)__        }_        if (type == Long.class) {_            return (T) asLong(val, columnType, typeString)__        }_        if (type == Float.class) {_            return (T) asFloat(val, columnType, typeString)__        }_        if (type == Double.class) {_            return (T) asDouble(val, columnType, typeString)__        }_        if (type == Date.class) {_            return (T) asDate(val, columnType, typeString)__        }_        if (type == Time.class) {_            return (T) asTime(val, columnType, typeString)__        }_        if (type == Timestamp.class) {_            return (T) asTimestamp(val, columnType, typeString)__        }_        if (type == byte[].class) {_            return (T) asByteArray(val, columnType, typeString)__        }_        _        _        _        if (type == LocalDate.class) {_            return (T) asLocalDate(val, columnType, typeString)__        }_        if (type == LocalTime.class) {_            return (T) asLocalTime(val, columnType, typeString)__        }_        if (type == LocalDateTime.class) {_            return (T) asLocalDateTime(val, columnType, typeString)__        }_        if (type == OffsetTime.class) {_            return (T) asOffsetTime(val, columnType, typeString)__        }_        if (type == OffsetDateTime.class) {_            return (T) asOffsetDateTime(val, columnType, typeString)__        }__        return failConversion(val, columnType, typeString, type)__    };converts,object,val,from,column,type,to,type;suppress,warnings,unchecked,static,t,t,convert,object,val,es,type,column,type,class,t,type,string,type,string,throws,sqlexception,if,type,null,return,t,convert,val,column,type,type,string,if,type,long,class,column,type,es,type,date,type,is,instance,val,try,return,type,cast,val,catch,class,cast,exception,cce,fail,conversion,val,column,type,type,string,type,cce,if,type,string,class,return,t,as,string,convert,val,column,type,type,string,if,type,boolean,class,return,t,as,boolean,val,column,type,type,string,if,type,byte,class,return,t,as,byte,val,column,type,type,string,if,type,short,class,return,t,as,short,val,column,type,type,string,if,type,integer,class,return,t,as,integer,val,column,type,type,string,if,type,long,class,return,t,as,long,val,column,type,type,string,if,type,float,class,return,t,as,float,val,column,type,type,string,if,type,double,class,return,t,as,double,val,column,type,type,string,if,type,date,class,return,t,as,date,val,column,type,type,string,if,type,time,class,return,t,as,time,val,column,type,type,string,if,type,timestamp,class,return,t,as,timestamp,val,column,type,type,string,if,type,byte,class,return,t,as,byte,array,val,column,type,type,string,if,type,local,date,class,return,t,as,local,date,val,column,type,type,string,if,type,local,time,class,return,t,as,local,time,val,column,type,type,string,if,type,local,date,time,class,return,t,as,local,date,time,val,column,type,type,string,if,type,offset,time,class,return,t,as,offset,time,val,column,type,type,string,if,type,offset,date,time,class,return,t,as,offset,date,time,val,column,type,type,string,return,fail,conversion,val,column,type,type,string,type
TypeConverter -> @SuppressWarnings("unchecked")     static <T> T convert(Object val, EsType columnType, Class<T> type, String typeString) throws SQLException;1544804437;Converts object val from columnType to type;@SuppressWarnings("unchecked")_    static <T> T convert(Object val, EsType columnType, Class<T> type, String typeString) throws SQLException {_        if (type == null) {_            return (T) convert(val, columnType, typeString)__        }__        _        _        _        _        if (type.isInstance(val) && TypeUtils.classOf(columnType) == type) {_            try {_                return type.cast(val)__            } catch (ClassCastException cce) {_                failConversion(val, columnType, typeString, type, cce)__            }_        }__        if (type == String.class) {_            return (T) asString(convert(val, columnType, typeString))__        }_        if (type == Boolean.class) {_            return (T) asBoolean(val, columnType, typeString)__        }_        if (type == Byte.class) {_            return (T) asByte(val, columnType, typeString)__        }_        if (type == Short.class) {_            return (T) asShort(val, columnType, typeString)__        }_        if (type == Integer.class) {_            return (T) asInteger(val, columnType, typeString)__        }_        if (type == Long.class) {_            return (T) asLong(val, columnType, typeString)__        }_        if (type == Float.class) {_            return (T) asFloat(val, columnType, typeString)__        }_        if (type == Double.class) {_            return (T) asDouble(val, columnType, typeString)__        }_        if (type == Date.class) {_            return (T) asDate(val, columnType, typeString)__        }_        if (type == Time.class) {_            return (T) asTime(val, columnType, typeString)__        }_        if (type == Timestamp.class) {_            return (T) asTimestamp(val, columnType, typeString)__        }_        if (type == byte[].class) {_            return (T) asByteArray(val, columnType, typeString)__        }_        _        _        _        if (type == LocalDate.class) {_            return (T) asLocalDate(val, columnType, typeString)__        }_        if (type == LocalTime.class) {_            return (T) asLocalTime(val, columnType, typeString)__        }_        if (type == LocalDateTime.class) {_            return (T) asLocalDateTime(val, columnType, typeString)__        }_        if (type == OffsetTime.class) {_            return (T) asOffsetTime(val, columnType, typeString)__        }_        if (type == OffsetDateTime.class) {_            return (T) asOffsetDateTime(val, columnType, typeString)__        }__        return failConversion(val, columnType, typeString, type)__    };converts,object,val,from,column,type,to,type;suppress,warnings,unchecked,static,t,t,convert,object,val,es,type,column,type,class,t,type,string,type,string,throws,sqlexception,if,type,null,return,t,convert,val,column,type,type,string,if,type,is,instance,val,type,utils,class,of,column,type,type,try,return,type,cast,val,catch,class,cast,exception,cce,fail,conversion,val,column,type,type,string,type,cce,if,type,string,class,return,t,as,string,convert,val,column,type,type,string,if,type,boolean,class,return,t,as,boolean,val,column,type,type,string,if,type,byte,class,return,t,as,byte,val,column,type,type,string,if,type,short,class,return,t,as,short,val,column,type,type,string,if,type,integer,class,return,t,as,integer,val,column,type,type,string,if,type,long,class,return,t,as,long,val,column,type,type,string,if,type,float,class,return,t,as,float,val,column,type,type,string,if,type,double,class,return,t,as,double,val,column,type,type,string,if,type,date,class,return,t,as,date,val,column,type,type,string,if,type,time,class,return,t,as,time,val,column,type,type,string,if,type,timestamp,class,return,t,as,timestamp,val,column,type,type,string,if,type,byte,class,return,t,as,byte,array,val,column,type,type,string,if,type,local,date,class,return,t,as,local,date,val,column,type,type,string,if,type,local,time,class,return,t,as,local,time,val,column,type,type,string,if,type,local,date,time,class,return,t,as,local,date,time,val,column,type,type,string,if,type,offset,time,class,return,t,as,offset,time,val,column,type,type,string,if,type,offset,date,time,class,return,t,as,offset,date,time,val,column,type,type,string,return,fail,conversion,val,column,type,type,string,type
TypeConverter -> @SuppressWarnings("unchecked")     static <T> T convert(Object val, EsType columnType, Class<T> type, String typeString) throws SQLException;1545230176;Converts object val from columnType to type;@SuppressWarnings("unchecked")_    static <T> T convert(Object val, EsType columnType, Class<T> type, String typeString) throws SQLException {_        if (type == null) {_            return (T) convert(val, columnType, typeString)__        }__        _        _        _        _        if (type.isInstance(val) && TypeUtils.classOf(columnType) == type) {_            try {_                return type.cast(val)__            } catch (ClassCastException cce) {_                failConversion(val, columnType, typeString, type, cce)__            }_        }__        if (type == String.class) {_            return (T) asString(convert(val, columnType, typeString))__        }_        if (type == Boolean.class) {_            return (T) asBoolean(val, columnType, typeString)__        }_        if (type == Byte.class) {_            return (T) asByte(val, columnType, typeString)__        }_        if (type == Short.class) {_            return (T) asShort(val, columnType, typeString)__        }_        if (type == Integer.class) {_            return (T) asInteger(val, columnType, typeString)__        }_        if (type == Long.class) {_            return (T) asLong(val, columnType, typeString)__        }_        if (type == Float.class) {_            return (T) asFloat(val, columnType, typeString)__        }_        if (type == Double.class) {_            return (T) asDouble(val, columnType, typeString)__        }_        if (type == Date.class) {_            return (T) asDate(val, columnType, typeString)__        }_        if (type == Time.class) {_            return (T) asTime(val, columnType, typeString)__        }_        if (type == Timestamp.class) {_            return (T) asTimestamp(val, columnType, typeString)__        }_        if (type == byte[].class) {_            return (T) asByteArray(val, columnType, typeString)__        }_        _        _        _        if (type == LocalDate.class) {_            return (T) asLocalDate(val, columnType, typeString)__        }_        if (type == LocalTime.class) {_            return (T) asLocalTime(val, columnType, typeString)__        }_        if (type == LocalDateTime.class) {_            return (T) asLocalDateTime(val, columnType, typeString)__        }_        if (type == OffsetTime.class) {_            return (T) asOffsetTime(val, columnType, typeString)__        }_        if (type == OffsetDateTime.class) {_            return (T) asOffsetDateTime(val, columnType, typeString)__        }__        return failConversion(val, columnType, typeString, type)__    };converts,object,val,from,column,type,to,type;suppress,warnings,unchecked,static,t,t,convert,object,val,es,type,column,type,class,t,type,string,type,string,throws,sqlexception,if,type,null,return,t,convert,val,column,type,type,string,if,type,is,instance,val,type,utils,class,of,column,type,type,try,return,type,cast,val,catch,class,cast,exception,cce,fail,conversion,val,column,type,type,string,type,cce,if,type,string,class,return,t,as,string,convert,val,column,type,type,string,if,type,boolean,class,return,t,as,boolean,val,column,type,type,string,if,type,byte,class,return,t,as,byte,val,column,type,type,string,if,type,short,class,return,t,as,short,val,column,type,type,string,if,type,integer,class,return,t,as,integer,val,column,type,type,string,if,type,long,class,return,t,as,long,val,column,type,type,string,if,type,float,class,return,t,as,float,val,column,type,type,string,if,type,double,class,return,t,as,double,val,column,type,type,string,if,type,date,class,return,t,as,date,val,column,type,type,string,if,type,time,class,return,t,as,time,val,column,type,type,string,if,type,timestamp,class,return,t,as,timestamp,val,column,type,type,string,if,type,byte,class,return,t,as,byte,array,val,column,type,type,string,if,type,local,date,class,return,t,as,local,date,val,column,type,type,string,if,type,local,time,class,return,t,as,local,time,val,column,type,type,string,if,type,local,date,time,class,return,t,as,local,date,time,val,column,type,type,string,if,type,offset,time,class,return,t,as,offset,time,val,column,type,type,string,if,type,offset,date,time,class,return,t,as,offset,date,time,val,column,type,type,string,return,fail,conversion,val,column,type,type,string,type
TypeConverter -> @SuppressWarnings("unchecked")     static <T> T convert(Object val, EsType columnType, Class<T> type, String typeString) throws SQLException;1547713078;Converts object val from columnType to type;@SuppressWarnings("unchecked")_    static <T> T convert(Object val, EsType columnType, Class<T> type, String typeString) throws SQLException {_        if (type == null) {_            return (T) convert(val, columnType, typeString)__        }__        _        _        _        _        if (type.isInstance(val) && TypeUtils.classOf(columnType) == type) {_            try {_                return type.cast(val)__            } catch (ClassCastException cce) {_                failConversion(val, columnType, typeString, type, cce)__            }_        }__        if (type == String.class) {_            return (T) asString(convert(val, columnType, typeString))__        }_        if (type == Boolean.class) {_            return (T) asBoolean(val, columnType, typeString)__        }_        if (type == Byte.class) {_            return (T) asByte(val, columnType, typeString)__        }_        if (type == Short.class) {_            return (T) asShort(val, columnType, typeString)__        }_        if (type == Integer.class) {_            return (T) asInteger(val, columnType, typeString)__        }_        if (type == Long.class) {_            return (T) asLong(val, columnType, typeString)__        }_        if (type == Float.class) {_            return (T) asFloat(val, columnType, typeString)__        }_        if (type == Double.class) {_            return (T) asDouble(val, columnType, typeString)__        }_        if (type == Date.class) {_            return (T) asDate(val, columnType, typeString)__        }_        if (type == Time.class) {_            return (T) asTime(val, columnType, typeString)__        }_        if (type == Timestamp.class) {_            return (T) asTimestamp(val, columnType, typeString)__        }_        if (type == byte[].class) {_            return (T) asByteArray(val, columnType, typeString)__        }_        _        _        _        if (type == LocalDate.class) {_            return (T) asLocalDate(val, columnType, typeString)__        }_        if (type == LocalTime.class) {_            return (T) asLocalTime(val, columnType, typeString)__        }_        if (type == LocalDateTime.class) {_            return (T) asLocalDateTime(val, columnType, typeString)__        }_        if (type == OffsetTime.class) {_            return (T) asOffsetTime(val, columnType, typeString)__        }_        if (type == OffsetDateTime.class) {_            return (T) asOffsetDateTime(val, columnType, typeString)__        }__        return failConversion(val, columnType, typeString, type)__    };converts,object,val,from,column,type,to,type;suppress,warnings,unchecked,static,t,t,convert,object,val,es,type,column,type,class,t,type,string,type,string,throws,sqlexception,if,type,null,return,t,convert,val,column,type,type,string,if,type,is,instance,val,type,utils,class,of,column,type,type,try,return,type,cast,val,catch,class,cast,exception,cce,fail,conversion,val,column,type,type,string,type,cce,if,type,string,class,return,t,as,string,convert,val,column,type,type,string,if,type,boolean,class,return,t,as,boolean,val,column,type,type,string,if,type,byte,class,return,t,as,byte,val,column,type,type,string,if,type,short,class,return,t,as,short,val,column,type,type,string,if,type,integer,class,return,t,as,integer,val,column,type,type,string,if,type,long,class,return,t,as,long,val,column,type,type,string,if,type,float,class,return,t,as,float,val,column,type,type,string,if,type,double,class,return,t,as,double,val,column,type,type,string,if,type,date,class,return,t,as,date,val,column,type,type,string,if,type,time,class,return,t,as,time,val,column,type,type,string,if,type,timestamp,class,return,t,as,timestamp,val,column,type,type,string,if,type,byte,class,return,t,as,byte,array,val,column,type,type,string,if,type,local,date,class,return,t,as,local,date,val,column,type,type,string,if,type,local,time,class,return,t,as,local,time,val,column,type,type,string,if,type,local,date,time,class,return,t,as,local,date,time,val,column,type,type,string,if,type,offset,time,class,return,t,as,offset,time,val,column,type,type,string,if,type,offset,date,time,class,return,t,as,offset,date,time,val,column,type,type,string,return,fail,conversion,val,column,type,type,string,type
TypeConverter -> @SuppressWarnings("unchecked")     static <T> T convert(Object val, EsType columnType, Class<T> type, String typeString) throws SQLException;1548330118;Converts object val from columnType to type;@SuppressWarnings("unchecked")_    static <T> T convert(Object val, EsType columnType, Class<T> type, String typeString) throws SQLException {_        if (type == null) {_            return (T) convert(val, columnType, typeString)__        }__        _        _        _        _        if (type.isInstance(val) && TypeUtils.classOf(columnType) == type) {_            try {_                return type.cast(val)__            } catch (ClassCastException cce) {_                failConversion(val, columnType, typeString, type, cce)__            }_        }__        if (type == String.class) {_            return (T) asString(convert(val, columnType, typeString))__        }_        if (type == Boolean.class) {_            return (T) asBoolean(val, columnType, typeString)__        }_        if (type == Byte.class) {_            return (T) asByte(val, columnType, typeString)__        }_        if (type == Short.class) {_            return (T) asShort(val, columnType, typeString)__        }_        if (type == Integer.class) {_            return (T) asInteger(val, columnType, typeString)__        }_        if (type == Long.class) {_            return (T) asLong(val, columnType, typeString)__        }_        if (type == Float.class) {_            return (T) asFloat(val, columnType, typeString)__        }_        if (type == Double.class) {_            return (T) asDouble(val, columnType, typeString)__        }_        if (type == Date.class) {_            return (T) asDate(val, columnType, typeString)__        }_        if (type == Time.class) {_            return (T) asTime(val, columnType, typeString)__        }_        if (type == Timestamp.class) {_            return (T) asTimestamp(val, columnType, typeString)__        }_        if (type == byte[].class) {_            return (T) asByteArray(val, columnType, typeString)__        }_        _        _        _        if (type == LocalDate.class) {_            return (T) asLocalDate(val, columnType, typeString)__        }_        if (type == LocalTime.class) {_            return (T) asLocalTime(val, columnType, typeString)__        }_        if (type == LocalDateTime.class) {_            return (T) asLocalDateTime(val, columnType, typeString)__        }_        if (type == OffsetTime.class) {_            return (T) asOffsetTime(val, columnType, typeString)__        }_        if (type == OffsetDateTime.class) {_            return (T) asOffsetDateTime(val, columnType, typeString)__        }__        return failConversion(val, columnType, typeString, type)__    };converts,object,val,from,column,type,to,type;suppress,warnings,unchecked,static,t,t,convert,object,val,es,type,column,type,class,t,type,string,type,string,throws,sqlexception,if,type,null,return,t,convert,val,column,type,type,string,if,type,is,instance,val,type,utils,class,of,column,type,type,try,return,type,cast,val,catch,class,cast,exception,cce,fail,conversion,val,column,type,type,string,type,cce,if,type,string,class,return,t,as,string,convert,val,column,type,type,string,if,type,boolean,class,return,t,as,boolean,val,column,type,type,string,if,type,byte,class,return,t,as,byte,val,column,type,type,string,if,type,short,class,return,t,as,short,val,column,type,type,string,if,type,integer,class,return,t,as,integer,val,column,type,type,string,if,type,long,class,return,t,as,long,val,column,type,type,string,if,type,float,class,return,t,as,float,val,column,type,type,string,if,type,double,class,return,t,as,double,val,column,type,type,string,if,type,date,class,return,t,as,date,val,column,type,type,string,if,type,time,class,return,t,as,time,val,column,type,type,string,if,type,timestamp,class,return,t,as,timestamp,val,column,type,type,string,if,type,byte,class,return,t,as,byte,array,val,column,type,type,string,if,type,local,date,class,return,t,as,local,date,val,column,type,type,string,if,type,local,time,class,return,t,as,local,time,val,column,type,type,string,if,type,local,date,time,class,return,t,as,local,date,time,val,column,type,type,string,if,type,offset,time,class,return,t,as,offset,time,val,column,type,type,string,if,type,offset,date,time,class,return,t,as,offset,date,time,val,column,type,type,string,return,fail,conversion,val,column,type,type,string,type
