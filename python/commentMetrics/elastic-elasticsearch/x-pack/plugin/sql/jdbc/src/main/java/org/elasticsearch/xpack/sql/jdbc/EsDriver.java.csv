commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;public static EsDriver register() throws SQLException {     // no closing callback     DriverManager.registerDriver(INSTANCE, INSTANCE::close).     return INSTANCE. }
false;public,static;0;14;;public static void deregister() throws SQLException {     try {         DriverManager.deregisterDriver(INSTANCE).     } catch (SQLException ex) {         // the SQLException is bogus as there's no source for it         // but we handle it just in case         PrintWriter writer = DriverManager.getLogWriter().         if (writer != null) {             ex.printStackTrace(writer).             writer.flush().         }         throw ex.     } }
true;public;2;13;//  ;//  // Jdbc 4.0 //  @Override public Connection connect(String url, Properties props) throws SQLException {     if (url == null) {         throw new JdbcSQLException("Non-null url required").     }     if (!acceptsURL(url)) {         return null.     }     JdbcConfiguration cfg = initCfg(url, props).     JdbcConnection con = new JdbcConnection(cfg).     return cfg.debug() ? Debug.proxy(cfg, con, DriverManager.getLogWriter()) : con. }
false;private,static;2;3;;private static JdbcConfiguration initCfg(String url, Properties props) throws JdbcSQLException {     return JdbcConfiguration.create(url, props, DriverManager.getLoginTimeout()). }
false;public;1;4;;@Override public boolean acceptsURL(String url) throws SQLException {     return JdbcConfiguration.canAccept(url). }
false;public;2;7;;@Override public DriverPropertyInfo[] getPropertyInfo(String url, Properties info) throws SQLException {     if (!acceptsURL(url)) {         return new DriverPropertyInfo[0].     }     return JdbcConfiguration.create(url, info, DriverManager.getLoginTimeout()).driverPropertyInfo(). }
false;public;0;4;;@Override public int getMajorVersion() {     return Version.CURRENT.major. }
false;public;0;4;;@Override public int getMinorVersion() {     return Version.CURRENT.minor. }
false;public;0;4;;@Override public boolean jdbcCompliant() {     return false. }
false;public;0;4;;//  // Jdbc 4.1 //  @Override public Logger getParentLogger() throws SQLFeatureNotSupportedException {     throw new SQLFeatureNotSupportedException(). }
true;private;0;3;/**  * Cleanup method invoked by the DriverManager when unregistering the driver.  * Since this happens typically when the JDBC driver gets unloaded (from the classloader)  * cleaning all debug information is a good safety check.  */ ;/**  * Cleanup method invoked by the DriverManager when unregistering the driver.  * Since this happens typically when the JDBC driver gets unloaded (from the classloader)  * cleaning all debug information is a good safety check.  */ private void close() {     Debug.close(). }
