commented;modifiers;parameterAmount;loc;comment;code
true;static;3;3;/**  * Create a proxied Connection which performs logging of all methods being invoked.  * Typically Debug will read its configuration from the configuration and act accordingly however  * there are two cases where the output is specified programmatically, namely through  * {@link DriverManager#setLogWriter(PrintWriter)} and {@link DataSource#setLogWriter(PrintWriter)}.  * The former is the 'legacy' way, having a global impact on all drivers while the latter allows per  * instance configuration.  *  * As both approaches are not widely used, Debug will take the principle of least surprise and pick its  * own configuration first. if that does not exist it will fallback to the managed approaches (assuming they  * are specified, otherwise logging is simply disabled).  */ ;/**  * Create a proxied Connection which performs logging of all methods being invoked.  * Typically Debug will read its configuration from the configuration and act accordingly however  * there are two cases where the output is specified programmatically, namely through  * {@link DriverManager#setLogWriter(PrintWriter)} and {@link DataSource#setLogWriter(PrintWriter)}.  * The former is the 'legacy' way, having a global impact on all drivers while the latter allows per  * instance configuration.  *  * As both approaches are not widely used, Debug will take the principle of least surprise and pick its  * own configuration first. if that does not exist it will fallback to the managed approaches (assuming they  * are specified, otherwise logging is simply disabled).  */ static Connection proxy(JdbcConfiguration info, Connection connection, PrintWriter managedPrinter) {     return createProxy(Connection.class, new ConnectionProxy(logger(info, managedPrinter), connection)). }
false;static;1;3;;static DatabaseMetaData proxy(DatabaseMetadataProxy handler) {     return createProxy(DatabaseMetaData.class, handler). }
false;static;1;3;;static ParameterMetaData proxy(ParameterMetaDataProxy handler) {     return createProxy(ParameterMetaData.class, handler). }
false;static;1;3;;static ResultSet proxy(ResultSetProxy handler) {     return createProxy(ResultSet.class, handler). }
false;static;1;3;;static ResultSetMetaData proxy(ResultSetMetaDataProxy handler) {     return createProxy(ResultSetMetaData.class, handler). }
false;static;2;12;;static Statement proxy(Object statement, StatementProxy handler) {     Class<? extends Statement> i = Statement.class.     if (statement instanceof PreparedStatement) {         i = PreparedStatement.class.     } else if (statement instanceof CallableStatement) {         i = CallableStatement.class.     }     return createProxy(i, handler). }
false;private,static;2;4;;@SuppressWarnings("unchecked") private static <P> P createProxy(Class<P> proxy, InvocationHandler handler) {     return (P) Proxy.newProxyInstance(Debug.class.getClassLoader(), new Class<?>[] { DebugProxy.class, proxy }, handler). }
false;private,static;2;71;;private static DebugLog logger(JdbcConfiguration info, PrintWriter managedPrinter) {     DebugLog log = null.     if (managedPrinter != null) {         synchronized (Debug.class) {             log = OUTPUT_MANAGED.get(managedPrinter).             if (log == null) {                 log = new DebugLog(managedPrinter).                 OUTPUT_MANAGED.put(managedPrinter, log).             }             return log.         }     }     String out = info.debugOut().     // System.out/err can be changed so do some checks     if ("err".equals(out)) {         PrintStream sys = stderr().         if (SYS_ERR == null) {             SYS_ERR = sys.         }         if (SYS_ERR != sys) {             SYS_ERR.flush().             SYS_ERR = sys.             ERR = null.         }         if (ERR == null) {             ERR = new DebugLog(new PrintWriter(new OutputStreamWriter(sys, StandardCharsets.UTF_8))).         }         return ERR.     }     if ("out".equals(out)) {         PrintStream sys = stdout().         if (SYS_OUT == null) {             SYS_OUT = sys.         }         if (SYS_OUT != sys) {             SYS_OUT.flush().             SYS_OUT = sys.             OUT = null.         }         if (OUT == null) {             OUT = new DebugLog(new PrintWriter(new OutputStreamWriter(sys, StandardCharsets.UTF_8))).         }         return OUT.     }     synchronized (Debug.class) {         log = OUTPUT_CACHE.get(out).         if (log == null) {             // must be local file             try {                 PrintWriter print = new PrintWriter(Files.newBufferedWriter(Paths.get("").resolve(out), StandardCharsets.UTF_8)).                 log = new DebugLog(print).                 OUTPUT_CACHE.put(out, log).                 OUTPUT_REFS.put(out, Integer.valueOf(0)).             } catch (Exception ex) {                 throw new JdbcException(ex, "Cannot open debug output [" + out + "]").             }         }         OUTPUT_REFS.put(out, Integer.valueOf(OUTPUT_REFS.get(out).intValue() + 1)).     }     return log. }
false;static;1;25;;static void release(JdbcConfiguration info) {     if (!info.debug()) {         return.     }     String out = info.debugOut().     synchronized (Debug.class) {         Integer ref = OUTPUT_REFS.get(out).         if (ref != null) {             int r = ref.intValue().             if (r < 2) {                 OUTPUT_REFS.remove(out).                 DebugLog d = OUTPUT_CACHE.remove(out).                 if (d != null) {                     if (d.print != null) {                         d.print.close().                     }                 }             } else {                 OUTPUT_REFS.put(out, Integer.valueOf(r - 1)).             }         }     } }
false;static,synchronized;0;19;;static synchronized void close() {     // clear the ref     OUTPUT_REFS.clear().     // clear the streams     for (DebugLog d : OUTPUT_CACHE.values()) {         if (d.print != null) {             d.print.close().         }     }     OUTPUT_CACHE.clear().     // flush the managed ones     for (DebugLog d : OUTPUT_MANAGED.values()) {         d.print.flush().     }     OUTPUT_MANAGED.clear(). }
false;private,static;0;4;;@SuppressForbidden(reason = "JDBC drivers allows logging to Sys.out") private static PrintStream stdout() {     return System.out. }
false;private,static;0;4;;@SuppressForbidden(reason = "JDBC drivers allows logging to Sys.err") private static PrintStream stderr() {     return System.err. }
